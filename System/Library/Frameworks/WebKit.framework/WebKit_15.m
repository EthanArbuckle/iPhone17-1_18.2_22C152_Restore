void sub_198D07B5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  v3 = *(unsigned int **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  result = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::{lambda(void *,NSError *)#1}::__invoke(WTF::StringImpl *result, void *a2)
{
  if (a2)
  {
    v2 = (WTF::StringImpl *)((char *)result + 32);
    MEMORY[0x19972EAD0](&v4, [a2 description]);
    WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_1::operator()(v2, v4);
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198D07CA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CF4D0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF4D0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[2];
  if (a2)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        WebKit::WebPageProxy::willOpenAppLink((unsigned int *)(v4 - 16));
      }
    }
    goto LABEL_10;
  }
  if (!v3 || (uint64_t v5 = *(void *)(v3 + 8)) == 0)
  {
LABEL_10:
    v7 = *(void (**)(void))(*(void *)a1[3] + 16);
    v7();
    return;
  }
  v6 = a1 + 1;

  WebKit::trySOAuthorization(v6, (WebKit::WebsiteDataStore **)(v5 - 16), (const WTF::StringImpl *)(a1 + 3));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_1::operator() const(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)v4;
    *(void *)uint64_t v4 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    return WTF::fastFree(v4, v3);
  }
  return result;
}

uint64_t WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled((SEL *)a1[2]);
  if ((result & 1) == 0)
  {
    *(unsigned char *)(a1[2] + 24) = 1;
    if (a3)
    {
      uint64_t v7 = a3 + 8;
    }
    else
    {
      uint64_t v7 = a1[5];
      if (!v7)
      {
LABEL_17:
        uint64_t v8 = a1[3];
        a1[3] = 0;
        uint64_t v10 = *a1;
        uint64_t v9 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v11 = (void *)WTF::fastMalloc((WTF *)0x30);
        void *v11 = &unk_1EE9CF540;
        v11[1] = v9;
        v11[2] = v8;
        v11[3] = a2;
        v11[4] = v10;
        v11[5] = v7;
        v12 = v11;
        WTF::ensureOnMainRunLoop();
        uint64_t result = (uint64_t)v12;
        if (v12) {
          return (*(uint64_t (**)(void *))(*v12 + 8))(v12);
        }
        return result;
      }
    }
    CFRetain(*(CFTypeRef *)(v7 + 8));
    if (*(void *)(v7 + 144) && *((unsigned char *)a1 + 32)) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"WKWebpagePreferences._websiteDataStore must be nil for subframe navigations."];
    }
    if (*(void *)(v7 + 152) && *((unsigned char *)a1 + 32)) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"WKWebpagePreferences._userContentController must be nil for subframe navigations."];
    }
    if (*(void *)(v7 + 64) && *((unsigned char *)a1 + 32)) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"WKWebpagePreferences._customUserAgent must be nil for subframe navigations."];
    }
    if (*(void *)(v7 + 80) && *((unsigned char *)a1 + 32)) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"WKWebpagePreferences._customNavigatorPlatform must be nil for subframe navigations."];
    }
    goto LABEL_17;
  }
  return result;
}

void sub_198D08154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = a1[4];
  a1[4] = 0;
  if (v6)
  {
    uint64_t v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

uint64_t WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void *,WKNavigationActionPolicy,WKWebpagePreferences *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()((uint64_t *)(a1 + 32), a2, a3);
}

void *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CF540;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF540;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  if (*(void *)(a1 + 24)
    && WebKit::isUnsupportedWebExtensionNavigation(*(void **)(a1 + 8), *(CFTypeRef ***)(a1 + 16)))
  {
    uint64_t v2 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v22 = 0;
      _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Ignoring unsupported web extension navigation", v22, 2u);
    }
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 32), 0);
    return;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(CFTypeRef **)(v3 + 288);
  if (v4) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v3 + 296);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v4 = (CFTypeRef *)(v12 - 16);
LABEL_7:
      CFRetain(v4[1]);
      WebKit::WebExtensionController::updateWebsitePoliciesForNavigation((WebKit::WebExtensionController *)v4, *(API::WebsitePolicies **)(a1 + 40), *(API::NavigationAction **)(a1 + 8));
      CFRelease(v4[1]);
    }
  }
  uint64_t v5 = *(void *)(a1 + 24);
  switch(v5)
  {
    case 0:
      goto LABEL_21;
    case 1:
    case 4:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v9 = &unk_1EE9CF568;
      v9[1] = v5;
      v9[2] = v7;
      v9[3] = v8;
      *(void *)v22 = v9;
      WebKit::tryInterceptNavigation((uint64_t *)(a1 + 8), v6, (const WTF::StringImpl *)v22);
      goto LABEL_10;
    case 2:
      v13 = *(WTF **)(a1 + 32);
      WebKit::WebFramePolicyListenerProxy::download(v13);
      return;
    case 3:
      v14 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(a1 + 8) + 40));
      int isMarketplaceKitURL = WebKit::isMarketplaceKitURL(v14, v15);
      v17 = *(WebKit::WebsiteDataStore ***)(a1 + 16);
      if (isMarketplaceKitURL)
      {
        WebKit::interceptMarketplaceKitNavigation((uint64_t *)(a1 + 8), *(void *)(a1 + 16));
LABEL_21:
        v18 = *(WTF **)(a1 + 32);
        WebKit::WebFramePolicyListenerProxy::ignore(v18, 0);
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        v21 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v21 = &unk_1EE9CF590;
        v21[1] = v19;
        v21[2] = v20;
        *(void *)v22 = v21;
        WebKit::trySOAuthorization((uint64_t *)(a1 + 8), v17, (const WTF::StringImpl *)v22);
LABEL_10:
        uint64_t v10 = *(void *)v22;
        *(void *)v22 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      break;
    default:
      return;
  }
}

void sub_198D0860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::isUnsupportedWebExtensionNavigation(void *a1, CFTypeRef **this)
{
  uint64_t v4 = a1[3];
  if (v4 && !*(unsigned char *)(v4 + 16)) {
    return 0;
  }
  WebKit::WebPageProxy::cocoaView((WebKit::WebPageProxy *)this, &v18);
  m_ptr = v18.m_string.m_impl.m_ptr;
  uint64_t v6 = [(StringImpl *)v18.m_string.m_impl.m_ptr _requiredWebExtensionBaseURL];
  if (m_ptr) {
    CFRelease(m_ptr);
  }
  uint64_t v7 = 0;
  if (v6 && !a1[47])
  {
    uint64_t v8 = this[36];
    if (v8)
    {
LABEL_8:
      CFRetain(v8[1]);
      uint64_t v9 = (const WTF::URL *)(a1 + 30);
      if (!a1[30]) {
        uint64_t v9 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 5));
      }
      WebKit::WebExtensionController::extensionContext((WebKit::WebExtensionController *)v8, v9, &v19);
      uint64_t v10 = v19;
      if (!v19) {
        goto LABEL_24;
      }
      MEMORY[0x19972E8A0](&v18, v6);
      char v13 = (*((unsigned char *)&v18 + 8) & 1) != 0 ? WTF::protocolHostAndPortAreEqual((WTF *)((char *)v10 + 80), &v18, v12) : 0;
      v16 = v18.m_string.m_impl.m_ptr;
      v18.m_string.m_impl.m_ptr = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy((WTF::StringImpl *)v16, v11);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
      if (v13) {
        uint64_t v7 = 0;
      }
      else {
LABEL_24:
      }
        uint64_t v7 = 1;
      CFRelease(v8[1]);
      return v7;
    }
    v14 = this[37];
    if (v14)
    {
      v15 = (char *)v14[1];
      if (v15)
      {
        uint64_t v8 = (CFTypeRef *)(v15 - 16);
        goto LABEL_8;
      }
    }
    return 0;
  }
  return v7;
}

void sub_198D087FC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  CFRelease(*(CFTypeRef *)(v9 + 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CF568;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF568;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(void *a1, int a2)
{
  uint64_t v3 = (WTF *)a1[2];
  if (a2) {
    WebKit::WebFramePolicyListenerProxy::ignore(v3, 1);
  }
  else {
    WebKit::WebFramePolicyListenerProxy::use((uint64_t)v3, a1[3], a1[1] == 4);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#2},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CF590;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#2},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF590;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#2},void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3 = *(WTF **)(a1 + 8);
  if (a2) {
    WebKit::WebFramePolicyListenerProxy::ignore(v3, 1);
  }
  else {
    WebKit::WebFramePolicyListenerProxy::use((uint64_t)v3, *(void *)(a1 + 16), 0);
  }
}

void WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = a1[4];
  a1[4] = 0;
  if (v6)
  {
    uint64_t v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

uint64_t WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::{lambda(void *,WKNavigationActionPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  return WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()((uint64_t *)(a1 + 32), a2, 0);
}

void WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::{lambda(void *,WKNavigationResponsePolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    *(void *)(a1 + 32) = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9CF5F8;
    v6[1] = a2;
    v6[2] = v5;
    uint64_t v7 = v6;
    WTF::ensureOnMainRunLoop();
    uint64_t result = (uint64_t)v7;
    if (v7) {
      return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
    }
  }
  return result;
}

void sub_198D08C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0::operator()(WKNavigationResponsePolicy)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CF5F8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0::operator()(WKNavigationResponsePolicy)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF5F8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0::operator()(WKNavigationResponsePolicy)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (v1 == 2)
    {
      WebKit::WebFramePolicyListenerProxy::download(*(WTF **)(a1 + 16));
    }
    else if (v1 == 1)
    {
      WebKit::WebFramePolicyListenerProxy::use(*(void *)(a1 + 16), 0, 0);
    }
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 0);
  }
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 464);
    WebKit::toAuthenticationChallengeDisposition(a2, v7);
    MEMORY[0x19972F4E0](&v12, a3);
    WebKit::AuthenticationDecisionListener::completeChallenge(v8);
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = v13;
    char v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 40));
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 40));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

unint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke(uint64_t a1, void *a2)
{
  unint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    if (a2)
    {
      uint64_t v6 = [a2 bytes];
      unint64_t result = [a2 length];
      unint64_t v7 = result;
      if (result)
      {
        if (HIDWORD(result))
        {
          __break(0xC471u);
          return result;
        }
        unint64_t result = WTF::fastMalloc((WTF *)result);
        uint64_t v8 = 0;
        do
        {
          *(unsigned char *)(result + v8) = *(unsigned char *)(v6 + v8);
          ++v8;
        }
        while (v7 != v8);
      }
      CFTypeRef v10 = (WTF *)result;
      char v11 = 1;
      unint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(v5);
    }
    else
    {
      LOBYTE(v10) = 0;
      char v11 = 0;
      unint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()((uint64_t *)(a1 + 32));
    }
    if (v11)
    {
      unint64_t result = (unint64_t)v10;
      if (v10) {
        return WTF::fastFree(v10, v9);
      }
    }
  }
  return result;
}

void sub_198D091C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::{lambda(void *,_WKSOAuthorizationLoadPolicy)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

void std::default_delete<WebCore::AlternativeTextUIController>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = (const void **)*((void *)this + 1);
    if (v3) {
      WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::deallocateTable(v3, this);
    }
    if (*(void *)this) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*(void *)this, this);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::deallocateTable(const void **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (const void *)-1)
      {
        const void *v4 = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        const void *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[4];
          }
        }
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (v6[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
          }
          else {
            --v6[4];
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D094F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ContactInfo>::destruct(*(void *)a1, (void *)(*(void *)a1 + 48 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::ContactInfo>::destruct(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v3 = result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 32, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 16, v4);
      uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v5);
      v3 += 48;
    }
    while ((void *)v3 != a2);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D0964C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(unsigned long long)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D09700(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xAAAAAAB)
  {
    int v5 = 24 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a2 + 24 * v7;
      do
      {
        *(unsigned char *)uint64_t v6 = *(unsigned char *)v8;
        CFTypeRef v10 = *(_DWORD **)(v8 + 8);
        if (v10) {
          *v10 += 2;
        }
        *(void *)(v6 + 8) = v10;
        *(unsigned char *)(v6 + 16) = *(unsigned char *)(v8 + 16);
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_0 &&>>()
{
  uint64_t v0 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "infoDictionary"), "objectForKeyedSubscript:", @"NSMicrophoneUsageDescription");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = (void *)v0;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t result = [v1 length];
  _MergedGlobals_81 = result != 0;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_1 &&>>()
{
  uint64_t v0 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "infoDictionary"), "objectForKeyedSubscript:", @"NSCameraUsageDescription");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = (void *)v0;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t result = [v1 length];
  byte_1EB359A29 = result != 0;
  return result;
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v5);
  if (v6 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9CF368[v6])(&v4, v5);
  }
  return result;
}

void sub_198D09990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9CF368[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198D09A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 80);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CF368[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CF368[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CF6C0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22HTMLModelElementCameraENS8_13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22HTMLModelElementCameraENS8_13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>(a2, a3);
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9CF3E8[v5])(&v6, v4);
  }
  return result;
}

void sub_198D09B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9CF3E8[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198D09BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 80);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CF3E8[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CF3E8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CF6D0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>(a2, a3);
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v5);
  if (v6 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9CF440[v6])(&v4, v5);
  }
  return result;
}

void sub_198D09D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9CF440[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198D09DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 80);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CF440[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NavigationState::*&)(void),WebKit::NavigationState*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v2 = WebKit::navigationStates(void)::navigationStates;
  if (WebKit::navigationStates(void)::navigationStates)
  {
    int v3 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4);
    if (!v3) {
      goto LABEL_19;
    }
    int v4 = 0;
    unsigned int v5 = v3 - 1;
    do
    {
      uint64_t v6 = v2 + 16 * v5;
      if ((unint64_t)(*(void *)v6 + 1) >= 2 && !*(void *)(*(void *)v6 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(v6, a2);
        ++v4;
      }
    }
    while ((unint64_t)v5--);
    uint64_t v2 = WebKit::navigationStates(void)::navigationStates;
    if (v4)
    {
      *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16) += v4;
      if (WebKit::navigationStates(void)::navigationStates) {
        int v8 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12);
      }
      else {
        int v8 = 0;
      }
      *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) = v8 - v4;
      uint64_t v2 = WebKit::navigationStates(void)::navigationStates;
    }
    if (v2)
    {
      unsigned int v9 = *(_DWORD *)(v2 - 4);
      uint64_t v10 = *(unsigned int *)(v2 - 12);
      if (v9 >= 9 && 6 * (int)v10 < v9)
      {
        unsigned int v14 = (v10 - 1) | ((v10 - 1) >> 1) | (((v10 - 1) | ((v10 - 1) >> 1)) >> 2);
        unsigned int v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
        unint64_t v16 = (v15 | HIWORD(v15)) + 1;
        if (v16 > 0x400)
        {
          if (v16 > 2 * v10) {
            goto LABEL_30;
          }
        }
        else if (3 * v16 > 4 * v10)
        {
LABEL_28:
          double v17 = (double)v10;
          double v18 = (double)v16;
          double v19 = 0.604166667;
          goto LABEL_31;
        }
        LODWORD(v16) = 2 * v16;
        if (v16 <= 0x400) {
          goto LABEL_28;
        }
LABEL_30:
        double v17 = (double)v10;
        double v18 = (double)v16;
        double v19 = 0.416666667;
LABEL_31:
        if (v18 * v19 <= v17) {
          LODWORD(v16) = 2 * v16;
        }
        if (v16 <= 8) {
          unsigned int v20 = 8;
        }
        else {
          unsigned int v20 = v16;
        }
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v20);
        uint64_t v2 = WebKit::navigationStates(void)::navigationStates;
        dword_1EB35A628 = 0;
        if (!WebKit::navigationStates(void)::navigationStates)
        {
          unsigned int v12 = 0;
          goto LABEL_23;
        }
LABEL_20:
        unsigned int v12 = *(_DWORD *)(v2 - 12);
        int v13 = 0x7FFFFFFF;
        if (v12 >= 0x7FFFFFFF) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
LABEL_19:
      dword_1EB35A628 = 0;
      goto LABEL_20;
    }
  }
  unsigned int v12 = 0;
  dword_1EB35A628 = 0;
LABEL_23:
  int v13 = v12;
LABEL_24:
  dword_1EB35A62C = 2 * v13;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int **)result;
  *(void *)uint64_t result = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v4 = result;
    WTF::fastFree((WTF *)v2, a2);
    uint64_t result = v4;
  }
  int v3 = *(unsigned int **)(result + 8);
  *(void *)uint64_t result = -1;
  *(void *)(result + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    return WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

atomic_uint **WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>@<X0>(atomic_uint **result@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  int v3 = *result;
  if (*result)
  {
    int v4 = *(v3 - 2);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
    for (int i = 1; ; ++i)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(void *)&v3[4 * v8];
      if (v11 != -1)
      {
        if (!v11)
        {
          int v3 = 0;
          goto LABEL_10;
        }
        if (v11 == a2) {
          break;
        }
      }
      unsigned int v8 = (v10 + i) & v4;
    }
    int v3 = *(atomic_uint **)&v3[4 * v10 + 2];
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
LABEL_10:
  *a3 = v3;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_2,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CF718;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_2,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CF718;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_2,void,BOOL>::call(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(WTF **)(a1 + 16);
    WebKit::WebFramePolicyListenerProxy::ignore(v3, 1);
    return;
  }
  if (WebKit::isUnsupportedWebExtensionNavigation(*(void **)(a1 + 24), *(CFTypeRef ***)(a1 + 8)))
  {
    uint64_t v4 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v21[0]) = 0;
      _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Ignoring unsupported web extension navigation", (uint8_t *)v21, 2u);
    }
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 0);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(CFTypeRef **)(v5 + 288);
  if (v6) {
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(v5 + 296);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    if (v15)
    {
      uint64_t v6 = (CFTypeRef *)(v15 - 16);
LABEL_10:
      CFRetain(v6[1]);
      WebKit::WebExtensionController::updateWebsitePoliciesForNavigation((WebKit::WebExtensionController *)v6, *(API::WebsitePolicies **)(a1 + 32), *(API::NavigationAction **)(a1 + 24));
      CFRelease(v6[1]);
    }
  }
  unint64_t v7 = *(const String **)(a1 + 24);
  if (v7[3].m_impl.m_ptr)
  {
    API::URLRequest::create(v7 + 5, (CFTypeRef **)v21);
    unsigned int v8 = (void *)*((void *)v21[0] + 1);
    if (v8)
    {
      CFRetain(*((CFTypeRef *)v21[0] + 1));
      unsigned int v20 = v21[0];
      v21[0] = 0;
      if (!v20)
      {
LABEL_15:
        if (objc_msgSend(MEMORY[0x1E4F18D80], "canHandleRequest:", v8, v21[0])) {
          goto LABEL_30;
        }
        uint64_t v10 = *(void *)(a1 + 8);
        MEMORY[0x19972EAD0](v21, objc_msgSend((id)objc_msgSend(v8, "URL"), "scheme"));
        if (v21[0]
          && WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v10 + 1128), v21, v11))
        {
          int v13 = 1;
        }
        else
        {
          int v13 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "URL"), "scheme"), "isEqualToString:", @"blob");
        }
        double v18 = v21[0];
        v21[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::destroy(v18, v12);
            if (v13)
            {
LABEL_30:
              double v19 = *(WTF **)(a1 + 16);
              if (*(void *)(*(void *)(a1 + 24) + 376)) {
                WebKit::WebFramePolicyListenerProxy::download(v19);
              }
              else {
                WebKit::WebFramePolicyListenerProxy::use((uint64_t)v19, *(void *)(a1 + 32), 0);
              }
LABEL_37:
              if (v8) {
                CFRelease(v8);
              }
              return;
            }
LABEL_36:
            WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 0);
            goto LABEL_37;
          }
          *(_DWORD *)v18 -= 2;
        }
        if (v13) {
          goto LABEL_30;
        }
        goto LABEL_36;
      }
      unsigned int v9 = (const void *)*((void *)v20 + 1);
    }
    else
    {
      unsigned int v9 = 0;
      v21[0] = 0;
    }
    CFRelease(v9);
    goto LABEL_15;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 32);

  WebKit::WebFramePolicyListenerProxy::use(v16, v17, 0);
}

void sub_198D0A4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef *a9)
{
  if (a9) {
    CFRelease(a9[1]);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WebCore::TimeRanges>::deref(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = *(WTF **)(this + 8);
    if (v3)
    {
      *(void *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>)
{
  uint64_t v12 = *(void *)result;
  if (*(void *)result) {
    int v13 = *(_DWORD *)(v12 + 4);
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 + 4);
  }
  else {
    int v15 = 0;
  }
  uint64_t v16 = *a3;
  if (*a3) {
    int v17 = *(_DWORD *)(v16 + 4);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = *a4;
  if (*a4) {
    int v19 = *(_DWORD *)(v18 + 4);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = *a5;
  if (*a5) {
    int v21 = *(_DWORD *)(v20 + 4);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = *a6;
  if (*a6) {
    int v23 = *(_DWORD *)(v22 + 4);
  }
  else {
    int v23 = 0;
  }
  if ((v23 | v21) < 0) {
    goto LABEL_50;
  }
  BOOL v24 = __OFADD__(v21, v23);
  int v25 = v21 + v23;
  BOOL v26 = v24;
  if (v19 < 0 || v26) {
    goto LABEL_50;
  }
  BOOL v24 = __OFADD__(v19, v25);
  int v27 = v19 + v25;
  BOOL v28 = v24;
  if (v17 < 0
    || v28
    || ((BOOL v24 = __OFADD__(v17, v27), v29 = v17 + v27, !v24) ? (v30 = 0) : (v30 = 1),
        v15 < 0
     || (v30 & 1) != 0
     || ((BOOL v24 = __OFADD__(v15, v29), v31 = v15 + v29, !v24) ? (v32 = 0) : (v32 = 1),
         v13 < 0 || (v32 & 1) != 0 || (uint64_t result = (v13 + v31), __OFADD__(v13, v31)))))
  {
LABEL_50:
    *a7 = 0;
    return result;
  }
  if ((!v12 || (*(unsigned char *)(v12 + 16) & 4) != 0)
    && (!v14 || (*(unsigned char *)(v14 + 16) & 4) != 0)
    && (!v16 || (*(unsigned char *)(v16 + 16) & 4) != 0)
    && (!v18 || (*(unsigned char *)(v18 + 16) & 4) != 0))
  {
    if (v20)
    {
      unsigned int v34 = *(_DWORD *)(v20 + 16);
      int v33 = (v34 >> 2) & 1;
      if (!v22 || (v34 & 4) == 0) {
        goto LABEL_44;
      }
    }
    else if (!v22)
    {
      int v33 = 1;
      goto LABEL_44;
    }
    int v33 = (*(unsigned __int8 *)(v22 + 16) >> 2) & 1;
  }
  else
  {
    int v33 = 0;
  }
LABEL_44:
  uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v33, v12, v14, v16, v18, v20, v22, &v35);
  *a7 = v35;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  int v15 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v17 = v18;
        if (v18)
        {
          *(_DWORD *)uint64_t v18 = 2;
          *(_DWORD *)(v18 + 4) = v15;
          *(void *)(v18 + 8) = v18 + 20;
          *(_DWORD *)(v18 + 16) = 4;
          uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v18 + 20), a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_12;
      }
LABEL_8:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v17 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if (!result) {
    goto LABEL_9;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_8;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v17 = v18;
  if (v18)
  {
    *(_DWORD *)uint64_t v18 = 2;
    *(_DWORD *)(v18 + 4) = v15;
    *(void *)(v18 + 8) = v18 + 20;
    *(_DWORD *)(v18 + 16) = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v18 + 20), a3, a4, a5, a6, a7, a8);
  }
LABEL_12:
  *a9 = v17;
  return result;
}

void sub_198D0A83C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::String **a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v31, this);
  WTF::String::number(*a4);
  *(void *)buf = v31;
  v29[0] = v30;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
  if (v32)
  {
    unsigned int v9 = v30;
    char v30 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v31;
    int v31 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = *(NSObject **)(a1 + 32);
    uint64_t v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      uint64_t v14 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v12 = v29[0];
      v29[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          uint64_t v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            uint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v23 = *a4;
              int v34 = 0;
              WTF::String::number(v23);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v24);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                BOOL v26 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2) {
                    WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v26 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v27 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
          if (v27 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v32;
    char v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198D0AB54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            BOOL v24 = (uint64_t *)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          uint64_t v25 = v16 + 24 * v23;
          BOOL v28 = *(_DWORD **)(v25 + 16);
          int v27 = (void *)(v25 + 16);
          BOOL v26 = v28;
          *int v27 = 0;
          if (v28)
          {
            if (v26[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
            }
            else {
              --v26[4];
            }
          }
          char v30 = (_DWORD *)*(v27 - 1);
          *(v27 - 1) = 0;
          if (v30)
          {
            if (v30[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            }
            else {
              --v30[4];
            }
          }
          *BOOL v24 = *v12;
          uint64_t v31 = v4 + 24 * v9;
          uint64_t v33 = *(void *)(v31 + 8);
          char v32 = (void *)(v31 + 8);
          *char v32 = 0;
          *(v27 - 1) = v33;
          uint64_t v34 = v32[1];
          v32[1] = 0;
          *int v27 = v34;
          uint64_t v35 = (_DWORD *)v32[1];
          v32[1] = 0;
          if (v35)
          {
            if (v35[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
            }
            else {
              --v35[4];
            }
          }
          v36 = (_DWORD *)*v32;
          *char v32 = 0;
          if (v36)
          {
            if (v36[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
            }
            else {
              --v36[4];
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v24;
          }
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          int v15 = *(_DWORD **)(v14 + 16);
          *(void *)(v14 + 16) = 0;
          if (v15)
          {
            if (v15[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[4];
            }
          }
          int v29 = *(_DWORD **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v29)
          {
            if (v29[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
            }
            else {
              --v29[4];
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    unint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1) {
        unint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  uint64_t v28 = v23 + 16 * v26;
  char v27 = 1;
LABEL_29:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v4;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::AuxiliaryProcess::~AuxiliaryProcess(WebKit::AuxiliaryProcess *this)
{
  *(void *)this = &unk_1EE9BEA58;
  *((void *)this + 3) = &unk_1EE9BEB20;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    IPC::Connection::invalidate(v2);
  }
  *((void *)this + 10) = &unk_1EE9B3390;
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::AuxiliaryProcess *)((char *)this + 80));
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::AuxiliaryProcess *)((char *)this + 48), v4);
  uint64_t v7 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v16 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v16 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        goto LABEL_16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        goto LABEL_16;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v12;
    uint64_t v17 = v15;
    WTF::ensureOnMainRunLoop();
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
LABEL_16:
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

uint64_t WebKit::AuxiliaryProcess::didClose(WebKit::AuxiliaryProcess *this, IPC::Connection *a2)
{
  uint64_t v2 = (WebKit::AuxiliaryProcess *)WTF::terminateProcess(0);
  return WebKit::AuxiliaryProcess::setProcessSuppressionEnabled(v2, v3);
}

uint64_t WebKit::AuxiliaryProcess::setProcessSuppressionEnabled(WebKit::AuxiliaryProcess *this, int a2)
{
  uint64_t v2 = (char *)this + 64;
  if (a2) {
    return PAL::HysteresisActivity::stop((uint64_t)v2);
  }
  else {
    return PAL::HysteresisActivity::start((uint64_t)v2);
  }
}

uint64_t WebKit::AuxiliaryProcess::enableTermination(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 32) - 1;
  *(_DWORD *)(this + 32) = v1;
  if (!v1)
  {
    uint64_t v2 = this;
    if (!*(unsigned char *)(this + 36))
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 104))(this);
      if (this)
      {
        int v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 112);
        return v3(v2);
      }
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcess::mainThreadPing(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  int v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WebKit::AuxiliaryProcess::messageSenderConnection(WebKit::AuxiliaryProcess *this)
{
  return *((void *)this + 5);
}

uint64_t WebKit::AuxiliaryProcess::messageSenderDestinationID(WebKit::AuxiliaryProcess *this)
{
  return 0;
}

uint64_t WebKit::AuxiliaryProcess::terminate(WebKit::AuxiliaryProcess *this)
{
  IPC::Connection::invalidate(*((void *)this + 5));
  uint64_t v2 = *(uint64_t (**)(WebKit::AuxiliaryProcess *))(*(void *)this + 120);

  return v2(this);
}

uint64_t WebKit::AuxiliaryProcess::shutDown(WebKit::AuxiliaryProcess *this)
{
  char v2 = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = 1;
  uint64_t result = (*(uint64_t (**)(WebKit::AuxiliaryProcess *))(*(void *)this + 112))(this);
  *((unsigned char *)this + 36) = v2;
  return result;
}

void WebKit::BlobDataFileReferenceWithSandboxExtension::~BlobDataFileReferenceWithSandboxExtension(WebKit::BlobDataFileReferenceWithSandboxExtension *this)
{
  char v2 = (const char ***)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v2);
  }

  MEMORY[0x1F416FE18](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::BlobDataFileReferenceWithSandboxExtension::~BlobDataFileReferenceWithSandboxExtension(this);

  WTF::fastFree(v1, v2);
}

BOOL WebKit::BlobDataFileReferenceWithSandboxExtension::prepareForFileAccess(BOOL this)
{
  uint64_t v1 = *(void *)(this + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = v2 + 1;
    if (!v2) {
      return WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v1 + 8));
    }
  }
  return this;
}

uint64_t WebKit::BlobDataFileReferenceWithSandboxExtension::revokeFileAccess(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16) - 1;
    *(void *)(v1 + 16) = v2;
    if (!v2)
    {
      *(void *)(*(void *)(v1 + 8) + 8) = 0;
      return sandbox_extension_release();
    }
  }
  return this;
}

uint64_t WebKit::DebuggableInfoData::empty@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)(a1 + 16) = v4;
  uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t *WebKit::EditingRange::toRange@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::startOfParagraph();
    WebCore::makeBoundaryPoint();
    char v8 = v20;
    uint64_t v20 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 7) == 2)
      {
        if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v8);
        }
      }
      else
      {
        *((_DWORD *)v8 + 7) -= 2;
      }
    }
    uint64_t result = (uint64_t *)v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 7) == 2)
      {
        if ((*((_WORD *)result + 17) & 0x400) == 0) {
          uint64_t result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
      else
      {
        *((_DWORD *)result + 7) -= 2;
      }
    }
    if (v17)
    {
      uint64_t v9 = **(void **)(v16 + 48);
      *(_DWORD *)(v9 + 28) += 4;
      __int16 v10 = *(_WORD *)(v9 + 32);
      if (v10)
      {
        uint64_t v12 = *(void *)(v9 + 88);
        if (v12)
        {
          int v11 = *(_DWORD *)(v12 + 4);
          goto LABEL_20;
        }
      }
      else if ((v10 & 4) != 0)
      {
        int v11 = WebCore::ContainerNode::countChildNodes((WebCore::ContainerNode *)v9);
        goto LABEL_20;
      }
      int v11 = 0;
LABEL_20:
      uint64_t v20 = 0;
      uint64_t v14 = v9;
      int v15 = v11;
      uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v20);
      if (*(_DWORD *)(v9 + 28) == 2)
      {
        if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
          uint64_t result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
        }
      }
      else
      {
        *(_DWORD *)(v9 + 28) -= 2;
      }
      if (v17)
      {
        WebCore::SimpleRange::SimpleRange();
        WebCore::resolveCharacterRange();
        *(void *)a3 = v20;
        *(_DWORD *)(a3 + 8) = v21;
        uint64_t v13 = v22;
        uint64_t v20 = 0;
        uint64_t v22 = 0;
        *(void *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 24) = v23;
        *(unsigned char *)(a3 + 32) = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v22);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v20);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v19);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v18);
        uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
        if (v17) {
          return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
        }
      }
      else
      {
        __break(1u);
      }
      return result;
    }
LABEL_16:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    return result;
  }
  uint64_t result = (uint64_t *)WebCore::FrameSelection::rootEditableElementOrDocumentElement(*(WebCore::FrameSelection **)(*(void *)(a1 + 296) + 3096));
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v6 = result;
  *((_DWORD *)result + 7) += 2;
  WebCore::makeRangeSelectingNodeContents((uint64_t *)v18, (WebCore *)result, v5);
  WebCore::resolveCharacterRange();
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v21;
  uint64_t v7 = v22;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  *(void *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 24) = v23;
  *(unsigned char *)(a3 + 32) = 1;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v22);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v20);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v19);
  uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v18);
  if (*((_DWORD *)v6 + 7) == 2)
  {
    if ((*((_WORD *)v6 + 17) & 0x400) == 0) {
      return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
  }
  else
  {
    *((_DWORD *)v6 + 7) -= 2;
  }
  return result;
}

uint64_t WebKit::EditingRange::fromRange(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 32)) {
    return -1;
  }
  uint64_t v3 = WebCore::FrameSelection::rootEditableElementOrDocumentElement(*(WebCore::FrameSelection **)(*(void *)(a1 + 296)
                                                                                                 + 3096));
  if (!v3) {
    return -1;
  }
  uint64_t v4 = v3;
  *(_DWORD *)(v3 + 28) += 4;
  v9[0] = 0;
  uint64_t v7 = v3;
  int v8 = 0;
  uint64_t result = (uint64_t)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v9);
  if (*(unsigned char *)(a2 + 32))
  {
    WebCore::SimpleRange::SimpleRange();
    uint64_t v6 = WebCore::characterCount();
    WebCore::characterCount();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v9);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::EditorState::clipOwnedRectExtentsToNumericLimits(void)::$_1::operator()<WebKit::EditorState::VisualData>(uint64_t *a1)
{
  a1[2] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 2));
  a1[3] = v2;
  a1[4] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 4));
  a1[5] = v3;
  a1[10] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 10));
  a1[11] = v4;
  a1[12] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 12));
  a1[13] = v5;
  uint64_t result = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)a1);
  *a1 = result;
  a1[1] = v7;
  return result;
}

void sub_198D0C06C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D0C468(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198D0C620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D0C92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D0CADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D0CD10(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  WTF::fastFree(v10, a2);
  _Unwind_Resume(a1);
}

void sub_198D0CF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198D0D140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  int v3 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = v2[5];
    int v7 = 134218498;
    int v8 = v2;
    __int16 v9 = 2082;
    uint64_t v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion: RBS %{public}s assertion for process with PID=%d was invalidated", (uint8_t *)&v7, 0x1Cu);
  }
  return (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 16))(v2);
}

uint64_t ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke_113(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(WebKit::ProcessAssertion **)(a1 + 32);
  int v3 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = *((_DWORD *)v2 + 5);
    int v7 = 134218498;
    int v8 = v2;
    __int16 v9 = 2082;
    uint64_t v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion() RBS %{public}s assertion for process with PID=%d will be invalidated", (uint8_t *)&v7, 0x1Cu);
  }
  return WebKit::ProcessAssertion::processAssertionWillBeInvalidated(v2);
}

uint64_t WebKit::ProcessAssertion::processAssertionWillBeInvalidated(WebKit::ProcessAssertion *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 5);
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::processAssertionWillBeInvalidated() PID=%d", (uint8_t *)&v5, 0x12u);
  }
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void WebKit::ProcessAssertion::~ProcessAssertion(WebKit::ProcessAssertion *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9CF770;
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    uint64_t v3 = v16 ? (uint64_t)v16 + 16 : 0;
    int v4 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218498;
    unint64_t v18 = this;
    __int16 v19 = 2082;
    uint64_t v20 = v3;
    __int16 v21 = 1024;
    int v22 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ~ProcessAssertion: Releasing process assertion '%{public}s' for process with PID=%d", buf, 0x1Cu);
    if (v16)
    {
      if (*(_DWORD *)v16 == 1) {
        WTF::fastFree(v16, v5);
      }
      else {
        --*(_DWORD *)v16;
      }
    }
  }
  if (*((void *)this + 4))
  {
    [*((id *)this + 5) setInvalidationCallback:0];
    [*((id *)this + 5) setPrepareForInvalidationCallback:0];
    [*((id *)this + 4) removeObserver:*((void *)this + 5)];
    uint64_t v6 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v6) {
      CFRelease(v6);
    }
    [*((id *)this + 4) invalidate];
  }
  char v7 = 0;
  atomic_compare_exchange_strong_explicit(WebKit::ProcessAssertion::s_capabilityLock, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x19972E8D0](WebKit::ProcessAssertion::s_capabilityLock);
  }
  WebKit::ExtensionCapabilityGrant::invalidate((WebKit::ProcessAssertion *)((char *)this + 136));
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(WebKit::ProcessAssertion::s_capabilityLock, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)WebKit::ProcessAssertion::s_capabilityLock);
  }
  if (*((unsigned char *)this + 168))
  {
    uint64_t v9 = *((unsigned int *)this + 40);
    if (v9 != -1) {
      ((void (*)(uint8_t *, char *))off_1EE9CFBE8[v9])(buf, (char *)this + 152);
    }
    *((_DWORD *)this + 40) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ProcessAssertion *)((char *)this + 136));
  if (*((unsigned char *)this + 128)) {
    WebKit::AssertionCapability::~AssertionCapability((const void **)this + 9);
  }
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v14) {
    CFRelease(v14);
  }
  int v15 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v10);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ProcessAssertion::~ProcessAssertion(this);

  WTF::fastFree(v1, v2);
}

void sub_198D0D770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(unsigned char *)(v3 + 168))
  {
    uint64_t v5 = *(unsigned int *)(v3 + 160);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CFBE8[v5])(va, v3 + 152);
    }
    *(_DWORD *)(v3 + 160) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(v3 + 136));
  if (*(unsigned char *)(v3 + 128)) {
    WebKit::AssertionCapability::~AssertionCapability((const void **)(v3 + 72));
  }
  uint64_t v7 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(const void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(WTF::StringImpl **)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v6);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::processAssertionWasInvalidated(WebKit::ProcessAssertion *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 5);
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::processAssertionWasInvalidated() PID=%d", (uint8_t *)&v5, 0x12u);
  }
  *((unsigned char *)this + 48) = 1;
  uint64_t result = *((void *)this + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void WebKit::ProcessAndUIAssertion::~ProcessAndUIAssertion(WebKit::ProcessAndUIAssertion *this)
{
  if (*((unsigned char *)this + 184)) {
    objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "_updateBackgroundTask");
  }
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  WebKit::ProcessAssertion::~ProcessAssertion(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ProcessAndUIAssertion::~ProcessAndUIAssertion(this);

  WTF::fastFree(v1, v2);
}

void sub_198D0DA30(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 22);
  *((void *)v1 + 22) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::ProcessAssertion::~ProcessAssertion(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAndUIAssertion::setProcessStateMonitorEnabled(WebKit::ProcessAndUIAssertion *this)
{
  id v2 = +[WKProcessAssertionBackgroundTaskManager shared];

  return [v2 setProcessStateMonitorEnabled:this];
}

atomic_uchar *WebKit::ProcessAndUIAssertion::processAssertionWasInvalidated(WebKit::ProcessAndUIAssertion *this)
{
  id v2 = (atomic_uchar *)*((void *)this + 1);
  if (v2) {
    uint64_t v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = (atomic_uchar *)WebKit::ProcessAssertion::processAssertionWasInvalidated(this);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v3, (uint64_t)this);
    uint64_t v6 = v8;
    if (v8)
    {
      WebKit::ProcessAndUIAssertion::updateRunInBackgroundCount(this);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), v7);
    }
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, v5);
  }
  return result;
}

void sub_198D0DB88(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v2, v5);
  _Unwind_Resume(a1);
}

void *WebKit::ResourceLoadDelegate::createResourceLoadClient@<X0>(WebKit::ResourceLoadDelegate *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  void *result = &unk_1EE9CF7C0;
  result[1] = this;
  ++*(_DWORD *)this;
  *a2 = result;
  return result;
}

uint64_t WebKit::ResourceLoadDelegate::setDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 16), a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFD | v3;
  if (objc_opt_respondsToSelector()) {
    char v4 = 4;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xFB | v4;
  if (objc_opt_respondsToSelector()) {
    char v5 = 8;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xF7 | v5;
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    char v7 = 16;
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) & 0xEF | v7;
  return result;
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::~ResourceLoadClient(WebKit::ResourceLoadDelegate::ResourceLoadClient *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CF7C0;
  *((void *)this + 1) = 0;
  if (v1)
  {
    if (*v1) {
      --*v1;
    }
    else {
      __break(0xC471u);
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ResourceLoadDelegate::ResourceLoadClient::~ResourceLoadClient(this);

  WTF::fastFree(v1, v2);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didSendRequest(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    if (WeakRetained)
    {
      uint64_t v6 = WeakRetained;
      id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 8));
      API::ResourceLoadInfo::create(&v9, a2);
      uint64_t v8 = v9;
      [v6 webView:v7 resourceLoad:*(void *)(v9 + 8) didSendRequest:WebCore::ResourceRequest::nsURLRequest()];
      CFRelease(*(CFTypeRef *)(v8 + 8));
      if (v7) {
        CFRelease(v7);
      }
      CFRelease(v6);
    }
  }
}

void sub_198D0DE6C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t API::ResourceLoadInfo::create(uint64_t *a1, long long *a2)
{
  uint64_t v4 = API::Object::newObject(0x88uLL, 17);
  uint64_t result = API::ResourceLoadInfo::ResourceLoadInfo(v4, a2);
  *a1 = v4;
  return result;
}

void sub_198D0DEEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didPerformHTTPRedirection(uint64_t a1, long long *a2, WebCore::ResourceResponse *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v3 + 24) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
    if (WeakRetained)
    {
      uint64_t v8 = WeakRetained;
      id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 8));
      API::ResourceLoadInfo::create(&v13, a2);
      uint64_t v10 = v13;
      uint64_t v11 = *(void *)(v13 + 8);
      uint64_t v12 = WebCore::ResourceResponse::nsURLResponse(a3);
      [v8 webView:v9 resourceLoad:v11 didPerformHTTPRedirection:v12 newRequest:WebCore::ResourceRequest::nsURLRequest()];
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v9) {
        CFRelease(v9);
      }
      CFRelease(v8);
    }
  }
}

void sub_198D0DFF4(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didReceiveChallenge(uint64_t a1, long long *a2, WebCore *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v3 + 24) & 4) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
    if (WeakRetained)
    {
      uint64_t v8 = WeakRetained;
      id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 8));
      API::ResourceLoadInfo::create(&v12, a2);
      uint64_t v10 = v12;
      objc_msgSend(v8, "webView:resourceLoad:didReceiveChallenge:", v9, *(void *)(v12 + 8), WebCore::mac(a3, v11));
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v9) {
        CFRelease(v9);
      }
      CFRelease(v8);
    }
  }
}

void sub_198D0E108(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didReceiveResponse(uint64_t a1, long long *a2, WebCore::ResourceResponse *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v3 + 24) & 8) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
    if (WeakRetained)
    {
      uint64_t v8 = WeakRetained;
      id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 8));
      API::ResourceLoadInfo::create(&v11, a2);
      uint64_t v10 = v11;
      [v8 webView:v9 resourceLoad:*(void *)(v11 + 8) didReceiveResponse:WebCore::ResourceResponse::nsURLResponse(a3)];
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v9) {
        CFRelease(v9);
      }
      CFRelease(v8);
    }
  }
}

void sub_198D0E21C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didCompleteWithError(uint64_t a1, long long *a2, WebCore::ResourceResponse *a3, WebCore::ResourceError *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v4 + 24) & 0x10) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
    if (WeakRetained)
    {
      uint64_t v10 = WeakRetained;
      id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 8));
      API::ResourceLoadInfo::create(&v15, a2);
      uint64_t v12 = v15;
      uint64_t v13 = *(void *)(v15 + 8);
      uint64_t v14 = WebCore::ResourceError::nsError(a4);
      [v10 webView:v11 resourceLoad:v13 didCompleteWithError:v14 response:WebCore::ResourceResponse::nsURLResponse(a3)];
      CFRelease(*(CFTypeRef *)(v12 + 8));
      if (v11) {
        CFRelease(v11);
      }
      CFRelease(v10);
    }
  }
}

void sub_198D0E344(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::encodeSessionState(WebKit *this@<X0>, void *a2@<X8>)
{
  WebKit::encodeLegacySessionState(this, &v7);
  uint64_t v4 = v7;
  if (v7)
  {
    id v7 = 0;
    char v5 = (const void *)*((void *)v4 + 1);
    *a2 = v5;
    if (v5)
    {
      CFRetain(v5);
      char v5 = (const void *)*((void *)v4 + 1);
    }
    CFRelease(v5);
    uint64_t v6 = v7;
    id v7 = 0;
    if (v6) {
      CFRelease(*((CFTypeRef *)v6 + 1));
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_198D0E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::decodeSessionState(WebKit *this, NSData *a2, SessionState *a3)
{
  if (this)
  {
    uint64_t v5 = [(WebKit *)this bytes];
    unint64_t v6 = [(WebKit *)this length];
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }

  return WebKit::decodeLegacySessionState(v5, v6, (uint64_t)a2);
}

void sub_198D0E828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  if (v17) {
    CFRelease(v17);
  }
  _Unwind_Resume(a1);
}

void sub_198D0E968(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ71___WKPreviewControllerDataSource_previewController_previewItemAtIndex__E4__12(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ71___WKPreviewControllerDataSource_previewController_previewItemAtIndex__E4__12(uint64_t a1)
{
}

WTF::StringImpl *WebKit::SystemPreviewController::triggerSystemPreviewAction(WebKit::SystemPreviewController *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358640;
  if (os_log_type_enabled((os_log_t)qword_1EB358640, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 12);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "SystemPreview action was triggered on %lld", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v4 = *((void *)this + 2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)&long long buf = (char *)this + 32;
  *((void *)&buf + 1) = &v7;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SystemPreviewActionTriggered>(*(void *)(v4 + 256), (uint64_t)&buf, *(void *)(*(void *)(v4 + 32) + 1928), 0);
  uint64_t result = v7;
  id v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D0F19C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198D0F284(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198D0F694(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SystemPreviewController::loadFailed(WebKit::SystemPreviewController *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358640;
  if (os_log_type_enabled((os_log_t)qword_1EB358640, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 12);
    int v11 = 134217984;
    uint64_t v12 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "SystemPreview load has failed on %lld", (uint8_t *)&v11, 0xCu);
  }
  uint64_t v4 = (void *)*((void *)this + 31);
  if (v4) {
    [v4 failWithError:0];
  }
  uint64_t v5 = (void *)*((void *)this + 29);
  if (v5) {
    [v5 dismissViewControllerAnimated:1 completion:0];
  }
  unint64_t v6 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v6) {
    CFRelease(v6);
  }
  id v7 = (const void *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t result = (uint64_t)WebKit::SystemPreviewController::releaseActivityTokenIfNecessary(this);
  if (*((void *)this + 34)) {
    uint64_t result = WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 34);
  }
  *((unsigned char *)this + 8) = 0;
  return result;
}

void sub_198D0FB24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SystemPreviewController::begin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8) || *(void *)(a1 + 280))
  {
    id v7 = qword_1EB358640;
    if (os_log_type_enabled((os_log_t)qword_1EB358640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "SystemPreview didn't start because an existing preview is in progress", buf, 2u);
    }
    *(double *)(a1 + 288) = fmin(*(double *)(a1 + 288) * *(double *)(a1 + 288) + 1.0, 30.0);
    WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  else if (*(void *)(a1 + 232) {
         || (int v11 = (void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 104) + 488))(*(void *)(*(void *)(a1 + 16) + 104))) == 0)
  }
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  else
  {
    uint64_t v12 = v11;
    CFRetain(v11);
    long long v14 = *(_OWORD *)(a4 + 16);
    long long v13 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 64) = v13;
    long long v16 = *(_OWORD *)(a4 + 64);
    long long v15 = *(_OWORD *)(a4 + 80);
    long long v17 = *(_OWORD *)(a4 + 48);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a4 + 96);
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 112) = v15;
    *(_OWORD *)(a1 + 80) = v17;
    uint64_t v18 = *a5;
    *a5 = 0;
    v83 = (const void *)v18;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v84, a3);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    __int16 v19 = *(atomic_uint **)a1;
    if (*(void *)a1) {
      atomic_fetch_add(v19, 1u);
    }
    v86 = (WTF *)v19;
    uint64_t v20 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v20 += 2;
    }
    long long v88 = *(_OWORD *)(a2 + 8);
    long long v89 = *(_OWORD *)(a2 + 24);
    v87 = v20;
    CFTypeRef v90 = v12;
    CFRetain(v12);
    __int16 v21 = v83;
    v83 = 0;
    CFTypeRef v75 = v21;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v76, (uint64_t)v84);
    uint64_t v23 = v86;
    int v22 = v87;
    v86 = 0;
    v78 = v23;
    if (v87) {
      *(_DWORD *)v87 += 2;
    }
    long long v80 = v88;
    long long v81 = v89;
    CFTypeRef v24 = v90;
    CFTypeRef v90 = 0;
    CFTypeRef cf = v24;
    CFTypeRef v25 = v75;
    v79 = v22;
    CFTypeRef v75 = 0;
    *(void *)long long buf = v25;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v92, (uint64_t)v76);
    char v27 = v78;
    unint64_t v26 = v79;
    v78 = 0;
    v94 = (unsigned int *)v27;
    if (v79) {
      *(_DWORD *)v79 += 2;
    }
    v95 = v26;
    long long v96 = v80;
    long long v97 = v81;
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    CFTypeRef v98 = v28;
    int v29 = (char *)malloc_type_malloc(0x80uLL, 0x10E2040A521BA0BuLL);
    *(void *)int v29 = MEMORY[0x1E4F14398];
    *((void *)v29 + 1) = 50331650;
    *((void *)v29 + 2) = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    *((void *)v29 + 3) = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    char v30 = *(WebKit **)buf;
    *(void *)long long buf = 0;
    *((void *)v29 + 4) = v30;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v29 + 40), (uint64_t)v92);
    uint64_t v33 = v94;
    char v32 = v95;
    v94 = 0;
    *((void *)v29 + 9) = v33;
    if (v32)
    {
      *(_DWORD *)v32 += 2;
      *((void *)v29 + 10) = v32;
      long long v34 = v96;
      *(_OWORD *)(v29 + 104) = v97;
      *(_OWORD *)(v29 + 88) = v34;
      *((void *)v29 + 15) = v98;
      CFTypeRef v98 = 0;
      v95 = 0;
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    else
    {
      *((void *)v29 + 10) = 0;
      long long v68 = v97;
      *(_OWORD *)(v29 + 88) = v96;
      *(_OWORD *)(v29 + 104) = v68;
      *((void *)v29 + 15) = v98;
      CFTypeRef v98 = 0;
      v95 = 0;
    }
    uint64_t v35 = v94;
    v94 = 0;
    if (v35 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v31);
    }
    if (v93 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CFC18[v93])(&v74, v92);
    }
    int v93 = -1;
    v36 = *(WebKit **)buf;
    *(void *)long long buf = 0;
    if (v36) {
      (*(void (**)(WebKit *))(*(void *)v36 + 8))(v36);
    }
    _Block_release(*(const void **)(a1 + 280));
    *(void *)(a1 + 280) = v29;
    _Block_release(0);
    CFTypeRef v38 = cf;
    CFTypeRef cf = 0;
    if (v38) {
      CFRelease(v38);
    }
    v39 = v79;
    v79 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v37);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    v40 = (unsigned int *)v78;
    v78 = 0;
    if (v40 && atomic_fetch_add((atomic_uint *volatile)v40, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v37);
    }
    if (v77 != -1) {
      ((void (*)(uint8_t *, unsigned char *))off_1EE9CFC18[v77])(buf, v76);
    }
    int v77 = -1;
    CFTypeRef v41 = v75;
    CFTypeRef v75 = 0;
    if (v41) {
      (*(void (**)(CFTypeRef))(*(void *)v41 + 8))(v41);
    }
    WebCore::copyLocalizedString((uint64_t *)buf, (WebCore *)@"Open this 3D model?", (const __CFString *)v37);
    v42 = *(WebKit **)buf;
    if (*(void *)buf)
    {
      CFAutorelease(*(CFTypeRef *)buf);
      v42 = *(WebKit **)buf;
    }
    WebKit::createUIAlertController(v42, 0, &v75);
    v43 = (void *)MEMORY[0x1E4F42720];
    WebCore::copyLocalizedString((uint64_t *)buf, (WebCore *)@"Allow (usdz QuickLook Preview)", v44);
    if (*(void *)buf)
    {
      CFAutorelease(*(CFTypeRef *)buf);
      v45 = *(WebKit **)buf;
    }
    else
    {
      v45 = 0;
    }
    v72[0] = MEMORY[0x1E4F143A8];
    v72[1] = 3321888768;
    v72[2] = ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke;
    v72[3] = &__block_descriptor_40_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__2_e23_v16__0__UIAlertAction_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    v46 = *(atomic_uint **)a1;
    if (*(void *)a1)
    {
      atomic_fetch_add(v46, 1u);
      atomic_fetch_add(v46, 1u);
    }
    v73 = (WTF *)v46;
    uint64_t v48 = [v43 actionWithTitle:v45 style:0 handler:v72];
    if (v46 && atomic_fetch_add(v46, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v46);
      WTF::fastFree((WTF *)v46, v47);
    }
    v49 = (void *)MEMORY[0x1E4F42720];
    WebCore::copyLocalizedString((uint64_t *)buf, (WebCore *)@"Cancel (usdz QuickLook Preview)", v47);
    if (*(void *)buf)
    {
      CFAutorelease(*(CFTypeRef *)buf);
      v50 = *(WebKit **)buf;
    }
    else
    {
      v50 = 0;
    }
    v70[0] = MEMORY[0x1E4F143A8];
    v70[1] = 3321888768;
    v70[2] = ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke_270;
    v70[3] = &__block_descriptor_40_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__3_e23_v16__0__UIAlertAction_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    v51 = *(atomic_uint **)a1;
    if (*(void *)a1)
    {
      atomic_fetch_add(v51, 1u);
      atomic_fetch_add(v51, 1u);
    }
    v71 = (WTF *)v51;
    uint64_t v53 = [v49 actionWithTitle:v50 style:1 handler:v70];
    if (v51 && atomic_fetch_add(v51, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v51);
      WTF::fastFree((WTF *)v51, v52);
    }
    [(id)v75 addAction:v53];
    v54 = (WTF::RunLoop *)[(id)v75 addAction:v48];
    if (*(void *)(a1 + 272))
    {
      v55 = *(void (***)(void, void))(a1 + 280);
      *(void *)(a1 + 280) = 0;
      v56 = _Block_copy(0);
      _Block_release(*(const void **)(a1 + 280));
      *(void *)(a1 + 280) = v56;
      _Block_release(0);
      v55[2](v55, 1);
      _Block_release(v55);
    }
    else if (*(double *)(a1 + 288) == 0.0)
    {
      [v12 presentViewController:v75 animated:1 completion:0];
    }
    else
    {
      WTF::RunLoop::main(v54);
      CFTypeRef v58 = v75;
      if (v75) {
        CFRetain(v75);
      }
      CFRetain(v12);
      v59 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v59 = &unk_1EE9D01D8;
      v59[1] = v58;
      v59[2] = v12;
      *(void *)long long buf = v59;
      WTF::RunLoop::dispatchAfter();
      if (v69) {
        WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref((unsigned int *)(v69 + 24));
      }
      v60 = *(WebKit **)buf;
      *(void *)long long buf = 0;
      if (v60) {
        (*(void (**)(WebKit *))(*(void *)v60 + 8))(v60);
      }
      *(void *)(a1 + 288) = 0;
    }
    v61 = (unsigned int *)v71;
    v71 = 0;
    if (v61 && atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v61);
      WTF::fastFree((WTF *)v61, v57);
    }
    v62 = (unsigned int *)v73;
    v73 = 0;
    if (v62 && atomic_fetch_add((atomic_uint *volatile)v62, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v62);
      WTF::fastFree((WTF *)v62, v57);
    }
    CFTypeRef v63 = v75;
    CFTypeRef v75 = 0;
    if (v63) {
      CFRelease(v63);
    }
    CFTypeRef v64 = v90;
    CFTypeRef v90 = 0;
    if (v64) {
      CFRelease(v64);
    }
    v65 = v87;
    v87 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2) {
        WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v57);
      }
      else {
        *(_DWORD *)v65 -= 2;
      }
    }
    v66 = (unsigned int *)v86;
    v86 = 0;
    if (v66 && atomic_fetch_add((atomic_uint *volatile)v66, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v66);
      WTF::fastFree((WTF *)v66, v57);
    }
    if (v85 != -1) {
      ((void (*)(uint8_t *, unsigned char *))off_1EE9CFC18[v85])(buf, v84);
    }
    int v85 = -1;
    v67 = v83;
    v83 = 0;
    if (v67) {
      (*(void (**)(const void *))(*(void *)v67 + 8))(v67);
    }
    CFRelease(v12);
  }
}

void sub_198D10560(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,__int16 a21,char a22,char a23,CFTypeRef cf,uint64_t a25,uint64_t a26,uint64_t a27,int a28,WTF *a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,WTF *a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef a47)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
  }
  if (a19 && atomic_fetch_add((atomic_uint *volatile)a19, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a19);
    WTF::fastFree(a19, a2);
  }
  CFTypeRef v50 = cf;
  CFTypeRef cf = 0;
  if (v50) {
    CFRelease(v50);
  }
  CFTypeRef v51 = a47;
  a47 = 0;
  if (v51) {
    CFRelease(v51);
  }
  v52 = a42;
  a42 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
  uint64_t v53 = (unsigned int *)a41;
  a41 = 0;
  if (v53 && atomic_fetch_add((atomic_uint *volatile)v53, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v53);
    WTF::fastFree((WTF *)v53, a2);
  }
  if (a40 != -1) {
    ((void (*)(CFTypeRef *, uint64_t))off_1EE9CFC18[a40])(&cf, v48);
  }
  a40 = -1;
  uint64_t v54 = a36;
  a36 = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  CFRelease(v47);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void (***)(void, void))(v2 + 280);
      *(void *)(v2 + 280) = 0;
      uint64_t v4 = _Block_copy(0);
      _Block_release(*(const void **)(v2 + 280));
      *(void *)(v2 + 280) = v4;
      _Block_release(0);
      v3[2](v3, 1);
      _Block_release(v3);
    }
  }
}

void sub_198D10B08(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__2(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__2(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke_270(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void (***)(void, void))(v2 + 280);
      *(void *)(v2 + 280) = 0;
      uint64_t v4 = _Block_copy(0);
      _Block_release(*(const void **)(v2 + 280));
      *(void *)(v2 + 280) = v4;
      _Block_release(0);
      v3[2](v3, 0);
      _Block_release(v3);
    }
  }
}

void sub_198D10C0C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__3(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__3(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WebKit::ProcessThrottlerActivity *WebKit::SystemPreviewController::releaseActivityTokenIfNecessary(WebKit::ProcessThrottlerActivity *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 33))
  {
    uint64_t v1 = this;
    uint64_t v2 = (WebKit::ProcessThrottlerActivity **)((char *)this + 264);
    uint64_t v3 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 134217984;
      uint64_t v5 = v1;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p UIProcess is releasing a background assertion because a system preview download completed", (uint8_t *)&v4, 0xCu);
    }
    return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
  }
  return this;
}

WTF::StringImpl *WebKit::SystemPreviewController::triggerSystemPreviewActionWithTargetForTesting(WebKit::SystemPreviewController *this, uint64_t a2, NSString *a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19972EAD0](v11, a3);
  WTF::UUID::parseVersion4();
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v12)
  {
    *((unsigned char *)this + 128) = 1;
    if (a2 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198D10E84);
    }
    *((void *)this + 12) = a2;
    uint64_t v9 = v11[2];
    uint64_t v10 = *(void *)(*(void *)(*((void *)this + 2) + 256) + 176);
    *((WTF::StringImpl **)this + 8) = v11[1];
    *((void *)this + 9) = v9;
    *((void *)this + 10) = v10;
    if ((unint64_t)(a4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198D10E64);
    }
    *((void *)this + 6) = a4;
    return WebKit::SystemPreviewController::triggerSystemPreviewAction(this);
  }
  return result;
}

void sub_198D10E8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::~UIClient(WebKit::UIDelegate::UIClient *this, void *a2)
{
  *(void *)this = &unk_1EE9CF898;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::UIDelegate::UIClient::~UIClient(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::UIDelegate::UIClient::mouseDidMoveOverElement(uint64_t a1, WebKit::WebPageProxy *a2, const WebKit::WebHitTestResultData *a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 24) & 0x4000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          uint64_t v13 = WeakRetained;
          long long v14 = (CFTypeRef *)API::Object::newObject(0x2B0uLL, 67);
          API::HitTestResult::HitTestResult((API::HitTestResult *)v14, a3, a2);
          uint64_t v15 = *(void *)(a1 + 16);
          if (v15) {
            uint64_t v15 = *(void *)(v15 + 8);
          }
          id v16 = objc_loadWeakRetained((id *)(v15 + 8));
          if (a5) {
            uint64_t v17 = *(void *)(a5 + 8);
          }
          else {
            uint64_t v17 = 0;
          }
          [v13 _webView:v16 mouseDidMoveOverElement:v14[1] withFlags:(a4 << 12) & 0x10000 | ((unint64_t)(a4 & 0xF) << 17) userInfo:v17];
          if (v16) {
            CFRelease(v16);
          }
          CFRelease(v14[1]);
          CFRelease(v13);
        }
      }
    }
  }
}

void sub_198D11080(_Unwind_Exception *a1)
{
  if (v3) {
    CFRelease(v3);
  }
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, API::WindowFeatures *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7 || (uint64_t v8 = *(void *)(v7 + 8)) == 0)
  {
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()(a6);
    *(void *)&long long v55 = 0;
    return;
  }
  id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16));
  API::WindowFeatures::create(a4, &v54);
  std::__optional_copy_base<API::PageConfiguration::OpenerInfo,false>::__optional_copy_base[abi:sn180100](v52, *(void *)a3 + 144);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    if ((*(_DWORD *)(v15 + 24) & 2) == 0)
    {
      if ((*(_DWORD *)(v15 + 24) & 1) == 0) {
        goto LABEL_43;
      }
      goto LABEL_28;
    }
LABEL_11:
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_createWebViewWithConfiguration_forNavigationAction_windowFeatures_completionHandler_, (uint64_t *)&v51);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16) {
      uint64_t v16 = *(void *)(v16 + 8);
    }
    id v17 = objc_loadWeakRetained((id *)(v16 + 8));
    uint64_t v18 = *(void *)(*(void *)a3 + 8);
    uint64_t v19 = *(void *)(*(void *)a5 + 8);
    uint64_t v20 = *(void *)(v54 + 8);
    uint64_t v21 = *a6;
    *a6 = 0;
    int v22 = v51;
    CFTypeRef v51 = 0;
    *(void *)&long long v47 = v21;
    *((void *)&v47 + 1) = v22;
    uint64_t v23 = *(void *)(a1 + 16);
    if (v23) {
      uint64_t v23 = *(void *)(v23 + 8);
    }
    id v49 = objc_loadWeakRetained((id *)(v23 + 8));
    std::__optional_copy_base<API::PageConfiguration::OpenerInfo,false>::__optional_copy_base[abi:sn180100](v50, (uint64_t)v52);
    long long v55 = v47;
    CFTypeRef cf = v49;
    std::__optional_move_base<API::PageConfiguration::OpenerInfo,false>::__optional_move_base[abi:sn180100](v57, (uint64_t)v50);
    CFTypeRef v24 = malloc_type_malloc(0x68uLL, 0x10E20406E6D62E1uLL);
    *CFTypeRef v24 = MEMORY[0x1E4F14398];
    v24[1] = 50331650;
    v24[2] = WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke;
    v24[3] = &WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::descriptor;
    long long v25 = v55;
    long long v55 = 0uLL;
    *((_OWORD *)v24 + 2) = v25;
    CFTypeRef v26 = cf;
    CFTypeRef cf = 0;
    v24[6] = v26;
    std::__optional_move_base<API::PageConfiguration::OpenerInfo,false>::__optional_move_base[abi:sn180100]((unsigned char *)v24 + 56, (uint64_t)v57);
    std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](v57, v27);
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    if (v28) {
      CFRelease(v28);
    }
    int v29 = (unsigned int *)*((void *)&v55 + 1);
    *((void *)&v55 + 1) = 0;
    if (v29) {
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v29);
    }
    uint64_t v30 = v55;
    *(void *)&long long v55 = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    -[WebKit::CompletionHandlerCallChecker _webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:](WeakRetained, "_webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:", v17, v18, v19, v20, v24, 0);
    _Block_release(v24);
    std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](v50, v31);
    if (v48) {
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v51) {
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v51);
    }
    goto LABEL_53;
  }
  if ((MEMORY[0x18] & 2) != 0) {
    goto LABEL_11;
  }
  if ((MEMORY[0x18] & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v15 = 0;
LABEL_28:
  id v33 = objc_loadWeakRetained((id *)(v15 + 8));
  long long v34 = (id *)[(WebKit::CompletionHandlerCallChecker *)WeakRetained webView:v33 createWebViewWithConfiguration:*(void *)(*(void *)a3 + 8) forNavigationAction:*(void *)(*(void *)a5 + 8) windowFeatures:*(void *)(v54 + 8)];
  uint64_t v35 = v34;
  if (v34) {
    CFRetain(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v35)
  {
    uint64_t v36 = [v35[51] _relatedWebView];
    uint64_t v37 = *(void *)(a1 + 16);
    if (v37) {
      uint64_t v37 = *(void *)(v37 + 8);
    }
    id v38 = objc_loadWeakRetained((id *)(v37 + 8));
    id v40 = v38;
    if (v38) {
      CFRelease(v38);
    }
    CFTypeRef v41 = (void *)MEMORY[0x1E4F1C3B8];
    if ((id)v36 != v40) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Returned WKWebView was not created with the given configuration."];
    }
    v42 = v35[51];
    if (v53 && v42[192])
    {
      if (API::PageConfiguration::OpenerInfo::operator==((uint64_t)v52, (uint64_t)(v42 + 152), v39)) {
        goto LABEL_47;
      }
    }
    else if ((v53 != 0) == (v42[192] != 0))
    {
LABEL_47:
      v45 = (CFTypeRef *)v35[52];
      if (v45) {
        CFRetain(v45[1]);
      }
      *(void *)&long long v55 = v45;
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()(a6);
      uint64_t v46 = v55;
      *(void *)&long long v55 = 0;
      if (v46) {
        CFRelease(*(CFTypeRef *)(v46 + 8));
      }
      CFStringRef v44 = v35;
      goto LABEL_52;
    }
    [MEMORY[0x1E4F1CA00] raise:*v41 format:@"Returned WKWebView was not created with the given configuration."];
    goto LABEL_47;
  }
LABEL_43:
  *(void *)&long long v55 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()(a6);
  uint64_t v43 = v55;
  *(void *)&long long v55 = 0;
  if (v43)
  {
    CFStringRef v44 = *(id **)(v43 + 8);
LABEL_52:
    CFRelease(v44);
  }
LABEL_53:
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](v52, v32);
  if (v54) {
    CFRelease(*(CFTypeRef *)(v54 + 8));
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_198D11588(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29)
{
  uint64_t v31 = a27;
  a27 = 0;
  if (v31) {
    CFRelease(*(CFTypeRef *)(v31 + 8));
  }
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](&a20, a2);
  if (a26) {
    CFRelease(*(CFTypeRef *)(a26 + 8));
  }
  if (v29) {
    CFRelease(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D11824(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runJavaScriptAlert(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (*(_DWORD *)(v8 + 24) & 4) != 0
    && (uint64_t v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    uint64_t v14 = v13;
    WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(a2);
    WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel_webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_completionHandler_, &v26);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15) {
      uint64_t v15 = *(void *)(v15 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    if (*a3) {
      id v17 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      id v17 = &stru_1EEA10550;
    }
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v25 = a2;
    uint64_t v18 = API::Object::newObject(0x140uLL, 60);
    uint64_t v19 = API::FrameInfo::FrameInfo(v18, a5, &v25);
    uint64_t v20 = *(const void **)(v19 + 8);
    if (v20) {
      CFRetain(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v21 = *a6;
    *a6 = 0;
    uint64_t v22 = v26;
    uint64_t v26 = 0;
    uint64_t v23 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v23 = MEMORY[0x1E4F14398];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    [(WebKit::CompletionHandlerCallChecker *)v14 webView:WeakRetained runJavaScriptAlertPanelWithMessage:v17 initiatedByFrame:v20 completionHandler:v23];
    _Block_release(v23);
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v25) {
      CFRelease(*(CFTypeRef *)(v25 + 8));
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v14);
  }
  else
  {
    CFTypeRef v24 = *(void (**)(void))(*(void *)*a6 + 16);
    v24();
  }
}

void sub_198D11A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runJavaScriptConfirm(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (*(_DWORD *)(v8 + 24) & 8) != 0
    && (uint64_t v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    uint64_t v14 = v13;
    WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(a2);
    WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel_webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_completionHandler_, &v26);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15) {
      uint64_t v15 = *(void *)(v15 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    if (*a3) {
      id v17 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      id v17 = &stru_1EEA10550;
    }
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v25 = a2;
    uint64_t v18 = API::Object::newObject(0x140uLL, 60);
    uint64_t v19 = API::FrameInfo::FrameInfo(v18, a5, &v25);
    uint64_t v20 = *(const void **)(v19 + 8);
    if (v20) {
      CFRetain(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v21 = *a6;
    *a6 = 0;
    uint64_t v22 = v26;
    uint64_t v26 = 0;
    uint64_t v23 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v23 = MEMORY[0x1E4F14398];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    [(WebKit::CompletionHandlerCallChecker *)v14 webView:WeakRetained runJavaScriptConfirmPanelWithMessage:v17 initiatedByFrame:v20 completionHandler:v23];
    _Block_release(v23);
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v25) {
      CFRelease(*(CFTypeRef *)(v25 + 8));
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v14);
  }
  else
  {
    CFTypeRef v24 = *(void (**)(void))(*(void *)*a6 + 16);
    v24();
  }
}

void sub_198D11D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runJavaScriptPrompt(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 8)) == 0 || (*(_DWORD *)(v9 + 24) & 0x10) == 0)
  {
    uint64_t v30 = 0;
    (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v30);
    goto LABEL_5;
  }
  id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v9 + 16));
  if (!WeakRetained)
  {
    uint64_t v30 = 0;
    (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v30);
LABEL_5:
    int v11 = v30;
    uint64_t v30 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return;
  }
  uint64_t v18 = WeakRetained;
  WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(a2);
  WebKit::CompletionHandlerCallChecker::create(v18, (objc_object *)sel_webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_completionHandler_, (uint64_t *)&v30);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19) {
    uint64_t v19 = *(void *)(v19 + 8);
  }
  id v20 = objc_loadWeakRetained((id *)(v19 + 8));
  if (*a3) {
    uint64_t v21 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v21 = &stru_1EEA10550;
  }
  if (*a4) {
    uint64_t v22 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v22 = &stru_1EEA10550;
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v29 = a2;
  uint64_t v23 = API::Object::newObject(0x140uLL, 60);
  uint64_t v24 = API::FrameInfo::FrameInfo(v23, a6, &v29);
  uint64_t v25 = *(const void **)(v24 + 8);
  if (v25) {
    CFRetain(*(CFTypeRef *)(v24 + 8));
  }
  uint64_t v26 = *a7;
  *a7 = 0;
  char v27 = v30;
  uint64_t v30 = 0;
  CFTypeRef v28 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *CFTypeRef v28 = MEMORY[0x1E4F14398];
  v28[1] = 50331650;
  v28[2] = WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
  v28[3] = &WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::descriptor;
  v28[4] = v26;
  v28[5] = v27;
  [(WebKit::CompletionHandlerCallChecker *)v18 webView:v20 runJavaScriptTextInputPanelWithPrompt:v21 defaultText:v22 initiatedByFrame:v25 completionHandler:v28];
  _Block_release(v28);
  if (v25) {
    CFRelease(v25);
  }
  CFRelease(*(CFTypeRef *)(v23 + 8));
  if (v29) {
    CFRelease(*(CFTypeRef *)(v29 + 8));
  }
  if (v20) {
    CFRelease(v20);
  }

  CFRelease(v18);
}

void sub_198D12158(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(void *a1, uint64_t a2, uint64_t a3, WTF::String *a4, WTF::String *a5, uint64_t a6, uint64_t *a7)
{
  v60[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v13 = a1;
      id WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
      if (WeakRetained)
      {
        uint64_t v15 = WeakRetained;
        WebCore::NetworkStorageSession::findAdditionalLoginDomain();
        uint64_t v16 = v13[2];
        if (!*(unsigned char *)(a6 + 32) && !v59)
        {
          if (!v16)
          {
            if ((MEMORY[0x18] & 0x20) != 0) {
              goto LABEL_23;
            }
            uint64_t v17 = 0;
LABEL_22:
            uint64_t v13 = objc_loadWeakRetained((id *)(v17 + 8));
            WebKit::presentStorageAccessAlert(v13, a4, a5, a7);
LABEL_60:
            if (!v13) {
              goto LABEL_63;
            }
            uint64_t v22 = v13;
LABEL_62:
            CFRelease(v22);
LABEL_63:
            if (v59)
            {
              uint64_t v54 = v58;
              CFTypeRef v58 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2) {
                  WTF::StringImpl::destroy(v54, v21);
                }
                else {
                  *(_DWORD *)v54 -= 2;
                }
              }
            }
            CFRelease(v15);
            return;
          }
LABEL_7:
          uint64_t v17 = *(void *)(v16 + 8);
          if ((*(_DWORD *)(v17 + 24) & 0x20) != 0)
          {
LABEL_23:
            WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)v15, (objc_object *)sel__webView_requestStorageAccessPanelForDomain_underCurrentDomain_completionHandler_, v57);
            uint64_t v29 = v13[2];
            if (v29) {
              uint64_t v29 = *(void *)(v29 + 8);
            }
            uint64_t v13 = objc_loadWeakRetained((id *)(v29 + 8));
            if (*(void *)a4)
            {
              uint64_t v30 = (__CFString *)WTF::StringImpl::operator NSString *();
LABEL_27:
              if (*(void *)a5) {
                uint64_t v31 = (__CFString *)WTF::StringImpl::operator NSString *();
              }
              else {
                uint64_t v31 = &stru_1EEA10550;
              }
              uint64_t v32 = *a7;
              *a7 = 0;
              uint64_t v33 = v57[0];
              v57[0] = 0;
              long long v34 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
              *long long v34 = MEMORY[0x1E4F14398];
              v34[1] = 50331650;
              v34[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
              v34[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
              v34[4] = v32;
              v34[5] = v33;
              [v15 _webView:v13 requestStorageAccessPanelForDomain:v30 underCurrentDomain:v31 completionHandler:v34];
              uint64_t v35 = v34;
LABEL_59:
              _Block_release(v35);
              goto LABEL_60;
            }
LABEL_70:
            uint64_t v30 = &stru_1EEA10550;
            goto LABEL_27;
          }
          goto LABEL_22;
        }
        uint64_t v18 = *(void *)(v16 + 8);
        if ((*(_DWORD *)(v18 + 24) & 0x40) == 0)
        {
          if (!*(unsigned char *)(a6 + 32))
          {
            if (v59)
            {
              uint64_t v13 = objc_loadWeakRetained((id *)(v18 + 8));
              WebKit::presentStorageAccessAlertQuirk(v13, a4, (WTF::String *)&v58, a5, a7);
              goto LABEL_60;
            }
            goto LABEL_7;
          }
          id v19 = objc_loadWeakRetained((id *)(v18 + 8));
          if (*(unsigned char *)(a6 + 32))
          {
            id v20 = v19;
            WebKit::presentStorageAccessAlertSSOQuirk(v19, (__CFString *)a6, (uint64_t *)(a6 + 8), a7);
            if (!v20) {
              goto LABEL_63;
            }
            uint64_t v22 = v20;
            goto LABEL_62;
          }
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        uint64_t v25 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
        if (*(unsigned char *)(a6 + 32))
        {
          uint64_t v26 = (uint64_t *)(a6 + 8);
          v56 = v15;
          v57[0] = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v26, v23, v24);
          v57[1] = v27;
          long long v55 = a5;
          if (*v26) {
            uint64_t v28 = *v26 + 24 * *(unsigned int *)(*v26 - 4);
          }
          else {
            uint64_t v28 = 0;
          }
          while (1)
          {
            uint64_t v39 = v57[0];
            if (v57[0] == v28) {
              break;
            }
            id v40 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(v57[0] + 20)];
            uint64_t v41 = *(unsigned int *)(v39 + 20);
            if (v41)
            {
              v42 = *(void **)(v39 + 8);
              uint64_t v43 = 8 * v41;
              do
              {
                if (*v42) {
                  CFStringRef v44 = (__CFString *)WTF::StringImpl::operator NSString *();
                }
                else {
                  CFStringRef v44 = &stru_1EEA10550;
                }
                objc_msgSend(v40, "addObject:", v44, v55);
                ++v42;
                v43 -= 8;
              }
              while (v43);
            }
            if (*(void *)v39) {
              v45 = (__CFString *)WTF::StringImpl::operator NSString *();
            }
            else {
              v45 = &stru_1EEA10550;
            }
            objc_msgSend(v25, "setObject:forKey:", v40, v45, v55);
            v57[0] += 24;
            WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v57, v46, v47);
          }
          a5 = v55;
          uint64_t v15 = v56;
        }
        else
        {
          if (!v59) {
            goto LABEL_69;
          }
          if (v58) {
            uint64_t v36 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v36 = &stru_1EEA10550;
          }
          v60[0] = v36;
          uint64_t v37 = [MEMORY[0x1E4F1C978] arrayWithObjects:v60 count:1];
          if (*(void *)a5) {
            id v38 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            id v38 = &stru_1EEA10550;
          }
          [v25 setObject:v37 forKey:v38];
        }
        WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)v15, (objc_object *)sel__webView_requestStorageAccessPanelForDomain_underCurrentDomain_forQuirkDomains_completionHandler_, v57);
        uint64_t v48 = v13[2];
        if (v48) {
          uint64_t v48 = *(void *)(v48 + 8);
        }
        uint64_t v13 = objc_loadWeakRetained((id *)(v48 + 8));
        if (*(void *)a4) {
          id v49 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          id v49 = &stru_1EEA10550;
        }
        if (*(void *)a5) {
          CFTypeRef v50 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          CFTypeRef v50 = &stru_1EEA10550;
        }
        uint64_t v51 = *a7;
        *a7 = 0;
        uint64_t v52 = v57[0];
        v57[0] = 0;
        char v53 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
        *char v53 = MEMORY[0x1E4F14398];
        v53[1] = 50331650;
        v53[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
        v53[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
        v53[4] = v51;
        v53[5] = v52;
        [v15 _webView:v13 requestStorageAccessPanelForDomain:v49 underCurrentDomain:v50 forQuirkDomains:v25 completionHandler:v53];
        uint64_t v35 = v53;
        goto LABEL_59;
      }
    }
  }

  WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
}

void sub_198D127F8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (v14) {
    CFRelease(v14);
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  CFRelease(v15);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, const String *a4, uint64_t *a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 24) & 0x300) != 0)
      {
        id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          uint64_t v12 = WeakRetained;
          if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 24) & 0x200) != 0)
          {
            WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(a2 + 32) + 1000), &v53);
            WebCore::SecurityOrigin::createFromString((uint64_t *)&v52, (WebCore::SecurityOrigin *)&v53, v23);
            uint64_t v25 = v53;
            char v53 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v24);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
            WebKit::CompletionHandlerCallChecker::create(v12, (objc_object *)sel__webView_requestGeolocationPermissionForOrigin_initiatedByFrame_decisionHandler_, (uint64_t *)&v51);
            v61 = (CFTypeRef *)*a5;
            *a5 = 0;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v62, (uint64_t)v52 + 8);
            uint64_t v26 = v51;
            uint64_t v51 = 0;
            *(void *)&long long v64 = v26;
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
            uint64_t v27 = *(atomic_uint **)(a2 + 24);
            if (v27) {
              atomic_fetch_add(v27, 1u);
            }
            uint64_t v28 = (WTF::StringImpl *)v61;
            *((void *)&v64 + 1) = v27;
            v61 = 0;
            char v53 = v28;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v54, (uint64_t)v62);
            long long v29 = v64;
            long long v64 = 0uLL;
            long long v56 = v29;
            uint64_t v30 = (char *)malloc_type_malloc(0x58uLL, 0x10E20407B0F0E42uLL);
            *(void *)uint64_t v30 = MEMORY[0x1E4F14398];
            *((void *)v30 + 1) = 50331650;
            *((void *)v30 + 2) = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
            *((void *)v30 + 3) = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::descriptor;
            uint64_t v31 = v53;
            char v53 = 0;
            *((void *)v30 + 4) = v31;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v30 + 40), (uint64_t)v54);
            *(_OWORD *)(v30 + 72) = v56;
            long long v56 = 0uLL;
            if (v55 != -1) {
              ((void (*)(uint64_t *, unsigned char *))off_1EE9CFC18[v55])(&v50, v54);
            }
            int v55 = -1;
            uint64_t v33 = v53;
            char v53 = 0;
            if (v33) {
              (*(void (**)(WTF::StringImpl *))(*(void *)v33 + 8))(v33);
            }
            long long v34 = (unsigned int *)*((void *)&v64 + 1);
            *((void *)&v64 + 1) = 0;
            if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v32);
            }
            uint64_t v35 = (unsigned int *)v64;
            *(void *)&long long v64 = 0;
            if (v35) {
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v35);
            }
            if (v63 != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CFC18[v63])(&v53, v62);
            }
            int v63 = -1;
            uint64_t v36 = (uint64_t)v61;
            v61 = 0;
            if (v36) {
              (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
            }
            uint64_t v37 = *(void *)(a1 + 16);
            if (v37) {
              uint64_t v37 = *(void *)(v37 + 8);
            }
            id v38 = objc_loadWeakRetained((id *)(v37 + 8));
            API::SecurityOrigin::create(&v61);
            CFTypeRef v39 = v61[1];
            if (v39) {
              CFRetain(v61[1]);
            }
            WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)&v53, a4);
            CFRetain(*(CFTypeRef *)(a2 + 8));
            uint64_t v50 = a2;
            uint64_t v40 = API::Object::newObject(0x140uLL, 60);
            uint64_t v41 = API::FrameInfo::FrameInfo(v40, (uint64_t)&v53, &v50);
            v42 = *(const void **)(v41 + 8);
            if (v42) {
              CFRetain(*(CFTypeRef *)(v41 + 8));
            }
            [(WebKit::CompletionHandlerCallChecker *)v12 _webView:v38 requestGeolocationPermissionForOrigin:v39 initiatedByFrame:v42 decisionHandler:v30];
            if (v42) {
              CFRelease(v42);
            }
            CFRelease(*(CFTypeRef *)(v40 + 8));
            if (v50) {
              CFRelease(*(CFTypeRef *)(v50 + 8));
            }
            CFStringRef v44 = v60;
            v60 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2) {
                WTF::StringImpl::destroy(v44, v43);
              }
              else {
                *(_DWORD *)v44 -= 2;
              }
            }
            if (v59 != -1) {
              ((void (*)(uint64_t *, unsigned char *))off_1EE9CFC18[v59])(&v50, v58);
            }
            int v59 = -1;
            CFTypeRef v46 = cf;
            CFTypeRef cf = 0;
            if (v46) {
              CFRelease(v46);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v54);
            if (v39) {
              CFRelease(v39);
            }
            uint64_t v47 = (uint64_t)v61;
            v61 = 0;
            if (v47) {
              CFRelease(*(CFTypeRef *)(v47 + 8));
            }
            if (v38) {
              CFRelease(v38);
            }
            _Block_release(v30);
            if (v51) {
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v51);
            }
            id v49 = v52;
            uint64_t v52 = 0;
            if (v49) {
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v49, v48);
            }
          }
          else
          {
            WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_requestGeolocationPermissionForFrame_decisionHandler_, (uint64_t *)&v61);
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13) {
              uint64_t v13 = *(void *)(v13 + 8);
            }
            id v14 = objc_loadWeakRetained((id *)(v13 + 8));
            WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)&v53, a4);
            CFRetain(*(CFTypeRef *)(a2 + 8));
            uint64_t v52 = (WTF *)a2;
            uint64_t v15 = API::Object::newObject(0x140uLL, 60);
            uint64_t v16 = API::FrameInfo::FrameInfo(v15, (uint64_t)&v53, (uint64_t *)&v52);
            uint64_t v17 = *(const void **)(v16 + 8);
            if (v17) {
              CFRetain(*(CFTypeRef *)(v16 + 8));
            }
            uint64_t v18 = *a5;
            *a5 = 0;
            uint64_t v19 = (uint64_t)v61;
            v61 = 0;
            id v20 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
            *id v20 = MEMORY[0x1E4F14398];
            v20[1] = 50331650;
            v20[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
            v20[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::descriptor;
            v20[4] = v18;
            v20[5] = v19;
            [(WebKit::CompletionHandlerCallChecker *)v12 _webView:v14 requestGeolocationPermissionForFrame:v17 decisionHandler:v20];
            _Block_release(v20);
            if (v17) {
              CFRelease(v17);
            }
            CFRelease(*(CFTypeRef *)(v15 + 8));
            if (v52) {
              CFRelease(*((CFTypeRef *)v52 + 1));
            }
            uint64_t v22 = v60;
            v60 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v21);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
            if (v59 != -1) {
              ((void (*)(WTF **, unsigned char *))off_1EE9CFC18[v59])(&v52, v58);
            }
            int v59 = -1;
            CFTypeRef v45 = cf;
            CFTypeRef cf = 0;
            if (v45) {
              CFRelease(v45);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v54);
            if (v14) {
              CFRelease(v14);
            }
          }
          CFRelease(v12);
        }
      }
    }
  }
}

void sub_198D12FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, WTF *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, WTF *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef cf,uint64_t a38,uint64_t a39,uint64_t a40,int a41,WTF::StringImpl *a42)
{
  CFRelease(*(CFTypeRef *)(v44 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  uint64_t v50 = a42;
  a42 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v49);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  if (a41 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9CFC18[a41])(&a9, &a38);
  }
  a41 = -1;
  CFTypeRef v51 = cf;
  CFTypeRef cf = 0;
  if (v51) {
    CFRelease(v51);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a13);
  if (v46) {
    CFRelease(v46);
  }
  uint64_t v52 = *(void *)(v47 - 144);
  *(void *)(v47 - 144) = 0;
  if (v52) {
    CFRelease(*(CFTypeRef *)(v52 + 8));
  }
  if (v45) {
    CFRelease(v45);
  }
  _Block_release(v43);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  uint64_t v54 = a11;
  a11 = 0;
  if (v54) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v54, v53);
  }
  CFRelease(v42);
  _Unwind_Resume(a1);
}

void sub_198D134E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9CFC18[a16])(&a12, &a13);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didResignInputElementStrongPasswordAppearance(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, API::Object *a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 24) & 0x400) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
        if (WeakRetained)
        {
          uint64_t v8 = WeakRetained;
          uint64_t v9 = *((void *)this + 2);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 8);
          }
          id v10 = objc_loadWeakRetained((id *)(v9 + 8));
          if (a3) {
            uint64_t v11 = *((void *)a3 + 1);
          }
          else {
            uint64_t v11 = 0;
          }
          [v8 _webView:v10 didResignInputElementStrongPasswordAppearanceWithUserInfo:v11];
          if (v10) {
            CFRelease(v10);
          }
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_198D135E8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (*(_DWORD *)(v8 + 24) & 0x80) != 0
    && (uint64_t v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    id v14 = v13;
    WebKit::CompletionHandlerCallChecker::create(v13, (objc_object *)sel__webView_runBeforeUnloadConfirmPanelWithMessage_initiatedByFrame_completionHandler_, &v26);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15) {
      uint64_t v15 = *(void *)(v15 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    if (*a3) {
      uint64_t v17 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v17 = &stru_1EEA10550;
    }
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v25 = a2;
    uint64_t v18 = API::Object::newObject(0x140uLL, 60);
    uint64_t v19 = API::FrameInfo::FrameInfo(v18, a5, &v25);
    id v20 = *(const void **)(v19 + 8);
    if (v20) {
      CFRetain(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v21 = *a6;
    *a6 = 0;
    uint64_t v22 = v26;
    uint64_t v26 = 0;
    uint64_t v23 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v23 = MEMORY[0x1E4F14398];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    [(WebKit::CompletionHandlerCallChecker *)v14 _webView:WeakRetained runBeforeUnloadConfirmPanelWithMessage:v17 initiatedByFrame:v20 completionHandler:v23];
    _Block_release(v23);
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v25) {
      CFRelease(*(CFTypeRef *)(v25 + 8));
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v14);
  }
  else
  {
    uint64_t v24 = *(void (**)(void))(*(void *)*a6 + 16);
    v24();
  }
}

void sub_198D1383C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      if ((*(_DWORD *)(v12 + 24) & 0x30000) != 0)
      {
        id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v12 + 16));
        if (WeakRetained)
        {
          id v20 = WeakRetained;
          if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 24) & 0x20000) != 0)
          {
            WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_decideDatabaseQuotaForSecurityOrigin_databaseName_displayName_currentQuota_currentOriginUsage_currentDatabaseUsage_expectedUsage_decisionHandler_, &v40);
            uint64_t v29 = *(void *)(a1 + 16);
            if (v29) {
              uint64_t v29 = *(void *)(v29 + 8);
            }
            id v30 = objc_loadWeakRetained((id *)(v29 + 8));
            uint64_t v31 = *(void *)(a4 + 8);
            id v39 = v30;
            if (*a5) {
              uint64_t v32 = (__CFString *)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v32 = &stru_1EEA10550;
            }
            uint64_t v37 = v31;
            id v38 = v32;
            if (*a6) {
              uint64_t v33 = (__CFString *)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v33 = &stru_1EEA10550;
            }
            uint64_t v34 = *a11;
            *a11 = 0;
            uint64_t v35 = v40;
            uint64_t v40 = 0;
            uint64_t v36 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
            void *v36 = MEMORY[0x1E4F14398];
            v36[1] = 50331650;
            v36[2] = WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::{lambda(void *,unsigned long long)#1}::__invoke;
            v36[3] = &WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::descriptor;
            v36[4] = v34;
            v36[5] = v35;
            [(WebKit::CompletionHandlerCallChecker *)v20 _webView:v39 decideDatabaseQuotaForSecurityOrigin:v37 databaseName:v38 displayName:v33 currentQuota:a7 currentOriginUsage:a8 currentDatabaseUsage:a9 expectedUsage:a10 decisionHandler:v36];
            _Block_release(v36);
            if (!v39) {
              goto LABEL_22;
            }
            uint64_t v27 = v39;
          }
          else
          {
            WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_decideDatabaseQuotaForSecurityOrigin_currentQuota_currentOriginUsage_currentDatabaseUsage_expectedUsage_decisionHandler_, &v40);
            uint64_t v21 = *(void *)(a1 + 16);
            if (v21) {
              uint64_t v21 = *(void *)(v21 + 8);
            }
            id v22 = objc_loadWeakRetained((id *)(v21 + 8));
            uint64_t v23 = *(void *)(a4 + 8);
            uint64_t v24 = *a11;
            *a11 = 0;
            uint64_t v25 = v40;
            uint64_t v26 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
            *uint64_t v26 = MEMORY[0x1E4F14398];
            v26[1] = 50331650;
            v26[2] = WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::{lambda(void *,unsigned long long)#1}::__invoke;
            v26[3] = &WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::descriptor;
            v26[4] = v24;
            v26[5] = v25;
            [(WebKit::CompletionHandlerCallChecker *)v20 _webView:v22 decideDatabaseQuotaForSecurityOrigin:v23 currentQuota:a7 currentOriginUsage:a8 currentDatabaseUsage:a9 expectedUsage:a10 decisionHandler:v26];
            _Block_release(v26);
            if (!v22) {
              goto LABEL_22;
            }
            uint64_t v27 = v22;
          }
          CFRelease(v27);
LABEL_22:
          CFRelease(v20);
          return;
        }
      }
    }
  }
  uint64_t v28 = *(void (**)(void))(*(void *)*a11 + 16);

  v28();
}

void sub_198D13C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, unsigned int *a16)
{
  _Block_release(v17);
  if (cf) {
    CFRelease(cf);
  }
  if (a16) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a16);
  }
  CFRelease(v16);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::lockScreenOrientation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  if ((*(_DWORD *)(v4 + 24) & 0x40000) == 0) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v8 = WeakRetained;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9) {
    uint64_t v9 = *(void *)(v9 + 8);
  }
  id v10 = objc_loadWeakRetained((id *)(v9 + 8));
  if ((a3 - 1) < 3) {
    uint64_t v11 = (a3 - 1) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = [v8 _webViewLockScreenOrientation:v10 lockType:v11];
  if (v10) {
    CFRelease(v10);
  }
  CFRelease(v8);
  return v12;
}

void sub_198D13DDC(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::unlockScreenOrientation(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x80000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewUnlockScreenOrientation:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198D13EB8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::takeFocus(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, int a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4 || (*(_DWORD *)(v4 + 24) & 0x800) == 0) {
    return 0;
  }
  uint64_t result = (uint64_t)objc_loadWeakRetained((id *)(v4 + 16));
  if (result)
  {
    id v8 = (void *)result;
    uint64_t v9 = *((void *)this + 2);
    if (v9) {
      uint64_t v9 = *(void *)(v9 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v9 + 8));
    [v8 _webView:WeakRetained takeFocus:a3 != 0];
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v8);
    return 1;
  }
  return result;
}

void sub_198D13F90(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::handleAutoplayEvent(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 24) & 0x1000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 16));
        if (WeakRetained)
        {
          id v10 = WeakRetained;
          uint64_t v11 = *(void *)(a1 + 16);
          if (v11) {
            uint64_t v11 = *(void *)(v11 + 8);
          }
          id v12 = objc_loadWeakRetained((id *)(v11 + 8));
          if (a3 >= 4) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = a3;
          }
          [v10 _webView:v12 handleAutoplayEvent:v13 withFlags:a4 & 7];
          if (v12) {
            CFRelease(v12);
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198D14080(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && ((*(unsigned int *)(v6 + 24) | ((unint64_t)(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) << 32)) & 0x400000000000) != 0
    && (uint64_t v9 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 16))) != 0)
  {
    id v10 = v9;
    WebKit::CompletionHandlerCallChecker::create(v9, (objc_object *)sel__webView_requestNotificationPermissionForSecurityOrigin_decisionHandler_, &v17);
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11) {
      uint64_t v11 = *(void *)(v11 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v11 + 8));
    uint64_t v13 = *(void *)(a3 + 8);
    uint64_t v14 = *a4;
    *a4 = 0;
    uint64_t v15 = v17;
    uint64_t v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v16 = MEMORY[0x1E4F14398];
    v16[1] = 50331650;
    v16[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v16[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v16[4] = v14;
    v16[5] = v15;
    [(WebKit::CompletionHandlerCallChecker *)v10 _webView:WeakRetained requestNotificationPermissionForSecurityOrigin:v13 decisionHandler:v16];
    _Block_release(v16);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v10);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
}

void sub_198D14224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v12;
  _Block_release(v13);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && ((*(unsigned int *)(v4 + 24) | ((unint64_t)(*(unsigned __int16 *)(v4 + 28) | (*(unsigned __int8 *)(v4 + 30) << 16)) << 32)) & 0x800000000000) != 0
    && (uint64_t v6 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v4 + 16))) != 0)
  {
    uint64_t v7 = v6;
    WebKit::CompletionHandlerCallChecker::create(v6, (objc_object *)sel__webView_requestCookieConsentWithMoreInfoHandler_decisionHandler_, &v13);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v8 + 8));
    uint64_t v10 = *a2;
    *a2 = 0;
    uint64_t v11 = v13;
    id v12 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v12 = MEMORY[0x1E4F14398];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::descriptor;
    v12[4] = v10;
    v12[5] = v11;
    [(WebKit::CompletionHandlerCallChecker *)v7 _webView:WeakRetained requestCookieConsentWithMoreInfoHandler:0 decisionHandler:v12];
    _Block_release(v12);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v7);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>::operator()(a2);
  }
}

void sub_198D14430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v12;
  _Block_release(v13);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D14548(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::focusFromServiceWorker(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  if ((*(_DWORD *)(v3 + 24) & 0x2000) == 0) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  if (!WeakRetained) {
    return 0;
  }
  CFRelease(WeakRetained);
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 8);
  }
  id v7 = objc_loadWeakRetained((id *)(v6 + 16));
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 8);
  }
  id v9 = objc_loadWeakRetained((id *)(v8 + 8));
  uint64_t v10 = [v7 _focusWebViewFromServiceWorker:v9];
  if (v9) {
    CFRelease(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v10;
}

void sub_198D14640(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  WebKit::PageLoadState::activeURL((unsigned __int8 *)a2[4] + 1000, &v45);
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v39, (WebCore::SecurityOrigin *)&v45, v9);
  uint64_t v11 = v45;
  CFTypeRef v45 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12
    && (uint64_t v13 = *(void *)(v12 + 8)) != 0
    && (id v14 = objc_loadWeakRetained((id *)(v13 + 16))) != 0
    && (int v15 = *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 24), CFRelease(v14), (v15 & 0x8000) != 0))
  {
    uint64_t v18 = *(void *)(a1 + 16);
    if (v18) {
      uint64_t v18 = *(void *)(v18 + 8);
    }
    id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v18 + 16));
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_webView_requestDeviceOrientationAndMotionPermissionForOrigin_initiatedByFrame_decisionHandler_, (uint64_t *)&v38);
    id v20 = (CFTypeRef *)*a5;
    *a5 = 0;
    uint64_t v41 = v20;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v42, (uint64_t)v39 + 8);
    uint64_t v21 = v38;
    id v38 = 0;
    v44[0] = v21;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)(a2 + 2));
    id v22 = (atomic_uint *)a2[3];
    if (v22) {
      atomic_fetch_add(v22, 1u);
    }
    v44[1] = (WTF *)v22;
    CFTypeRef v45 = (WTF::StringImpl *)v41;
    uint64_t v41 = 0;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v46, (uint64_t)v42);
    long long v23 = *(_OWORD *)v44;
    v44[0] = 0;
    v44[1] = 0;
    long long v48 = v23;
    uint64_t v24 = (char *)malloc_type_malloc(0x58uLL, 0x10E20407B0F0E42uLL);
    *(void *)uint64_t v24 = MEMORY[0x1E4F14398];
    *((void *)v24 + 1) = 50331650;
    *((void *)v24 + 2) = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
    *((void *)v24 + 3) = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    uint64_t v25 = v45;
    CFTypeRef v45 = 0;
    *((void *)v24 + 4) = v25;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v24 + 40), (uint64_t)v46);
    *(_OWORD *)(v24 + 72) = v48;
    long long v48 = 0uLL;
    if (v47 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CFC18[v47])(&v40, v46);
    }
    int v47 = -1;
    uint64_t v27 = v45;
    CFTypeRef v45 = 0;
    if (v27) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v27 + 8))(v27);
    }
    uint64_t v28 = (unsigned int *)v44[1];
    v44[1] = 0;
    if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v26);
    }
    uint64_t v29 = (unsigned int *)v44[0];
    v44[0] = 0;
    if (v29) {
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v29);
    }
    if (v43 != -1) {
      ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CFC18[v43])(&v45, v42);
    }
    int v43 = -1;
    id v30 = v41;
    uint64_t v41 = 0;
    if (v30) {
      (*((void (**)(CFTypeRef *))*v30 + 1))(v30);
    }
    uint64_t v31 = *(void *)(a1 + 16);
    if (v31) {
      uint64_t v31 = *(void *)(v31 + 8);
    }
    id v32 = objc_loadWeakRetained((id *)(v31 + 8));
    API::SecurityOrigin::create(&v45);
    uint64_t v33 = (const void *)*((void *)v45 + 1);
    if (v33) {
      CFRetain(*((CFTypeRef *)v45 + 1));
    }
    CFRetain(a2[1]);
    uint64_t v41 = a2;
    uint64_t v34 = API::Object::newObject(0x140uLL, 60);
    uint64_t v35 = API::FrameInfo::FrameInfo(v34, a4, (uint64_t *)&v41);
    uint64_t v36 = *(const void **)(v35 + 8);
    if (v36) {
      CFRetain(*(CFTypeRef *)(v35 + 8));
    }
    [(WebKit::CompletionHandlerCallChecker *)WeakRetained webView:v32 requestDeviceOrientationAndMotionPermissionForOrigin:v33 initiatedByFrame:v36 decisionHandler:v24];
    if (v36) {
      CFRelease(v36);
    }
    CFRelease(*(CFTypeRef *)(v34 + 8));
    if (v41) {
      CFRelease(v41[1]);
    }
    if (v33) {
      CFRelease(v33);
    }
    uint64_t v37 = v45;
    CFTypeRef v45 = 0;
    if (v37) {
      CFRelease(*((CFTypeRef *)v37 + 1));
    }
    if (v32) {
      CFRelease(v32);
    }
    _Block_release(v24);
    if (v38) {
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v38);
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WebKit::alertForPermission((WebKit::WebPageProxy *)a2, (__CFString *)3, (_DWORD *)v39 + 2, a5);
  }
  uint64_t result = v39;
  id v39 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v16);
  }
  return result;
}

void sub_198D14AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, WTF *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,WTF *a21,CFTypeRef *a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,WTF *a28)
{
  CFRelease(*(CFTypeRef *)(v30 + 8));
  if (a15) {
    CFRelease(*(CFTypeRef *)(a15 + 8));
  }
  if (v32) {
    CFRelease(v32);
  }
  if (a22) {
    CFRelease(a22[1]);
  }
  if (v31) {
    CFRelease(v31);
  }
  _Block_release(v29);
  if (a9) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a9);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a10, v34);
  }
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didChangeFontAttributes(WebKit::UIDelegate::UIClient *this, const WebCore::FontAttributes *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x40000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        id v7 = WeakRetained;
        if (WeakRetained) {
          CFRelease(WeakRetained);
        }
        uint64_t v8 = *((void *)this + 2);
        if (v8) {
          uint64_t v8 = *(void *)(v8 + 8);
        }
        id v9 = objc_loadWeakRetained((id *)(v8 + 8));
        WebCore::FontAttributes::createDictionary((uint64_t *)&cf, a2);
        [v7 _webView:v9 didChangeFontAttributes:cf];
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_198D14E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WTF::StringImpl *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, CFTypeRef *a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 2);
  if (!v6) {
    return this;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    return this;
  }
  uint64_t v12 = this;
  id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 16));
  if (!WeakRetained)
  {
    CFRetain(a6[1]);
    uint64_t v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v16 = &unk_1EE9D0200;
    *((void *)v16 + 1) = a6;
    CFTypeRef v90 = v16;
    WTF::ensureOnMainRunLoop();
    goto LABEL_14;
  }
  id v14 = WeakRetained;
  CFRelease(WeakRetained);
  if (*((unsigned __int8 *)a6 + 112) - 1 <= 1)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0 || (*((unsigned int (**)(CFTypeRef *))*a6 + 4))(a6))
    {
      int v15 = (uint64_t (*)(CFTypeRef *, uint64_t))*((void *)*a6 + 3);
      return (WTF::StringImpl *)v15(a6, 2);
    }
    uint64_t v28 = *((void *)v12 + 2);
    if (v28) {
      uint64_t v28 = *(void *)(v28 + 8);
    }
    uint64_t v29 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v28 + 16));
    uint64_t v30 = v29;
    if (v29) {
      CFRelease(v29);
    }
    WebKit::CompletionHandlerCallChecker::create(v30, (objc_object *)sel__webView_requestDisplayCapturePermissionForOrigin_initiatedByFrame_withSystemAudio_decisionHandler_, (uint64_t *)&v86);
    CFRetain(a6[1]);
    uint64_t v31 = v86;
    v86 = 0;
    id v32 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *id v32 = MEMORY[0x1E4F14398];
    v32[1] = 50331650;
    v32[2] = WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKDisplayCapturePermissionDecision)#1}::__invoke;
    v32[3] = &WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::descriptor;
    v32[4] = a6;
    v32[5] = v31;
    uint64_t v33 = *((void *)a3 + 3);
    v84 = v30;
    if (v33 && (uint64_t v34 = *(void *)(v33 + 8)) != 0 && (v35 = *(void *)(v34 + 312)) != 0)
    {
      uint64_t v36 = *(void *)(v35 + 272);
      uint64_t v83 = *(void *)(v35 + 280);
      unint64_t v37 = v36 & 0xFFFFFFFFFFFFFF00;
      char v38 = 1;
    }
    else
    {
      unint64_t v37 = 0;
      LOBYTE(v36) = 0;
      char v38 = 0;
    }
    LOWORD(v90) = *((unsigned __int8 *)a3 + 441);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v91);
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v93, (uint64_t)a4 + 16);
    long long v96 = *((_OWORD *)a3 + 17);
    v95 = 0;
    unint64_t v97 = v36 | v37;
    uint64_t v98 = v83;
    char v99 = v38;
    uint64_t v58 = *(void *)(*(void *)(*((void *)a3 + 4) + 16) + 136);
    if (v58) {
      LODWORD(v58) = *(_DWORD *)(v58 + 108);
    }
    int v100 = v58;
    uint64_t v59 = *((void *)a3 + 3);
    if (v59)
    {
      uint64_t v60 = *(void *)(v59 + 8);
      if (v60)
      {
        __int16 v101 = *(void *)(v60 + 328) == (void)a3;
        CFRetain(*(CFTypeRef *)(v60 - 8));
        uint64_t v59 = v60 - 16;
LABEL_97:
        long long v89 = (CFTypeRef *)v59;
        uint64_t v72 = API::Object::newObject(0x140uLL, 60);
        uint64_t v73 = API::FrameInfo::FrameInfo(v72, (uint64_t)&v90, (uint64_t *)&v89);
        char v74 = *(const void **)(v73 + 8);
        if (v74)
        {
          CFRetain(*(CFTypeRef *)(v73 + 8));
          CFTypeRef v75 = *(const void **)(v72 + 8);
        }
        else
        {
          CFTypeRef v75 = 0;
        }
        CFRelease(v75);
        if (v89) {
          CFRelease(v89[1]);
        }
        uint64_t v76 = *((void *)v12 + 2);
        if (v76) {
          uint64_t v76 = *(void *)(v76 + 8);
        }
        int v77 = *((unsigned __int8 *)a6 + 112);
        id v78 = objc_loadWeakRetained((id *)(v76 + 8));
        [(WebKit::CompletionHandlerCallChecker *)v84 _webView:v78 requestDisplayCapturePermissionForOrigin:*((void *)a5 + 1) initiatedByFrame:v74 withSystemAudio:v77 == 2 decisionHandler:v32];
        if (v78) {
          CFRelease(v78);
        }
        if (v74) {
          CFRelease(v74);
        }
        long long v80 = v95;
        v95 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2) {
            WTF::StringImpl::destroy(v80, v79);
          }
          else {
            *(_DWORD *)v80 -= 2;
          }
        }
        if (v94 != -1) {
          ((void (*)(CFTypeRef **, unsigned char *))off_1EE9CFC18[v94])(&v89, v93);
        }
        int v94 = -1;
        CFTypeRef v81 = cf;
        CFTypeRef cf = 0;
        if (v81) {
          CFRelease(v81);
        }
LABEL_116:
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v91);
        _Block_release(v32);
        this = v86;
        if (v86) {
          return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v86);
        }
        return this;
      }
      uint64_t v59 = 0;
    }
    __int16 v101 = 0;
    goto LABEL_97;
  }
  char v17 = objc_opt_respondsToSelector();
  char v18 = objc_opt_respondsToSelector();
  if ((v17 & 1) == 0 && (v18 & 1) == 0)
  {
    CFRetain(a6[1]);
    uint64_t v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v19 = &unk_1EE9D0228;
    *((void *)v19 + 1) = a6;
    CFTypeRef v90 = v19;
    WTF::ensureOnMainRunLoop();
    goto LABEL_14;
  }
  if (v17)
  {
    WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel_webView_requestMediaCapturePermissionForOrigin_initiatedByFrame_type_decisionHandler_, (uint64_t *)&v86);
    CFRetain(a6[1]);
    id v20 = v86;
    v86 = 0;
    uint64_t v21 = (WebCore::ResourceRequestBase *)malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *(void *)uint64_t v21 = MEMORY[0x1E4F14398];
    *((void *)v21 + 1) = 50331650;
    *((void *)v21 + 2) = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
    *((void *)v21 + 3) = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::descriptor;
    *((void *)v21 + 4) = a6;
    *((void *)v21 + 5) = v20;
    uint64_t v22 = *((void *)a3 + 3);
    int v85 = v21;
    if (v22 && (uint64_t v23 = *(void *)(v22 + 8)) != 0 && (v24 = *(void *)(v23 + 312)) != 0)
    {
      uint64_t v25 = *(void *)(v24 + 272);
      uint64_t v82 = *(void *)(v24 + 280);
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFF00;
      char v27 = 1;
    }
    else
    {
      unint64_t v26 = 0;
      LOBYTE(v25) = 0;
      char v27 = 0;
    }
    LOWORD(v90) = *((unsigned __int8 *)a3 + 441);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v91);
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v93, (uint64_t)a4 + 16);
    long long v96 = *((_OWORD *)a3 + 17);
    v95 = 0;
    unint64_t v97 = v25 | v26;
    uint64_t v98 = v82;
    char v99 = v27;
    uint64_t v55 = *(void *)(*(void *)(*((void *)a3 + 4) + 16) + 136);
    id v32 = v85;
    if (v55) {
      LODWORD(v55) = *(_DWORD *)(v55 + 108);
    }
    int v100 = v55;
    uint64_t v56 = *((void *)a3 + 3);
    if (v56)
    {
      uint64_t v57 = *(void *)(v56 + 8);
      if (v57)
      {
        __int16 v101 = *(void *)(v57 + 328) == (void)a3;
        CFRetain(*(CFTypeRef *)(v57 - 8));
        uint64_t v56 = v57 - 16;
LABEL_68:
        long long v89 = (CFTypeRef *)v56;
        uint64_t v62 = API::Object::newObject(0x140uLL, 60);
        uint64_t v63 = API::FrameInfo::FrameInfo(v62, (uint64_t)&v90, (uint64_t *)&v89);
        long long v64 = *(const void **)(v63 + 8);
        if (v64)
        {
          CFRetain(*(CFTypeRef *)(v63 + 8));
          uint64_t v65 = *(const void **)(v62 + 8);
        }
        else
        {
          uint64_t v65 = 0;
        }
        CFRelease(v65);
        if (v89) {
          CFRelease(v89[1]);
        }
        if (*((_DWORD *)a6 + 27))
        {
          if (*((unsigned __int8 *)a6 + 112) - 1 >= 2)
          {
            if (*((_DWORD *)a6 + 23)) {
              uint64_t v66 = 2;
            }
            else {
              uint64_t v66 = 1;
            }
          }
          else
          {
            uint64_t v66 = 1;
          }
        }
        else
        {
          uint64_t v66 = 0;
        }
        uint64_t v67 = *((void *)v12 + 2);
        if (v67) {
          uint64_t v67 = *(void *)(v67 + 8);
        }
        id v68 = objc_loadWeakRetained((id *)(v67 + 8));
        [(WebKit::CompletionHandlerCallChecker *)v14 webView:v68 requestMediaCapturePermissionForOrigin:*((void *)a5 + 1) initiatedByFrame:v64 type:v66 decisionHandler:v85];
        if (v68) {
          CFRelease(v68);
        }
        if (v64) {
          CFRelease(v64);
        }
        v70 = v95;
        v95 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2) {
            WTF::StringImpl::destroy(v70, v69);
          }
          else {
            *(_DWORD *)v70 -= 2;
          }
        }
        if (v94 != -1) {
          ((void (*)(CFTypeRef **, unsigned char *))off_1EE9CFC18[v94])(&v89, v93);
        }
        int v94 = -1;
        CFTypeRef v71 = cf;
        CFTypeRef cf = 0;
        if (v71) {
          CFRelease(v71);
        }
        goto LABEL_116;
      }
      uint64_t v56 = 0;
    }
    __int16 v101 = 0;
    goto LABEL_68;
  }
  if ((v18 & 1) == 0)
  {
    CFRetain(a6[1]);
    v61 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)v61 = &unk_1EE9D0250;
    *((void *)v61 + 1) = a6;
    CFTypeRef v90 = v61;
    WTF::ensureOnMainRunLoop();
LABEL_14:
    this = v90;
    CFTypeRef v90 = 0;
    if (this) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
    }
    return this;
  }
  id v39 = (WTF::StringImpl *)*((void *)a3 + 6);
  if (v39) {
    *(_DWORD *)v39 += 2;
  }
  CFTypeRef v90 = v39;
  long long v40 = *(_OWORD *)((char *)a3 + 72);
  v91[0] = *(_OWORD *)((char *)a3 + 56);
  v91[1] = v40;
  uint64_t v41 = *(void *)(*((void *)a3 + 3) + 8);
  if (v41) {
    uint64_t v42 = v41 - 16;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = *(void *)(v42 + 328);
  uint64_t v44 = *(WTF::StringImpl **)(v43 + 48);
  if (v44) {
    *(_DWORD *)v44 += 2;
  }
  v86 = v44;
  long long v45 = *(_OWORD *)(v43 + 72);
  long long v87 = *(_OWORD *)(v43 + 56);
  long long v88 = v45;
  if (*((_DWORD *)a6 + 23)) {
    BOOL v46 = *((unsigned __int8 *)a6 + 112) - 1 >= 2;
  }
  else {
    BOOL v46 = 0;
  }
  if (v46) {
    uint64_t v47 = (*((_DWORD *)a6 + 27) != 0) | 2;
  }
  else {
    uint64_t v47 = *((_DWORD *)a6 + 27) != 0;
  }
  WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel__webView_requestUserMediaAuthorizationForDevices_url_mainFrameURL_decisionHandler_, (uint64_t *)&v89);
  CFRetain(a6[1]);
  long long v48 = v89;
  long long v89 = 0;
  uint64_t v49 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  void *v49 = MEMORY[0x1E4F14398];
  v49[1] = 50331650;
  v49[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
  v49[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::descriptor;
  v49[4] = a6;
  v49[5] = v48;
  uint64_t v50 = *((void *)v12 + 2);
  if (v50) {
    uint64_t v50 = *(void *)(v50 + 8);
  }
  id v51 = objc_loadWeakRetained((id *)(v50 + 8));
  uint64_t v52 = WTF::URL::operator NSURL *();
  [(WebKit::CompletionHandlerCallChecker *)v14 _webView:v51 requestUserMediaAuthorizationForDevices:v47 url:v52 mainFrameURL:WTF::URL::operator NSURL *() decisionHandler:v49];
  if (v51) {
    CFRelease(v51);
  }
  _Block_release(v49);
  if (v89) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v89);
  }
  uint64_t v54 = v86;
  v86 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, v53);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  this = v90;
  CFTypeRef v90 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v53);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void sub_198D157EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WebCore::ResourceRequestBase *a12, WebCore::ResourceRequestBase *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf,uint64_t a46,uint64_t a47,uint64_t a48,int a49,WTF::StringImpl *a50)
{
  char v53 = a50;
  a50 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, a2);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  if (a49 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE9CFC18[a49])(&a19, v51);
  }
  a49 = -1;
  CFTypeRef v54 = cf;
  CFTypeRef cf = 0;
  if (v54) {
    CFRelease(v54);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(a13);
  _Block_release(v50);
  if (a14) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)a14);
  }
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 16));
      if (WeakRetained)
      {
        uint64_t v12 = WeakRetained;
        if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 24) & 0x10000000) != 0)
        {
          uint64_t v13 = *(void *)(*(void *)(a3 + 24) + 8);
          if (v13) {
            uint64_t v14 = v13 - 16;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *(void *)(v14 + 328);
          if (v15) {
            CFRetain(*(CFTypeRef *)(v15 + 8));
          }
          if (objc_opt_respondsToSelector())
          {
            WebKit::CompletionHandlerCallChecker::create(v12, (objc_object *)sel__webView_includeSensitiveMediaDeviceDetails_, (uint64_t *)&v30);
            CFRetain(*(CFTypeRef *)(a6 + 8));
            uint64_t v16 = v30;
            uint64_t v30 = 0;
            char v17 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
            *char v17 = MEMORY[0x1E4F14398];
            v17[1] = 50331650;
            v17[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
            v17[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::descriptor;
            v17[4] = a6;
            v17[5] = v16;
            uint64_t v18 = *(void *)(a1 + 16);
            if (v18) {
              uint64_t v18 = *(void *)(v18 + 8);
            }
            id v19 = objc_loadWeakRetained((id *)(v18 + 8));
            [(WebKit::CompletionHandlerCallChecker *)v12 _webView:v19 includeSensitiveMediaDeviceDetails:v17];
            if (v19) {
              CFRelease(v19);
            }
            _Block_release(v17);
            if (v30) {
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v30);
            }
            if (!v15) {
              goto LABEL_42;
            }
          }
          else
          {
            WebKit::CompletionHandlerCallChecker::create(v12, (objc_object *)sel__webView_checkUserMediaPermissionForURL_mainFrameURL_frameIdentifier_decisionHandler_, (uint64_t *)&v33);
            CFRetain(*(CFTypeRef *)(a6 + 8));
            id v20 = v33;
            uint64_t v33 = 0;
            uint64_t v21 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
            void *v21 = MEMORY[0x1E4F14398];
            v21[1] = 50331650;
            v21[2] = WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::{lambda(void *,NSString *,BOOL)#1}::__invoke;
            v21[3] = &WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::descriptor;
            v21[4] = a6;
            v21[5] = v20;
            uint64_t v22 = *(WTF::StringImpl **)(a3 + 48);
            if (v22) {
              *(_DWORD *)v22 += 2;
            }
            uint64_t v30 = v22;
            long long v31 = *(_OWORD *)(a3 + 56);
            long long v32 = *(_OWORD *)(a3 + 72);
            uint64_t v23 = *(WTF::StringImpl **)(v15 + 48);
            if (v23) {
              *(_DWORD *)v23 += 2;
            }
            uint64_t v29 = v23;
            uint64_t v24 = *(void *)(a1 + 16);
            if (v24) {
              uint64_t v24 = *(void *)(v24 + 8);
            }
            id v25 = objc_loadWeakRetained((id *)(v24 + 8));
            uint64_t v26 = WTF::URL::operator NSURL *();
            [(WebKit::CompletionHandlerCallChecker *)v12 _webView:v25 checkUserMediaPermissionForURL:v26 mainFrameURL:WTF::URL::operator NSURL *() frameIdentifier:*(void *)(a3 + 272) decisionHandler:v21];
            if (v25) {
              CFRelease(v25);
            }
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v27);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
            uint64_t v28 = v30;
            uint64_t v30 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2) {
                WTF::StringImpl::destroy(v28, v27);
              }
              else {
                *(_DWORD *)v28 -= 2;
              }
            }
            _Block_release(v21);
            if (v33) {
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v33);
            }
          }
          CFRelease(*(CFTypeRef *)(v15 + 8));
        }
        else
        {
          WebKit::UserMediaPermissionCheckProxy::complete(a6);
        }
LABEL_42:
        CFRelease(v12);
        return;
      }
      WebKit::UserMediaPermissionCheckProxy::complete(a6);
    }
  }
}

void sub_198D15E3C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (v17) {
    CFRelease(v17);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Block_release(v16);
  uint64_t v21 = *(unsigned int **)(v19 - 72);
  if (v21) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v21);
  }
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  CFRelease(v15);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::mediaCaptureStateDidChange(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      id to = 0;
      objc_copyWeak(&to, (id *)(v3 + 8));
      [objc_loadWeak(&to) didChangeValueForKey:@"mediaCaptureState"];
      uint64_t v6 = *(void *)(a1 + 16);
      if (v6) {
        uint64_t v6 = *(void *)(v6 + 8);
      }
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
      if (WeakRetained)
      {
        if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 24) & 0x20000000) != 0)
        {
          id v8 = objc_loadWeakRetained(&to);
          [WeakRetained _webView:v8 mediaCaptureStateDidChange:(a2 >> 11) & 0xF];
          if (v8) {
            CFRelease(v8);
          }
        }
        CFRelease(WeakRetained);
      }
      objc_destroyWeak(&to);
    }
  }
}

void sub_198D16038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
      if (WeakRetained)
      {
        uint64_t v11 = WeakRetained;
        uint64_t v12 = *(void *)(a3 + 272);
        uint64_t v13 = *(void *)(a3 + 280);
        uint64_t v14 = API::Object::newObject(0x28uLL, 11);
        *(void *)uint64_t v14 = &unk_1EE9D1E28;
        WebKit::InitializeWebKit2((WebKit *)v14);
        *(void *)uint64_t v14 = &unk_1EE9B3E30;
        *(void *)(v14 + 16) = v12;
        *(void *)(v14 + 24) = v13;
        *(unsigned char *)(v14 + 32) = 0;
        uint64_t v15 = *(void *)(a1 + 16);
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 8);
          int v17 = *(_DWORD *)(v16 + 24);
          if ((v17 & 0x400000) == 0)
          {
            if ((v17 & 0x200000) == 0) {
              goto LABEL_16;
            }
            goto LABEL_14;
          }
        }
        else if ((MEMORY[0x18] & 0x400000) == 0)
        {
          if ((MEMORY[0x18] & 0x200000) == 0)
          {
LABEL_16:
            WTF::CompletionHandler<void ()(void)>::operator()(a5);
LABEL_21:
            CFRelease(*(CFTypeRef *)(v14 + 8));
            CFRelease(v11);
            return;
          }
          uint64_t v16 = 0;
LABEL_14:
          id v18 = objc_loadWeakRetained((id *)(v16 + 8));
          [v11 _webView:v18 printFrame:*(void *)(v14 + 8)];
          if (v18) {
            CFRelease(v18);
          }
          goto LABEL_16;
        }
        WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)v11, (objc_object *)sel__webView_printFrame_pdfFirstPageSize_completionHandler_, &v29);
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19) {
          uint64_t v19 = *(void *)(v19 + 8);
        }
        id v20 = objc_loadWeakRetained((id *)(v19 + 8));
        uint64_t v21 = *(void *)(v14 + 8);
        WebCore::FloatSize::operator CGSize();
        double v23 = v22;
        double v25 = v24;
        uint64_t v26 = v29;
        uint64_t v29 = 0;
        uint64_t v27 = *a5;
        *a5 = 0;
        uint64_t v28 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
        *uint64_t v28 = MEMORY[0x1E4F14398];
        v28[1] = 50331650;
        v28[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
        v28[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
        v28[4] = v26;
        v28[5] = v27;
        objc_msgSend(v11, "_webView:printFrame:pdfFirstPageSize:completionHandler:", v20, v21, v28, v23, v25);
        _Block_release(v28);
        if (v20) {
          CFRelease(v20);
        }
        goto LABEL_21;
      }
    }
  }

  WTF::CompletionHandler<void ()(void)>::operator()(a5);
}

void sub_198D162FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v12) {
    CFRelease(v12);
  }
  CFRelease(*(CFTypeRef *)(v11 + 8));
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::close(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v5 = *(_DWORD *)(v3 + 24);
      if ((v5 & 0x1000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (!WeakRetained) {
          return;
        }
        uint64_t v7 = WeakRetained;
        uint64_t v11 = *((void *)this + 2);
        if (v11) {
          uint64_t v11 = *(void *)(v11 + 8);
        }
        id v9 = objc_loadWeakRetained((id *)(v11 + 8));
        [v7 _webViewClose:v9];
      }
      else
      {
        if ((v5 & 0x800000) == 0) {
          return;
        }
        id v6 = objc_loadWeakRetained((id *)(v3 + 16));
        if (!v6) {
          return;
        }
        uint64_t v7 = v6;
        uint64_t v8 = *((void *)this + 2);
        if (v8) {
          uint64_t v8 = *(void *)(v8 + 8);
        }
        id v9 = objc_loadWeakRetained((id *)(v8 + 8));
        [v7 webViewDidClose:v9];
      }
      if (v9) {
        CFRelease(v9);
      }
      CFRelease(v7);
    }
  }
}

void sub_198D164BC(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::fullscreenMayReturnToInline(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x2000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          id v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewFullscreenMayReturnToInline:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198D165A0(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didEnterFullscreen(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x4000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          id v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewDidEnterFullscreen:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198D1667C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didExitFullscreen(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x8000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          id v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewDidExitFullscreen:v8];
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198D16758(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::shouldIncludeAppLinkActionsForElement(WebKit::UIDelegate::UIClient *this, _WKActivatedElementInfo *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 1;
  }
  if ((*(_DWORD *)(v3 + 24) & 0x80000000) == 0) {
    return 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  if (!WeakRetained) {
    return 1;
  }
  uint64_t v7 = WeakRetained;
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 8);
  }
  id v9 = objc_loadWeakRetained((id *)(v8 + 8));
  uint64_t v10 = [v7 _webView:v9 shouldIncludeAppLinkActionsForElement:a2];
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v7);
  return v10;
}

void sub_198D16820(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::actionsForElement(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && ((*(unsigned int *)(v7 + 24) | ((unint64_t)(*(unsigned __int16 *)(v7 + 28) | (*(unsigned __int8 *)(v7 + 30) << 16)) << 32)) & 0x100000000) != 0
    && (id v10 = objc_loadWeakRetained((id *)(v7 + 16))) != 0)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12) {
      uint64_t v12 = *(void *)(v12 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v12 + 8));
    uint64_t v14 = (const void *)[v11 _webView:WeakRetained actionsForElement:a2 defaultActions:*a3];
    *a4 = v14;
    if (v14) {
      CFRetain(v14);
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v11);
  }
  else
  {
    uint64_t v15 = *a3;
    *a3 = 0;
    *a4 = v15;
  }
}

void sub_198D16934(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didNotHandleTapAsClick(WebKit::UIDelegate::UIClient *this, const WebCore::IntPoint *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x200000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          WebCore::IntPoint::operator CGPoint();
          objc_msgSend(v6, "_webView:didNotHandleTapAsClickAtPoint:", v8);
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198D16A1C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::statusBarWasTapped(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x400000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
        if (WeakRetained)
        {
          int v5 = WeakRetained;
          uint64_t v6 = *((void *)this + 2);
          if (v6) {
            uint64_t v6 = *(void *)(v6 + 8);
          }
          id v7 = objc_loadWeakRetained((id *)(v6 + 8));
          [v5 _webViewStatusBarWasTapped:v7];
          if (v7) {
            CFRelease(v7);
          }
          CFRelease(v5);
        }
      }
    }
  }
}

void sub_198D16AF8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::setShouldKeepScreenAwake(WebKit::UIDelegate::UIClient *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3
    || ((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x800000000) == 0)
  {
    return 0;
  }
  uint64_t result = (uint64_t)objc_loadWeakRetained((id *)(v3 + 16));
  if (result)
  {
    id v7 = (void *)result;
    uint64_t v8 = *((void *)this + 2);
    if (v8) {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v8 + 8));
    [v7 _webView:WeakRetained setShouldKeepScreenAwake:a2];
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v7);
    return 1;
  }
  return result;
}

void sub_198D16BCC(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::presentingViewController(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x1000000000) == 0) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  if (!WeakRetained) {
    return 0;
  }
  int v5 = WeakRetained;
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 8);
  }
  id v7 = objc_loadWeakRetained((id *)(v6 + 8));
  uint64_t v8 = [v5 _presentingViewControllerForWebView:v7];
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v5);
  return v8;
}

void sub_198D16C9C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::UIDelegate::UIClient::dataDetectionReferenceDate(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1 || (uint64_t v2 = *(void *)(v1 + 8)) == 0)
  {
    unint64_t v12 = 0;
LABEL_12:
    uint64_t v13 = 0;
    return v13 | v12;
  }
  if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x2000000000) == 0
    || (id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16))) == 0)
  {
    unint64_t v12 = 0;
    goto LABEL_12;
  }
  int v5 = WeakRetained;
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 8);
  }
  id v7 = objc_loadWeakRetained((id *)(v6 + 8));
  uint64_t v8 = (WebCore::DataDetection *)[v5 _dataDetectionContextForWebView:v7];
  uint64_t ReferenceDate = WebCore::DataDetection::extractReferenceDate(v8, v9);
  unsigned __int8 v11 = ReferenceDate;
  unint64_t v12 = ReferenceDate & 0xFFFFFFFFFFFFFF00;
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v5);
  uint64_t v13 = v11;
  return v13 | v12;
}

void sub_198D16DA8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didShowSafeBrowsingWarning(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x10000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
        if (WeakRetained)
        {
          int v5 = WeakRetained;
          uint64_t v6 = *((void *)this + 2);
          if (v6) {
            uint64_t v6 = *(void *)(v6 + 8);
          }
          id v7 = objc_loadWeakRetained((id *)(v6 + 8));
          [v5 _webViewDidShowSafeBrowsingWarning:v7];
          if (v7) {
            CFRelease(v7);
          }
          CFRelease(v5);
        }
      }
    }
  }
}

void sub_198D16E84(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::confirmPDFOpening(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && ((*(unsigned int *)(v7 + 24) | ((unint64_t)(*(unsigned __int16 *)(v7 + 28) | (*(unsigned __int8 *)(v7 + 30) << 16)) << 32)) & 0x20000000000) != 0
    && (unsigned __int8 v11 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 16))) != 0)
  {
    unint64_t v12 = v11;
    WebKit::CompletionHandlerCallChecker::create(v11, (objc_object *)sel__webView_shouldAllowPDFAtURL_toOpenFromFrame_completionHandler_, &v23);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13) {
      uint64_t v13 = *(void *)(v13 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v13 + 8));
    uint64_t v15 = WTF::URL::operator NSURL *();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v22 = a2;
    uint64_t v16 = API::Object::newObject(0x140uLL, 60);
    uint64_t v17 = API::FrameInfo::FrameInfo(v16, a4, &v22);
    id v18 = *(const void **)(v17 + 8);
    if (v18) {
      CFRetain(*(CFTypeRef *)(v17 + 8));
    }
    uint64_t v19 = *a5;
    *a5 = 0;
    uint64_t v20 = v23;
    uint64_t v23 = 0;
    uint64_t v21 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v21 = MEMORY[0x1E4F14398];
    v21[1] = 50331650;
    v21[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v21[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v21[4] = v19;
    v21[5] = v20;
    [(WebKit::CompletionHandlerCallChecker *)v12 _webView:WeakRetained shouldAllowPDFAtURL:v15 toOpenFromFrame:v18 completionHandler:v21];
    _Block_release(v21);
    if (v18) {
      CFRelease(v18);
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
    if (v22) {
      CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v12);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
  }
}

void sub_198D170A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && ((*(unsigned int *)(v8 + 24) | ((unint64_t)(*(unsigned __int16 *)(v8 + 28) | (*(unsigned __int8 *)(v8 + 30) << 16)) << 32)) & 0x40000000000) != 0
    && (uint64_t v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    uint64_t v14 = v13;
    WebKit::CompletionHandlerCallChecker::create(v13, (objc_object *)sel__webView_runWebAuthenticationPanel_initiatedByFrame_completionHandler_, &v25);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15) {
      uint64_t v15 = *(void *)(v15 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    uint64_t v17 = *(void *)(a3 + 8);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v24 = a2;
    uint64_t v18 = API::Object::newObject(0x140uLL, 60);
    uint64_t v19 = API::FrameInfo::FrameInfo(v18, a5, &v24);
    uint64_t v20 = *(const void **)(v19 + 8);
    if (v20) {
      CFRetain(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v21 = *a6;
    *a6 = 0;
    uint64_t v22 = v25;
    uint64_t v25 = 0;
    uint64_t v23 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v23 = MEMORY[0x1E4F14398];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::{lambda(void *,_WKWebAuthenticationPanelResult)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    [(WebKit::CompletionHandlerCallChecker *)v14 _webView:WeakRetained runWebAuthenticationPanel:v17 initiatedByFrame:v20 completionHandler:v23];
    _Block_release(v23);
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v24) {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v14);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::operator()(a6);
  }
}

void sub_198D1736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D174B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 8)) != 0
    && ((*(unsigned int *)(v5 + 24) | ((unint64_t)(*(unsigned __int16 *)(v5 + 28) | (*(unsigned __int8 *)(v5 + 30) << 16)) << 32)) & 0x80000000000) != 0
    && (uint64_t v8 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v5 + 16))) != 0)
  {
    id v9 = v8;
    WebKit::CompletionHandlerCallChecker::create(v8, (objc_object *)sel__webView_requestWebAuthenticationConditionalMediationRegistrationForUser_completionHandler_, &v16);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      uint64_t v10 = *(void *)(v10 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v10 + 8));
    if (*a2) {
      uint64_t v12 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v12 = &stru_1EEA10550;
    }
    uint64_t v13 = *a3;
    *a3 = 0;
    uint64_t v14 = v16;
    uint64_t v16 = 0;
    uint64_t v15 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v15 = MEMORY[0x1E4F14398];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v15[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v15[4] = v13;
    v15[5] = v14;
    [(WebKit::CompletionHandlerCallChecker *)v9 _webView:WeakRetained requestWebAuthenticationConditionalMediationRegistrationForUser:v12 completionHandler:v15];
    _Block_release(v15);
    if (WeakRetained) {
      CFRelease(WeakRetained);
    }
    CFRelease(v9);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
  }
}

void sub_198D17684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  uint64_t v13 = v12;
  _Block_release(v13);
  if (v11) {
    CFRelease(v11);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::hasVideoInPictureInPictureDidChange(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (((*(unsigned int *)(v4 + 24) | ((unint64_t)(*(unsigned __int16 *)(v4 + 28) | (*(unsigned __int8 *)(v4 + 30) << 16)) << 32)) & 0x8000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
        if (WeakRetained)
        {
          uint64_t v8 = WeakRetained;
          uint64_t v9 = *((void *)this + 2);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 8);
          }
          id v10 = objc_loadWeakRetained((id *)(v9 + 8));
          [v8 _webView:v10 hasVideoInPictureInPictureDidChange:a3];
          if (v10) {
            CFRelease(v10);
          }
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_198D177E4(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::imageOrMediaDocumentSizeChanged(WebKit::UIDelegate::UIClient *this, const WebCore::IntSize *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x4000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          WebCore::IntSize::operator CGSize();
          objc_msgSend(v6, "_webView:imageOrMediaDocumentSizeChanged:", v8);
          if (v8) {
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_198D178CC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::queryPermission(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (id v10 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 16))) != 0
    && (unsigned __int8 v11 = v10, CFRelease(v10), (objc_opt_respondsToSelector() & 1) != 0))
  {
    WebKit::CompletionHandlerCallChecker::create(v11, (objc_object *)sel__webView_queryPermission_forOrigin_completionHandler_, &v19);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12) {
      uint64_t v12 = *(void *)(v12 + 8);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v12 + 8));
    if (*a2) {
      uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v14 = &stru_1EEA10550;
    }
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v16 = *a4;
    *a4 = 0;
    uint64_t v17 = v19;
    uint64_t v19 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
    v18[3] = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::descriptor;
    v18[4] = v16;
    v18[5] = v17;
    [(WebKit::CompletionHandlerCallChecker *)v11 _webView:WeakRetained queryPermission:v14 forOrigin:v15 completionHandler:v18];
    _Block_release(v18);
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>::operator()(a4, 0x102u);
  }
}

void sub_198D17ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  _Block_release(v11);
  if (v10) {
    CFRelease(v10);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>::operator()(uint64_t *a1, unsigned __int16 a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, a2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void sub_198D17BD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didEnableInspectorBrowserDomain(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x100000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          CFRelease(WeakRetained);
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewDidEnableInspectorBrowserDomain:v8];
          if (v8)
          {
            CFRelease(v8);
          }
        }
      }
    }
  }
}

void sub_198D17CA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::didDisableInspectorBrowserDomain(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x200000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          CFRelease(WeakRetained);
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewDidDisableInspectorBrowserDomain:v8];
          if (v8)
          {
            CFRelease(v8);
          }
        }
      }
    }
  }
}

void sub_198D17D64(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::updateAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      if (((*(unsigned int *)(v6 + 24) | ((unint64_t)(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) << 32)) & 0x1000000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          unsigned __int8 v11 = WeakRetained;
          CFRelease(WeakRetained);
          if (a5) {
            uint64_t v12 = [NSNumber numberWithUnsignedLongLong:a4];
          }
          else {
            uint64_t v12 = 0;
          }
          API::SecurityOrigin::create(&v16);
          uint64_t v13 = *(void *)(a1 + 16);
          if (v13) {
            uint64_t v13 = *(void *)(v13 + 8);
          }
          id v14 = objc_loadWeakRetained((id *)(v13 + 8));
          [v11 _webView:v14 updatedAppBadge:v12 fromSecurityOrigin:*(void *)(v16 + 8)];
          if (v14) {
            CFRelease(v14);
          }
          uint64_t v15 = v16;
          uint64_t v16 = 0;
          if (v15) {
            CFRelease(*(CFTypeRef *)(v15 + 8));
          }
        }
      }
    }
  }
}

void sub_198D17E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::updateClientBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      if (((*(unsigned int *)(v6 + 24) | ((unint64_t)(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) << 32)) & 0x2000000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          unsigned __int8 v11 = WeakRetained;
          CFRelease(WeakRetained);
          if (a5) {
            uint64_t v12 = [NSNumber numberWithUnsignedLongLong:a4];
          }
          else {
            uint64_t v12 = 0;
          }
          API::SecurityOrigin::create(&v16);
          uint64_t v13 = *(void *)(a1 + 16);
          if (v13) {
            uint64_t v13 = *(void *)(v13 + 8);
          }
          id v14 = objc_loadWeakRetained((id *)(v13 + 8));
          [v11 _webView:v14 updatedClientBadge:v12 fromSecurityOrigin:*(void *)(v16 + 8)];
          if (v14) {
            CFRelease(v14);
          }
          uint64_t v15 = v16;
          uint64_t v16 = 0;
          if (v15) {
            CFRelease(*(CFTypeRef *)(v15 + 8));
          }
        }
      }
    }
  }
}

void sub_198D17FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (((*(unsigned int *)(v4 + 24) | ((unint64_t)(*(unsigned __int16 *)(v4 + 28) | (*(unsigned __int8 *)(v4 + 30) << 16)) << 32)) & 0x4000000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
        if (WeakRetained)
        {
          id v8 = WeakRetained;
          CFRelease(WeakRetained);
          WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, (uint64_t *)&cf);
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 8);
          }
          id v10 = objc_loadWeakRetained((id *)(v9 + 8));
          [v8 _webView:v10 didAdjustVisibilityWithSelectors:cf];
          if (v10) {
            CFRelease(v10);
          }
          CFTypeRef v11 = cf;
          CFTypeRef cf = 0;
          if (v11) {
            CFRelease(v11);
          }
        }
      }
    }
  }
}

void sub_198D180A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::recentlyAccessedGamepadsForTesting(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x8000000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          CFRelease(WeakRetained);
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewRecentlyAccessedGamepadsForTesting:v8];
          if (v8)
          {
            CFRelease(v8);
          }
        }
      }
    }
  }
}

void sub_198D18178(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::stoppedAccessingGamepadsForTesting(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x10000000000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          uint64_t v6 = WeakRetained;
          CFRelease(WeakRetained);
          uint64_t v7 = *((void *)this + 2);
          if (v7) {
            uint64_t v7 = *(void *)(v7 + 8);
          }
          id v8 = objc_loadWeakRetained((id *)(v7 + 8));
          [v6 _webViewStoppedAccessingGamepadsForTesting:v8];
          if (v8)
          {
            CFRelease(v8);
          }
        }
      }
    }
  }
}

void sub_198D18234(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D184B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198D187FC(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(v1);
  }
  CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_198D189D8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (PAL *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
  if (BoolValueForKey) {
    goto LABEL_4;
  }
  int v8 = 1;
  if (*(_DWORD *)(a2 + 108))
  {
    uint64_t AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio(BoolValueForKey);
    BoolValueForKey = (PAL *)[(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62D8])() authorizationStatusForMediaType:AVFoundation_AVMediaTypeAudio];
    int v8 = BoolValueForKey ? 1 : 2;
    if ((unint64_t)BoolValueForKey - 1 <= 1)
    {
LABEL_18:
      uint64_t v7 = (uint64_t *)a3;
      goto LABEL_19;
    }
  }
  if (*(unsigned __int8 *)(a2 + 112) - 3 > 0xFFFFFFFD || *(_DWORD *)(a2 + 92) == 0)
  {
    if (v8 == 2)
    {
      int v11 = 1;
LABEL_26:
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = 0;
      uint64_t v15 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v15 = &unk_1EE9D02A0;
      *(_DWORD *)(v15 + 8) = v11;
      *(void *)(v15 + 16) = v14;
      uint64_t v17 = v15;
      WebKit::requestAVCaptureAccessForType((PAL *)1, &v17);
      if (v17)
      {
        uint64_t v16 = *(void (**)(void))(*(void *)v17 + 8);
        v16();
      }
      return;
    }
LABEL_4:
    uint64_t v7 = (uint64_t *)a3;
LABEL_19:
    WTF::CompletionHandler<void ()(BOOL)>::operator()(v7);
    return;
  }
  uint64_t AVFoundation_AVMediaTypeVideo = PAL::get_AVFoundation_AVMediaTypeVideo(BoolValueForKey);
  uint64_t v13 = [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62D8])() authorizationStatusForMediaType:AVFoundation_AVMediaTypeVideo];
  if ((unint64_t)(v13 - 1) <= 1) {
    goto LABEL_18;
  }
  if (v13) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  if (v8 == 2) {
    goto LABEL_26;
  }
  if (v13) {
    goto LABEL_4;
  }

  WebKit::requestAVCaptureAccessForType((PAL *)2, (uint64_t *)a3);
}

void sub_198D18CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UserMediaPermissionRequestManagerProxy::startMonitoringCaptureDeviceRotation(WebKit::UserMediaPermissionRequestManagerProxy *this, const WTF::String *a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 8) + 8);
  if (v4) {
    uint64_t v5 = (WebKit::WebPageProxy *)(v4 - 16);
  }
  else {
    uint64_t v5 = 0;
  }
  WebKit::WebPageProxy::cocoaView(v5, &cf);
  uint64_t v6 = [(id)cf layer];
  if (v6)
  {
    uint64_t v7 = (void *)*((void *)this + 37);
    if (!v7)
    {
      int v8 = [WKRotationCoordinatorObserver alloc];
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      uint64_t v9 = (atomic_uint *)*((void *)this + 1);
      if (v9) {
        atomic_fetch_add(v9, 1u);
      }
      uint64_t v18 = (WTF *)v9;
      uint64_t v11 = [(WKRotationCoordinatorObserver *)v8 initWithRequestManagerProxy:&v18];
      uint64_t v12 = (const void *)*((void *)this + 37);
      *((void *)this + 37) = v11;
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v13 = (unsigned int *)v18;
      uint64_t v18 = 0;
      if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v10);
      }
      uint64_t v7 = (void *)*((void *)this + 37);
    }
    uint64_t v14 = objc_msgSend(v7, "start:layer:", a2, v6, v18);
    if ((v14 & 0xFF0000) != 0)
    {
      uint64_t v15 = *(void *)(*((void *)this + 8) + 8);
      if (v15) {
        uint64_t v16 = v15 - 16;
      }
      else {
        uint64_t v16 = 0;
      }
      WebKit::WebPageProxy::rotationAngleForCaptureDeviceChanged(v16, (uint64_t)a2, (const WTF::StringImpl *)(unsigned __int16)v14);
    }
  }
  else
  {
    uint64_t v17 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18) = 0;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "UserMediaPermissionRequestManagerProxy unable to start monitoring capture device rotation", (uint8_t *)&v18, 2u);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_198D18EC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, CFTypeRef cf)
{
  if (a9 && atomic_fetch_add((atomic_uint *volatile)a9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a9);
    WTF::fastFree(a9, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::UIClient::toolbarsAreVisible(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, 1);
}

uint64_t API::UIClient::menuBarIsVisible(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, 1);
}

uint64_t API::UIClient::statusBarIsVisible(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, 1);
}

uint64_t API::UIClient::windowFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(double, double, double, double))(**(void **)a3 + 16))(0.0, 0.0, 0.0, 0.0);
}

uint64_t API::UIClient::runOpenPanel()
{
  return 0;
}

double API::UIClient::headerHeight()
{
  return 0.0;
}

double API::UIClient::footerHeight()
{
  return 0.0;
}

void API::UIClient::configurationForLocalInspector(WebKit **a1@<X8>)
{
  uint64_t v5 = (WebKit *)API::Object::newObject(0x28uLL, 72);
  *(void *)uint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v5);
  *(void *)uint64_t v5 = &unk_1EE9DFE10;
  *((void *)v5 + 3) = 0;
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 2) = 0;
  *a1 = v5;
}

id *std::unique_ptr<WebKit::ProcessStateMonitor>::reset[abi:sn180100](id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ProcessStateMonitor::~ProcessStateMonitor(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

void sub_198D19168(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CFBE8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9CFC00[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<0ul,WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BEWebContentProcess>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_1EE9CFBE8[v5])(&v9, a1);
LABEL_8:
    int v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 0;
    return;
  }
  char v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    CFRelease(v7);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BENetworkingProcess>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1EE9CFBE8[v5])(&v9, a1);
LABEL_8:
    int v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 1;
    return;
  }
  char v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    CFRelease(v7);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<BERenderingProcess>,WTF::RetainPtr<BERenderingProcess>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1EE9CFBE8[v5])(&v9, a1);
LABEL_8:
    int v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 2;
    return;
  }
  char v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    CFRelease(v7);
  }
}

Class initARQuickLookWebKitItem(void)
{
  if ((byte_1EB359A64 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198D19460);
    }
    *(void *)algn_1EB359AA8 = v1;
    byte_1EB359A64 = 1;
  }
  Class result = objc_getClass("ARQuickLookWebKitItem");
  qword_1EB359AA0 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getARQuickLookWebKitItemClass = ARQuickLookWebKitItemFunction;
  return result;
}

uint64_t ARQuickLookWebKitItemFunction(void)
{
  return qword_1EB359AA0;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(const void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CFC18[v6])(&v8, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = qword_1EB358640;
        if (os_log_type_enabled((os_log_t)qword_1EB358640, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = *(void *)(v5 + 96);
          *(_DWORD *)long long buf = 134217984;
          uint64_t v40 = v7;
          _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "SystemPreview began on %lld", buf, 0xCu);
        }
        char v8 = (WTF::StringImpl **)(a1 + 80);
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const String *)(a1 + 80), 0);
        CFTypeRef cf = 0;
        uint64_t v9 = *(void *)(v5 + 16);
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v36, a1 + 40);
        BYTE8(v38) = 1;
        id v10 = *(atomic_uint **)(a1 + 72);
        if (v10) {
          atomic_fetch_add(v10, 1u);
        }
        uint64_t v11 = *v2;
        uint64_t *v2 = 0;
        uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v12 = &unk_1EE9CFC58;
        v12[1] = v10;
        v12[2] = v11;
        uint64_t v35 = v12;
        WebKit::WebPageProxy::dataTaskWithRequest(v9, (WebCore::ResourceRequestBase *)buf, (uint64_t)&v36, 0, (uint64_t *)&v35);
        uint64_t v13 = (uint64_t)v35;
        uint64_t v35 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        if (BYTE8(v38) && v38 != -1) {
          ((void (*)(void **, WTF::StringImpl **))off_1EE9CFC18[v38])(&v35, &v36);
        }
        WTF::String::operator=((uint64_t *)(v5 + 144), (WTF::StringImpl **)(a1 + 80));
        long long v14 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)(v5 + 168) = *(_OWORD *)(a1 + 104);
        *(_OWORD *)(v5 + 152) = v14;
        WTF::URL::fragmentIdentifier((WTF::URL *)(a1 + 80));
        if ((v15 & 0xFF00000000) != 0) {
          WTF::String::String();
        }
        else {
          WTF::String::String();
        }
        uint64_t v17 = v36;
        uint64_t v36 = 0;
        uint64_t v18 = *(WTF::StringImpl **)(v5 + 224);
        *(void *)(v5 + 224) = v17;
        if (!v18) {
          goto LABEL_20;
        }
        int v19 = *(_DWORD *)v18 - 2;
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v16);
          uint64_t v18 = v36;
          uint64_t v36 = 0;
          if (!v18)
          {
LABEL_20:
            id v21 = objc_alloc((Class)((uint64_t (*)(WTF::StringImpl *))*MEMORY[0x1E4FB6358])(v18));
            uint64_t v22 = objc_msgSend(v21, "init", v35);
            uint64_t v23 = *(const void **)(v5 + 232);
            *(void *)(v5 + 232) = v22;
            if (v23) {
              CFRelease(v23);
            }
            uint64_t v24 = [[_WKPreviewControllerDelegate alloc] initWithSystemPreviewController:v5];
            uint64_t v25 = *(const void **)(v5 + 240);
            *(void *)(v5 + 240) = v24;
            if (v25)
            {
              CFRelease(v25);
              uint64_t v24 = *(_WKPreviewControllerDelegate **)(v5 + 240);
            }
            [*(id *)(v5 + 232) setDelegate:v24];
            uint64_t v26 = [_WKPreviewControllerDataSource alloc];
            uint64_t v27 = *v8;
            if (*v8) {
              *(_DWORD *)v27 += 2;
            }
            uint64_t v36 = v27;
            long long v28 = *(_OWORD *)(a1 + 104);
            long long v37 = *(_OWORD *)(a1 + 88);
            long long v38 = v28;
            uint64_t v30 = [(_WKPreviewControllerDataSource *)v26 initWithSystemPreviewController:v5 MIMEType:@"model/vnd.usdz+zip" originatingPageURL:&v36];
            long long v31 = *(const void **)(v5 + 248);
            *(void *)(v5 + 248) = v30;
            if (v31) {
              CFRelease(v31);
            }
            long long v32 = v36;
            uint64_t v36 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2) {
                WTF::StringImpl::destroy(v32, v29);
              }
              else {
                *(_DWORD *)v32 -= 2;
              }
            }
            [*(id *)(v5 + 232) setDataSource:*(void *)(v5 + 248)];
            [*(id *)(a1 + 120) presentViewController:*(void *)(v5 + 232) animated:1 completion:0];
            *(unsigned char *)(v5 + 8) = 0;
            CFTypeRef v34 = cf;
            CFTypeRef cf = 0;
            if (v34) {
              CFRelease(v34);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
            return;
          }
          int v19 = *(_DWORD *)v18 - 2;
          if (*(_DWORD *)v18 == 2)
          {
            uint64_t v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v20);
            goto LABEL_20;
          }
        }
        *(_DWORD *)uint64_t v18 = v19;
        goto LABEL_20;
      }
    }
  }
  uint64_t v33 = (uint64_t *)(a1 + 32);

  WTF::CompletionHandler<void ()(void)>::operator()(v33);
}

void sub_198D19954(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,CFTypeRef cf)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFTypeRef v44 = cf;
  CFTypeRef cf = 0;
  if (v44) {
    CFRelease(v44);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a17);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(BOOL)::{lambda(WTF::Ref<API::DataTask,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>> &&)#1},void,API&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CFC58;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(BOOL)::{lambda(WTF::Ref<API::DataTask,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>> &&)#1},void,API&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CFC58;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(BOOL)::{lambda(WTF::Ref<API::DataTask,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>> &&)#1},void,API&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = *(void **)(a2 + 8);
      uint64_t v7 = [[_WKSystemPreviewDataTaskDelegate alloc] initWithSystemPreviewController:v5];
      char v8 = *(const void **)(v5 + 256);
      *(void *)(v5 + 256) = v7;
      if (v8)
      {
        CFRelease(v8);
        uint64_t v7 = *(_WKSystemPreviewDataTaskDelegate **)(v5 + 256);
      }
      [v6 setDelegate:v7];
      uint64_t v9 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 134217984;
        uint64_t v14 = v5;
        _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - UIProcess is taking a background assertion because it is downloading a system preview", (uint8_t *)&v13, 0xCu);
      }
      uint64_t v10 = *(void *)(*(void *)(v5 + 16) + 256);
      uint64_t v11 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v11, v10 + 200, "System preview download", 24, 0, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v5 + 264), v11);
    }
  }
  WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 16));
  uint64_t v12 = *(const void **)(a2 + 8);

  CFRelease(v12);
}

void sub_198D19CF4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<API::PageConfiguration::OpenerInfo,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo const&,API::PageConfiguration::OpenerInfo*>((uint64_t)a1, (uint64_t *)a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_198D19D4C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo const&,API::PageConfiguration::OpenerInfo*>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v2 = *a2;
    atomic_fetch_add((atomic_uint *volatile)(*a2 + 16), 1u);
    *(void *)uint64_t result = v2;
    uint64_t v3 = (_DWORD *)a2[1];
    if (v3) {
      *v3 += 2;
    }
    *(void *)(result + 8) = v3;
    uint64_t v4 = (_DWORD *)a2[2];
    if (v4) {
      *v4 += 2;
    }
    *(void *)(result + 16) = v4;
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](a1 + 7, a2);
  uint64_t v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t result = a1[4];
  a1[4] = 0;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

void WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  if (!WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40)))
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    if (!a2)
    {
      uint64_t v9 = 0;
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()((uint64_t *)(a1 + 32));
LABEL_15:
      if (v9) {
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
      return;
    }
    uint64_t v4 = [*(id *)(a2 + 408) _relatedWebView];
    uint64_t v6 = (void *)MEMORY[0x1E4F1C3B8];
    if (v4 != *(void *)(a1 + 48)) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Returned WKWebView was not created with the given configuration."];
    }
    uint64_t v7 = *(void *)(a2 + 408);
    if (*(unsigned char *)(a1 + 96) && *(unsigned char *)(v7 + 192))
    {
      if (API::PageConfiguration::OpenerInfo::operator==(a1 + 56, v7 + 152, v5)) {
        goto LABEL_12;
      }
    }
    else if ((*(unsigned char *)(a1 + 96) != 0) == (*(unsigned char *)(v7 + 192) != 0))
    {
LABEL_12:
      uint64_t v8 = *(void *)(a2 + 416);
      if (v8) {
        CFRetain(*(CFTypeRef *)(v8 + 8));
      }
      uint64_t v9 = v8;
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()((uint64_t *)(a1 + 32));
      goto LABEL_15;
    }
    [MEMORY[0x1E4F1CA00] raise:*v6 format:@"Returned WKWebView was not created with the given configuration."];
    goto LABEL_12;
  }
}

void sub_198D19F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<API::PageConfiguration::OpenerInfo,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo*>((uint64_t)a1, (uint64_t *)a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_198D19FF0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo*>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v2;
    uint64_t v3 = (_DWORD *)a2[1];
    if (v3) {
      *v3 += 2;
    }
    *(void *)(result + 8) = v3;
    uint64_t v4 = (_DWORD *)a2[2];
    if (v4) {
      *v4 += 2;
    }
    *(void *)(result + 16) = v4;
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    MEMORY[0x19972EAD0](&v6, a2);
    (*(void (**)(void, WTF::StringImpl **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v6);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  }
  return result;
}

void sub_198D1A324(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t result = WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t result = WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CFC18[v5])(&v7, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 72));
  if (result) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  *(unsigned char *)(*(void *)(a1 + 72) + 24) = 1;
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0 && a2 != 2)
  {
    if (a2 != 1)
    {
      if (!a2)
      {
        char v7 = (WebKit::WebPageProxy *)(v6 - 16);
        uint64_t v8 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = 0;
        uint64_t v10 = v8;
        WebKit::alertForPermission(v7, (__CFString *)4, (_DWORD *)(a1 + 40), &v10);
        uint64_t result = v10;
        uint64_t v10 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      return result;
    }
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 16);
  }
  else
  {
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 16);
  }

  return v9();
}

void sub_198D1A6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::{lambda(void *,unsigned long long)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::{lambda(void *,unsigned long long)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CFC18[v5])(&v7, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  if (WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 72))) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 80);
  *(unsigned char *)(*(void *)(a1 + 72) + 24) = 1;
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && a2 != 2)
  {
    if (a2 != 1)
    {
      if (!a2)
      {
        WebKit::alertForPermission((WebKit::WebPageProxy *)(v5 - 16), (__CFString *)3, (_DWORD *)(a1 + 40), (uint64_t *)(a1 + 32));
      }
      return;
    }
    uint64_t v6 = (uint64_t *)(a1 + 32);
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 32);
  }

  WTF::CompletionHandler<void ()(BOOL)>::operator()(v6);
}

void WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKDisplayCapturePermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    *(void *)(a1 + 32) = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9CFE60;
    v6[1] = v5;
    v6[2] = a2;
    char v7 = v6;
    WTF::ensureOnMainRunLoop();
    uint64_t result = (uint64_t)v7;
    if (v7) {
      return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
    }
  }
  return result;
}

void sub_198D1AEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKDisplayCapturePermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CFE60;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKDisplayCapturePermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CFE60;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKDisplayCapturePermissionDecision)::{lambda(void)#1},void>::call(WebKit::UserMediaPermissionRequestManagerProxy *result)
{
  uint64_t v1 = *((void *)result + 2);
  switch(v1)
  {
    case 0:
      return WebKit::UserMediaPermissionRequestProxy::deny(*((void **)result + 1), 5);
    case 2:
      return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(void, void))(**((void **)result + 1) + 24))(*((void *)result + 1), 0);
    case 1:
      return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(void, uint64_t))(**((void **)result + 1) + 24))(*((void *)result + 1), 1);
  }
  return result;
}

void WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    *(void *)(a1 + 32) = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9CFEA8;
    v6[1] = v5;
    v6[2] = a2;
    char v7 = v6;
    WTF::ensureOnMainRunLoop();
    uint64_t result = (uint64_t)v7;
    if (v7) {
      return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
    }
  }
  return result;
}

void sub_198D1B188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKPermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CFEA8;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKPermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CFEA8;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKPermissionDecision)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  if (v2 != 2)
  {
    if (v2 != 1)
    {
      if (!v2)
      {
        uint64_t v3 = (WebKit::UserMediaPermissionRequestProxy *)*((void *)result + 1);
        return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(v3);
      }
      return result;
    }
    uint64_t v4 = *((void *)result + 1);
    if (*(unsigned __int8 *)(v4 + 112) - 1 >= 2 && *(_DWORD *)(v4 + 92))
    {
      WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs(v4, (uint64_t)&v12);
      if (!v13) {
        goto LABEL_32;
      }
      uint64_t v6 = *v12;
      if (*v12) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v14 = v6;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
      uint64_t v4 = *((void *)v1 + 1);
    }
    else
    {
      uint64_t v14 = 0;
    }
    if (!*(_DWORD *)(v4 + 108))
    {
      uint64_t v11 = 0;
LABEL_23:
      WebKit::UserMediaPermissionRequestProxy::allow((WebKit::UserMediaPermissionRequestProxy *)v4, &v11, (const WTF::String *)&v14);
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t result = v14;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v10);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      return result;
    }
    WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs(v4, (uint64_t)&v12);
    if (v13)
    {
      uint64_t v9 = *v12;
      if (*v12) {
        *(_DWORD *)v9 += 2;
      }
      uint64_t v11 = v9;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v8);
      uint64_t v4 = *((void *)v1 + 1);
      goto LABEL_23;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x198D1B408);
  }
  char v7 = (void *)*((void *)result + 1);

  return WebKit::UserMediaPermissionRequestProxy::deny(v7, 5);
}

void WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t result = (WebKit::UserMediaPermissionRequestManagerProxy *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if (result) {
    return result;
  }
  *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(unsigned __int8 *)(v5 + 112) - 1 >= 2 && *(_DWORD *)(v5 + 92))
    {
      WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs(v5, (uint64_t)&v13);
      if (!v14) {
        goto LABEL_28;
      }
      char v7 = *v13;
      if (*v13) {
        *(_DWORD *)v7 += 2;
      }
      uint64_t v15 = v7;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v6);
      uint64_t v5 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v15 = 0;
    }
    if (!*(_DWORD *)(v5 + 108))
    {
      uint64_t v12 = 0;
LABEL_19:
      WebKit::UserMediaPermissionRequestProxy::allow((WebKit::UserMediaPermissionRequestProxy *)v5, &v12, (const WTF::String *)&v15);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t result = v15;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          return (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::StringImpl::destroy(v15, v11);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      return result;
    }
    WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs(v5, (uint64_t)&v13);
    if (v14)
    {
      uint64_t v10 = *v13;
      if (*v13) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v12 = v10;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
      uint64_t v5 = *(void *)(a1 + 32);
      goto LABEL_19;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198D1B5D4);
  }
  uint64_t v8 = *(void **)(a1 + 32);

  return WebKit::UserMediaPermissionRequestProxy::deny(v8, 5);
}

void WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WebKit::UserMediaPermissionCheckProxy::complete(v3);
  }
  return result;
}

void WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::{lambda(void *,NSString *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WebKit::UserMediaPermissionCheckProxy::complete(v3);
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 40));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::{lambda(void *,_WKWebAuthenticationPanelResult)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    if (a2 <= 2)
    {
      uint64_t v5 = qword_1994F6CF0[a2];
      return WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>::operator()((uint64_t *)(a1 + 32), v5);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_9;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_7;
  }
LABEL_9:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(a1, v8);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::ProcessAndUIAssertion,WTF::RawPtrTraits<WebKit::ProcessAndUIAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAndUIAssertion>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)unint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), a2);
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  double v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_198D1C048(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198D1C15C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D00C0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D00C0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1,void>::call(uint64_t a1)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  unsigned int v2 = *(atomic_uchar **)(a1 + 8);
  if (v2) {
    uint64_t v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v5 = &unk_1EE9D00E8;
  *(void *)(v5 + 8) = v3;
  *(void *)(v5 + 16) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  uint64_t v8 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

void sub_198D1C2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D00E8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D00E8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1::operator() const(void)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (atomic_uchar *)a1[1];
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v2, a1[2]);
    uint64_t v3 = v8;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[3];
    if (v3) {
      int v6 = *(_DWORD *)(v3 + 20);
    }
    else {
      int v6 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    uint64_t v10 = v3;
    __int16 v11 = 2082;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion() RBS %{public}s assertion for process with PID=%d will be invalidated", buf, 0x1Cu);
  }
  if (v3)
  {
    WebKit::ProcessAssertion::processAssertionWillBeInvalidated((WebKit::ProcessAssertion *)v3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), v7);
  }
}

void sub_198D1C4E8(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D0110;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D0110;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0,void>::call(uint64_t a1)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t v2 = *(atomic_uchar **)(a1 + 8);
  if (v2) {
    uint64_t v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v5 = &unk_1EE9D0138;
  *(void *)(v5 + 8) = v3;
  *(void *)(v5 + 16) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  uint64_t v8 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

void sub_198D1C67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D0138;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D0138;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0::operator() const(void)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (atomic_uchar *)a1[1];
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v2, a1[2]);
    uint64_t v3 = v8;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[3];
    if (v3) {
      int v6 = *(_DWORD *)(v3 + 20);
    }
    else {
      int v6 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    uint64_t v10 = v3;
    __int16 v11 = 2082;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion: RBS %{public}s assertion for process with PID=%d was invalidated", buf, 0x1Cu);
  }
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), v7);
  }
}

void sub_198D1C89C(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D0160;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D0188;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireSync(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D01B0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireSync(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D01B0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireSync(void)::$_0,void>::call(atomic_uchar *result)
{
  unsigned int v1 = (atomic_uchar *)*((void *)result + 1);
  if (v1)
  {
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v5, v1, *((void *)result + 2));
    uint64_t v2 = v5;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      uint64_t v4 = *(atomic_uchar **)(v2 + 8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(v4, v3);
    }
  }
  return result;
}

void sub_198D1CAFC(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D01D8;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D01D8;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::call(uint64_t a1)
{
  return [*(id *)(a1 + 16) presentViewController:*(void *)(a1 + 8) animated:1 completion:0];
}

void *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0200;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0200;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_2,void>::call(uint64_t a1)
{
  return WebKit::UserMediaPermissionRequestProxy::doDefaultAction(*(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0228;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0228;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_3,void>::call(uint64_t a1)
{
  return WebKit::UserMediaPermissionRequestProxy::doDefaultAction(*(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0250;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0250;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_4,void>::call(uint64_t a1)
{
  return WebKit::UserMediaPermissionRequestProxy::doDefaultAction(*(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVCaptureDeviceRotationCoordinator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      __int16 v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      int v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = v17 + 16 * v22;
          uint64_t v24 = *(const void **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            CFRelease(v24);
            uint64_t v25 = *(WTF::StringImpl **)v23;
            *(void *)uint64_t v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v10);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
          }
          uint64_t v26 = *v13;
          unsigned int *v13 = 0;
          *(void *)uint64_t v23 = v26;
          uint64_t v27 = v6 + 16 * v11;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          *(void *)(v23 + 8) = v28;
          uint64_t v29 = *(const void **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            CFRelease(v29);
          }
          uint64_t v30 = *v13;
          unsigned int *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v23;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(const void **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            CFRelease(v16);
            int v14 = *v13;
          }
          unsigned int *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(WebKit::WebPageProxy const&,WebKit::UserMediaPermissionRequestProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D02A0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(WebKit::WebPageProxy const&,WebKit::UserMediaPermissionRequestProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D02A0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(WebKit::WebPageProxy const&,WebKit::UserMediaPermissionRequestProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1) {
    WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 16));
  }
  else {
    WebKit::requestAVCaptureAccessForType((PAL *)2, (uint64_t *)(a1 + 16));
  }
}

WTF *WebKit::createForFile@<X0>(WebKit *this@<X0>, const WTF::String *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (WTF *)WTF::FileSystemImpl::readEntireFile((uint64_t *)&v6, this, a2);
  if (v8)
  {
    uint64_t result = (WTF *)WebCore::KeyedDecoder::decoder();
    if (v8)
    {
      uint64_t result = v6;
      if (v6)
      {
        uint64_t v6 = 0;
        int v7 = 0;
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebKit::writeToDisk(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  (*(void (**)(WebCore::SharedBuffer **__return_ptr))(**(void **)a1 + 88))(&v8);
  if (v8)
  {
    uint64_t v1 = WTF::FileSystemImpl::openAndLockFile();
    uint64_t v3 = (unsigned int *)v8;
    if (v1 != -1)
    {
      int v4 = (WTF::FileSystemImpl *)v1;
      WebCore::SharedBuffer::data(v8);
      uint64_t v5 = WTF::FileSystemImpl::writeToFile();
      WTF::FileSystemImpl::unlockAndCloseFile(v4);
      uint64_t v3 = (unsigned int *)v8;
      uint64_t v6 = *((void *)v8 + 6);
      if (v5 == v6
        || (int v7 = qword_1EB357D80, !os_log_type_enabled((os_log_t)qword_1EB357D80, OS_LOG_TYPE_ERROR)))
      {
        char v8 = 0;
LABEL_8:
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
        return;
      }
      *(_DWORD *)long long buf = 67109376;
      int v10 = v5;
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Disk persistency: We only wrote %d out of %zu bytes to disk", buf, 0x12u);
      uint64_t v3 = (unsigned int *)v8;
    }
    char v8 = 0;
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
}

const char *WebKit::processTerminationReasonToString()
{
  uint64_t result = "ExceededMemoryLimit";
  switch("ExceededMemoryLimit")
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = "ExceededCPULimit";
      break;
    case 2u:
      uint64_t result = "RequestedByClient";
      break;
    case 3u:
      uint64_t result = "IdleExit";
      break;
    case 4u:
      uint64_t result = "Unresponsive";
      break;
    case 5u:
      uint64_t result = "Crash";
      break;
    case 6u:
      uint64_t result = "ExceededProcessCountLimit";
      break;
    case 7u:
      uint64_t result = "NavigationSwap";
      break;
    case 8u:
      uint64_t result = "RequestedByNetworkProcess";
      break;
    case 9u:
      uint64_t result = "RequestedByGPUProcess";
      break;
    case 0xAu:
      uint64_t result = "RequestedByModelProcess";
      break;
    case 0xBu:
      uint64_t result = "GPUProcessCrashedTooManyTimes";
      break;
    case 0xCu:
      uint64_t result = "ModelProcessCrashedTooManyTimes";
      break;
    default:
      uint64_t result = "";
      break;
  }
  return result;
}

void WebKit::VideoPresentationModelContext::~VideoPresentationModelContext(WebKit::VideoPresentationModelContext *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 9);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  int v4 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    CFRelease(v7);
  }
  char v8 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8)
  {
    if (v8[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    }
    else {
      --v8[4];
    }
  }
  uint64_t v9 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::VideoPresentationModelContext::~VideoPresentationModelContext(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::VideoPresentationModelContext::addClient(WebKit::VideoPresentationModelContext *this, WebCore::VideoPresentationModelClient *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 72);
  unsigned int v4 = *((_DWORD *)this + 21);
  unsigned int v5 = *((_DWORD *)this + 20) + 1;
  *((_DWORD *)this + 20) = v5;
  if (v5 > v4)
  {
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v3;
        if (*v3) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 12) = v14 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = *((void *)this + 9);
          *((_DWORD *)this + 20) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)this + 20) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)this + 21) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *((_DWORD *)this + 20) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  unsigned int v19 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v19, 1u);
  atomic_fetch_add(v19, 1u);
  uint64_t v23 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v23, (uint64_t)&v22);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
  }
  if (v19)
  {
    if (atomic_fetch_add(v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v20);
    }
  }
  return result;
}

void sub_198D1DC64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  if (a12 && atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a12);
    WTF::fastFree(a12, a2);
  }
  if (v12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::VideoPresentationModelContext::removeClient(uint64_t *this, WebCore::VideoPresentationModelClient *a2)
{
  uint64_t v3 = this + 9;
  unsigned int v4 = *((_DWORD *)this + 21);
  unsigned int v5 = *((_DWORD *)this + 20) + 1;
  *((_DWORD *)this + 20) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = this;
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        this = *(uint64_t **)(v7 + 8 * v10);
        if ((unint64_t)this + 1 >= 2 && !this[1])
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            this = (uint64_t *)WTF::fastFree((WTF *)this, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v12 = *v3;
        if (*v3) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = v6[9];
          *((_DWORD *)v6 + 20) = 0;
          if (!v7)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)v6 + 20) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v7 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)v6 + 21) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *((_DWORD *)v6 + 20) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = *((void *)a2 + 1);
  if (v18 && *(void *)(v18 + 8))
  {
    uint64_t v20 = *((void *)a2 + 1);
    this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      uint64_t v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == this) {
        return this;
      }
    }
    else
    {
      if (!this) {
        return this;
      }
      uint64_t v19 = 0;
    }
    if ((uint64_t *)v19 != this) {
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)this);
    }
  }
  return this;
}

char *WebKit::VideoPresentationManagerProxy::setDocumentVisibility(char *result, uint64_t a2)
{
  if (!result[32])
  {
    uint64_t result = WebKit::VideoPresentationManagerProxy::findInterface((uint64_t)result, a2, &v2);
    if (v2) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v2 + 64));
    }
  }
  return result;
}

char *WebKit::VideoPresentationManagerProxy::findInterface@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 64), &v8);
  uint64_t v6 = *(char **)(a1 + 64);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 == result)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *((void *)result + 2);
    uint64_t result = (char *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 64));
  }
  *a3 = v7;
  return result;
}

uint64_t WebKit::VideoPresentationModelContext::setVideoDimensions(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*(float *)(this + 88) != *(float *)a2 || *(float *)(this + 92) != *((float *)a2 + 1))
  {
    uint64_t v4 = this;
    *(void *)(this + 88) = *(void *)a2;
    uint64_t v5 = *(void *)(this + 24);
    uint64_t v6 = *(void *)(v5 + 24);
    if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0 || (v8 = *(void *)(v7 + 72)) == 0)
    {
LABEL_80:
      CFTypeRef v44 = (void *)WTF::fastMalloc((WTF *)0x10);
      *CFTypeRef v44 = &unk_1EE9D04B0;
      v44[1] = a2;
      *(void *)long long buf = v44;
      WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(v4 + 72), buf);
      return (*(uint64_t (**)(void *))(*v44 + 8))(v44);
    }
    uint64_t v9 = *(void *)(v5 + 256);
    v47[0] = "VideoPresentationModelContext";
    v47[1] = 30;
    v47[2] = "setVideoDimensions";
    v47[3] = v9;
    unsigned int v10 = (uint64_t *)(this + 72);
    uint64_t v11 = *(void *)(this + 72);
    if (v11)
    {
      int v12 = *(_DWORD *)(v11 - 4);
      if (!v12) {
        goto LABEL_28;
      }
      int v13 = 0;
      unsigned int v14 = v12 - 1;
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)(v11 + 8 * v14);
        if ((unint64_t)(v16 + 1) >= 2 && !*(void *)(v16 + 8))
        {
          *(void *)(v11 + 8 * v14) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v16);
            WTF::fastFree((WTF *)v16, a2);
          }
          *(void *)(v11 + 8 * v14) = -1;
          ++v13;
        }
        --v14;
      }
      while (v15);
      uint64_t v11 = *v10;
      if (v13)
      {
        *(_DWORD *)(v11 - 16) += v13;
        uint64_t v17 = *v10;
        if (*v10) {
          int v18 = *(_DWORD *)(v17 - 12);
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)(v17 - 12) = v18 - v13;
        uint64_t v11 = *v10;
      }
      if (v11)
      {
        unsigned int v19 = *(_DWORD *)(v11 - 4);
        if (v19 >= 9 && 6 * *(_DWORD *)(v11 - 12) < v19)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v4 + 72));
          uint64_t v11 = *(void *)(v4 + 72);
          *(_DWORD *)(v4 + 80) = 0;
          if (v11)
          {
LABEL_32:
            unsigned int v21 = *(_DWORD *)(v11 - 12);
            if (v21 >= 0x7FFFFFFF) {
              int v22 = -2;
            }
            else {
              int v22 = 2 * v21;
            }
            *(_DWORD *)(v4 + 84) = v22;
            unsigned int v46 = *(_DWORD *)(v11 - 12);
LABEL_36:
            if (*(unsigned char *)(v8 + 12))
            {
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v52, (WTF::Logger::LogSiteIdentifier *)v47);
              WebCore::FloatSize::toJSONString((uint64_t *)&v51, a2);
              WTF::String::String((WTF::String *)&v50, ", clients=");
              WTF::String::number((WTF::String *)v46);
              WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, &v53);
              uint64_t v24 = v49;
              uint64_t v49 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2) {
                  WTF::StringImpl::destroy(v24, v23);
                }
                else {
                  *(_DWORD *)v24 -= 2;
                }
              }
              uint64_t v25 = v50;
              uint64_t v50 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2) {
                  WTF::StringImpl::destroy(v25, v23);
                }
                else {
                  *(_DWORD *)v25 -= 2;
                }
              }
              uint64_t v26 = v51;
              uint64_t v51 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2) {
                  WTF::StringImpl::destroy(v26, v23);
                }
                else {
                  *(_DWORD *)v26 -= 2;
                }
              }
              uint64_t v27 = v52;
              uint64_t v52 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, v23);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
              uint64_t v28 = qword_1EB357E20;
              uint64_t v29 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
              if (v29)
              {
                WTF::String::utf8();
                long long v31 = v48[0] ? (char *)v48[0] + 16 : 0;
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = v31;
                _os_log_impl(&dword_1985F2000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                uint64_t v29 = v48[0];
                v48[0] = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 1) {
                    uint64_t v29 = (WTF *)WTF::fastFree(v29, v30);
                  }
                  else {
                    --*(_DWORD *)v29;
                  }
                }
              }
              if (WebKit2LogFullscreen)
              {
                long long v32 = (atomic_uchar *)MEMORY[0x1E4F30998];
                while (1)
                {
                  int v33 = *v32;
                  if (v33) {
                    break;
                  }
                  int v34 = *v32;
                  atomic_compare_exchange_strong_explicit(v32, (unsigned __int8 *)&v34, v33 | 1, memory_order_acquire, memory_order_acquire);
                  if (v34 == v33)
                  {
                    uint64_t v35 = WTF::Logger::observers(v29);
                    uint64_t v36 = *(unsigned int *)(v35 + 12);
                    if (v36)
                    {
                      long long v37 = *(uint64_t **)v35;
                      uint64_t v45 = *(void *)v35 + 8 * v36;
                      do
                      {
                        uint64_t v38 = *v37;
                        *(_DWORD *)long long buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v47);
                        int v55 = 1;
                        WebCore::FloatSize::toJSONString(&v56, a2);
                        int v57 = 0;
                        WTF::String::String((WTF::String *)v58, ", clients=");
                        v58[2] = 0;
                        WTF::String::number((WTF::String *)v46);
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v48, (uint64_t)buf, 4uLL);
                        (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v38 + 16))(v38, &WebKit2LogFullscreen, 0, v48);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v39);
                        for (uint64_t i = 56; i != -8; i -= 16)
                        {
                          uint64_t v41 = *(WTF::StringImpl **)&buf[i];
                          *(void *)&buf[i] = 0;
                          if (v41)
                          {
                            if (*(_DWORD *)v41 == 2) {
                              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v30);
                            }
                            else {
                              *(_DWORD *)v41 -= 2;
                            }
                          }
                        }
                        ++v37;
                      }
                      while (v37 != (uint64_t *)v45);
                    }
                    int v42 = 1;
                    atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
                    if (v42 != 1) {
                      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                    }
                    break;
                  }
                }
              }
              uint64_t v43 = v53;
              char v53 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2) {
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v30);
                }
                else {
                  *(_DWORD *)v43 -= 2;
                }
              }
            }
            goto LABEL_80;
          }
LABEL_30:
          unsigned int v46 = 0;
          *(_DWORD *)(v4 + 84) = 0;
          goto LABEL_36;
        }
LABEL_28:
        *(_DWORD *)(v4 + 80) = 0;
        goto LABEL_32;
      }
    }
    *(_DWORD *)(v4 + 80) = 0;
    goto LABEL_30;
  }
  return this;
}

void sub_198D1E48C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25)
{
  int v26 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
  if (v26 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationModelContext::loggerPtr(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 24);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 + 72);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::VideoPresentationModelContext::logIdentifier(WebKit::VideoPresentationModelContext *this)
{
  return *(void *)(*((void *)this + 3) + 256);
}

uint64_t *WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (*result && (uint64_t v4 = *(unsigned int *)(*result - 12), v4))
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
    LODWORD(v19) = v4;
    uint64_t v18 = v5;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v3);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (*v3) {
    uint64_t v10 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((unsigned int *)v10 != v6)
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v7 = *(unsigned int **)(*(void *)v8 + 8);
      if (v7)
      {
        int v12 = (atomic_uint **)(v7 + 2);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 2, (uint64_t)v7);
        int v13 = *v12;
        if (*v12)
        {
          atomic_fetch_add(v13, 1u);
          unsigned int v11 = HIDWORD(v19);
          uint64_t v5 = v18;
        }
      }
      else
      {
        int v13 = 0;
      }
      unsigned int v14 = v11 + 1;
      *(void *)(v5 + 8 * v11) = v13;
      HIDWORD(v19) = v11 + 1;
      while (1)
      {
        v8 += 2;
        if (v8 == v9) {
          break;
        }
        if ((unint64_t)(*(void *)v8 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v8 = v9;
LABEL_20:
      ++v11;
    }
    while (v8 != (unsigned int *)v10);
    if (v14)
    {
      uint64_t v15 = v18;
      uint64_t v16 = 8 * v14;
      do
      {
        if (*(void *)v15)
        {
          if (*(void *)(*(void *)v15 + 8))
          {
            uint64_t v20 = *(void *)v15;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20))
            {
              if (*(void *)v15) {
                uint64_t v17 = *(void *)(*(void *)v15 + 8);
              }
              else {
                uint64_t v17 = 0;
              }
              (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v17);
            }
          }
        }
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
    }
  }
  return (uint64_t *)WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
}

void sub_198D1E858(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationModelContext::requestCloseAllMediaPresentations(void *a1, char a2, uint64_t *a3)
{
  uint64_t v4 = a1[2];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = *(void *)(v7 + 24);
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v9 = *(void *)(v8 + 8);
    if (!v9) {
      goto LABEL_8;
    }
    uint64_t v10 = *(void *)(v9 + 72);
    if (!v10) {
      goto LABEL_8;
    }
    uint64_t v11 = *(void *)(v7 + 256);
    v14[0] = "VideoPresentationModelContext";
    v14[1] = 30;
    v14[2] = "requestCloseAllMediaPresentations";
    v14[3] = v11;
    if (*(unsigned char *)(v10 + 12)
      && (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v14), (uint64_t v4 = a1[2]) == 0))
    {
      uint64_t v12 = 0;
    }
    else
    {
LABEL_8:
      uint64_t v12 = *(void *)(v4 + 8);
    }
    return WebKit::VideoPresentationManagerProxy::requestCloseAllMediaPresentations(v12, a1[4], a2, a3);
  }
  else
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a3);
  }
}

uint64_t WebKit::VideoPresentationManagerProxy::requestCloseAllMediaPresentations(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  if (WebKit::VideoPresentationManagerProxy::hasMode((WebKit::VideoPresentationManagerProxy *)a1, 2)
    || WebKit::VideoPresentationManagerProxy::hasMode((WebKit::VideoPresentationManagerProxy *)a1, 1))
  {
    uint64_t v8 = (void *)(a1 + 80);
    uint64_t v9 = *(unsigned int *)(a1 + 92);
    if (v9 == *(_DWORD *)(a1 + 88))
    {
      a4 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)a4);
      uint64_t v9 = *(unsigned int *)(a1 + 92);
      uint64_t v10 = (uint64_t *)(*(void *)(a1 + 80) + 8 * v9);
    }
    else
    {
      uint64_t v10 = (uint64_t *)(*v8 + 8 * v9);
    }
    uint64_t v11 = *a4;
    *a4 = 0;
    *uint64_t v10 = v11;
    *(_DWORD *)(a1 + 92) = v9 + 1;
    return WebKit::VideoPresentationManagerProxy::requestFullscreenMode(a1, a2, 0, a3);
  }
  else
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::requestFullscreenMode(WTF::StringImpl *this, WTF::String *a2, char a3)
{
  uint64_t v5 = this;
  v46[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 72);
      if (v9)
      {
        uint64_t v10 = *(void *)(v6 + 256);
        v34[0] = "VideoPresentationModelContext";
        v34[1] = 30;
        v34[2] = "requestFullscreenMode";
        v34[3] = v10;
        if (*(unsigned char *)(v9 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v39, (WTF::Logger::LogSiteIdentifier *)v34);
          WTF::String::number(a2);
          WTF::String::String((WTF::String *)&v37, ", finishedWithMedia: ");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v36);
          WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v39, (uint64_t *)&v38, (uint64_t *)&v37, (uint64_t *)&v36, &v40);
          uint64_t v12 = v36;
          uint64_t v36 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v11);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          int v13 = v37;
          long long v37 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v11);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          unsigned int v14 = v38;
          uint64_t v38 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v11);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          uint64_t v15 = v39;
          id v39 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v11);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = qword_1EB357E20;
          uint64_t v17 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
          if (v17)
          {
            WTF::String::utf8();
            uint64_t v19 = v35[0] ? (char *)v35[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            int v42 = v19;
            _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v17 = v35[0];
            v35[0] = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1) {
                uint64_t v17 = (WTF *)WTF::fastFree(v17, v18);
              }
              else {
                --*(_DWORD *)v17;
              }
            }
          }
          if (WebKit2LogFullscreen)
          {
            uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v21 = *v20;
              if (v21) {
                break;
              }
              int v22 = *v20;
              atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
              if (v22 == v21)
              {
                char v33 = a3;
                uint64_t v23 = WTF::Logger::observers(v17);
                uint64_t v24 = *(unsigned int *)(v23 + 12);
                if (v24)
                {
                  uint64_t v25 = *(uint64_t **)v23;
                  uint64_t v26 = *(void *)v23 + 8 * v24;
                  do
                  {
                    uint64_t v27 = *v25;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v42 + 4), (WTF::Logger::LogSiteIdentifier *)v34);
                    int v43 = 0;
                    WTF::String::number((WTF::String *)a2);
                    int v44 = 0;
                    WTF::String::String((WTF::String *)v45, ", finishedWithMedia: ");
                    v45[2] = 0;
                    WTF::LogArgument<BOOL>::toString<BOOL>(v46);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v35, (uint64_t)buf, 4uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v27 + 16))(v27, &WebKit2LogFullscreen, 0, v35);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v28);
                    for (uint64_t i = 56; i != -8; i -= 16)
                    {
                      uint64_t v30 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v30)
                      {
                        if (*(_DWORD *)v30 == 2) {
                          WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
                        }
                        else {
                          *(_DWORD *)v30 -= 2;
                        }
                      }
                    }
                    ++v25;
                  }
                  while (v25 != (uint64_t *)v26);
                }
                int v31 = 1;
                atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
                a3 = v33;
                if (v31 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          this = v40;
          uint64_t v40 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v18);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
    }
  }
  uint64_t v32 = *((void *)v5 + 2);
  if (v32)
  {
    this = *(WTF::StringImpl **)(v32 + 8);
    if (this) {
      return (WTF::StringImpl *)WebKit::VideoPresentationManagerProxy::requestFullscreenMode((uint64_t)this, *((void *)v5 + 4), (int)a2, a3);
    }
  }
  return this;
}

void sub_198D1EE20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,char a23)
{
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::requestFullscreenMode(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v10 = a2;
  int v9 = a3;
  uint64_t v4 = *(void *)(result + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 240);
      v7[0] = &v10;
      v7[1] = &v9;
      char v8 = a4;
      return WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::RequestFullscreenMode>(v6, (uint64_t)v7, *(void *)(*(void *)(v5 + 16) + 1928), 0);
    }
  }
  return result;
}

void WebKit::VideoPresentationModelContext::setVideoLayerFrame(void *a1, float a2, float a3, float a4, float a5)
{
  *(void *)&long long v31 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((void *)&v31 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  uint64_t v6 = a1[3];
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 72);
      if (v9)
      {
        CGFloat v10 = *(double *)(v6 + 256);
        *(void *)&v33.origin.x = "VideoPresentationModelContext";
        *(void *)&v33.origin.y = 30;
        *(void *)&v33.size.width = "setVideoLayerFrame";
        v33.size.height = v10;
        if (*(unsigned char *)(v9 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect>((WTF::Logger::LogSiteIdentifier *)&v33, (WebCore::FloatRect *)&v31);
        }
      }
    }
  }
  uint64_t v11 = a1[2];
  if (v11)
  {
    uint64_t v12 = *(void **)(v11 + 8);
    if (v12)
    {
      uint64_t v13 = a1[4];
      uint64_t v37 = v13;
      long long v36 = v31;
      uint64_t v14 = v12[6];
      if (v14)
      {
        if (*(void *)(v14 + 8))
        {
          uint64_t v15 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(v12, v13);
          std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v34, v15);
          v33.origin.x = 0.0;
          v33.origin.y = 0.0;
          v33.size = (CGSize)vcvtq_f64_f32(*(float32x2_t *)((char *)&v36 + 8));
          WebCore::VideoFullscreenCaptions::setCaptionsFrame((WebCore::VideoFullscreenCaptions *)(v35 + 32), &v33);
          int v32 = 0;
          uint64_t v16 = *(void *)(v34 + 40);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & (v16 != 0)) == 1 && *(void *)(v16 + 424))
          {
            uint64_t v17 = (void *)[MEMORY[0x1E4F18B88] coordinatorWithError:0];
            [v17 addLayerHierarchyHostingView:*(void *)(v16 + 424)];
            uint64_t v18 = (void *)[v17 createXPCRepresentation];
            uint64_t v19 = v18;
            if (v18) {
              id v20 = v18;
            }
            int v21 = (WTF::MachSendRight *)xpc_dictionary_copy_mach_send();
            WTF::MachSendRight::adopt(v21);
            WTF::MachSendRight::operator=();
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v33);
            uint64_t v22 = *(void *)(v12[6] + 8);
            uint64_t v23 = v22 - 16;
            if (!v22) {
              uint64_t v23 = 0;
            }
            uint64_t v24 = *(void *)(v23 + 256);
            *(void *)&v33.origin.y = &v36;
            *(void *)&v33.size.width = &v32;
            *(void *)&v33.origin.x = &v37;
            WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(v24, (uint64_t)&v33, *(void *)(*(void *)(v22 + 16) + 1928));
            [v17 commit];
            if (v19) {
          }
            }
          else
          {
            uint64_t v25 = *(void *)(v12[6] + 8);
            uint64_t v26 = v25 - 16;
            if (!v25) {
              uint64_t v26 = 0;
            }
            uint64_t v27 = *(void *)(v26 + 256);
            *(void *)&v33.origin.y = &v36;
            *(void *)&v33.size.width = &v32;
            *(void *)&v33.origin.x = &v37;
            WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(v27, (uint64_t)&v33, *(void *)(*(void *)(v25 + 16) + 1928));
          }
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v32);
          uint64_t v29 = v35;
          uint64_t v35 = 0;
          if (v29) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v29 + 64));
          }
          uint64_t v30 = v34;
          uint64_t v34 = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v30 + 8), v28);
          }
        }
      }
    }
  }
}

void sub_198D1F274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (v19) {

  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a13);
  uint64_t v22 = a19;
  a19 = 0;
  if (v22) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v22 + 64));
  }
  uint64_t v23 = a18;
  a18 = 0;
  if (v23) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 8), v21);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::VideoPresentationModelContext::setVideoLayerGravity(IPC::Encoder *result, WTF::String *a2)
{
  uint64_t v3 = result;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)result + 3);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      if (v7)
      {
        uint64_t v8 = *(IPC::Encoder **)(v4 + 256);
        v39[0] = (IPC::Encoder *)"VideoPresentationModelContext";
        v39[1] = (IPC::Encoder *)30;
        v39[2] = (IPC::Encoder *)"setVideoLayerGravity";
        v39[3] = v8;
        if (*(unsigned char *)(v7 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v42, (WTF::Logger::LogSiteIdentifier *)v39);
          WTF::String::number(a2);
          *(void *)long long buf = v42;
          v40[0] = v41;
          uint64_t result = (IPC::Encoder *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v40, &v43);
          if (!v43)
          {
            __break(0xC471u);
            return result;
          }
          CGFloat v10 = v41;
          uint64_t v41 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v9);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          uint64_t v11 = v42;
          int v42 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v9);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          uint64_t v12 = qword_1EB357E20;
          uint64_t v13 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            WTF::String::utf8();
            uint64_t v15 = v40[0] ? (char *)v40[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v13 = v40[0];
            v40[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1) {
                uint64_t v13 = (WTF *)WTF::fastFree(v13, v14);
              }
              else {
                --*(_DWORD *)v13;
              }
            }
          }
          if (WebKit2LogFullscreen)
          {
            uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v17 = *v16;
              if (v17) {
                break;
              }
              int v18 = *v16;
              atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
              if (v18 == v17)
              {
                uint64_t v19 = WTF::Logger::observers(v13);
                uint64_t v20 = *(unsigned int *)(v19 + 12);
                if (v20)
                {
                  int v21 = *(uint64_t **)v19;
                  uint64_t v22 = *(void *)v19 + 8 * v20;
                  do
                  {
                    uint64_t v23 = *v21;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v39);
                    int v45 = 0;
                    WTF::String::number(a2);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v40, (uint64_t)buf, 2uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v40);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v24);
                    for (uint64_t i = 24; i != -8; i -= 16)
                    {
                      uint64_t v26 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v26)
                      {
                        if (*(_DWORD *)v26 == 2) {
                          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                        }
                        else {
                          *(_DWORD *)v26 -= 2;
                        }
                      }
                    }
                    ++v21;
                  }
                  while (v21 != (uint64_t *)v22);
                }
                int v27 = 1;
                atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
                if (v27 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          uint64_t result = v43;
          int v43 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (IPC::Encoder *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  uint64_t v28 = *((void *)v3 + 2);
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 8);
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 + 48);
      v40[0] = *((WTF **)v3 + 4);
      if (v30)
      {
        uint64_t v31 = *(void *)(v30 + 8);
        if (v31)
        {
          uint64_t v32 = *(void *)(v31 + 240);
          LODWORD(v43) = a2;
          uint64_t v33 = *(void *)(*(void *)(v31 + 16) + 1928);
          uint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v34 = 1546;
          *((void *)v34 + 1) = v33;
          *((void *)v34 + 66) = (char *)v34 + 16;
          *((void *)v34 + 67) = 512;
          *((void *)v34 + 68) = 0;
          *((void *)v34 + 70) = 0;
          *((void *)v34 + 69) = 0;
          IPC::Encoder::encodeHeader(v34);
          v39[0] = v34;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v34, (uint64_t *)v40);
          IPC::Encoder::operator<<<int>(v34, (int *)&v43);
          buf[0] = 0;
          LOBYTE(v45) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v32, v39, 0, (uint64_t)buf, 1);
          if ((_BYTE)v45)
          {
            uint64_t v36 = *(void *)buf;
            *(void *)long long buf = 0;
            if (v36) {
              (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
            }
          }
          uint64_t result = v39[0];
          v39[0] = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v35);
            return (IPC::Encoder *)WTF::fastFree(v37, v38);
          }
        }
      }
    }
  }
  return result;
}

void sub_198D1F714(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationModelContext::setVideoFullscreenFrame(void *a1, float a2, float a3, float a4, float a5)
{
  *(void *)&long long v28 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((void *)&v28 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  uint64_t v6 = a1[3];
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 72);
      if (v9)
      {
        uint64_t v10 = *(void *)(v6 + 256);
        v25[0] = "VideoPresentationModelContext";
        v25[1] = 30;
        uint64_t v26 = "setVideoFullscreenFrame";
        uint64_t v27 = v10;
        if (*(unsigned char *)(v9 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect>((WTF::Logger::LogSiteIdentifier *)v25, (WebCore::FloatRect *)&v28);
        }
      }
    }
  }
  uint64_t v11 = a1[2];
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v30 = a1[4];
      long long v29 = v28;
      uint64_t v13 = *(void *)(v12 + 48);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14)
        {
          CFRetain(*(CFTypeRef *)(v14 - 8));
          uint64_t v15 = *(void *)(v14 + 240);
          uint64_t v16 = *(void *)(*(void *)(v12 + 48) + 8);
          if (v16) {
            uint64_t v17 = v16 - 16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(void *)(*(void *)(v17 + 32) + 1928);
          uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v19 = 1544;
          *((void *)v19 + 1) = v18;
          *((void *)v19 + 66) = (char *)v19 + 16;
          *((void *)v19 + 67) = 512;
          *((void *)v19 + 68) = 0;
          *((void *)v19 + 70) = 0;
          *((void *)v19 + 69) = 0;
          IPC::Encoder::encodeHeader(v19);
          uint64_t v31 = v19;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, &v30);
          IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v19, (float *)&v29);
          LOBYTE(v25[0]) = 0;
          LOBYTE(v26) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v15, &v31, 0, (uint64_t)v25, 1);
          if ((_BYTE)v26)
          {
            uint64_t v21 = v25[0];
            v25[0] = 0;
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
            }
          }
          uint64_t v22 = v31;
          uint64_t v31 = 0;
          if (v22)
          {
            IPC::Encoder::~Encoder(v22, v20);
            WTF::fastFree(v23, v24);
          }
          CFRelease(*(CFTypeRef *)(v14 - 8));
        }
      }
    }
  }
}

void sub_198D1FA40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  uint64_t v14 = *(IPC::Encoder **)(v12 - 40);
  *(void *)(v12 - 40) = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, a2);
    WTF::fastFree(v15, v16);
  }
  CFRelease(*(CFTypeRef *)(v11 - 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::VideoPresentationModelContext::fullscreenModeChanged(IPC::Encoder *this, WTF::String *a2)
{
  uint64_t v3 = this;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      if (v7)
      {
        uint64_t v8 = *(void *)(v4 + 256);
        v30[0] = "VideoPresentationModelContext";
        v30[1] = 30;
        v30[2] = "fullscreenModeChanged";
        v30[3] = v8;
        if (*(unsigned char *)(v7 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v33, (WTF::Logger::LogSiteIdentifier *)v30);
          WTF::String::number(a2);
          *(void *)long long buf = v33;
          v31[0] = v32;
          this = (IPC::Encoder *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v31, &v34);
          if (!v34)
          {
            __break(0xC471u);
            return this;
          }
          uint64_t v10 = v32;
          uint64_t v32 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v9);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          uint64_t v11 = v33;
          uint64_t v33 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v9);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          uint64_t v12 = qword_1EB357E20;
          uint64_t v13 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            WTF::String::utf8();
            uint64_t v15 = v31[0] ? (char *)v31[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v13 = v31[0];
            v31[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1) {
                uint64_t v13 = (WTF *)WTF::fastFree(v13, v14);
              }
              else {
                --*(_DWORD *)v13;
              }
            }
          }
          if (WebKit2LogFullscreen)
          {
            uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v17 = *v16;
              if (v17) {
                break;
              }
              int v18 = *v16;
              atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
              if (v18 == v17)
              {
                uint64_t v19 = WTF::Logger::observers(v13);
                uint64_t v20 = *(unsigned int *)(v19 + 12);
                if (v20)
                {
                  uint64_t v21 = *(uint64_t **)v19;
                  uint64_t v22 = *(void *)v19 + 8 * v20;
                  do
                  {
                    uint64_t v23 = *v21;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v30);
                    int v36 = 0;
                    WTF::String::number(a2);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)buf, 2uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v31);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v24);
                    for (uint64_t i = 24; i != -8; i -= 16)
                    {
                      uint64_t v26 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v26)
                      {
                        if (*(_DWORD *)v26 == 2) {
                          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                        }
                        else {
                          *(_DWORD *)v26 -= 2;
                        }
                      }
                    }
                    ++v21;
                  }
                  while (v21 != (uint64_t *)v22);
                }
                int v27 = 1;
                atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
                if (v27 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          this = v34;
          uint64_t v34 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (IPC::Encoder *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v14);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
    }
  }
  uint64_t v28 = *((void *)v3 + 2);
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 8);
    if (v29) {
      return WebKit::VideoPresentationManagerProxy::fullscreenModeChanged(*(IPC::Encoder **)(v29 + 48), *((void *)v3 + 4), (int)a2);
    }
  }
  return this;
}

void sub_198D1FDFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::VideoPresentationManagerProxy::fullscreenModeChanged(IPC::Encoder *result, uint64_t a2, int a3)
{
  uint64_t v12 = a2;
  int v11 = a3;
  if (result)
  {
    uint64_t v3 = *((void *)result + 1);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 240);
      uint64_t v5 = *(void *)(*(void *)(v3 + 16) + 1928);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1536;
      *((void *)v6 + 1) = v5;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v15 = v6;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v12);
      IPC::Encoder::operator<<<int>(v6, &v11);
      LOBYTE(v13) = 0;
      char v14 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v15, 0, (uint64_t)&v13, 1);
      if (v14)
      {
        uint64_t v8 = v13;
        uint64_t v13 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      uint64_t result = v15;
      uint64_t v15 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v7);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return result;
}

void sub_198D20030(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationModelContext::presentingViewController(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 48);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1872))(v6);
  (*(void (**)(uint64_t))(*(void *)v6 + 1600))(v6);
  return v7;
}

void sub_198D20184(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

WKVideoFullScreenViewController *WebKit::VideoPresentationModelContext::createVideoFullscreenViewController@<X0>(AVPlayerViewController *a1@<X1>, WKVideoFullScreenViewController **a2@<X8>)
{
  uint64_t result = [[WKVideoFullScreenViewController alloc] initWithAVPlayerViewController:a1];
  *a2 = result;
  return result;
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::requestUpdateInlineRect(WTF::StringImpl *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v18[0] = "VideoPresentationModelContext";
        v18[1] = 30;
        uint64_t v19 = "requestUpdateInlineRect";
        uint64_t v20 = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
        }
      }
    }
  }
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 48);
      uint64_t v21 = *((void *)v1 + 4);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 240);
          uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
          uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v13 = 1539;
          *((void *)v13 + 1) = v12;
          *((void *)v13 + 66) = (char *)v13 + 16;
          *((void *)v13 + 67) = 512;
          *((void *)v13 + 68) = 0;
          *((void *)v13 + 70) = 0;
          *((void *)v13 + 69) = 0;
          IPC::Encoder::encodeHeader(v13);
          int v22 = v13;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v21);
          LOBYTE(v18[0]) = 0;
          LOBYTE(v19) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)v18, 1);
          if ((_BYTE)v19)
          {
            uint64_t v15 = v18[0];
            v18[0] = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          this = v22;
          int v22 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v14);
            return (WTF::StringImpl *)WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return this;
}

void sub_198D20374(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::requestVideoContentLayer(WTF::StringImpl *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        uint64_t v9[2] = "requestVideoContentLayer";
        v9[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        }
      }
    }
  }
  uint64_t v7 = *(void *)(v1 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      return WebKit::VideoPresentationManagerProxy::requestVideoContentLayer(*(IPC::Encoder **)(v8 + 48), *(void *)(v1 + 32));
    }
  }
  return this;
}

IPC::Encoder *WebKit::VideoPresentationManagerProxy::requestVideoContentLayer(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v10 = a2;
  if (result)
  {
    uint64_t v2 = *((void *)result + 1);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 240);
      uint64_t v4 = *(void *)(*(void *)(v2 + 16) + 1928);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 1540;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v13 = v5;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v10);
      LOBYTE(v11) = 0;
      char v12 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v13, 0, (uint64_t)&v11, 1);
      if (v12)
      {
        uint64_t v7 = v11;
        uint64_t v11 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v8, v9);
      }
    }
  }
  return result;
}

void sub_198D20578(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::returnVideoContentLayer(WTF::StringImpl *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        uint64_t v9[2] = "returnVideoContentLayer";
        v9[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        }
      }
    }
  }
  uint64_t v7 = *(void *)(v1 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      return WebKit::VideoPresentationManagerProxy::returnVideoContentLayer(*(IPC::Encoder **)(v8 + 48), *(void *)(v1 + 32));
    }
  }
  return this;
}

IPC::Encoder *WebKit::VideoPresentationManagerProxy::returnVideoContentLayer(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v10 = a2;
  if (result)
  {
    uint64_t v2 = *((void *)result + 1);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 240);
      uint64_t v4 = *(void *)(*(void *)(v2 + 16) + 1928);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 1541;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v13 = v5;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v10);
      LOBYTE(v11) = 0;
      char v12 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v13, 0, (uint64_t)&v11, 1);
      if (v12)
      {
        uint64_t v7 = v11;
        uint64_t v11 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v8, v9);
      }
    }
  }
  return result;
}

void sub_198D2077C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::returnVideoView(WTF::StringImpl *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v12[0] = "VideoPresentationModelContext";
        v12[1] = 30;
        v12[2] = "returnVideoView";
        v12[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v12);
        }
      }
    }
  }
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    this = *(WTF::StringImpl **)(v7 + 8);
    if (this)
    {
      uint64_t v8 = *WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(this, *((void *)v1 + 4));
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v8 + 8));
      uint64_t v10 = *(void **)(v8 + 56);
      if (v10) {
        BOOL v11 = *(void *)(v8 + 40) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        objc_msgSend(*(id *)(v8 + 56), "addSubview:");
        [v10 setNeedsLayout];
        [v10 layoutIfNeeded];
      }
      return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 8), v9);
    }
  }
  return this;
}

void sub_198D208C4(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::didSetupFullscreen(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        uint64_t v9[2] = "didSetupFullscreen";
        v9[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        }
      }
    }
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      WebKit::VideoPresentationManagerProxy::enterFullscreen(v8, *((void *)this + 4));
    }
  }
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::failedToEnterFullscreen(WTF::StringImpl *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v18[0] = "VideoPresentationModelContext";
        v18[1] = 30;
        uint64_t v19 = "failedToEnterFullscreen";
        uint64_t v20 = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
        }
      }
    }
  }
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 48);
      uint64_t v21 = *((void *)v1 + 4);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 240);
          uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
          uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v13 = 1534;
          *((void *)v13 + 1) = v12;
          *((void *)v13 + 66) = (char *)v13 + 16;
          *((void *)v13 + 67) = 512;
          *((void *)v13 + 68) = 0;
          *((void *)v13 + 70) = 0;
          *((void *)v13 + 69) = 0;
          IPC::Encoder::encodeHeader(v13);
          int v22 = v13;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v21);
          LOBYTE(v18[0]) = 0;
          LOBYTE(v19) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)v18, 1);
          if ((_BYTE)v19)
          {
            uint64_t v15 = v18[0];
            v18[0] = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          this = v22;
          int v22 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v14);
            return (WTF::StringImpl *)WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return this;
}

void sub_198D20AE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationModelContext::didEnterFullscreen(WebKit::VideoPresentationModelContext *this, const WebCore::FloatSize *a2)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      if (v7)
      {
        uint64_t v8 = *(void *)(v4 + 256);
        v11[0] = "VideoPresentationModelContext";
        v11[1] = 30;
        v11[2] = "didEnterFullscreen";
        v11[3] = v8;
        if (*(unsigned char *)(v7 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11, a2);
        }
      }
    }
  }
  uint64_t v9 = *((void *)this + 2);
  if (v9)
  {
    uint64_t v10 = *(void **)(v9 + 8);
    if (v10) {
      WebKit::VideoPresentationManagerProxy::didEnterFullscreen(v10, *((void *)this + 4), (float *)a2);
    }
  }
}

void WebKit::VideoPresentationManagerProxy::didEnterFullscreen(void *a1, uint64_t a2, float *a3)
{
  uint64_t v22 = a2;
  uint64_t v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      LOBYTE(v20) = 0;
      char v21 = 0;
      if (*a3 > 0.0 && a3[1] > 0.0)
      {
        uint64_t v6 = *(void *)a3;
        char v21 = 1;
        uint64_t v20 = v6;
      }
      uint64_t v7 = *(void *)(v4 + 240);
      uint64_t v8 = *(void *)(*(void *)(v4 + 16) + 1928);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 1531;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      uint64_t v25 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, &v22);
      IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(v9, (uint64_t)&v20);
      LOBYTE(v23) = 0;
      char v24 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v25, 0, (uint64_t)&v23, 1);
      if (v24)
      {
        uint64_t v11 = v23;
        uint64_t v23 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      uint64_t v12 = v25;
      uint64_t v25 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v10);
        WTF::fastFree(v18, v19);
      }
      uint64_t v13 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, v22)[1];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 64));
      int v14 = *(unsigned __int8 *)(v13 + 229);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v13 + 64));
      if (!v14)
      {
        uint64_t v15 = a1[6];
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 8);
          if (v16) {
            uint64_t v17 = v16 - 16;
          }
          else {
            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        WebKit::WebPageProxy::didEnterFullscreen(v17, v22);
      }
    }
  }
}

void sub_198D20D88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15 && a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  uint64_t v17 = *(IPC::Encoder **)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::willExitFullscreen(WTF::StringImpl *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v18[0] = "VideoPresentationModelContext";
        v18[1] = 30;
        uint64_t v19 = "willExitFullscreen";
        uint64_t v20 = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
        }
      }
    }
  }
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 48);
      uint64_t v21 = *((void *)v1 + 4);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 240);
          uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 1928);
          uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v13 = 1547;
          *((void *)v13 + 1) = v12;
          *((void *)v13 + 66) = (char *)v13 + 16;
          *((void *)v13 + 67) = 512;
          *((void *)v13 + 68) = 0;
          *((void *)v13 + 70) = 0;
          *((void *)v13 + 69) = 0;
          IPC::Encoder::encodeHeader(v13);
          uint64_t v22 = v13;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v21);
          LOBYTE(v18[0]) = 0;
          LOBYTE(v19) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)v18, 1);
          if ((_BYTE)v19)
          {
            uint64_t v15 = v18[0];
            v18[0] = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          this = v22;
          uint64_t v22 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v14);
            return (WTF::StringImpl *)WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return this;
}

void sub_198D20F64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::didExitFullscreen(WTF::StringImpl *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v8[0] = "VideoPresentationModelContext";
        v8[1] = 30;
        v8[2] = "didExitFullscreen";
        v8[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8);
        }
      }
    }
  }
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    this = *(WTF::StringImpl **)(v7 + 8);
    if (this) {
      return (WTF::StringImpl *)WebKit::VideoPresentationManagerProxy::didExitFullscreen((uint64_t)this, *((void *)v1 + 4));
    }
  }
  return this;
}

uint64_t WebKit::VideoPresentationManagerProxy::didExitFullscreen(uint64_t result, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v2 = *(void *)(result + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = (WebKit::VideoPresentationManagerProxy *)result;
      uint64_t v5 = *(void *)(v3 + 240);
      uint64_t v12 = &v13;
      WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::DidExitFullscreen>(v5, &v12, *(void *)(*(void *)(v3 + 16) + 1928), 0);
      uint64_t v6 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(v4, v13)[1];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v6 + 64));
      int v7 = *(unsigned __int8 *)(v6 + 229);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v6 + 64));
      if (!v7)
      {
        uint64_t v9 = *((void *)v4 + 6);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10) {
            uint64_t v11 = v10 - 16;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        WebKit::WebPageProxy::didExitFullscreen(v11, v13);
      }
      return WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(v4, v8);
    }
  }
  return result;
}

void WebKit::VideoPresentationModelContext::didCleanupFullscreen(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        uint64_t v9[2] = "didCleanupFullscreen";
        v9[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        }
      }
    }
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *(WebKit::VideoPresentationManagerProxy **)(v7 + 8);
    if (v8) {
      WebKit::VideoPresentationManagerProxy::didCleanupFullscreen(v8, *((void *)this + 4));
    }
  }
}

void WebKit::VideoPresentationManagerProxy::didCleanupFullscreen(WebKit::VideoPresentationManagerProxy *a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v2 = *((void *)a1 + 6);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v6 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2);
      std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v23, v6);
      uint64_t v7 = *(void **)(v23 + 40);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v7 != 0)) == 1) {
        [v7 setVisibilityPropagationView:0];
      }
      [*(id *)(v23 + 40) removeFromSuperview];
      WebCore::VideoFullscreenCaptions::removeCaptionsLayer((WebCore::VideoPresentationInterfaceIOS *)((char *)v24 + 32));
      uint64_t v8 = *(void **)(v23 + 48);
      if (v8)
      {
        objc_msgSend(v8, "addSublayer:", objc_msgSend(*(id *)(v23 + 40), "layer"));
        [v8 layoutSublayers];
      }
      else
      {
        [MEMORY[0x1E4F39CF8] flush];
        [*(id *)(v23 + 40) removeFromSuperview];
        uint64_t v9 = *(const void **)(v23 + 40);
        *(void *)(v23 + 40) = 0;
        if (v9) {
          CFRelease(v9);
        }
      }
      uint64_t v10 = *(void *)(v3 + 240);
      uint64_t v11 = *(void *)(*((void *)a1 + 6) + 8);
      if (v11) {
        uint64_t v12 = v11 - 16;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 1928);
      int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v14 = 1530;
      *((void *)v14 + 1) = v13;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 70) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      uint64_t v28 = v14;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v25);
      LOBYTE(v26) = 0;
      char v27 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v28, 0, (uint64_t)&v26, 1);
      if (v27)
      {
        uint64_t v16 = v26;
        uint64_t v26 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      uint64_t v17 = v28;
      uint64_t v28 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v15);
        WTF::fastFree(v21, v22);
      }
      if (!WebKit::VideoPresentationManagerProxy::hasMode(a1, 4))
      {
        WebCore::VideoPresentationInterfaceIOS::setMode(v24);
        WebKit::VideoPresentationManagerProxy::removeClientForContext(a1, v25);
      }
      WebKit::WebPageProxy::didCleanupFullscreen((void *)(v3 - 16));
      uint64_t v19 = v24;
      char v24 = 0;
      if (v19) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v19 + 8));
      }
      uint64_t v20 = v23;
      uint64_t v23 = 0;
      if (v20) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v20 + 8), v18);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_198D21418(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(a11 + 64));
  }
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(a10 + 8), a2);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::fullscreenMayReturnToInline(WTF::StringImpl *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v20[0] = "VideoPresentationModelContext";
        v20[1] = 30;
        uint64_t v21 = "fullscreenMayReturnToInline";
        uint64_t v22 = v6;
        if (*(unsigned char *)(v5 + 12)) {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v20);
        }
      }
    }
  }
  uint64_t v7 = *((void *)v1 + 2);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 48);
      uint64_t v25 = *((void *)v1 + 4);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 240);
          uint64_t v12 = *(void *)(v10 + 16);
          int v13 = (*(unsigned __int8 *)(v12 + 64) >> 2) & 1;
          uint64_t v23 = &v25;
          char v24 = v13;
          uint64_t v14 = *(void *)(v12 + 1928);
          uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v15 = 1535;
          *((void *)v15 + 1) = v14;
          *((void *)v15 + 66) = (char *)v15 + 16;
          *((void *)v15 + 67) = 512;
          *((void *)v15 + 68) = 0;
          *((void *)v15 + 70) = 0;
          *((void *)v15 + 69) = 0;
          IPC::Encoder::encodeHeader(v15);
          uint64_t v26 = v15;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v15, (uint64_t)&v23);
          LOBYTE(v20[0]) = 0;
          LOBYTE(v21) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v26, 0, (uint64_t)v20, 1);
          if ((_BYTE)v21)
          {
            uint64_t v17 = v20[0];
            v20[0] = 0;
            if (v17) {
              (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
            }
          }
          this = v26;
          uint64_t v26 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v16);
            return (WTF::StringImpl *)WTF::fastFree(v18, v19);
          }
        }
      }
    }
  }
  return this;
}

void sub_198D21654(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  int v13 = *(IPC::Encoder **)(v11 - 40);
  *(void *)(v11 - 40) = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::requestRouteSharingPolicyAndContextUID(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      if (v7)
      {
        uint64_t v8 = *(void *)(v4 + 256);
        char v27 = (WTF::StringImpl *)"VideoPresentationModelContext";
        uint64_t v28 = 30;
        uint64_t v29 = "requestRouteSharingPolicyAndContextUID";
        uint64_t v30 = v8;
        if (*(unsigned char *)(v7 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v27);
        }
      }
    }
  }
  uint64_t v9 = a1[2];
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 48);
      uint64_t v31 = a1[4];
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        if (v12)
        {
          uint64_t v13 = *(void *)(v12 + 240);
          uint64_t v14 = *(void *)(*(void *)(v12 + 16) + 1928);
          uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v15 = 1538;
          *((void *)v15 + 1) = v14;
          *((void *)v15 + 66) = (char *)v15 + 16;
          *((void *)v15 + 67) = 512;
          *((void *)v15 + 68) = 0;
          *((void *)v15 + 70) = 0;
          *((void *)v15 + 69) = 0;
          IPC::Encoder::encodeHeader(v15);
          uint64_t v32 = v15;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, &v31);
          uint64_t v16 = *a2;
          *a2 = 0;
          uint64_t v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(void *)uint64_t v17 = &unk_1EE9D0550;
          *((void *)v17 + 1) = v16;
          uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          char v27 = v17;
          uint64_t v28 = v18;
          LOBYTE(v29) = 1;
          WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v32, 0, (uint64_t)&v27, 1);
          if ((_BYTE)v29)
          {
            uint64_t v20 = v27;
            char v27 = 0;
            if (v20) {
              (*(void (**)(WTF::StringImpl *))(*(void *)v20 + 8))(v20);
            }
          }
          uint64_t result = v32;
          uint64_t v32 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v19);
            return (WTF::StringImpl *)WTF::fastFree(v22, v23);
          }
          return result;
        }
      }
      char v27 = 0;
      WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(a2, 0, &v27);
      uint64_t result = v27;
      if (!v27) {
        return result;
      }
LABEL_20:
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
  }
  char v24 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *(_DWORD *)v24 += 2;
  }
  uint64_t v26 = v24;
  WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(a2, 0, &v26);
  uint64_t result = v26;
  if (v26) {
    goto LABEL_20;
  }
  return result;
}

void sub_198D218DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  uint64_t v15 = *(IPC::Encoder **)(v13 - 40);
  *(void *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v8 = v4;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, a2, &v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void sub_198D21A8C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::didEnterPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        uint64_t v9[2] = "didEnterPictureInPicture";
        v9[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        }
      }
    }
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *(WebKit::VideoPresentationManagerProxy **)(v7 + 8);
    if (v8) {
      WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(v8, 1u);
    }
  }
}

void WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(WebKit::VideoPresentationManagerProxy *this, unsigned __int8 a2)
{
  unsigned __int8 v31 = a2;
  uint64_t v3 = *((void *)this + 7);
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t v4 = *(void *)(v3 + 80);
  char v27 = "VideoPresentationManagerProxy";
  uint64_t v28 = 30;
  uint64_t v29 = "hasVideoInPictureInPictureDidChange";
  uint64_t v30 = v4;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v27);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      CFRetain(*(CFTypeRef *)(v7 - 8));
      (*(void (**)(void, uint64_t, void))(**(void **)(v7 + 88) + 56))(*(void *)(v7 + 88), v7 - 16, v31);
      unsigned __int8 v8 = v31;
      uint64_t v9 = (unsigned char *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v9 = &unk_1EE9D0578;
      v9[8] = v8;
      uint64_t v12 = *((void *)this + 12);
      uint64_t v11 = (uint64_t *)((char *)this + 96);
      uint64_t v10 = v12;
      char v27 = 0;
      uint64_t v28 = 0;
      if (v12 && (uint64_t v13 = *(unsigned int *)(v10 - 12), v13))
      {
        if (v13 >> 29)
        {
          __break(0xC471u);
          return;
        }
        uint64_t v14 = WTF::fastMalloc((WTF *)(8 * v13));
        LODWORD(v28) = v13;
        char v27 = (const char *)v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v11);
      uint64_t v17 = v15;
      uint64_t v18 = v16;
      if (*v11) {
        uint64_t v19 = *v11 + 8 * *(unsigned int *)(*v11 - 4);
      }
      else {
        uint64_t v19 = 0;
      }
      if ((void *)v19 == v15)
      {
        unsigned int v23 = HIDWORD(v28);
        if (!HIDWORD(v28))
        {
LABEL_37:
          WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v16);
          (*(void (**)(unsigned char *))(*(void *)v9 + 8))(v9);
          CFRelease(*(CFTypeRef *)(v7 - 8));
          return;
        }
      }
      else
      {
        unsigned int v20 = 0;
        do
        {
          uint64_t v21 = *(atomic_uint ***)(*v17 + 8);
          if (v21)
          {
            WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*v17 + 8), *(void *)(*v17 + 8));
            uint64_t v22 = *v21;
            if (*v21)
            {
              atomic_fetch_add(v22, 1u);
              unsigned int v20 = HIDWORD(v28);
              uint64_t v14 = (uint64_t)v27;
            }
          }
          else
          {
            uint64_t v22 = 0;
          }
          unsigned int v23 = v20 + 1;
          *(void *)(v14 + 8 * v20) = v22;
          HIDWORD(v28) = v20 + 1;
          while (++v17 != v18)
          {
            if ((unint64_t)(*v17 + 1) > 1) {
              goto LABEL_24;
            }
          }
          uint64_t v17 = v18;
LABEL_24:
          ++v20;
        }
        while (v17 != (void *)v19);
        if (!v23) {
          goto LABEL_37;
        }
      }
      char v24 = v27;
      uint64_t v25 = 8 * v23;
      do
      {
        if (*(void *)v24)
        {
          if (*(void *)(*(void *)v24 + 8))
          {
            uint64_t v32 = *(void *)v24;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v11, &v32))
            {
              if (*(void *)v24) {
                uint64_t v26 = *(void *)(*(void *)v24 + 8);
              }
              else {
                uint64_t v26 = 0;
              }
              (*(void (**)(unsigned char *, uint64_t))(*(void *)v9 + 16))(v9, v26);
            }
          }
        }
        v24 += 8;
        v25 -= 8;
      }
      while (v25);
      goto LABEL_37;
    }
  }
}

void sub_198D21E30(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::didExitPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        uint64_t v9[2] = "didExitPictureInPicture";
        v9[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
        }
      }
    }
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    unsigned __int8 v8 = *(WebKit::VideoPresentationManagerProxy **)(v7 + 8);
    if (v8) {
      WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(v8, 0);
    }
  }
}

uint64_t WebKit::VideoPresentationModelContext::willEnterPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v10[0] = "VideoPresentationModelContext";
        v10[1] = 30;
        v10[2] = "willEnterPictureInPicture";
        v10[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
        }
      }
    }
  }
  uint64_t v7 = (uint64_t *)((char *)this + 72);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v8 = &unk_1EE9D04D8;
  v10[0] = v8;
  WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v7, v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

void sub_198D22004(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationModelContext::failedToEnterPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v10[0] = "VideoPresentationModelContext";
        v10[1] = 30;
        v10[2] = "failedToEnterPictureInPicture";
        v10[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
        }
      }
    }
  }
  uint64_t v7 = (uint64_t *)((char *)this + 72);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v8 = &unk_1EE9D0500;
  v10[0] = v8;
  WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v7, v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

void sub_198D2211C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationModelContext::willExitPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v2 + 256);
        v10[0] = "VideoPresentationModelContext";
        v10[1] = 30;
        v10[2] = "willExitPictureInPicture";
        v10[3] = v6;
        if (*(unsigned char *)(v5 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
        }
      }
    }
  }
  uint64_t v7 = (uint64_t *)((char *)this + 72);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v8 = &unk_1EE9D0528;
  v10[0] = v8;
  WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v7, v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

void sub_198D22234(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::setRequiresTextTrackRepresentation(WebKit::VideoPresentationModelContext *this, char a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      uint64_t v21 = *((void *)this + 4);
      uint64_t v5 = *(void *)(v3 + 48);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          uint64_t v8 = *(void *)(v6 + 240);
          uint64_t v19 = &v21;
          char v20 = a2;
          uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 8);
          if (v9) {
            uint64_t v10 = v9 - 16;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void *)(*(void *)(v10 + 32) + 1928);
          uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v12 = 1542;
          *((void *)v12 + 1) = v11;
          *((void *)v12 + 66) = (char *)v12 + 16;
          *((void *)v12 + 67) = 512;
          *((void *)v12 + 68) = 0;
          *((void *)v12 + 70) = 0;
          *((void *)v12 + 69) = 0;
          IPC::Encoder::encodeHeader(v12);
          char v24 = v12;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v12, (uint64_t)&v19);
          LOBYTE(v22) = 0;
          char v23 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v24, 0, (uint64_t)&v22, 1);
          if (v23)
          {
            uint64_t v14 = v22;
            uint64_t v22 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          uint64_t v15 = v24;
          char v24 = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v13);
            WTF::fastFree(v17, v18);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
          int v4 = *(_DWORD *)(v3 + 16) - 1;
        }
      }
      if (v4)
      {
        *(_DWORD *)(v3 + 16) = v4;
      }
      else
      {
        uint64_t v16 = *(void (**)(uint64_t))(*(void *)v3 + 8);
        v16(v3);
      }
    }
  }
}

void sub_198D22428(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a15 && a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v19, v20);
  }
  CFRelease(*(CFTypeRef *)(v17 - 8));
  if (v16[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
  }
  else {
    --v16[4];
  }
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::setTextTrackRepresentationBounds(WebKit::VideoPresentationModelContext *this, const WebCore::IntRect *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      uint64_t v19 = *((void *)this + 4);
      uint64_t v5 = *(void *)(v3 + 48);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          uint64_t v8 = *(void *)(v6 + 240);
          uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 8);
          if (v9) {
            uint64_t v10 = v9 - 16;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void *)(*(void *)(v10 + 32) + 1928);
          uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v12 = 1543;
          *((void *)v12 + 1) = v11;
          *((void *)v12 + 66) = (char *)v12 + 16;
          *((void *)v12 + 67) = 512;
          *((void *)v12 + 68) = 0;
          *((void *)v12 + 70) = 0;
          *((void *)v12 + 69) = 0;
          IPC::Encoder::encodeHeader(v12);
          uint64_t v22 = v12;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v19);
          IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v12, a2);
          LOBYTE(v20) = 0;
          char v21 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v22, 0, (uint64_t)&v20, 1);
          if (v21)
          {
            uint64_t v14 = v20;
            uint64_t v20 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          uint64_t v15 = v22;
          uint64_t v22 = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v13);
            WTF::fastFree(v17, v18);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
          int v4 = *(_DWORD *)(v3 + 16) - 1;
        }
      }
      if (v4)
      {
        *(_DWORD *)(v3 + 16) = v4;
      }
      else
      {
        uint64_t v16 = *(void (**)(uint64_t))(*(void *)v3 + 8);
        v16(v3);
      }
    }
  }
}

void sub_198D2269C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  else {
    --v14[4];
  }
  _Unwind_Resume(a1);
}

unint64_t WebKit::VideoPresentationModelContext::nextChildIdentifier(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 256);
  uint64_t v2 = *((void *)this + 13) + 1;
  *((void *)this + 13) = v2;
  return v1 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v2;
}

void WebKit::VideoPresentationManagerProxy::~VideoPresentationManagerProxy(WebKit::VideoPresentationManagerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9D03F0;
  uint64_t v3 = *((void *)this + 7);
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t v4 = *(void *)(v3 + 80);
  v15[0] = "VideoPresentationManagerProxy";
  v15[1] = 30;
  v15[2] = "~VideoPresentationManagerProxy";
  v15[3] = v4;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v15);
  }
  WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(this, a2);
  WebKit::VideoPresentationManagerProxy::invalidate(this, v6);
  uint64_t v8 = (unsigned int **)*((void *)this + 12);
  if (v8) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, v7);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v7);
  uint64_t v10 = *((void *)this + 9);
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v11, v9);
  }
  uint64_t v12 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v12)
  {
    if (v12[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    }
    else {
      --v12[4];
    }
  }
  uint64_t v13 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v9);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v9);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v14);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::VideoPresentationManagerProxy::~VideoPresentationManagerProxy(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198D228DC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *(unsigned int ***)(v2 + 96);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 80, a2);
  uint64_t v6 = *(void *)(v2 + 72);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  uint64_t v7 = *(void *)(v2 + 64);
  if (v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, v5);
  }
  uint64_t v8 = *(_DWORD **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
  if (v8)
  {
    if (v8[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    }
    else {
      --v8[4];
    }
  }
  uint64_t v9 = *(unsigned int **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  *(void *)uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), v5);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 24), v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(WebKit::VideoPresentationManagerProxy *this, void *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 10);
  uint64_t v7 = v2;
  int v4 = *((_DWORD *)this + 22);
  uint64_t v3 = *((unsigned int *)this + 23);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  int v8 = v4;
  int v9 = v3;
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    do
    {
      WTF::CompletionHandler<void ()(void)>::operator()(v2++);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, a2);
}

void sub_198D22A14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const char *WebKit::VideoPresentationManagerProxy::invalidate(WebKit::VideoPresentationManagerProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 7);
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v17 = "VideoPresentationManagerProxy";
  uint64_t v18 = 30;
  uint64_t v19 = "invalidate";
  uint64_t v20 = v4;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v17);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(v7 + 240) + 152, 0x98u, *(void *)(*(void *)(v7 + 16) + 1928));
      int v8 = (unsigned int *)*((void *)this + 6);
      *((void *)this + 6) = 0;
      if (v8)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
  }
  uint64_t v9 = *((void *)this + 9);
  uint64_t v17 = (const char *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9)
  {
    *((void *)this + 9) = 0;
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  uint64_t v11 = (const char *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&v17);
  uint64_t v12 = v10;
  uint64_t result = v17;
  if (v17) {
    uint64_t v14 = &v17[24 * *((unsigned int *)v17 - 1)];
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 != v11)
  {
    do
    {
      WebCore::VideoPresentationInterfaceIOS::invalidate(*((WebCore::VideoPresentationInterfaceIOS **)v11 + 2));
      [*(id *)(*((void *)v11 + 1) + 40) removeFromSuperview];
      uint64_t v15 = *((void *)v11 + 1);
      uint64_t v16 = *(const void **)(v15 + 40);
      *(void *)(v15 + 40) = 0;
      if (v16) {
        CFRelease(v16);
      }
      objc_msgSend(*(id *)(*((void *)v11 + 1) + 48), "setPresentationModel:", 0, v17, v18, v19, v20);
      while (1)
      {
        v11 += 24;
        if (v11 == v12) {
          break;
        }
        if ((unint64_t)(*(void *)v11 + 1) > 1) {
          goto LABEL_21;
        }
      }
      uint64_t v11 = v12;
LABEL_21:
      ;
    }
    while (v11 != v14);
    uint64_t result = v17;
  }
  if (result) {
    return (const char *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)result, v10);
  }
  return result;
}

void sub_198D22BA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::VideoPresentationManagerProxy::requestHideAndExitFullscreen(WebKit::VideoPresentationManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v3 = *(void *)(v2 + 80);
  v11[0] = "VideoPresentationManagerProxy";
  v11[1] = 30;
  v11[2] = "requestHideAndExitFullscreen";
  v11[3] = v3;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 8);
  uint64_t v6 = (uint64_t)result;
  uint64_t v8 = v7;
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    uint64_t v10 = (void *)(v9 + 24 * *(unsigned int *)(v9 - 4));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 != result)
  {
    do
    {
      uint64_t result = (void *)WebCore::VideoPresentationInterfaceIOS::requestHideAndExitFullscreen(*(WebCore::VideoPresentationInterfaceIOS **)(v6 + 16));
      while (1)
      {
        v6 += 24;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*(void *)v6 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = v8;
LABEL_12:
      ;
    }
    while ((void *)v6 != v10);
  }
  return result;
}

BOOL WebKit::VideoPresentationManagerProxy::hasMode(WebKit::VideoPresentationManagerProxy *this, int a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 8);
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v4) {
    return 0;
  }
  do
  {
    int v8 = *(_DWORD *)(v4[2] + 156) & a2;
    BOOL v9 = v8 != 0;
    if (v8) {
      break;
    }
    while (1)
    {
      v4 += 3;
      if (v4 == v5) {
        break;
      }
      if ((unint64_t)(*v4 + 1) > 1) {
        goto LABEL_10;
      }
    }
    uint64_t v4 = v5;
LABEL_10:
    ;
  }
  while (v4 != v7);
  return v9;
}

uint64_t WebKit::VideoPresentationManagerProxy::mayAutomaticallyShowVideoPictureInPicture(WebKit::VideoPresentationManagerProxy *this)
{
  uint64_t v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 8);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t result = WebCore::VideoPresentationInterfaceAVKit::mayAutomaticallyShowVideoPictureInPicture((WebCore::VideoPresentationInterfaceAVKit *)v3[2]);
    if (result) {
      return 1;
    }
    while (1)
    {
      v3 += 3;
      if (v3 == v5) {
        break;
      }
      if ((unint64_t)(*v3 + 1) > 1) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = v5;
LABEL_10:
    if (v3 == v7) {
      return result;
    }
  }
}

atomic_uchar *volatile *WebKit::VideoPresentationManagerProxy::controlsManagerInterface@<X0>(atomic_uchar *volatile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)this + 7) + 48);
  if (v3)
  {
    uint64_t v4 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(this, v3)[1];
    this = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 64));
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return this;
}

uint64_t *WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(void *a1, uint64_t a2)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = a1[8];
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 8, 0), (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (uint64_t *)(v4 + 24 * v10);
  uint64_t v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    uint64_t *v11 = a2;
    uint64_t v15 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1[7], a2);
    uint64_t v16 = (_DWORD *)*v15;
    ++*(_DWORD *)(*v15 + 16);
    uint64_t v17 = WTF::fastMalloc((WTF *)0x70);
    uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v18 = 0;
    *(_OWORD *)(v18 + 8) = xmmword_1994F5F10;
    *(void *)(v18 + 24) = v17;
    *(void *)uint64_t v17 = &unk_1EE9D02C8;
    *(void *)(v17 + 8) = v18;
    uint64_t v19 = a1[3];
    if (v19) {
      goto LABEL_17;
    }
    uint64_t v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = a1;
    char v21 = (unsigned int *)a1[3];
    a1[3] = v19;
    if (!v21) {
      goto LABEL_17;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    uint64_t v19 = a1[3];
    if (v19) {
LABEL_17:
    }
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
    *(void *)(v17 + 16) = v19;
    ++v16[4];
    *(void *)(v17 + 24) = v16;
    *(void *)(v17 + 32) = a2;
    *(void *)(v17 + 104) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 81) = 0u;
    uint64_t v22 = (WebCore::VideoPresentationInterfaceAVKit *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1[7], a2)[1];
    ++*((_DWORD *)v22 + 4);
    WebCore::VideoPresentationInterfaceAVKit::create(v36, v22, v23);
    uint64_t v24 = v36[0];
    uint64_t v25 = a1[7];
    uint64_t v37 = a2;
    int v38 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v25 + 64), &v37, &v38, (uint64_t)v36);
    ++*(_DWORD *)(v36[0] + 8);
    WebCore::VideoPresentationInterfaceIOS::setVideoPresentationModel();
    if (*((_DWORD *)v22 + 4) == 1) {
      (*(void (**)(WebCore::VideoPresentationInterfaceAVKit *))(*(void *)v22 + 8))(v22);
    }
    else {
      --*((_DWORD *)v22 + 4);
    }
    if (v16[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
    }
    else {
      --v16[4];
    }
    uint64_t v27 = v11[1];
    v11[1] = v17;
    if (v27) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v27 + 8), v26);
    }
    uint64_t v28 = v11[2];
    v11[2] = v24;
    if (v28) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v28 + 64));
    }
    uint64_t v29 = *v5;
    if (*v5) {
      int v30 = *(_DWORD *)(v29 - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(v29 - 12) = v30;
    uint64_t v31 = *v5;
    if (*v5) {
      int v32 = *(_DWORD *)(v31 - 12);
    }
    else {
      int v32 = 0;
    }
    uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
    unint64_t v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33) {
        return v11 + 1;
      }
    }
    else if (3 * v34 > 4 * v33)
    {
      return v11 + 1;
    }
    uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5, v11);
    return v11 + 1;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1) {
      uint64_t v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    uint64_t v11 = (uint64_t *)(v4 + 24 * v10);
    uint64_t v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        uint64_t *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void sub_198D231BC(_Unwind_Exception *a1, void *a2)
{
  if (v4[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[4];
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  if (v2[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[4];
  }
  _Unwind_Resume(a1);
}

uint64_t *WebKit::VideoPresentationManagerProxy::addClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  int v3 = 1;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 72), &v6, &v3, (uint64_t)&v4);
  if (!v5) {
    ++*(_DWORD *)(v4 + 8);
  }
  return result;
}

void WebKit::VideoPresentationManagerProxy::removeClientForContext(void *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v82 = a2;
  int v3 = a1 + 9;
  uint64_t v2 = a1[9];
  if (!v2) {
    return;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = *(void *)(v2 + 16 * v9);
  if (v10 == a2)
  {
LABEL_3:
    int v11 = *(_DWORD *)(v2 + 16 * v9 + 8);
LABEL_4:
    uint64_t v12 = (WTF::String *)(v11 - 1);
    uint64_t v13 = a1[7];
    uint64_t v15 = *(void *)(v13 + 72);
    uint64_t v14 = *(void *)(v13 + 80);
    v81[0] = "VideoPresentationManagerProxy";
    v81[1] = 30;
    v81[2] = "removeClientForContext";
    v81[3] = v14;
    if (*(unsigned char *)(v15 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v85, (WTF::Logger::LogSiteIdentifier *)v81);
      WTF::String::number((WTF::String *)(v11 - 1));
      *(void *)long long buf = v85;
      v83[0] = v84;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v83, &v86);
      if (!v86)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v17 = v84;
      v84 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v22 = v85;
      int v85 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v16);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      char v23 = qword_1EB357E20;
      uint64_t v24 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
      if (v24)
      {
        WTF::String::utf8();
        uint64_t v26 = v83[0] ? (char *)v83[0] + 16 : 0;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v24 = v83[0];
        v83[0] = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1) {
            uint64_t v24 = (WTF *)WTF::fastFree(v24, v25);
          }
          else {
            --*(_DWORD *)v24;
          }
        }
      }
      if (WebKit2LogFullscreen)
      {
        uint64_t v27 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v28 = *v27;
          if (v28) {
            break;
          }
          int v29 = *v27;
          atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v29, v28 | 1, memory_order_acquire, memory_order_acquire);
          if (v29 == v28)
          {
            uint64_t v30 = WTF::Logger::observers(v24);
            uint64_t v31 = *(unsigned int *)(v30 + 12);
            if (v31)
            {
              int v32 = *(uint64_t **)v30;
              uint64_t v33 = *(void *)v30 + 8 * v31;
              do
              {
                uint64_t v34 = *v32;
                *(_DWORD *)long long buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v81);
                int v88 = 0;
                WTF::String::number(v12);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v83, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v34 + 16))(v34, &WebKit2LogFullscreen, 0, v83);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v83, v35);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  uint64_t v37 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2) {
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v25);
                    }
                    else {
                      *(_DWORD *)v37 -= 2;
                    }
                  }
                }
                ++v32;
              }
              while (v32 != (uint64_t *)v33);
            }
            int v38 = 1;
            atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
            if (v38 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      id v39 = v86;
      v86 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    if (v11 > 1)
    {
      uint64_t v44 = *v3;
      if (*v3
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v3, 0), (uint64_t v44 = *v3) != 0))
      {
        int v45 = *(_DWORD *)(v44 - 8);
      }
      else
      {
        int v45 = 0;
      }
      uint64_t v46 = v82;
      unint64_t v47 = (v82 + ~(v82 << 32)) ^ ((unint64_t)(v82 + ~(v82 << 32)) >> 22);
      unint64_t v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
      unint64_t v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
      unsigned int v50 = v45 & ((v49 >> 31) ^ v49);
      uint64_t v51 = (uint64_t *)(v44 + 16 * v50);
      uint64_t v52 = *v51;
      if (*v51)
      {
        char v53 = 0;
        int v54 = 1;
        do
        {
          if (v52 == v82)
          {
            *((_DWORD *)v51 + 2) = v12;
            return;
          }
          if (v52 == -1) {
            char v53 = v51;
          }
          unsigned int v50 = (v50 + v54) & v45;
          uint64_t v51 = (uint64_t *)(v44 + 16 * v50);
          uint64_t v52 = *v51;
          ++v54;
        }
        while (*v51);
        if (v53)
        {
          *char v53 = 0;
          v53[1] = 0;
          --*(_DWORD *)(*v3 - 16);
          uint64_t v46 = v82;
          uint64_t v51 = v53;
        }
      }
      uint64_t *v51 = v46;
      *((_DWORD *)v51 + 2) = v12;
      uint64_t v55 = *v3;
      if (*v3) {
        int v56 = *(_DWORD *)(v55 - 12) + 1;
      }
      else {
        int v56 = 1;
      }
      *(_DWORD *)(v55 - 12) = v56;
      uint64_t v67 = *v3;
      if (*v3) {
        int v68 = *(_DWORD *)(v67 - 12);
      }
      else {
        int v68 = 0;
      }
      uint64_t v69 = (*(_DWORD *)(v67 - 16) + v68);
      unint64_t v70 = *(unsigned int *)(v67 - 4);
      if (v70 > 0x400)
      {
        if (v70 > 2 * v69) {
          return;
        }
      }
      else if (3 * v70 > 4 * v69)
      {
        return;
      }
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v3, v51);
      return;
    }
    uint64_t v40 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, v82)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v40 + 8);
    WebCore::VideoPresentationInterfaceIOS::setVideoPresentationModel();
    WebCore::VideoPresentationInterfaceIOS::invalidate((WebCore::VideoPresentationInterfaceIOS *)v40);
    WebKit::PlaybackSessionManagerProxy::removeClientForContext(a1[7], v82);
    uint64_t v41 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, &v82);
    int v42 = v41;
    if (*v3)
    {
      uint64_t v43 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
      if ((void *)v43 == v41) {
        goto LABEL_70;
      }
    }
    else
    {
      if (!v41)
      {
LABEL_70:
        uint64_t v58 = a1 + 8;
        uint64_t v57 = a1[8];
        if (v57)
        {
          int v59 = *(_DWORD *)(v57 - 8);
          unint64_t v60 = (v82 + ~(v82 << 32)) ^ ((unint64_t)(v82 + ~(v82 << 32)) >> 22);
          unint64_t v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
          unint64_t v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
          unsigned int v63 = v59 & ((v62 >> 31) ^ v62);
          long long v64 = (uint64_t *)(v57 + 24 * v63);
          uint64_t v65 = *v64;
          if (*v64 != v82)
          {
            int v66 = 1;
            while (v65)
            {
              unsigned int v63 = (v63 + v66) & v59;
              long long v64 = (uint64_t *)(v57 + 24 * v63);
              uint64_t v65 = *v64;
              ++v66;
              if (*v64 == v82) {
                goto LABEL_86;
              }
            }
            long long v64 = (uint64_t *)(v57 + 24 * *(unsigned int *)(v57 - 4));
          }
LABEL_86:
          if ((uint64_t *)(v57 + 24 * *(unsigned int *)(v57 - 4)) != v64)
          {
            *long long v64 = -1;
            uint64_t v71 = v64[2];
            v64[2] = 0;
            if (v71) {
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v71 + 64));
            }
            uint64_t v72 = v64[1];
            v64[1] = 0;
            if (v72) {
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v72 + 8), v42);
            }
            ++*(_DWORD *)(*v58 - 16);
            uint64_t v73 = *v58;
            if (*v58) {
              int v74 = *(_DWORD *)(v73 - 12) - 1;
            }
            else {
              int v74 = -1;
            }
            *(_DWORD *)(v73 - 12) = v74;
            uint64_t v75 = *v58;
            if (*v58)
            {
              unsigned int v76 = 6 * *(_DWORD *)(v75 - 12);
              unsigned int v77 = *(_DWORD *)(v75 - 4);
              if (v76 < v77 && v77 >= 9) {
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1 + 8, v77 >> 1, 0);
              }
            }
          }
        }
        uint64_t v79 = a1[6];
        if (v79)
        {
          uint64_t v80 = *(void *)(v79 + 8);
          if (v80)
          {
            CFRetain(*(CFTypeRef *)(v80 - 8));
            WebKit::WebPageProxy::didCleanupFullscreen((void *)(v80 - 16));
            CFRelease(*(CFTypeRef *)(v80 - 8));
          }
        }
        if (v40) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v40 + 8));
        }
        return;
      }
      uint64_t v43 = 0;
    }
    if ((void *)v43 != v41) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v41);
    }
    goto LABEL_70;
  }
  int v18 = 1;
  uint64_t v19 = *(void *)(v2 + 16 * v9);
  unsigned int v20 = v9;
  while (v19)
  {
    unsigned int v20 = (v20 + v18) & v5;
    uint64_t v19 = *(void *)(v2 + 16 * v20);
    ++v18;
    if (v19 == a2)
    {
      if (v10 == a2) {
        goto LABEL_3;
      }
      int v21 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v21) & v5;
        uint64_t v10 = *(void *)(v2 + 16 * v9);
        ++v21;
        if (v10 == a2) {
          goto LABEL_3;
        }
      }
      int v11 = 0;
      goto LABEL_4;
    }
  }
}

void sub_198D239E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22)
{
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::VideoPresentationManagerProxy::forEachSession(void *result, void *a2)
{
  int v3 = result + 8;
  uint64_t v2 = result[8];
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)result + 8);
    unint64_t v6 = result;
    unint64_t v7 = v5;
    uint64_t v8 = *v3;
    if (*v3)
    {
      uint64_t v9 = (void *)(v8 + 24 * *(unsigned int *)(v8 - 4));
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v10 = *(unsigned int *)(v8 - 12);
      if (v10)
      {
        if (v10 >> 28)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v11 = WTF::fastMalloc((WTF *)(16 * v10));
        LODWORD(v23) = v10;
        uint64_t v22 = (void *)v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    if (v9 != v6)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = v6[1];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 8));
        uint64_t v14 = v6[2];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v14 + 64));
        uint64_t v15 = (void *)(v11 + 16 * v12);
        void *v15 = v13;
        v15[1] = v14;
        while (1)
        {
          v6 += 3;
          if (v6 == v7) {
            break;
          }
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_16;
          }
        }
        unint64_t v6 = v7;
LABEL_16:
        ++v12;
      }
      while (v6 != v9);
      HIDWORD(v23) = v12;
      uint64_t v16 = v22;
      if (v12)
      {
        uint64_t v17 = 16 * v12;
        do
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v20, v16);
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v20, v21);
          uint64_t v18 = v21;
          uint64_t v21 = 0;
          if (v18) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v18 + 64));
          }
          uint64_t v19 = v20;
          uint64_t v20 = 0;
          if (v19) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 8), v5);
          }
          v16 += 2;
          v17 -= 16;
        }
        while (v17);
      }
    }
    return (void *)WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
  }
  return result;
}

void sub_198D23CEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::VideoPresentationManagerProxy::requestBitmapImageForCurrentTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4 || !*(void *)(v4 + 8)) {
    goto LABEL_13;
  }
  {
    WebKit::singleton(void)::singleton = 0;
LABEL_13:
    LOBYTE(v15[0]) = 0;
    char v16 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a3);
    return (unsigned int *)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v15);
  }
  if (!WebKit::singleton(void)::singleton) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(WebKit::singleton(void)::singleton + 8);
  if (!v5) {
    goto LABEL_13;
  }
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  WebKit::VideoPresentationManagerProxy::findInterface(a1, a2, &v14);
  unint64_t v7 = v14;
  if (v14)
  {
    uint64_t v8 = WebCore::VideoPresentationInterfaceIOS::playerIdentifier(v14);
    if (v9 && v8)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
      if (v10) {
        uint64_t v11 = v10 - 16;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void *)(*(void *)(v11 + 256) + 176);
      uint64_t v17 = v8;
      uint64_t v18 = v12;
      v15[0] = &v18;
      v15[1] = &v17;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v5, v15, a3, 0, 0, 1);
    }
    else
    {
      LOBYTE(v15[0]) = 0;
      char v16 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a3);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v15);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v7 + 8));
  }
  else
  {
    LOBYTE(v15[0]) = 0;
    char v16 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a3);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v15);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
}

void sub_198D23ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v3 + 64));
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D23FA8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(BOOL)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(BOOL)>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  uint64_t v20 = (atomic_uint *)*a2;
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  uint64_t v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

void sub_198D241CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10 && atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a10);
    WTF::fastFree(a10, a2);
  }
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

float WebKit::VideoPresentationModelContext::videoDimensions(WebKit::VideoPresentationModelContext *this)
{
  return *((float *)this + 22);
}

void WebKit::VideoPresentationManagerProxy::createLayerHostViewWithID(WKLayerHostView **a1, void *a2, uint64_t a3, unsigned int a4, float *a5)
{
  int v9 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a2, a3);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v31, v9);
  int v10 = *(WKLayerHostView **)(v31 + 40);
  *a1 = v10;
  if (v10)
  {
    CFRetain(v10);
  }
  else
  {
    int v10 = objc_alloc_init(WKLayerHostView);
    *a1 = v10;
    [(WKLayerHostView *)v10 setUserInteractionEnabled:0];
    uint64_t v11 = v31;
    if (v10) {
      CFRetain(v10);
    }
    uint64_t v12 = *(const void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    if (v12) {
      CFRelease(v12);
    }
    id v13 = objc_alloc_init(MEMORY[0x1E4F18B90]);
    uint64_t v14 = v13;
    if (v13) {
      CFRetain(v13);
    }
    m_ptr = v10->_hostingView.m_ptr;
    v10->_hostingView.m_ptr = v14;
    if (m_ptr) {
      CFRelease(m_ptr);
    }
    [(WKLayerHostView *)v10 addSubview:v14];
    unsigned int v16 = (void *)[v14 layer];
    [v16 setMasksToBounds:0];
    [v16 setName:@"WKLayerHostView layer"];
    objc_msgSend(v16, "setFrame:", 0.0, 0.0, *a5, a5[1]);
    if (v14) {
      CFRelease(v14);
    }
  }
  uint64_t v17 = a2[6];
  if (v17 && (uint64_t v18 = *(void *)(v17 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v18 - 8));
    uint64_t v19 = v18 - 16;
    uint64_t v20 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v18 + 32) + 24))
                    + 176);
    if (v20)
    {
      uint64_t v21 = (unsigned int *)(v20 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
      uint64_t v22 = *(void *)(v20 + 136);
      if (v22) {
        uint64_t v23 = (WebKit::LayerHostingContext *)*(int *)(v22 + 108);
      }
      else {
        uint64_t v23 = 0;
      }
      WebKit::LayerHostingContext::createHostingHandle(v23, a4, cf);
      int v10 = *a1;
      [(*a1)->_hostingView.m_ptr setHandle:cf[0]];
      CFTypeRef v26 = cf[0];
      cf[0] = 0;
      if (v26) {
        CFRelease(v26);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v21);
      char v24 = 0;
      goto LABEL_25;
    }
    char v24 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    char v24 = 1;
  }
  uint64_t v25 = qword_1EB358078;
  if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR))
  {
    LOWORD(cf[0]) = 0;
    _os_log_error_impl(&dword_1985F2000, v25, OS_LOG_TYPE_ERROR, "VideoPresentationManagerProxy::createLayerHostViewWithID: Unable to initialize hosting view, no GPU process", (uint8_t *)cf, 2u);
  }
LABEL_25:
  WebCore::VideoPresentationInterfaceAVKit::setupCaptionsLayer(v32, (CALayer *)[(WKLayerHostView *)v10 layer], (const WebCore::FloatSize *)a5);
  if ((v24 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  int v28 = v32;
  int v32 = 0;
  if (v28) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v28 + 8));
  }
  uint64_t v29 = v31;
  uint64_t v31 = 0;
  if (v29) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v29 + 8), v27);
  }
}

void sub_198D244A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *v12;
  const void *v12 = 0;
  if (v14) {
    CFRelease(v14);
  }
  if (a12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(a12 + 64));
  }
  if (a11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(a11 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::returningToStandbyInterface@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(this + 64);
  uint64_t v3 = *(void *)(this + 64);
  if (!v3 || !*(_DWORD *)(v3 - 12)) {
    goto LABEL_11;
  }
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(this + 64));
  uint64_t v7 = *v4;
  if (*v4)
  {
    unsigned int v8 = *(_DWORD *)(v7 - 4);
    int v9 = (uint64_t *)(v7 + 24 * v8);
  }
  else
  {
    int v9 = 0;
    unsigned int v8 = 0;
  }
  v16[0] = v4;
  v16[1] = v5;
  v16[2] = v6;
  v16[3] = v9;
  v16[4] = (uint64_t *)(v7 + 24 * v8);
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const>(v16, &v17);
  if (!v18)
  {
LABEL_10:
    this = WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v10);
LABEL_11:
    *a2 = 0;
    return this;
  }
  uint64_t v11 = 16 * v18;
  uint64_t v12 = (void *)(v17 + 8);
  while (1)
  {
    uint64_t v13 = *v12;
    uint64_t v14 = (atomic_uchar *volatile *)(*v12 + 64);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v14);
    if (*(unsigned char *)(v13 + 206)) {
      break;
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)v14);
    v12 += 2;
    v11 -= 16;
    if (!v11) {
      goto LABEL_10;
    }
  }
  *a2 = v13;
  return WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
}

void sub_198D24650(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManagerProxy::createViewWithID(void *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, float *a4@<X3>, const WebCore::FloatSize *a5@<X4>, void *a6@<X8>)
{
  v76[1] = *MEMORY[0x1E4F143B8];
  uint64_t v67 = a2;
  uint64_t v12 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v65, v12);
  WebKit::VideoPresentationManagerProxy::addClientForContext((uint64_t)a1, a2);
  WebKit::VideoPresentationManagerProxy::createLayerHostViewWithID((WKLayerHostView **)&cf, a1, a2, a3, a4);
  if (!*((void *)v65 + 8))
  {
    uint64_t v15 = a1[7];
    uint64_t v17 = *(void *)(v15 + 72);
    unsigned int v16 = *(IPC::Encoder **)(v15 + 80);
    v63[0] = (IPC::Encoder *)"VideoPresentationManagerProxy";
    v63[1] = (IPC::Encoder *)30;
    v63[2] = (IPC::Encoder *)"createViewWithID";
    v63[3] = v16;
    if (*(unsigned char *)(v17 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v63);
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v69, ", Creating AVPlayerLayerView");
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
      uint64_t v19 = v69;
      uint64_t v69 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = v70;
      unint64_t v70 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      uint64_t v21 = v71;
      uint64_t v71 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v18);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = qword_1EB357E20;
      uint64_t v23 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
      if (v23)
      {
        WTF::String::utf8();
        uint64_t v25 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v23 = v68[0];
        v68[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1) {
            uint64_t v23 = (WTF *)WTF::fastFree(v23, v24);
          }
          else {
            --*(_DWORD *)v23;
          }
        }
      }
      if (WebKit2LogFullscreen)
      {
        CFTypeRef v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v27 = *v26;
          if (v27) {
            break;
          }
          int v28 = *v26;
          atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
          if (v28 == v27)
          {
            uint64_t v29 = WTF::Logger::observers(v23);
            uint64_t v30 = *(unsigned int *)(v29 + 12);
            if (v30)
            {
              uint64_t v31 = *(uint64_t **)v29;
              uint64_t v32 = *(void *)v29 + 8 * v30;
              do
              {
                uint64_t v33 = *v31;
                *(_DWORD *)long long buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v63);
                int v74 = 0;
                WTF::LogArgument<void const*>::toString();
                int v75 = 0;
                WTF::String::String((WTF::String *)v76, ", Creating AVPlayerLayerView");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v33 + 16))(v33, &WebKit2LogFullscreen, 0, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v34);
                for (uint64_t i = 40; i != -8; i -= 16)
                {
                  int v36 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2) {
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v24);
                    }
                    else {
                      *(_DWORD *)v36 -= 2;
                    }
                  }
                }
                ++v31;
              }
              while (v31 != (uint64_t *)v32);
            }
            int v37 = 1;
            atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
            if (v37 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v13 = v72;
      uint64_t v72 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          uint64_t v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v24);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    double v38 = *a4;
    double v39 = a4[1];
    uint64_t v40 = objc_msgSend((id)WebCore::allocWebAVPlayerLayerViewInstance(v13), "initWithFrame:", 0.0, 0.0, v38, v39);
    WebKit::VideoPresentationModelContext::setVideoDimensions((uint64_t)v65, a5);
    uint64_t v41 = (void *)[v40 layer];
    int v42 = v41;
    if (v41) {
      CFRetain(v41);
    }
    WebCore::FloatSize::operator CGSize();
    objc_msgSend(v42, "setVideoDimensions:");
    [v42 setPresentationModel:v65];
    uint64_t v43 = (void *)cf;
    objc_msgSend(v42, "setVideoSublayer:", objc_msgSend((id)cf, "layer"));
    [v40 addSubview:v43];
    [v40 setUserInteractionEnabled:0];
    if (!objc_msgSend((id)objc_msgSend(v43, "layer"), "superlayer")) {
      objc_msgSend(v42, "addSublayer:", objc_msgSend(v43, "layer"));
    }
    uint64_t v44 = -[WKVideoView initWithFrame:playerView:]([WKVideoView alloc], "initWithFrame:playerView:", v40, 0.0, 0.0, v38, v39);
    int v45 = v65;
    uint64_t v46 = (const void *)*((void *)v65 + 6);
    *((void *)v65 + 6) = v42;
    if (v46)
    {
      CFRelease(v46);
      int v42 = (void *)*((void *)v45 + 6);
    }
    WebCore::FloatSize::operator CGSize();
    objc_msgSend(v42, "setVideoDimensions:");
    unint64_t v47 = v65;
    if (v40) {
      CFRetain(v40);
    }
    unint64_t v48 = (const void *)*((void *)v47 + 7);
    *((void *)v47 + 7) = v40;
    if (v48) {
      CFRelease(v48);
    }
    unint64_t v49 = v65;
    if (v44) {
      CFRetain(v44);
    }
    unsigned int v50 = (const void *)*((void *)v49 + 8);
    *((void *)v49 + 8) = v44;
    if (v50) {
      CFRelease(v50);
    }
    if (v44) {
      CFRelease(v44);
    }
    if (v40) {
      CFRelease(v40);
    }
  }
  uint64_t v51 = a1[6];
  if (v51)
  {
    uint64_t v52 = *(void *)(v51 + 8);
    if (v52)
    {
      uint64_t v53 = *(void *)(v52 + 240);
      uint64_t v54 = *(void *)(*(void *)(v52 + 16) + 1928);
      uint64_t v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v55 = 1533;
      *((void *)v55 + 1) = v54;
      *((void *)v55 + 66) = (char *)v55 + 16;
      *((void *)v55 + 67) = 512;
      *((void *)v55 + 68) = 0;
      *((void *)v55 + 70) = 0;
      *((void *)v55 + 69) = 0;
      IPC::Encoder::encodeHeader(v55);
      v63[0] = v55;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v55, &v67);
      IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v55, (float *)a5);
      buf[0] = 0;
      LOBYTE(v74) = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v53, v63, 0, (uint64_t)buf, 1);
      if ((_BYTE)v74)
      {
        uint64_t v56 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
      uint64_t v57 = v63[0];
      v63[0] = 0;
      if (v57)
      {
        IPC::Encoder::~Encoder(v57, v14);
        WTF::fastFree(v61, v62);
      }
    }
  }
  uint64_t v58 = (const void *)*((void *)v65 + 8);
  *a6 = v58;
  if (v58) {
    CFRetain(v58);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v59 = v66;
  uint64_t v66 = 0;
  if (v59) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v59 + 64));
  }
  unint64_t v60 = v65;
  uint64_t v65 = 0;
  if (v60) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*((atomic_uchar **)v60 + 1), v14);
  }
}

void sub_198D24CB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,char a31)
{
  int v33 = 1;
  atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
  if (v33 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a21) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(a21 + 64));
  }
  if (a20) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(a20 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::setupFullscreenWithID(uint64_t a1, uint64_t a2, unsigned int a3, const FloatRect *a4, float *a5, float *a6, unsigned int a7, BOOL a8, BOOL a9, BOOL a10)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 48);
  if (!v10 || !*(void *)(v10 + 8)) {
    return;
  }
  uint64_t v19 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((void *)a1, a2);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v41, v19);
  if ((*((_DWORD *)v42 + 39) | 4) == 4) {
    WebKit::VideoPresentationManagerProxy::addClientForContext(a1, a2);
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (*a6 > 0.0)
    {
      float v20 = a6[1];
      if (v20 > 0.0) {
        *(float *)(a1 + 40) = 100.0 / (float)(*a6 / v20);
      }
    }
    WebKit::VideoPresentationManagerProxy::requestVideoContentLayer(*(IPC::Encoder **)(a1 + 48), a2);
    goto LABEL_35;
  }
  if (a7 < 8)
  {
    if (!*(void *)(v41 + 64))
    {
      WebKit::VideoPresentationManagerProxy::createViewWithID((void *)a1, a2, a3, a5, (const WebCore::FloatSize *)a6, &cf);
      if (cf) {
        CFRelease(cf);
      }
    }
    uint64_t v22 = *(const void **)(v41 + 40);
    if (v22)
    {
      *(void *)uint64_t v43 = *(void *)(v41 + 40);
      CFRetain(v22);
    }
    else
    {
      WebKit::VideoPresentationManagerProxy::createLayerHostViewWithID((WKLayerHostView **)v43, (void *)a1, a2, a3, a5);
    }
    uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v23) {
      uint64_t v24 = v23 - 16;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(void *)(v24 + 40);
    if (v25) {
      uint64_t v26 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 584))(v26);
    if (v27) {
      [*(id *)v43 setVisibilityPropagationView:v27];
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v28) {
      uint64_t v29 = v28 - 16;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = *(void *)(v29 + 232);
    if (!*(unsigned char *)(v30 + 36))
    {
      uint64_t v31 = *(void *)(*(void *)(v30 + 72) + 8);
      if (v31 && (uint64_t v32 = *(void *)(v31 + 8)) != 0) {
        int v33 = *(UIView **)(v32 + 48);
      }
      else {
        int v33 = 0;
      }
      WebCore::VideoPresentationInterfaceAVKit::setupFullscreen(v42, *(UIView **)(v41 + 40), a4, (const WebCore::FloatSize *)a6, v33, a7, a8, a9, a10);
      if (*(void *)v43) {
        CFRelease(*(CFTypeRef *)v43);
      }
      goto LABEL_35;
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x198D251ECLL);
  }
  int v36 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)&v43[4] = "void WebKit::VideoPresentationManagerProxy::setupFullscreenWithID(PlaybackSessionContextIdentif"
                         "ier, WebKit::LayerHostingContextID, const WebCore::FloatRect &, const WebCore::FloatSize &, con"
                         "st WebCore::FloatSize &, float, HTMLMediaElementEnums::VideoFullscreenMode, BOOL, BOOL, BOOL)";
    _os_log_fault_impl(&dword_1985F2000, v36, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 915: Invalid message dispatched %{public}s", v43, 0xCu);
  }
  uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 8);
  if (v37) {
    uint64_t v38 = v37 - 16;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = *(void *)(*(void *)(v38 + 256) + 144);
  if (!v39)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  *(unsigned char *)(v39 + 98) = 1;
LABEL_35:
  uint64_t v34 = v42;
  int v42 = 0;
  if (v34) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v34 + 8));
  }
  uint64_t v35 = v41;
  uint64_t v41 = 0;
  if (v35) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v35 + 8), v21);
  }
}

void sub_198D25254(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(a12 + 64));
  }
  if (a11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(a11 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

char *WebKit::VideoPresentationManagerProxy::setPlayerIdentifier(char *result, uint64_t a2)
{
  if (!result[32])
  {
    uint64_t result = WebKit::VideoPresentationManagerProxy::findInterface((uint64_t)result, a2, &v3);
    uint64_t v2 = v3;
    if (v3)
    {
      WebCore::VideoPresentationInterfaceAVKit::setPlayerIdentifier();
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v2 + 64));
    }
  }
  return result;
}

void sub_198D25310(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v1 + 64));
  _Unwind_Resume(a1);
}

char *WebKit::VideoPresentationManagerProxy::setHasVideo(char *result, uint64_t a2)
{
  if (!result[32])
  {
    uint64_t result = WebKit::VideoPresentationManagerProxy::findInterface((uint64_t)result, a2, &v3);
    uint64_t v2 = v3;
    if (v3)
    {
      WebCore::VideoPresentationInterfaceAVKit::hasVideoChanged(v3);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v2 + 8));
    }
  }
  return result;
}

void sub_198D25378(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v1 + 64));
  _Unwind_Resume(a1);
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::setVideoDimensions(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((void *)a1, a2);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v11, v5);
  uint64_t result = (atomic_uchar *)WebKit::VideoPresentationModelContext::setVideoDimensions((uint64_t)v11, (const WebCore::FloatSize *)a3);
  if (*(unsigned char *)(a1 + 32))
  {
    if (*a3 > 0.0)
    {
      float v8 = a3[1];
      if (v8 > 0.0) {
        *(float *)(a1 + 40) = 100.0 / (float)(*a3 / v8);
      }
    }
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v9 + 64));
  }
  uint64_t v10 = v11;
  uint64_t v11 = 0;
  if (v10) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*((atomic_uchar **)v10 + 1), v7);
  }
  return result;
}

void sub_198D25430(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(a10 + 64));
  }
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(a9 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::enterFullscreen(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WebKit::VideoPresentationManagerProxy::didEnterFullscreen((void *)a1, a2, (float *)(a1 + 36));
  }
  else
  {
    uint64_t v4 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((void *)a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 64));
    MEMORY[0x199739180](v4);
    uint64_t v5 = (void *)(a1 + 64);
    unsigned int v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 64));
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    if (*v5) {
      uint64_t v10 = *v5 + 24 * *(unsigned int *)(*v5 - 4);
    }
    else {
      uint64_t v10 = 0;
    }
    if ((void *)v10 != v6)
    {
      do
      {
        if (*v7 != a2)
        {
          uint64_t v11 = (WebCore::VideoPresentationInterfaceIOS *)v7[2];
          if ((*((_DWORD *)v11 + 39) & *(_DWORD *)(v4 + 156)) != 0) {
            WebCore::VideoPresentationInterfaceIOS::requestHideAndExitFullscreen(v11);
          }
        }
        while (1)
        {
          v7 += 3;
          if (v7 == v9) {
            break;
          }
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v7 = v9;
LABEL_16:
        ;
      }
      while (v7 != (void *)v10);
    }
    if (v4)
    {
      uint64_t v12 = *(atomic_uchar **)(v4 + 64);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v12);
    }
  }
}

void sub_198D255A8(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::exitFullscreen(WebKit::VideoPresentationManagerProxy *this, uint64_t a2, uint64_t *a3, float a4, float a5, float a6, float a7)
{
  v25.m_location.m_x = a4;
  v25.m_location.m_y = a5;
  v25.m_size.m_width = a6;
  v25.m_size.m_height = a7;
  uint64_t v8 = *((void *)this + 6);
  if (!v8 || !*(void *)(v8 + 8) || (uint64_t v10 = *((void *)this + 8)) == 0)
  {
LABEL_13:
    uint64_t v22 = a3;
LABEL_14:
    return (atomic_uchar *)WTF::CompletionHandler<void ()(BOOL)>::operator()(v22);
  }
  int v12 = *(_DWORD *)(v10 - 8);
  unint64_t v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  uint64_t v17 = *(void *)(v10 + 24 * v16);
  if (v17 != a2)
  {
    int v18 = 1;
    while (v17)
    {
      unsigned int v16 = (v16 + v18) & v12;
      uint64_t v17 = *(void *)(v10 + 24 * v16);
      ++v18;
      if (v17 == a2) {
        goto LABEL_8;
      }
    }
    goto LABEL_13;
  }
LABEL_8:
  if (WebKit::VideoPresentationManagerProxy::hasMode(this, 1))
  {
    uint64_t v19 = *((void *)this + 6);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 8);
      if (v20) {
        uint64_t v21 = v20 - 16;
      }
      else {
        uint64_t v21 = 0;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    (*(void (**)(void))(**(void **)(v21 + 104) + 32))(*(void *)(v21 + 104));
  }
  if (*((unsigned char *)this + 32))
  {
    WebKit::VideoPresentationManagerProxy::returnVideoContentLayer(*((IPC::Encoder **)this + 6), a2);
    uint64_t v22 = a3;
    goto LABEL_14;
  }
  uint64_t v24 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(this, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v24 + 8);
  WebCore::VideoPresentationInterfaceIOS::exitFullscreen((WebCore::VideoPresentationInterfaceIOS *)v24, &v25);
  uint64_t result = (atomic_uchar *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
  if (v24) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v24 + 8));
  }
  return result;
}

void sub_198D2577C(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::exitFullscreenWithoutAnimationToMode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3 >= 8)
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      int v12 = "void WebKit::VideoPresentationManagerProxy::exitFullscreenWithoutAnimationToMode(PlaybackSessionContextIdent"
            "ifier, WebCore::HTMLMediaElementEnums::VideoFullscreenMode)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 1042: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 256) + 144);
    if (v10) {
      *(unsigned char *)(v10 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    char v4 = a3;
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v5 = *(IPC::Encoder **)(a1 + 48);
      WebKit::VideoPresentationManagerProxy::fullscreenModeChanged(v5, a2, a3);
    }
    else
    {
      unsigned int v6 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((void *)a1, a2)[1];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6 + 8);
      WebCore::VideoPresentationInterfaceIOS::exitFullscreenWithoutAnimationToMode((WebCore::VideoPresentationInterfaceIOS *)v6);
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v6 + 8));
      }
      WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange((WebKit::VideoPresentationManagerProxy *)a1, (v4 & 2) != 0);
    }
  }
}

void sub_198D2595C(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::setVideoFullscreenMode(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a3 >= 8)
  {
    unsigned int v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v10 = 136446210;
      int v11 = "void WebKit::VideoPresentationManagerProxy::setVideoFullscreenMode(PlaybackSessionContextIdentifier, WebCore"
            "::HTMLMediaElementEnums::VideoFullscreenMode)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 1056: Invalid message dispatched %{public}s", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v7 = *(void *)(a1[6] + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(*(void *)(v8 + 256) + 144);
    if (v9) {
      *(unsigned char *)(v9 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    char v4 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 8);
    WebCore::VideoPresentationInterfaceIOS::setMode((WebCore::VideoPresentationInterfaceIOS *)v4);
    if (v4)
    {
      uint64_t v5 = (atomic_uchar *)*((void *)v4 + 8);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v5);
    }
  }
}

void sub_198D25AE8(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::clearVideoFullscreenMode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a3 >= 8)
  {
    char v4 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = "void WebKit::VideoPresentationManagerProxy::clearVideoFullscreenMode(PlaybackSessionContextIdentifier, WebCor"
           "e::HTMLMediaElementEnums::VideoFullscreenMode)";
      _os_log_fault_impl(&dword_1985F2000, v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 1063: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
    }
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(*(void *)(v6 + 256) + 144);
    if (v7) {
      *(unsigned char *)(v7 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::setInlineRect(atomic_uchar *result, uint64_t a2, const FloatRect *a3)
{
  if (!result[32])
  {
    char v4 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(result, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 8);
    uint64_t result = (atomic_uchar *)WebCore::VideoPresentationInterfaceIOS::setInlineRect((WebCore::VideoPresentationInterfaceIOS *)v4, a3);
    if (v4)
    {
      uint64_t v5 = (atomic_uchar *)*((void *)v4 + 8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v5);
    }
  }
  return result;
}

void sub_198D25C80(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::setHasVideoContentLayer(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (a3)
    {
      WebKit::VideoPresentationManagerProxy::enterFullscreen(a1, a2);
    }
    else
    {
      WebKit::VideoPresentationManagerProxy::didExitFullscreen(a1, a2);
    }
  }
  else
  {
    uint64_t v3 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((void *)a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 8);
    WebCore::VideoPresentationInterfaceIOS::setHasVideoContentLayer((WebCore::VideoPresentationInterfaceIOS *)v3);
    if (v3)
    {
      char v4 = (atomic_uchar *)*((void *)v3 + 8);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v4);
    }
  }
}

void sub_198D25D54(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::cleanupFullscreen(WebKit::VideoPresentationManagerProxy *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 32))
  {
    WebKit::VideoPresentationManagerProxy::didCleanupFullscreen(a1, a2);
  }
  else
  {
    uint64_t v2 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2 + 8);
    WebCore::VideoPresentationInterfaceIOS::cleanupFullscreen((WebCore::VideoPresentationInterfaceIOS *)v2);
    if (v2)
    {
      uint64_t v3 = (atomic_uchar *)*((void *)v2 + 8);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v3);
    }
  }
}

void sub_198D25DFC(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::preparedToReturnToInline(atomic_uchar *result, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  v13.m_location.m_x = a4;
  v13.m_location.m_y = a5;
  v13.m_size.m_width = a6;
  v13.m_size.m_height = a7;
  uint64_t v7 = *((void *)result + 6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      int v11 = result;
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 88) + 32))(*(void *)(v8 + 88), v8 - 16);
      if (!v11[32])
      {
        uint64_t v12 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(v11, a2)[1];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v12 + 8);
        uint64_t result = (atomic_uchar *)WebCore::VideoPresentationInterfaceIOS::preparedToReturnToInline((WebCore::VideoPresentationInterfaceIOS *)v12, a3, &v13);
        if (v12) {
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v12 + 8));
        }
      }
    }
  }
  return result;
}

void sub_198D25ED0(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::preparedToExitFullscreen(atomic_uchar *result, uint64_t a2)
{
  if (!result[32])
  {
    uint64_t v2 = (atomic_uchar *volatile *)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(result, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2 + 8);
    uint64_t result = (atomic_uchar *)WebCore::VideoPresentationInterfaceIOS::preparedToExitFullscreen((WebCore::VideoPresentationInterfaceIOS *)v2);
    if (v2)
    {
      uint64_t v3 = (atomic_uchar *)*((void *)v2 + 8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v3);
    }
  }
  return result;
}

void sub_198D25F58(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::textTrackRepresentationUpdate(void *a1, uint64_t a2)
{
  WebCore::ShareableBitmap::create();
  uint64_t result = (uint64_t)v8;
  if (!v8) {
    return result;
  }
  WebCore::ShareableBitmap::createPlatformImage();
  uint64_t v5 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 64));
  if (cf) {
    CFRetain(cf);
  }
  WebCore::VideoFullscreenCaptions::setTrackRepresentationImage();
  if (cf)
  {
    CFRelease(cf);
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v5) {
LABEL_6:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v5 + 64));
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v8, v6);
}

void sub_198D2604C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, WTF *a12)
{
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a12, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetContentsScale(void *a1, uint64_t a2, float a3)
{
  uint64_t v4 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 64));
  uint64_t result = (atomic_uchar *)WebCore::VideoFullscreenCaptions::setTrackRepresentationContentsScale((WebCore::VideoFullscreenCaptions *)(v4 + 32), a3);
  if (v4)
  {
    uint64_t v6 = *(atomic_uchar **)(v4 + 64);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v6);
  }
  return result;
}

void sub_198D2612C(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetHidden(void *a1, uint64_t a2)
{
  uint64_t v2 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 64));
  uint64_t result = (atomic_uchar *)WebCore::VideoFullscreenCaptions::setTrackRepresentationHidden((WebCore::VideoFullscreenCaptions *)(v2 + 32));
  if (v2)
  {
    uint64_t v4 = *(atomic_uchar **)(v2 + 64);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v4);
  }
  return result;
}

void sub_198D261B8(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::playerViewController(uint64_t a1, uint64_t a2)
{
  WebKit::VideoPresentationManagerProxy::findInterface(a1, a2, &v5);
  uint64_t v2 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v3 = WebCore::VideoPresentationInterfaceAVKit::avPlayerViewController(v5);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((atomic_uchar **)v2 + 8));
  return v3;
}

void sub_198D26224(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v1 + 64));
  _Unwind_Resume(a1);
}

void sub_198D26644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198D266D8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c73_ZTSKZ60__WKContactPicker_presentWithRequestData_completionHandler__E3__7(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c73_ZTSKZ60__WKContactPicker_presentWithRequestData_completionHandler__E3__7(uint64_t a1)
{
}

void sub_198D2679C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198D268B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_198D26ACC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198D26B7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D26EC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  uint64_t v22 = *(WTF::StringImpl **)(v19 - 96);
  *(void *)(v19 - 96) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 32, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 16, v23);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v24);
  _Unwind_Resume(a1);
}

void sub_198D2705C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18)
{
  objc_destroyWeak(v19);
  if (cf) {
    CFRelease(cf);
  }
  objc_destroyWeak(v18);
  _Unwind_Resume(a1);
}

void sub_198D27134(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c52_ZTSKZ39__WKContactPicker_dismissWithContacts__E3__8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a1 + 40;
  *(void *)(a1 + 32) = v3;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(v4 + 8) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198D27194(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c52_ZTSKZ39__WKContactPicker_dismissWithContacts__E3__8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }

  objc_destroyWeak((id *)(a1 + 40));
}

void sub_198D2765C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D27A4C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::createItemRecursive(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)a1 + 29)];
  uint64_t v7 = *((unsigned int *)a1 + 29);
  if (v7)
  {
    uint64_t v8 = *((void *)a1 + 13);
    uint64_t v9 = 120 * v7;
    do
    {
      WebKit::createItemRecursive(&v61, v8, a2);
      uint64_t v10 = v61;
      if (v61)
      {
        [v6 addObject:v61];
        CFRelease(v10);
      }
      v8 += 120;
      v9 -= 120;
    }
    while (v9);
  }
  LODWORD(v61) = (*(float (**)(void, unsigned __int8 *))(*(void *)*a2 + 16))(*a2, a1 + 88);
  HIDWORD(v61) = v11;
  int v62 = v13;
  int v63 = v14;
  int v15 = *((_DWORD *)a1 + 20);
  if (v15 == -1) {
    uint64_t v16 = -1;
  }
  else {
    uint64_t v16 = *((unsigned int *)a1 + 20);
  }
  switch(v16)
  {
    case 1:
      if (v15 != 1) {
        goto LABEL_61;
      }
      uint64_t v21 = (WebKit *)WebCore::FloatRect::operator CGRect();
      double v23 = v22;
      double v25 = v24;
      double v27 = v26;
      double v29 = v28;
      if (a1[72])
      {
        id v30 = objc_alloc((Class)WebKit::getWKTextExtractionEditableClass(v21));
        if (!a1[72]) {
          goto LABEL_62;
        }
        uint64_t v31 = v30;
        if (*((void *)a1 + 6))
        {
          uint64_t v32 = (__CFString *)WTF::StringImpl::operator NSString *();
          if (!a1[72]) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v32 = &stru_1EEA10550;
        }
        if (*((void *)a1 + 7))
        {
          int v33 = (__CFString *)WTF::StringImpl::operator NSString *();
          if (!a1[72]) {
            goto LABEL_62;
          }
        }
        else
        {
          int v33 = &stru_1EEA10550;
        }
        uint64_t v34 = (const void *)[v31 initWithLabel:v32 placeholder:v33 isSecure:a1[64] isFocused:a1[65]];
      }
      else
      {
        uint64_t v34 = 0;
      }
      if (!a1[32]) {
        goto LABEL_41;
      }
      uint64_t v48 = *((void *)a1 + 2);
      unint64_t v49 = *((void *)a1 + 5);
      if (v49) {
        unint64_t v49 = *(unsigned int *)(v49 + 4);
      }
      if (*((void *)a1 + 3) + v48 <= v49)
      {
        uint64_t v60 = *((void *)a1 + 3);
      }
      else
      {
LABEL_41:
        uint64_t v60 = 0;
        uint64_t v48 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unsigned int v50 = (WebKit *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)a1 + 3)];
      uint64_t v51 = v50;
      uint64_t v52 = *((unsigned int *)a1 + 3);
      if (v52)
      {
        uint64_t v53 = *(void *)a1;
        uint64_t v54 = 56 * v52;
        do
        {
          unint64_t v55 = *((void *)a1 + 5);
          if (v55) {
            unint64_t v55 = *(unsigned int *)(v55 + 4);
          }
          if (*(void *)(v53 + 48) + *(void *)(v53 + 40) <= v55)
          {
            id v56 = objc_alloc((Class)WebKit::getWKTextExtractionLinkClass(v50));
            unsigned int v50 = (WebKit *)objc_msgSend(v56, "initWithURL:range:", WTF::URL::operator NSURL *(), *(void *)(v53 + 40), *(void *)(v53 + 48));
            uint64_t v57 = v50;
            if (v50)
            {
              [(WebKit *)v51 addObject:v50];
              CFRelease(v57);
            }
          }
          v53 += 56;
          v54 -= 56;
        }
        while (v54);
      }
      id v58 = objc_alloc((Class)WebKit::getWKTextExtractionTextItemClass(v50));
      if (*((void *)a1 + 5)) {
        uint64_t v59 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v59 = &stru_1EEA10550;
      }
      uint64_t v47 = objc_msgSend(v58, "initWithContent:selectedRange:links:editable:rectInWebView:children:", v59, v48, v60, v51, v34, v6, v23, v25, v27, v29);
      if (v51) {
        CFRelease(v51);
      }
      if (v34) {
        CFRelease(v34);
      }
      goto LABEL_32;
    case 2:
      if (v15 != 2) {
        goto LABEL_61;
      }
      id v35 = objc_alloc((Class)WebKit::getWKTextExtractionScrollableItemClass(v12));
      WebCore::FloatSize::operator CGSize();
      double v37 = v36;
      double v39 = v38;
      WebCore::FloatRect::operator CGRect();
      uint64_t v20 = objc_msgSend(v35, "initWithContentSize:rectInWebView:children:", v6, v37, v39, v40, v41, v42, v43);
      goto LABEL_31;
    case 3:
      if (v15 != 3) {
        goto LABEL_61;
      }
      id v44 = objc_alloc((Class)WebKit::getWKTextExtractionImageItemClass(v12));
      if (*(void *)a1) {
        int v45 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        int v45 = &stru_1EEA10550;
      }
      if (*((void *)a1 + 1)) {
        uint64_t v46 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v46 = &stru_1EEA10550;
      }
      WebCore::FloatRect::operator CGRect();
      uint64_t v20 = objc_msgSend(v44, "initWithName:altText:rectInWebView:children:", v45, v46, v6);
      goto LABEL_31;
    default:
      if (v15)
      {
LABEL_61:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_62:
        __break(1u);
      }
      else
      {
        int v17 = *a1;
        id v18 = objc_alloc((Class)WebKit::getWKTextExtractionContainerItemClass(v12));
        WebCore::FloatRect::operator CGRect();
        if (((v17 - 1) & 0xF8) != 0) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = (v17 - 1) + 1;
        }
        uint64_t v20 = objc_msgSend(v18, "initWithContainer:rectInWebView:children:", v19, v6);
LABEL_31:
        uint64_t v47 = v20;
LABEL_32:
        *a3 = v47;
        if (v6) {
          CFRelease(v6);
        }
      }
      return;
  }
}

void sub_198D27F7C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D28100(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationModelContext::hasVideo(WebKit::VideoPresentationModelContext *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v5 + 64));
        }
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), a2);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(*a2 + 8));
  *a1 = v4;
  uint64_t v5 = a2[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 64));
  a1[1] = v5;
  return a1;
}

void sub_198D286B0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

Class initCNContactPickerViewController(void)
{
  if ((byte_1E93CF689 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/Frameworks/ContactsUI.framework/ContactsUI", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198D28738);
    }
    unk_1E93CF6A0 = v1;
    byte_1E93CF689 = 1;
  }
  Class result = objc_getClass("CNContactPickerViewController");
  qword_1E93CF698 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getCNContactPickerViewControllerClass = CNContactPickerViewControllerFunction;
  return result;
}

uint64_t CNContactPickerViewControllerFunction(void)
{
  return qword_1E93CF698;
}

Class initCNContactFormatter(void)
{
  if ((byte_1E93CF68A & 1) == 0)
  {
    unk_1E93CF6B0 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1E93CF68A = 1;
  }
  Class result = objc_getClass("CNContactFormatter");
  qword_1E93CF6A8 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198D287FCLL);
  }
  getCNContactFormatterClass = CNContactFormatterFunction;
  return result;
}

uint64_t CNContactFormatterFunction(void)
{
  return qword_1E93CF6A8;
}

uint64_t ___ZL15ContactsLibraryv_block_invoke_0()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  if (!result)
  {
    uint64_t result = 47;
    __break(0xC471u);
  }
  return result;
}

Class initCNMutableContact(void)
{
  if ((byte_1E93CF68A & 1) == 0)
  {
    unk_1E93CF6B0 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1E93CF68A = 1;
  }
  Class result = objc_getClass("CNMutableContact");
  qword_1E93CF6B8 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198D288D8);
  }
  off_1EC2B20C8 = CNMutableContactFunction;
  return result;
}

uint64_t CNMutableContactFunction(void)
{
  return qword_1E93CF6B8;
}

Class initCNLabeledValue(void)
{
  if ((byte_1E93CF68A & 1) == 0)
  {
    unk_1E93CF6B0 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1E93CF68A = 1;
  }
  Class result = objc_getClass("CNLabeledValue");
  qword_1E93CF6C0 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198D2896CLL);
  }
  _MergedGlobals_119 = CNLabeledValueFunction;
  return result;
}

uint64_t CNLabeledValueFunction(void)
{
  return qword_1E93CF6C0;
}

Class initCNPhoneNumber(void)
{
  if ((byte_1E93CF68A & 1) == 0)
  {
    unk_1E93CF6B0 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1E93CF68A = 1;
  }
  Class result = objc_getClass("CNPhoneNumber");
  qword_1E93CF6C8 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198D28A00);
  }
  off_1EC2B20C0 = CNPhoneNumberFunction;
  return result;
}

uint64_t CNPhoneNumberFunction(void)
{
  return qword_1E93CF6C8;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v5 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9D0488;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v5;
  *(unsigned char *)(v8 + 24) = v6;
  uint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

void sub_198D28C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::setVideoDimensions(WebCore::FloatSize const&)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 56))(a2, *(void *)(a1 + 8));
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect>(WTF::Logger::LogSiteIdentifier *a1, WebCore::FloatRect *a2)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v26, a1);
  WebCore::FloatRect::toJSONString((uint64_t *)&v25, a2);
  *(void *)long long buf = v26;
  v24[0] = v25;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v24, &v27);
  if (v27)
  {
    BOOL v5 = v25;
    double v25 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    BOOL v6 = v26;
    double v26 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    int v7 = qword_1EB357E20;
    uint64_t v8 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      WTF::String::utf8();
      uint64_t v10 = v24[0] ? (char *)v24[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v8 = v24[0];
      v24[0] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1) {
          uint64_t v8 = (WTF *)WTF::fastFree(v8, v9);
        }
        else {
          --*(_DWORD *)v8;
        }
      }
    }
    if (WebKit2LogFullscreen)
    {
      int v11 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v12 = *v11;
        if (v12) {
          break;
        }
        int v13 = *v11;
        atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v13, v12 | 1, memory_order_acquire, memory_order_acquire);
        if (v13 == v12)
        {
          uint64_t v14 = WTF::Logger::observers(v8);
          uint64_t v15 = *(unsigned int *)(v14 + 12);
          if (v15)
          {
            uint64_t v16 = *(uint64_t **)v14;
            uint64_t v17 = *(void *)v14 + 8 * v15;
            do
            {
              uint64_t v18 = *v16;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], a1);
              int v29 = 1;
              WebCore::FloatRect::toJSONString(v30, a2);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v24, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v18 + 16))(v18, &WebKit2LogFullscreen, 0, v24);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v19);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v21 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2) {
                    WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
                  }
                  else {
                    *(_DWORD *)v21 -= 2;
                  }
                }
              }
              ++v16;
            }
            while (v16 != (uint64_t *)v17);
          }
          int v22 = 1;
          atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v27;
    double v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198D29004(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::FloatSize *a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v30, this);
  WebCore::FloatSize::toJSONString((uint64_t *)&v29, a4);
  *(void *)long long buf = v30;
  v28[0] = v29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    uint64_t v9 = v29;
    int v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v30;
    id v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = *(NSObject **)(a1 + 32);
    int v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      uint64_t v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          int v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            uint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v33 = 1;
              WebCore::FloatSize::toJSONString(v34, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                double v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198D29414(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::willEnterPictureInPicture(void)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::failedToEnterPictureInPicture(void)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::willExitPictureInPicture(void)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0550;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0550;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a2);
    if (v4 >= 0x100u && (unsigned __int8 v5 = v4, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v12), v13))
    {
      WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(v2, v5, &v12);
      uint64_t result = v12;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v6);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v11 = a2[3];
      if (v11 && v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      }
      return IPC::Connection::cancelReply<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(v2);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(v8);
  }
  return result;
}

void sub_198D297C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(uint64_t *a1)
{
  uint64_t v3 = 0;
  WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(a1, 0, &v3);
  uint64_t result = v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void sub_198D29858(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      int v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            double v25 = (uint64_t *)(v17 + 24 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (*v25);
          uint64_t v26 = v17 + 24 * v24;
          uint64_t v29 = *(void *)(v26 + 16);
          double v28 = (void *)(v26 + 16);
          uint64_t v27 = v29;
          *double v28 = 0;
          if (v29) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v27 + 64));
          }
          uint64_t v30 = *(v28 - 1);
          *(v28 - 1) = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v30 + 8), v8);
          }
          *double v25 = *v12;
          uint64_t v31 = v4 + 24 * v9;
          uint64_t v33 = *(void *)(v31 + 8);
          uint64_t v32 = (uint64_t *)(v31 + 8);
          *uint64_t v32 = 0;
          *(v28 - 1) = v33;
          uint64_t v34 = v32[1];
          v32[1] = 0;
          *double v28 = v34;
          uint64_t v35 = v32[1];
          v32[1] = 0;
          if (v35) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v35 + 64));
          }
          uint64_t v36 = *v32;
          *uint64_t v32 = 0;
          if (v36) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v36 + 8), v8);
          }
          if (v12 == a3) {
            uint64_t v10 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          uint64_t v15 = *(void *)(v14 + 16);
          *(void *)(v14 + 16) = 0;
          if (v15) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v15 + 64));
          }
          uint64_t v16 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v16) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v16 + 8), v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>::destruct(*(atomic_uchar **)a1, (atomic_uchar *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(atomic_uchar **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

atomic_uchar *WTF::VectorDestructor<true,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>::destruct(atomic_uchar *result, atomic_uchar *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (v4) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v4 + 64));
      }
      uint64_t v5 = *(void *)v3;
      *(void *)uint64_t v3 = 0;
      if (v5) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), a2);
      }
      v3 += 16;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(BOOL)::$_0,void,WTF::Observer<void ()(BOOL)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const>@<X0>(uint64_t **a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&,void>::map((uint64_t)a2, a1);
}

void sub_198D29BF8(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Mapper<WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3 = result;
  uint64_t v4 = **a2;
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 12);
    if (v5)
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v3 + 8) = v5;
      *(void *)uint64_t v3 = result;
    }
  }
  int v6 = a2[1];
  uint64_t v7 = a2[3];
  if (v6 != v7)
  {
    uint64_t v8 = a2[2];
    do
    {
      uint64_t result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v17, v6 + 1);
      uint64_t v10 = *(unsigned int *)(v3 + 12);
      int v11 = v10 + 1;
      int v12 = (void *)(*(void *)v3 + 16 * v10);
      uint64_t v13 = v17;
      uint64_t v17 = 0;
      void *v12 = v13;
      uint64_t v14 = v18;
      uint64_t v18 = 0;
      v12[1] = v14;
      *(_DWORD *)(v3 + 12) = v11;
      uint64_t v15 = v18;
      uint64_t v18 = 0;
      if (v15) {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v15 + 64));
      }
      uint64_t v16 = v17;
      uint64_t v17 = 0;
      if (v16) {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v16 + 8), v9);
      }
      while (1)
      {
        v6 += 3;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_15;
        }
      }
      int v6 = v8;
LABEL_15:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::RequestFullscreenMode>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1537;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v22 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  uint64_t v9 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v8, *(int **)(a2 + 8));
  char v10 = *(unsigned char *)(a2 + 16);
  int v11 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v12)
  {
    unsigned char *v11 = v10;
    LOBYTE(v20) = 0;
    char v21 = 0;
    uint64_t v14 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, a4, (uint64_t)&v20, 1);
    if (v21)
    {
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    uint64_t v16 = v22;
    unsigned int v22 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v13);
      WTF::fastFree(v18, v19);
    }
    return v14;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D29E60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::DidExitFullscreen>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1532;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D29FCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198D2A0D0);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return (unsigned char *)IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, (float *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198D2A0F0);
    }
    unsigned char *result = 0;
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1545;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)(a2 + 8));
  IPC::Encoder::addAttachment((uint64_t)v6, *(void *)(a2 + 16));
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_198D2A204(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t v3 = result;
  IPC::Encoder *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    uint64_t *v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *a2;
      if (*a2) {
        *v9 += 2;
      }
      *(void *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_198D2A2FC(_Unwind_Exception *exception_object, void *a2)
{
  int v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RTCNetwork::value(WebKit::RTCNetwork *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((unsigned int *)this + 3);
  if (*(void *)this) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4
    || ((v6 = *((void *)this + 2), uint64_t v7 = *((unsigned int *)this + 7), !v6) ? (v8 = v7 == 0) : (v8 = 1), !v8))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    abort();
  }
  WebKit::RTC::Network::IPAddress::rtcAddress((int *)this + 8, (uint64_t)&v41);
  MEMORY[0x19972EFA0](a2, v2, v3, v6, v7, &v41, *((unsigned int *)this + 13), *((unsigned int *)this + 14));
  *(_WORD *)(a2 + 286) = *((_WORD *)this + 30);
  *(_DWORD *)(a2 + 280) = *((_DWORD *)this + 16);
  int v10 = *((unsigned __int8 *)this + 68);
  if (*(unsigned __int8 *)(a2 + 284) != v10) {
    *(unsigned char *)(a2 + 284) = v10;
  }
  *(unsigned char *)(a2 + 268) = *((unsigned char *)this + 69);
  *(_DWORD *)(a2 + 264) = *((_DWORD *)this + 18);
  *(_OWORD *)__p = 0uLL;
  double v40 = 0;
  unint64_t v11 = *((unsigned int *)this + 23);
  if (v11)
  {
    double v43 = &v40;
    __p[0] = std::allocator<rtc::InterfaceAddress>::allocate_at_least[abi:sn180100](v11);
    __p[1] = __p[0];
    *(int64x2_t *)double v42 = vdupq_n_s64(0);
    char v13 = v40;
    double v40 = (char *)__p[0] + 32 * v12;
    *(void *)&v42[16] = v13;
    double v41 = *(char **)v42;
    std::__split_buffer<rtc::InterfaceAddress>::~__split_buffer((uint64_t)&v41);
    int v14 = *((_DWORD *)this + 23);
    if (v14)
    {
      uint64_t v15 = (int *)*((void *)this + 10);
      uint64_t v16 = &v15[6 * v14];
      do
      {
        WebKit::RTC::Network::IPAddress::rtcAddress(v15, (uint64_t)&v41);
        int v17 = *(_DWORD *)v42;
        int v36 = *(_DWORD *)v42;
        long long v37 = *(_OWORD *)&v42[4];
        int v38 = v15[5];
        if (__p[1] >= v40)
        {
          uint64_t v19 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 59) {
            goto LABEL_43;
          }
          uint64_t v21 = v40 - (char *)__p[0];
          if ((v40 - (char *)__p[0]) >> 4 > v20) {
            unint64_t v20 = v21 >> 4;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          double v43 = &v40;
          if (!v22) {
            goto LABEL_42;
          }
          int v23 = (char *)std::allocator<rtc::InterfaceAddress>::allocate_at_least[abi:sn180100](v22);
          unsigned int v24 = &v23[32 * v19];
          double v41 = v23;
          *(void *)double v42 = v24;
          *(void *)&v42[16] = &v23[32 * v25];
          if (!v23) {
            goto LABEL_42;
          }
          *(void *)unsigned int v24 = &unk_1EE9BD6E8;
          *((_DWORD *)v24 + 2) = v36;
          *(_OWORD *)(v24 + 12) = v37;
          *(void *)unsigned int v24 = &unk_1EE9D05A0;
          *((_DWORD *)v24 + 7) = v38;
          uint64_t v18 = (uint64_t)(v24 + 32);
          *(void *)&v42[8] = v24 + 32;
          uint64_t v26 = *(char **)v42;
          if (__p[1] == __p[0])
          {
            int64x2_t v29 = vdupq_n_s64((unint64_t)__p[1]);
          }
          else
          {
            uint64_t v27 = 0;
            do
            {
              double v28 = &v26[v27];
              *((void *)v28 - 4) = &unk_1EE9BD6E8;
              *((_DWORD *)v28 - 6) = *(_DWORD *)((char *)__p[1] + v27 - 24);
              *(_OWORD *)(v28 - 20) = *(_OWORD *)((char *)__p[1] + v27 - 20);
              *((void *)v28 - 4) = &unk_1EE9D05A0;
              *((_DWORD *)v28 - 1) = *(_DWORD *)((char *)__p[1] + v27 - 4);
              v27 -= 32;
            }
            while ((char *)__p[1] + v27 != __p[0]);
            int64x2_t v29 = *(int64x2_t *)__p;
            uint64_t v18 = *(void *)&v42[8];
            v26 += v27;
          }
          __p[0] = v26;
          *(int64x2_t *)double v42 = v29;
          uint64_t v30 = v40;
          double v40 = *(char **)&v42[16];
          *(void *)&v42[16] = v30;
          double v41 = (char *)v29.i64[0];
          std::__split_buffer<rtc::InterfaceAddress>::~__split_buffer((uint64_t)&v41);
        }
        else
        {
          if (!__p[1]) {
            goto LABEL_42;
          }
          *(void *)__p[1] = &unk_1EE9BD6E8;
          *((_DWORD *)__p[1] + 2) = v17;
          *(_OWORD *)((char *)__p[1] + 12) = v37;
          *(void *)__p[1] = &unk_1EE9D05A0;
          *((_DWORD *)__p[1] + 7) = v38;
          uint64_t v18 = (uint64_t)__p[1] + 32;
        }
        __p[1] = (void *)v18;
        v15 += 6;
      }
      while (v15 != v16);
    }
  }
  rtc::Network::SetIPs();
  if (__p[0])
  {
    uint64_t v31 = __p[0];
    if (__p[1] != __p[0])
    {
      uint64_t v32 = (uint64_t)__p[1] - 32;
      uint64_t v33 = (uint64_t)__p[1] - 32;
      uint64_t v34 = (void (***)(uint64_t))((char *)__p[1] - 32);
      do
      {
        uint64_t v35 = *v34;
        v34 -= 4;
        (*v35)(v33);
        v32 -= 32;
        BOOL v4 = (void *)v33 == __p[0];
        uint64_t v33 = (uint64_t)v34;
      }
      while (!v4);
      uint64_t v31 = __p[0];
    }
    operator delete(v31);
  }
}

int *WebKit::RTC::Network::IPAddress::rtcAddress@<X0>(int *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = this[4];
  if (v2 == -1) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = this[4];
  }
  if (v3 == 2)
  {
    if (v2 != 2) {
      goto LABEL_13;
    }
    *(void *)a2 = &unk_1EE9BD6E8;
    *(_DWORD *)(a2 + 8) = 30;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)this;
  }
  else
  {
    if (v3 == 1)
    {
      if (v2 == 1)
      {
        int v4 = *this;
        *(void *)a2 = &unk_1EE9BD6E8;
        *(void *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 8) = 2;
        *(_DWORD *)(a2 + 12) = v4;
        return this;
      }
LABEL_13:
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x198D2A85CLL);
    }
    if (v2) {
      goto LABEL_13;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = &unk_1EE9BD6E8;
    *(_DWORD *)(a2 + 24) = 0;
  }
  return this;
}

uint64_t WebKit::RTC::Network::SocketAddress::rtcAddress@<X0>(WebKit::RTC::Network::SocketAddress *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  rtc::SocketAddress::SocketAddress(a2);
  uint64_t result = rtc::SocketAddress::SetPort(a2);
  *((_DWORD *)a2 + 15) = *((_DWORD *)this + 1);
  if (*((void *)this + 1)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *((_DWORD *)this + 5) == 0;
  }
  if (v5)
  {
    uint64_t result = rtc::SocketAddress::SetIP();
    if (*((unsigned char *)this + 44))
    {
      WebKit::RTC::Network::IPAddress::rtcAddress((int *)this + 6, (uint64_t)v6);
      return rtc::SocketAddress::SetResolvedIP(a2, (const rtc::IPAddress *)v6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

WebKit::RTC::Network::SocketAddress *WebKit::RTC::Network::SocketAddress::SocketAddress(WebKit::RTC::Network::SocketAddress *this, const rtc::SocketAddress *a2)
{
  *(_WORD *)this = rtc::SocketAddress::port(a2);
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 15);
  char v4 = *((unsigned char *)a2 + 23);
  if (v4 >= 0) {
    BOOL v5 = (char *)a2;
  }
  else {
    BOOL v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = (WTF *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v6 = (WTF *)*((void *)a2 + 1);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)this + 8, v5, v6);
  uint64_t v7 = (char *)this + 24;
  if (rtc::SocketAddress::IsUnresolvedIP(a2))
  {
    char v8 = 0;
    *uint64_t v7 = 0;
  }
  else
  {
    uint64_t v9 = (const rtc::IPAddress *)rtc::SocketAddress::ipaddr(a2);
    WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v11, v9);
    *(_OWORD *)uint64_t v7 = v11;
    *((_DWORD *)this + 10) = v12;
    char v8 = 1;
  }
  *((unsigned char *)this + 44) = v8;
  return this;
}

uint64_t WebKit::RTC::Network::IPAddress::IPAddress(WebKit::RTC::Network::IPAddress *this, const rtc::IPAddress *a2)
{
  *((_DWORD *)this + 4) = 0;
  int v3 = *((_DWORD *)a2 + 2);
  switch(v3)
  {
    case 0:
      return (uint64_t)this;
    case 2:
      int v7 = rtc::IPAddress::ipv4_address(a2);
      if (*((_DWORD *)this + 4) != 1) {
        *((_DWORD *)this + 4) = 1;
      }
      *(_DWORD *)this = v7;
      return (uint64_t)this;
    case 30:
      uint64_t v4 = rtc::IPAddress::ipv6_address(a2);
      int v5 = *((_DWORD *)this + 4);
      *(void *)this = v4;
      *((void *)this + 1) = v6;
      if (v5 != 2) {
        *((_DWORD *)this + 4) = 2;
      }
      return (uint64_t)this;
  }
  uint64_t result = 106;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RTC::Network::IPAddress::IPAddress(uint64_t this, const sockaddr *a2)
{
  *(_DWORD *)(this + 16) = 0;
  int sa_family = a2->sa_family;
  if (a2->sa_family)
  {
    if (sa_family == 2)
    {
      *(_DWORD *)(this + 16) = -1;
      int v3 = *(_DWORD *)&a2->sa_data[2];
      *(_DWORD *)(this + 16) = 1;
      *(_DWORD *)this = v3;
    }
    else if (sa_family == 30)
    {
      *(sockaddr *)this = *(sockaddr *)&a2->sa_data[6];
      *(_DWORD *)(this + 16) = 2;
    }
    else
    {
      this = 123;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebKit::RTCPacketOptions::RTCPacketOptions(uint64_t a1, char *a2)
{
  uint64_t v4 = rtc::PacketOptions::PacketOptions((rtc::PacketOptions *)a1);
  *(_DWORD *)uint64_t v4 = *a2;
  *(void *)(v4 + 8) = *((int *)a2 + 1);
  rtc::PacketTimeUpdateParams::PacketTimeUpdateParams((rtc::PacketTimeUpdateParams *)&v24);
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 2);
  int v24 = v5;
  LODWORD(v28) = v6;
  if (v6 >= 1)
  {
    size_t v7 = *((void *)a2 + 4);
    if (v7)
    {
      if ((v7 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      char v8 = (const void *)*((void *)a2 + 3);
      uint64_t v9 = (char *)operator new(*((void *)a2 + 4));
      int v10 = &v9[v7];
      memmove(v9, v8, v7);
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 0;
    }
    if (__p)
    {
      uint64_t v26 = (char *)__p;
      operator delete(__p);
      int v5 = v24;
    }
    __p = v9;
    uint64_t v26 = v10;
    uint64_t v27 = v10;
  }
  *((void *)&v28 + 1) = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 16) = v5;
  if ((int *)(a1 + 16) != &v24)
  {
    long long v11 = *(char **)(a1 + 24);
    int v12 = (char *)__p;
    char v13 = v26;
    size_t v14 = v26 - (unsigned char *)__p;
    unint64_t v15 = *(void *)(a1 + 40);
    if (v15 - (unint64_t)v11 >= v26 - (unsigned char *)__p)
    {
      uint64_t v19 = *(unsigned char **)(a1 + 32);
      size_t v20 = v19 - v11;
      if (v19 - v11 < v14)
      {
        uint64_t v21 = (char *)__p + v20;
        if (v19 != v11)
        {
          memmove(*(void **)(a1 + 24), __p, v20);
          long long v11 = *(char **)(a1 + 32);
        }
        if (v13 != v21) {
          memmove(v11, v21, v13 - v21);
        }
        unint64_t v22 = &v11[v13 - v21];
        goto LABEL_31;
      }
      if (v26 != __p) {
        memmove(*(void **)(a1 + 24), __p, v26 - (unsigned char *)__p);
      }
LABEL_30:
      unint64_t v22 = &v11[v14];
LABEL_31:
      *(void *)(a1 + 32) = v22;
      goto LABEL_32;
    }
    if (v11)
    {
      *(void *)(a1 + 32) = v11;
      operator delete(v11);
      unint64_t v15 = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
    }
    if ((v14 & 0x8000000000000000) == 0)
    {
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v14) {
        uint64_t v16 = v14;
      }
      size_t v17 = v15 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v16;
      if ((v17 & 0x8000000000000000) == 0)
      {
        uint64_t v18 = (char *)operator new(v17);
        long long v11 = v18;
        *(void *)(a1 + 24) = v18;
        *(void *)(a1 + 32) = v18;
        *(void *)(a1 + 40) = &v18[v17];
        if (v13 != v12) {
          memcpy(v18, v12, v14);
        }
        goto LABEL_30;
      }
    }
LABEL_33:
    abort();
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v28;
  rtc::PacketTimeUpdateParams::~PacketTimeUpdateParams((rtc::PacketTimeUpdateParams *)&v24);
  return a1;
}

uint64_t WebKit::RTCPacketOptions::serializableData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2 = -1;
  switch(*(_DWORD *)this)
  {
    case 0xFFFFFFFF:
      break;
    case 8:
      char v2 = 8;
      break;
    case 0xA:
      char v2 = 10;
      break;
    case 0xC:
      char v2 = 12;
      break;
    case 0xE:
      char v2 = 14;
      break;
    case 0x10:
      char v2 = 16;
      break;
    case 0x12:
      char v2 = 18;
      break;
    case 0x14:
      char v2 = 20;
      break;
    case 0x16:
      char v2 = 22;
      break;
    case 0x18:
      char v2 = 24;
      break;
    case 0x1A:
      char v2 = 26;
      break;
    case 0x1C:
      char v2 = 28;
      break;
    case 0x1E:
      char v2 = 30;
      break;
    case 0x20:
      char v2 = 32;
      break;
    case 0x22:
      char v2 = 34;
      break;
    case 0x24:
      char v2 = 36;
      break;
    case 0x26:
      char v2 = 38;
      break;
    case 0x28:
      char v2 = 40;
      break;
    case 0x2E:
      char v2 = 46;
      break;
    case 0x30:
      char v2 = 48;
      break;
    default:
      char v2 = 0;
      break;
  }
  *(unsigned char *)a2 = v2;
  uint64_t v3 = *(void *)(this + 8);
  if (v3 != (int)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198D2ADF0);
  }
  int v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  uint64_t v5 = *(int *)(this + 48);
  *(void *)(a2 + 16) = v5;
  if ((int)v5 < 1)
  {
    uint64_t v6 = *(void *)(this + 24);
    uint64_t v7 = *(void *)(this + 32) - v6;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
  }
  else
  {
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
  }
  *(void *)(a2 + 40) = *(void *)(this + 56);
  return this;
}

unsigned int *WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(void *)a1 + 8 * v5), (WTF::StringImpl *)(*(void *)a1 + 8 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    else if (v5 > a1[2])
    {
      WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      LODWORD(v4) = a1[3];
    }
    uint64_t v6 = *(WTF::StringImpl ***)a2;
    uint64_t v7 = *(uint64_t **)a1;
    if (v4)
    {
      uint64_t v15 = 8 * v4;
      do
      {
        uint64_t v16 = v6;
        size_t v17 = v7;
        WTF::String::operator=(v7, v6);
        uint64_t v6 = v16 + 1;
        uint64_t v7 = v17 + 1;
        v15 -= 8;
      }
      while (v15);
      uint64_t v6 = *(WTF::StringImpl ***)a2;
      unsigned int v8 = a1[3];
      uint64_t v7 = *(uint64_t **)a1;
    }
    else
    {
      unsigned int v8 = 0;
    }
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v8 != v9)
    {
      int v10 = &v7[v8];
      long long v11 = &v6[v8];
      uint64_t v12 = 8 * v9 - 8 * v8;
      do
      {
        char v13 = *v11;
        if (*v11) {
          *(_DWORD *)v13 += 2;
        }
        *v10++ = (uint64_t)v13;
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    a1[3] = v9;
  }
  return a1;
}

uint64_t WebKit::FrameState::stateForFrameID(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(result + 48)
    || (*(void *)(result + 32) == a2 ? (BOOL v5 = *(void *)(result + 40) == a3) : (BOOL v5 = 0), !v5))
  {
    uint64_t v6 = *(unsigned int *)(result + 228);
    if (v6)
    {
      uint64_t v7 = *(void *)(result + 216);
      uint64_t v8 = 248 * v6;
      while (1)
      {
        uint64_t result = WebKit::FrameState::stateForFrameID(v7, a2, a3);
        if (result) {
          break;
        }
        v7 += 248;
        v8 -= 248;
        if (!v8) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned int *WebKit::SharedStringHashStore::processPendingOperations(WebKit::SharedStringHashStore *this)
{
  uint64_t v3 = (unsigned int *)((char *)this + 40);
  char v2 = (int *)*((void *)this + 5);
  unsigned int v4 = *((_DWORD *)this + 3);
  uint64_t v5 = *((unsigned int *)this + 13);
  if (v5)
  {
    unsigned int v6 = 0;
    uint64_t v7 = 8 * v5;
    do
    {
      int v8 = *v2;
      v2 += 2;
      if (!v8) {
        ++v6;
      }
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    unsigned int v6 = 0;
  }
  unsigned int v9 = 2 * (*((_DWORD *)this + 2) + v6) - 1;
  unsigned int v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  int v12 = v11 | HIWORD(v11);
  unint64_t v13 = (unint64_t)WTF::pageSize(this) >> 2;
  if (v13 <= (v12 + 1)) {
    unsigned int v14 = v12 + 1;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v4 >= v14)
  {
    unsigned int v50 = 0;
    uint64_t v51 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v31 = v6;
    if (v6)
    {
      if ((unint64_t)v6 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198D2B498);
      }
      LODWORD(v51) = v6;
      unsigned int v50 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
    }
    uint64_t v32 = *((unsigned int *)this + 13);
    unint64_t v33 = v32 - v6;
    if (v32 != v31)
    {
      if (v33 >> 30)
      {
        __break(0xC471u);
LABEL_73:
        JUMPOUT(0x198D2B490);
      }
      LODWORD(v49) = v32 - v31;
      uint64_t v48 = (WTF *)WTF::fastMalloc((WTF *)(4 * v33));
      uint64_t v31 = *((unsigned int *)this + 13);
      LODWORD(v32) = *((_DWORD *)this + 13);
    }
    if (!v32)
    {
LABEL_63:
      WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, 0);
      if (HIDWORD(v51) | HIDWORD(v49)) {
        (*(void (**)(void, WTF **, WTF **))(**(void **)this + 24))(*(void *)this, &v50, &v48);
      }
      uint64_t v47 = v48;
      if (v48)
      {
        uint64_t v48 = 0;
        LODWORD(v49) = 0;
        WTF::fastFree(v47, v46);
      }
      uint64_t result = (unsigned int *)v50;
      if (v50)
      {
        unsigned int v50 = 0;
        LODWORD(v51) = 0;
        return (unsigned int *)WTF::fastFree((WTF *)result, v46);
      }
      return result;
    }
    uint64_t v34 = *(void *)v3;
    uint64_t v35 = 8 * v31;
    int v36 = (unsigned int *)(*(void *)v3 + 4);
    while (1)
    {
      int v37 = *(v36 - 1);
      if (v37 == 1)
      {
        Slot = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v36);
        if (!Slot || !*Slot) {
          goto LABEL_62;
        }
        _DWORD *Slot = 0;
        if (HIDWORD(v49) == v49)
        {
          double v41 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)v36);
          double v43 = (char *)v48 + 4 * HIDWORD(v49);
          int v44 = -1;
        }
        else
        {
          double v43 = (char *)v48 + 4 * HIDWORD(v49);
          int v44 = -1;
          double v41 = v36;
        }
        int v45 = (char *)&v49 + 4;
      }
      else
      {
        if (v37) {
          goto LABEL_62;
        }
        unsigned int v38 = *v36;
        double v39 = (unsigned int *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v36);
        if (*v39) {
          goto LABEL_62;
        }
        unsigned int *v39 = v38;
        uint64_t v40 = HIDWORD(v51);
        if (HIDWORD(v51) == v51)
        {
          double v41 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)v36);
          uint64_t v40 = HIDWORD(v51);
        }
        else
        {
          double v41 = (_DWORD *)(v34 + 4);
        }
        double v43 = (char *)v50 + 4 * v40;
        int v44 = 1;
        int v45 = (char *)&v51 + 4;
      }
      *(_DWORD *)double v43 = *v41;
      ++*(_DWORD *)v45;
      *((_DWORD *)this + 2) += v44;
LABEL_62:
      v34 += 8;
      v36 += 2;
      v35 -= 8;
      if (!v35) {
        goto LABEL_63;
      }
    }
  }
  uint64_t result = (unsigned int *)WebCore::SharedMemory::allocate((WebCore::SharedMemory *)(4 * v14));
  if (!v50) {
    return result;
  }
  bzero(*((void **)v50 + 2), *((void *)v50 + 1));
  uint64_t v16 = *((void *)this + 2);
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
  }
  uint64_t v17 = *((unsigned int *)this + 3);
  uint64_t v18 = v50;
  unsigned int v50 = 0;
  uint64_t v48 = v18;
  WebKit::SharedStringHashTableReadOnly::setSharedMemory((uint64_t)this + 16, (unsigned int **)&v48);
  if (v48) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v48);
  }
  *((_DWORD *)this + 3) = v14;
  if (!v16) {
    goto LABEL_25;
  }
  if (*(void *)(v16 + 8) != 4 * v17)
  {
    __break(0xC471u);
    goto LABEL_73;
  }
  if (v17)
  {
    uint64_t v19 = *(unsigned int **)(v16 + 16);
    do
    {
      unsigned int v21 = *v19++;
      unsigned int v20 = v21;
      if (v21)
      {
        unint64_t v22 = (unsigned int *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), v20);
        if (!*v22) {
          *unint64_t v22 = v20;
        }
      }
      --v17;
    }
    while (v17);
  }
LABEL_25:
  uint64_t v23 = *((unsigned int *)this + 13);
  if (v23)
  {
    int v24 = (unsigned int *)(*((void *)this + 5) + 4);
    for (uint64_t i = 8 * v23; i; i -= 8)
    {
      int v26 = *(v24 - 1);
      if (v26 == 1)
      {
        uint64_t v30 = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v24);
        if (!v30 || !*v30) {
          goto LABEL_35;
        }
        *uint64_t v30 = 0;
        int v29 = -1;
      }
      else
      {
        if (v26) {
          goto LABEL_35;
        }
        unsigned int v27 = *v24;
        long long v28 = (unsigned int *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v24);
        if (*v28) {
          goto LABEL_35;
        }
        *long long v28 = v27;
        int v29 = 1;
      }
      *((_DWORD *)this + 2) += v29;
LABEL_35:
      v24 += 2;
    }
  }
  WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, 0);
  (*(void (**)(void))(**(void **)this + 16))();
  if (v16) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v16);
  }
  uint64_t result = (unsigned int *)v50;
  unsigned int v50 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::SharedStringHashStore::scheduleAddition(WebKit::SharedStringHashStore *this, int a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 40);
  LODWORD(v9) = 0;
  HIDWORD(v9) = a2;
  uint64_t v4 = *((unsigned int *)this + 13);
  if (v4 == *((_DWORD *)this + 12))
  {
    uint64_t v5 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
    uint64_t v4 = *((unsigned int *)this + 13);
    uint64_t v6 = *((void *)this + 5);
    uint64_t v7 = *v5;
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t v7 = v9;
  }
  *(void *)(v6 + 8 * v4) = v7;
  ++*((_DWORD *)this + 13);
  uint64_t result = WTF::RunLoop::TimerBase::isActive((WebKit::SharedStringHashStore *)((char *)this + 56));
  if ((result & 1) == 0) {
    return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::SharedStringHashStore::scheduleRemoval(WebKit::SharedStringHashStore *this, int a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 40);
  LODWORD(v9) = 1;
  HIDWORD(v9) = a2;
  uint64_t v4 = *((unsigned int *)this + 13);
  if (v4 == *((_DWORD *)this + 12))
  {
    uint64_t v5 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
    uint64_t v4 = *((unsigned int *)this + 13);
    uint64_t v6 = *((void *)this + 5);
    uint64_t v7 = *v5;
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t v7 = v9;
  }
  *(void *)(v6 + 8 * v4) = v7;
  ++*((_DWORD *)this + 13);
  uint64_t result = WTF::RunLoop::TimerBase::isActive((WebKit::SharedStringHashStore *)((char *)this + 56));
  if ((result & 1) == 0) {
    return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

_DWORD *WebKit::SharedStringHashStore::contains(WebKit::SharedStringHashStore *this, unsigned int a2)
{
  WebKit::SharedStringHashStore::flushPendingChanges(this);
  uint64_t result = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), a2);
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

unsigned int *WebKit::SharedStringHashStore::flushPendingChanges(WebKit::SharedStringHashStore *this)
{
  char v2 = (WebKit::SharedStringHashStore *)((char *)this + 56);
  uint64_t result = (unsigned int *)WTF::RunLoop::TimerBase::isActive((WebKit::SharedStringHashStore *)((char *)this + 56));
  if (result)
  {
    WTF::RunLoop::TimerBase::stop(v2);
    return WebKit::SharedStringHashStore::processPendingOperations(this);
  }
  return result;
}

unsigned int *WebKit::SharedStringHashStore::clear(WebKit::SharedStringHashStore *this)
{
  WTF::RunLoop::TimerBase::stop((WebKit::SharedStringHashStore *)((char *)this + 56));
  WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 10, 0);
  *((void *)this + 1) = 0;

  return WebKit::SharedStringHashTable::clear((unsigned int *)this + 4);
}

unsigned int *WebKit::SharedStringHashTable::clear(unsigned int *this)
{
  if (*(void *)this)
  {
    uint64_t v1 = (uint64_t)this;
    bzero(*(void **)(*(void *)this + 16), *(void *)(*(void *)this + 8));
    char v2 = 0;
    WebKit::SharedStringHashTableReadOnly::setSharedMemory(v1, &v2);
    this = v2;
    if (v2) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
    }
  }
  return this;
}

unsigned int *WebKit::SharedStringHashTableReadOnly::setSharedMemory(uint64_t a1, unsigned int **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)a1;
  *(void *)a1 = v3;
  if (result)
  {
    uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    uint64_t v3 = *(unsigned int **)a1;
  }
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 2);
    uint64_t v3 = (unsigned int *)(*((void *)v3 + 1) >> 2);
    int v6 = v3 - 1;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v6;
  return result;
}

uint64_t WebKit::SharedStringHashTableReadOnly::findSlot(WebKit::SharedStringHashTableReadOnly *this, unsigned int a2)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 2);
  int v3 = *((_DWORD *)this + 3);
  int v4 = v3 & a2;
  int v5 = *(_DWORD *)(v2 + 4 * (int)(v3 & a2));
  if (v5) {
    BOOL v6 = v5 == a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    uint64_t v7 = v4;
  }
  else
  {
    int v9 = 0;
    do
    {
      unsigned int v10 = (~a2 + (a2 >> 23)) ^ ((~a2 + (a2 >> 23)) << 12);
      unsigned int v11 = v10 ^ (v10 >> 7) ^ (4 * (v10 ^ (v10 >> 7)));
      int v12 = v11 ^ (v11 >> 20) | 1;
      if (!v9) {
        int v9 = v12;
      }
      int v4 = (v9 + v4) & v3;
      uint64_t v7 = v4;
      int v13 = *(_DWORD *)(v2 + 4 * v4);
      if (v13) {
        BOOL v14 = v13 == a2;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (!v14);
  }
  return v2 + 4 * v7;
}

unint64_t WebKit::Site::hash(WTF::StringImpl **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)v2 + 4);
    if (v3 >= 0x100) {
      unsigned int v4 = v3 >> 8;
    }
    else {
      unsigned int v4 = WTF::StringImpl::hashSlowCase(v2);
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  int v5 = this[1];
  if (v5)
  {
    unsigned int v6 = *((_DWORD *)v5 + 4);
    if (v6 >= 0x100) {
      LODWORD(v5) = v6 >> 8;
    }
    else {
      LODWORD(v5) = WTF::StringImpl::hashSlowCase(v5);
    }
  }
  return (0xD7862706ELL * (unint64_t)(277951225 * v4 + 95187966 * v5)) >> 4;
}

uint64_t WebKit::Site::matches(WebKit::Site *this, const WTF::URL *a2)
{
  unsigned int v4 = (unsigned __int8 *)WTF::URL::protocol(a2);
  uint64_t v6 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v7 = *(unsigned __int8 **)(v6 + 8);
    unint64_t v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0x100000000;
  }
  uint64_t result = WTF::operator==(v4, v5, v7, v8);
  if (result)
  {
    uint64_t v11 = WTF::URL::host(a2);
    return WebCore::RegistrableDomain::matches((void *)this + 1, v11, v10);
  }
  return result;
}

void *std::allocator<rtc::InterfaceAddress>::allocate_at_least[abi:sn180100](unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  return operator new(32 * a1);
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
}

void rtc::InterfaceAddress::~InterfaceAddress(rtc::InterfaceAddress *this)
{
}

uint64_t std::__split_buffer<rtc::InterfaceAddress>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::SharedStringHashStore::*&)(void),WebKit::SharedStringHashStore*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

unsigned int *WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v2 = result;
    if (result[3] > a2) {
      result[3] = a2;
    }
    uint64_t result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      uint64_t result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
      *(void *)uint64_t v2 = result;
    }
    else if (result)
    {
      *(void *)uint64_t v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void WebKit::WebPagePreferencesLockdownModeObserver::~WebPagePreferencesLockdownModeObserver(unsigned int **this)
{
  WebKit::lockdownModeObservers((WebKit *)this);
  if (++dword_1E93CF758 > dword_1E93CF75C)
  {
    uint64_t v3 = qword_1E93CF750;
    if (qword_1E93CF750)
    {
      int v4 = *(_DWORD *)(qword_1E93CF750 - 4);
      if (!v4) {
        goto LABEL_22;
      }
      int v5 = 0;
      unsigned int v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)(v3 + 8 * v6);
        if ((unint64_t)(v8 + 1) >= 2 && !*(void *)(v8 + 8))
        {
          *(void *)(v3 + 8 * v6) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v8);
            WTF::fastFree((WTF *)v8, v2);
          }
          *(void *)(v3 + 8 * v6) = -1;
          ++v5;
        }
        --v6;
      }
      while (v7);
      uint64_t v3 = qword_1E93CF750;
      if (v5)
      {
        *(_DWORD *)(qword_1E93CF750 - 16) += v5;
        if (qword_1E93CF750) {
          int v9 = *(_DWORD *)(qword_1E93CF750 - 12);
        }
        else {
          int v9 = 0;
        }
        *(_DWORD *)(qword_1E93CF750 - 12) = v9 - v5;
        uint64_t v3 = qword_1E93CF750;
      }
      if (v3)
      {
        unsigned int v10 = *(_DWORD *)(v3 - 4);
        if (v10 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v10)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1E93CF750);
          uint64_t v3 = qword_1E93CF750;
          dword_1E93CF758 = 0;
          if (!qword_1E93CF750)
          {
            unsigned int v12 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        dword_1E93CF758 = 0;
LABEL_25:
        unsigned int v12 = *(_DWORD *)(v3 - 12);
        int v13 = 0x7FFFFFFF;
        if (v12 >= 0x7FFFFFFF)
        {
LABEL_27:
          dword_1E93CF75C = 2 * v13;
          goto LABEL_28;
        }
LABEL_26:
        int v13 = v12;
        goto LABEL_27;
      }
    }
    unsigned int v12 = 0;
    dword_1E93CF758 = 0;
    goto LABEL_26;
  }
LABEL_28:
  BOOL v14 = this[1];
  if (v14 && *((void *)v14 + 1))
  {
    uint64_t v18 = this[1];
    uint64_t v15 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1E93CF750, &v18);
    uint64_t v2 = v15;
    if (qword_1E93CF750)
    {
      uint64_t v16 = qword_1E93CF750 + 8 * *(unsigned int *)(qword_1E93CF750 - 4);
      if ((unsigned int **)v16 == v15) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v15) {
        goto LABEL_37;
      }
      uint64_t v16 = 0;
    }
    if ((unsigned int **)v16 != v15) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1E93CF750, v15);
    }
  }
LABEL_37:
  uint64_t v17 = this[2];
  this[2] = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPagePreferencesLockdownModeObserver::~WebPagePreferencesLockdownModeObserver(this);

  WTF::fastFree(v1, v2);
}

void sub_198D2BE10(_Unwind_Exception *a1, void *a2)
{
  int v4 = *(unsigned int **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPagePreferencesLockdownModeObserver::willChangeLockdownMode(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void **)(v2 + 8);
      if (v3)
      {
        [*(id *)(v2 + 8) willChangeValueForKey:@"_captivePortalModeEnabled"];
        return [v3 willChangeValueForKey:@"lockdownModeEnabled"];
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPagePreferencesLockdownModeObserver::didChangeLockdownMode(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void **)(v2 + 8);
      if (v3)
      {
        [*(id *)(v2 + 8) didChangeValueForKey:@"_captivePortalModeEnabled"];
        return [v3 didChangeValueForKey:@"lockdownModeEnabled"];
      }
    }
  }
  return this;
}

void WebKit::WebPageProxy::setDataDetectionResult(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  int v4 = *(const void **)(a1 + 496);
  *(void *)(a1 + 496) = v3;
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t WebKit::WebPageProxy::handleClickForDataDetectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1840))(v6, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

void sub_198D2C08C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::saveRecentSearches(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*a3)
  {
    uint64_t v4 = *(void *)(a1 + 312);
    WebKit::WebsiteDataStore::saveRecentSearches(v4, (uint64_t)a3, a4);
  }
  else
  {
    uint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      uint64_t v8 = "void WebKit::WebPageProxy::saveRecentSearches(IPC::Connection &, const String &, const Vector<WebCore::RecentSearch> &)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 205: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::loadRecentSearches(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*a3)
  {
    uint64_t v5 = *(void *)(a1 + 312);
    return WebKit::WebsiteDataStore::loadRecentSearches(v5, (uint64_t)a3, a4);
  }
  else
  {
    uint64_t v8 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v10) = 136446210;
      *(void *)((char *)&v10 + 4) = "void WebKit::WebPageProxy::loadRecentSearches(IPC::Connection &, const String &, C"
                                      "ompletionHandler<void (Vector<WebCore::RecentSearch> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 212: Invalid message dispatched %{public}s", (uint8_t *)&v10, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    long long v10 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a4);
    return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
}

void sub_198D2C2F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D2C384(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::WebPageProxy::grantAccessToCurrentPasteboardData(WebKit::WebPasteboardProxy *a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t a4)
{
  if (*((unsigned char *)a1 + 801) || (int v7 = a1, !*((unsigned char *)a1 + 800)))
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a3);
    unint64_t v5 = 0;
    LOBYTE(v6) = 0;
  }
  else
  {
    if (*(unsigned char *)(a4 + 16)
      && (a1 = (WebKit::WebPasteboardProxy *)WebKit::WebFrameProxy::webFrame(*(void *)a4, *(void *)(a4 + 8))) != 0)
    {
      uint64_t v9 = a1;
      long long v10 = WebKit::WebPasteboardProxy::singleton(a1);
      uint64_t v11 = *(void *)(*((void *)v9 + 4) + 16);
    }
    else
    {
      long long v10 = WebKit::WebPasteboardProxy::singleton(a1);
      uint64_t v11 = *((void *)v7 + 32);
    }
    unint64_t v6 = WebKit::WebPasteboardProxy::grantAccessToCurrentData((uint64_t)v10, v11, a2, a3);
    unint64_t v5 = v6 & 0xFFFFFFFFFFFFFF00;
  }
  return v6 | v5;
}

unint64_t WebKit::WebPasteboardProxy::grantAccessToCurrentData(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebKit::WebPasteboardProxy::grantAccess(a1, a2, a3, 1);
  MEMORY[0x199734490](&cf, a3);
  WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  if (v44)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    if (!v43) {
      goto LABEL_26;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v9 = 0;
    uint64_t v10 = v42;
    uint64_t v11 = v42 + 120 * v43;
    do
    {
      uint64_t v12 = *(unsigned int *)(v10 + 28);
      if (v12)
      {
        int v13 = *(_DWORD ***)(v10 + 16);
        unint64_t v14 = v12 + v8;
        if (v12 + v8 > (unint64_t)v41)
        {
          unint64_t v15 = v41 + ((unint64_t)v41 >> 2);
          if (v15 >= 0x10) {
            unint64_t v16 = v15 + 1;
          }
          else {
            unint64_t v16 = 16;
          }
          if (v16 <= v14) {
            unint64_t v17 = v12 + v8;
          }
          else {
            unint64_t v17 = v16;
          }
          unint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v17);
          uint64_t v8 = HIDWORD(v41);
          if (v14 < HIDWORD(v41))
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v7 = v40;
        }
        uint64_t v19 = 8 * v8;
        uint64_t v20 = 8 * v12;
        do
        {
          unsigned int v21 = *v13;
          if (*v13) {
            *v21 += 2;
          }
          *(void *)(v7 + v19) = v21;
          ++v13;
          v19 += 8;
          v20 -= 8;
        }
        while (v20);
        uint64_t v8 = v14;
        HIDWORD(v41) = v14;
      }
      v9 |= *(unsigned char *)(v10 + 89) != 0;
      v10 += 120;
    }
    while (v10 != v11);
    if ((v9 & 1) != 0 && ((uint64_t v22 = *(void *)(*(void *)(a2 + 752) + 400)) != 0 ? (v23 = v8 == 0) : (v23 = 1), !v23))
    {
      uint64_t v39 = *(void *)(a2 + 176);
      long long v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)long long v28 = 367;
      *((void *)v28 + 1) = 0;
      *((void *)v28 + 66) = (char *)v28 + 16;
      *((void *)v28 + 67) = 512;
      *((void *)v28 + 68) = 0;
      *((void *)v28 + 70) = 0;
      *((void *)v28 + 69) = 0;
      IPC::Encoder::encodeHeader(v28);
      uint64_t v48 = v28;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v28, &v39);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v28, (uint64_t)&v40);
      uint64_t v29 = *a4;
      *a4 = 0;
      uint64_t v30 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v30 = &unk_1EE9D0B98;
      v30[1] = v29;
      uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v46[0] = v30;
      v46[1] = v31;
      char v47 = 1;
      int v32 = WebKit::AuxiliaryProcessProxy::sendMessage(v22, &v48, 0, (uint64_t)v46, 1);
      int v34 = v32;
      if (v47)
      {
        uint64_t v35 = v46[0];
        v46[0] = 0;
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
        }
      }
      int v36 = v48;
      uint64_t v48 = 0;
      if (v36)
      {
        IPC::Encoder::~Encoder(v36, v33);
        WTF::fastFree(v37, v38);
      }
      if (v34) {
        uint64_t v24 = v31;
      }
      else {
        uint64_t v24 = 0;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
LABEL_26:
      WTF::CompletionHandler<void ()(void)>::operator()(a4);
      LOBYTE(v24) = 0;
      unint64_t v25 = 0;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v33);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
    LOBYTE(v24) = 0;
    unint64_t v25 = 0;
  }
  if (v44) {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v26);
  }
  CFTypeRef v27 = cf;
  CFTypeRef cf = 0;
  if (v27) {
    CFRelease(v27);
  }
  return v25 & 0xFFFFFFFFFFFFFF00 | v24;
}

void sub_198D2C760(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, CFTypeRef cf, uint64_t a17, uint64_t a18, char a19, IPC::Encoder *a20)
{
  if (a19)
  {
    uint64_t v21 = a17;
    a17 = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  uint64_t v22 = a20;
  a20 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, a2);
    WTF::fastFree(v23, v24);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a15) {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v25);
  }
  CFTypeRef v26 = cf;
  CFTypeRef cf = 0;
  if (v26) {
    CFRelease(v26);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::beginSafeBrowsingCheck(WebKit::WebPageProxy *this, const WTF::URL *a2, char a3, CFTypeRef *a4)
{
  uint64_t v7 = [MEMORY[0x1E4F98288] sharedLookupContext];
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = WTF::URL::operator NSURL *();
    CFRetain(a4[1]);
    uint64_t v10 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v19 = (WTF *)a4;
    char v20 = a3;
    uint64_t v21 = v10;
    long long v11 = *(_OWORD *)((char *)a2 + 24);
    long long v22 = *(_OWORD *)((char *)a2 + 8);
    long long v23 = v11;
    uint64_t v12 = malloc_type_malloc(0x58uLL, 0x10E0040C447727AuLL);
    void *v12 = MEMORY[0x1E4F14398];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::{lambda(void *,SSBLookupResult *,NSError *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::descriptor;
    uint64_t v19 = 0;
    void v12[4] = a4;
    *((unsigned char *)v12 + 40) = a3;
    double v14 = WTF::URL::URL((uint64_t)(v12 + 6), (uint64_t *)&v21);
    unint64_t v15 = v21;
    uint64_t v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v18 = v19;
    uint64_t v19 = 0;
    if (v18) {
      CFRelease(*((CFTypeRef *)v18 + 1));
    }
    objc_msgSend(v8, "lookUpURL:completionHandler:", v9, v12, v14);
    _Block_release(v12);
  }
  else
  {
    uint64_t v19 = 0;
    WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults((uint64_t)a4, (WTF::StringImpl *)&v19);
    unint64_t v17 = v19;
    uint64_t v19 = 0;
    if (v17) {
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v17, v16);
    }
  }
}

void sub_198D2C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Block_release(v12);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::contentFilterDidBlockLoadForFrame(int a1, WebKit::AuxiliaryProcessProxy *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = WebKit::AuxiliaryProcessProxy::fromConnection(this, this);
  uint64_t v10 = v8;
  if (v8)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 72))(v8);
    char v11 = 1;
    if (v8 == 2)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
      char v11 = 0;
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    char v11 = 1;
  }
  uint64_t v12 = (atomic_uint *)(v10 + 16);
  atomic_fetch_add(v12, 1u);
  WebKit::WebPageProxy::contentFilterDidBlockLoadForFrameShared(v8, v9, a3, a4, a5);
  if ((v11 & 1) == 0)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
  }
}

void sub_198D2CB3C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::contentFilterDidBlockLoadForFrameShared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::WebFrameProxy::webFrame(a4, a5);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler((uint64_t)&v12, a3);
    WebKit::WebFrameProxy::contentFilterDidBlockLoad(v7, (uint64_t)&v12);
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v14);
    uint64_t v10 = v13;
    int v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    char v11 = v12;
    uint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void sub_198D2CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  CFTypeRef v22 = cf;
  CFTypeRef cf = 0;
  if (v22) {
    CFRelease(v22);
  }
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](&a16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v23);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v23);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v20 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebFrameProxy::contentFilterDidBlockLoad(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)(a1 + 328), (uint64_t *)a2);
  WTF::URL::operator=(a1 + 336, a2 + 8);
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((void *)(a1 + 376), a2 + 48);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  unint64_t v5 = *(const void **)(a1 + 408);
  *(void *)(a1 + 408) = v4;
  if (v5) {
    CFRelease(v5);
  }
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 88);
}

void WebKit::WebPageProxy::createSandboxExtensionsIfNeeded(uint64_t a1, uint64_t a2, const char ***a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (!v4) {
    return;
  }
  if (v4 != 1)
  {
LABEL_17:
    uint64_t v16 = *(void **)a2;
    uint64_t v17 = *(void *)a2 + 8 * v4;
    while (1)
    {
      uint64_t v18 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
      if (*v16) {
        uint64_t v19 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v19 = &stru_1EEA10550;
      }
      if (![v18 fileExistsAtPath:v19]) {
        goto LABEL_25;
      }
      WebKit::SandboxExtension::createHandle(0, (uint64_t)v31);
      if (!v31[8]) {
        goto LABEL_25;
      }
      uint64_t v20 = *(unsigned int *)(a4 + 12);
      if (v20 == *(_DWORD *)(a4 + 8))
      {
        long long v23 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v20 + 1, (unint64_t)v31);
        uint64_t v24 = *(unsigned int *)(a4 + 12);
        uint64_t v25 = *(void *)a4;
        uint64_t v26 = *v23;
        *long long v23 = 0;
        *(void *)(v25 + 8 * v24) = v26;
        LODWORD(v25) = v31[8];
        *(_DWORD *)(a4 + 12) = v24 + 1;
        if (!v25) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v21 = *(void *)a4;
        uint64_t v22 = *(void *)v31;
        *(void *)uint64_t v31 = 0;
        *(void *)(v21 + 8 * v20) = v22;
        *(_DWORD *)(a4 + 12) = v20 + 1;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v31);
LABEL_25:
      if (++v16 == (void *)v17) {
        return;
      }
    }
  }
  char v30 = 0;
  uint64_t v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (!*(_DWORD *)(a2 + 12))
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  uint64_t v10 = (void *)v9;
  if (**(void **)a2) {
    char v11 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v11 = &stru_1EEA10550;
  }
  if ([v10 fileExistsAtPath:v11 isDirectory:&v30]) {
    BOOL v12 = v30 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 256) + 144);
    if (v13)
    {
      if (*(void *)(v13 + 352))
      {
        xpc_connection_get_audit_token();
        v29[0] = *(_OWORD *)&v31[1];
        *(_OWORD *)((char *)v29 + 15) = *(_OWORD *)&v31[16];
        char v28 = v31[0];
        WebKit::SandboxExtension::createHandleForReadByAuditToken((WebKit::SandboxExtensionImpl *)"/", (WebKit::SandboxExtensionImpl *)0x100000001, &v28, (uint64_t)v31);
        if (!v31[8]) {
          goto LABEL_15;
        }
        double v14 = *(const char ***)v31;
        *(void *)uint64_t v31 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a3, v14);
        if (!v31[8]) {
          goto LABEL_15;
        }
      }
      else
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)v31);
        if (!v31[8])
        {
LABEL_15:
          uint64_t v15 = *(void *)(a1 + 256);
          *(unsigned char *)(a1 + 1189) = 1;
          *(unsigned char *)(v15 + 528) = 1;
          goto LABEL_16;
        }
        CFTypeRef v27 = *(const char ***)v31;
        *(void *)uint64_t v31 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a3, v27);
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v31);
      goto LABEL_15;
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x198D2CFA0);
  }
LABEL_16:
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4) {
    goto LABEL_17;
  }
}

void sub_198D2CFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const char **a15, __int16 a16, char a17, char a18)
{
  if ((_BYTE)a16) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollViewDidScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 848))(v6, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

void sub_198D2D0BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::scrollingUpdatesDisabledForTesting(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1432))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1600))(v2);
  return v3;
}

void sub_198D2D1C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::startDrag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 280))(v6, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

void sub_198D2D2E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::platformRegisterAttachment(uint64_t a1, atomic_uchar **a2, void *a3, unsigned int *a4)
{
  if (*(void *)a4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1720))(v8);
    IPC::SharedBufferReference::unsafeBuffer(a4, (uint64_t *)&v15);
    uint64_t v10 = (unsigned int *)v15;
    WebCore::SharedBuffer::createNSData((uint64_t *)&cf, v15);
    BOOL v12 = (void *)[v9 initRegularFileWithContents:cf];
    CFTypeRef v13 = cf;
    CFTypeRef cf = 0;
    if (v13) {
      CFRelease(v13);
    }
    if (v10) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v11);
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1600))(v8);
    if (*a3) {
      double v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      double v14 = &stru_1EEA10550;
    }
    [v12 setPreferredFilename:v14];
    API::Attachment::setFileWrapper(*a2, v12);
    if (v12) {
      CFRelease(v12);
    }
  }
}

void sub_198D2D490(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, a2);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 1600))(v10);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::platformRegisterAttachment(uint64_t a1, atomic_uchar **a2, void *a3)
{
  if (*a3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = v5 ? *(void *)(v5 + 8) : 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1720))(v6);
    uint64_t v8 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v9 = *a3 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v10 = (const void *)objc_msgSend(v7, "initWithURL:options:error:", objc_msgSend(v8, "fileURLWithPath:", v9), 0, 0);
    (*(void (**)(uint64_t))(*(void *)v6 + 1600))(v6);
    API::Attachment::setFileWrapper(*a2, v10);
    if (v10)
    {
      CFRelease(v10);
    }
  }
}

void sub_198D2D66C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::iconForAttachment(const WTF::String *a1@<X1>, const WTF::String *a2@<X2>, const WTF::String *a3@<X3>, CFTypeRef *a4@<X4>, WebCore::ShareableBitmap **a5@<X8>)
{
  WebCore::RenderThemeIOS::iconForAttachment((uint64_t *)cf, a1, a2, a3, a3);
  uint64_t v8 = (void *)cf[0];
  if (cf[0]) {
    CFRetain(cf[0]);
  }
  *a4 = cf[1];
  [v8 size];
  v27.width = v9;
  v27.CGFloat height = v10;
  WebCore::FloatSize::FloatSize((WebCore::FloatSize *)&v33, &v27);
  if (v33 <= 0.0 || v34 <= 0.0) {
    goto LABEL_15;
  }
  *(_OWORD *)char v30 = xmmword_1994F6D10;
  WebCore::largestRectWithAspectRatioInsideRect((WebCore *)v30, v33 / v34, v11);
  *(void *)&v27.width = __PAIR64__(v13, v12);
  *(void *)&v27.CGFloat height = __PAIR64__(v15, v14);
  WebCore::roundedIntRect((WebCore *)&v27, v16);
  uint64_t v31 = 0;
  int v32 = v17;
  uint64_t v26 = v17;
  LOBYTE(v30[0]) = 0;
  LOBYTE(v30[1]) = 0;
  MEMORY[0x199738D60](&v27, &v26, v30, 0);
  WebCore::ShareableBitmap::create();
  if (v28)
  {
    CGFloat height = v27.height;
    v27.CGFloat height = 0.0;
    if (height != 0.0) {
      CFRelease(*(CFTypeRef *)&height);
    }
  }
  if (LOBYTE(v30[1]))
  {
    CFTypeRef v19 = v30[0];
    v30[0] = 0;
    if (v19) {
      CFRelease(v19);
    }
  }
  if (v29)
  {
    WebCore::ShareableBitmap::createGraphicsContext((uint64_t *)&v26, v29);
    uint64_t v20 = v26;
    if (v26)
    {
      WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext((WebCore::LocalCurrentGraphicsContext *)&v27, v26);
      WebCore::IntRect::operator CGRect();
      objc_msgSend(v8, "drawInRect:");
      uint64_t v21 = v29;
      uint64_t v29 = 0;
      *a5 = v21;
      WebCore::LocalCurrentGraphicsContext::~LocalCurrentGraphicsContext((WebCore::LocalCurrentGraphicsContext *)&v27);
      uint64_t v22 = v26;
      uint64_t v26 = 0;
      if (v22) {
        (*(void (**)(WebCore::GraphicsContext *))(*(void *)v22 + 8))(v22);
      }
    }
    else
    {
      *a5 = 0;
    }
    long long v23 = v29;
    uint64_t v29 = 0;
    if (v23) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v23, v20);
    }
  }
  else
  {
LABEL_15:
    *a5 = 0;
  }
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v24 = cf[0];
  cf[0] = 0;
  if (v24) {
    CFRelease(v24);
  }
}

void sub_198D2D888(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, char a12, CFTypeRef a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, CFTypeRef a19, char a20)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a18) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a18, a2);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebPageProxy::insertDictatedTextAsync(WTF *result, uint64_t *a2, uint64_t *a3, unsigned int *a4, char *a5)
{
  if (!*((unsigned char *)result + 801))
  {
    uint64_t v5 = result;
    if (*((unsigned char *)result + 800))
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v9 = a4[3];
      if (!v9) {
        goto LABEL_24;
      }
      CGFloat v10 = (void *)(*(void *)a4 + 16);
      uint64_t v11 = 24 * v9;
      do
      {
        uint64_t v12 = *((void *)v5 + 5);
        if (v12) {
          uint64_t v13 = *(void *)(v12 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 784))(v13, *v10);
        (*(void (**)(uint64_t))(*(void *)v13 + 1600))(v13);
        if (v14)
        {
          long long v31 = *((_OWORD *)v10 - 1);
          uint64_t v32 = v14;
          int v15 = HIDWORD(v30);
          if (HIDWORD(v30) == v30)
          {
            unint64_t v16 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, HIDWORD(v30) + 1, (unint64_t)&v31);
            int v15 = HIDWORD(v30);
            uint64_t v17 = (char *)v29 + 24 * HIDWORD(v30);
            long long v18 = *(_OWORD *)v16;
            *((void *)v17 + 2) = *(void *)(v16 + 16);
          }
          else
          {
            uint64_t v17 = (char *)v29 + 24 * HIDWORD(v30);
            long long v18 = v31;
            *((void *)v17 + 2) = v32;
          }
          *(_OWORD *)uint64_t v17 = v18;
          HIDWORD(v30) = v15 + 1;
        }
        v10 += 3;
        v11 -= 24;
      }
      while (v11);
      if (HIDWORD(v30))
      {
        uint64_t v19 = *((void *)v5 + 32);
        uint64_t v20 = *(void *)(*((void *)v5 + 4) + 1928);
        uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v21 = 2296;
        *((void *)v21 + 1) = v20;
        *((void *)v21 + 66) = (char *)v21 + 16;
        *((void *)v21 + 67) = 512;
        *((void *)v21 + 68) = 0;
        *((void *)v21 + 70) = 0;
        *((void *)v21 + 69) = 0;
        IPC::Encoder::encodeHeader(v21);
        float v33 = v21;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, a2);
        IPC::Encoder::operator<<<unsigned long long const&>(v21, a3);
        IPC::Encoder::operator<<<unsigned long long const&>(v21, a3 + 1);
        IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v21, HIDWORD(v30));
        if (HIDWORD(v30))
        {
          uint64_t v22 = (uint64_t *)v29;
          uint64_t v23 = 24 * HIDWORD(v30);
          do
          {
            IPC::ArgumentCoder<WebCore::DictationAlternative,void>::encode(v21, v22);
            v22 += 3;
            v23 -= 24;
          }
          while (v23);
        }
        IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(v21, a5);
        LOBYTE(v31) = 0;
        LOBYTE(v32) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v33, 0, (uint64_t)&v31, 1);
        if ((_BYTE)v32)
        {
          uint64_t v25 = v31;
          *(void *)&long long v31 = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
        }
        uint64_t v26 = v33;
        float v33 = 0;
        if (v26)
        {
          IPC::Encoder::~Encoder(v26, v24);
          WTF::fastFree(v27, v28);
        }
      }
      else
      {
LABEL_24:
        WebKit::WebPageProxy::insertTextAsync((uint64_t)v5, (uint64_t)a2, (uint64_t)a3, (uint64_t)a5);
      }
      unint64_t result = v29;
      if (v29)
      {
        uint64_t v29 = 0;
        LODWORD(v30) = 0;
        return (WTF *)WTF::fastFree(result, v24);
      }
    }
  }
  return result;
}

void sub_198D2DC58(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::addDictationAlternative(WTF::StringImpl *result, uint64_t a2)
{
  if (!*((unsigned char *)result + 801))
  {
    uint64_t v2 = result;
    if (*((unsigned char *)result + 800))
    {
      uint64_t v3 = *(void **)(a2 + 16);
      uint64_t v4 = *((void *)result + 5);
      if (v4) {
        uint64_t v5 = *(void *)(v4 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 784))(v5, v3);
      (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
      uint64_t v6 = *((void *)v2 + 32);
      MEMORY[0x19972EAD0](&v18, [v3 primaryString]);
      uint64_t v7 = v19;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v2 + 6, (uint64_t)v2 + 16);
      uint64_t v8 = (atomic_uint *)*((void *)v2 + 3);
      if (v8) {
        atomic_fetch_add(v8, 1u);
      }
      uint64_t v9 = *(void *)(*((void *)v2 + 4) + 1928);
      CGFloat v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)CGFloat v10 = 2136;
      *((void *)v10 + 1) = v9;
      *((void *)v10 + 66) = (char *)v10 + 16;
      *((void *)v10 + 67) = 512;
      *((void *)v10 + 68) = 0;
      *((void *)v10 + 70) = 0;
      *((void *)v10 + 69) = 0;
      IPC::Encoder::encodeHeader(v10);
      uint64_t v22 = v10;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v18);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v19);
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v11 = &unk_1EE9D08A0;
      v11[1] = v7;
      v11[2] = v8;
      uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v20[0] = v11;
      v20[1] = v12;
      char v21 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v22, 0, (uint64_t)v20, 1);
      if (v21)
      {
        uint64_t v14 = v20[0];
        v20[0] = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      int v15 = v22;
      uint64_t v22 = 0;
      if (v15)
      {
        IPC::Encoder::~Encoder(v15, v13);
        WTF::fastFree(v16, v17);
      }
      unint64_t result = v18;
      long long v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198D2DF70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::dictationAlternativesAtSelection(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v4[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a2);
    return 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 256);
    LOBYTE(v4[0]) = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v3, (uint64_t)v4, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198D2E13C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D2E1DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::clearDictationAlternatives(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800)) {
      BOOL v2 = *(_DWORD *)(a2 + 12) == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      uint64_t v3 = *(void *)(result + 256);
      uint64_t v4 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearDictationAlternatives>(v3, &v4, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::platformDictationAlternatives(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 824))(v4, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 1600))(v4);
  return v5;
}

void sub_198D2E338(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::errorForUnpermittedAppBoundDomainNavigation@<X0>(const WTF::URL *a1@<X1>, uint64_t a2@<X8>)
{
  MEMORY[0x19972EAD0](&v11, @"WKErrorDomain");
  uint64_t v6 = localizedDescriptionForErrorCode(WKErrorNavigationAppBoundDomain, v5);
  MEMORY[0x19972EAD0](&v10, v6);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v11, 13, (uint64_t)a1, (_DWORD **)&v10, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t v8 = v10;
  CGFloat v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D2E444(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::Internals::~Internals(WebKit::WebPageProxy::Internals *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 325);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      CFStringRef v5 = (WTF::StringImpl **)*((void *)this + 325);
      do
      {
        uint64_t v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *CFStringRef v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, a2);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  std::unique_ptr<WebKit::WebPageProxyFrameLoadStateObserver>::reset[abi:sn180100]((WebKit::WebPageProxyFrameLoadStateObserver **)this + 324, 0);
  std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 2504, v7);
  *((void *)this + 307) = &unk_1EE9B3390;
  uint64_t v8 = *((void *)this + 310);
  *((void *)this + 310) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 2456));
  uint64_t v10 = *((void *)this + 281);
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  uint64_t v11 = *((void *)this + 280);
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    if (v12)
    {
      uint64_t v13 = (uint64_t *)(v11 + 16);
      do
      {
        if (*(v13 - 2) ^ 1 | *(v13 - 1))
        {
          uint64_t v14 = *v13;
          uint64_t *v13 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        v13 += 4;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v9);
  }
  uint64_t v15 = *((void *)this + 279);
  if (v15) {
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v15, v9);
  }
  uint64_t v16 = *((void *)this + 278);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    if (v17)
    {
      long long v18 = (WebCore::TextIndicatorData *)(v16 + 16);
      do
      {
        if (*((void *)v18 - 2) ^ 1 | *((void *)v18 - 1)) {
          WebCore::TextIndicatorData::~TextIndicatorData(v18, v9);
        }
        long long v18 = (WebCore::TextIndicatorData *)((char *)v18 + 128);
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v9);
  }
  if (*((unsigned char *)this + 2208))
  {
    uint64_t v19 = *((void *)this + 275);
    *((void *)this + 275) = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = *((void *)this + 274);
    *((void *)this + 274) = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *((void *)this + 273);
    *((void *)this + 273) = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *((void *)this + 272);
    *((void *)this + 272) = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = (WTF *)*((void *)this + 271);
    *((void *)this + 271) = 0;
    if (v23) {
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v23, (WTF::StringImpl *)v9);
    }
    CFTypeRef v24 = (_DWORD *)*((void *)this + 270);
    *((void *)this + 270) = 0;
    if (v24)
    {
      if (v24[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
      }
      else {
        --v24[2];
      }
    }
  }
  uint64_t v25 = *((void *)this + 269);
  *((void *)this + 269) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 268);
  if (v26) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v26, v9);
  }
  CGSize v27 = (_DWORD *)*((void *)this + 260);
  *((void *)this + 260) = 0;
  if (v27)
  {
    if (v27[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
    }
    else {
      --v27[2];
    }
  }
  char v28 = (_DWORD *)*((void *)this + 254);
  *((void *)this + 254) = 0;
  if (v28)
  {
    if (v28[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
    }
    else {
      --v28[2];
    }
  }
  objc_destroyWeak((id *)this + 252);
  uint64_t v30 = *((void *)this + 251);
  *((void *)this + 251) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *((void *)this + 250);
  if (v31) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v31, v29);
  }
  uint64_t v32 = (unsigned int **)*((void *)this + 248);
  if (v32) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v32, v29);
  }
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::WebPageProxy::Internals *)((char *)this + 1960));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 244, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 243, 0);
  uint64_t v34 = *((void *)this + 238);
  *((void *)this + 238) = 0;
  if (v34)
  {
    uint64_t v35 = *(uint64_t **)v34;
    uint64_t v36 = *(void *)(v34 + 8) - 1;
    *(void *)(v34 + 8) = v36;
    if (v35)
    {
      uint64_t v37 = *v35;
      if (!*v35) {
        goto LABEL_72;
      }
      char v38 = *(unsigned char *)(v34 + 16);
      *(unsigned char *)(v34 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v37 + 16))(v37, 0);
      *(unsigned char *)(v34 + 16) = v38;
      if (*(void *)v34) {
        goto LABEL_72;
      }
      uint64_t v36 = *(void *)(v34 + 8);
    }
    if (!v36) {
      MEMORY[0x199740C10](v34, 0x1020C40545B2139);
    }
  }
LABEL_72:
  uint64_t v39 = *((void *)this + 233);
  if (v39)
  {
    uint64_t v40 = *(unsigned int *)(v39 - 4);
    if (v40)
    {
      uint64_t v41 = (_DWORD **)(v39 + 8);
      do
      {
        if (*(v41 - 1) != (_DWORD *)-1)
        {
          uint64_t v42 = *v41;
          *uint64_t v41 = 0;
          if (v42)
          {
            if (v42[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v42 + 8))(v42);
            }
            else {
              --v42[2];
            }
          }
        }
        v41 += 2;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v39 - 16), v33);
  }
  *((void *)this + 229) = &unk_1EE9B3390;
  uint64_t v43 = *((void *)this + 232);
  *((void *)this + 232) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 1832));
  uint64_t v45 = *((void *)this + 228);
  if ((v45 & 0x8000000000000) != 0)
  {
    int v100 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v100);
      WTF::fastFree((WTF *)v100, v44);
    }
  }
  uint64_t v46 = *((void *)this + 227);
  if ((v46 & 0x8000000000000) != 0)
  {
    __int16 v101 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v101);
      WTF::fastFree((WTF *)v101, v44);
    }
  }
  *((void *)this + 223) = &unk_1EE9B3390;
  uint64_t v47 = *((void *)this + 226);
  *((void *)this + 226) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 1784));
  uint64_t v49 = *((void *)this + 222);
  if ((v49 & 0x8000000000000) != 0)
  {
    uint64_t v102 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v102);
      WTF::fastFree((WTF *)v102, v48);
    }
  }
  uint64_t v50 = *((void *)this + 219);
  if ((v50 & 0x8000000000000) != 0)
  {
    v103 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v103);
      WTF::fastFree((WTF *)v103, v48);
    }
  }
  *((void *)this + 214) = &unk_1EE9B3390;
  uint64_t v51 = *((void *)this + 217);
  *((void *)this + 217) = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 1712));
  std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::~__optional_destruct_base[abi:sn180100]((WebKit::WebPageProxy::Internals *)((char *)this + 1368), v52);
  uint64_t v54 = *((void *)this + 170);
  *((void *)this + 170) = 0;
  if (v54)
  {
    unint64_t v55 = *(uint64_t **)v54;
    uint64_t v56 = *(void *)(v54 + 8) - 1;
    *(void *)(v54 + 8) = v56;
    if (v55)
    {
      uint64_t v57 = *v55;
      if (!*v55) {
        goto LABEL_99;
      }
      char v58 = *(unsigned char *)(v54 + 16);
      *(unsigned char *)(v54 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v57 + 16))(v57, 0);
      *(unsigned char *)(v54 + 16) = v58;
      if (*(void *)v54) {
        goto LABEL_99;
      }
      uint64_t v56 = *(void *)(v54 + 8);
    }
    if (!v56) {
      MEMORY[0x199740C10](v54, 0x1020C40545B2139);
    }
  }
LABEL_99:
  WebKit::PageLoadState::~PageLoadState((WebKit::WebPageProxy::Internals *)((char *)this + 976), v53);
  uint64_t v60 = *((void *)this + 119);
  *((void *)this + 119) = 0;
  if (!v60) {
    goto LABEL_106;
  }
  unint64_t v61 = *(uint64_t **)v60;
  uint64_t v62 = *(void *)(v60 + 8) - 1;
  *(void *)(v60 + 8) = v62;
  if (v61)
  {
    uint64_t v63 = *v61;
    if (!*v61) {
      goto LABEL_106;
    }
    char v64 = *(unsigned char *)(v60 + 16);
    *(unsigned char *)(v60 + 16) = 1;
    (*(void (**)(uint64_t, void))(*(void *)v63 + 16))(v63, 0);
    *(unsigned char *)(v60 + 16) = v64;
    if (*(void *)v60) {
      goto LABEL_106;
    }
    uint64_t v62 = *(void *)(v60 + 8);
  }
  if (!v62) {
    MEMORY[0x199740C10](v60, 0x1020C40545B2139);
  }
LABEL_106:
  uint64_t v65 = *((void *)this + 118);
  if ((v65 & 0x8000000000000) != 0)
  {
    v104 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v104);
      WTF::fastFree((WTF *)v104, v59);
    }
  }
  *((void *)this + 114) = &unk_1EE9E5248;
  uint64_t v66 = (unsigned int *)*((void *)this + 116);
  *((void *)this + 116) = 0;
  if (v66 && atomic_fetch_add((atomic_uint *volatile)v66, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v66);
    WTF::fastFree((WTF *)v66, v59);
  }
  *((void *)this + 114) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 115, v59);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 888, v67);
  unint64_t v68 = *((void *)this + 107);
  unint64_t v69 = *((void *)this + 108);
  unint64_t v70 = (WTF::StringImpl *)*((void *)this + 109);
  if (v68 <= v69)
  {
    uint64_t v73 = (WTF::StringImpl *)((char *)v70 + 160 * v69);
    uint64_t v72 = (WTF::StringImpl *)((char *)v70 + 160 * v68);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v70, (WTF::StringImpl *)((char *)v70 + 160 * v69));
    uint64_t v71 = *((void *)this + 109);
    uint64_t v72 = (WTF::StringImpl *)(v71 + 160 * *((void *)this + 107));
    uint64_t v73 = (WTF::StringImpl *)(v71 + 160 * *((unsigned int *)this + 220));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v72, v73);
  int v75 = (WTF *)*((void *)this + 109);
  if (v75)
  {
    *((void *)this + 109) = 0;
    *((_DWORD *)this + 220) = 0;
    WTF::fastFree(v75, v74);
  }
  unint64_t v76 = *((void *)this + 96);
  unint64_t v77 = *((void *)this + 97);
  id v78 = (WebKit::WebKeyboardEvent *)*((void *)this + 98);
  if (v76 <= v77)
  {
    CFTypeRef v81 = (WebKit::WebKeyboardEvent *)((char *)v78 + 96 * v77);
    uint64_t v80 = (WebKit::WebKeyboardEvent *)((char *)v78 + 96 * v76);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v78, (WebKit::WebKeyboardEvent *)((char *)v78 + 96 * v77));
    uint64_t v79 = *((void *)this + 98);
    uint64_t v80 = (WebKit::WebKeyboardEvent *)(v79 + 96 * *((void *)this + 96));
    CFTypeRef v81 = (WTF::StringImpl *)(v79 + 96 * *((unsigned int *)this + 198));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v80, v81);
  uint64_t v83 = (WTF *)*((void *)this + 98);
  if (v83)
  {
    *((void *)this + 98) = 0;
    *((_DWORD *)this + 198) = 0;
    WTF::fastFree(v83, v82);
  }
  uint64_t v84 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v84)
  {
    int v85 = *(uint64_t **)v84;
    uint64_t v86 = *(void *)(v84 + 8) - 1;
    *(void *)(v84 + 8) = v86;
    if (v85)
    {
      uint64_t v87 = *v85;
      if (!*v85) {
        goto LABEL_125;
      }
      char v88 = *(unsigned char *)(v84 + 16);
      *(unsigned char *)(v84 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v87 + 16))(v87, 0);
      *(unsigned char *)(v84 + 16) = v88;
      if (*(void *)v84) {
        goto LABEL_125;
      }
      uint64_t v86 = *(void *)(v84 + 8);
    }
    if (!v86) {
      MEMORY[0x199740C10](v84, 0x1020C40545B2139);
    }
  }
LABEL_125:
  uint64_t v89 = (unsigned int *)*((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v89 && atomic_fetch_add((atomic_uint *volatile)v89, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v89);
    WTF::fastFree((WTF *)v89, v82);
  }
  CFTypeRef v90 = (WTF::StringImpl **)*((void *)this + 92);
  if (v90) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v90, (WTF::StringImpl *)v82);
  }
  uint64_t v91 = *((void *)this + 91);
  if (v91) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v91, v82);
  }
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 592, v82);
  if (*((unsigned char *)this + 576)) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::WebPageProxy::Internals *)((char *)this + 272), v92);
  }
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v92);
  std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 128, v93);
  if (*((unsigned char *)this + 112))
  {
    uint64_t v95 = *((void *)this + 13);
    if ((v95 & 0x8000000000000) != 0)
    {
      v105 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v105);
        WTF::fastFree((WTF *)v105, v94);
      }
    }
  }
  *((void *)this + 9) = &unk_1EE9B3390;
  uint64_t v96 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v96) {
    (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 72));
  uint64_t v98 = *((void *)this + 5);
  if (v98)
  {
    *(void *)(v98 + 8) = 0;
    char v99 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v99)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v99, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v99);
        WTF::fastFree((WTF *)v99, v97);
      }
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageProxy::Internals::~Internals(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198D2EF94(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::WebPageProxy::Internals::~Internals(WebKit::WebPageProxy::Internals *this, WTF::StringImpl *a2)
{
}

{
  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 24), a2);
}

{
  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 48), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorConnection(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 56) + 256) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorConnection(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 256) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorBoundInterfaceIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 56) + 312) + 208) + 312;
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorBoundInterfaceIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 312) + 208) + 312;
}

uint64_t WebKit::WebPageProxy::Internals::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (WTF::RefCountedBase *)(*(void *)(a1 + 56) + 352));
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (WTF::RefCountedBase *)(*(void *)(a1 + 40) + 352));
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorPresentingWindow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 56) + 40) + 8) + 856))();
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorPresentingWindow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 40) + 40) + 8) + 856))();
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationBundleIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 56) + 312) + 208) + 296;
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationBundleIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 312) + 208) + 296;
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationSecondaryIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 56) + 312) + 208) + 304;
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationSecondaryIdentifier(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 312) + 208) + 304;
}

unsigned __int8 *WebKit::WebPageProxy::Internals::paymentCoordinatorAddMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 1928);
  CFStringRef v5 = (uint64_t *)(*(void *)(*(void *)(a1 + 56) + 256) + 160);
  v8[0] = a3;
  v8[1] = v4;
  return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, a4, &v7);
}

unsigned __int8 *WebKit::WebPageProxy::Internals::paymentCoordinatorRemoveMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*(void *)(a1 + 56) + 256) + 152, a3, *(void *)(a1 + 1928));
}

unsigned __int8 *non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorRemoveMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*(void *)(a1 + 40) + 256) + 152, a3, *(void *)(a1 + 1912));
}

_DWORD **WebKit::WebPageProxy::Internals::didStartSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  uint64_t result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (result[2])
  {
    uint64_t v3 = (uint64_t *)(WebKit::WebPageProxy::Internals::speechSynthesisData(a1) + 2);
    return (_DWORD **)WTF::CompletionHandler<void ()(void)>::operator()(v3);
  }
  return result;
}

_DWORD **non-virtual thunk to'WebKit::WebPageProxy::Internals::didStartSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didStartSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 48));
}

_DWORD **WebKit::WebPageProxy::Internals::didFinishSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  uint64_t result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (result[3])
  {
    uint64_t v3 = (uint64_t *)(WebKit::WebPageProxy::Internals::speechSynthesisData(a1) + 3);
    return (_DWORD **)WTF::CompletionHandler<void ()(void)>::operator()(v3);
  }
  return result;
}

_DWORD **non-virtual thunk to'WebKit::WebPageProxy::Internals::didFinishSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didFinishSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 48));
}

_DWORD **WebKit::WebPageProxy::Internals::didPauseSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  uint64_t result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (result[4])
  {
    uint64_t v3 = (uint64_t *)(WebKit::WebPageProxy::Internals::speechSynthesisData(a1) + 4);
    return (_DWORD **)WTF::CompletionHandler<void ()(void)>::operator()(v3);
  }
  return result;
}

_DWORD **non-virtual thunk to'WebKit::WebPageProxy::Internals::didPauseSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didPauseSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 48));
}

_DWORD **WebKit::WebPageProxy::Internals::didResumeSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  uint64_t result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (result[5])
  {
    uint64_t v3 = (uint64_t *)(WebKit::WebPageProxy::Internals::speechSynthesisData(a1) + 5);
    return (_DWORD **)WTF::CompletionHandler<void ()(void)>::operator()(v3);
  }
  return result;
}

_DWORD **non-virtual thunk to'WebKit::WebPageProxy::Internals::didResumeSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didResumeSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 48));
}

IPC::Encoder *WebKit::WebPageProxy::Internals::speakingErrorOccurred(uint64_t a1)
{
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SpeakingErrorOccurred>(*(void *)(*(void *)(a1 + 56) + 256), *(void *)(*(void *)(*(void *)(a1 + 56) + 32) + 1928));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPageProxy::Internals::speakingErrorOccurred(uint64_t a1)
{
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SpeakingErrorOccurred>(*(void *)(*(void *)(a1 + 8) + 256), *(void *)(*(void *)(*(void *)(a1 + 8) + 32) + 1928));
}

uint64_t WebKit::WebPageProxy::Internals::boundaryEventOccurred(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v18 = a5;
  int v19 = a4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 256);
  uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 1928);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2154;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v22 = v9;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v11)
  {
    *uint64_t v10 = a3 == 0;
    uint64_t v12 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v9, &v19);
    IPC::Encoder::operator<<<int>(v12, &v18);
    LOBYTE(v20) = 0;
    char v21 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v22, 0, (uint64_t)&v20, 1);
    if (v21)
    {
      uint64_t v14 = v20;
      uint64_t v20 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t result = (uint64_t)v22;
    uint64_t v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v16, v17);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D2F534(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::boundaryEventOccurred(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  return WebKit::WebPageProxy::Internals::boundaryEventOccurred(a1 - 48, a2, a3, a4, a5);
}

IPC::Encoder *WebKit::WebPageProxy::Internals::voicesDidChange(WebKit::WebPageProxy::Internals *this)
{
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoicesDidChange>(*(void *)(*((void *)this + 7) + 256), *(void *)(*(void *)(*((void *)this + 7) + 32) + 1928));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPageProxy::Internals::voicesDidChange(WebKit::WebPageProxy::Internals *this)
{
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoicesDidChange>(*(void *)(*((void *)this + 1) + 256), *(void *)(*(void *)(*((void *)this + 1) + 32) + 1928));
}

uint64_t WebKit::WebPageProxy::didCreateContextInWebProcessForVisibilityPropagation(WebKit::WebPageProxy *this, uint64_t a2)
{
  *((_DWORD *)this + 306) = a2;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 568))(v4, a2);
  CFStringRef v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198D2F6A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::updateFullscreenVideoTextRecognition(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1184))(v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 4);
    if (*(unsigned char *)(v5 + 2496)
      && (uint64_t v6 = *((void *)this + 53)) != 0
      && (BOOL isPaused = WebKit::PlaybackSessionManagerProxy::isPaused(v6, *(void *)(v5 + 2488)),
          uint64_t v5 = *((void *)this + 4),
          isPaused))
    {
      WTF::RunLoop::TimerBase::start();
    }
    else
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v5 + 2456));
      uint64_t v8 = *((void *)this + 4);
      if (*(unsigned char *)(v8 + 2496))
      {
        uint64_t v9 = (const void *)WebKit::VideoPresentationManagerProxy::playerViewController(*((void *)this + 54), *(void *)(v8 + 2488));
        if (v9)
        {
          uint64_t v10 = v9;
          CFRetain(v9);
          uint64_t v11 = *((void *)this + 5);
          if (v11) {
            uint64_t v12 = *(void *)(v11 + 8);
          }
          else {
            uint64_t v12 = 0;
          }
          (*(void (**)(uint64_t))(*(void *)v12 + 1592))(v12);
          (*(void (**)(uint64_t, const void *))(*(void *)v12 + 1176))(v12, v10);
          (*(void (**)(uint64_t))(*(void *)v12 + 1600))(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_198D2F8F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (*(unsigned char *)(v1 + 2496))
  {
    uint64_t v2 = (uint64_t)this;
    uint64_t v3 = *((void *)this + 54);
    if (v3)
    {
      uint64_t v4 = *(void *)(v1 + 2488);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(this + 6, (uint64_t)(this + 4));
      uint64_t v5 = *(atomic_uint **)(v2 + 24);
      if (v5) {
        atomic_fetch_add(v5, 1u);
      }
      uint64_t v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v6 = &unk_1EE9D08F0;
      *((void *)v6 + 1) = v4;
      *((void *)v6 + 2) = v5;
      uint64_t v7 = v6;
      WebKit::VideoPresentationManagerProxy::requestBitmapImageForCurrentTime(v3, v4, (uint64_t *)&v7);
      this = v7;
      uint64_t v7 = 0;
      if (this) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 8))(this);
      }
    }
  }
  return this;
}

void sub_198D2FA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::scheduleActivityStateUpdate(WebKit::WebPageProxy *this)
{
  int isScheduled = WebCore::RunLoopObserver::isScheduled(*((WebCore::RunLoopObserver **)this + 122));
  uint64_t result = (unsigned int *)[MEMORY[0x1E4F39CF8] currentState];
  int v4 = (int)result;
  if (isScheduled) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    *((unsigned char *)this + 993) = 0;
    uint64_t result = (unsigned int *)WebCore::RunLoopObserver::invalidate(*((WebCore::RunLoopObserver **)this + 122));
  }
  if (!*((unsigned char *)this + 993))
  {
    *((unsigned char *)this + 993) = 1;
    if (v4)
    {
      uint64_t v6 = (void *)MEMORY[0x1E4F39CF8];
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3321888768;
      v10[2] = ___ZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEv_block_invoke;
      v10[3] = &__block_descriptor_40_e8_32c64_ZTSKZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEvE3__0_e5_v8__0l;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
      uint64_t v7 = (atomic_uint *)*((void *)this + 3);
      if (v7)
      {
        atomic_fetch_add(v7, 1u);
        atomic_fetch_add(v7, 1u);
      }
      uint64_t v11 = (WTF *)v7;
      [v6 addCommitHandler:v10 forPhase:2];
      if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v7);
        WTF::fastFree((WTF *)v7, v8);
      }
      uint64_t result = (unsigned int *)v11;
      uint64_t v11 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v8);
        }
      }
    }
    else
    {
      uint64_t v9 = *((void *)this + 122);
      return (unsigned int *)MEMORY[0x1F416E2A0](v9, 0, 5);
    }
  }
  return result;
}

void sub_198D2FC1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14) {
      goto LABEL_6;
    }
  }
  else if (!v14)
  {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEv_block_invoke(WTF::WorkQueue *a1)
{
  uint64_t v2 = WTF::WorkQueue::main(a1);
  uint64_t v3 = (atomic_uint *)*((void *)a1 + 4);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9D07C0;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 32))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D2FD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c64_ZTSKZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEvE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c64_ZTSKZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEvE3__0(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t WebKit::WebPageProxy::addActivityStateUpdateCompletionHandler(unint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 993))
  {
    unint64_t v2 = result;
    uint64_t v3 = *(unsigned int *)(result + 1012);
    if (v3 == *(_DWORD *)(result + 1008))
    {
      uint64_t result = WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 1000, v3 + 1, (unint64_t)a2);
      uint64_t v3 = *(unsigned int *)(v2 + 1012);
      int v4 = v3 + 1;
      uint64_t v5 = *(void *)(v2 + 1000);
      uint64_t v6 = *(void *)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v4 = v3 + 1;
      uint64_t v5 = *(void *)(result + 1000);
      uint64_t v6 = *a2;
      *a2 = 0;
    }
    *(void *)(v5 + 8 * v3) = v6;
    *(_DWORD *)(v2 + 1012) = v4;
  }
  else
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a2);
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::createAppHighlightInSelectedRange(IPC::Encoder *this, char a2, char a3)
{
  if (!*((unsigned char *)this + 801))
  {
    uint64_t v3 = this;
    if (*((unsigned char *)this + 800))
    {
      WebKit::WebPageProxy::setUpHighlightsObserver(this);
      CFRetain(*((CFTypeRef *)v3 + 1));
      uint64_t v6 = *((void *)v3 + 32);
      uint64_t v7 = *(void *)(*((void *)v3 + 4) + 1928);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 2182;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      uint64_t v16 = v8;
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, a2);
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, a3);
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v9 = &unk_1EE9D0918;
      v9[1] = v3;
      uint64_t v9[2] = v3;
      v14[0] = v9;
      v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      char v15 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v16, 0, (uint64_t)v14, 1);
      if (v15)
      {
        uint64_t v11 = v14[0];
        v14[0] = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      this = v16;
      uint64_t v16 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v10);
        return (IPC::Encoder *)WTF::fastFree(v12, v13);
      }
    }
  }
  return this;
}

void sub_198D2FFEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebPageProxy::setUpHighlightsObserver(WTF *this)
{
  if (!*((void *)this + 173))
  {
    uint64_t v1 = this;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    unint64_t v2 = (atomic_uint *)*((void *)v1 + 3);
    if (v2) {
      atomic_fetch_add(v2, 1u);
    }
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3321888768;
    v6[2] = ___ZN6WebKit12WebPageProxy23setUpHighlightsObserverEv_block_invoke;
    v6[3] = &__block_descriptor_40_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e8_v12__0B8l;
    if (v2) {
      atomic_fetch_add(v2, 1u);
    }
    uint64_t v7 = (WTF *)v2;
    uint64_t v4 = [objc_alloc((Class)getSYNotesActivationObserverClass()) initWithHandler:v6];
    uint64_t v5 = (const void *)*((void *)v1 + 173);
    *((void *)v1 + 173) = v4;
    if (v5) {
      CFRelease(v5);
    }
    this = v7;
    uint64_t v7 = 0;
    if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (WTF *)WTF::fastFree(this, v3);
      if (!v2) {
        return this;
      }
    }
    else if (!v2)
    {
      return this;
    }
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2);
      return (WTF *)WTF::fastFree((WTF *)v2, v3);
    }
  }
  return this;
}

void sub_198D301BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14) {
      goto LABEL_6;
    }
  }
  else if (!v14)
  {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::restoreAppHighlightsAndScrollToIndex(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v22 = a3;
  if (!*(unsigned char *)(result + 801))
  {
    uint64_t v3 = (WTF *)result;
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v5 = *((unsigned int *)a2 + 3);
      if (!v5) {
        goto LABEL_15;
      }
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v21) = *((_DWORD *)a2 + 3);
      uint64_t v20 = WTF::fastMalloc((WTF *)(16 * v5));
      uint64_t v6 = *((unsigned int *)a2 + 3);
      if (v6)
      {
        uint64_t v7 = *a2;
        uint64_t v8 = 8 * v6;
        do
        {
          WebCore::SharedMemory::createHandle();
          if (v26)
          {
            WTF::MachSendRight::MachSendRight();
            uint64_t v24 = v25[1];
            if (HIDWORD(v21) == v21)
            {
              WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SharedMemoryHandle>((uint64_t)&v20, (unint64_t)&v23);
            }
            else
            {
              *(void *)(WTF::MachSendRight::MachSendRight() + 8) = v24;
              ++HIDWORD(v21);
            }
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v23);
            if (v26) {
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v25);
            }
          }
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
        unint64_t v9 = HIDWORD(v21);
      }
      else
      {
LABEL_15:
        unint64_t v9 = 0;
      }
      WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v20, v9);
      WebKit::WebPageProxy::setUpHighlightsObserver(v3);
      uint64_t v10 = *((void *)v3 + 32);
      uint64_t v11 = *(void *)(*((void *)v3 + 4) + 1928);
      uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v12 = 2381;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 70) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      uint64_t v23 = v12;
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, HIDWORD(v21));
      if (HIDWORD(v21))
      {
        unint64_t v13 = v20;
        uint64_t v14 = 16 * HIDWORD(v21);
        do
        {
          IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v12, v13);
          v13 += 16;
          v14 -= 16;
        }
        while (v14);
      }
      IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v12, (uint64_t)&v22);
      LOBYTE(v25[0]) = 0;
      char v26 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v23, 0, (uint64_t)v25, 1);
      if (v26)
      {
        uint64_t v16 = v25[0];
        v25[0] = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      uint64_t v17 = v23;
      uint64_t v23 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v15);
        WTF::fastFree(v18, v19);
      }
      return WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v15);
    }
  }
  return result;
}

void sub_198D3044C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
  {
    uint64_t v17 = a14;
    a14 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  int v18 = a12;
  a12 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12WebPageProxy23setUpHighlightsObserverEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9D0940;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  *(void *)(v4 + 8) = v3;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v7 = v4;
  WTF::ensureOnMainRunLoop();
  uint64_t result = v7;
  if (v7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (!v3) {
      return result;
    }
  }
  else if (!v3)
  {
    return result;
  }
  if (atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    return WTF::fastFree((WTF *)v3, v5);
  }
  return result;
}

void sub_198D305D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::WebPageProxy::startApplePayAMSUISession(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (byte_1E93CF6D4 == 1)
  {
    if (qword_1E93CF710) {
      goto LABEL_3;
    }
LABEL_26:
    WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(a4);
    return;
  }
  qword_1E93CF710 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleMediaServicesUI.framework/AppleMediaServicesUI", 2);
  byte_1E93CF6D4 = 1;
  if (!qword_1E93CF710) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 488))(*(void *)(a1 + 104));
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = v7;
  id v9 = objc_alloc((Class)off_1EB353008());
  uint64_t v10 = (void *)MEMORY[0x1E4F28D90];
  if (*a3) {
    uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v11 = &stru_1EEA10550;
  }
  uint64_t v12 = objc_msgSend(v10, "JSONObjectWithData:options:error:", -[__CFString dataUsingEncoding:](v11, "dataUsingEncoding:", 4), 0, 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (void *)[v9 initWithRequestDictionary:v13];
  [v14 setOriginatingURL:WTF::URL::operator NSURL *()];
  char v15 = (const void *)[(id)_MergedGlobals_31() createBagForSubProfile];
  uint64_t v16 = v15;
  if (v15) {
    CFRetain(v15);
  }
  uint64_t v17 = (void *)[objc_alloc((Class)_MergedGlobals_31()) initWithRequest:v14 bag:v16 presentingViewController:v8];
  int v18 = *(const void **)(a1 + 472);
  *(void *)(a1 + 472) = v17;
  if (v18)
  {
    CFRelease(v18);
    uint64_t v17 = *(void **)(a1 + 472);
  }
  [v17 setRemotePresentation:1];
  int v19 = (void *)[*(id *)(a1 + 472) presentEngagement];
  uint64_t v20 = v19;
  if (v19) {
    CFRetain(v19);
  }
  uint64_t v21 = *a4;
  *a4 = 0;
  uint64_t v22 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v22 = MEMORY[0x1E4F14398];
  v22[1] = 50331650;
  v22[2] = WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::{lambda(void *,AMSEngagementResult *,NSError *)#1}::__invoke;
  v22[3] = &WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::descriptor;
  v22[4] = v21;
  [v20 addFinishBlock:v22];
  _Block_release(v22);
  if (v20) {
    CFRelease(v20);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v14)
  {
    CFRelease(v14);
  }
}

void sub_198D30930(_Unwind_Exception *a1)
{
  _Block_release(v4);
  if (v2)
  {
    CFRelease(v2);
    if (v3)
    {
LABEL_8:
      CFRelease(v3);
      if (!v1) {
LABEL_7:
      }
        _Unwind_Resume(a1);
LABEL_6:
      CFRelease(v1);
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_8;
  }
  if (!v1) {
    goto LABEL_7;
  }
  goto LABEL_6;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D30A54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::abortApplePayAMSUISession(WebKit::WebPageProxy *this)
{
  uint64_t v1 = (void *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  [v1 cancel];
  if (v1)
  {
    CFRelease(v1);
  }
}

void sub_198D30AD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::setLastNavigationWasAppInitiated(WebKit::WebPageProxy *this, WebCore::ResourceRequest *a2)
{
  BOOL v4 = [(id)WebCore::ResourceRequest::nsURLRequest() attribution] == 0;
  if (*(unsigned char *)(*((void *)this + 6) + 209)) {
    BOOL v5 = *(unsigned char *)(*((void *)this + 6) + 209) == 2;
  }
  else {
    BOOL v5 = v4;
  }
  uint64_t result = WebCore::ResourceRequestBase::setIsAppInitiated(a2);
  *((unsigned char *)this + 1360) = v5;
  return result;
}

uint64_t WebKit::WebPageProxy::grantAccessToAssetServices(WebKit::WebPageProxy *this)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  v11[0] = (uint64_t)"com.apple.mobileassetd.v2";
  v11[1] = 26;
  uint64_t v2 = *(void *)(*((void *)this + 32) + 144);
  if (!v2) {
    goto LABEL_5;
  }
  if (!*(void *)(v2 + 352))
  {
    LOBYTE(v2) = 0;
LABEL_5:
    char v3 = 0;
    goto LABEL_6;
  }
  xpc_connection_get_audit_token();
  char v3 = v8[0];
  v10[0] = *(long long *)((char *)v8 + 1);
  *(_OWORD *)((char *)v10 + 15) = v8[1];
  LOBYTE(v2) = 1;
LABEL_6:
  LOBYTE(v8[0]) = v3;
  *(long long *)((char *)v8 + 1) = v10[0];
  v8[1] = *(_OWORD *)((char *)v10 + 15);
  char v9 = v2;
  WebKit::SandboxExtension::createHandlesForMachLookup(v11, 1uLL, v8, 1, 0, (uint64_t)v7);
  uint64_t v4 = *((void *)this + 32);
  *(void *)&v8[0] = v7;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GrantAccessToAssetServices>(v4, (uint64_t *)v8, 0, 0);
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

void sub_198D30C58(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GrantAccessToAssetServices>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2639;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D30D7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RevokeAccessToAssetServices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2665;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198D30ED0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DisableURLSchemeCheckInDataDetectors>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2629;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198D31020(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::switchFromStaticFontRegistryToUserFontRegistry(WebKit::WebPageProxy *this)
{
  uint64_t result = WebKit::WebProcessProxy::fontdMachExtensionHandles(*((void *)this + 32), (uint64_t)v6);
  if (v7)
  {
    uint64_t v3 = *((void *)this + 32);
    BOOL v5 = v6;
    uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SwitchFromStaticFontRegistryToUserFontRegistry>(v3, (uint64_t *)&v5, 0, 0);
    if (v7) {
      return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
    }
  }
  return result;
}

void sub_198D310EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessProxy::fontdMachExtensionHandles@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(this + 782);
  *(unsigned char *)(this + 782) = 1;
  if (v3)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return this;
  }
  v14[0] = (uint64_t)"com.apple.fonts";
  v14[1] = 16;
  uint64_t v4 = *(void *)(this + 144);
  if (!v4) {
    goto LABEL_7;
  }
  if (!*(void *)(v4 + 352))
  {
    LOBYTE(v4) = 0;
LABEL_7:
    char v5 = 0;
    goto LABEL_8;
  }
  xpc_connection_get_audit_token();
  char v5 = v10;
  v13[0] = *(_OWORD *)v11;
  *(_OWORD *)((char *)v13 + 15) = *(_OWORD *)&v11[15];
  LOBYTE(v4) = 1;
LABEL_8:
  char v10 = v5;
  *(_OWORD *)uint64_t v11 = v13[0];
  *(_OWORD *)&v11[15] = *(_OWORD *)((char *)v13 + 15);
  char v12 = v4;
  WebKit::SandboxExtension::createHandlesForMachLookup(v14, 1uLL, (long long *)&v10, 1, 0, (uint64_t)&v8);
  *(void *)a2 = v8;
  uint64_t v6 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 1;
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v7);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SwitchFromStaticFontRegistryToUserFontRegistry>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2698;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D3132C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::insertMultiRepresentationHEIC(WebKit::WebPageProxy *this, NSData *a2, NSString *a3)
{
  uint64_t v5 = *((void *)this + 32);
  if (a2)
  {
    char v7 = [(NSData *)a2 bytes];
    NSUInteger v8 = [(NSData *)a2 length];
  }
  else
  {
    char v7 = 0;
    NSUInteger v8 = 0;
  }
  v12[0] = v7;
  v12[1] = v8;
  MEMORY[0x19972EAD0](&v11, a3);
  v13[0] = v12;
  v13[1] = &v11;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertMultiRepresentationHEIC>(v5, (uint64_t)v13, *(void *)(*((void *)this + 4) + 1928), 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D31450(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebPageProxy::cocoaView@<X0>(WebKit::WebPageProxy *this@<X0>, void *a2@<X8>)
{
  id result = objc_loadWeakRetained((id *)(*((void *)this + 4) + 2016));
  *a2 = result;
  return result;
}

uint64_t WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation(WebKit::WebPageProxy *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*((void *)this + 6) + 312) || (*(_WORD *)(*((void *)this + 4) + 64) & 4) != 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)this + 4);
    uint64_t v8 = *(void *)(v7 + 760);
    uint64_t v9 = *(void *)(v7 + 1928);
    uint64_t v10 = *(void *)(*((void *)this + 32) + 136);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    }
    int v11 = 134219008;
    char v12 = this;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    __int16 v15 = 2048;
    uint64_t v16 = v9;
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 1024;
    int v20 = v4;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::WebPageProxy::shouldForceForegroundPriorityForClientNavigation() returns %d based on PageClient::canTakeForegroundAssertions()", (uint8_t *)&v11, 0x2Cu);
  }
  return v4;
}

void sub_198D31660(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::shouldAllowAutoFillForCellularIdentifiers(WebKit::WebPageProxy *this)
{
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*((void *)this + 4) + 1000), &v7);
  MEMORY[0x19972E890](v8, &v7, 0);
  uint64_t shouldAllowAutoFillForCellularIdentifiers = WebKit::shouldAllowAutoFillForCellularIdentifiers((WebKit *)v8, v1);
  uint64_t v4 = v8[0];
  v8[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return shouldAllowAutoFillForCellularIdentifiers;
}

void sub_198D31738(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::setMediaCapability(WebKit::WebPageProxy *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = v4 + 2504;
  buf[0] = 0;
  char v48 = 0;
  if (*(unsigned char *)(v4 + 2584))
  {
    WebKit::MediaCapability::MediaCapability((uint64_t)buf, v5);
    char v48 = 1;
  }
  std::__optional_destruct_base<WebKit::MediaCapability,false>::reset[abi:sn180100](v5, (WTF::StringImpl *)a2);
  if (v48) {
    WebKit::WebPageProxy::deactivateMediaCapability(a1, (id *)buf);
  }
  std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v6);
  uint64_t v8 = *((void *)a1 + 4);
  if (*(unsigned __int8 *)(v8 + 2584) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(unsigned char *)(v8 + 2584))
    {
      uint64_t v9 = *(void *)(a2 + 8);
      if (v9) {
        CFRetain(*(CFTypeRef *)(a2 + 8));
      }
      uint64_t v10 = *(const void **)(v8 + 2512);
      *(void *)(v8 + 2512) = v9;
      if (v10) {
        CFRelease(v10);
      }
      *(unsigned char *)(v8 + 2528) = *(unsigned char *)(a2 + 24);
      WTF::URL::operator=(v8 + 2536, a2 + 32);
      uint64_t v11 = *(void *)(a2 + 72);
      *(void *)(a2 + 72) = 0;
      char v12 = *(const void **)(v8 + 2576);
      *(void *)(v8 + 2576) = v11;
      if (v12) {
        CFRelease(v12);
      }
    }
  }
  else
  {
    uint64_t v13 = v8 + 2504;
    if (*(unsigned char *)(v8 + 2584))
    {
      std::__optional_destruct_base<WebKit::MediaCapability,false>::reset[abi:sn180100](v13, v7);
    }
    else
    {
      WebKit::MediaCapability::MediaCapability(v13, a2);
      *(unsigned char *)(v8 + 2584) = 1;
    }
  }
  uint64_t v14 = *((void *)a1 + 4);
  int v15 = *(unsigned __int8 *)(v14 + 2584);
  uint64_t v16 = qword_1EB358320;
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(*((void *)a1 + 32) + 136);
      int v19 = v18 ? *(_DWORD *)(v18 + 108) : 0;
      uint64_t v25 = *(void *)(v14 + 760);
      uint64_t v26 = *(void *)(v14 + 1928);
      WebKit::MediaCapability::environmentIdentifier((id *)(v14 + 2504), (uint64_t *)&v35);
      WTF::String::utf8();
      CGSize v27 = v36 ? (char *)v36 + 16 : 0;
      if (!*(unsigned char *)(*((void *)a1 + 4) + 2584)) {
        goto LABEL_52;
      }
      WTF::String::utf8();
      if (v34) {
        char v28 = (char *)v34 + 16;
      }
      else {
        char v28 = 0;
      }
      *(_DWORD *)long long buf = 134219267;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v38 = 2048;
      uint64_t v39 = v25;
      __int16 v40 = 2048;
      uint64_t v41 = v26;
      __int16 v42 = 1024;
      int v43 = v19;
      __int16 v44 = 2082;
      uint64_t v45 = v27;
      __int16 v46 = 2085;
      uint64_t v47 = v28;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setMediaCapability: creating (envID=%{public}s) for URL '%{sensitive}s'", buf, 0x3Au);
      if (v34)
      {
        if (*(_DWORD *)v34 == 1) {
          WTF::fastFree(v34, v29);
        }
        else {
          --*(_DWORD *)v34;
        }
      }
      uint64_t v30 = v36;
      uint64_t v36 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1) {
          WTF::fastFree(v30, v29);
        }
        else {
          --*(_DWORD *)v30;
        }
      }
      uint64_t v31 = v35;
      uint64_t v35 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      uint64_t v14 = *((void *)a1 + 4);
      if (!*(unsigned char *)(v14 + 2584)) {
LABEL_52:
      }
        __break(1u);
    }
    uint64_t v32 = *((void *)a1 + 32);
    WebKit::MediaCapability::environmentIdentifier((id *)(v14 + 2504), (uint64_t *)&v36);
    *(void *)long long buf = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaEnvironment>(v32, (uint64_t **)buf, *(void *)(*((void *)a1 + 4) + 1928));
  }
  else
  {
    if (v17)
    {
      uint64_t v20 = *(void *)(v14 + 760);
      uint64_t v21 = *(void *)(v14 + 1928);
      uint64_t v22 = *(void *)(*((void *)a1 + 32) + 136);
      if (v22) {
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v38 = 2048;
      uint64_t v39 = v20;
      __int16 v40 = 2048;
      uint64_t v41 = v21;
      __int16 v42 = 1024;
      int v43 = v22;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setMediaCapability: clearing media capability", buf, 0x26u);
      uint64_t v14 = *((void *)a1 + 4);
    }
    uint64_t v23 = *((void *)a1 + 32);
    uint64_t v36 = 0;
    *(void *)long long buf = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaEnvironment>(v23, (uint64_t **)buf, *(void *)(v14 + 1928));
  }
  id result = v36;
  uint64_t v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D31B38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::deactivateMediaCapability(WebKit::WebPageProxy *this, id *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358320;
  if (os_log_type_enabled((os_log_t)qword_1EB358320, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      int v7 = *(_DWORD *)(v6 + 108);
    }
    else {
      int v7 = 0;
    }
    uint64_t v8 = *(void *)(v5 + 760);
    uint64_t v9 = *(void *)(v5 + 1928);
    WebKit::MediaCapability::environmentIdentifier(a2, (uint64_t *)&v23);
    WTF::String::utf8();
    uint64_t v10 = v24;
    WTF::String::utf8();
    uint64_t v11 = (char *)v10 + 16;
    if (!v10) {
      uint64_t v11 = 0;
    }
    *(_DWORD *)long long buf = 134219267;
    if (v22) {
      char v12 = (char *)v22 + 16;
    }
    else {
      char v12 = 0;
    }
    uint64_t v26 = this;
    __int16 v27 = 2048;
    uint64_t v28 = v8;
    __int16 v29 = 2048;
    uint64_t v30 = v9;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 2082;
    uint64_t v34 = v11;
    __int16 v35 = 2085;
    uint64_t v36 = v12;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::deactivateMediaCapability: deactivating (envID=%{public}s) for URL '%{sensitive}s'", buf, 0x3Au);
    if (v22)
    {
      if (*(_DWORD *)v22 == 1) {
        WTF::fastFree(v22, v13);
      }
      else {
        --*(_DWORD *)v22;
      }
    }
    uint64_t v14 = v24;
    uint64_t v24 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1) {
        WTF::fastFree(v14, v13);
      }
      else {
        --*(_DWORD *)v14;
      }
    }
    int v15 = v23;
    uint64_t v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  uint64_t v16 = *((void *)this + 32);
  BOOL v17 = (unsigned int *)(v16 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
  uint64_t v18 = *(void *)(*(void *)(v16 + 512) + 8);
  if (v18) {
    int v19 = (CFTypeRef *)(v18 - 16);
  }
  else {
    int v19 = 0;
  }
  CFRetain(v19[1]);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
  uint64_t v20 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v19);
  WebKit::ExtensionCapabilityGranter::setMediaCapabilityActive(v20, (WebKit::MediaCapability *)a2, 0);
  uint64_t v21 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v19);
  WebKit::ExtensionCapabilityGranter::revoke(v21, (const WebKit::ExtensionCapability *)a2);
  if (v18) {
    CFRelease(v19[1]);
  }
}

void sub_198D31DFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::extensionCapabilityGranter(WebKit::WebProcessPool *this)
{
  uint64_t result = *((void *)this + 117);
  if (!result)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::ExtensionCapabilityGranter,WebKit::ExtensionCapabilityGranterClient &>((uint64_t)this + 32, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = (void *)*((void *)this + 117);
    *((void *)this + 117) = v3;
    if (v4)
    {
      std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100]((uint64_t)this + 936, v4);
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100]((uint64_t)&v6, v5);
      }
    }
    return *((void *)this + 117);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::resetMediaCapability(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, a3);
  if (result)
  {
    WebKit::WebPageProxy::currentURL(this, (uint64_t *)v22);
    MEMORY[0x19972E890](&v24, v22, 0);
    uint64_t v8 = v22[0];
    v22[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800) && (*((unsigned char *)&v24 + 8) & 1) != 0)
    {
      uint64_t v11 = *((void *)this + 4);
      if (!*(unsigned char *)(v11 + 2584) || (WTF::protocolHostAndPortAreEqual((WTF *)(v11 + 2536), &v24, v7) & 1) == 0)
      {
        WebKit::MediaCapability::MediaCapability((uint64_t)&v17, (uint64_t *)&v24);
        WebKit::MediaCapability::MediaCapability((uint64_t)v22, (uint64_t)&v17);
        char v23 = 1;
        WebKit::WebPageProxy::setMediaCapability(this, (uint64_t)v22);
        std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v12);
        CFTypeRef v13 = cf;
        CFTypeRef cf = 0;
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v14 = v20;
        uint64_t v20 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v10);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        if (v19)
        {
          *((void *)v19 + 1) = 0;
          int v15 = (unsigned int *)v19;
          int v19 = 0;
          if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v10);
          }
        }
        else
        {
          int v19 = 0;
        }
        CFTypeRef v16 = v18;
        BOOL v17 = &unk_1EE9B2A08;
        CFTypeRef v18 = 0;
        if (v16) {
          CFRelease(v16);
        }
      }
    }
    else
    {
      LOBYTE(v22[0]) = 0;
      char v23 = 0;
      WebKit::WebPageProxy::setMediaCapability(this, (uint64_t)v22);
      std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v9);
    }
    uint64_t result = (WTF::StringImpl *)v24.m_string.m_impl.m_ptr;
    v24.m_string.m_impl.m_ptr = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198D320E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, WTF *a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, WTF::StringImpl *a19)
{
  uint64_t v21 = *(WTF::StringImpl **)(v19 - 56);
  *(void *)(v19 - 56) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::shouldDeactivateMediaCapability(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!*(unsigned char *)(v1 + 2584)) {
    return 0;
  }
  uint64_t result = WebKit::MediaCapability::isActivatingOrActive((WebKit::MediaCapability *)(v1 + 2504));
  if (!result) {
    return result;
  }
  if ((*(_DWORD *)(*((void *)this + 4) + 824) & 0x7FDFC00) != 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 76);
  return !v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0 || *(void *)(v5 + 8) == 0;
}

uint64_t WebKit::WebPageProxy::setWritingToolsActive(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 1456) != a2)
  {
    char v2 = a2;
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 40);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 1792))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
    *(unsigned char *)(v3 + 1456) = v2;
    uint64_t v6 = *(void *)(v3 + 40);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
    (*(void (**)(uint64_t))(*(void *)v7 + 1800))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 1600);
    return v8(v7);
  }
  return this;
}

void sub_198D3241C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::writingToolsBehavior(WebKit::WebPageProxy *this)
{
  if (*((unsigned char *)this + 688))
  {
    return 3;
  }
  else
  {
    char v2 = (unsigned char *)*((void *)this + 4);
    if (*(unsigned char *)(*((void *)this + 6) + 515)) {
      BOOL v3 = v2[249] == 0;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3 && v2[255] == 0)
    {
      if (v2[253]) {
        BOOL v5 = *(unsigned char *)(*((void *)this + 6) + 515) == 3;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5) {
        return 3;
      }
      else {
        return 2;
      }
    }
    else
    {
      return 0;
    }
  }
}

unsigned int *WebKit::WebPageProxy::proofreadingSessionDidReceiveSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v7 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v9[2] = a4;
  v9[3] = a5;
  char v10 = a6;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ProofreadingSessionDidReceiveSuggestions,WTF::CompletionHandler<void ()(void)>>(v7, (uint64_t)v9, a7, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v7) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  return result;
}

void sub_198D32520(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::willEndWritingToolsSession(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v6 = a2;
  char v7 = a3;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::WillEndWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(v4, (uint64_t)&v6, a4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v4) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  return result;
}

void sub_198D325AC(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::proofreadingSessionSuggestionTextRectsInRootViewCoordinates(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  BOOL v5 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v3, &v5, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

void sub_198D3262C(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::updateTextVisibilityForActiveWritingToolsSession(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  uint64_t v7 = a2;
  char v8 = a3;
  uint64_t v9 = a4;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateTextVisibilityForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(v5, (uint64_t)&v7, a5, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v5) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  }
  return result;
}

void sub_198D326B8(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::textPreviewDataForActiveWritingToolsSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  uint64_t v5 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TextPreviewDataForActiveWritingToolsSession,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(v3, &v5, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

void sub_198D32738(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::decorateTextReplacementsForActiveWritingToolsSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  uint64_t v5 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DecorateTextReplacementsForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(v3, &v5, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

void sub_198D327B8(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::setSelectionForActiveWritingToolsSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  uint64_t v5 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SetSelectionForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(v3, &v5, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

void sub_198D32838(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::enableSourceTextAnimationAfterElementWithID(uint64_t this, const WTF::String *a2)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v2 = *(void *)(this + 256);
      uint64_t v3 = (uint64_t *)a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EnableSourceTextAnimationAfterElementWithID>(v2, &v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::enableTextAnimationTypeForElementWithID(uint64_t this, const WTF::String *a2)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v2 = *(void *)(this + 256);
      uint64_t v3 = (uint64_t *)a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EnableTextAnimationTypeForElementWithID>(v2, &v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::addTextAnimationForAnimationID(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::UUID *a3, const TextAnimationData *a4, const WebCore::TextIndicatorData *a5)
{
  uint64_t v6 = 0;
  WebKit::WebPageProxy::addTextAnimationForAnimationIDWithCompletionHandler((uint64_t)this, (uint64_t)a2, (unint64_t *)a3, &a4->var0, a5, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D32948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::addTextAnimationForAnimationIDWithCompletionHandler(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned __int8 *a4, const WebCore::TextIndicatorData *a5, uint64_t *a6)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = *a3;
  if (*a6)
  {
    if (v12 <= 1)
    {
      CFTypeRef v13 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::addTextAnimationForAnimationIDWithCompletionHandler(IPC::Connect"
                             "ion &, const WTF::UUID &, const WebCore::TextAnimationData &, const WebCore::TextIndicatorD"
                             "ata &, CompletionHandler<void (WebCore::TextAnimationRunMode)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1293: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(a2 + 98) = 1;
      WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()(a6);
      return;
    }
LABEL_7:
    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = (uint64_t *)(v14 + 2224);
    uint64_t v16 = *(void *)(v14 + 2224);
    if (v16
      || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::TextIndicatorData,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::TextIndicatorData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(v14 + 2224)),
          (uint64_t v16 = *v15) != 0))
    {
      unsigned int v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      unsigned int v17 = 0;
    }
    *(_DWORD *)long long buf = -1640531527;
    *(_WORD *)&uint8_t buf[4] = 0;
    buf[6] = 0;
    WTF::addArgs<WTF::UUID>(buf, a3);
    uint64_t v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v17;
    uint64_t v19 = (void *)(v16 + (v18 << 7));
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    if (*(_OWORD *)v19 != 0)
    {
      uint64_t v22 = 0;
      int v23 = 1;
      while (v20 != a3[1] || v21 != *a3)
      {
        if (!(v21 ^ 1 | v20)) {
          uint64_t v22 = v19;
        }
        uint64_t v18 = (v18 + v23) & v17;
        uint64_t v19 = (void *)(v16 + (v18 << 7));
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        ++v23;
        if (*(_OWORD *)v19 == 0)
        {
          if (v22)
          {
            *((_OWORD *)v22 + 6) = 0u;
            *((_OWORD *)v22 + 7) = 0u;
            *((_OWORD *)v22 + 4) = 0u;
            *((_OWORD *)v22 + 5) = 0u;
            *((_OWORD *)v22 + 2) = 0u;
            *((_OWORD *)v22 + 3) = 0u;
            *(_OWORD *)uint64_t v22 = 0u;
            *((_OWORD *)v22 + 1) = 0u;
            *((_DWORD *)v22 + 20) = 1065353216;
            *(_OWORD *)(v22 + 11) = 0u;
            *(_OWORD *)(v22 + 13) = 0u;
            *((unsigned char *)v22 + 120) = 0;
            --*(_DWORD *)(*v15 - 16);
            uint64_t v19 = v22;
          }
          goto LABEL_21;
        }
      }
LABEL_45:
      if (!*a6) {
        goto LABEL_71;
      }
      uint64_t v36 = *(void *)(a1 + 32);
      uint64_t v37 = (uint64_t *)(v36 + 2232);
      uint64_t v38 = *(void *)(v36 + 2232);
      if (v38
        || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(v36 + 2232), 0), (uint64_t v38 = *v37) != 0))
      {
        unsigned int v39 = *(_DWORD *)(v38 - 8);
      }
      else
      {
        unsigned int v39 = 0;
      }
      *(_DWORD *)long long buf = -1640531527;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 0;
      WTF::addArgs<WTF::UUID>(buf, a3);
      uint64_t v40 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v39;
      uint64_t v41 = (void *)(v38 + 32 * v40);
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      if (*(_OWORD *)v41 != 0)
      {
        __int16 v44 = 0;
        int v45 = 1;
        while (v42 != a3[1] || v43 != *a3)
        {
          if (!(v43 ^ 1 | v42)) {
            __int16 v44 = v41;
          }
          uint64_t v40 = (v40 + v45) & v39;
          uint64_t v41 = (void *)(v38 + 32 * v40);
          uint64_t v43 = *v41;
          uint64_t v42 = v41[1];
          ++v45;
          if (*(_OWORD *)v41 == 0)
          {
            if (v44)
            {
              *__int16 v44 = 0;
              v44[1] = 0;
              v44[2] = 0;
              --*(_DWORD *)(*v37 - 16);
              uint64_t v41 = v44;
            }
            goto LABEL_60;
          }
        }
LABEL_71:
        unint64_t v55 = (uint64_t *)(*(void *)(a1 + 32) + 2240);
        uint64_t v56 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v55, (uint64_t *)a3);
        WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::take(buf, v55, v56);
        if (*(void *)buf)
        {
          WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v129, a5);
          char v136 = 1;
          WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>::operator()((uint64_t *)buf, (uint64_t)v129);
          if (v136)
          {
            if ((v135 & 0x8000000000000) != 0)
            {
              v118 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v118);
                WTF::fastFree((WTF *)v118, v57);
              }
            }
            char v58 = v134;
            v134 = 0;
            if (v58)
            {
              if (v58[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v58 + 8))(v58);
              }
              else {
                --v58[2];
              }
            }
            uint64_t v59 = v133;
            v133 = 0;
            if (v59)
            {
              if (v59[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v59 + 8))(v59);
              }
              else {
                --v59[2];
              }
            }
            uint64_t v60 = v132;
            v132 = 0;
            if (v60)
            {
              if (v60[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v60 + 8))(v60);
              }
              else {
                --v60[2];
              }
            }
            unint64_t v61 = v130;
            if (v130)
            {
              v130 = 0;
              int v131 = 0;
              WTF::fastFree(v61, v57);
            }
          }
          if (*(void *)buf) {
            (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
          }
        }
        if (a4[1] != 2) {
          goto LABEL_169;
        }
        int v62 = *a4;
        if (v62 != 1)
        {
LABEL_118:
          if (v62 == 2)
          {
            uint64_t v82 = *(void *)(a1 + 32);
            uint64_t v83 = *(void *)(v82 + 2248);
            if (v83)
            {
              unsigned int v84 = *(_DWORD *)(v83 - 8);
              LODWORD(v137) = -1640531527;
              WORD2(v137) = 0;
              BYTE6(v137) = 0;
              WTF::addArgs<WTF::UUID>(&v137, a3);
              int v85 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v137);
              uint64_t v86 = (uint64_t *)(v82 + 2248);
              unint64_t v87 = *a3;
              unint64_t v88 = a3[1];
              uint64_t v89 = v85 & v84;
              CFTypeRef v90 = (uint64_t *)(v83 + 32 * v89);
              uint64_t v91 = *v90;
              uint64_t v92 = v90[1];
              if (v92 == v88 && v91 == v87)
              {
LABEL_131:
                unint64_t v97 = (void *)(v83 + 32 * v89);
                uint64_t v98 = *v86;
                if (!*v86)
                {
LABEL_136:
                  uint64_t v101 = v97[2];
                  uint64_t v100 = v97[3];
                  *unint64_t v97 = 1;
                  v97[1] = 0;
                  ++*(_DWORD *)(*v86 - 16);
                  uint64_t v102 = *v86;
                  if (*v86) {
                    int v103 = *(_DWORD *)(v102 - 12) - 1;
                  }
                  else {
                    int v103 = -1;
                  }
                  *(_DWORD *)(v102 - 12) = v103;
                  uint64_t v104 = *v86;
                  if (*v86)
                  {
                    unsigned int v105 = 6 * *(_DWORD *)(v104 - 12);
                    unsigned int v106 = *(_DWORD *)(v104 - 4);
                    if (v105 < v106 && v106 >= 9) {
                      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v86, v106 >> 1);
                    }
                  }
                  *(void *)long long buf = v101;
                  *(void *)&uint8_t buf[8] = v100;
                  if (v101 | v100)
                  {
                    v108 = (uint64_t *)(*(void *)(a1 + 32) + 2240);
                    v109 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v108, (uint64_t *)buf);
                    WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::take(&v137, v108, v109);
                    if (v137)
                    {
                      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v121, a5);
                      char v128 = 1;
                      WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>::operator()(&v137, (uint64_t)v121);
                      if (v128)
                      {
                        if ((v127 & 0x8000000000000) != 0)
                        {
                          v120 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFLL);
                          if (atomic_fetch_add((atomic_uint *volatile)(v127 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                          {
                            atomic_store(1u, v120);
                            WTF::fastFree((WTF *)v120, v110);
                          }
                        }
                        v111 = v126;
                        v126 = 0;
                        if (v111)
                        {
                          if (v111[2] == 1) {
                            (*(void (**)(_DWORD *))(*(void *)v111 + 8))(v111);
                          }
                          else {
                            --v111[2];
                          }
                        }
                        v112 = v125;
                        v125 = 0;
                        if (v112)
                        {
                          if (v112[2] == 1) {
                            (*(void (**)(_DWORD *))(*(void *)v112 + 8))(v112);
                          }
                          else {
                            --v112[2];
                          }
                        }
                        v113 = v124;
                        v124 = 0;
                        if (v113)
                        {
                          if (v113[2] == 1) {
                            (*(void (**)(_DWORD *))(*(void *)v113 + 8))(v113);
                          }
                          else {
                            --v113[2];
                          }
                        }
                        v114 = v122;
                        if (v122)
                        {
                          v122 = 0;
                          int v123 = 0;
                          WTF::fastFree(v114, v110);
                        }
                      }
                      if (v137) {
                        (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
                      }
                    }
                  }
                  goto LABEL_169;
                }
                uint64_t v99 = *(unsigned int *)(v98 - 4);
              }
              else
              {
                int v94 = 1;
                while (v91 | v92)
                {
                  uint64_t v89 = (v89 + v94) & v84;
                  uint64_t v95 = (uint64_t *)(v83 + 32 * v89);
                  uint64_t v91 = *v95;
                  uint64_t v92 = v95[1];
                  BOOL v96 = v92 == v88 && v91 == v87;
                  ++v94;
                  if (v96) {
                    goto LABEL_131;
                  }
                }
                uint64_t v98 = *v86;
                if (!*v86) {
                  goto LABEL_169;
                }
                uint64_t v99 = *(unsigned int *)(v98 - 4);
                unint64_t v97 = (void *)(v98 + 32 * v99);
              }
              if ((void *)(v98 + 32 * v99) != v97) {
                goto LABEL_136;
              }
            }
          }
LABEL_169:
          uint64_t v115 = *(void *)(a1 + 40);
          if (v115) {
            uint64_t v116 = *(void *)(v115 + 8);
          }
          else {
            uint64_t v116 = 0;
          }
          (*(void (**)(uint64_t))(*(void *)v116 + 1592))(v116);
          (*(void (**)(uint64_t, unint64_t *, unsigned __int8 *))(*(void *)v116 + 1824))(v116, a3, a4);
          (*(void (**)(uint64_t))(*(void *)v116 + 1600))(v116);
          return;
        }
        uint64_t v63 = *(void *)(a1 + 32);
        char v64 = (uint64_t *)(v63 + 2248);
        uint64_t v65 = *(void *)(v63 + 2248);
        if (v65
          || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(v63 + 2248)),
              (uint64_t v65 = *v64) != 0))
        {
          unsigned int v66 = *(_DWORD *)(v65 - 8);
        }
        else
        {
          unsigned int v66 = 0;
        }
        uint64_t v67 = a4 + 48;
        *(_DWORD *)long long buf = -1640531527;
        *(_WORD *)&uint8_t buf[4] = 0;
        buf[6] = 0;
        WTF::addArgs<WTF::UUID>(buf, (void *)a4 + 6);
        uint64_t v68 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v66;
        unint64_t v69 = (void *)(v65 + 32 * v68);
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        if (*(_OWORD *)v69 != 0)
        {
          uint64_t v72 = 0;
          int v73 = 1;
          while (v70 != *((void *)a4 + 7) || v71 != *v67)
          {
            if (!(v71 ^ 1 | v70)) {
              uint64_t v72 = v69;
            }
            uint64_t v68 = (v68 + v73) & v66;
            unint64_t v69 = (void *)(v65 + 32 * v68);
            uint64_t v71 = *v69;
            uint64_t v70 = v69[1];
            ++v73;
            if (*(_OWORD *)v69 == 0)
            {
              if (v72)
              {
                *uint64_t v72 = 0u;
                v72[1] = 0u;
                --*(_DWORD *)(*v64 - 16);
                unint64_t v69 = v72;
              }
              goto LABEL_107;
            }
          }
          goto LABEL_117;
        }
LABEL_107:
        *(_OWORD *)unint64_t v69 = *(_OWORD *)v67;
        unint64_t v75 = a3[1];
        v69[2] = *a3;
        v69[3] = v75;
        uint64_t v76 = *v64;
        if (*v64) {
          int v77 = *(_DWORD *)(v76 - 12) + 1;
        }
        else {
          int v77 = 1;
        }
        *(_DWORD *)(v76 - 12) = v77;
        uint64_t v78 = *v64;
        if (*v64) {
          int v79 = *(_DWORD *)(v78 - 12);
        }
        else {
          int v79 = 0;
        }
        uint64_t v80 = (*(_DWORD *)(v78 - 16) + v79);
        unint64_t v81 = *(unsigned int *)(v78 - 4);
        if (v81 > 0x400)
        {
          if (v81 > 2 * v80) {
            goto LABEL_117;
          }
        }
        else if (3 * v81 > 4 * v80)
        {
LABEL_117:
          int v62 = *a4;
          goto LABEL_118;
        }
        WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v64);
        goto LABEL_117;
      }
LABEL_60:
      *(_OWORD *)uint64_t v41 = *(_OWORD *)a3;
      uint64_t v47 = *a6;
      *a6 = 0;
      uint64_t v48 = v41[2];
      v41[2] = v47;
      if (v48) {
        (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
      }
      uint64_t v49 = *v37;
      if (*v37) {
        int v50 = *(_DWORD *)(v49 - 12) + 1;
      }
      else {
        int v50 = 1;
      }
      *(_DWORD *)(v49 - 12) = v50;
      uint64_t v51 = *v37;
      if (*v37) {
        int v52 = *(_DWORD *)(v51 - 12);
      }
      else {
        int v52 = 0;
      }
      uint64_t v53 = (*(_DWORD *)(v51 - 16) + v52);
      unint64_t v54 = *(unsigned int *)(v51 - 4);
      if (v54 > 0x400)
      {
        if (v54 > 2 * v53) {
          goto LABEL_71;
        }
      }
      else if (3 * v54 > 4 * v53)
      {
        goto LABEL_71;
      }
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v37, (uint64_t)v41);
      goto LABEL_71;
    }
LABEL_21:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)a3;
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)buf, a5);
    WebCore::TextIndicatorData::operator=((uint64_t)(v19 + 2), (long long *)buf);
    if ((v144 & 0x8000000000000) != 0)
    {
      v117 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v117);
        WTF::fastFree((WTF *)v117, v25);
      }
    }
    uint64_t v26 = v143;
    v143 = 0;
    if (v26)
    {
      if (v26[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
      }
      else {
        --v26[2];
      }
    }
    __int16 v27 = v142;
    v142 = 0;
    if (v27)
    {
      if (v27[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
      }
      else {
        --v27[2];
      }
    }
    uint64_t v28 = v141;
    v141 = 0;
    if (v28)
    {
      if (v28[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
      }
      else {
        --v28[2];
      }
    }
    __int16 v29 = v139;
    if (v139)
    {
      v139 = 0;
      int v140 = 0;
      WTF::fastFree(v29, v25);
    }
    uint64_t v30 = *v15;
    if (*v15) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 12) = v31;
    uint64_t v32 = *v15;
    if (*v15) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
    unint64_t v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34) {
        goto LABEL_45;
      }
    }
    else if (3 * v35 > 4 * v34)
    {
      goto LABEL_45;
    }
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::TextIndicatorData,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::TextIndicatorData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v15);
    goto LABEL_45;
  }
  if (v12 > 1) {
    goto LABEL_7;
  }
  v119 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::addTextAnimationForAnimationIDWithCompletionHandler(IPC::Connection "
                         "&, const WTF::UUID &, const WebCore::TextAnimationData &, const WebCore::TextIndicatorData &, C"
                         "ompletionHandler<void (WebCore::TextAnimationRunMode)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v119, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1295: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
}

void sub_198D33554(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      uint64_t v42 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  uint64_t v41 = *(void *)(v39 - 232);
  if (v41) {
    (*(void (**)(void))(*(void *)v41 + 8))(*(void *)(v39 - 232));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D3399C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v15, a2);
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v23, (uint64_t)v15);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v23);
  if (v30)
  {
    if ((v29 & 0x8000000000000) != 0)
    {
      CFTypeRef v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v3);
      }
    }
    uint64_t v4 = v28;
    uint64_t v28 = 0;
    if (v4)
    {
      if (v4[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      }
      else {
        --v4[2];
      }
    }
    uint64_t v5 = v27;
    __int16 v27 = 0;
    if (v5)
    {
      if (v5[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      }
      else {
        --v5[2];
      }
    }
    uint64_t v6 = v26;
    uint64_t v26 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    uint64_t v7 = v24;
    if (v24)
    {
      URL v24 = 0;
      int v25 = 0;
      WTF::fastFree(v7, v3);
    }
  }
  if (v22)
  {
    if ((v21 & 0x8000000000000) != 0)
    {
      uint64_t v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v3);
      }
    }
    char v8 = v20;
    uint64_t v20 = 0;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
    uint64_t v9 = v19;
    uint64_t v19 = 0;
    if (v9)
    {
      if (v9[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    char v10 = v18;
    uint64_t v18 = 0;
    if (v10)
    {
      if (v10[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
      else {
        --v10[2];
      }
    }
    uint64_t v11 = v16;
    if (v16)
    {
      uint64_t v16 = 0;
      int v17 = 0;
      WTF::fastFree(v11, v3);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_198D33C8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30,int a31,uint64_t a32,_DWORD *a33,_DWORD *a34,_DWORD *a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a38)
  {
    if ((a36 & 0x8000000000000) != 0)
    {
      uint64_t v40 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
    }
    if (a35)
    {
      if (a35[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a35 + 8))(a35);
      }
      else {
        --a35[2];
      }
    }
    if (a34)
    {
      if (a34[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a34 + 8))(a34);
      }
      else {
        --a34[2];
      }
    }
    if (a33)
    {
      if (a33[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a33 + 8))(a33);
      }
      else {
        --a33[2];
      }
    }
    if (a30) {
      WTF::fastFree(a30, a2);
    }
  }
  if (a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      uint64_t v41 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebPageProxy::callCompletionHandlerForAnimationID(uint64_t *result, uint64_t *a2)
{
  if (!*((unsigned char *)result + 801))
  {
    if (*((unsigned char *)result + 800))
    {
      uint64_t v2 = (uint64_t *)(result[4] + 2232);
      uint64_t v3 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v2, a2);
      uint64_t result = WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::take(v2, v3, &v4);
      if (v4)
      {
        WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()((uint64_t *)&v4);
        uint64_t result = v4;
        uint64_t v4 = 0;
        if (result) {
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
      }
    }
  }
  return result;
}

void sub_198D33FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v29 = -1640531527;
  __int16 v30 = 0;
  char v31 = 0;
  WTF::addArgs<WTF::UUID>(&v29, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  uint64_t v11 = result & v9;
  unint64_t v12 = (void *)(v8 + 32 * v11);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    int v15 = 0;
    int v16 = 1;
    do
    {
      if (v13 == a2[1] && v14 == *a2)
      {
        uint64_t v21 = *a1;
        if (*a1) {
          uint64_t v22 = *(unsigned int *)(v21 - 4);
        }
        else {
          uint64_t v22 = 0;
        }
        char v28 = 0;
        uint64_t v27 = v21 + 32 * v22;
        goto LABEL_34;
      }
      if (!(v14 ^ 1 | v13)) {
        int v15 = v12;
      }
      uint64_t v11 = (v11 + v16) & v9;
      unint64_t v12 = (void *)(v8 + 32 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      void *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      unint64_t v12 = v15;
    }
  }
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
  uint64_t v18 = *a3;
  *a3 = 0;
  uint64_t result = v12[2];
  void v12[2] = v18;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v23 = *a1;
  if (*a1) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_27:
      uint64_t result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (uint64_t)v12);
      unint64_t v12 = (void *)result;
      uint64_t v23 = *a1;
      if (*a1) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_27;
  }
  uint64_t v27 = v23 + 32 * v26;
  char v28 = 1;
LABEL_34:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::getTextIndicatorForID(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v46[0] = 0;
    char v53 = 0;
    uint64_t result = (IPC::Encoder *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
    goto LABEL_3;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 2224);
  if (!v10)
  {
LABEL_39:
    v46[0] = 0;
    char v53 = 0;
    uint64_t v26 = *(void *)(a1 + 256);
    uint64_t v27 = *(void *)(v9 + 1928);
    char v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v28 = 2186;
    *((void *)v28 + 1) = v27;
    *((void *)v28 + 66) = (char *)v28 + 16;
    *((void *)v28 + 67) = 512;
    *((void *)v28 + 68) = 0;
    *((void *)v28 + 70) = 0;
    *((void *)v28 + 69) = 0;
    IPC::Encoder::encodeHeader(v28);
    unint64_t v54 = v28;
    IPC::ArgumentCoder<WTF::UUID,void>::encode(v28, a2);
    uint64_t v29 = *a3;
    *a3 = 0;
    __int16 v30 = (void *)WTF::fastMalloc((WTF *)0x10);
    *__int16 v30 = &unk_1EE9D0AF8;
    v30[1] = v29;
    uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v37[0] = v30;
    v37[1] = v31;
    char v38 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v54, 0, (uint64_t)v37, 1);
    if (v38)
    {
      uint64_t v32 = v37[0];
      v37[0] = 0;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
    }
    uint64_t result = v54;
    unint64_t v54 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v5);
LABEL_55:
      uint64_t result = (IPC::Encoder *)WTF::fastFree(result, v5);
      goto LABEL_3;
    }
    goto LABEL_3;
  }
  unsigned int v11 = *(_DWORD *)(v10 - 8);
  LODWORD(v37[0]) = -1640531527;
  WORD2(v37[0]) = 0;
  BYTE6(v37[0]) = 0;
  WTF::addArgs<WTF::UUID>(v37, a2);
  int v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v37);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v15 = v12 & v11;
  int v16 = (uint64_t *)(v10 + (v15 << 7));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v18 != v14 || v17 != v13)
  {
    int v20 = 1;
    while (v17 | v18)
    {
      uint64_t v15 = (v15 + v20) & v11;
      uint64_t v21 = (uint64_t *)(v10 + (v15 << 7));
      uint64_t v17 = *v21;
      uint64_t v18 = v21[1];
      BOOL v22 = v18 == v14 && v17 == v13;
      ++v20;
      if (v22) {
        goto LABEL_21;
      }
    }
    uint64_t v9 = *(void *)(a1 + 32);
    goto LABEL_39;
  }
LABEL_21:
  WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v46, (const WebCore::TextIndicatorData *)(v10 + (v15 << 7) + 16));
  char v53 = 1;
  WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v37, (const WebCore::TextIndicatorData *)v46);
  char v45 = 1;
  uint64_t result = (IPC::Encoder *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
  if (v45)
  {
    if ((v44 & 0x8000000000000) != 0)
    {
      uint64_t v36 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v5);
      }
    }
    uint64_t v23 = v43;
    uint64_t v43 = 0;
    if (v23)
    {
      if (v23[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
      }
      else {
        --v23[2];
      }
    }
    int v33 = v42;
    uint64_t v42 = 0;
    if (v33)
    {
      if (v33[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v33 + 8))(v33);
      }
      else {
        --v33[2];
      }
    }
    uint64_t v34 = v41;
    uint64_t v41 = 0;
    if (v34)
    {
      if (v34[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
      }
      else {
        --v34[2];
      }
    }
    uint64_t result = v39;
    if (v39)
    {
      uint64_t v39 = 0;
      int v40 = 0;
      goto LABEL_55;
    }
  }
LABEL_3:
  if (v53)
  {
    if ((v52 & 0x8000000000000) != 0)
    {
      unint64_t v35 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v5);
      }
    }
    uint64_t v6 = v51;
    uint64_t v51 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    int v24 = v50;
    int v50 = 0;
    if (v24)
    {
      if (v24[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
      }
      else {
        --v24[2];
      }
    }
    uint64_t v25 = v49;
    uint64_t v49 = 0;
    if (v25)
    {
      if (v25[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
      }
      else {
        --v25[2];
      }
    }
    uint64_t result = v47;
    if (v47)
    {
      uint64_t v47 = 0;
      int v48 = 0;
      return (IPC::Encoder *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_198D34620(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,uint64_t a33,_DWORD *a34,_DWORD *a35,_DWORD *a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      int v40 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  if (a39)
  {
    if ((a37 & 0x8000000000000) != 0)
    {
      uint64_t v41 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, a2);
      }
    }
    if (a36)
    {
      if (a36[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a36 + 8))(a36);
      }
      else {
        --a36[2];
      }
    }
    if (a35)
    {
      if (a35[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a35 + 8))(a35);
      }
      else {
        --a35[2];
      }
    }
    if (a34)
    {
      if (a34[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a34 + 8))(a34);
      }
      else {
        --a34[2];
      }
    }
    if (a31) {
      WTF::fastFree(a31, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D3499C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateUnderlyingTextVisibilityForTextAnimationID(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    uint64_t v6 = a2;
    char v7 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(v5, (uint64_t)&v6, a4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::didEndPartialIntelligenceTextAnimationImpl(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1808))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198D34B18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::intelligenceTextAnimationsDidComplete(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v1 = *(void *)(this + 256);
      char v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::IntelligenceTextAnimationsDidComplete>(v1, (uint64_t)&v2, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

void WebKit::WebPageProxy::removeTextAnimationForAnimationID(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::UUID *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3 <= 1uLL)
  {
    uint64_t v8 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v9 = 136446210;
      uint64_t v10 = "void WebKit::WebPageProxy::removeTextAnimationForAnimationID(IPC::Connection &, const WTF::UUID &)";
      _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1394: Invalid message dispatched %{public}s", (uint8_t *)&v9, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v5 + 1592))(v5, a2);
    (*(void (**)(uint64_t, const WTF::UUID *))(*(void *)v5 + 1832))(v5, a3);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 1600);
    v6(v5);
  }
}

void sub_198D34D48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(WebKit::WebPageProxy *this, IPC::Connection *a2, const UUID *a3, IntRect a4)
{
  IntSize m_size = a4.m_size;
  IntPoint m_location = a4.m_location;
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v8 + 1592))(v8, a2);
  (*(void (**)(uint64_t, const UUID *, IntPoint, IntSize))(*(void *)v8 + 1776))(v8, a3, m_location, m_size);
  int v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 1600);

  return v9(v8);
}

void sub_198D34E70(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 1784))(v7, a3, a4);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 1600);

  return v8(v7);
}

void sub_198D34F90(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::createTextIndicatorForElementWithID(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    LOBYTE(v15[0]) = 0;
    char v17 = 0;
    return (IPC::Encoder *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
  }
  uint64_t v6 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2185;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2);
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9D0B48;
  v10[1] = v9;
  v15[0] = v10;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v18, 0, (uint64_t)v15, 1);
  if (v16)
  {
    uint64_t v12 = v15[0];
    v15[0] = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v13, v14);
    if (v6) {
      return (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
    }
  }
  else if (v6)
  {
    return (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  return result;
}

void sub_198D3525C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  uint64_t v27 = *(IPC::Encoder **)(v25 - 56);
  *(void *)(v25 - 56) = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, a2);
    WTF::fastFree(v28, v29);
  }
  if (v24) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::playPredominantOrNowPlayingMediaSession(uint64_t a1, uint64_t *a2)
{
  if (WebKit::WebPageProxy::tryToSendCommandToActiveControlledVideo((uint64_t **)a1, 1))
  {
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    char v6 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(v5, (uint64_t)&v6, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

BOOL WebKit::WebPageProxy::tryToSendCommandToActiveControlledVideo(uint64_t **a1, uint64_t a2)
{
  if (!WebKit::WebPageProxy::hasActiveVideoForControlsManager((WebKit::WebPageProxy *)a1)) {
    return 0;
  }
  WebKit::PlaybackSessionManagerProxy::controlsManagerInterface(a1[53], (uint64_t *)&v13);
  uint64_t v4 = v13;
  uint64_t v5 = WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(v13);
  uint64_t v7 = v5;
  if (v5)
  {
    uint64_t v8 = *(void *)(v5 + 8);
    if (v8) {
      goto LABEL_8;
    }
    uint64_t v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v8 = 1;
    *(void *)(v8 + 8) = v7;
    uint64_t v9 = *(unsigned int **)(v7 + 8);
    *(void *)(v7 + 8) = v8;
    if (!v9) {
      goto LABEL_8;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
LABEL_8:
    }
      atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    uint64_t v4 = v13;
    if (!v13) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (!v4) {
      goto LABEL_14;
    }
  }
  if (*((_DWORD *)v4 + 4) == 1)
  {
    (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(void *)v4 + 8))(v4);
    if (v8) {
      goto LABEL_15;
    }
    return 0;
  }
  --*((_DWORD *)v4 + 4);
LABEL_14:
  if (!v8) {
    return 0;
  }
LABEL_15:
  uint64_t v10 = *(void *)(v8 + 8);
  BOOL v11 = v10 != 0;
  if (v10)
  {
    LOBYTE(v13) = 0;
    char v14 = 0;
    __int16 v15 = 0;
    (*(void (**)(uint64_t, uint64_t, WebCore::PlaybackSessionInterfaceIOS **))(*(void *)v10 + 248))(v10, a2, &v13);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  return v11;
}

void sub_198D35644(_Unwind_Exception *exception_object, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPasteboardProxy::grantAccess(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(a1 + 16, a2);
  if (!result || !*a3 || !*((_DWORD *)*a3 + 1)) {
    return result;
  }
  MEMORY[0x199734490](&cf, a3);
  uint64_t v10 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (uint64_t *)(a1 + 32);
  uint64_t result = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v12, a3, v9);
  char v14 = result;
  uint64_t v15 = *v12;
  if (*v12) {
    v15 += 32 * *(unsigned int *)(v15 - 4);
  }
  if ((unsigned int *)v15 != result && *((void *)result + 1) == v10)
  {
    char v16 = (unsigned int **)(result + 4);
    unint64_t v17 = result[7];
    if (v17)
    {
      unint64_t v18 = 0;
      uint64_t v19 = *v16;
      int v20 = *v16 + 2;
      while (1)
      {
        uint64_t v21 = *((void *)v20 - 1);
        if (v21)
        {
          if (*(void *)(v21 + 8) == a2) {
            break;
          }
        }
        ++v18;
        v20 += 16;
        if (v17 == v18) {
          goto LABEL_15;
        }
      }
      if (a4 == 1)
      {
        if (v18 >= v17)
        {
          __break(0xC471u);
          return result;
        }
        *int v20 = 1;
      }
      int v51 = 0;
      uint64_t v52 = &v19[4 * v17];
      char v53 = v19;
      unint64_t v54 = v52;
      unint64_t v55 = (unint64_t)v52;
      do
      {
        uint64_t result = *(unsigned int **)v19;
        if (!*(void *)v19 || !*((void *)result + 1))
        {
          if (v55 == *((void *)v14 + 2) + 16 * v14[7])
          {
            unint64_t v55 = (unint64_t)v19;
          }
          else if (v19 != v54)
          {
            WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping(v54, v19, v55);
            v55 += (char *)v53 - (char *)v54;
            uint64_t result = *(unsigned int **)v19;
          }
          *(void *)uint64_t v19 = 0;
          unint64_t v54 = v19 + 4;
          if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
          }
          ++v51;
        }
        v19 += 4;
        v53 += 4;
      }
      while (v19 < v52);
      uint64_t v56 = v14[7];
      uint64_t v57 = (unsigned int *)(*((void *)v14 + 2) + 16 * v56);
      if (v54 != v57)
      {
        uint64_t result = WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping(v54, v57, v55);
        LODWORD(v56) = v14[7];
      }
      unsigned int v50 = v56 - v51;
    }
    else
    {
LABEL_15:
      uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
      BOOL v22 = *(atomic_uint **)(a2 + 8);
      if (v22) {
        atomic_fetch_add(v22, 1u);
      }
      CFTypeRef cf = v22;
      LOBYTE(v61[0]) = a4;
      uint64_t v23 = v14[7];
      if (v23 == v14[6])
      {
        unint64_t v24 = WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 4, v23 + 1, (unint64_t)&cf);
        uint64_t v26 = v14[7];
        uint64_t v27 = *((void *)v14 + 2) + 16 * v26;
        uint64_t v28 = *(void *)v24;
        *(void *)unint64_t v24 = 0;
        *(void *)uint64_t v27 = v28;
        *(unsigned char *)(v27 + 8) = *(unsigned char *)(v24 + 8);
        uint64_t result = (unsigned int *)cf;
        v14[7] = v26 + 1;
        CFTypeRef cf = 0;
        if (result) {
          goto LABEL_47;
        }
        return result;
      }
      uint64_t v49 = *((void *)v14 + 2) + 16 * v23;
      *(void *)uint64_t v49 = v22;
      *(unsigned char *)(v49 + 8) = a4;
      unsigned int v50 = v23 + 1;
    }
    v14[7] = v50;
    return result;
  }
  char v58 = (const void *)v10;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v29 = *(atomic_uint **)(a2 + 8);
  if (v29) {
    atomic_fetch_add(v29, 1u);
  }
  int v62 = (WTF *)v29;
  char v63 = a4;
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v59, (uint64_t)&v62, 1uLL);
  uint64_t v31 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12),
        (uint64_t v31 = *v12) != 0))
  {
    int v32 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    int v32 = 0;
  }
  unsigned int v33 = *((_DWORD *)*a3 + 4);
  if (v33 >= 0x100) {
    unsigned int v34 = v33 >> 8;
  }
  else {
    unsigned int v34 = WTF::StringImpl::hashSlowCase(*a3);
  }
  unint64_t v35 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v37 = v34 & v32;
    char v38 = (uint64_t *)(v31 + 32 * v37);
    uint64_t v39 = (WTF *)*v38;
    if (*v38 == -1)
    {
      unint64_t v35 = (uint64_t *)(v31 + 32 * v37);
      goto LABEL_34;
    }
    if (!v39) {
      break;
    }
    if (WTF::equal(v39, *a3, v30))
    {
      uint64_t v43 = v31 + 32 * v37;
      *(void *)(v43 + 8) = v58;
      WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v43 + 16, (unsigned int *)v59);
      goto LABEL_46;
    }
LABEL_34:
    unsigned int v34 = i + v37;
  }
  if (v35)
  {
    *(_OWORD *)unint64_t v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    --*(_DWORD *)(*v12 - 16);
    char v38 = v35;
  }
  WTF::String::operator=(v38, a3);
  CFTypeRef cf = v58;
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v61, v59);
  v38[1] = (uint64_t)cf;
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v38 + 2), v61);
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v61, v40);
  uint64_t v41 = *v12;
  if (*v12) {
    int v42 = *(_DWORD *)(v41 - 12) + 1;
  }
  else {
    int v42 = 1;
  }
  *(_DWORD *)(v41 - 12) = v42;
  uint64_t v45 = *v12;
  if (*v12) {
    int v46 = *(_DWORD *)(v45 - 12);
  }
  else {
    int v46 = 0;
  }
  uint64_t v47 = (*(_DWORD *)(v45 - 16) + v46);
  unint64_t v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47) {
LABEL_45:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12);
  }
  else if (3 * v48 <= 4 * v47)
  {
    goto LABEL_45;
  }
LABEL_46:
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v44);
  uint64_t result = (unsigned int *)v62;
  int v62 = 0;
  if (result)
  {
LABEL_47:
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v25);
    }
  }
  return result;
}

void sub_198D35B58(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *cf, uint64_t a14, uint64_t a15, WTF *a16)
{
  if (cf)
  {
    if (atomic_fetch_add((atomic_uint *volatile)cf, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, cf);
      WTF::fastFree((WTF *)cf, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

void *WebKit::WebPasteboardProxy::revokeAccess(WebKit::WebPasteboardProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 4);
  uint64_t v5 = (uint64_t)result;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 32 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      uint64_t result = WebKit::WebPasteboardProxy::PasteboardAccessInformation::revokeAccess((unsigned int *)(v5 + 8), a2);
      while (1)
      {
        v5 += 32;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = v7;
LABEL_10:
      ;
    }
    while ((void *)v5 != v9);
  }
  return result;
}

unsigned int *WebKit::WebPasteboardProxy::PasteboardAccessInformation::revokeAccess(unsigned int *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v2 = this[5];
  if (v2)
  {
    uint64_t v3 = this;
    for (unint64_t i = *((void *)this + 1); ; i += 16)
    {
      this = *(unsigned int **)i;
      if (*(void *)i)
      {
        if (*((WebKit::WebProcessProxy **)this + 1) == a2) {
          break;
        }
      }
      if (!--v2) {
        return this;
      }
    }
    *(void *)unint64_t i = 0;
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, this);
      unint64_t v5 = i;
      WTF::fastFree((WTF *)this, a2);
      unint64_t i = v5;
    }
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping((unsigned int *)(i + 16), (unsigned int *)(*((void *)v3 + 1) + 16 * v3[5]--), i);
  }
  return this;
}

uint64_t WebKit::WebPasteboardProxy::accessType(WebKit::WebPasteboardProxy *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!*a3 || !*((_DWORD *)*a3 + 1))
  {
    int v20 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_21:
      unsigned __int8 v21 = 0;
      int v22 = 0;
      *((unsigned char *)a2 + 98) = 1;
      return v21 | (v22 << 8);
    }
    *(_DWORD *)CFTypeRef cf = 136446210;
    *(void *)&cf[4] = "std::optional<WebPasteboardProxy::PasteboardAccessType> WebKit::WebPasteboardProxy::accessType(I"
                        "PC::Connection &, const String &) const";
    uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 129: Inv"
          "alid message dispatched %{public}s";
LABEL_42:
    _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, v36, cf, 0xCu);
    goto LABEL_21;
  }
  uint64_t v6 = (atomic_uint *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(this, a2);
  if (!v6)
  {
    int v20 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_21;
    }
    *(_DWORD *)CFTypeRef cf = 136446210;
    *(void *)&cf[4] = "std::optional<WebPasteboardProxy::PasteboardAccessType> WebKit::WebPasteboardProxy::accessType(I"
                        "PC::Connection &, const String &) const";
    uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 132: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_42;
  }
  char v38 = this;
  uint64_t v39 = (unsigned int *)(v6 + 4);
  atomic_fetch_add(v6 + 4, 1u);
  uint64_t v37 = (WebKit::WebProcessProxy *)v6;
  WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)v6, (uint64_t)cf);
  if (v41)
  {
    uint64_t v8 = 8 * v41;
    uint64_t v9 = *(uint64_t **)cf;
    while (1)
    {
      uint64_t v10 = *v9;
      CFRetain(*(CFTypeRef *)(*v9 + 8));
      uint64_t v11 = *(void *)(v10 + 272);
      CFRetain(*(CFTypeRef *)(v11 + 8));
      {
        WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
      }
      if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v11 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, v12)|| *(unsigned char *)(*(void *)(v10 + 32) + 1000))
      {
        {
          WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v11 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, v13))
        {
          {
            WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
          }
          if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v11 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, v14))break; {
        }
          }
      }
      CFRelease(*(CFTypeRef *)(v11 + 8));
      CFRelease(*(CFTypeRef *)(v10 + 8));
      ++v9;
      v8 -= 8;
      if (!v8) {
        goto LABEL_17;
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
    CFRelease(*(CFTypeRef *)(v10 + 8));
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)cf, v34);
    unsigned __int8 v21 = 1;
    int v22 = 1;
  }
  else
  {
LABEL_17:
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)cf, v7);
    uint64_t v16 = *((void *)this + 4);
    if (!v16) {
      goto LABEL_37;
    }
    unsigned int v17 = *(_DWORD *)(v16 - 8);
    unsigned int v18 = *((_DWORD *)*a3 + 4);
    int v19 = v18 >= 0x100 ? v18 >> 8 : WTF::StringImpl::hashSlowCase(*a3);
    for (i = 0; ; int v19 = ++i + v24)
    {
      uint64_t v24 = v19 & v17;
      uint64_t v25 = *(WTF **)(v16 + 32 * v24);
      if (v25 != (WTF *)-1)
      {
        if (!v25)
        {
          uint64_t v26 = *((void *)v38 + 4);
          if (!v26) {
            goto LABEL_37;
          }
          uint64_t v27 = v26 + 32 * *(unsigned int *)(v26 - 4);
          goto LABEL_31;
        }
        if (WTF::equal(v25, *a3, v15)) {
          break;
        }
      }
    }
    uint64_t v27 = v16 + 32 * v24;
    uint64_t v26 = *((void *)v38 + 4);
    if (!v26) {
      goto LABEL_32;
    }
LABEL_31:
    v26 += 32 * *(unsigned int *)(v26 - 4);
    if (v26 == v27) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v30 = *(void *)(v27 + 8);
    uint64_t v29 = v27 + 8;
    uint64_t v28 = v30;
    MEMORY[0x199734490](cf, a3);
    uint64_t v31 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)cf);
    int v32 = *(const void **)cf;
    *(void *)CFTypeRef cf = 0;
    if (v32) {
      CFRelease(v32);
    }
    if (v28 == v31)
    {
      __int16 v33 = WebKit::WebPasteboardProxy::PasteboardAccessInformation::accessType(v29, v37);
      unsigned __int8 v21 = v33;
      int v22 = HIBYTE(v33);
    }
    else
    {
LABEL_37:
      unsigned __int8 v21 = 0;
      int v22 = 0;
    }
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v39);
  return v21 | (v22 << 8);
}

void sub_198D36134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, CFTypeRef cf)
{
}

uint64_t WebKit::WebPasteboardProxy::PasteboardAccessInformation::accessType(uint64_t this, WebKit::WebProcessProxy *a2)
{
  unint64_t v2 = *(unsigned int *)(this + 20);
  if (!v2)
  {
LABEL_7:
    int v6 = 0;
    return v2 | (v6 << 8);
  }
  unint64_t v3 = 0;
  uint64_t v4 = (unsigned __int8 *)(*(void *)(this + 8) + 8);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 1);
    if (v5)
    {
      if (*(WebKit::WebProcessProxy **)(v5 + 8) == a2) {
        break;
      }
    }
    ++v3;
    v4 += 16;
    if (v2 == v3)
    {
      LODWORD(v2) = 0;
      goto LABEL_7;
    }
  }
  if (v3 < v2)
  {
    LODWORD(v2) = *v4;
    int v6 = 1;
    return v2 | (v6 << 8);
  }
  __break(0xC471u);
  return this;
}

void WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(WebKit::WebPasteboardProxy *this, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebPasteboardProxy::webProcessProxyForConnection(this, a2);
  if (v10)
  {
    uint64_t v12 = (unsigned int *)v10;
    uint64_t v13 = (unsigned int *)(v10 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
    char v14 = (uint64_t *)((char *)this + 32);
    uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v14, a3, v11);
    uint64_t v16 = v15;
    uint64_t v17 = *v14;
    if (*v14) {
      v17 += 32 * *(unsigned int *)(v17 - 4);
    }
    if (v17 != v15)
    {
      uint64_t v18 = v15 + 8;
      if (*(void *)(v16 + 8) == a4)
      {
        unsigned __int16 v19 = WebKit::WebPasteboardProxy::PasteboardAccessInformation::accessType(v18, (WebKit::WebProcessProxy *)v12);
        char v20 = v19;
        if (v19 >= 0x100u)
        {
          *(void *)long long buf = a5;
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v12 + 2, (uint64_t)v12);
          unsigned __int8 v21 = (atomic_uint *)*((void *)v12 + 1);
          if (v21) {
            atomic_fetch_add(v21, 1u);
          }
          uint64_t v26 = (WTF *)v21;
          char v27 = v20;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&buf[8], (uint64_t)&v26, 1uLL);
          *(void *)(v16 + 8) = *(void *)buf;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v16 + 16, (unsigned int *)&buf[8]);
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[8], v22);
          uint64_t v24 = (unsigned int *)v26;
          uint64_t v26 = 0;
          if (v24)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v23);
            }
          }
        }
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
  else
  {
    uint64_t v25 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(IPC::Connection &, const Strin"
                           "g &, int64_t, int64_t)";
      _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 165: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
}

void sub_198D363C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  if (a9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a9);
      WTF::fastFree(a9, v12);
    }
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardTypes(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    long long v16 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a6);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v14);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v16) = 136446210;
      *(void *)((char *)&v16 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardTypes(IPC::Connection &, const Strin"
                                      "g &, std::optional<PageIdentifier>, CompletionHandler<void (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 180: Invalid message dispatched %{public}s", (uint8_t *)&v16, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    long long v16 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a6);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v14);
  }
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v12 = &unk_1EE9D0BC0;
  v12[1] = a3;
  void v12[2] = a6;
  *(void *)&long long v16 = v12;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = v16;
  *(void *)&long long v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D365C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D36698(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::determineDataOwner(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a3 || !*(_DWORD *)(a3 + 4))
  {
    unsigned __int16 v19 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_14:
      int v18 = 0;
      int v12 = 0;
      *((unsigned char *)a2 + 98) = 1;
      return v18 | (v12 << 8);
    }
    *(_DWORD *)uint64_t v23 = 136446210;
    *(void *)&v23[4] = "std::optional<DataOwnerType> WebKit::WebPasteboardProxy::determineDataOwner(IPC::Connection &, "
                         "const String &, std::optional<PageIdentifier>, PasteboardAccessIntent) const";
    int v22 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 661: Inv"
          "alid message dispatched %{public}s";
LABEL_19:
    _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, v22, v23, 0xCu);
    goto LABEL_14;
  }
  uint64_t v10 = (atomic_uint *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(a1, a2);
  if (!v10)
  {
    unsigned __int16 v19 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)uint64_t v23 = 136446210;
    *(void *)&v23[4] = "std::optional<DataOwnerType> WebKit::WebPasteboardProxy::determineDataOwner(IPC::Connection &, "
                         "const String &, std::optional<PageIdentifier>, PasteboardAccessIntent) const";
    int v22 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 664: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_19;
  }
  uint64_t v11 = (unsigned int *)(v10 + 4);
  int v12 = 1;
  atomic_fetch_add(v10 + 4, 1u);
  if (a5)
  {
    WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)v10, (uint64_t)v23);
    if (v24)
    {
      char v14 = *(uint64_t **)v23;
      uint64_t v15 = 8 * v24;
      while (1)
      {
        uint64_t v16 = *v14;
        CFRetain(*(CFTypeRef *)(*v14 + 8));
        if (*(void *)(*(void *)(v16 + 32) + 1928) == a4) {
          break;
        }
        CFRelease(*(CFTypeRef *)(v16 + 8));
        ++v14;
        v15 -= 8;
        if (!v15) {
          goto LABEL_9;
        }
      }
      int v18 = WebKit::WebPageProxy::dataOwnerForPasteboard(v16, a6);
      CFRelease(*(CFTypeRef *)(v16 + 8));
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v20);
      int v12 = 1;
    }
    else
    {
LABEL_9:
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v13);
      uint64_t v17 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t v23 = 136446210;
        *(void *)&v23[4] = "std::optional<DataOwnerType> WebKit::WebPasteboardProxy::determineDataOwner(IPC::Connection"
                             " &, const String &, std::optional<PageIdentifier>, PasteboardAccessIntent) const";
        _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 679: Invalid message dispatched %{public}s", v23, 0xCu);
      }
      int v12 = 0;
      int v18 = 0;
      *((unsigned char *)a2 + 98) = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
  return v18 | (v12 << 8);
}

void sub_198D36914(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a4 || !*(_DWORD *)(*(void *)a4 + 4))
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(IPC::Connection &, const Strin"
                           "g &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (Vector<String> &&"
                           ", Vector<SandboxExtension::Handle> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 192: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    goto LABEL_10;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a7);
LABEL_11:
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v18);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) <= 0xFFu)
  {
    unsigned __int16 v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(IPC::Connection &, const Strin"
                           "g &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (Vector<String> &&"
                           ", Vector<SandboxExtension::Handle> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 199: Invalid message dispatched %{public}s", buf, 0xCu);
    }
LABEL_10:
    *((unsigned char *)a2 + 98) = 1;
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a7);
    goto LABEL_11;
  }
  char v14 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v14 = &unk_1EE9D0BE8;
  v14[1] = a1;
  void v14[2] = a2;
  uint64_t v14[3] = a3;
  void v14[4] = a4;
  v14[5] = a7;
  *(void *)long long buf = v14;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D36B94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D36C70(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::getPasteboardStringForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
  {
    unsigned __int16 v14 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
    if (v14 < 0x100u || v14 != 1)
    {
      *(void *)uint64_t v20 = 0;
      WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(a7);
      goto LABEL_12;
    }
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) > 0xFFu)
    {
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v15 = &unk_1EE9D0C10;
      v15[1] = a7;
      void v15[2] = a3;
      v15[3] = a4;
      *(void *)uint64_t v20 = v15;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = *(WTF::StringImpl **)v20;
      *(void *)uint64_t v20 = 0;
      if (result) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      return result;
    }
    unsigned __int16 v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v20 = 136446210;
      *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::getPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 229: Invalid message dispatched %{public}s", v20, 0xCu);
    }
  }
  else
  {
    int v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v20 = 136446210;
      *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::getPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 223: Invalid message dispatched %{public}s", v20, 0xCu);
    }
  }
  *((unsigned char *)a2 + 98) = 1;
  *(void *)uint64_t v20 = 0;
  WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(a7);
LABEL_12:
  uint64_t result = *(WTF::StringImpl **)v20;
  *(void *)uint64_t v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D36F0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardStringsForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a4 || !*(_DWORD *)(*(void *)a4 + 4))
  {
    int v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardStringsForType(IPC::Connection &, co"
                                      "nst String &, const String &, std::optional<PageIdentifier>, CompletionHandler<voi"
                                      "d (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 238: Invalid message dispatched %{public}s", (uint8_t *)&v20, 0xCu);
    }
    goto LABEL_11;
  }
  unsigned __int16 v14 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v14 < 0x100u || v14 != 1)
  {
    long long v20 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) <= 0xFFu)
  {
    unsigned __int16 v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardStringsForType(IPC::Connection &, co"
                                      "nst String &, const String &, std::optional<PageIdentifier>, CompletionHandler<voi"
                                      "d (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 244: Invalid message dispatched %{public}s", (uint8_t *)&v20, 0xCu);
    }
LABEL_11:
    *((unsigned char *)a2 + 98) = 1;
    long long v20 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
  }
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v15 = &unk_1EE9D0C38;
  v15[1] = a7;
  void v15[2] = a3;
  v15[3] = a4;
  *(void *)&long long v20 = v15;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = v20;
  *(void *)&long long v20 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D371C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

WTF::StringImpl *WebKit::WebPasteboardProxy::getPasteboardBufferForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a4 || !*(_DWORD *)(*(void *)a4 + 4))
  {
    int v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v22) = 136446210;
      *(void *)((char *)&v22 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardBufferForType(IPC::Connection &, con"
                                      "st String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void"
                                      " (WebCore::PasteboardBuffer &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 253: Invalid message dispatched %{public}s", (uint8_t *)&v22, 0xCu);
    }
LABEL_11:
    *((unsigned char *)a2 + 98) = 1;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    WTF::CompletionHandler<void ()(WebCore::PasteboardBuffer &&)>::operator()(a7);
    goto LABEL_12;
  }
  unsigned __int16 v14 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v14 >= 0x100u && v14 == 1)
  {
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) > 0xFFu)
    {
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v15 = &unk_1EE9D0C60;
      v15[1] = a3;
      void v15[2] = a4;
      v15[3] = a7;
      *(void *)&long long v22 = v15;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = (WTF::StringImpl *)v22;
      *(void *)&long long v22 = 0;
      if (result) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      return result;
    }
    uint64_t v21 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v22) = 136446210;
      *(void *)((char *)&v22 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardBufferForType(IPC::Connection &, con"
                                      "st String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void"
                                      " (WebCore::PasteboardBuffer &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 259: Invalid message dispatched %{public}s", (uint8_t *)&v22, 0xCu);
    }
    goto LABEL_11;
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  WTF::CompletionHandler<void ()(WebCore::PasteboardBuffer &&)>::operator()(a7);
LABEL_12:
  unsigned __int16 v19 = v23;
  uint64_t v23 = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v17);
  }
  long long v20 = (WTF::StringImpl *)*((void *)&v22 + 1);
  *((void *)&v22 + 1) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)v22;
  *(void *)&long long v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D374C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, unsigned int *a11)
{
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::PasteboardBuffer &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D375E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardChangeCount(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a3;
  if (!v9 || !*(_DWORD *)(v9 + 4))
  {
    int v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned __int16 v14 = 136446210;
      *(void *)&void v14[4] = "void WebKit::WebPasteboardProxy::getPasteboardChangeCount(IPC::Connection &, const String &, "
                           "std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 269: Invalid message dispatched %{public}s", v14, 0xCu);
    }
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v9, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v13 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned __int16 v14 = 136446210;
      *(void *)&void v14[4] = "void WebKit::WebPasteboardProxy::getPasteboardChangeCount(IPC::Connection &, const String &, "
                           "std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 272: Invalid message dispatched %{public}s", v14, 0xCu);
    }
LABEL_8:
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a6);
  }
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v10 = &unk_1EE9D0C88;
  v10[1] = a6;
  _OWORD v10[2] = a3;
  *(void *)unsigned __int16 v14 = v10;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = *(void *)v14;
  *(void *)unsigned __int16 v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D377F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t WTF::CompletionHandler<void ()(long long)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D378BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPasteboardProxy::getPasteboardColor(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v12 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v12 < 0x100u || v12 != 1)
  {
    v18[0] = 0;
    uint64_t result = (unsigned int *)WTF::CompletionHandler<void ()(WebCore::Color &&)>::operator()(a6);
LABEL_6:
    if ((v18[0] & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v18[0] & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v18[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v15);
      }
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18[0]) = 136446210;
      *(void *)((char *)v18 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardColor(IPC::Connection &, const String"
                                     " &, std::optional<PageIdentifier>, CompletionHandler<void (WebCore::Color &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 285: Invalid message dispatched %{public}s", (uint8_t *)v18, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    v18[0] = 0;
    uint64_t result = (unsigned int *)WTF::CompletionHandler<void ()(WebCore::Color &&)>::operator()(a6);
    goto LABEL_6;
  }
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EE9D0CB0;
  v16[1] = a6;
  v16[2] = a3;
  v18[0] = v16;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = (unsigned int *)v18[0];
  v18[0] = 0;
  if (result) {
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D37AC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    uint64_t v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::Color &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D37BB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::getPasteboardURL(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, WTF::RefCountedBase *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v12 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v12 < 0x100u || v12 != 1)
  {
    *(void *)int v18 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a6, (WTF::RefCountedBase *)v18);
LABEL_6:
    uint64_t result = *(WTF::StringImpl **)v18;
    *(void *)int v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v18 = 136446210;
      *(void *)&void v18[4] = "void WebKit::WebPasteboardProxy::getPasteboardURL(IPC::Connection &, const String &, std::opt"
                           "ional<PageIdentifier>, CompletionHandler<void (const String &)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 298: Invalid message dispatched %{public}s", v18, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    *(void *)int v18 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a6, (WTF::RefCountedBase *)v18);
    goto LABEL_6;
  }
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EE9D0CD8;
  v16[1] = a6;
  v16[2] = a3;
  *(void *)int v18 = v16;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = *(WTF::StringImpl **)v18;
  *(void *)int v18 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D37DB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPasteboardProxy::addPasteboardTypes(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a3;
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)&v21[4] = "void WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 307: Invalid message dispatched %{public}s", v21, 0xCu);
    }
    goto LABEL_16;
  }
  uint64_t v13 = *((unsigned int *)a4 + 3);
  if (!v13)
  {
LABEL_8:
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) > 0xFFu)
    {
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x30);
      void *v16 = &unk_1EE9D0D00;
      v16[1] = a3;
      v16[2] = a4;
      v16[3] = a1;
      v16[4] = a2;
      v16[5] = a7;
      *(void *)uint64_t v21 = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = *(void *)v21;
      *(void *)uint64_t v21 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      return result;
    }
    long long v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)&v21[4] = "void WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 313: Invalid message dispatched %{public}s", v21, 0xCu);
    }
LABEL_16:
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a7);
  }
  uint64_t v14 = *a4;
  uint64_t v15 = 8 * v13;
  while (*(void *)v14 && *(_DWORD *)(*(void *)v14 + 4))
  {
    v14 += 8;
    v15 -= 8;
    if (!v15) {
      goto LABEL_8;
    }
  }
  int v18 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t v21 = 136446210;
    *(void *)&v21[4] = "void WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &, const String &, const Ve"
                         "ctor<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 310: Invalid message dispatched %{public}s", v21, 0xCu);
  }
  *((unsigned char *)a2 + 98) = 1;
  return WTF::CompletionHandler<void ()(long long)>::operator()(a7);
}

void sub_198D380B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardTypes(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a3;
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 325: Invalid message dispatched %{public}s", v21, 0xCu);
    }
    goto LABEL_16;
  }
  uint64_t v13 = *((unsigned int *)a4 + 3);
  if (!v13)
  {
LABEL_8:
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) > 0xFFu)
    {
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x30);
      void *v16 = &unk_1EE9D0D28;
      v16[1] = a3;
      v16[2] = a4;
      v16[3] = a1;
      v16[4] = a2;
      v16[5] = a7;
      *(void *)uint64_t v21 = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = *(void *)v21;
      *(void *)uint64_t v21 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      return result;
    }
    long long v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 331: Invalid message dispatched %{public}s", v21, 0xCu);
    }
LABEL_16:
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a7);
  }
  uint64_t v14 = *a4;
  uint64_t v15 = 8 * v13;
  while (*(void *)v14 && *(_DWORD *)(*(void *)v14 + 4))
  {
    v14 += 8;
    v15 -= 8;
    if (!v15) {
      goto LABEL_8;
    }
  }
  int v18 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t v21 = 136446210;
    *(void *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &, const String &, const Ve"
                         "ctor<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 328: Invalid message dispatched %{public}s", v21, 0xCu);
  }
  *((unsigned char *)a2 + 98) = 1;
  return WTF::CompletionHandler<void ()(long long)>::operator()(a7);
}

void sub_198D38390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPasteboardProxy::setPasteboardURL(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*a4 || !*(_DWORD *)(*a4 + 4))
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v22 = 136446210;
      *(void *)&v22[4] = "void WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &, const PasteboardURL &, c"
                           "onst String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 343: Invalid message dispatched %{public}s", v22, 0xCu);
    }
    goto LABEL_13;
  }
  uint64_t v14 = WebKit::WebPasteboardProxy::webProcessProxyForConnection(a1, a2);
  if (!v14)
  {
    long long v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v22 = 136446210;
      *(void *)&v22[4] = "void WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &, const PasteboardURL &, c"
                           "onst String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 346: Invalid message dispatched %{public}s", v22, 0xCu);
    }
LABEL_13:
    *((unsigned char *)a2 + 98) = 1;
    return (unsigned int *)WTF::CompletionHandler<void ()(long long)>::operator()(a7);
  }
  uint64_t v15 = (unsigned int *)(v14 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
  if ((*(unsigned char *)(a3 + 8) & 1) != 0 && WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(v14, a3, 0))
  {
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a4, a5, a6, 1) <= 0xFFu)
    {
      uint64_t v21 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t v22 = 136446210;
        *(void *)&v22[4] = "void WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &, const PasteboardURL &,"
                             " const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 355: Invalid message dispatched %{public}s", v22, 0xCu);
      }
      *((unsigned char *)a2 + 98) = 1;
      WTF::CompletionHandler<void ()(long long)>::operator()(a7);
    }
    else
    {
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x30);
      void *v16 = &unk_1EE9D0D50;
      v16[1] = a4;
      v16[2] = a3;
      v16[3] = a1;
      v16[4] = a2;
      v16[5] = a7;
      *(void *)uint64_t v22 = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t v17 = *(void *)v22;
      *(void *)uint64_t v22 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(long long)>::operator()(a7);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
}

void sub_198D38698(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardColor(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a3;
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    uint64_t v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v17 = 136446210;
      *(void *)&v17[4] = "void WebKit::WebPasteboardProxy::setPasteboardColor(IPC::Connection &, const String &, const "
                           "WebCore::Color &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 367: Invalid message dispatched %{public}s", v17, 0xCu);
    }
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) <= 0xFFu)
  {
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v17 = 136446210;
      *(void *)&v17[4] = "void WebKit::WebPasteboardProxy::setPasteboardColor(IPC::Connection &, const String &, const "
                           "WebCore::Color &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 370: Invalid message dispatched %{public}s", v17, 0xCu);
    }
LABEL_8:
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a7);
  }
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v13 = &unk_1EE9D0D78;
  v13[1] = a3;
  void v13[2] = a4;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a7;
  *(void *)uint64_t v17 = v13;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = *(void *)v17;
  *(void *)uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D388E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardStringForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a3;
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
    {
      if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v11, a6, a7, 1) > 0xFFu)
      {
        uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x38);
        void *v15 = &unk_1EE9D0DA0;
        v15[1] = a3;
        void v15[2] = a5;
        v15[3] = a4;
        void v15[4] = a1;
        v15[5] = a2;
        v15[6] = a8;
        *(void *)long long v20 = v15;
        WebCore::PlatformPasteboard::performAsDataOwner();
        uint64_t result = *(void *)v20;
        *(void *)long long v20 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
        return result;
      }
      uint64_t v19 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long v20 = 136446210;
        *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &, const String"
                             " &, const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 386: Invalid message dispatched %{public}s", v20, 0xCu);
      }
    }
    else
    {
      uint64_t v18 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long v20 = 136446210;
        *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &, const String"
                             " &, const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 383: Invalid message dispatched %{public}s", v20, 0xCu);
      }
    }
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a8);
  }
  uint64_t v17 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long v20 = 136446210;
    *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &, const String &, "
                         "const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 382: Invalid message dispatched %{public}s", v20, 0xCu);
  }
  *((unsigned char *)a2 + 98) = 1;
  return WTF::CompletionHandler<void ()(long long)>::operator()(a8);
}

void sub_198D38BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, (WTF::StringImpl **)a3) <= 0xFFu)
  {
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a6);
  }
  else if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v15[0]) = 136446210;
      *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(IPC::Connectio"
                                     "n &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 402: Invalid message dispatched %{public}s", (uint8_t *)v15, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a6);
  }
  else
  {
    unsigned __int16 v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9D0DC8;
    v12[1] = a6;
    void v12[2] = a3;
    v15[0] = v12;
    WebCore::PlatformPasteboard::performAsDataOwner();
    uint64_t result = v15[0];
    v15[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198D38DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

WTF::StringImpl *WebKit::WebPasteboardProxy::urlStringSuitableForLoading(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v12 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v12 < 0x100u || v12 != 1)
  {
    buf[0] = 0;
    WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(a6);
LABEL_9:
    uint64_t result = (WTF::StringImpl *)buf[0];
    buf[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "void WebKit::WebPasteboardProxy::urlStringSuitableForLoading(IPC::Connection &, con"
                                     "st String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&, String &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 415: Invalid message dispatched %{public}s", (uint8_t *)buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    buf[0] = 0;
    WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(a6);
    goto LABEL_9;
  }
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v15 = &unk_1EE9D0DF0;
  v15[1] = a3;
  void v15[2] = a6;
  buf[0] = v15;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = (WTF::StringImpl *)buf[0];
  buf[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D39018(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D39128(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardBufferForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a3;
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
    {
      if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v11, a6, a7, 1) > 0xFFu)
      {
        uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x38);
        void *v15 = &unk_1EE9D0E18;
        v15[1] = a3;
        void v15[2] = a5;
        v15[3] = a4;
        void v15[4] = a1;
        v15[5] = a2;
        v15[6] = a8;
        *(void *)long long v20 = v15;
        WebCore::PlatformPasteboard::performAsDataOwner();
        uint64_t result = *(void *)v20;
        *(void *)long long v20 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
        return result;
      }
      uint64_t v19 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long v20 = 136446210;
        *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &, const String"
                             " &, const String &, RefPtr<SharedBuffer> &&, std::optional<PageIdentifier>, CompletionHandl"
                             "er<void (int64_t)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 430: Invalid message dispatched %{public}s", v20, 0xCu);
      }
    }
    else
    {
      uint64_t v18 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long v20 = 136446210;
        *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &, const String"
                             " &, const String &, RefPtr<SharedBuffer> &&, std::optional<PageIdentifier>, CompletionHandl"
                             "er<void (int64_t)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 427: Invalid message dispatched %{public}s", v20, 0xCu);
      }
    }
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a8);
  }
  uint64_t v17 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long v20 = 136446210;
    *(void *)&v20[4] = "void WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &, const String &, "
                         "const String &, RefPtr<SharedBuffer> &&, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 426: Invalid message dispatched %{public}s", v20, 0xCu);
  }
  *((unsigned char *)a2 + 98) = 1;
  return WTF::CompletionHandler<void ()(long long)>::operator()(a8);
}

void sub_198D393E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t WebKit::WebPasteboardProxy::getNumberOfFiles(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, (WTF::StringImpl **)a3) <= 0xFFu)
  {
    return WTF::CompletionHandler<void ()(unsigned long long)>::operator()(a6);
  }
  else if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v15[0]) = 136446210;
      *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::getNumberOfFiles(IPC::Connection &, const String &"
                                     ", std::optional<PageIdentifier>, CompletionHandler<void (uint64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 451: Invalid message dispatched %{public}s", (uint8_t *)v15, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(unsigned long long)>::operator()(a6);
  }
  else
  {
    unsigned __int16 v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9D0E40;
    v12[1] = a6;
    void v12[2] = a3;
    v15[0] = v12;
    WebCore::PlatformPasteboard::performAsDataOwner();
    uint64_t result = v15[0];
    v15[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198D39600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, void *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!*a4)
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v19) = 136446210;
      *(void *)((char *)&v19 + 4) = "void WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(IPC::Connection &, "
                                      "const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<v"
                                      "oid (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 460: Invalid message dispatched %{public}s", (uint8_t *)&v19, 0xCu);
    }
    goto LABEL_11;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    long long v19 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v16);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) <= 0xFFu)
  {
    uint64_t v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v19) = 136446210;
      *(void *)((char *)&v19 + 4) = "void WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(IPC::Connection &, "
                                      "const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<v"
                                      "oid (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 466: Invalid message dispatched %{public}s", (uint8_t *)&v19, 0xCu);
    }
LABEL_11:
    *((unsigned char *)a2 + 98) = 1;
    long long v19 = 0uLL;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v16);
  }
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v14 = &unk_1EE9D0E68;
  v14[1] = a7;
  void v14[2] = a3;
  uint64_t v14[3] = a4;
  *(void *)&long long v19 = v14;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = v19;
  *(void *)&long long v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D39880(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::WebPasteboardProxy::writeCustomData(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a4;
  if (!*a4 || !*(_DWORD *)(v10 + 4))
  {
    uint64_t v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v17 = 136446210;
      *(void *)&v17[4] = "void WebKit::WebPasteboardProxy::writeCustomData(IPC::Connection &, const Vector<PasteboardCu"
                           "stomData> &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 475: Invalid message dispatched %{public}s", v17, 0xCu);
    }
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) <= 0xFFu)
  {
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v17 = 136446210;
      *(void *)&v17[4] = "void WebKit::WebPasteboardProxy::writeCustomData(IPC::Connection &, const Vector<PasteboardCu"
                           "stomData> &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 478: Invalid message dispatched %{public}s", v17, 0xCu);
    }
LABEL_8:
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(long long)>::operator()(a7);
  }
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v13 = &unk_1EE9D0E90;
  v13[1] = a4;
  void v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a7;
  *(void *)uint64_t v17 = v13;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = *(void *)v17;
  *(void *)uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D39AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t WebKit::WebPasteboardProxy::allPasteboardItemInfo(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a4;
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, (WTF::StringImpl **)a3) <= 0xFFu)
  {
    buf[0] = 0;
    char v19 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a7);
  }
  else
  {
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a3, a5, a6, 0) > 0xFFu)
    {
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v13 = &unk_1EE9D0EB8;
      v13[1] = a7;
      void v13[2] = a3;
      v13[3] = &v17;
      *(void *)long long buf = v13;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = *(void *)buf;
      *(void *)long long buf = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      return result;
    }
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::WebPasteboardProxy::allPasteboardItemInfo(IPC::Connection &, const String &, int"
                           "64_t, std::optional<PageIdentifier>, CompletionHandler<void (std::optional<Vector<PasteboardI"
                           "temInfo>> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 494: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    buf[0] = 0;
    char v19 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(a7);
  }
  if (v19) {
    return WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v15);
  }
  return result;
}

void sub_198D39CD4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13) {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D39DAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::informationForItemAtIndex(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a5;
  uint64_t v19 = a3;
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a4) <= 0xFFu)
  {
    buf[0] = 0;
    char v21 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardItemInfo> &&)>::operator()(a8);
    return std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v16);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a4, a6, a7, 0) <= 0xFFu)
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::WebPasteboardProxy::informationForItemAtIndex(IPC::Connection &, size_t, const S"
                           "tring &, int64_t, std::optional<PageIdentifier>, CompletionHandler<void (std::optional<Pasteb"
                           "oardItemInfo> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 507: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    buf[0] = 0;
    char v21 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardItemInfo> &&)>::operator()(a8);
    return std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v16);
  }
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v14 = &unk_1EE9D0EE0;
  v14[1] = a8;
  void v14[2] = a4;
  uint64_t v14[3] = &v19;
  void v14[4] = &v18;
  *(void *)long long buf = v14;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D39FA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardItemInfo> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D3A078(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardItemsCount(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, (WTF::StringImpl **)a3) <= 0xFFu)
  {
    return WTF::CompletionHandler<void ()(unsigned long long)>::operator()(a6);
  }
  else if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a3, a4, a5, 0) <= 0xFFu)
  {
    uint64_t v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v15[0]) = 136446210;
      *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardItemsCount(IPC::Connection &, const S"
                                     "tring &, std::optional<PageIdentifier>, CompletionHandler<void (uint64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 520: Invalid message dispatched %{public}s", (uint8_t *)v15, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(unsigned long long)>::operator()(a6);
  }
  else
  {
    unsigned __int16 v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9D0F08;
    v12[1] = a6;
    void v12[2] = a3;
    v15[0] = v12;
    WebCore::PlatformPasteboard::performAsDataOwner();
    uint64_t result = v15[0];
    v15[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198D3A284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

WTF::StringImpl *WebKit::WebPasteboardProxy::readStringFromPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a3;
  if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
  {
    unsigned __int16 v15 = WebKit::WebPasteboardProxy::accessType(a1, a2, a5);
    if (v15 < 0x100u || v15 != 1)
    {
      *(void *)long long buf = 0;
      WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(a8);
      goto LABEL_12;
    }
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a5, a6, a7, 0) > 0xFFu)
    {
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x28);
      void *v16 = &unk_1EE9D0F30;
      v16[1] = a8;
      v16[2] = a5;
      v16[3] = &v21;
      v16[4] = a4;
      *(void *)long long buf = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (result) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      return result;
    }
    uint64_t v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::WebPasteboardProxy::readStringFromPasteboard(IPC::Connection &, size_t, const St"
                           "ring &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 535: Invalid message dispatched %{public}s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::WebPasteboardProxy::readStringFromPasteboard(IPC::Connection &, size_t, const St"
                           "ring &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 529: Invalid message dispatched %{public}s", buf, 0xCu);
    }
  }
  *((unsigned char *)a2 + 98) = 1;
  *(void *)long long buf = 0;
  WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(a8);
LABEL_12:
  uint64_t result = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D3A544(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::readURLFromPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, char a6, uint64_t *a7)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a3;
  unsigned __int16 v13 = WebKit::WebPasteboardProxy::accessType(a1, a2, a4);
  if (v13 < 0x100u || v13 != 1)
  {
    buf[0] = 0;
    WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(a7);
LABEL_9:
    uint64_t result = (WTF::StringImpl *)buf[0];
    buf[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a4, a5, a6, 0) <= 0xFFu)
  {
    uint64_t v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "void WebKit::WebPasteboardProxy::readURLFromPasteboard(IPC::Connection &, size_t, c"
                                     "onst String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&, String &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 548: Invalid message dispatched %{public}s", (uint8_t *)buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    buf[0] = 0;
    WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(a7);
    goto LABEL_9;
  }
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v16 = &unk_1EE9D0F58;
  v16[1] = a4;
  v16[2] = &v19;
  v16[3] = a7;
  buf[0] = v16;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t result = (WTF::StringImpl *)buf[0];
  buf[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D3A7C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPasteboardProxy::readBufferFromPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6, uint64_t a7, char a8, uint64_t *a9)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v21[0] = a3;
  v21[1] = a4;
  if (*(void *)a5 && *(_DWORD *)(*(void *)a5 + 4))
  {
    unsigned __int16 v15 = WebKit::WebPasteboardProxy::accessType(a1, a2, a6);
    if (v15 < 0x100u || v15 != 1)
    {
      *(void *)long long buf = 0;
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(a9);
      goto LABEL_12;
    }
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a6, a7, a8, 0) > 0xFFu)
    {
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x28);
      void *v16 = &unk_1EE9D0F80;
      v16[1] = a9;
      v16[2] = a6;
      v16[3] = v21;
      v16[4] = a5;
      *(void *)long long buf = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      uint64_t result = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      return result;
    }
    uint64_t v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::WebPasteboardProxy::readBufferFromPasteboard(IPC::Connection &, std::optional<si"
                           "ze_t>, const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void "
                           "(RefPtr<SharedBuffer> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 565: Invalid message dispatched %{public}s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::WebPasteboardProxy::readBufferFromPasteboard(IPC::Connection &, std::optional<si"
                           "ze_t>, const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void "
                           "(RefPtr<SharedBuffer> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 559: Invalid message dispatched %{public}s", buf, 0xCu);
    }
  }
  *((unsigned char *)a2 + 98) = 1;
  *(void *)long long buf = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(a9);
LABEL_12:
  uint64_t result = *(unsigned int **)buf;
  *(void *)long long buf = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v18);
  }
  return result;
}

void sub_198D3AAB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D3AB94(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, WTF::String *a4, uint64_t a5, char a6, uint64_t *a7)
{
  v17[3] = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, (WTF::StringImpl **)a4) <= 0xFFu)
  {
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
  }
  else if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *(void *)a4, a5, a6, 0) <= 0xFFu)
  {
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v17[0]) = 136446210;
      *(void *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(IPC::Connect"
                                     "ion &, const String &, const String &, std::optional<PageIdentifier>, CompletionHan"
                                     "dler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 578: Invalid message dispatched %{public}s", (uint8_t *)v17, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
  }
  else
  {
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v14 = &unk_1EE9D0FA8;
    v14[1] = a7;
    void v14[2] = a4;
    uint64_t v14[3] = a3;
    v17[0] = v14;
    WebCore::PlatformPasteboard::performAsDataOwner();
    uint64_t result = v17[0];
    v17[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198D3ADB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void WebKit::WebPasteboardProxy::writeURLToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    unsigned __int16 v13 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    LODWORD(v15[0]) = 136446210;
    *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeURLToPasteboard(IPC::Connection &, const Pasteb"
                                   "oardURL &, const String &, std::optional<PageIdentifier>)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 589: Inv"
          "alid message dispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)v15, 0xCu);
    goto LABEL_7;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v8, a5, a6, 1) <= 0xFFu)
  {
    unsigned __int16 v13 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_7;
    }
    LODWORD(v15[0]) = 136446210;
    *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeURLToPasteboard(IPC::Connection &, const Pasteb"
                                   "oardURL &, const String &, std::optional<PageIdentifier>)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 592: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_10;
  }
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v11 = &unk_1EE9D0FD0;
  v11[1] = a4;
  v11[2] = a3;
  uint64_t v11[3] = a1;
  void v11[4] = a2;
  v15[0] = v11;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t v12 = v15[0];
  v15[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
}

void sub_198D3AFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::writeWebContentToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    unsigned __int16 v13 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    LODWORD(v15[0]) = 136446210;
    *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeWebContentToPasteboard(IPC::Connection &, const"
                                   " WebCore::PasteboardWebContent &, const String &, std::optional<PageIdentifier>)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 605: Inv"
          "alid message dispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)v15, 0xCu);
    goto LABEL_7;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v8, a5, a6, 1) <= 0xFFu)
  {
    unsigned __int16 v13 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_7;
    }
    LODWORD(v15[0]) = 136446210;
    *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeWebContentToPasteboard(IPC::Connection &, const"
                                   " WebCore::PasteboardWebContent &, const String &, std::optional<PageIdentifier>)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 608: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_10;
  }
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v11 = &unk_1EE9D0FF8;
  v11[1] = a4;
  v11[2] = a3;
  uint64_t v11[3] = a1;
  void v11[4] = a2;
  v15[0] = v11;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t v12 = v15[0];
  v15[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
}

void sub_198D3B1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::writeImageToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    unsigned __int16 v13 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    LODWORD(v15[0]) = 136446210;
    *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeImageToPasteboard(IPC::Connection &, const WebC"
                                   "ore::PasteboardImage &, const String &, std::optional<PageIdentifier>)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 621: Inv"
          "alid message dispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)v15, 0xCu);
    goto LABEL_7;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v8, a5, a6, 1) <= 0xFFu)
  {
    unsigned __int16 v13 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_7;
    }
    LODWORD(v15[0]) = 136446210;
    *(void *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeImageToPasteboard(IPC::Connection &, const WebC"
                                   "ore::PasteboardImage &, const String &, std::optional<PageIdentifier>)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 624: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_10;
  }
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v11 = &unk_1EE9D1020;
  v11[1] = a4;
  v11[2] = a3;
  uint64_t v11[3] = a1;
  void v11[4] = a2;
  v15[0] = v11;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t v12 = v15[0];
  v15[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
}

void sub_198D3B3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::writeStringToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7)
{
  v17[3] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a5;
  if (!*a5 || !*(_DWORD *)(v9 + 4))
  {
    unsigned __int16 v15 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_11:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    LODWORD(v17[0]) = 136446210;
    *(void *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &, const Str"
                                   "ing &, const String &, const String &, std::optional<PageIdentifier>)";
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 637: Inv"
          "alid message dispatched %{public}s";
LABEL_14:
    _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, v16, (uint8_t *)v17, 0xCu);
    goto LABEL_11;
  }
  if ((!*(void *)a3 || !*(_DWORD *)(*(void *)a3 + 4)) && *(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
  {
    unsigned __int16 v15 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_11;
    }
    LODWORD(v17[0]) = 136446210;
    *(void *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &, const Str"
                                   "ing &, const String &, const String &, std::optional<PageIdentifier>)";
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 638: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_14;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v9, a6, a7, 1) <= 0xFFu)
  {
    unsigned __int16 v15 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_11;
    }
    LODWORD(v17[0]) = 136446210;
    *(void *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &, const Str"
                                   "ing &, const String &, const String &, std::optional<PageIdentifier>)";
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 641: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_14;
  }
  unsigned __int16 v13 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v13 = &unk_1EE9D1048;
  v13[1] = a5;
  void v13[2] = a3;
  v13[3] = a4;
  v13[4] = a1;
  v13[5] = a2;
  v17[0] = v13;
  WebCore::PlatformPasteboard::performAsDataOwner();
  uint64_t v14 = v17[0];
  v17[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
}

void sub_198D3B608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::updateSupportedTypeIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x199734490](&cf, a3);
  WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198D3B698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPreferences::platformUpdateStringValueForKey(uint64_t this, const WTF::String **a2, const WTF::String *a3)
{
  if (*(void *)(this + 16))
  {
    uint64_t v5 = this;
    uint64_t v7 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    if (*(void *)a3) {
      uint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = &stru_1EEA10550;
    }
    Key = WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v6);
    return [v7 setObject:v8 forKey:Key];
  }
  return this;
}

uint64_t WebKit::WebPreferences::platformUpdateUInt32ValueForKey(uint64_t this, const WTF::String **a2, unsigned int a3)
{
  if (*(void *)(this + 16))
  {
    uint64_t v5 = this;
    int v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    Key = WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v7);
    return [v6 setInteger:a3 forKey:Key];
  }
  return this;
}

uint64_t WebKit::WebPreferences::platformDeleteKey(uint64_t this, const WTF::String **a2)
{
  if (*(void *)(this + 16))
  {
    uint64_t v3 = this;
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    Key = WebKit::makeKey(*(WebKit **)(v3 + 16), *(const WTF::String **)(v3 + 24), *a2, v5);
    return [v4 removeObjectForKey:Key];
  }
  return this;
}

void ___ZN6WebKit14WebProcessPool18platformInitializeENS0_31NeedsGlobalStaticInitializationE_block_invoke()
{
  id v0 = objc_alloc_init(objc_getClass("MobileGestaltHelperProxy"));
  [v0 proxyRebuildCache];
  if (v0)
  {
    CFRelease(v0);
  }
}

void sub_198D3B8D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit14WebProcessPool18platformInitializeENS0_31NeedsGlobalStaticInitializationE_block_invoke_2()
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v34);
  if (v35)
  {
    uint64_t v1 = v34;
    uint64_t v31 = &v34[v35];
    while (1)
    {
      int v32 = v1;
      uint64_t v2 = *v1;
      uint64_t v3 = *(unsigned int *)(v2 + 84);
      if (v3) {
        break;
      }
LABEL_78:
      uint64_t v1 = v32 + 1;
      if (v32 + 1 == v31) {
        return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v0);
      }
    }
    uint64_t v4 = *(uint64_t **)(v2 + 72);
    __int16 v33 = &v4[v3];
    while (1)
    {
      uint64_t v5 = *v4;
      int v6 = (atomic_uint *)(*v4 + 16);
      atomic_fetch_add(v6, 1u);
      int v51 = 0;
      uint64_t v52 = 0;
      int v53 = 0;
      char v54 = 1;
      int v55 = 0;
      __int16 v56 = 256;
      int v57 = 0;
      WebKit::operator<<((uint64_t)&v51, v5);
      if (!*(unsigned char *)(v5 + 704)) {
        break;
      }
      uint64_t v7 = *(WTF::StringImpl **)(v5 + 696);
      if (!v7) {
        break;
      }
      int v8 = *((_DWORD *)v7 + 1);
      *(_DWORD *)v7 += 2;
      if (!v8 || MEMORY[0x19972E990](v7, "nullOrigin", 10))
      {
        char v9 = 0;
LABEL_11:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        unsigned int v50 = *(WTF::StringImpl **)buf;
        goto LABEL_13;
      }
      char v9 = 0;
      *(_DWORD *)v7 += 2;
      unsigned int v50 = v7;
LABEL_13:
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      int v45 = 0;
      char v46 = 1;
      int v47 = 0;
      __int16 v48 = 256;
      int v49 = 0;
      WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)v5, (uint64_t)&v41);
      if (v42)
      {
        uint64_t v10 = v41;
        uint64_t v11 = 8 * v42;
        do
        {
          WTF::TextStream::operator<<();
          WebKit::WebPageProxy::currentURL(*v10, (uint64_t *)buf);
          WTF::TextStream::operator<<();
          unsigned __int16 v13 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        WTF::TextStream::operator<<();
      }
      uint64_t v14 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        WTF::TextStream::release((uint64_t *)&v39, (WTF::TextStream *)&v51);
        WTF::String::utf8();
        if (v40) {
          uint64_t v16 = (char *)v40 + 16;
        }
        else {
          uint64_t v16 = 0;
        }
        WTF::String::utf8();
        if (v38) {
          uint64_t v17 = (char *)v38 + 16;
        }
        else {
          uint64_t v17 = 0;
        }
        WTF::TextStream::release((uint64_t *)&v36, (WTF::TextStream *)&v43);
        WTF::String::utf8();
        if (v37) {
          uint64_t v18 = (char *)v37 + 16;
        }
        else {
          uint64_t v18 = 0;
        }
        *(_DWORD *)long long buf = 134218755;
        *(void *)&void buf[4] = v5;
        __int16 v59 = 2082;
        uint64_t v60 = v16;
        __int16 v61 = 2081;
        int v62 = v17;
        __int16 v63 = 2085;
        uint64_t v64 = v18;
        _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "WebProcessProxy %p - %{public}s, domain: %{private}s, pageURLs: %{sensitive}s", buf, 0x2Au);
        uint64_t v19 = v37;
        uint64_t v37 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1) {
            WTF::fastFree(v19, v15);
          }
          else {
            --*(_DWORD *)v19;
          }
        }
        uint64_t v20 = v36;
        uint64_t v36 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        uint64_t v21 = v38;
        char v38 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1) {
            WTF::fastFree(v21, v15);
          }
          else {
            --*(_DWORD *)v21;
          }
        }
        uint64_t v22 = v40;
        int v40 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1) {
            WTF::fastFree(v22, v15);
          }
          else {
            --*(_DWORD *)v22;
          }
        }
        uint64_t v23 = v39;
        uint64_t v39 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v15);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v15);
      uint64_t v25 = v44;
      uint64_t v44 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v24);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      uint64_t v26 = v43;
      uint64_t v43 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v24);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      char v27 = v50;
      unsigned int v50 = 0;
      if (!v27) {
        goto LABEL_63;
      }
      if (*(_DWORD *)v27 != 2)
      {
        *(_DWORD *)v27 -= 2;
LABEL_63:
        if ((v9 & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_69;
      }
      WTF::StringImpl::destroy(v27, v24);
      if ((v9 & 1) == 0)
      {
LABEL_66:
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v24);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
LABEL_69:
      uint64_t v28 = v52;
      uint64_t v52 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v24);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
      uint64_t v29 = v51;
      int v51 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v24);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v6);
      if (++v4 == v33) {
        goto LABEL_78;
      }
    }
    uint64_t v7 = 0;
    char v9 = 1;
    goto LABEL_11;
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v0);
}

void sub_198D3BDB0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF *a19, uint64_t a20,WTF *a21,char a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  uint64_t v37 = a25;
  a25 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v36);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  char v38 = a24;
  a24 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v36);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  uint64_t v39 = a29;
  a29 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v36);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  if ((v34 & 1) == 0)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v36);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  int v40 = a31;
  a31 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v36);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  unsigned int v41 = a30;
  a30 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v36);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  if (v33) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v31);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v36);
  _Unwind_Resume(a1);
}

WebKit::RestrictedOpenerDomainsController *___ZN6WebKit14WebProcessPool18platformInitializeENS0_31NeedsGlobalStaticInitializationE_block_invoke_3()
{
  {
    uint64_t result = WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateSandboxAccess>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 92;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D3C0DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebProcessPool::unregisterNotificationObservers(WebKit::WebProcessPool *this)
{
  uint64_t v2 = *((unsigned int *)this + 229);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 113);
    uint64_t v4 = 4 * v2;
    do
    {
      int v5 = *v3++;
      notify_cancel(v5);
      v4 -= 4;
    }
    while (v4);
  }
  uint64_t v6 = *((unsigned int *)this + 233);
  if (v6)
  {
    uint64_t v7 = (CFTypeRef *)*((void *)this + 115);
    uint64_t v8 = 8 * v6;
    do
    {
      CFTypeRef v9 = *v7;
      if (*v7) {
        CFRetain(*v7);
      }
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", v9);
      if (v9) {
        CFRelease(v9);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F43748];
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, *((const void **)this + 62), v10, 0);
  uint64_t v12 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v12, *((const void **)this + 62), @"com.apple.webinspectord.enabled", 0);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 60));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 61));
  id v13 = [NSString alloc];
  CFStringRef v14 = (const __CFString *)[v13 initWithCString:*MEMORY[0x1E4F64CE0] encoding:4];
  unsigned __int16 v15 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v15, *((const void **)this + 62), v14, 0);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 59));
  std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100]((uint64_t *)this + 58, 0);
  uint64_t v16 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v16, *((const void **)this + 62), @"WKCaptivePortalModeContainerConfigurationChanged", 0);
  CFStringRef v17 = (const __CFString *)*MEMORY[0x1E4FB9290];
  uint64_t v18 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v18, *((const void **)this + 62), v17, 0);
  CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4FB91D0];
  uint64_t v20 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v20, *((const void **)this + 62), v19, 0);
  CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4FB9128];
  uint64_t v22 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v22, *((const void **)this + 62), v21, 0);
  CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4FB9108];
  uint64_t v24 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v24, *((const void **)this + 62), v23, 0);
  CFStringRef v25 = (const __CFString *)*MEMORY[0x1E4FB91D8];
  uint64_t v26 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v26, *((const void **)this + 62), v25, 0);
  CFStringRef MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification = (const __CFString *)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(v27);
  uint64_t v29 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v29, *((const void **)this + 62), MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification, 0);
  uint64_t v30 = (const void *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v30) {
    CFRelease(v30);
  }
  if (v14)
  {
    CFRelease(v14);
  }
}

void sub_198D3C3A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebProcessPool::backlightLevelDidChangeCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    uint64_t v8 = *((void *)a2 + 1);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      softLinkBKSDisplayBrightnessGetCurrent();
      uint64_t v11 = *(unsigned int *)(v9 + 68);
      if (v11)
      {
        int v12 = v10;
        id v13 = *(uint64_t **)(v9 + 56);
        uint64_t v14 = 8 * v11;
        do
        {
          uint64_t v15 = *v13;
          uint64_t v16 = *(void *)(*v13 + 136);
          if (v16 && *(unsigned char *)(v16 + 104) || *(void *)(v15 + 144))
          {
            int v17 = v12;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::BacklightLevelDidChange>(v15, (float *)&v17, 0, 0);
          }
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_198D3C4CC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::accessibilityPreferencesChangedCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    uint64_t v8 = *((void *)a2 + 1);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      WebKit::accessibilityPreferences((WebKit *)v21);
      uint64_t v10 = *(unsigned int *)(v9 + 68);
      if (v10)
      {
        uint64_t v11 = *(uint64_t **)(v9 + 56);
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = *v11;
          uint64_t v14 = *(void *)(*v11 + 136);
          if (v14 && *(unsigned char *)(v14 + 104) || *(void *)(v13 + 144))
          {
            uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v15 = 2613;
            *((void *)v15 + 1) = 0;
            *((void *)v15 + 66) = (char *)v15 + 16;
            *((void *)v15 + 67) = 512;
            *((void *)v15 + 68) = 0;
            *((void *)v15 + 70) = 0;
            *((void *)v15 + 69) = 0;
            IPC::Encoder::encodeHeader(v15);
            uint64_t v24 = v15;
            IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::encode(v15, (uint64_t)v21);
            LOBYTE(v22) = 0;
            char v23 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v24, 0, (uint64_t)&v22, 1);
            if (v23)
            {
              uint64_t v17 = v22;
              uint64_t v22 = 0;
              if (v17) {
                (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
              }
            }
            uint64_t v18 = v24;
            uint64_t v24 = 0;
            if (v18)
            {
              IPC::Encoder::~Encoder(v18, v16);
              WTF::fastFree(v19, v20);
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_198D3C6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::mediaAccessibilityPreferencesChangedCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    uint64_t v8 = *((void *)a2 + 1);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      uint64_t v11 = (WebCore::CaptionUserPreferencesMediaAF *)WebCore::CaptionUserPreferencesMediaAF::platformCaptionDisplayMode(v10);
      char v12 = (char)v11;
      WebCore::CaptionUserPreferencesMediaAF::platformPreferredLanguages(v19, v11);
      uint64_t v14 = *(unsigned int *)(v9 + 68);
      if (v14)
      {
        uint64_t v15 = *(uint64_t **)(v9 + 56);
        uint64_t v16 = 8 * v14;
        do
        {
          uint64_t v17 = *v15;
          uint64_t v18 = *(void *)(*v15 + 136);
          if (v18 && *(unsigned char *)(v18 + 104) || *(void *)(v17 + 144))
          {
            v20[0] = v12;
            CFStringRef v21 = v19;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaAccessibilityPreferences>(v17, (uint64_t)v20);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_198D3C84C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::remoteWebInspectorEnabledCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    uint64_t v8 = *((void *)a2 + 1);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      uint64_t v10 = *(unsigned int *)(v9 + 68);
      if (v10)
      {
        uint64_t v11 = *(WebKit::WebProcessProxy ***)(v9 + 56);
        uint64_t v12 = 8 * v10;
        do
        {
          WebKit::WebProcessProxy::enableRemoteInspectorIfNeeded(*v11++);
          v12 -= 8;
        }
        while (v12);
      }
      uint64_t v13 = *(__CFNotificationCenter **)(v9 - 8);
    }
    else
    {
      uint64_t v13 = a2;
    }
    CFRelease(v13);
  }
}

void sub_198D3C940(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::lockdownModeConfigurationUpdateCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    uint64_t v8 = *((void *)a2 + 1);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      WebKit::WebProcessPool::lockdownModeStateChanged((unsigned __int8 ***)(v9 - 16));
      uint64_t v10 = *(__CFNotificationCenter **)(v9 - 8);
    }
    else
    {
      uint64_t v10 = a2;
    }
    CFRelease(v10);
  }
}

void sub_198D3CA0C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::lockdownModeStateChanged(unsigned __int8 ***this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)this);
  int v3 = isLockdownModeEnabledBySystemIgnoringCaching;
  if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally)) {
    BOOL v4 = WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally == isLockdownModeEnabledBySystemIgnoringCaching;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    WebKit::lockdownModeObservers((WebKit *)isLockdownModeEnabledBySystemIgnoringCaching);
    uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9D10F8;
    *(void *)long long buf = v5;
    WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t)buf);
    uint64_t v6 = (WebKit *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
    WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = v3 | 0x100;
    WebKit::lockdownModeObservers(v6);
    uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v7 = &unk_1EE9D1120;
    *(void *)long long buf = v7;
    WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t)buf);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&void buf[4] = this;
    __int16 v27 = 1024;
    LODWORD(v28) = v3;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::WebProcessPool::lockdownModeStateChanged() isNowEnabled=%d", buf, 0x12u);
  }
  uint64_t v9 = *((unsigned int *)this + 21);
  if (v9)
  {
    uint64_t v10 = this[9];
    uint64_t v11 = &v10[v9];
    int v22 = v3;
    do
    {
      uint64_t v12 = *v10;
      uint64_t v13 = (atomic_uint *)(*v10 + 16);
      atomic_fetch_add(v13, 1u);
      if (v12[779] != v3)
      {
        WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)v12, (uint64_t)&v24);
        if (v25)
        {
          uint64_t v15 = v24;
          uint64_t v16 = 8 * v25;
          do
          {
            uint64_t v17 = *v15;
            CFRetain(*(CFTypeRef *)(*v15 + 8));
            if (!*(unsigned char *)(v17 + 1363))
            {
              uint64_t v18 = qword_1EB358050;
              if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v19 = *(void *)(*(void *)(v17 + 32) + 760);
                *(_DWORD *)long long buf = 134218240;
                *(void *)&void buf[4] = this;
                __int16 v27 = 2048;
                uint64_t v28 = v19;
                _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::WebProcessPool::lockdownModeStateChanged() Reloading page with pageProxyID=%llu due to Lockdown mode change", buf, 0x16u);
              }
              WebKit::WebPageProxy::reload(v17, 0, &v23);
              uint64_t v20 = v23;
              uint64_t v23 = 0;
              if (v20) {
                CFRelease(*(CFTypeRef *)(v20 + 8));
              }
            }
            CFRelease(*(CFTypeRef *)(v17 + 8));
            ++v15;
            v16 -= 8;
          }
          while (v16);
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v21);
          int v3 = v22;
          if (!v12) {
            goto LABEL_23;
          }
        }
        else
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v14);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v13);
LABEL_23:
      ++v10;
    }
    while (v10 != v11);
  }
}

void sub_198D3CD18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::hardwareKeyboardAvailabilityChangedCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (!a2 || (isKindOfClass & 1) == 0) {
    return;
  }
  CFRetain(a2);
  uint64_t v8 = *((void *)a2 + 1);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 8)) == 0)
  {
    uint64_t v14 = a2;
    goto LABEL_11;
  }
  CFRetain(*(CFTypeRef *)(v9 - 8));
  CFRelease(a2);
  uint64_t v11 = (WTF *)WebKit::currentHardwareKeyboardState(v10);
  int v12 = (int)v11;
  isMainRunLoop = (WTF *)WTF::isMainRunLoop(v11);
  if ((isMainRunLoop & 1) == 0) {
    goto LABEL_15;
  }
  if ((v12 & 0xFFFFFF) != (*(unsigned __int16 *)(v9 + 929) | (*(unsigned __int8 *)(v9 + 931) << 16)))
  {
    if (WTF::isMainRunLoop(isMainRunLoop))
    {
      *(_WORD *)(v9 + 929) = v12;
      *(unsigned char *)(v9 + 931) = BYTE2(v12);
      WebKit::WebProcessPool::hardwareKeyboardAvailabilityChanged(v9 - 16);
      goto LABEL_9;
    }
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198D3CE7CLL);
  }
LABEL_9:
  uint64_t v14 = *(__CFNotificationCenter **)(v9 - 8);
LABEL_11:

  CFRelease(v14);
}

void sub_198D3CEA0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = _AXSApplicationAccessibilityEnabled();
  if (result)
  {
    uint64_t v3 = *(unsigned int *)(v1 + 84);
    if (v3)
    {
      BOOL v4 = *(uint64_t **)(v1 + 72);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        uint64_t result = WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded(v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_3(PAL *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  uint64_t result = PAL::updateCurrentUserInterfaceIdiom(a1);
  if (result)
  {
    uint64_t result = PAL::currentUserInterfaceIdiom((PAL *)result);
    uint64_t v3 = *(unsigned int *)(v1 + 84);
    if (v3)
    {
      char v4 = result;
      uint64_t v5 = *(uint64_t **)(v1 + 72);
      for (uint64_t i = 8 * v3; i; i -= 8)
      {
        uint64_t v7 = *v5;
        uint64_t v8 = *(void *)(*v5 + 136);
        if (v8 && *(unsigned char *)(v8 + 104) || *(void *)(v7 + 144))
        {
          uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v9 = 2702;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 66) = (char *)v9 + 16;
          *((void *)v9 + 67) = 512;
          *((void *)v9 + 68) = 0;
          *((void *)v9 + 70) = 0;
          *((void *)v9 + 69) = 0;
          IPC::Encoder::encodeHeader(v9);
          uint64_t v18 = v9;
          uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
          if (!v11)
          {
            uint64_t result = 831;
            __break(0xC471u);
            return result;
          }
          *uint64_t v10 = v4;
          LOBYTE(v16) = 0;
          char v17 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v18, 0, (uint64_t)&v16, 1);
          if (v17)
          {
            uint64_t v13 = v16;
            uint64_t v16 = 0;
            if (v13) {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            }
          }
          uint64_t result = (uint64_t)v18;
          uint64_t v18 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
            uint64_t result = WTF::fastFree(v14, v15);
          }
        }
        ++v5;
      }
    }
  }
  return result;
}

void sub_198D3D080(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebProcessPool::isURLKnownHSTSHost(WebKit::WebProcessPool *this, WTF::StringImpl **a2)
{
  WTF::URL::URL((uint64_t)v7, a2);
  WTF::URL::createCFURL((uint64_t *)&v8, (WTF::URL *)v7);
  uint64_t v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int IsKnownHSTSHostWithSession = _CFNetworkIsKnownHSTSHostWithSession();
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5) {
    CFRelease(v5);
  }
  return IsKnownHSTSHostWithSession != 0;
}

void sub_198D3D168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v11 = *(const void **)(v9 - 24);
  *(void *)(v9 - 24) = 0;
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::clearPermanentCredentialsForProtectionSpace(uint64_t a1, WebCore::ProtectionSpace *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)[MEMORY[0x1E4F18D90] sharedCredentialStorage];
  char v4 = (void *)[v3 credentialsForProtectionSpace:WebCore::ProtectionSpace::nsSpace(a2)];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * v8);
        if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", v9), "persistence") == 2) {
          objc_msgSend(v3, "removeCredential:forProtectionSpace:", objc_msgSend(v4, "objectForKeyedSubscript:", v9), WebCore::ProtectionSpace::nsSpace(a2));
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t result = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (qword_1E93CF750 && (uint64_t v2 = *(unsigned int *)(qword_1E93CF750 - 12), v2))
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v3 = WTF::fastMalloc((WTF *)(8 * v2));
    LODWORD(v17) = v2;
    uint64_t v16 = v3;
  }
  else
  {
    uint64_t v3 = 0;
  }
  char v4 = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&qword_1E93CF750);
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  if (qword_1E93CF750) {
    uint64_t v8 = qword_1E93CF750 + 8 * *(unsigned int *)(qword_1E93CF750 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if ((unsigned int *)v8 != v4)
  {
    unsigned int v9 = 0;
    do
    {
      uint64_t v5 = *(unsigned int **)(*(void *)v6 + 8);
      if (v5)
      {
        long long v10 = (atomic_uint **)(v5 + 2);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v5 + 2, (uint64_t)v5);
        long long v11 = *v10;
        if (*v10)
        {
          atomic_fetch_add(v11, 1u);
          unsigned int v9 = HIDWORD(v17);
          uint64_t v3 = v16;
        }
      }
      else
      {
        long long v11 = 0;
      }
      unsigned int v12 = v9 + 1;
      *(void *)(v3 + 8 * v9) = v11;
      HIDWORD(v17) = v9 + 1;
      while (1)
      {
        v6 += 2;
        if (v6 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v6 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v6 = v7;
LABEL_20:
      ++v9;
    }
    while (v6 != (unsigned int *)v8);
    if (v12)
    {
      uint64_t v13 = v16;
      uint64_t v14 = 8 * v12;
      do
      {
        if (*(void *)v13)
        {
          if (*(void *)(*(void *)v13 + 8))
          {
            uint64_t v18 = *(void *)v13;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1E93CF750, &v18))
            {
              if (*(void *)v13) {
                uint64_t v15 = *(void *)(*(void *)v13 + 8);
              }
              else {
                uint64_t v15 = 0;
              }
              (*(void (**)(void, uint64_t))(*(void *)*v1 + 16))(*v1, v15);
            }
          }
        }
        v13 += 8;
        v14 -= 8;
      }
      while (v14);
    }
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v5);
}

void sub_198D3D4C4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::setLockdownModeEnabledGloballyForTesting(uint64_t result)
{
  {
    if ((result & 0xFF00) != 0 && HIBYTE(WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting))
    {
      if (WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting == result) {
        return result;
      }
    }
    else if (((result & 0xFF00) != 0) == (HIBYTE(WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting) != 0))
    {
      return result;
    }
  }
  else
  {
    WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting = 0;
    if ((result & 0xFF00) == 0) {
      return result;
    }
  }
  WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting = result;
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v4);
  if (v5)
  {
    uint64_t v2 = v4;
    uint64_t v3 = 8 * v5;
    do
    {
      WebKit::WebProcessPool::lockdownModeStateChanged(*v2++);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v4, v1);
}

void sub_198D3D5A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::WebProcessPool::applicationIsAboutToSuspend(WebKit::WebProcessPool *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    unsigned int v5 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::applicationIsAboutToSuspend: Terminating non-critical processes", (uint8_t *)&v4, 0xCu);
  }
  WebKit::WebBackForwardCache::pruneToSize(*((WebKit::WebBackForwardCache **)this + 95), 1u);
  return WebKit::WebProcessCache::clear(*((void *)this + 96));
}

uint64_t WebKit::WebProcessPool::notifyProcessPoolsApplicationIsAboutToSuspend(WebKit::WebProcessPool *this)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v5);
  if (v6)
  {
    uint64_t v2 = v5;
    uint64_t v3 = 8 * v6;
    do
    {
      WebKit::WebProcessPool::applicationIsAboutToSuspend(*v2++);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v1);
}

void sub_198D3D6C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebKit::WebProcessPool::setProcessesShouldSuspend(uint64_t **this, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134218240;
    long long v10 = (WebKit::WebProcessPool *)this;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::setProcessesShouldSuspend: Processes should suspend %d", (uint8_t *)&v9, 0x12u);
  }
  if (*((unsigned __int8 *)this + 944) != a2)
  {
    *((unsigned char *)this + 944) = a2;
    uint64_t v5 = *((unsigned int *)this + 21);
    if (v5)
    {
      unsigned int v6 = this[9];
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        WebKit::ProcessThrottler::setAllowsActivities((WebKit::ProcessThrottler *)(v8 + 200), *((unsigned char *)this + 944) == 0);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void WebKit::WebProcessPool::notifyPreferencesChanged(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, const WTF::StringImpl *a4)
{
  uint64_t v6 = *(unsigned int *)(a1 + 84);
  if (v6)
  {
    int v9 = *(uint64_t **)(a1 + 72);
    uint64_t v10 = 8 * v6;
    do
    {
      uint64_t v11 = *v9;
      int v12 = (atomic_uint *)(*v9 + 16);
      atomic_fetch_add(v12, 1u);
      WebKit::AuxiliaryProcessProxy::notifyPreferencesChanged(v11, a2, a3, a4);
      if (v11) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  if (MEMORY[0x19972E990](*a3, "WKLockdownModeEnabled", 21))
  {
    WebKit::WebProcessPool::lockdownModeStateChanged((unsigned __int8 ***)a1);
  }
}

void sub_198D3D8B4(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::screenPropertiesChanged(WebKit::WebProcessPool *this)
{
  WebCore::collectScreenProperties(&v5, this);
  int v4 = &v5;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetScreenProperties>((uint64_t)this, (int **)&v4, 0);
  uint64_t result = v6;
  if (v6) {
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v6, v2);
  }
  return result;
}

void sub_198D3D924(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetScreenProperties>(uint64_t result, int **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        int v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetScreenProperties>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::gpuProcessForCapabilityGranter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 176);
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  }
  *a2 = v2;
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebProcessPool::gpuProcessForCapabilityGranter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 144);
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  }
  *a2 = v2;
  return result;
}

uint64_t WebKit::WebProcessPool::webProcessForCapabilityGranter@<X0>(uint64_t result@<X0>, const WTF::StringImpl **a2@<X2>, void *a3@<X8>)
{
  if (!*(_DWORD *)(result + 84))
  {
LABEL_15:
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  uint64_t v5 = result;
  unint64_t v6 = 0;
  while (1)
  {
    WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(*(void *)(v5 + 72) + 8 * v6), (uint64_t)&v15);
    unint64_t v8 = v16;
    if (v16) {
      break;
    }
LABEL_14:
    uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
    if (++v6 >= *(unsigned int *)(v5 + 84)) {
      goto LABEL_15;
    }
  }
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v15 + 8 * v9) + 32);
    if (*(unsigned char *)(v10 + 2584)) {
      break;
    }
LABEL_13:
    if (++v9 >= v8) {
      goto LABEL_14;
    }
  }
  WebKit::MediaCapability::environmentIdentifier((id *)(v10 + 2504), (uint64_t *)&v17);
  char v12 = WTF::equal(v17, *a2, v11);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (!v13) {
    goto LABEL_9;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_9:
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
  if ((v12 & 1) == 0)
  {
LABEL_12:
    unint64_t v8 = v16;
    goto LABEL_13;
  }
LABEL_16:
  uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
  if (v6 >= *(unsigned int *)(v5 + 84))
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)(v5 + 72) + 8 * v6);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
LABEL_18:
    *a3 = v14;
  }
  return result;
}

void sub_198D3DB38(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12)
{
}

uint64_t non-virtual thunk to'WebKit::WebProcessPool::webProcessForCapabilityGranter@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X2>, void *a3@<X8>)
{
  return WebKit::WebProcessPool::webProcessForCapabilityGranter(a1 - 32, a2, a3);
}

uint64_t *WebKit::WebProcessProxy::platformPathsWithAssumedReadAccess(WebKit::WebProcessProxy *this)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  if ((byte_1E93CF6D2 & 1) == 0)
  {
    MEMORY[0x19972EAD0](v31, objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.WebCore"), "resourcePath"), "stringByStandardizingPath"));
    uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleForClass:", NSClassFromString(&cfstr_Wkwebview.isa)), "resourcePath"), "stringByStandardizingPath");
    MEMORY[0x19972EAD0](v32, v2);
    uint64_t v4 = 0;
    qword_1E93CF770 = 0;
    *(void *)&dword_1E93CF778 = 0;
    *(void *)((char *)&dword_1E93CF77C + 1) = 0;
    do
    {
      int v5 = dword_1E93CF778;
      if (20 * (unint64_t)dword_1E93CF77C >= 19 * (unint64_t)dword_1E93CF778
        || (dword_1E93CF778 <= (2 * dword_1E93CF77C) ? (BOOL v6 = byte_1E93CF784 == 0) : (BOOL v6 = 1), !v6))
      {
        if (dword_1E93CF778) {
          unsigned int v7 = 2 * dword_1E93CF778;
        }
        else {
          unsigned int v7 = 8;
        }
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash((uint64_t)&qword_1E93CF770, v7);
        int v5 = dword_1E93CF778;
      }
      int v8 = dword_1E93CF780;
      uint64_t v9 = *(WTF::StringImpl **)&v31[8 * v4];
      unsigned int v10 = *((_DWORD *)v9 + 4);
      if (v10 >= 0x100) {
        unsigned int v11 = v10 >> 8;
      }
      else {
        unsigned int v11 = WTF::StringImpl::hashSlowCase(v9);
      }
      int v12 = v5 - 1;
      unsigned int v13 = (v11 ^ v8) & (v5 - 1);
      uint64_t v14 = (WTF **)(qword_1E93CF770 + 8 * v13);
      uint64_t v15 = *v14;
      if (*v14)
      {
        unsigned int v16 = 0;
        while (1)
        {
          unsigned int v17 = *((_DWORD *)v15 + 4);
          int v18 = v17 >= 0x100 ? v17 >> 8 : WTF::StringImpl::hashSlowCase(v15);
          unsigned int v19 = (v13 + v5 - ((v18 ^ v8) & v12)) & v12;
          if (v16 > v19) {
            break;
          }
          if (v18 == v11 && (WTF::equal(*v14, *(const WTF::StringImpl **)&v31[8 * v4], v3) & 1) != 0) {
            goto LABEL_40;
          }
          unsigned int v13 = (v13 + 1) & v12;
          ++v16;
          uint64_t v14 = (WTF **)(qword_1E93CF770 + 8 * v13);
          uint64_t v15 = *v14;
          if (!*v14)
          {
            if (v16 >= 0x80) {
              byte_1E93CF784 = 1;
            }
            goto LABEL_27;
          }
        }
        if (v16 >= 0x80) {
          byte_1E93CF784 = 1;
        }
        CFStringRef v21 = *v14;
        void *v14 = 0;
        WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(WTF::String const&)::{lambda(void)#1}>(v14, *(WTF::StringImpl **)&v31[8 * v4]);
        for (int i = v13 + 1; ; int i = v23 + 1)
        {
          int v23 = i & v12;
          uint64_t v24 = (WTF **)(qword_1E93CF770 + 8 * (i & v12));
          unsigned int v25 = *v24;
          if (!*v24) {
            break;
          }
          unsigned int v26 = *((_DWORD *)v25 + 4);
          if (v26 >= 0x100) {
            unsigned int v27 = v26 >> 8;
          }
          else {
            unsigned int v27 = WTF::StringImpl::hashSlowCase(v25);
          }
          if (++v19 > ((v23 + v5 - ((v27 ^ v8) & v12)) & v12))
          {
            uint64_t v28 = *v24;
            *uint64_t v24 = v21;
            CFStringRef v21 = v28;
            unsigned int v19 = (v23 + v5 - ((v27 ^ v8) & v12)) & v12;
          }
        }
        *uint64_t v24 = v21;
      }
      else
      {
LABEL_27:
        WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(WTF::String const&)::{lambda(void)#1}>(v14, *(WTF::StringImpl **)&v31[8 * v4]);
      }
      ++dword_1E93CF77C;
LABEL_40:
      ++v4;
    }
    while (v4 != 2);
    for (uint64_t j = 8; j != -8; j -= 8)
    {
      uint64_t v30 = *(WTF::StringImpl **)&v31[j];
      *(void *)&v31[j] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v20);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    byte_1E93CF6D2 = 1;
  }
  return &qword_1E93CF770;
}

void sub_198D3DEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
}

IPC::Encoder *WebKit::WebProcessProxy::cacheMediaMIMETypes(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  if (byte_1E93CF6DC)
  {
    if (dword_1E93CF76C) {
      return result;
    }
  }
  else
  {
    unk_1E93CF768 = 0;
    qword_1E93CF760 = 0;
    byte_1E93CF6DC = 1;
  }
  uint64_t result = (IPC::Encoder *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&qword_1E93CF760, a2);
  uint64_t v4 = *(void *)(*(void *)(v3 + 512) + 8);
  uint64_t v5 = v4 - 16;
  if (!v4) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if (v6)
  {
    unsigned int v7 = *(void **)(v5 + 72);
    for (uint64_t i = 8 * v6; i; i -= 8)
    {
      uint64_t v9 = *v7;
      unsigned int v10 = (atomic_uint *)(*v7 + 16);
      atomic_fetch_add(v10, 1u);
      if (v9 == v3) {
        goto LABEL_16;
      }
      if (byte_1E93CF6DC)
      {
        if (dword_1E93CF76C) {
          goto LABEL_16;
        }
      }
      else
      {
        unk_1E93CF768 = 0;
        qword_1E93CF760 = 0;
        byte_1E93CF6DC = 1;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&qword_1E93CF760, a2);
      unsigned int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v11 = 2688;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 70) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      int v18 = v11;
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v11, a2);
      LOBYTE(v16) = 0;
      char v17 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v18, 0, (uint64_t)&v16, 1);
      if (v17)
      {
        uint64_t v13 = v16;
        uint64_t v16 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      uint64_t result = v18;
      int v18 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v12);
        uint64_t result = (IPC::Encoder *)WTF::fastFree(v14, v15);
        if (!v9) {
          goto LABEL_18;
        }
LABEL_17:
        uint64_t result = (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10);
        goto LABEL_18;
      }
LABEL_16:
      if (v9) {
        goto LABEL_17;
      }
LABEL_18:
      ++v7;
    }
  }
  return result;
}

void sub_198D3E144(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessProxy::setCaptionLanguage(WebKit::WebProcessProxy *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171C08](a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::UnblockServicesRequiredByAccessibility>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2699;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D3E2C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessProxy::shouldDisableJITCage(WebKit::WebProcessProxy *this)
{
  return 0;
}

void WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::{lambda(void *,SSBLookupResult *,NSError *)#1}::__invoke(uint64_t a1, const void *a2, const void *a3)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  uint64_t v11 = v6;
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  char v12 = *(unsigned char *)(a1 + 40);
  WTF::URL::URL((uint64_t)v13, (uint64_t *)(a1 + 48));
  uint64_t v7 = WTF::fastMalloc((WTF *)0x50);
  *(void *)uint64_t v7 = &unk_1EE9D0788;
  *(void *)(v7 + 8) = v11;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(unsigned char *)(v7 + 32) = v12;
  WTF::URL::URL(v7 + 40, (uint64_t *)v13);
  uint64_t v14 = v7;
  WTF::RunLoop::dispatch();
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v13[0];
  v13[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void sub_198D3E524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0::operator()(SSBLookupResult *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D0788;
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (const void *)a1[3];
  a1[3] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0::operator()(SSBLookupResult *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D0788;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0::operator()(SSBLookupResult *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  v23[16] = *(WTF **)MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    v23[0] = 0;
    WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(v2, (WTF::StringImpl *)v23);
    uint64_t result = v23[0];
    v23[0] = 0;
    if (!result) {
      return result;
    }
    return (WTF *)WTF::RefCounted<WebKit::BrowsingWarning>::deref(result, v3);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = (void *)[*(id *)(a1 + 16) serviceLookupResults];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if (([v9 isPhishing] & 1) != 0
          || ([v9 isMalware] & 1) != 0
          || [v9 isUnwantedSoftware])
        {
          uint64_t v11 = *(void *)(a1 + 8);
          int v12 = *(unsigned __int8 *)(a1 + 32);
          if (v9) {
            CFRetain(v9);
          }
          uint64_t v15 = (WTF *)v9;
          int v16 = 0;
          uint64_t v13 = (WTF *)WTF::fastMalloc((WTF *)0x60);
          WebKit::BrowsingWarning::BrowsingWarning((uint64_t)v13, a1 + 40, v12 != 0, (uint64_t)&v15);
          char v17 = v13;
          WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(v11, (WTF::StringImpl *)&v17);
          uint64_t result = v17;
          char v17 = 0;
          if (result) {
            uint64_t result = (WTF *)WTF::RefCounted<WebKit::BrowsingWarning>::deref(result, v14);
          }
          if (v16 != -1) {
            return (WTF *)((uint64_t (*)(char *, WTF **))off_1EE9D07A0[v16])(&v22, &v15);
          }
          return result;
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v23 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v15 = 0;
  WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(v10, (WTF::StringImpl *)&v15);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result) {
    return (WTF *)WTF::RefCounted<WebKit::BrowsingWarning>::deref(result, v3);
  }
  return result;
}

void sub_198D3E94C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  WTF::fastFree(v25, a2);
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9D07A0[a12])(&a25, &a10);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100](a1 + 48, a2 + 48);
  uint64_t v7 = *(const void **)(a2 + 80);
  *(void *)(a1 + 80) = v7;
  if (v7) {
    CFRetain(v7);
  }
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

void sub_198D3EB30(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v2);
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = *v1;
  *uint64_t v1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebCore::LocalCurrentGraphicsContext *WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext(WebCore::LocalCurrentGraphicsContext *this, WebCore::GraphicsContext *a2)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a2 + 96))(a2, 1);
  uint64_t v4 = (CGContext *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(void *)a2 + 24))(a2);
  WebCore::LocalCurrentContextSaver::LocalCurrentContextSaver((WebCore::LocalCurrentGraphicsContext *)((char *)this + 16), v4);
  return this;
}

void sub_198D3EC38(_Unwind_Exception *exception_object)
{
  if (v1[8]) {
    (*(void (**)(void, uint64_t))(**(void **)v1 + 104))(*(void *)v1, 1);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::LocalCurrentGraphicsContext::~LocalCurrentGraphicsContext(WebCore::LocalCurrentGraphicsContext *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void, uint64_t))(**(void **)this + 104))(*(void *)this, 1);
  }
}

uint64_t std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(const void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 16), a2);
    uint64_t v5 = *(const void **)(a1 + 8);
    *(void *)a1 = &unk_1EE9B2A08;
    *(void *)(a1 + 8) = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) ^ 1 | *(v4 - 1))
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF *WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = (const void *)*((void *)this + 8);
    *((void *)v2 + 8) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (WTF::StringImpl **)*((void *)v2 + 4);
    *((void *)v2 + 4) = 0;
    if (v4) {
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v4, a2);
    }
    uint64_t v5 = (WTF::StringImpl *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    long long v6 = (WTF::StringImpl *)*((void *)v2 + 2);
    *((void *)v2 + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = (unsigned int *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl **WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = this[3];
    *((void *)v2 + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)v2 + 2);
    *((void *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = (WTF::StringImpl *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebCore::SleepDisabler **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebCore::SleepDisabler *)-1) {
        std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebCore::SleepDisabler *std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100](WebCore::SleepDisabler **a1, WebCore::SleepDisabler *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::SleepDisabler::~SleepDisabler(result);
    return (WebCore::SleepDisabler *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::PrivateClickMeasurement *std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::~__optional_destruct_base[abi:sn180100](WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 328))
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 40);
    *((void *)this + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 39);
    *((void *)this + 39) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(this, a2);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int **)-1)
      {
        uint64_t v5 = *v4;
        WTF::StringImpl *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int **WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(unsigned int **this, void *a2)
{
  uint64_t v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = this[3];
    *((void *)v2 + 3) = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
    return (unsigned int **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::scheduleActivityStateUpdate(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D07C0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::scheduleActivityStateUpdate(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D07C0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::scheduleActivityStateUpdate(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageProxy::dispatchActivityStateChange((WebCore::RunLoopObserver **)(v2 - 16));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void sub_198D3F2E8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

Class initSYNotesActivationObserver(void)
{
  if ((byte_1E93CF6D3 & 1) == 0)
  {
    *(void *)algn_1E93CF708 = dlopen("/System/Library/PrivateFrameworks/Synapse.framework/Synapse", 2);
    byte_1E93CF6D3 = 1;
  }
  Class result = objc_getClass("SYNotesActivationObserver");
  qword_1E93CF700 = (uint64_t)result;
  getSYNotesActivationObserverClass = SYNotesActivationObserverFunction;
  return result;
}

uint64_t SYNotesActivationObserverFunction(void)
{
  return qword_1E93CF700;
}

Class initAMSEngagementRequest(void)
{
  if ((byte_1E93CF6D5 & 1) == 0)
  {
    unk_1E93CF720 = dlopen("/System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices", 2);
    byte_1E93CF6D5 = 1;
  }
  Class result = objc_getClass("AMSEngagementRequest");
  qword_1E93CF718 = (uint64_t)result;
  off_1EB353008 = AMSEngagementRequestFunction;
  return result;
}

uint64_t AMSEngagementRequestFunction(void)
{
  return qword_1E93CF718;
}

Class initAMSUIEngagementTask(void)
{
  if ((byte_1E93CF6D4 & 1) == 0)
  {
    qword_1E93CF710 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleMediaServicesUI.framework/AppleMediaServicesUI", 2);
    byte_1E93CF6D4 = 1;
  }
  Class result = objc_getClass("AMSUIEngagementTask");
  qword_1E93CF728 = (uint64_t)result;
  _MergedGlobals_31 = AMSUIEngagementTaskFunction;
  return result;
}

uint64_t AMSUIEngagementTaskFunction(void)
{
  return qword_1E93CF728;
}

uint64_t WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::{lambda(void *,AMSEngagementResult *,NSError *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t *v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebKit::MediaCapability::MediaCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 8);
  *(void *)a1 = &unk_1EE9B2A08;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9BD910;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  WTF::URL::URL(a1 + 32, (uint64_t *)(a2 + 32));
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 72) = v5;
  return a1;
}

void sub_198D3F604(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  long long v6 = (const void *)v2[1];
  void *v2 = v3;
  v2[1] = 0;
  if (v6) {
    CFRelease(v6);
  }
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<WebKit::MediaCapability,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(const void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 16), a2);
    uint64_t v5 = *(const void **)(a1 + 8);
    *(void *)a1 = &unk_1EE9B2A08;
    *(void *)(a1 + 8) = 0;
    if (v5) {
      CFRelease(v5);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
}

uint64_t WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::PasteboardItemInfo>::destruct(*(void *)a1, (void *)(*(void *)a1 + 120 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::PasteboardItemInfo>::destruct(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v3 = result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 96, a2);
      uint64_t v5 = *(WTF::StringImpl **)(v3 + 48);
      *(void *)(v3 + 48) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 32, v4);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 16, v6);
      uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v7);
      v3 += 120;
    }
    while ((void *)v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  if (a2 != (unsigned int *)a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = a2[3];
    if (v4 <= v5)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
          {
            WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct(*(unsigned int **)a1, (void *)(*(void *)a1 + 16 * v4));
            *(_DWORD *)(a1 + 12) = 0;
          }
          uint64_t v7 = *(unsigned int **)a1;
          if (*(void *)a1)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)a1, a2[3]);
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct((unsigned int *)(*(void *)a1 + 16 * v5), (void *)(*(void *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    uint64_t v8 = *(void *)a2;
    if (v4)
    {
      uint64_t v9 = v8 + 16 * v4;
      uint64_t v10 = *(unsigned int **)a1;
      do
      {
        WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)v10, (atomic_uint **)v8);
        *((unsigned char *)v10 + 8) = *(unsigned char *)(v8 + 8);
        v8 += 16;
        v10 += 4;
      }
      while (v8 != v9);
      uint64_t v8 = *(void *)a2;
      unsigned int v11 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unsigned int v11 = 0;
    }
    uint64_t v12 = a2[3];
    if (v11 != v12)
    {
      uint64_t v13 = v8 + 16 * v12;
      uint64_t v14 = *(void *)a1 + 16 * v11;
      uint64_t v15 = v8 + 16 * v11;
      do
      {
        int v16 = *(atomic_uint **)v15;
        if (*(void *)v15) {
          atomic_fetch_add(v16, 1u);
        }
        *(void *)uint64_t v14 = v16;
        *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
        v15 += 16;
        v14 += 16;
      }
      while (v15 != v13);
      unsigned int v11 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct(unsigned int *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (unsigned int **)result;
    do
    {
      uint64_t result = *v3;
      const void *v3 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      unsigned int v6 = *(unsigned int **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      *(unsigned char *)(a3 + 8) = *((unsigned char *)v5 + 8);
      uint64_t result = *(unsigned int **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v5 += 4;
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(unsigned int **)result;
      uint64_t v5 = (unsigned int *)(*(void *)result + 16 * result[3]);
      uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(void *)uint64_t v3 = v6;
      uint64_t result = WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::move(v4, v5, v6);
      if (v4)
      {
        if (*(unsigned int **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, v3);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v5);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v6);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessProxy &)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D0808;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D0850;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (unsigned int *)a2[1];
    a2[1] = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
    uint64_t v4 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D08A0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D08A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v5 > 0xFFu)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          int v8 = v5;
          CFRetain(*(CFTypeRef *)(v7 - 8));
          if (!v8) {
            WebKit::WebPageProxy::removeDictationAlternatives(v7 - 16, *v2);
          }
          uint64_t v9 = *(const void **)(v7 - 8);
          CFRelease(v9);
        }
      }
      return;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }

  IPC::Connection::cancelReply<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(v2);
}

void IPC::Connection::cancelReply<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageProxy::removeDictationAlternatives(v2 - 16, *a1);
      uint64_t v4 = *(const void **)(v2 - 8);
      CFRelease(v4);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2192;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9D08C8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  long long v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198D3FFD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D08C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D08C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, (uint64_t)&v6);
    if (v8)
    {
      uint64_t result = (WTF *)WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v2);
      if (v8)
      {
        uint64_t result = v6;
        if (v6)
        {
          uint64_t v6 = 0;
          int v7 = 0;
          return (WTF *)WTF::fastFree(result, v4);
        }
      }
    }
    else
    {
      return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    unsigned __int16 v5 = (uint64_t *)(a1 + 8);
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5);
  }
  return result;
}

void sub_198D4020C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198D40278(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198D40308(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v5);
  char v4 = v6;
  if (v6)
  {
    *(void *)a2 = v5[0];
    *(void *)(a2 + 8) = v5[1];
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearDictationAlternatives>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2166;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D40490(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(WebKit::WebKeyboardEvent *this, WTF::StringImpl *a2)
{
  if (this != a2)
  {
    uint64_t v3 = this;
    do
    {
      char v4 = (const void *)*((void *)v3 + 11);
      *((void *)v3 + 11) = 0;
      if (v4) {
        CFRelease(v4);
      }
      WebKit::WebKeyboardEvent::~WebKeyboardEvent(v3, a2);
      uint64_t v3 = (WebKit::WebKeyboardEvent *)((char *)v3 + 96);
    }
    while (v3 != a2);
  }
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      char v4 = (const void *)*((void *)v3 + 18);
      *((void *)v3 + 18) = 0;
      if (v4) {
        CFRelease(v4);
      }
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + 128, a2);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + 112, v5);
      unint64_t result = (WTF::StringImpl *)*((void *)v3 + 12);
      *((void *)v3 + 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v3 = (WTF::StringImpl *)((char *)v3 + 160);
    }
    while (v3 != a2);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SpeakingErrorOccurred>(uint64_t a1, uint64_t a2)
{
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 2490;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198D406AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoicesDidChange>(uint64_t a1, uint64_t a2)
{
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 2547;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198D407F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(void)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D08F0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(void)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D08F0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(void)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3)
    {
      CFRetain((CFTypeRef)*(v3 - 1));
      uint64_t v6 = v3[2];
      int v7 = *(unsigned __int8 *)(v6 + 2496);
      uint64_t v8 = *(void *)(v6 + 2488);
      if (v7) {
        BOOL v9 = v8 == *(void *)(a1 + 8);
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        uint64_t v10 = (_DWORD *)v3[52];
        if (v10)
        {
          ++v10[4];
          if (*(unsigned char *)(a2 + 64))
          {
            char v11 = (const void *)WebKit::VideoPresentationManagerProxy::playerViewController((uint64_t)v10, *(void *)(a1 + 8));
            uint64_t v12 = v11;
            if (v11)
            {
              CFRetain(v11);
              uint64_t v13 = v3[3];
              if (v13) {
                uint64_t v14 = *(void *)(v13 + 8);
              }
              else {
                uint64_t v14 = 0;
              }
              (*(void (**)(uint64_t))(*(void *)v14 + 1592))(v14);
              if (!*(unsigned char *)(a2 + 64))
              {
                __break(1u);
                return;
              }
              (*(void (**)(uint64_t, uint64_t, const void *))(*(void *)v14 + 1168))(v14, a2, v12);
              (*(void (**)(uint64_t))(*(void *)v14 + 1600))(v14);
              CFRelease(v12);
            }
          }
          if (v10[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
          }
          else {
            --v10[4];
          }
        }
      }
      uint64_t v15 = (const void *)*(v3 - 1);
      CFRelease(v15);
    }
  }
}

void sub_198D40AF4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  CFRelease(v2);
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  CFRelease(*(CFTypeRef *)(v4 - 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D0918;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D0918;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::ArgumentCoder<WebCore::AppHighlight,void>::decode(a2, (uint64_t)&v19);
    if (v23
      || (uint64_t v8 = *(void *)a2,
          uint64_t v9 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v10 = *((void *)a2 + 3)) != 0)
      && v9
      && ((*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8), v23))
    {
      uint64_t v4 = v19;
      uint64_t v19 = 0;
      uint64_t v14 = v4;
      LOBYTE(v15) = 0;
      char v16 = 0;
      if (v21)
      {
        uint64_t v5 = v20;
        uint64_t v20 = 0;
        uint64_t v15 = v5;
        char v16 = 1;
      }
      __int16 v17 = v22;
      char v18 = 1;
      std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
    }
    else
    {
      LOBYTE(v14) = 0;
      char v18 = 0;
      std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      }
    }
    if (v18)
    {
      WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0::operator()(*v2, (uint64_t)&v14);
      return (unsigned int *)std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
    }
    else
    {
      std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
      return IPC::Connection::cancelReply<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>((WebCore::FragmentedSharedBuffer *)v2);
    }
  }
  else
  {
    int v7 = (WebCore::FragmentedSharedBuffer *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(v7);
  }
}

void sub_198D40DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *IPC::Connection::cancelReply<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebCore::FragmentedSharedBuffer *a1)
{
  WebCore::FragmentedSharedBuffer::create((uint64_t *)&v5, a1);
  LOBYTE(v6) = 0;
  char v7 = 0;
  __int16 v8 = 0;
  WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0::operator()(*(void *)a1, (uint64_t)&v5);
  if (v7)
  {
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  unint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v2);
  }
  return result;
}

void sub_198D40E60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8);
    uint64_t v3 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
    }
  }
  return a1;
}

void WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)a2 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 1736))(v5, a2);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 1600);
    v6(v5);
  }
  else
  {
    char v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v9 = 136446210;
      uint64_t v10 = "auto WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight, WebCore::H"
            "ighlightRequestOriginatedInApp)::(anonymous class)::operator()(WebCore::AppHighlight &&) const";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 773: Invalid message dispatched %{public}s", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 256) + 144);
    if (v8) {
      *(unsigned char *)(v8 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

void sub_198D410B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SharedMemoryHandle>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(void *)(WTF::MachSendRight::MachSendRight() + 8) = *(void *)(v3 + 8);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198D41284);
    }
    uint64_t v4 = *(WTF::MachSendRight **)a1;
    uint64_t v5 = (WTF::MachSendRight *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::SharedMemoryHandle>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::MachSendRight **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::SharedMemoryHandle>::move(WTF::MachSendRight *a1, WTF::MachSendRight *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      WTF::MachSendRight::MachSendRight();
      *(void *)(a3 + 8) = *((void *)v5 + 1);
      WTF::MachSendRight::~MachSendRight(v5);
      a3 += 16;
      uint64_t v5 = (WTF::MachSendRight *)((char *)v5 + 16);
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      uint64_t v5 = (WTF::MachSendRight *)(*(void *)a1 + 16 * a2);
      uint64_t v6 = 16 * v4 - 16 * a2;
      do
      {
        WTF::MachSendRight::~MachSendRight(v5);
        uint64_t v5 = (WTF::MachSendRight *)(v7 + 16);
        v6 -= 16;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v8 = *(WTF::MachSendRight **)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(void *)a1 = v9;
      if ((WTF::MachSendRight *)v9 != v8) {
        WTF::VectorMover<false,WebCore::SharedMemoryHandle>::move(v8, (WTF::MachSendRight *)((char *)v8 + 16 * v4), v9);
      }
    }
    if (v8)
    {
      if (*(WTF::MachSendRight **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

uint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF::MachSendRight **)a1;
    uint64_t v5 = 16 * v3;
    do
    {
      WTF::MachSendRight::~MachSendRight(v4);
      unint64_t v4 = (WTF::MachSendRight *)(v6 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy23setUpHighlightsObserverEvEUb_E3__7vJEED1Ev(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D0940;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy23setUpHighlightsObserverEvEUb_E3__7vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D0940;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy23setUpHighlightsObserverEvEUb_E3__7vJEE4callEv(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      int v3 = *(unsigned __int8 *)(result + 16);
      unint64_t result = WTF::isMainRunLoop((WTF *)result);
      if (result)
      {
        if (!*(unsigned char *)(v2 + 785) && *(unsigned char *)(v2 + 784))
        {
          char v4 = v3 != 0;
          uint64_t v5 = *(void *)(v2 + 240);
          uint64_t v6 = *(void *)(*(void *)(v2 + 16) + 1928);
          uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v7 = 2410;
          *((void *)v7 + 1) = v6;
          *((void *)v7 + 66) = (char *)v7 + 16;
          *((void *)v7 + 67) = 512;
          *((void *)v7 + 68) = 0;
          *((void *)v7 + 70) = 0;
          *((void *)v7 + 69) = 0;
          IPC::Encoder::encodeHeader(v7);
          uint64_t v14 = v7;
          IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, v4);
          LOBYTE(v12) = 0;
          char v13 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v14, 0, (uint64_t)&v12, 1);
          if (v13)
          {
            uint64_t v9 = v12;
            uint64_t v12 = 0;
            if (v9) {
              (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
            }
          }
          unint64_t result = (uint64_t)v14;
          uint64_t v14 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
            return WTF::fastFree(v10, v11);
          }
        }
      }
      else
      {
        unint64_t result = 795;
        __break(0xC471u);
      }
    }
  }
  return result;
}

void sub_198D41650(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2364;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9D0968;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  char v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198D417F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0968;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0968;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    char v4 = *(WTF::StringImpl **)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - (void)v4)
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v20 = *((void *)a2 + 3);
        if (v20)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v4, v5);
            unint64_t v18 = 0;
            __int16 v22 = *(WTF::StringImpl **)a2;
            uint64_t v23 = *((void *)a2 + 1);
            uint64_t v24 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v19 = 0;
            if (v24 && v23)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
              uint64_t v19 = *(WTF::StringImpl **)a2;
              unint64_t v18 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v18 = 0;
            uint64_t v19 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          IPC::Decoder::decode<WebCore::NowPlayingInfo>(a2, (uint64_t)&v34);
          if (v41)
          {
            v25[0] = v7 != 0;
            long long v9 = v35;
            long long v26 = v34;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v27 = v9;
            LOBYTE(v28) = 0;
            char v30 = 0;
            if (v38)
            {
              long long v10 = v36;
              long long v36 = 0uLL;
              long long v28 = v10;
              uint64_t v11 = v37;
              uint64_t v37 = 0;
              uint64_t v29 = v11;
              char v30 = 1;
            }
            long long v31 = v39;
            v32[0] = v40[0];
            *(_OWORD *)((char *)v32 + 11) = *(_OWORD *)((char *)v40 + 11);
            char v33 = 1;
            std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v8);
LABEL_14:
            if (v33)
            {
              WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>::operator()(v2);
              return std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v17);
            }
            else
            {
              std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v12);
              return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_(v2);
            }
          }
          v25[0] = 0;
          char v33 = 0;
          std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v8);
LABEL_13:
          uint64_t v12 = *(WTF::StringImpl **)a2;
          uint64_t v15 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v16 = *((void *)a2 + 3);
          if (v16 && v15) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v16 + 16))(v16, v12);
          }
          goto LABEL_14;
        }
        unint64_t v18 = v5;
        uint64_t v19 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v21 = *((void *)a2 + 3);
      if (v21 && v18) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v19);
      }
      v25[0] = 0;
      char v33 = 0;
      goto LABEL_13;
    }
  }
  char v13 = (uint64_t *)(a1 + 8);

  return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_(v13);
}

void sub_198D41C20(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D41CB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
    char v4 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    unint64_t v5 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    unsigned int v7 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_(uint64_t *a1)
{
  v3[24] = 0;
  v3[0] = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0x3FF0000000000000;
  char v7 = 0;
  v8[0] = 0;
  *(_DWORD *)((char *)v8 + 7) = 0;
  WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>::operator()(a1);
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3, v1);
  return 0;
}

void sub_198D41EA4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13)
{
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a13, a2);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v14);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2305;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9D0990;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  unint64_t v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198D4208C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0990;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0990;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertMultiRepresentationHEIC>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2298;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **(const void ***)a2, *(void *)(*(void *)a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D423F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceImageForRemoveBackground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2360;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v8, *(void *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **(const void ***)(a2 + 16), *(void *)(*(void *)(a2 + 16) + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D42578(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = ~(*a3 << 32) + *a3;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v6 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v6 + 8 * v21;
        goto LABEL_31;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = *a3;
      uint64_t v14 = v16;
    }
  }
  *a3 = 0;
  uint64_t v18 = *v14;
  uint64_t *v14 = v9;
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_24:
      uint64_t v14 = WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a2, v14);
      uint64_t v22 = *a2;
      if (*a2) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_24;
  }
  uint64_t v27 = v22 + 8 * v25;
  char v26 = 1;
LABEL_31:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v26;
}

void *WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (uint64_t *)(v4 + 8 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 8 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          int v23 = (void *)(v14 + 8 * v21);
          *int v23 = 0;
          uint64_t v24 = *v12;
          uint64_t *v12 = 0;
          *int v23 = v24;
          uint64_t v25 = *v12;
          uint64_t *v12 = 0;
          if (v25) {
            CFRelease(*(CFTypeRef *)(v25 + 8));
          }
          if (v12 == a2) {
            unint64_t v11 = v23;
          }
        }
        else
        {
          uint64_t *v12 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaEnvironment>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 2448;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  unint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_198D42A2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2549;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v28 = v12;
  uint64_t v13 = *a2;
  LODWORD(a2) = *(unsigned __int8 *)(*a2 + 32);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (a2)
  {
    if (v15)
    {
      unsigned char *v14 = 1;
      if (*(unsigned char *)(v13 + 32))
      {
        IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(v12, v13);
        goto LABEL_7;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x198D42C3CLL);
  }
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198D42C5CLL);
  }
  unsigned char *v14 = 0;
LABEL_7:
  uint64_t v16 = *a3;
  *a3 = 0;
  unint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v17 = &unk_1EE9D09B8;
  v17[1] = v16;
  uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v26[0] = v17;
  v26[1] = v18;
  char v27 = 1;
  int v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
  if (v27)
  {
    uint64_t v21 = v26[0];
    v26[0] = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  uint64_t v22 = v28;
  long long v28 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v19);
    WTF::fastFree(v24, v25);
  }
  if (v20) {
    return v18;
  }
  else {
    return 0;
  }
}

void sub_198D42C68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D09B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D09B8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v14);
    if (v16)
    {
      v12[0] = v14;
      uint64_t v5 = v15;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      v12[1] = v5;
      WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v4);
      char v13 = 1;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(v2);
      return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v6);
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v11 = *((void *)a2 + 3);
      if (v11 && v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      }
      return IPC::Connection::cancelReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v8);
  }
}

void sub_198D42F04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a1);
  return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v1);
}

void sub_198D42F58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_198D42FDC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v6, v5);
        uint64_t v16 = *(void *)a1;
        unint64_t v15 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_22;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v22 = 0;
    int v23 = 0;
    if (v10 >= 0x3333)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::WritingTools::Context>(a1, (uint64_t)&v24);
        if (!v27) {
          break;
        }
        unsigned int v19 = HIDWORD(v23);
        if (HIDWORD(v23) == v23)
        {
          WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::Context>((uint64_t)&v22, (unint64_t)&v24);
        }
        else
        {
          uint64_t v20 = v22;
          *(_OWORD *)(v22 + 80 * HIDWORD(v23)) = v24;
          WebCore::AttributedString::AttributedString();
          *(_OWORD *)(v20 + 80 * v19 + 56) = v26;
          ++HIDWORD(v23);
        }
        if (v27) {
          MEMORY[0x199732DE0](v25);
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v22, HIDWORD(v23));
          *(void *)a3 = v22;
          uint64_t v21 = v23;
          uint64_t v22 = 0;
          int v23 = 0;
          *(void *)(a3 + 8) = v21;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
LABEL_19:
        uint64_t v22 = 0;
        int v23 = 0;
        *(void *)a3 = v13;
        *(void *)(a3 + 8) = v14;
LABEL_20:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, a2);
      }
      LODWORD(v23) = 80 * (int)v10 / 0x50u;
      uint64_t v22 = WTF::fastMalloc((WTF *)(80 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::WritingTools::Context>(a1, (uint64_t)&v24);
        if (!v27) {
          break;
        }
        unsigned int v11 = HIDWORD(v23);
        if (HIDWORD(v23) == v23)
        {
          WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::Context>((uint64_t)&v22, (unint64_t)&v24);
        }
        else
        {
          uint64_t v12 = v22;
          *(_OWORD *)(v22 + 80 * HIDWORD(v23)) = v24;
          WebCore::AttributedString::AttributedString();
          *(_OWORD *)(v12 + 80 * v11 + 56) = v26;
          ++HIDWORD(v23);
        }
        if (v27) {
          MEMORY[0x199732DE0](v25);
        }
        if (!--v10)
        {
          uint64_t v13 = v22;
          uint64_t v14 = v23;
          goto LABEL_19;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, a2);
  }
  unint64_t v15 = v5;
  uint64_t v16 = 0;
LABEL_22:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v15) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v16);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void sub_198D432FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a21) {
    MEMORY[0x199732DE0](v21);
  }
  WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::WritingTools::Context>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198D433A4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 80)) {
    MEMORY[0x199732DE0](v1 + 16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::Context>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (_OWORD *)WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = (_OWORD *)(*(void *)a1 + 80 * *(unsigned int *)(a1 + 12));
  _OWORD *v4 = *v3;
  WebCore::AttributedString::AttributedString();
  *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)((char *)v3 + 56);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unsigned int *WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t v5 = 80 * v4 - 80 * this;
      uint64_t result = (unsigned int *)(*(void *)result + 80 * this + 16);
      do
      {
        uint64_t result = (unsigned int *)(MEMORY[0x199732DE0](result) + 80);
        v5 -= 80;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v6 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      BOOL v7 = (WTF *)(80 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 8) = (v7 & 0xFFFFFFF0) / 0x50;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v6) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::WritingTools::Context>::move((uint64_t)v6, (uint64_t)v6 + 80 * v4, (uint64_t)result);
      }
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v6, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D435D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidBeginWritingToolsSession>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2194;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(v8, *a2);
  IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D4371C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 80 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(a1, v6);
      v6 += 10;
      v7 -= 80;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ProofreadingSessionDidReceiveSuggestions,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2344;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v33 = v12;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(v12, *(void *)a2);
  uint64_t v13 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, *(unsigned int *)(v13 + 12));
  uint64_t v14 = *(unsigned int *)(v13 + 12);
  if (v14)
  {
    uint64_t v15 = *(void *)v13;
    uint64_t v16 = 48 * v14;
    do
    {
      IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::encode(v12, v15);
      v15 += 48;
      v16 -= 48;
    }
    while (v16);
  }
  char v17 = *(uint64_t **)(a2 + 16);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v17);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v17 + 1);
  IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(v12, *(uint64_t **)(a2 + 24));
  char v18 = *(unsigned char *)(a2 + 32);
  unsigned int v19 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v20)
  {
    *unsigned int v19 = v18;
    uint64_t v21 = *a3;
    *a3 = 0;
    uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v22 = &unk_1EE9D09E0;
    v22[1] = v21;
    uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v31[0] = v22;
    v31[1] = v23;
    char v32 = 1;
    int v25 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v33, a5, (uint64_t)v31, a6);
    if (v32)
    {
      uint64_t v26 = v31[0];
      v31[0] = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    char v27 = v33;
    char v33 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v24);
      WTF::fastFree(v29, v30);
    }
    if (v25) {
      return v23;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D439D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ProofreadingSessionDidReceiveSuggestions,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D09E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ProofreadingSessionDidReceiveSuggestions,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D09E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ProofreadingSessionDidReceiveSuggestions,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ProofreadingSessionDidUpdateStateForSuggestion>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2345;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(v8, *(void *)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, *(unsigned char *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::encode(v8, *(void *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(v8, *(uint64_t **)(a2 + 24));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D43CBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::WillEndWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2550;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9D0A08;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  int v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198D43E78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(a1, *(void *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillEndWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0A08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillEndWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0A08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillEndWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidEndWritingToolsSession>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2206;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D4419C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CompositionSessionDidReceiveTextWithReplacementRange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2174;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v22 = v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(v8, *(void *)a2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(v8, *(uint64_t **)(a2 + 8));
  uint64_t v9 = *(uint64_t **)(a2 + 16);
  IPC::Encoder::operator<<<unsigned long long const&>(v8, v9);
  IPC::Encoder::operator<<<unsigned long long const&>(v8, v9 + 1);
  IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(v8, *(uint64_t **)(a2 + 24));
  char v10 = *(unsigned char *)(a2 + 32);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v12)
  {
    unsigned char *v11 = v10;
    LOBYTE(v20) = 0;
    char v21 = 0;
    uint64_t v14 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, a4, (uint64_t)&v20, 1);
    if (v21)
    {
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    uint64_t v16 = v22;
    uint64_t v22 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v13);
      WTF::fastFree(v18, v19);
    }
    return v14;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D44378(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WritingToolsSessionDidReceiveAction>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2555;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v21 = v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(v8, *(void *)a2);
  char v9 = *(unsigned char *)(a2 + 8);
  char v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v11)
  {
    *char v10 = v9;
    LOBYTE(v19) = 0;
    char v20 = 0;
    uint64_t v13 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a4, (uint64_t)&v19, 1);
    if (v20)
    {
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v21;
    char v21 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v12);
      WTF::fastFree(v17, v18);
    }
    return v13;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D44520(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2346;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v26 = v12;
  uint64_t v13 = *a2;
  IPC::Encoder::operator<<<unsigned long long const&>(v12, *a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v13 + 1);
  uint64_t v14 = *a3;
  *a3 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9D0A30;
  v15[1] = v14;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v24[0] = v15;
  v24[1] = v16;
  char v25 = 1;
  int v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    uint64_t v19 = v24[0];
    v24[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  char v20 = v26;
  uint64_t v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v22, v23);
  }
  if (v18) {
    return v16;
  }
  else {
    return 0;
  }
}

void sub_198D446EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0A30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0A30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v6);
    if (v8)
    {
      uint64_t result = (WTF *)WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v2);
      if (v8)
      {
        uint64_t result = v6;
        if (v6)
        {
          uint64_t v6 = 0;
          int v7 = 0;
          return (WTF *)WTF::fastFree(result, v4);
        }
      }
    }
    else
    {
      return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5);
  }
  return result;
}

void sub_198D44930(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::ProofreadingSessionSuggestionTextRectsInRootViewCoordinates,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198D4499C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_198D44A2C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    char v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  char v5 = v7;
  if (v7)
  {
    *(void *)a3 = v6[0];
    *(void *)(a3 + 8) = v6[1];
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v5;
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D44B2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateTextVisibilityForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2536;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v29 = v12;
  uint64_t v13 = *(uint64_t **)a2;
  IPC::Encoder::operator<<<unsigned long long const&>(v12, *(uint64_t **)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v13 + 1);
  char v14 = *(unsigned char *)(a2 + 8);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v16)
  {
    unsigned char *v15 = v14;
    IPC::ArgumentCoder<WTF::UUID,void>::encode(v12, *(uint64_t **)(a2 + 16));
    uint64_t v17 = *a3;
    *a3 = 0;
    int v18 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v18 = &unk_1EE9D0A58;
    v18[1] = v17;
    uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v27[0] = v18;
    v27[1] = v19;
    char v28 = 1;
    int v21 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v29, a5, (uint64_t)v27, a6);
    if (v28)
    {
      uint64_t v22 = v27[0];
      v27[0] = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
    uint64_t v23 = v29;
    uint64_t v29 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v20);
      WTF::fastFree(v25, v26);
    }
    if (v21) {
      return v19;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D44D10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateTextVisibilityForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0A58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateTextVisibilityForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0A58;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateTextVisibilityForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TextPreviewDataForActiveWritingToolsSession,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2513;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v26 = v12;
  uint64_t v13 = *a2;
  IPC::Encoder::operator<<<unsigned long long const&>(v12, *a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v13 + 1);
  uint64_t v14 = *a3;
  *a3 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9D0A80;
  v15[1] = v14;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v24[0] = v15;
  v24[1] = v16;
  char v25 = 1;
  int v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    uint64_t v19 = v24[0];
    v24[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  char v20 = v26;
  uint64_t v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v22, v23);
  }
  if (v18) {
    return v16;
  }
  else {
    return 0;
  }
}

void sub_198D4502C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextPreviewDataForActiveWritingToolsSession,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0A80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextPreviewDataForActiveWritingToolsSession,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0A80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextPreviewDataForActiveWritingToolsSession,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>(a2, v10);
    if (v18)
    {
      uint64_t result = (WTF *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(v2);
      if (v18 && v17)
      {
        if ((v16 & 0x8000000000000) != 0)
        {
          char v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v9);
            WTF::fastFree((WTF *)v9, v4);
          }
        }
        char v5 = v15;
        uint64_t v15 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
        char v7 = v14;
        uint64_t v14 = 0;
        if (v7)
        {
          if (v7[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[2];
          }
        }
        BOOL v8 = v13;
        uint64_t v13 = 0;
        if (v8)
        {
          if (v8[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          }
          else {
            --v8[2];
          }
        }
        uint64_t result = v11;
        if (v11)
        {
          uint64_t v11 = 0;
          int v12 = 0;
          return (WTF *)WTF::fastFree(result, v4);
        }
      }
    }
    else
    {
      return (WTF *)_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage43TextPreviewDataForActiveWritingToolsSessionEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v2);
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    return (WTF *)_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage43TextPreviewDataForActiveWritingToolsSessionEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v6);
  }
  return result;
}

void sub_198D4536C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if ((_BYTE)a25 && a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      char v28 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::TextIndicatorData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120])
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198D45500(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 120))
  {
    if (*((unsigned char *)v2 + 112)) {
      WebCore::TextIndicatorData::~TextIndicatorData(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<std::tuple<std::optional<WebCore::TextIndicatorData>>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>(a1, v9);
  if (v17)
  {
    uint64_t result = (WTF *)std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v9);
    a2[120] = 1;
    if (v17 && v16)
    {
      if ((v15 & 0x8000000000000) != 0)
      {
        BOOL v8 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v4);
        }
      }
      unint64_t v5 = v14;
      uint64_t v14 = 0;
      if (v5)
      {
        if (v5[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        }
        else {
          --v5[2];
        }
      }
      unint64_t v6 = v13;
      uint64_t v13 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      BOOL v7 = v12;
      int v12 = 0;
      if (v7)
      {
        if (v7[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        }
        else {
          --v7[2];
        }
      }
      uint64_t result = v10;
      if (v10)
      {
        char v10 = 0;
        int v11 = 0;
        return (WTF *)WTF::fastFree(result, v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[120] = 0;
  }
  return result;
}

void sub_198D45694(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if ((_BYTE)a25 && a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      char v28 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage43TextPreviewDataForActiveWritingToolsSessionEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a1);
}

void sub_198D458FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      char v25 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DecorateTextReplacementsForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 2188;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v26 = v12;
  uint64_t v13 = *a2;
  IPC::Encoder::operator<<<unsigned long long const&>(v12, *a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v13 + 1);
  uint64_t v14 = *a3;
  *a3 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9D0AA8;
  v15[1] = v14;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v24[0] = v15;
  v24[1] = v16;
  char v25 = 1;
  int v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    uint64_t v19 = v24[0];
    v24[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  char v20 = v26;
  uint64_t v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v22, v23);
  }
  if (v18) {
    return v16;
  }
  else {
    return 0;
  }
}

void sub_198D45B80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DecorateTextReplacementsForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0AA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DecorateTextReplacementsForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0AA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DecorateTextReplacementsForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SetSelectionForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 2466;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v26 = v12;
  uint64_t v13 = *a2;
  IPC::Encoder::operator<<<unsigned long long const&>(v12, *a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v12, v13 + 1);
  uint64_t v14 = *a3;
  *a3 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9D0AD0;
  v15[1] = v14;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v24[0] = v15;
  v24[1] = v16;
  char v25 = 1;
  int v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    uint64_t v19 = v24[0];
    v24[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  char v20 = v26;
  uint64_t v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v22, v23);
  }
  if (v18) {
    return v16;
  }
  else {
    return 0;
  }
}

void sub_198D45E9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetSelectionForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0AD0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetSelectionForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0AD0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetSelectionForActiveWritingToolsSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EnableSourceTextAnimationAfterElementWithID>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2231;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D46158(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EnableTextAnimationTypeForElementWithID>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 2232;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D462C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::TextIndicatorData,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::TextIndicatorData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = v5;
  uint64_t result = WTF::fastMalloc((WTF *)(((unint64_t)v5 << 7) | 0x10));
  if (v5)
  {
    uint64_t v9 = result + 104;
    do
    {
      *(_OWORD *)(v9 - 8) = 0uLL;
      *(_OWORD *)(v9 + 8) = 0uLL;
      *(_OWORD *)(v9 + 24) = 0uLL;
      *(_OWORD *)(v9 - 24) = 0uLL;
      *(_OWORD *)(v9 - 40) = 0uLL;
      *(_OWORD *)(v9 - 56) = 0uLL;
      *(_OWORD *)(v9 - 72) = 0uLL;
      *(_OWORD *)(v9 - 88) = 0uLL;
      *(_DWORD *)(v9 - 8) = 1065353216;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(unsigned char *)(v9 + 32) = 0;
      v9 += 128;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v3;
    do
    {
      uint64_t v12 = v2 + (v10 << 7);
      if (*(void *)v12 ^ 1 | *(void *)(v12 + 8))
      {
        if (*(_OWORD *)v12 == 0)
        {
          WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(v2 + (v10 << 7) + 16), v8);
        }
        else
        {
          uint64_t v13 = *a1;
          if (*a1) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          int v22 = -1640531527;
          __int16 v23 = 0;
          char v24 = 0;
          WTF::addArgs<WTF::UUID>(&v22, (void *)(v2 + (v10 << 7)));
          int v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
          int v17 = 0;
          do
          {
            uint64_t v18 = v15 & v14;
            uint64_t v19 = (_OWORD *)(v13 + (v18 << 7));
            int v15 = ++v17 + v18;
          }
          while (*v19 != 0);
          WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(v19 + 1), v16);
          *uint64_t v19 = *(_OWORD *)v12;
          WebCore::TextIndicatorData::TextIndicatorData(v20, (long long *)(v2 + (v10 << 7) + 16));
          WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(v2 + (v10 << 7) + 16), v21);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v8);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v12 = (void *)(v10 + 16);
    do
    {
      void *v12 = 0;
      v12[1] = 0;
      void v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + 32 * v13;
      if (*(void *)v15 ^ 1 | *(void *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          uint64_t v16 = v6 + 32 * v13;
          uint64_t v17 = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v29 = -1640531527;
          __int16 v30 = 0;
          char v31 = 0;
          WTF::addArgs<WTF::UUID>(&v29, (void *)(v6 + 32 * v13));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            uint64_t v23 = v18 + 32 * v22;
            int v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v15;
          uint64_t v25 = v6 + 32 * v13;
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          *(void *)(v23 + 16) = v26;
          uint64_t v27 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          if (v15 == a3) {
            uint64_t v14 = v23;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

void *WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::take(void *result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 32 * *(unsigned int *)(v3 - 4);
  }
  if ((void *)v3 == a3)
  {
    WTF *result = 0;
    return result;
  }
  uint64_t v4 = a3[2];
  a3[2] = 0;
  WTF *result = v4;
  if (*a2)
  {
    uint64_t v5 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
    if ((void *)v5 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((void *)v5 != a3)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 1;
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v6 = *a2;
    int v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    uint64_t v8 = *a2;
    if (*a2)
    {
      unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
      unsigned int v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9) {
        return (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a2, v10 >> 1, 0);
      }
    }
  }
  return result;
}

void sub_198D469C8(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v12 = (void *)(v10 + 16);
    do
    {
      void *v12 = 0;
      v12[1] = 0;
      void v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + 32 * v13;
      if (*(void *)v15 ^ 1 | *(void *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          uint64_t v16 = v6 + 32 * v13;
          uint64_t v17 = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v29 = -1640531527;
          __int16 v30 = 0;
          char v31 = 0;
          WTF::addArgs<WTF::UUID>(&v29, (void *)(v6 + 32 * v13));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            uint64_t v23 = v18 + 32 * v22;
            int v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v15;
          uint64_t v25 = v6 + 32 * v13;
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          *(void *)(v23 + 16) = v26;
          uint64_t v27 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          if (v15 == a3) {
            uint64_t v14 = v23;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v18 = -1640531527;
  __int16 v19 = 0;
  char v20 = 0;
  WTF::addArgs<WTF::UUID>(&v18, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = v6 & v5;
  uint64_t v10 = (uint64_t *)(v2 + 32 * v9);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v12 == v8 && v11 == v7) {
    return v2 + 32 * v9;
  }
  int v14 = 1;
  while (v11 | v12)
  {
    uint64_t v9 = (v9 + v14) & v5;
    uint64_t v15 = (uint64_t *)(v2 + 32 * v9);
    uint64_t v11 = *v15;
    uint64_t v12 = v15[1];
    BOOL v16 = v12 == v8 && v11 == v7;
    ++v14;
    if (v16) {
      return v2 + 32 * v9;
    }
  }
  if (*a1) {
    return *a1 + 32 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

void WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v12 = (_OWORD *)(v4 + 32 * i);
      if (*v12 >= 2uLL)
      {
        uint64_t v13 = *a1;
        if (*a1) {
          unsigned int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          unsigned int v14 = 0;
        }
        int v20 = -1640531527;
        __int16 v21 = 0;
        char v22 = 0;
        WTF::addArgs<WTF::UUID>(&v20, (void *)(v4 + 32 * i));
        int v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        int v16 = 0;
        do
        {
          uint64_t v17 = v15 & v14;
          int v18 = (_OWORD *)(v13 + 32 * v17);
          int v15 = ++v16 + v17;
        }
        while (*v18 != 0);
        long long v19 = v12[1];
        _OWORD *v18 = *v12;
        v18[1] = v19;
      }
    }
  }
  else if (!v4)
  {
    return;
  }

  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  if (*result) {
    v4 += 32 * *(unsigned int *)(v4 - 4);
  }
  if ((void *)v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  uint64_t v5 = a2[2];
  a2[2] = 0;
  *a3 = v5;
  if (*result)
  {
    uint64_t v6 = *result + 32 * *(unsigned int *)(*result - 4);
    if ((void *)v6 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if ((void *)v6 != a2) {
    return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(result, a2);
  }
  return result;
}

void sub_198D46F68(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0AF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0AF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>(a2, v10);
    if (v18)
    {
      uint64_t result = (WTF *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(v2);
      if (v18 && v17)
      {
        if ((v16 & 0x8000000000000) != 0)
        {
          uint64_t v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v9);
            WTF::fastFree((WTF *)v9, v4);
          }
        }
        unsigned int v5 = v15;
        int v15 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
        unsigned int v7 = v14;
        unsigned int v14 = 0;
        if (v7)
        {
          if (v7[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[2];
          }
        }
        unsigned int v8 = v13;
        uint64_t v13 = 0;
        if (v8)
        {
          if (v8[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          }
          else {
            --v8[2];
          }
        }
        uint64_t result = v11;
        if (v11)
        {
          uint64_t v11 = 0;
          int v12 = 0;
          return (WTF *)WTF::fastFree(result, v4);
        }
      }
    }
    else
    {
      return (WTF *)_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage37CreateTextIndicatorForTextAnimationIDEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return (WTF *)_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage37CreateTextIndicatorForTextAnimationIDEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v6);
  }
  return result;
}

void sub_198D47330(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if ((_BYTE)a25 && a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      char v28 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage37CreateTextIndicatorForTextAnimationIDEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a1);
}

void sub_198D47598(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      uint64_t v25 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 2537;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v28 = v12;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v12, *(uint64_t **)a2);
  char v13 = *(unsigned char *)(a2 + 8);
  unsigned int v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v15)
  {
    unsigned char *v14 = v13;
    uint64_t v16 = *a3;
    *a3 = 0;
    char v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v17 = &unk_1EE9D0B20;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v17;
    v26[1] = v18;
    char v27 = 1;
    int v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
    if (v27)
    {
      uint64_t v21 = v26[0];
      v26[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    char v22 = v28;
    char v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v19);
      WTF::fastFree(v24, v25);
    }
    if (v20) {
      return v18;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198D47848(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0B20;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0B20;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::IntelligenceTextAnimationsDidComplete>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2303;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198D47AEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateTextIndicatorForElementWithID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0B48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateTextIndicatorForElementWithID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0B48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateTextIndicatorForElementWithID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>(a2, v10);
    if (v18)
    {
      uint64_t result = (WTF *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(v2);
      if (v18 && v17)
      {
        if ((v16 & 0x8000000000000) != 0)
        {
          uint64_t v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v9);
            WTF::fastFree((WTF *)v9, v4);
          }
        }
        unsigned int v5 = v15;
        uint64_t v15 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
        unsigned int v7 = v14;
        unsigned int v14 = 0;
        if (v7)
        {
          if (v7[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[2];
          }
        }
        unsigned int v8 = v13;
        char v13 = 0;
        if (v8)
        {
          if (v8[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          }
          else {
            --v8[2];
          }
        }
        uint64_t result = v11;
        if (v11)
        {
          uint64_t v11 = 0;
          int v12 = 0;
          return (WTF *)WTF::fastFree(result, v4);
        }
      }
    }
    else
    {
      return (WTF *)_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage35CreateTextIndicatorForElementWithIDEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return (WTF *)_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage35CreateTextIndicatorForElementWithIDEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v6);
  }
  return result;
}

void sub_198D47DD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if ((_BYTE)a25 && a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      char v28 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage35CreateTextIndicatorForElementWithIDEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a1);
}

void sub_198D48038(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      uint64_t v25 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2494;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9D0B70;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  char v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198D48294(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0B70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0B70;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D0B98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D0B98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    uint64_t v10 = v8 & v6;
    uint64_t v11 = *(WTF **)(v3 + 32 * v10);
    if (v11 == (WTF *)-1) {
      goto LABEL_9;
    }
    if (!v11) {
      break;
    }
    if (WTF::equal(v11, *a2, a3)) {
      return v3 + 32 * v10;
    }
LABEL_9:
    ++i;
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 32 * *(unsigned int *)(*a1 - 4);
}

uint64_t *WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  WTF *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (!(a3 >> 28))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a3));
    *((_DWORD *)v3 + 2) = a3;
    uint64_t *v3 = v6;
    uint64_t v7 = a2 + 16 * a3;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *v3;
      uint64_t v10 = *(atomic_uint **)a2;
      unsigned int v11 = v8;
      if (*(void *)a2)
      {
        atomic_fetch_add(v10, 1u);
        unsigned int v11 = *((_DWORD *)v3 + 3);
      }
      *(void *)(v9 + 16 * v8) = v10;
      *(unsigned char *)(v9 + 16 * v8 + 8) = *(unsigned char *)(a2 + 8);
      unsigned int v8 = v11 + 1;
      *((_DWORD *)v3 + 3) = v11 + 1;
      a2 += 16;
    }
    while (a2 != v7);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_198D48734(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 32 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    while (1)
    {
      unsigned int v11 = (WTF::StringImpl **)(v2 + 32 * v10);
      uint64_t v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v12 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v12);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 32 * v19));
          uint64_t v20 = v14 + 32 * v19;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 16, v7);
          char v22 = *(WTF::StringImpl **)v20;
          *(void *)uint64_t v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v21);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          char v23 = *v11;
          WTF *v11 = 0;
          *(void *)uint64_t v20 = v23;
          uint64_t v24 = v2 + 32 * v10;
          *(void *)(v20 + 8) = *(void *)(v24 + 8);
          uint64_t v25 = v24 + 16;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v20 + 16, (uint64_t *)(v24 + 16));
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v26);
          char v13 = *v11;
          WTF *v11 = 0;
          if (!v13) {
            goto LABEL_32;
          }
          if (*(_DWORD *)v13 == 2)
          {
LABEL_31:
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
            goto LABEL_32;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 32 * v10 + 16, v7);
          char v13 = *v11;
          WTF *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              goto LABEL_31;
            }
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_32:
      if (++v10 == v3) {
        goto LABEL_35;
      }
    }
  }
  if (v2)
  {
LABEL_35:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  }
}

void sub_198D48994(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  int v4 = *v2;
  uint64_t *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 28))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *a2 + 16 * v6;
      do
      {
        uint64_t v9 = *(atomic_uint **)v7;
        if (*(void *)v7) {
          atomic_fetch_add(v9, 1u);
        }
        *(void *)uint64_t v5 = v9;
        *(unsigned char *)(v5 + 8) = *(unsigned char *)(v7 + 8);
        v7 += 16;
        v5 += 16;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[4 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[4 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 32 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 4;
      v4 -= 32;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardTypes(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::getTypes();
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(*(uint64_t **)(a1 + 16));
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v3);
}

void sub_198D48B30(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  if (WebKit::WebPasteboardProxy::webProcessProxyForConnection(*(WebKit::WebPasteboardProxy **)(a1 + 8), *(IPC::Connection **)(a1 + 16)))
  {
    MEMORY[0x199734490](&cf, *(void *)(a1 + 24));
    WebCore::PlatformPasteboard::getPathnamesForType();
    CFTypeRef v2 = cf;
    CFTypeRef cf = 0;
    if (v2) {
      CFRelease(v2);
    }
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(*(uint64_t **)(a1 + 40));
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v4);
}

void sub_198D48BF4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, char a13)
{
  if (cf) {
    CFRelease(cf);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardStringForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::stringForType((uint64_t *)&v7, (WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(v2);
  uint64_t v4 = v7;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198D48CB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardStringsForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::allStringsForType(v6, (WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198D48D70(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardBufferForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WebCore::PasteboardBuffer &&)> &&)::$_0,void>::call(uint64_t a1)
{
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::bufferForType((uint64_t *)&v8, (WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 16));
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
  WTF::CompletionHandler<void ()(WebCore::PasteboardBuffer &&)>::operator()(*(uint64_t **)(a1 + 24));
  CFTypeRef v4 = v10;
  uint64_t v10 = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v3);
  }
  CFTypeRef v5 = v9;
  uint64_t v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D48E5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10, WTF::StringImpl *a11, unsigned int *a12)
{
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a12, a2);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardChangeCount(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(long long)>::operator()(v1);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198D48F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardColor(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WebCore::Color &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::color(&v6, (WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(WebCore::Color &&)>::operator()(v1);
  if ((v6 & 0x8000000000000) != 0)
  {
    CFTypeRef v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v2);
    }
  }
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198D48FD8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    unsigned int v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardURL(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(WTF::RefCountedBase **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::url((uint64_t *)v6, (WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v1, (WTF::RefCountedBase *)v6);
  CFTypeRef v3 = v6[0];
  v6[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198D490A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v5 = WebCore::PlatformPasteboard::addTypes();
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 40));
}

void sub_198D491A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v5 = WebCore::PlatformPasteboard::setTypes();
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 40));
}

void sub_198D49274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &,WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v5 = WebCore::PlatformPasteboard::setURL();
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 40));
}

void sub_198D49348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardColor(IPC::Connection &,WTF::String const&,WebCore::Color const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v5 = WebCore::PlatformPasteboard::setColor((WebCore::PlatformPasteboard *)&cf, *(const Color **)(a1 + 16));
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 40));
}

void sub_198D4941C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &,WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 32);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v5 = WebCore::PlatformPasteboard::setStringForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 16), *(const WTF::String **)(a1 + 24));
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 40), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 48));
}

void sub_198D494F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::containsURLStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(BOOL)>::operator()(v1);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198D4956C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::urlStringSuitableForLoading(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::String&&,WTF::String&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v8 = 0;
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::urlStringSuitableForLoading((uint64_t *)&v7, (WebCore::PlatformPasteboard *)&cf, (WTF::String *)&v8);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
  WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(*(uint64_t **)(a1 + 16));
  CFTypeRef v4 = v7;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D49640(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &,WTF::String const&,WTF::String const&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 32);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  if (**(void **)(a1 + 16))
  {
    MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
    uint64_t v5 = WebCore::PlatformPasteboard::setBufferForType((WebCore::PlatformPasteboard *)&cf, **(WebCore::SharedBuffer ***)(a1 + 16), *(const WTF::String **)(a1 + 24));
  }
  else
  {
    MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
    uint64_t v5 = WebCore::PlatformPasteboard::setBufferForType((WebCore::PlatformPasteboard *)&cf, 0, *(const WTF::String **)(a1 + 24));
  }
  uint64_t v6 = v5;
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 40), *(WTF::StringImpl ***)(a1 + 8), v3, v6);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 48));
}

void sub_198D49798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getNumberOfFiles(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::numberOfFiles((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(unsigned long long)>::operator()(v1);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198D49818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite(v6, (WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198D498A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeCustomData(IPC::Connection &,WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v5 = WebCore::PlatformPasteboard::write();
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  return WTF::CompletionHandler<void ()(long long)>::operator()(*(uint64_t **)(a1 + 40));
}

void sub_198D49984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::allPasteboardItemInfo(IPC::Connection &,WTF::String const&,long long,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>::operator()(v1);
  if (v5[16]) {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v2);
  }
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198D49A20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::informationForItemAtIndex(IPC::Connection &,unsigned long,WTF::String const&,long long,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardItemInfo> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::informationForItemAtIndex((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardItemInfo> &&)>::operator()(v1);
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v2);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198D49ACC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardItemsCount(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::count((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(unsigned long long)>::operator()(v1);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198D49B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::readStringFromPasteboard(IPC::Connection &,unsigned long,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::readString((WebCore::PlatformPasteboard *)&cf, **(void **)(a1 + 24), *(const WTF::String **)(a1 + 32));
  WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(v2);
  CFTypeRef v4 = v7;
  CFTypeRef v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198D49C00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::readURLFromPasteboard(IPC::Connection &,unsigned long,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::String&&,WTF::String&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v12 = 0;
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::readURL((WebCore::PlatformPasteboard *)&cf, **(void **)(a1 + 16), (WTF::String *)&v12);
  CFTypeRef v3 = v10;
  if (v10)
  {
    int v4 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    unsigned int v11 = v3;
    uint64_t v10 = 0;
    if (v4) {
      *(_DWORD *)CFTypeRef v3 = v4;
    }
    else {
      WTF::StringImpl::destroy(v3, v2);
    }
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t v10 = 0;
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  WTF::CompletionHandler<void ()(WTF::String &&,WTF::String &)>::operator()(*(uint64_t **)(a1 + 24));
  CFTypeRef v7 = v11;
  unsigned int v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D49D40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  unsigned int v11 = *(WTF::StringImpl **)(v9 - 32);
  *(void *)(v9 - 32) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(WTF::StringImpl **)(v9 - 24);
  *(void *)(v9 - 24) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::readBufferFromPasteboard(IPC::Connection &,std::optional<unsigned long>,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::readBuffer();
  WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(v1);
  CFTypeRef v3 = v6;
  CFTypeRef v6 = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
  }
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198D49E30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, unsigned int *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 16));
  WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  WTF::CompletionHandler<void ()(BOOL)>::operator()(v2);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198D49EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeURLToPasteboard(IPC::Connection &,WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::write();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = *(IPC::Connection **)(a1 + 32);
  CFTypeRef v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x199734490](&cf, v7);
  uint64_t v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 32));
  if (result)
  {
    CFTypeRef cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_198D49FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>(uint64_t a1, uint64_t **a2)
{
  CFTypeRef v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v4 = 2628;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *a2);
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198D4A0F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeWebContentToPasteboard(IPC::Connection &,WebCore::PasteboardWebContent const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::write();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(IPC::Connection **)(a1 + 32);
  CFTypeRef v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x199734490](&cf, v7);
  uint64_t v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 32));
  if (result)
  {
    CFTypeRef cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_198D4A248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeImageToPasteboard(IPC::Connection &,WebCore::PasteboardImage const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::write();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(IPC::Connection **)(a1 + 32);
  CFTypeRef v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x199734490](&cf, v7);
  uint64_t v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 32));
  if (result)
  {
    CFTypeRef cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_198D4A364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &,WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2 = *(WebKit::WebPasteboardProxy **)(a1 + 32);
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  uint64_t v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x199734490](&cf, *(void *)(a1 + 8));
  WebCore::PlatformPasteboard::write((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 16), *(const WTF::String **)(a1 + 24));
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(IPC::Connection **)(a1 + 40);
  CFTypeRef v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x199734490](&cf, v7);
  uint64_t v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 40));
  if (result)
  {
    CFTypeRef cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_198D4A480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = a2;
  CFTypeRef v4 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v5 = (unsigned char *)((((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF0) + a3 - 8);
      do
      {
        uint64_t v6 = *((void *)v3 - 2);
        v3 -= 4;
        *(void *)unint64_t v3 = 0;
        *((void *)v5 - 1) = v6;
        *uint64_t v5 = *((unsigned char *)v3 + 8);
        uint64_t result = *(unsigned int **)v3;
        *(void *)unint64_t v3 = 0;
        if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
        v5 -= 16;
      }
      while (v3 != v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::move(result, a2, a3);
  }
  return result;
}

unsigned int *__destroy_helper_block_e8_32c102_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralEEUliE_(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_1::operator() const(WTF::ASCIILiteral const&)::{lambda(int)#1}::operator() const(int)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D10A0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

unint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 4 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      CFTypeRef v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *((_DWORD *)v3 + 2) = v2;
      unsigned int *v3 = v6;
      uint64_t result = (void **)memcpy(v6, v4, 4 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          unsigned int *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

void ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSString_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (*(_DWORD *)(v2 + 68))
      {
        MEMORY[0x19972EAD0](&v17, *(void *)(a1 + 40));
        uint64_t v5 = *(unsigned int *)(v2 + 68);
        if (v5)
        {
          unint64_t v6 = *(uint64_t **)(v2 + 56);
          uint64_t v7 = 8 * v5;
          do
          {
            uint64_t v8 = *v6;
            MEMORY[0x19972EAD0](&v16, *(void *)(a1 + 40));
            unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)unint64_t v9 = 2646;
            *((void *)v9 + 1) = 0;
            *((void *)v9 + 66) = (char *)v9 + 16;
            *((void *)v9 + 67) = 512;
            *((void *)v9 + 68) = 0;
            *((void *)v9 + 70) = 0;
            *((void *)v9 + 69) = 0;
            IPC::Encoder::encodeHeader(v9);
            uint64_t v20 = v9;
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)&v16);
            LOBYTE(v18) = 0;
            char v19 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v20, 0, (uint64_t)&v18, 1);
            if (v19)
            {
              uint64_t v10 = v18;
              uint64_t v18 = 0;
              if (v10) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
            }
            char v11 = v20;
            uint64_t v20 = 0;
            if (v11)
            {
              IPC::Encoder::~Encoder(v11, v4);
              WTF::fastFree(v13, v14);
            }
            uint64_t v12 = v16;
            unsigned int v16 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2) {
                WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v4);
              }
              else {
                *(_DWORD *)v12 -= 2;
              }
            }
            ++v6;
            v7 -= 8;
          }
          while (v7);
        }
        int v15 = v17;
        unsigned int v17 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v4);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_198D4A988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

unsigned int *__destroy_helper_block_e8_32c106_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSStringEUlP14NSNotificationE_(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      CFTypeRef v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = 8 * v5;
        unint64_t v8 = v4;
        do
        {
          unint64_t v9 = *(const void **)v8;
          *(void *)unint64_t v8 = 0;
          *(void *)uint64_t result = v9;
          unint64_t v10 = *(const void **)v8;
          *(void *)unint64_t v8 = 0;
          if (v10)
          {
            uint64_t v11 = result;
            CFRelease(v10);
            uint64_t result = v11;
          }
          result += 8;
          unint64_t v8 = (WTF *)((char *)v8 + 8);
          v7 -= 8;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::lockdownModeStateChanged(void)::$_0,void,WebKit::LockdownModeObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::lockdownModeStateChanged(void)::$_1,void,WebKit::LockdownModeObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetScreenProperties>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2691;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v19 = v8;
  unint64_t v9 = (uint64_t *)(*a2 + 2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v8, **a2);
  IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits> const&>(v8, v9);
  LOBYTE(v17) = 0;
  char v18 = 0;
  uint64_t v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    uint64_t v12 = v17;
    uint64_t v17 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  char v13 = v19;
  char v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

void sub_198D4AD80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(void)::$_0,void,BOOL>::call(WebCore *a1)
{
  WebCore::collectScreenProperties(&v10, a1);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    int v2 = v8;
    uint64_t v3 = 8 * v9;
    do
    {
      uint64_t v4 = *v2;
      uint64_t v7 = &v10;
      WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetScreenProperties>(v4, (int **)&v7, 0);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  uint64_t result = v11;
  if (v11) {
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v11, v5);
  }
  return result;
}

void sub_198D4AE74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a14) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(a14, v15);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(WTF::String const&)::{lambda(void)#1}>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  if (a2) {
    *(_DWORD *)a2 += 2;
  }
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::shouldTransform(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 1)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 28);
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 16);
      uint64_t v8 = 8 * v6;
      while (!*v7 || (WebKit::shouldTransform(*v7, a2) & 1) == 0)
      {
        ++v7;
        v8 -= 8;
        if (!v8) {
          goto LABEL_2;
        }
      }
      return 1;
    }
  }
LABEL_2:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 9)
  {
    unsigned int v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 16));
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = v13 ? v13 + 16 * *(unsigned int *)(v13 - 4) : 0;
    if ((void *)v14 != v9)
    {
      do
      {
        uint64_t v15 = v10[1];
        if (v15)
        {
          CFRetain(*(CFTypeRef *)(v15 + 8));
          char shouldTransform = WebKit::shouldTransform(v15, a2);
          CFRelease(*(CFTypeRef *)(v15 + 8));
          if (shouldTransform) {
            return 1;
          }
        }
        while (1)
        {
          v10 += 2;
          if (v10 == v12) {
            break;
          }
          if ((unint64_t)(*v10 + 1) > 1) {
            goto LABEL_21;
          }
        }
        uint64_t v10 = v12;
LABEL_21:
        ;
      }
      while (v10 != (void *)v14);
    }
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16);

  return v4(a2, a1);
}

uint64_t WebKit::transformGraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 28);
    if (v8)
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v9 = WTF::fastMalloc((WTF *)(8 * v8));
      LODWORD(v28) = v8;
      uint64_t v27 = v9;
      unint64_t v10 = *(unsigned int *)(a1 + 28);
      if (v10)
      {
        uint64_t v11 = v9;
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 8 * v12);
          if (v13)
          {
            WebKit::transformGraph(&v29, v13, a2);
            uint64_t v14 = v29;
            unint64_t v10 = *(unsigned int *)(a1 + 28);
          }
          else
          {
            uint64_t v14 = 0;
          }
          unint64_t v15 = v12 + 1;
          *(void *)(v11 + 8 * v12) = v14;
          unint64_t v12 = v15;
        }
        while (v15 < v10);
        HIDWORD(v28) = v15;
      }
    }
    API::Array::create(&v27, a3);
    return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v16);
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 9)
  {
    uint64_t v29 = 0;
    uint64_t v17 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 16));
    char v18 = v17;
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(a1 + 16);
    if (v21) {
      char v22 = (WTF::StringImpl **)(v21 + 16 * *(unsigned int *)(v21 - 4));
    }
    else {
      char v22 = 0;
    }
    if (v22 != v17)
    {
      do
      {
        char v23 = v18[1];
        if (v23)
        {
          CFRetain(*((CFTypeRef *)v23 + 1));
          WebKit::transformGraph(&v26, v23, a2);
          WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v29, v18, &v26, (uint64_t)&v27);
          uint64_t v24 = v26;
          uint64_t v26 = 0;
          if (v24) {
            CFRelease(*(CFTypeRef *)(v24 + 8));
          }
          CFRelease(*((CFTypeRef *)v23 + 1));
        }
        else
        {
          WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)&v27, &v29, v18);
        }
        while (1)
        {
          v18 += 2;
          if (v18 == v20) {
            break;
          }
          if ((unint64_t)*v18 + 1 > 1) {
            goto LABEL_28;
          }
        }
        char v18 = v20;
LABEL_28:
        ;
      }
      while (v18 != v22);
    }
    API::Dictionary::create(&v29, (WebKit **)a3);
    uint64_t result = v29;
    if (v29) {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v25);
    }
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);
    return v7(a2, a1);
  }
  return result;
}

uint64_t WebKit::WebBackForwardListItem::create@<X0>(WTF::RunLoop *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  if (WTF::RunLoop::isCurrent(v6))
  {
    uint64_t v7 = API::Object::newObject(0x1C0uLL, 44);
    uint64_t result = WebKit::WebBackForwardListItem::WebBackForwardListItem(v7, (uint64_t)a1, a2);
    *a3 = result;
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebBackForwardListItem::WebBackForwardListItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9D1348;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = v6;
  WebKit::FrameState::FrameState(a1 + 56, (uint64_t *)(a2 + 24));
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 272);
  uint64_t v7 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 312) = v7;
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 288);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 296);
  uint64_t v8 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a1 + 336) = v8;
  *(void *)(a1 + 344) = 0;
  uint64_t v9 = (WebKit::WebBackForwardListItem *)WTF::URL::invalidate((WTF::URL *)(a1 + 344));
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 384) = a3;
  *(void *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  WebKit::WebBackForwardListItem::allItems(v9);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebBackForwardListItem&>(&WebKit::WebBackForwardListItem::allItems(void)::items, (void *)(a1 + 32), a1, (uint64_t)v12);
  return a1;
}

uint64_t *WebKit::WebBackForwardListItem::allItems(WebKit::WebBackForwardListItem *this)
{
  uint64_t v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198D4B4ACLL);
  }
  {
    WebKit::WebBackForwardListItem::allItems(void)::items = 0;
  }
  return &WebKit::WebBackForwardListItem::allItems(void)::items;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebBackForwardListItem&>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v29 = -1640531527;
  __int16 v30 = 0;
  char v31 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v29, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  unsigned int v11 = result & v9;
  unint64_t v12 = (void *)(v8 + 24 * (result & v9));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    unint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        uint64_t v25 = *a1;
        if (*a1) {
          unsigned int v26 = *(_DWORD *)(v25 - 4);
        }
        else {
          unsigned int v26 = 0;
        }
        char v28 = 0;
        uint64_t v27 = v25 + 24 * v26;
        goto LABEL_31;
      }
      if (v13 == -1) {
        unint64_t v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      unint64_t v12 = (void *)(v8 + 24 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      void *v15 = 0;
      v15[1] = 0;
      void v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      unint64_t v12 = v15;
    }
  }
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  char v18 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v18, 1u);
  uint64_t result = v12[2];
  void v12[2] = v18;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = WTF::fastFree((WTF *)result, v17);
  }
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, (uint64_t)v12);
      unint64_t v12 = (void *)result;
      uint64_t v21 = *a1;
      if (*a1) {
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      }
      else {
        LODWORD(v24) = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  uint64_t v27 = v21 + 24 * v24;
  char v28 = 1;
LABEL_31:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

void WebKit::WebBackForwardListItem::~WebBackForwardListItem(WTF::StringImpl **this)
{
  *this = (WTF::StringImpl *)&unk_1EE9D1348;
  int v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  isCurrent = (WebKit::WebBackForwardListItem *)WTF::RunLoop::isCurrent(v2);
  if ((isCurrent & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198D4B9ACLL);
  }
  WebKit::WebBackForwardListItem::allItems(isCurrent);
  uint64_t v5 = WebKit::WebBackForwardListItem::allItems(void)::items;
  if (WebKit::WebBackForwardListItem::allItems(void)::items)
  {
    unsigned int v6 = *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 8);
    unsigned int v34 = -1640531527;
    __int16 v35 = 0;
    char v36 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v34, this + 4);
    int v7 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
    uint64_t v8 = this[4];
    int v9 = this[5];
    unsigned int v10 = v7 & v6;
    unsigned int v11 = (WTF::StringImpl **)(v5 + 24 * (v7 & v6));
    unint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (*v11 == v8 && v13 == v9)
    {
LABEL_14:
      uint64_t v17 = WebKit::WebBackForwardListItem::allItems(void)::items;
      if (!WebKit::WebBackForwardListItem::allItems(void)::items)
      {
LABEL_19:
        if ((WTF::StringImpl **)v17 != v11)
        {
          void *v11 = (WTF::StringImpl *)-1;
          v11[1] = (WTF::StringImpl *)-1;
          char v18 = (unsigned int *)v11[2];
          v11[2] = 0;
          if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v4);
          }
          ++*(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 16);
          if (WebKit::WebBackForwardListItem::allItems(void)::items) {
            int v19 = *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 12) - 1;
          }
          else {
            int v19 = -1;
          }
          *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 12) = v19;
          if (WebKit::WebBackForwardListItem::allItems(void)::items)
          {
            unsigned int v20 = *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 4);
            if (6 * *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 12) < v20 && v20 >= 9) {
              WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(&WebKit::WebBackForwardListItem::allItems(void)::items, v20 >> 1, 0);
            }
          }
        }
        goto LABEL_31;
      }
LABEL_18:
      v17 += 24 * *(unsigned int *)(v17 - 4);
      if ((WTF::StringImpl **)v17 == v11) {
        goto LABEL_31;
      }
      goto LABEL_19;
    }
    int v15 = 1;
    while ((unint64_t)v12 | (unint64_t)v13)
    {
      unsigned int v10 = (v10 + v15) & v6;
      unsigned int v11 = (WTF::StringImpl **)(v5 + 24 * v10);
      unint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      ++v15;
      if (*v11 == v8 && v13 == v9) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = WebKit::WebBackForwardListItem::allItems(void)::items;
    if (WebKit::WebBackForwardListItem::allItems(void)::items)
    {
      unsigned int v11 = (WTF::StringImpl **)(WebKit::WebBackForwardListItem::allItems(void)::items
                               + 24 * *(unsigned int *)(WebKit::WebBackForwardListItem::allItems(void)::items - 4));
      goto LABEL_18;
    }
  }
LABEL_31:
  int v22 = (WebKit::WebBackForwardCache **)this[52];
  if (v22) {
    WebKit::WebBackForwardCache::removeEntry(*v22, (WebKit::WebBackForwardListItem *)this);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 54), v4);
  unint64_t v24 = (unsigned int *)this[53];
  this[53] = 0;
  if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100](this + 52, 0);
  unsigned int v26 = this[43];
  this[43] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = this[42];
  this[42] = 0;
  if (v27) {
    WTF::RefCounted<WebKit::ViewSnapshot>::deref(v27);
  }
  char v28 = (unsigned int *)this[39];
  this[39] = 0;
  if (v28) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v28);
  }
  WebKit::FrameState::~FrameState(this + 7);
  __int16 v30 = this[6];
  this[6] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v29);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  char v31 = this[3];
  this[3] = 0;
  if (v31) {
    CFRelease(*((CFTypeRef *)v31 + 1));
  }
  char v32 = this[2];
  if (v32)
  {
    *((void *)v32 + 1) = 0;
    char v33 = (unsigned int *)this[2];
    this[2] = 0;
    if (v33)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v29);
      }
    }
  }
  else
  {
    this[2] = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebBackForwardListItem::~WebBackForwardListItem(this);

  JUMPOUT(0x199740C10);
}

BOOL WebKit::WebBackForwardListItem::itemIsClone(WebKit::WebBackForwardListItem *this, const WebKit::WebBackForwardListItem *a2, const WTF::StringImpl *a3)
{
  if (this != a2 && *((void *)this + 18) == *((void *)a2 + 18) && *((void *)this + 10) == *((void *)a2 + 10))
  {
    unsigned int v4 = *((_DWORD *)this + 71);
    if (v4 == *((_DWORD *)a2 + 71))
    {
      if (!v4) {
        return 1;
      }
      uint64_t v5 = *((void *)this + 34);
      uint64_t v6 = v5 + 248 * v4;
      while (1)
      {
        uint64_t v7 = *((unsigned int *)a2 + 71);
        BOOL v8 = *((_DWORD *)a2 + 71) != 0;
        if (!v7) {
          break;
        }
        uint64_t v9 = 248 * v7;
        for (int i = (WTF **)(*((void *)a2 + 34) + 24);
              (WTF::equal(*i, *(const WTF::StringImpl **)(v5 + 24), a3) & 1) == 0;
              i += 31)
        {
          v9 -= 248;
          if (!v9) {
            return 0;
          }
        }
        v5 += 248;
        if (v5 == v6) {
          return v8;
        }
      }
    }
  }
  return 0;
}

CFTypeRef *WebKit::WebBackForwardListItem::childItemForFrameID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (CFTypeRef *)WebKit::WebFrameProxy::webFrame(a2, a3);
  if (result)
  {
    uint64_t v5 = WebKit::WebFrameProxy::rootFrame(result);
    uint64_t v6 = *(unsigned int *)(a1 + 444);
    if (v6)
    {
      CFTypeRef v7 = v5[34];
      CFTypeRef v8 = v5[35];
      uint64_t v9 = 8 * v6;
      for (int i = *(CFTypeRef ***)(a1 + 432); ; ++i)
      {
        uint64_t result = *i;
        if ((*i)[50] == v7 && (*i)[51] == v8) {
          break;
        }
        v9 -= 8;
        if (!v9) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void WebKit::WebCompiledContentRuleList::~WebCompiledContentRuleList(WebKit::WebCompiledContentRuleList *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  MEMORY[0x1F416ECE0](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebCompiledContentRuleList::~WebCompiledContentRuleList(this, a2);

  WTF::fastFree(v2, v3);
}

const char *WebKit::WebCompiledContentRuleList::topURLFiltersBytecode(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((WebKit::WebCompiledContentRuleList **)this + 3), *((const char **)this + 8), *((void *)this + 9));
}

const char *WebKit::WebCompiledContentRuleList::frameURLFiltersBytecode(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((WebKit::WebCompiledContentRuleList **)this + 3), *((const char **)this + 10), *((void *)this + 11));
}

WTF::StringImpl *WebKit::blockedError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"Not allowed to use restricted network port", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 103, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFTypeRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::blockedByContentBlockerError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"The URL was blocked by a content blocker", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 104, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFTypeRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::cannotShowURLError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"The URL can’t be shown", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 101, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFTypeRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::wasBlockedByRestrictionsError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"The URL was blocked by device restrictions", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 106, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFTypeRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::interruptedForPolicyChangeError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"Frame load interrupted", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 102, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFTypeRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::ftpDisabledError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v12;
    }
    unsigned int v11 = v6;
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v7 = WebCore::ResourceRequestBase::url(this);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v11, 0, v7, (_DWORD **)&v12, 2, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t v9 = v12;
  unint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v11;
  unsigned int v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::failedCustomProtocolSyncLoad@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v13;
    }
    unint64_t v12 = v6;
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v7 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v13, (WebCore *)@"Error handling synchronous load with custom protocol", v8);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v12, 0, v7, (_DWORD **)&v13, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  unsigned int v10 = v13;
  uint64_t v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::blockedByContentFilterError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"The URL was blocked by a content filter", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 105, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFStringRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::cannotShowMIMETypeError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceResponseBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"Content with specified MIME type can’t be shown", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 100, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFStringRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::pluginWillHandleLoadError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceResponseBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"Plug-in handled load", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 204, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFStringRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::httpsUpgradeRedirectLoopError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"HTTPS Upgrade redirect loop detected", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 304, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFStringRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::httpNavigationWithHTTPSOnlyError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((uint64_t *)&v8, (WebCore *)@"Navigation failed because the request was for an HTTP URL with HTTPS-Only enabled", v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 305, v4, (_DWORD **)&v8, 1, 0);
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t result = v8;
  CFStringRef v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)44>::type()
{
  return 44;
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)*a3 + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*a3);
  }
  unsigned int v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = (uint64_t *)(v6 + 16 * (v9 & v7));
    uint64_t v14 = (WTF *)*v13;
    if (*v13 != -1) {
      break;
    }
    unsigned int v10 = (uint64_t *)(v6 + 16 * v12);
LABEL_13:
    unsigned int v9 = i + v12;
  }
  if (!v14)
  {
    if (v10)
    {
      *unsigned int v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = v10;
    }
    WTF::String::operator=(v13, a3);
    uint64_t v15 = v13[1];
    v13[1] = 0;
    if (v15) {
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
    uint64_t v16 = *a2;
    if (*a2) {
      int v17 = *(_DWORD *)(v16 - 12) + 1;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v16 - 12) = v17;
    uint64_t v18 = *a2;
    if (*a2) {
      int v19 = *(_DWORD *)(v18 - 12);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
    unint64_t v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 <= 2 * v20)
      {
LABEL_24:
        uint64_t v13 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (uint64_t)v13);
        uint64_t v18 = *a2;
        if (*a2) {
          unint64_t v21 = *(unsigned int *)(v18 - 4);
        }
        else {
          unint64_t v21 = 0;
        }
      }
    }
    else if (3 * v21 <= 4 * v20)
    {
      goto LABEL_24;
    }
    uint64_t v25 = v18 + 16 * v21;
    char v24 = 1;
    goto LABEL_31;
  }
  if (!WTF::equal(v14, *a3, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t v22 = *a2;
  if (*a2) {
    uint64_t v23 = *(unsigned int *)(v22 - 4);
  }
  else {
    uint64_t v23 = 0;
  }
  char v24 = 0;
  uint64_t v25 = v22 + 16 * v23;
LABEL_31:
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v24;
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> &&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v5 = **a3;
  **a3 = 0;
  uint64_t v6 = a1[1];
  a1[1] = v5;
  if (v6)
  {
    int v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

WebKit::WebBackForwardCacheEntry *std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100](WebKit::WebBackForwardCacheEntry **a1, WebKit::WebBackForwardCacheEntry *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(result);
    return (WebKit::WebBackForwardCacheEntry *)WTF::fastFree(v4, v5);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v5 + 24 * v10;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v16 = v5 + 24 * v10;
          int v17 = *(unsigned int **)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v9);
          }
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v31 = -1640531527;
          __int16 v32 = 0;
          char v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v31, (void *)(v5 + 24 * v10));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v15;
            unint64_t v21 = (_OWORD *)(v14 + 24 * (v18 & v15));
            int v18 = ++v19 + (v18 & v15);
          }
          while (*v21 != 0);
          uint64_t v22 = v14 + 24 * v20;
          uint64_t v25 = *(unsigned int **)(v22 + 16);
          char v24 = (void *)(v22 + 16);
          uint64_t v23 = v25;
          *char v24 = 0;
          if (v25 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v9);
          }
          _OWORD *v21 = *(_OWORD *)v13;
          uint64_t v26 = v5 + 24 * v10;
          uint64_t v27 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          *char v24 = v27;
          char v28 = *(unsigned int **)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v9);
          }
          if (v13 == a3) {
            unsigned int v11 = v21;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WebKit::WebURLSchemeHandlerCocoa::create@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::WebURLSchemeHandlerCocoa::WebURLSchemeHandlerCocoa(v4, a1);
  *a2 = v4;
  return result;
}

void sub_198D4CCD8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebURLSchemeHandlerCocoa::WebURLSchemeHandlerCocoa(uint64_t a1, const void *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EE9D13B0;
  *(void *)(a1 + 48) = a2;
  if (a2) {
    CFRetain(a2);
  }
  return a1;
}

void sub_198D4CD54(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebURLSchemeHandlerCocoa::platformStartTask(uint64_t a1, WebKit::WebPageProxy *this, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a3 + 8);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  WebKit::WebPageProxy::cocoaView(this, &v7);
  unsigned int v6 = v7;
  if (v7)
  {
    [*(id *)(a1 + 48) webView:v7 startURLSchemeTask:v5];
    CFRelease(v6);
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_198D4CE04(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebURLSchemeHandlerCocoa::platformStopTask(uint64_t a1, WebKit::WebPageProxy *this, uint64_t a3)
{
  unsigned int v6 = *(const void **)(a3 + 8);
  if (v6) {
    CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  WebKit::WebPageProxy::cocoaView(this, &v8);
  int v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 48) webView:v8 stopURLSchemeTask:v6];
    CFRelease(v7);
    if (!v6) {
      return;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 269) = 1;
    if (!v6) {
      return;
    }
  }

  CFRelease(v6);
}

void sub_198D4CED8(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void WebKit::XPCConnectionTerminationWatchdog::startConnectionTerminationWatchdog()
{
}

void sub_198D4CF54(_Unwind_Exception *a1)
{
  MEMORY[0x199740C10](v1, 0x10E2C4057BE908CLL);
  _Unwind_Resume(a1);
}

uint64_t WebKit::XPCConnectionTerminationWatchdog::XPCConnectionTerminationWatchdog(uint64_t a1, void *a2)
{
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9D1550;
  v5[1] = WebKit::XPCConnectionTerminationWatchdog::watchdogTimerFired;
  void v5[2] = 0;
  v5[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)a1, v4);
  *(void *)a1 = &unk_1EE9B3390;
  *(void *)(a1 + 24) = v5;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v6 = v13;
  uint64_t v12 = v13;
  uint64_t v13 = 0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0xC0);
  WebKit::ProcessAndUIAssertion::ProcessAndUIAssertion(v7, a2, (_DWORD **)&v12, 1);
  *(void *)(a1 + 32) = v7;
  WebKit::ProcessAssertion::acquireAsync(v7, (uint64_t *)&v13);
  unsigned int v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    (*(void (**)(WTF::StringImpl *))(*(void *)v9 + 8))(v9);
    if (v6)
    {
LABEL_3:
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v8);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  uint64_t v10 = a2[17];
  if (v10)
  {
    std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a1 + 40), v10 + 40);
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 56) = 0;
  }
  WTF::RunLoop::TimerBase::start();
  return a1;
}

void sub_198D4D118(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v13 = *((void *)v10 + 4);
  *((void *)v10 + 4) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), a2);
  }
  *(void *)uint64_t v10 = v11;
  uint64_t v14 = *((void *)v10 + 3);
  *((void *)v10 + 3) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v10);
  _Unwind_Resume(a1);
}

void sub_198D4D1F4()
{
  (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  JUMPOUT(0x198D4D1C4);
}

uint64_t WebKit::XPCConnectionTerminationWatchdog::watchdogTimerFired(WebKit::XPCConnectionTerminationWatchdog *this, void *a2)
{
  if (*((unsigned char *)this + 56))
  {
    double v3 = WebKit::ExtensionProcess::invalidate((WebKit::XPCConnectionTerminationWatchdog *)((char *)this + 40));
    if (*((unsigned char *)this + 56))
    {
      uint64_t v4 = *((unsigned int *)this + 12);
      if (v4 != -1) {
        ((void (*)(char *, char *, double))off_1EE9D1528[v4])(&v8, (char *)this + 40, v3);
      }
      *((_DWORD *)this + 12) = -1;
    }
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), a2);
  }
  *(void *)this = &unk_1EE9B3390;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WTF::RunLoop::TimerBase::~TimerBase(this);
  return MEMORY[0x199740C10]();
}

void *WebKit::NavigationSOAuthorizationSession::NavigationSOAuthorizationSession(void *a1, const void **a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v11 = *a2;
  uint64_t v14 = v11;
  if (v11) {
    CFRetain(v11);
  }
  WebKit::SOAuthorizationSession::SOAuthorizationSession((uint64_t)a1, &v14, a3, a4, a5);
  if (v11) {
    CFRelease(v11);
  }
  *a1 = &unk_1EE9D13F0;
  a1[8] = &unk_1EE9D1448;
  a1[9] = 0;
  uint64_t v12 = *a6;
  *a6 = 0;
  a1[10] = v12;
  a1[11] = 0;
  return a1;
}

void sub_198D4D3E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession(WebKit::NavigationSOAuthorizationSession *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D13F0;
  double v3 = (void *)((char *)this + 64);
  *((void *)this + 8) = &unk_1EE9D1448;
  uint64_t v4 = (uint64_t *)((char *)this + 80);
  if (*((void *)this + 10)) {
    WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
  }
  if (*((unsigned char *)this + 16) == 2)
  {
    uint64_t v5 = *((void *)this + 5);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v6 + 1216, v3);
      }
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *v4;
  uint64_t *v4 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 9, a2);

  WebKit::SOAuthorizationSession::~SOAuthorizationSession(this);
}

void sub_198D4D510(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v5 = *(WTF::StringImpl **)(v2 + 88);
  *(void *)(v2 + 88) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 72), a2);
  WebKit::SOAuthorizationSession::~SOAuthorizationSession((WebKit::SOAuthorizationSession *)v2);
  _Unwind_Resume(a1);
}

void WebKit::NavigationSOAuthorizationSession::shouldStartInternal(WebKit::NavigationSOAuthorizationSession *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v3 == 2)
      {
        uint64_t v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        uint64_t v4 = "PopUp";
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = "Redirect";
    }
    uint64_t v5 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v5 = "Active";
        break;
      case 2:
        uint64_t v5 = "Waiting";
        break;
      case 3:
        uint64_t v5 = "Completed";
        break;
      default:
        uint64_t v5 = 0;
        break;
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v6 = v7 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    *(_DWORD *)int v18 = 134218754;
    *(void *)&void v18[4] = this;
    __int16 v19 = 2080;
    unsigned int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v5;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::shouldStartInternal: m_page=%p", v18, 0x2Au);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v9 - 8));
    char v10 = 0;
    uint64_t v11 = v9 - 16;
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 1;
  }
  (*(void (**)(WebKit::NavigationSOAuthorizationSession *))(*(void *)this + 64))(this);
  if ((*(_WORD *)(*(void *)(v11 + 32) + 64) & 0x10) != 0)
  {
    WebKit::SOAuthorizationSession::start(this);
    goto LABEL_42;
  }
  uint64_t v12 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v13 == 2)
      {
        uint64_t v14 = "SubFrame";
      }
      else if (v13 == 1)
      {
        uint64_t v14 = "PopUp";
      }
      else
      {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = "Redirect";
    }
    unsigned int v15 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        unsigned int v15 = "Active";
        break;
      case 2:
        unsigned int v15 = "Waiting";
        break;
      case 3:
        unsigned int v15 = "Completed";
        break;
      default:
        unsigned int v15 = 0;
        break;
    }
    *(_DWORD *)int v18 = 134218498;
    *(void *)&void v18[4] = this;
    __int16 v19 = 2080;
    unsigned int v20 = v14;
    __int16 v21 = 2080;
    uint64_t v22 = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::shouldStartInternal: Starting Extensible SSO authentication for a web view that is not attached to a window. Loading will pause until a window is attached.", v18, 0x20u);
  }
  *((unsigned char *)this + 16) = 2;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v11 + 1232, (unsigned int *)this + 16, (uint64_t)v18);
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v11 + 32) + 1000), v18);
  int v17 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = *(void *)v18;
  if (!v17)
  {
LABEL_42:
    if (v10) {
      return;
    }
    goto LABEL_43;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_42;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (v10) {
    return;
  }
LABEL_43:
  CFRelease(*(CFTypeRef *)(v11 + 8));
}

void sub_198D4D8DC(_Unwind_Exception *exception_object)
{
}

void WebKit::NavigationSOAuthorizationSession::webViewDidMoveToWindow(WebKit::NavigationSOAuthorizationSession *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    uint64_t v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = "Active";
        break;
      case 2:
        uint64_t v7 = "Waiting";
        break;
      case 3:
        uint64_t v7 = "Completed";
        break;
      default:
        uint64_t v7 = 0;
        break;
    }
    *(_DWORD *)__int16 v19 = 134218498;
    *(void *)&v19[4] = this;
    __int16 v20 = 2080;
    __int16 v21 = v6;
    __int16 v22 = 2080;
    __int16 v23 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::webViewDidMoveToWindow", v19, 0x20u);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      if (*((unsigned char *)this + 16) == 2 && (*(_WORD *)(*(void *)(v9 + 16) + 64) & 0x10) != 0)
      {
        char v10 = qword_1EB357BC8;
        if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *((unsigned __int8 *)this + 48);
          if (*((unsigned char *)this + 48))
          {
            if (v11 == 2)
            {
              uint64_t v12 = "SubFrame";
            }
            else if (v11 == 1)
            {
              uint64_t v12 = "PopUp";
            }
            else
            {
              uint64_t v12 = 0;
            }
          }
          else
          {
            uint64_t v12 = "Redirect";
          }
          *(_DWORD *)__int16 v19 = 134218498;
          *(void *)&v19[4] = this;
          __int16 v20 = 2080;
          __int16 v21 = v12;
          __int16 v22 = 2080;
          __int16 v23 = "Waiting";
          _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::pageActiveURLDidChangeDuringWaiting", v19, 0x20u);
        }
        uint64_t v13 = *((void *)this + 5);
        if (!v13) {
          goto LABEL_36;
        }
        uint64_t v14 = *(void *)(v13 + 8);
        if (!v14) {
          goto LABEL_36;
        }
        CFRetain(*(CFTypeRef *)(v14 - 8));
        WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v14 + 16) + 1000), v19);
        unsigned int v15 = *(WTF::StringImpl **)v19;
        char v18 = WTF::equal(*(WTF **)v19, *((const WTF::StringImpl **)this + 11), v16);
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v17);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        CFRelease(*(CFTypeRef *)(v14 - 8));
        if (v18) {
          WebKit::SOAuthorizationSession::start(this);
        }
        else {
LABEL_36:
        }
          WebKit::SOAuthorizationSession::abort(this);
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v9 + 1216, (void *)this + 8);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
  }
}

void sub_198D4DBD4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v4 - 8));
  CFRelease(*(CFTypeRef *)(v3 - 8));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::NavigationSOAuthorizationSession::webViewDidMoveToWindow(WebKit::NavigationSOAuthorizationSession *this)
{
}

void sub_198D4DD28(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::close(WebKit::PopUpSOAuthorizationSession *this, WKWebView *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((unsigned __int8 *)this + 48);
    uint64_t v6 = "SubFrame";
    uint64_t v7 = "PopUp";
    if (v5 != 1) {
      uint64_t v7 = 0;
    }
    if (v5 != 2) {
      uint64_t v6 = v7;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = "Redirect";
    }
    uint64_t v9 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v9 = "Active";
        break;
      case 2:
        uint64_t v9 = "Waiting";
        break;
      case 3:
        uint64_t v9 = "Completed";
        break;
      default:
        uint64_t v9 = 0;
        break;
    }
    int v12 = 134218498;
    uint64_t v13 = this;
    __int16 v14 = 2080;
    unsigned int v15 = v8;
    __int16 v16 = 2080;
    int v17 = v9;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::close", (uint8_t *)&v12, 0x20u);
  }
  char v10 = (WKWebView *)*((void *)this + 12);
  if (v10)
  {
    if (v10 == a2 && *((unsigned char *)this + 16) == 3)
    {
      *((void *)this + 12) = 0;
      CFRelease(a2);
      WTFLogAlways();
    }
  }
}

void sub_198D4DF6C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::create(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>)
{
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x68);
  unsigned int v15 = *a2;
  __int16 v16 = v15;
  if (v15) {
    CFRetain(v15);
  }
  WebKit::PopUpSOAuthorizationSession::PopUpSOAuthorizationSession(v14, a1, &v16, a3, a4, a5, a6);
  *a7 = v14;
  if (v15)
  {
    CFRelease(v15);
  }
}

void sub_198D4E070(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WebKit::PopUpSOAuthorizationSession::PopUpSOAuthorizationSession(void *a1, uint64_t *a2, const void **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v13 = *a3;
  uint64_t v18 = v13;
  if (v13) {
    CFRetain(v13);
  }
  WebKit::SOAuthorizationSession::SOAuthorizationSession((uint64_t)a1, &v18, a5, a4, 1);
  if (v13) {
    CFRelease(v13);
  }
  *a1 = &unk_1EE9D1470;
  uint64_t v14 = *a2;
  *a2 = 0;
  a1[8] = v14;
  uint64_t v15 = *a6;
  *a6 = 0;
  a1[9] = v15;
  uint64_t v16 = *a7;
  *a7 = 0;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v16;
  return a1;
}

void sub_198D4E16C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PopUpSOAuthorizationSession::~PopUpSOAuthorizationSession(WebKit::PopUpSOAuthorizationSession *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 72);
  if (*((void *)this + 9)) {
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()((uint64_t *)this + 9);
  }
  uint64_t v3 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v2;
  uint64_t *v2 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  WebKit::SOAuthorizationSession::~SOAuthorizationSession(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PopUpSOAuthorizationSession::~PopUpSOAuthorizationSession(this);

  WTF::fastFree(v1, v2);
}

void sub_198D4E280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  uint64_t v13 = (const void *)*((void *)v10 + 12);
  *((void *)v10 + 12) = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)*((void *)v10 + 11);
  *((void *)v10 + 11) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *((void *)v10 + 10);
  *((void *)v10 + 10) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *v11;
  uint64_t *v11 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)v10 + 8);
  *((void *)v10 + 8) = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  WebKit::SOAuthorizationSession::~SOAuthorizationSession(v10);
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::shouldStartInternal(WebKit::PopUpSOAuthorizationSession *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    uint64_t v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = "Active";
        break;
      case 2:
        uint64_t v7 = "Waiting";
        break;
      case 3:
        uint64_t v7 = "Completed";
        break;
      default:
        uint64_t v7 = 0;
        break;
    }
    uint64_t v8 = *((void *)this + 5);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        uint64_t v8 = v9 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    int v10 = 134218754;
    int v11 = this;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    __int16 v14 = 2080;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::shouldStartInternal: m_page=%p", (uint8_t *)&v10, 0x2Au);
  }
  WebKit::SOAuthorizationSession::start(this);
}

void WebKit::PopUpSOAuthorizationSession::fallBackToWebPathInternal(WebKit::PopUpSOAuthorizationSession *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    uint64_t v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = "Active";
        break;
      case 2:
        uint64_t v7 = "Waiting";
        break;
      case 3:
        uint64_t v7 = "Completed";
        break;
      default:
        uint64_t v7 = 0;
        break;
    }
    *(_DWORD *)uint64_t v9 = 134218498;
    *(void *)&void v9[4] = this;
    __int16 v10 = 2080;
    int v11 = v6;
    __int16 v12 = 2080;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::fallBackToWebPathInternal", v9, 0x20u);
  }
  *(void *)uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  (*(void (**)(void, unsigned char *, char *))(**((void **)this + 10) + 16))(*((void *)this + 10), v9, (char *)this + 72);
  uint64_t v8 = *(void *)v9;
  *(void *)uint64_t v9 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void sub_198D4E67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PopUpSOAuthorizationSession::abortInternal(WebKit::PopUpSOAuthorizationSession *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v3 == 2)
      {
        uint64_t v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        uint64_t v4 = "PopUp";
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = "Redirect";
    }
    uint64_t v5 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v5 = "Active";
        break;
      case 2:
        uint64_t v5 = "Waiting";
        break;
      case 3:
        uint64_t v5 = "Completed";
        break;
      default:
        uint64_t v5 = 0;
        break;
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v6 = v7 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    *(_DWORD *)uint64_t v13 = 134218754;
    *(void *)&v13[4] = this;
    __int16 v14 = 2080;
    uint64_t v15 = v4;
    __int16 v16 = 2080;
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    uint64_t v19 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::abortInternal: m_page=%p", v13, 0x2Au);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8
    && *(void *)(v8 + 8)
    && (WebKit::PopUpSOAuthorizationSession::initSecretWebView(this), (uint64_t v9 = *((void *)this + 12)) != 0))
  {
    uint64_t v10 = *(void *)(v9 + 416);
    if (v10) {
      CFRetain(*(CFTypeRef *)(v10 + 8));
    }
    *(void *)uint64_t v13 = v10;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()((uint64_t *)this + 9);
    uint64_t v11 = *(void *)v13;
    *(void *)uint64_t v13 = 0;
    if (v11) {
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    objc_msgSend(*((id *)this + 12), "evaluateJavaScript:completionHandler:", @"window.close()", 0, *(void *)v13);
  }
  else
  {
    *(void *)uint64_t v13 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()((uint64_t *)this + 9);
    uint64_t v12 = *(void *)v13;
    *(void *)uint64_t v13 = 0;
    if (v12) {
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
  }
}

void sub_198D4E8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PopUpSOAuthorizationSession::initSecretWebView(WebKit::PopUpSOAuthorizationSession *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    uint64_t v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = "Active";
        break;
      case 2:
        uint64_t v7 = "Waiting";
        break;
      case 3:
        uint64_t v7 = "Completed";
        break;
      default:
        uint64_t v7 = 0;
        break;
    }
    int v18 = 134218498;
    uint64_t v19 = this;
    __int16 v20 = 2080;
    __int16 v21 = v6;
    __int16 v22 = 2080;
    __int16 v23 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::initSecretWebView", (uint8_t *)&v18, 0x20u);
  }
  uint64_t v8 = *((void *)this + 8);
  uint64_t v9 = *(void **)(v8 + 8);
  if (v9) {
    CFRetain(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v10 = objc_msgSend((id)objc_msgSend(v9, "preferences"), "copy");
  [v10 _setExtensibleSSOEnabled:0];
  [v9 setPreferences:v10];
  uint64_t v11 = [WKWebView alloc];
  uint64_t v12 = -[WKWebView initWithFrame:configuration:](v11, "initWithFrame:configuration:", v9, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  uint64_t v13 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = v12;
  if (v13) {
    CFRelease(v13);
  }
  __int16 v14 = [[WKSOSecretDelegate alloc] initWithSession:this];
  uint64_t v15 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = v14;
  if (v15)
  {
    CFRelease(v15);
    __int16 v14 = (WKSOSecretDelegate *)*((void *)this + 11);
  }
  [*((id *)this + 12) setUIDelegate:v14];
  [*((id *)this + 12) setNavigationDelegate:*((void *)this + 11)];
  uint64_t v17 = *(void *)(*(void *)(*((void *)this + 12) + 416) + 272);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v17 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v16))
  {
    __break(0xC471u);
    JUMPOUT(0x198D4EB80);
  }
  WTFLogAlways();
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_198D4EBB4(_Unwind_Exception *exception_object)
{
}

void WebKit::PopUpSOAuthorizationSession::completeInternal(WebKit::PopUpSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, NSData *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)this + 48);
    uint64_t v8 = "SubFrame";
    uint64_t v9 = "PopUp";
    if (v7 != 1) {
      uint64_t v9 = 0;
    }
    if (v7 != 2) {
      uint64_t v8 = v9;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = "Redirect";
    }
    uint64_t v11 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v11 = "Active";
        break;
      case 2:
        uint64_t v11 = "Waiting";
        break;
      case 3:
        uint64_t v11 = "Completed";
        break;
      default:
        uint64_t v11 = 0;
        break;
    }
    *(_DWORD *)uint64_t v17 = 134218754;
    *(void *)&void v17[4] = this;
    __int16 v18 = 2080;
    uint64_t v19 = v10;
    __int16 v20 = 2080;
    __int16 v21 = v11;
    __int16 v22 = 1024;
    int v23 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::completeInternal: httpState=%d", v17, 0x26u);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 200
    && (uint64_t v12 = *((void *)this + 5)) != 0
    && *(void *)(v12 + 8)
    && (WebKit::PopUpSOAuthorizationSession::initSecretWebView(this), (uint64_t v13 = *((void *)this + 12)) != 0))
  {
    uint64_t v14 = *(void *)(v13 + 416);
    if (v14) {
      CFRetain(*(CFTypeRef *)(v14 + 8));
    }
    *(void *)uint64_t v17 = v14;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)>::operator()((uint64_t *)this + 9);
    uint64_t v15 = *(void *)v17;
    *(void *)uint64_t v17 = 0;
    if (v15) {
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
    __int16 v16 = (void *)*((void *)this + 12);
    WebCore::ResourceResponseBase::url(a2);
    objc_msgSend(v16, "loadData:MIMEType:characterEncodingName:baseURL:", a3, @"text/html", @"UTF-8", WTF::URL::operator NSURL *(), *(void *)v17);
  }
  else
  {
    WebKit::PopUpSOAuthorizationSession::fallBackToWebPathInternal(this);
  }
}

void sub_198D4EE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RedirectSOAuthorizationSession::create(const void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x60);
  uint64_t v11 = *a1;
  uint64_t v12 = v11;
  if (v11) {
    CFRetain(v11);
  }
  WebKit::RedirectSOAuthorizationSession::RedirectSOAuthorizationSession(v10, &v12, a2, a3, a4);
  *a5 = v10;
  if (v11)
  {
    CFRelease(v11);
  }
}

void sub_198D4EF10(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WebKit::RedirectSOAuthorizationSession::RedirectSOAuthorizationSession(void *a1, const void **a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *a2;
  uint64_t v11 = v9;
  if (v9) {
    CFRetain(v9);
  }
  WebKit::NavigationSOAuthorizationSession::NavigationSOAuthorizationSession(a1, &v11, a3, a4, 0, a5);
  if (v9) {
    CFRelease(v9);
  }
  *a1 = &unk_1EE9D14B8;
  a1[8] = &unk_1EE9D1510;
  return a1;
}

void sub_198D4EFF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RedirectSOAuthorizationSession::fallBackToWebPathInternal(WebKit::RedirectSOAuthorizationSession *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    uint64_t v8 = *((void *)this + 4);
    int v10 = 134218754;
    uint64_t v11 = this;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    __int16 v14 = 2080;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::fallBackToWebPathInternal: navigationAction=%p", (uint8_t *)&v10, 0x2Au);
  }
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
}

uint64_t WebKit::RedirectSOAuthorizationSession::abortInternal(WebKit::RedirectSOAuthorizationSession *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    int v9 = 134218498;
    int v10 = this;
    __int16 v11 = 2080;
    __int16 v12 = v6;
    __int16 v13 = 2080;
    __int16 v14 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::abortInternal", (uint8_t *)&v9, 0x20u);
  }
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
}

void WebKit::RedirectSOAuthorizationSession::completeInternal(WebKit::RedirectSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, NSData *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  char v54 = (WebCore::FragmentedSharedBuffer *)a3;
  uint64_t v5 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((unsigned __int8 *)this + 48);
    int v7 = "SubFrame";
    uint64_t v8 = "PopUp";
    if (v6 != 1) {
      uint64_t v8 = 0;
    }
    if (v6 != 2) {
      int v7 = v8;
    }
    if (*((unsigned char *)this + 48)) {
      int v9 = v7;
    }
    else {
      int v9 = "Redirect";
    }
    int v10 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v10 = "Active";
        break;
      case 2:
        int v10 = "Waiting";
        break;
      case 3:
        int v10 = "Completed";
        break;
      default:
        int v10 = 0;
        break;
    }
    int v11 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    uint64_t v12 = *((void *)this + 4);
    *(_DWORD *)long long buf = 134219010;
    *(void *)&void buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v9;
    __int16 v57 = 2080;
    char v58 = v10;
    __int16 v59 = 1024;
    int v60 = v11;
    __int16 v61 = 2048;
    uint64_t v62 = v12;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::completeInternal: httpState=%d, navigationAction=%p", buf, 0x30u);
  }
  uint64_t v13 = *((void *)this + 4);
  if (v13) {
    CFRetain(*(CFTypeRef *)(v13 + 8));
  }
  uint64_t v14 = *((void *)this + 5);
  if (!v14)
  {
    uint64_t v15 = 0;
    goto LABEL_21;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15)
  {
LABEL_21:
    int v16 = 1;
    goto LABEL_22;
  }
  CFRetain(*(CFTypeRef *)(v15 - 8));
  int v16 = 0;
  v15 -= 16;
LABEL_22:
  if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 302
    || WebCore::ResourceResponseBase::httpStatusCode(a2) == 200)
  {
    if (!v16) {
      goto LABEL_25;
    }
  }
  else if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 307)
  {
    __int16 v22 = (void *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(v13 + 40));
    if (((v16 | MEMORY[0x19972E990](*v22, "POST", 4) ^ 1) & 1) == 0)
    {
LABEL_25:
      if (WebCore::ResourceResponseBase::httpStatusCode(a2) != 302)
      {
        if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 200)
        {
          WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
          *(unsigned char *)(v15 + 809) = 1;
          WebCore::SharedBuffer::create<NSData *&>(&v54, v26, (uint64_t *)&v55);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          int v53 = *(WTF::StringImpl **)buf;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          unsigned int v50 = *(WTF::StringImpl **)buf;
          uint64_t v27 = (WTF::StringImpl **)WebCore::ResourceResponseBase::url(a2);
          WebKit::WebPageProxy::loadData(v15, &v55, &v53, &v50, v27, 0, *(unsigned char *)(v13 + 369), &v46);
          uint64_t v29 = v46;
          uint64_t v46 = 0;
          if (v29) {
            CFRelease(*(CFTypeRef *)(v29 + 8));
          }
          __int16 v30 = v50;
          unsigned int v50 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v28);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          __int16 v35 = v53;
          int v53 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, v28);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          char v36 = (unsigned int *)v55;
          int v55 = 0;
          if (v36) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v36, v28);
          }
        }
        else
        {
          *(void *)long long buf = a2;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UseRedirectionForCurrentNavigation>(*(void *)(v15 + 256), (WebCore::ResourceResponseBase **)buf, *(void *)(*(void *)(v15 + 32) + 1928), 0);
          WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
        }
        goto LABEL_94;
      }
      WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
      if (*(void *)(v13 + 288)) {
        uint64_t v17 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v17)
      {
        WebCore::ResourceResponseBase::httpHeaderFields(a2);
        WebCore::HTTPHeaderMap::get();
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf, (const WTF::String *)&v55);
        WebKit::WebPageProxy::loadRequest(v15, (WebCore::ResourceRequestBase *)buf, 1, 0, 0, &v47);
        if (v47) {
          CFRelease(*(CFTypeRef *)(v47 + 8));
        }
        CFTypeRef v18 = cf;
        CFTypeRef cf = 0;
        if (v18) {
          CFRelease(v18);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
        __int16 v20 = v55;
        int v55 = 0;
        if (!v20) {
          goto LABEL_94;
        }
        int v21 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::destroy(v20, v19);
LABEL_94:
          CFRelease(*(CFTypeRef *)(v15 + 8));
          goto LABEL_95;
        }
      }
      else
      {
        *(unsigned char *)(v15 + 809) = 1;
        WebCore::ResourceResponseBase::httpHeaderFields(a2);
        WebCore::HTTPHeaderMap::get();
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"<script>location = '", 21, (uint64_t *)&v52, (uint64_t)"'</script>", 11, buf);
        WTF::String::utf8();
        __int16 v32 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v31);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        uint64_t v37 = v52;
        uint64_t v52 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, v31);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
        char v38 = v53;
        if (v53)
        {
          long long v39 = (char *)v53 + 16;
          char v38 = (WTF::StringImpl *)*((void *)v53 + 1);
        }
        else
        {
          long long v39 = 0;
        }
        *(void *)long long buf = v39;
        *(void *)&uint8_t buf[8] = v38;
        WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v50);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        int v49 = v55;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        __int16 v48 = v55;
        int v40 = (WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v13 + 40));
        WebKit::WebPageProxy::loadData(v15, &v50, &v49, &v48, v40, 0, *(unsigned char *)(v13 + 369), &v51);
        uint64_t v42 = v51;
        uint64_t v51 = 0;
        if (v42) {
          CFRelease(*(CFTypeRef *)(v42 + 8));
        }
        uint64_t v43 = v48;
        __int16 v48 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2) {
            WTF::StringImpl::destroy(v43, v41);
          }
          else {
            *(_DWORD *)v43 -= 2;
          }
        }
        uint64_t v44 = v49;
        int v49 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v41);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
        int v45 = (unsigned int *)v50;
        unsigned int v50 = 0;
        if (v45) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v45, v41);
        }
        __int16 v20 = v53;
        int v53 = 0;
        if (!v20) {
          goto LABEL_94;
        }
        int v21 = *(_DWORD *)v20 - 1;
        if (*(_DWORD *)v20 == 1)
        {
          WTF::fastFree(v20, v41);
          goto LABEL_94;
        }
      }
      *(_DWORD *)__int16 v20 = v21;
      goto LABEL_94;
    }
  }
  int v23 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v24 == 2)
      {
        uint64_t v25 = "SubFrame";
      }
      else if (v24 == 1)
      {
        uint64_t v25 = "PopUp";
      }
      else
      {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = "Redirect";
    }
    char v33 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        char v33 = "Active";
        break;
      case 2:
        char v33 = "Waiting";
        break;
      case 3:
        char v33 = "Completed";
        break;
      default:
        char v33 = 0;
        break;
    }
    int v34 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    *(_DWORD *)long long buf = 134219010;
    *(void *)&void buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v25;
    __int16 v57 = 2080;
    char v58 = v33;
    __int16 v59 = 1024;
    int v60 = v34;
    __int16 v61 = 1024;
    LODWORD(v62) = v16 ^ 1;
    _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::completeInternal: httpState=%d page=%d, so falling back to web path.", buf, 0x2Cu);
  }
  WebKit::RedirectSOAuthorizationSession::fallBackToWebPathInternal(this);
  if ((v16 & 1) == 0) {
    goto LABEL_94;
  }
LABEL_95:
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

void sub_198D4F9EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a13, a2);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 1) {
      WTF::fastFree(a16, a2);
    }
    else {
      --*(_DWORD *)a16;
    }
  }
  CFRelease(*(CFTypeRef *)(v19 + 8));
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  _Unwind_Resume(a1);
}

void WebKit::RedirectSOAuthorizationSession::beforeStart(WebKit::RedirectSOAuthorizationSession *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    uint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      uint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      int v6 = v4;
    }
    else {
      int v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    int v8 = 134218498;
    int v9 = this;
    __int16 v10 = 2080;
    int v11 = v6;
    __int16 v12 = 2080;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::beforeStart", (uint8_t *)&v8, 0x20u);
  }
}

void WebKit::WebURLSchemeHandlerCocoa::~WebURLSchemeHandlerCocoa(WebKit::WebURLSchemeHandlerCocoa *this, void *a2)
{
  *(void *)this = &unk_1EE9D13B0;
  int v3 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D13B0;
  int v3 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);

  WTF::fastFree(v4, v5);
}

uint64_t WebKit::WebURLSchemeHandlerCocoa::isAPIHandler(WebKit::WebURLSchemeHandlerCocoa *this)
{
  return 1;
}

uint64_t WebKit::SOAuthorizationSession::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions()
{
  return 0;
}

void WebKit::RedirectSOAuthorizationSession::~RedirectSOAuthorizationSession(WebKit::RedirectSOAuthorizationSession *this, WTF::StringImpl *a2)
{
  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RedirectSOAuthorizationSession::~RedirectSOAuthorizationSession(WebKit::RedirectSOAuthorizationSession *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession((WebKit::RedirectSOAuthorizationSession *)((char *)this - 64), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::XPCConnectionTerminationWatchdog::*&)(void),WebKit::XPCConnectionTerminationWatchdog*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v5 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9D1578;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v5;
  *(unsigned char *)(v8 + 24) = v6;
  __int16 v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

void sub_198D4FF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

WTF::StringImpl *WebKit::platform@<X0>(uint64_t *__return_ptr a1@<X8>, const WebMouseEvent *this@<X0>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  WebKit::WebKit2PlatformMouseEvent::WebKit2PlatformMouseEvent((WebKit::WebKit2PlatformMouseEvent *)v16, this);
  long long v4 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *((_OWORD *)a1 + 1) = v4;
  long long v5 = v16[3];
  *((_OWORD *)a1 + 2) = v16[2];
  *((_OWORD *)a1 + 3) = v5;
  long long v6 = v16[5];
  *((_OWORD *)a1 + 4) = v16[4];
  *((_OWORD *)a1 + 5) = v6;
  *((_DWORD *)a1 + 24) = v17;
  *((_WORD *)a1 + 60) = v20;
  uint64_t v7 = v19;
  a1[13] = (uint64_t)v18;
  a1[14] = v7;
  uint64_t v8 = v21;
  CFTypeRef v18 = 0;
  uint64_t v21 = 0;
  a1[16] = v8;
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  a1[17] = v9;
  uint64_t v10 = v23;
  uint64_t v23 = 0;
  a1[18] = v10;
  uint64_t v11 = v24;
  uint64_t v24 = 0;
  a1[19] = v11;
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v12);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v13);
  uint64_t result = v18;
  CFTypeRef v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 WebKit::platform@<Q0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WebKit::WebKit2PlatformKeyboardEvent::WebKit2PlatformKeyboardEvent((WebKit::WebKit2PlatformKeyboardEvent *)v11, this);
  long long v4 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v11[2];
  *(_WORD *)(a2 + 48) = v12;
  *(unsigned char *)(a2 + 50) = v13;
  long long v5 = v14;
  long long v14 = 0u;
  *(_OWORD *)(a2 + 56) = v5;
  long long v6 = v15;
  long long v15 = 0u;
  *(_OWORD *)(a2 + 72) = v6;
  *(void *)(a2 + 88) = v16;
  int v7 = v17;
  *(_WORD *)(a2 + 100) = v18;
  *(_DWORD *)(a2 + 96) = v7;
  uint64_t v8 = v19;
  uint64_t v16 = 0;
  uint64_t v19 = 0;
  *(void *)(a2 + 104) = v8;
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v11, v9);
  return result;
}

WTF *WebKit::platform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v11[7] = *MEMORY[0x1E4F143B8];
  WebKit::WebKit2PlatformTouchEvent::WebKit2PlatformTouchEvent((uint64_t)v7, a1);
  WebCore::PlatformTouchEvent::PlatformTouchEvent(a2, (uint64_t)v7);
  WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v3);
  WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
  __n128 result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

uint64_t WebKit::modifiersForNavigationAction(unsigned char *a1)
{
  if (!a1[445] || !a1[440]) {
    return 0;
  }
  unsigned int v2 = a1[441] != 0;
  if (a1[442]) {
    v2 |= 2u;
  }
  if (a1[443]) {
    v2 |= 4u;
  }
  if (a1[444]) {
    return v2 | 8;
  }
  else {
    return v2;
  }
}

BOOL WebKit::WebFoundTextRange::operator==(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = (v2 & v3) == -1;
  if (v2 != -1 && v3 != -1)
  {
    if (*a1 == *a2 && (v2 == v3 ? (BOOL v6 = a1[1] == a2[1]) : (BOOL v6 = 0), v6)) {
      return a1[3] == a2[3];
    }
    else {
      return 0;
    }
  }
  return v4;
}

void WebKit::WebGeolocationPosition::~WebGeolocationPosition(WebKit::WebGeolocationPosition *this)
{
}

WebKit::WebHitTestResultData *WebKit::WebHitTestResultData::WebHitTestResultData(WebKit::WebHitTestResultData *this, WebKit::WebHitTestResultData **a2, const WTF::String *a3)
{
  WebCore::HitTestResult::absoluteImageURL((uint64_t *)v36, (WebCore::HitTestResult *)a2);
  int v7 = v36[0];
  if (v36[0])
  {
    int v8 = *(_DWORD *)v36[0];
    *(_DWORD *)v36[0] += 2;
    *(void *)this = v7;
    v36[0] = 0;
    if (v8) {
      *(_DWORD *)int v7 = v8;
    }
    else {
      WTF::StringImpl::destroy(v7, v6);
    }
  }
  else
  {
    *(void *)this = 0;
  }
  WebCore::HitTestResult::absolutePDFURL((uint64_t *)v36, (WebCore::HitTestResult *)a2);
  uint64_t v10 = v36[0];
  if (v36[0])
  {
    int v11 = *(_DWORD *)v36[0];
    *(_DWORD *)v36[0] += 2;
    *((void *)this + 1) = v10;
    v36[0] = 0;
    if (v11) {
      *(_DWORD *)uint64_t v10 = v11;
    }
    else {
      WTF::StringImpl::destroy(v10, v9);
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
  WebCore::HitTestResult::absoluteLinkURL((uint64_t *)v36, (WebCore::HitTestResult *)a2);
  char v13 = v36[0];
  if (v36[0])
  {
    int v14 = *(_DWORD *)v36[0];
    *(_DWORD *)v36[0] += 2;
    *((void *)this + 2) = v13;
    v36[0] = 0;
    if (v14) {
      *(_DWORD *)char v13 = v14;
    }
    else {
      WTF::StringImpl::destroy(v13, v12);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  WebCore::HitTestResult::absoluteMediaURL((uint64_t *)v36, (WebCore::HitTestResult *)a2);
  uint64_t v16 = v36[0];
  if (v36[0])
  {
    int v17 = *(_DWORD *)v36[0];
    *(_DWORD *)v36[0] += 2;
    *((void *)this + 3) = v16;
    v36[0] = 0;
    if (v17) {
      *(_DWORD *)uint64_t v16 = v17;
    }
    else {
      WTF::StringImpl::destroy(v16, v15);
    }
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  WebCore::HitTestResult::textContent((WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::titleDisplayString((WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::linkSuggestedFilename((WebCore::HitTestResult *)a2);
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = WebCore::HitTestResult::isContentEditable((WebCore::HitTestResult *)a2);
  *(void *)((char *)this + 68) = WebKit::WebHitTestResultData::elementBoundingBoxInWindowCoordinates(a2[10], v18);
  *(void *)((char *)this + 76) = v19;
  *((unsigned char *)this + 84) = 0;
  *((unsigned char *)this + 85) = WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)a2);
  uint64_t v20 = a2[9];
  if (v20) {
    LODWORD(v20) = (*((unsigned __int16 *)v20 + 16) >> 1) & 1;
  }
  *((unsigned char *)this + 86) = (_BYTE)v20;
  *((unsigned char *)this + 87) = WebCore::HitTestResult::isOverTextInsideFormControlElement((WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 88) = WebCore::HitTestResult::isDownloadableMedia((WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 89) = WebCore::HitTestResult::mediaIsInFullscreen((WebCore::HitTestResult *)a2);
  *((_WORD *)this + 45) = 0;
  WebKit::WebHitTestResultData::frameInfoDataFromHitTestResult((WebKit::WebHitTestResultData *)((char *)this + 96), (const WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 400) = 0;
  *((unsigned char *)this + 424) = 0;
  *((void *)this + 54) = 0;
  uint64_t v21 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v21 += 2;
  }
  *((void *)this + 55) = v21;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 60) = 0;
  *((unsigned char *)this + 488) = WebCore::HitTestResult::hasLocalDataForLinkURL((WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 489) = WebCore::HitTestResult::hasEntireImage((WebCore::HitTestResult *)a2);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((void *)this + 70) = 0;
  *((_DWORD *)this + 142) = 1065353216;
  *((_WORD *)this + 305) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((unsigned char *)this + 608) = 0;
  WebCore::AttributedString::AttributedString((WebKit::WebHitTestResultData *)((char *)this + 616));
  *((void *)this + 82) = 0;
  uint64_t v22 = a2[14];
  if (v22)
  {
    if (*((unsigned char *)v22 + 72)) {
      char v23 = 1;
    }
    else {
      char v23 = 2;
    }
    *((unsigned char *)this + 84) = v23;
  }
  if (WebCore::HitTestResult::hasMediaElement((WebCore::HitTestResult *)a2))
  {
    if (WebCore::HitTestResult::mediaIsVideo((WebCore::HitTestResult *)a2)) {
      char v24 = 2;
    }
    else {
      char v24 = 1;
    }
  }
  else
  {
    char v24 = 0;
  }
  *((unsigned char *)this + 91) = v24;
  WebKit::linkLocalDataMIMETypeFromHitTestResult((WebKit *)v36, (const WebCore::HitTestResult *)a2);
  uint64_t v26 = v36[0];
  v36[0] = 0;
  uint64_t v27 = (WTF::StringImpl *)*((void *)this + 60);
  *((void *)this + 60) = v26;
  if (v27)
  {
    int v28 = *(_DWORD *)v27 - 2;
    if (*(_DWORD *)v27 != 2) {
      goto LABEL_35;
    }
    WTF::StringImpl::destroy(v27, v25);
    uint64_t v27 = v36[0];
    v36[0] = 0;
    if (!v27) {
      goto LABEL_36;
    }
    int v28 = *(_DWORD *)v27 - 2;
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v29);
    }
    else {
LABEL_35:
    }
      *(_DWORD *)uint64_t v27 = v28;
  }
LABEL_36:
  WebKit::imageSuggestedFilenameFromHitTestResult((WebKit *)v36, (const WebCore::HitTestResult *)a2);
  unsigned int v31 = v36[0];
  v36[0] = 0;
  __int16 v32 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = v31;
  if (v32)
  {
    int v33 = *(_DWORD *)v32 - 2;
    if (*(_DWORD *)v32 != 2)
    {
LABEL_40:
      *(_DWORD *)__int16 v32 = v33;
      return this;
    }
    WTF::StringImpl::destroy(v32, v30);
    __int16 v32 = v36[0];
    v36[0] = 0;
    if (v32)
    {
      int v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v34);
        return this;
      }
      goto LABEL_40;
    }
  }
  return this;
}

uint64_t WebKit::WebHitTestResultData::elementBoundingBoxInWindowCoordinates(WebKit::WebHitTestResultData *this, const WebCore::HitTestResult *a2)
{
  if (!this) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v3 + 2;
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 6) + 8) + 544);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    uint64_t v11 = 0;
    if (v3) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  BOOL v6 = (unsigned int *)(v5 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  int v7 = *(WebCore::ScrollView **)(v5 + 288);
  if (v7)
  {
    int v8 = *((_DWORD *)v7 + 2);
    *((_DWORD *)v7 + 2) = v8 + 1;
    int v9 = (WebCore::RenderObject *)(*((void *)this + 9) & 0xFFFFFFFFFFFFLL);
    if (v9)
    {
      v13[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v9, 1, 0);
      v13[1] = v10;
      uint64_t v11 = WebCore::ScrollView::contentsToWindow(v7, (const WebCore::IntRect *)v13);
      int v8 = *((_DWORD *)v7 + 2) - 1;
      if (*((_DWORD *)v7 + 2) != 1)
      {
LABEL_7:
        *((_DWORD *)v7 + 2) = v8;
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v8) {
        goto LABEL_7;
      }
    }
    (*(void (**)(WebCore::ScrollView *))(*(void *)v7 + 8))(v7);
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_10:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  int v3 = *((_DWORD *)this + 7) - 2;
  if (*((_DWORD *)this + 7) != 2)
  {
LABEL_11:
    *((_DWORD *)this + 7) = v3;
    return v11;
  }
LABEL_14:
  if ((*((_WORD *)this + 17) & 0x400) == 0) {
    WebCore::Node::removedLastRef(this);
  }
  return v11;
}

void WebKit::WebHitTestResultData::frameInfoDataFromHitTestResult(WebKit::WebHitTestResultData *this, const WebCore::HitTestResult *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  WebKit::webFrameFromHitTestResult((WebKit *)&v7, a2);
  int v3 = v7;
  if (v7)
  {
    WebKit::WebFrame::info(v7, (uint64_t)v9);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>((uint64_t)this, (uint64_t)v9);
    uint64_t v5 = v14;
    int v14 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    if (v13 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9D15E0[v13])(&v8, &v12);
    }
    int v13 = -1;
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v10);
    CFRelease(*((CFTypeRef *)v3 + 1));
  }
  else
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 296) = 0;
  }
}

void WebKit::linkLocalDataMIMETypeFromHitTestResult(WebKit *this, const WebCore::HitTestResult *a2)
{
  if ((WebCore::HitTestResult::hasLocalDataForLinkURL(a2) & 1) != 0
    && (WebKit::webFrameFromHitTestResult((WebKit *)&v9, a2), (uint64_t v4 = v9) != 0))
  {
    WebCore::HitTestResult::absoluteLinkURL((uint64_t *)v8, a2);
    WebKit::WebFrame::mimeTypeForResourceWithURL((unsigned int *)v4, (const WTF::URL *)v8, this);
    CFTypeRef v6 = v8[0];
    v8[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    int v7 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v7 += 2;
    }
    *(void *)this = v7;
  }
}

void WebKit::imageSuggestedFilenameFromHitTestResult(WebKit *this, const WebCore::HitTestResult *a2)
{
  if ((WebCore::HitTestResult::hasEntireImage(a2) & 1) != 0
    && (WebKit::webFrameFromHitTestResult((WebKit *)&v9, a2), (uint64_t v4 = v9) != 0))
  {
    WebCore::HitTestResult::absoluteImageURL((uint64_t *)v8, a2);
    WebKit::WebFrame::suggestedFilenameForResourceWithURL((unsigned int *)v4, (const WTF::URL *)v8, this);
    CFTypeRef v6 = v8[0];
    v8[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    int v7 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v7 += 2;
    }
    *(void *)this = v7;
  }
}

WebKit::WebHitTestResultData *WebKit::WebHitTestResultData::WebHitTestResultData(WebKit::WebHitTestResultData *this, WebKit::WebHitTestResultData **a2, int a3)
{
  WebCore::HitTestResult::absoluteImageURL((uint64_t *)&v66, (WebCore::HitTestResult *)a2);
  int v7 = v66;
  if (v66)
  {
    int v8 = *(_DWORD *)v66;
    *(_DWORD *)v66 += 2;
    *(void *)this = v7;
    unsigned int v66 = 0;
    if (v8) {
      *(_DWORD *)int v7 = v8;
    }
    else {
      WTF::StringImpl::destroy(v7, v6);
    }
  }
  else
  {
    *(void *)this = 0;
  }
  WebCore::HitTestResult::absolutePDFURL((uint64_t *)&v66, (WebCore::HitTestResult *)a2);
  uint64_t v10 = v66;
  if (v66)
  {
    int v11 = *(_DWORD *)v66;
    *(_DWORD *)v66 += 2;
    *((void *)this + 1) = v10;
    unsigned int v66 = 0;
    if (v11) {
      *(_DWORD *)uint64_t v10 = v11;
    }
    else {
      WTF::StringImpl::destroy(v10, v9);
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
  WebCore::HitTestResult::absoluteLinkURL((uint64_t *)&v66, (WebCore::HitTestResult *)a2);
  int v13 = v66;
  if (v66)
  {
    int v14 = *(_DWORD *)v66;
    *(_DWORD *)v66 += 2;
    *((void *)this + 2) = v13;
    unsigned int v66 = 0;
    if (v14) {
      *(_DWORD *)int v13 = v14;
    }
    else {
      WTF::StringImpl::destroy(v13, v12);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  WebCore::HitTestResult::absoluteMediaURL((uint64_t *)&v66, (WebCore::HitTestResult *)a2);
  uint64_t v16 = v66;
  if (v66)
  {
    int v17 = *(_DWORD *)v66;
    *(_DWORD *)v66 += 2;
    *((void *)this + 3) = v16;
    unsigned int v66 = 0;
    if (v17) {
      *(_DWORD *)uint64_t v16 = v17;
    }
    else {
      WTF::StringImpl::destroy(v16, v15);
    }
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  WebCore::HitTestResult::textContent((uint64_t *)this + 4, (WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::titleDisplayString((uint64_t *)this + 5, (WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::linkSuggestedFilename((uint64_t *)this + 6, (WebCore::HitTestResult *)a2);
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = WebCore::HitTestResult::isContentEditable((WebCore::HitTestResult *)a2);
  *(void *)((char *)this + 68) = WebKit::WebHitTestResultData::elementBoundingBoxInWindowCoordinates(a2[10], v18);
  *(void *)((char *)this + 76) = v19;
  *((unsigned char *)this + 84) = 0;
  *((unsigned char *)this + 85) = WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)a2);
  uint64_t v20 = a2[9];
  if (v20) {
    LODWORD(v20) = (*((unsigned __int16 *)v20 + 16) >> 1) & 1;
  }
  *((unsigned char *)this + 86) = (_BYTE)v20;
  *((unsigned char *)this + 87) = WebCore::HitTestResult::isOverTextInsideFormControlElement((WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 88) = WebCore::HitTestResult::isDownloadableMedia((WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 89) = WebCore::HitTestResult::mediaIsInFullscreen((WebCore::HitTestResult *)a2);
  *((_WORD *)this + 45) = 0;
  WebKit::WebHitTestResultData::frameInfoDataFromHitTestResult((WebKit::WebHitTestResultData *)((char *)this + 96), (const WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 400) = 0;
  *((unsigned char *)this + 424) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 60) = 0;
  *((unsigned char *)this + 488) = WebCore::HitTestResult::hasLocalDataForLinkURL((WebCore::HitTestResult *)a2);
  *((unsigned char *)this + 489) = WebCore::HitTestResult::hasEntireImage((WebCore::HitTestResult *)a2);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((void *)this + 70) = 0;
  *((_DWORD *)this + 142) = 1065353216;
  *((_WORD *)this + 305) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((unsigned char *)this + 608) = 0;
  WebCore::AttributedString::AttributedString((WebKit::WebHitTestResultData *)((char *)this + 616));
  *((void *)this + 82) = 0;
  uint64_t v21 = a2[14];
  if (v21)
  {
    if (*((unsigned char *)v21 + 72)) {
      char v22 = 1;
    }
    else {
      char v22 = 2;
    }
    *((unsigned char *)this + 84) = v22;
  }
  if (WebCore::HitTestResult::hasMediaElement((WebCore::HitTestResult *)a2))
  {
    if (WebCore::HitTestResult::mediaIsVideo((WebCore::HitTestResult *)a2)) {
      char v23 = 2;
    }
    else {
      char v23 = 1;
    }
  }
  else
  {
    char v23 = 0;
  }
  *((unsigned char *)this + 91) = v23;
  WebKit::linkLocalDataMIMETypeFromHitTestResult((WebKit *)&v66, (const WebCore::HitTestResult *)a2);
  uint64_t v25 = v66;
  unsigned int v66 = 0;
  uint64_t v26 = (WTF::StringImpl *)*((void *)this + 60);
  *((void *)this + 60) = v25;
  if (v26)
  {
    int v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2) {
      goto LABEL_33;
    }
    WTF::StringImpl::destroy(v26, v24);
    uint64_t v26 = v66;
    unsigned int v66 = 0;
    if (!v26) {
      goto LABEL_34;
    }
    int v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v28);
    }
    else {
LABEL_33:
    }
      *(_DWORD *)uint64_t v26 = v27;
  }
LABEL_34:
  WebKit::imageSuggestedFilenameFromHitTestResult((WebKit *)&v66, (const WebCore::HitTestResult *)a2);
  __int16 v30 = v66;
  unsigned int v66 = 0;
  unsigned int v31 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = v30;
  if (!v31) {
    goto LABEL_39;
  }
  int v32 = *(_DWORD *)v31 - 2;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::destroy(v31, v29);
    unsigned int v31 = v66;
    unsigned int v66 = 0;
    if (!v31) {
      goto LABEL_39;
    }
    int v32 = *(_DWORD *)v31 - 2;
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy(v31, v33);
      if (!a3) {
        return this;
      }
      goto LABEL_40;
    }
  }
  *(_DWORD *)unsigned int v31 = v32;
LABEL_39:
  if (!a3) {
    return this;
  }
LABEL_40:
  uint64_t v34 = WebCore::HitTestResult::image((WebCore::HitTestResult *)a2);
  if (v34)
  {
    __int16 v35 = *(atomic_uint **)(v34 + 24);
    if (v35)
    {
      atomic_fetch_add(v35, 1u);
      WebCore::SharedMemory::copyBuffer();
      uint64_t v37 = v66;
      unsigned int v66 = 0;
      char v38 = (unsigned int *)*((void *)this + 57);
      *((void *)this + 57) = v37;
      if (v38)
      {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v38);
        long long v39 = (unsigned int *)v66;
        unsigned int v66 = 0;
        if (v39) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v39);
        }
      }
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v35, v36);
    }
  }
  int v40 = a2[10];
  if (v40)
  {
    *((_DWORD *)v40 + 7) += 2;
    uint64_t v41 = *((void *)v40 + 9) & 0xFFFFFFFFFFFFLL;
    if (!v41
      || (((*(unsigned char *)((*((void *)v40 + 9) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(unsigned char *)((*((void *)v40 + 9) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) != 1)
    {
LABEL_87:
      if (*((_DWORD *)v40 + 7) == 2)
      {
        if ((*((_WORD *)v40 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v40);
        }
      }
      else
      {
        *((_DWORD *)v40 + 7) -= 2;
      }
      return this;
    }
    LOBYTE(v66) = 0;
    char v67 = 0;
    __int16 v68 = 1;
    WebKit::createShareableBitmap(v41, (uint64_t)&v66, &v65);
    uint64_t v43 = v65;
    uint64_t v65 = 0;
    uint64_t v44 = *((void *)this + 58);
    *((void *)this + 58) = v43;
    if (v44)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v44, v42);
      uint64_t v46 = v65;
      uint64_t v65 = 0;
      if (v46) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v46, v45);
      }
    }
    uint64_t v47 = (WebCore::CachedImage *)WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v41 + 224) + 24));
    if (v47)
    {
      int v49 = (WebCore::Image *)WebCore::CachedImage::image(v47);
      if (v49)
      {
        WebCore::Image::mimeType((uint64_t *)&v66, v49);
        unsigned int v50 = v66;
        unsigned int v66 = 0;
        uint64_t v51 = (WTF::StringImpl *)*((void *)this + 59);
        *((void *)this + 59) = v50;
        if (v51)
        {
          int v52 = *(_DWORD *)v51 - 2;
          if (*(_DWORD *)v51 != 2) {
            goto LABEL_58;
          }
          WTF::StringImpl::destroy(v51, v48);
          uint64_t v51 = v66;
          unsigned int v66 = 0;
          if (!v51) {
            goto LABEL_59;
          }
          int v52 = *(_DWORD *)v51 - 2;
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, v48);
          }
          else {
LABEL_58:
          }
            *(_DWORD *)uint64_t v51 = v52;
        }
      }
    }
LABEL_59:
    if ((*((_WORD *)v40 + 16) & 8) == 0)
    {
LABEL_81:
      __int16 v61 = *(_DWORD **)(v41 + 216);
      if (v61) {
        *v61 += 2;
      }
LABEL_83:
      __int16 v63 = (WTF::StringImpl *)*((void *)this + 56);
      *((void *)this + 56) = v61;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2) {
          WTF::StringImpl::destroy(v63, v48);
        }
        else {
          *(_DWORD *)v63 -= 2;
        }
      }
      goto LABEL_87;
    }
    int v53 = *((_DWORD *)v40 + 7);
    *((_DWORD *)v40 + 7) = v53 + 2;
    uint64_t v54 = *((void *)v40 + 14);
    if (v54)
    {
      unsigned int v55 = *(_DWORD *)(v54 + 4);
      if (v55)
      {
        uint64_t v56 = *(void *)(v54 + 40);
        LODWORD(v57) = *(_DWORD *)(v54 + 52);
        if (v57)
        {
LABEL_63:
          uint64_t v58 = *MEMORY[0x1E4FB6B20];
          uint64_t v57 = v57;
          __int16 v59 = (_DWORD **)(v56 + 8);
          while (1)
          {
            uint64_t v60 = (uint64_t)*(v59 - 1);
            if (v60 == v58
              || *(void *)(v60 + 24) == *(void *)(v58 + 24) && *(void *)(v60 + 32) == *(void *)(v58 + 32))
            {
              break;
            }
            v59 += 2;
            if (!--v57)
            {
              __int16 v59 = (_DWORD **)MEMORY[0x1E4F30968];
              break;
            }
          }
LABEL_74:
          __int16 v61 = *v59;
          if (*v59 && v61[1])
          {
            int v62 = 0;
            *v61 += 2;
          }
          else
          {
            int v62 = 1;
          }
          if (v53)
          {
            *((_DWORD *)v40 + 7) = v53;
          }
          else if ((*((_WORD *)v40 + 17) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v40);
          }
          if (!v62) {
            goto LABEL_83;
          }
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v56 = v54 + 32;
        LODWORD(v57) = v55 >> 5;
        if (v57) {
          goto LABEL_63;
        }
      }
    }
    __int16 v59 = (_DWORD **)MEMORY[0x1E4F30968];
    goto LABEL_74;
  }
  return this;
}

uint64_t WebKit::WebHitTestResultData::WebHitTestResultData(uint64_t a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, _DWORD **a7, _DWORD **a8, _DWORD **a9, char a10, _OWORD *a11, char *a12, char a13, char a14, char a15, char a16, char a17, char a18, char *a19, uint64_t a20,_OWORD *a21,_DWORD **a22,_DWORD **a23,_DWORD **a24,uint64_t a25,atomic_uint **a26,_DWORD **a27,_DWORD **a28,char a29,char a30,uint64_t a31,_DWORD **a32)
{
  int v33 = *a2;
  if (*a2) {
    *v33 += 2;
  }
  *(void *)a1 = v33;
  uint64_t v34 = *a3;
  if (*a3) {
    *v34 += 2;
  }
  *(void *)(a1 + 8) = v34;
  __int16 v35 = *a4;
  if (*a4) {
    *v35 += 2;
  }
  *(void *)(a1 + 16) = v35;
  char v36 = *a5;
  if (*a5) {
    *v36 += 2;
  }
  *(void *)(a1 + 24) = v36;
  uint64_t v37 = *a6;
  if (*a6) {
    *v37 += 2;
  }
  *(void *)(a1 + 32) = v37;
  char v38 = *a7;
  if (*a7) {
    *v38 += 2;
  }
  *(void *)(a1 + 40) = v38;
  long long v39 = *a8;
  if (*a8) {
    *v39 += 2;
  }
  *(void *)(a1 + 48) = v39;
  int v40 = *a9;
  if (*a9) {
    *v40 += 2;
  }
  *(void *)(a1 + 56) = v40;
  *(unsigned char *)(a1 + 64) = a10;
  *(_OWORD *)(a1 + 68) = *a11;
  char v41 = *a12;
  char v42 = *a19;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 84) = v41;
  *(unsigned char *)(a1 + 85) = a13;
  *(unsigned char *)(a1 + 86) = a14;
  *(unsigned char *)(a1 + 87) = a15;
  *(unsigned char *)(a1 + 88) = a16;
  *(unsigned char *)(a1 + 89) = a17;
  *(unsigned char *)(a1 + 90) = a18;
  *(unsigned char *)(a1 + 91) = v42;
  *(unsigned char *)(a1 + 392) = 0;
  if (*(unsigned char *)(a20 + 296))
  {
    std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData const&,WebKit::FrameInfoData*>(a1 + 96, a20);
    *(unsigned char *)(a1 + 392) = 1;
  }
  long long v43 = a21[1];
  *(_OWORD *)(a1 + 400) = *a21;
  *(_OWORD *)(a1 + 416) = v43;
  uint64_t v44 = *a22;
  if (*a22) {
    *v44 += 2;
  }
  *(void *)(a1 + 432) = v44;
  int v45 = *a23;
  if (*a23) {
    *v45 += 2;
  }
  *(void *)(a1 + 440) = v45;
  uint64_t v46 = *a24;
  if (*a24) {
    *v46 += 2;
  }
  *(void *)(a1 + 448) = v46;
  *(void *)(a1 + 456) = 0;
  uint64_t v47 = *a26;
  if (*a26) {
    atomic_fetch_add(v47, 1u);
  }
  *(void *)(a1 + 464) = v47;
  __int16 v48 = *a27;
  if (*a27) {
    *v48 += 2;
  }
  *(void *)(a1 + 472) = v48;
  int v49 = *a28;
  if (*a28) {
    *v49 += 2;
  }
  *(void *)(a1 + 480) = v49;
  *(unsigned char *)(a1 + 488) = a29;
  *(unsigned char *)(a1 + 489) = a30;
  *(void *)(a1 + 496) = *(void *)a31;
  long long v50 = *(_OWORD *)(a31 + 8);
  long long v51 = *(_OWORD *)(a31 + 24);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a31 + 40);
  *(_OWORD *)(a1 + 520) = v51;
  *(_OWORD *)(a1 + 504) = v50;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 552, a31 + 56);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a31 + 72);
  uint64_t v52 = *(void *)(a31 + 80);
  if (v52) {
    ++*(_DWORD *)(v52 + 8);
  }
  *(void *)(a1 + 576) = v52;
  uint64_t v53 = *(void *)(a31 + 88);
  if (v53) {
    ++*(_DWORD *)(v53 + 8);
  }
  *(void *)(a1 + 584) = v53;
  uint64_t v54 = *(void *)(a31 + 96);
  if (v54) {
    ++*(_DWORD *)(v54 + 8);
  }
  *(void *)(a1 + 592) = v54;
  WebCore::Color::Color((WebCore::Color *)(a1 + 600), (const Color *)(a31 + 104));
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a31 + 112);
  MEMORY[0x199732DC0](a1 + 616, a31 + 120);
  unsigned int v55 = *a32;
  if (*a32) {
    ++*v55;
  }
  *(void *)(a1 + 656) = v55;
  if (*(unsigned char *)(a25 + 16))
  {
    WebCore::SharedMemory::map();
    uint64_t v56 = *(unsigned int **)(a1 + 456);
    *(void *)(a1 + 456) = v58;
    if (v56) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v56);
    }
  }
  return a1;
}

void WebKit::WebHitTestResultData::~WebHitTestResultData(WebKit::WebHitTestResultData *this)
{
  uint64_t v2 = (WebCore::TextIndicator *)*((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v2) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v2);
  }
  MEMORY[0x199732DE0]((char *)this + 616);
  WebCore::TextIndicatorData::~TextIndicatorData((WebKit::WebHitTestResultData *)((char *)this + 504), v3);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  CFTypeRef v6 = (WTF::StringImpl *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v7, v4);
  }
  int v8 = (unsigned int *)*((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v4);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v4);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = (WTF::StringImpl *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v4);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, v4);
  int v13 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  int v14 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v12);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  int v17 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  __int16 v18 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v12);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v12);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v12);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
}

void WebKit::WebHitTestResultData::getImageSharedMemoryHandle(WebKit::WebHitTestResultData *this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[16] = 0;
  uint64_t v2 = *((void *)this + 57);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      WebCore::SharedMemory::createHandle();
      if (v5)
      {
        std::optional<WebCore::SharedMemoryHandle>::operator=[abi:sn180100]<WebCore::SharedMemoryHandle,void>((uint64_t)a2, (uint64_t)v4);
        if (v5) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
        }
      }
    }
  }
}

uint64_t std::optional<WebCore::SharedMemoryHandle>::operator=[abi:sn180100]<WebCore::SharedMemoryHandle,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::MachSendRight::operator=();
    uint64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    uint64_t v4 = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = 1;
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

unsigned int *WebKit::webFrameFromHitTestResult(WebKit *this, const WebCore::HitTestResult *a2)
{
  __n128 result = (unsigned int *)WebCore::HitTestResult::frame(a2);
  if (result)
  {
    uint64_t v4 = result + 2;
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, this);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  }
  else
  {
    *(void *)this = 0;
  }
  return result;
}

void WebKit::WebImage::createEmpty(WebKit::WebImage *this)
{
  uint64_t v2 = (WebKit *)API::Object::newObject(0x18uLL, 12);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9D15A0;
  *((void *)v2 + 2) = 0;
  *(void *)this = v2;
}

void WebKit::WebImage::create(int32x2_t *a1@<X0>, char a2@<W1>, CFTypeRef *a3@<X2>, uint64_t a4@<X3>, WebKit::WebImage *a5@<X8>)
{
  if (a4)
  {
    unsigned int v9 = (a2 & 1) != 0 ? 6 : 5;
    uint64_t v10 = (a2 & 2) != 0 ? 7 : v9;
    float32x2_t v19 = vcvt_f32_s32(*a1);
    (*(void (**)(float32x2_t *__return_ptr, uint64_t, float32x2_t *, uint64_t, CFTypeRef *, uint64_t, void, float))(*(void *)a4 + 912))(&v16, a4, &v19, v10, a3, 1, 0, 1.0);
    float32x2_t v11 = v16;
    if (v16) {
      goto LABEL_9;
    }
  }
  if ((a2 & 1) == 0)
  {
    float32x2_t v19 = vcvt_f32_s32(*a1);
    WebCore::ImageBuffer::create();
    float32x2_t v11 = v16;
    if (!*(void *)&v16)
    {
      WebKit::WebImage::createEmpty(a5);
LABEL_10:
      uint64_t v14 = (uint64_t)v16;
      float32x2_t v16 = 0;
      if (!v14) {
        return;
      }
      goto LABEL_11;
    }
LABEL_9:
    float32x2_t v19 = v11;
    float32x2_t v16 = 0;
    WebKit::WebImage::create((uint64_t *)&v19, (WebKit **)a5);
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)&v19, v12);
    goto LABEL_10;
  }
  float32x2_t v18 = vcvt_f32_s32(*a1);
  float32x2_t v16 = 0;
  uint64_t v17 = 0;
  WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>((uint64_t *)&v18, a3, 1, 6, (uint64_t)&v16, (uint64_t *)&v19, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v17 + 4));
  if (v19)
  {
    float32x2_t v16 = v19;
    float32x2_t v19 = 0;
    WebKit::WebImage::create((uint64_t *)&v16, (WebKit **)a5);
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)&v16, v15);
  }
  else
  {
    WebKit::WebImage::createEmpty(a5);
  }
  uint64_t v14 = (uint64_t)v19;
  float32x2_t v19 = 0;
  if (v14) {
LABEL_11:
  }
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v14 + 8), v13);
}

void WebKit::WebImage::create(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4 = (WebKit *)API::Object::newObject(0x18uLL, 12);
  uint64_t v5 = *a1;
  *a1 = 0;
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)uint64_t v4 = &unk_1EE9D15A0;
  *((void *)v4 + 2) = v5;
  *a2 = v4;
}

{
  const void *v3;
  CFTypeRef v4;
  WebKit::ImageBufferShareableBitmapBackend *v5;
  uint64_t v6;
  const WebCore::DestinationColorSpace *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  void *v11;
  WebKit *v12;
  WebKit *v13;
  WebKit *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  const void *v23;
  const void *v24;
  const void *v25;
  bmalloc::api *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  CFTypeRef v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  unsigned char v38[24];
  CFTypeRef cf;
  char v40;
  WebKit::ImageBufferShareableBitmapBackend *v41;
  IntSize v42[2];
  const void *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  __int16 v47;
  unsigned char v48[24];
  const void *v49;
  char v50;

  if (!*((unsigned char *)a1 + 96))
  {
    uint64_t v12 = (WebKit *)API::Object::newObject(0x18uLL, 12);
    *(void *)uint64_t v12 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v12);
    *(void *)uint64_t v12 = &unk_1EE9D15A0;
    *((void *)v12 + 2) = 0;
    *a2 = v12;
    return;
  }
  uint64_t v44 = *a1;
  int v45 = *((_DWORD *)a1 + 2);
  int v3 = (const void *)a1[2];
  a1[2] = 0;
  uint64_t v46 = v3;
  uint64_t v47 = *((_WORD *)a1 + 12);
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v48, (uint64_t)(a1 + 4));
  WebCore::ImageBuffer::backendParameters();
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v38, (uint64_t)v48);
  WebKit::ImageBufferShareableBitmapBackend::create((uint64_t)v42, (uint64_t *)&v41);
  if (v40)
  {
    uint64_t v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v38);
  uint64_t v5 = v41;
  if (v41)
  {
    char v36 = 0;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    uint64_t v37 = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(v42, v6, v7);
    __int16 v30 = 0;
    unsigned int v31 = v44;
    int v32 = v45;
    int v8 = v46;
    uint64_t v46 = 0;
    int v33 = v8;
    uint64_t v34 = v47;
    uint64_t v29 = 0;
    char v41 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t)&v31, &v35);
    (*(void (**)(WebKit::ImageBufferShareableBitmapBackend *))(*(void *)v5 + 8))(v5);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v30 + 4));
    unsigned int v9 = v33;
    int v33 = 0;
    if (v9) {
      CFRelease(v9);
    }
    if (v35)
    {
      uint64_t v29 = v35;
      __int16 v35 = 0;
      WebKit::WebImage::create(&v29, a2);
      WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v29, v10);
    }
    else
    {
      uint64_t v14 = (WebKit *)API::Object::newObject(0x18uLL, 12);
      *(void *)uint64_t v14 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v14);
      *(void *)uint64_t v14 = &unk_1EE9D15A0;
      *((void *)v14 + 2) = 0;
      *a2 = v14;
    }
    uint64_t v15 = v35;
    __int16 v35 = 0;
    if (!v15) {
      goto LABEL_24;
    }
    float32x2_t v16 = 0;
    uint64_t v17 = *(void *)(v15 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16) {
      MEMORY[0x19972E8D0](v17);
    }
    float32x2_t v18 = *(void *)(v17 + 8);
    float32x2_t v19 = 1;
    uint64_t v20 = v18 - 1;
    *(void *)(v17 + 8) = v18 - 1;
    if (v18 == 1)
    {
      int v28 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      *(void *)(v17 + 24) = 0;
      char v22 = v28 != 0;
    }
    else
    {
      uint64_t v21 = 0;
      char v22 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
    if (v19 == 1)
    {
      if (!v20)
      {
LABEL_20:
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
        if (!v22) {
          WTF::fastFree((WTF *)v17, v11);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      if (!v20) {
        goto LABEL_20;
      }
    }
LABEL_24:
    if (v41)
    {
      WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(v41, v11);
      bmalloc::api::isoDeallocate(v26, v27);
    }
    goto LABEL_26;
  }
  int v13 = (WebKit *)API::Object::newObject(0x18uLL, 12);
  *(void *)int v13 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v13);
  *(void *)int v13 = &unk_1EE9D15A0;
  *((void *)v13 + 2) = 0;
  *a2 = v13;
LABEL_26:
  char v23 = v43;
  long long v43 = 0;
  if (v23) {
    CFRelease(v23);
  }
  if (v50)
  {
    char v24 = v49;
    int v49 = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v48);
  uint64_t v25 = v46;
  uint64_t v46 = 0;
  if (v25) {
    CFRelease(v25);
  }
}

void WebKit::WebImage::~WebImage(WebKit::WebImage *this, void *a2)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    char v3 = 0;
    uint64_t v4 = *(void *)(v2 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = 1;
    uint64_t v7 = v5 - 1;
    *(void *)(v4 + 8) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v10 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v4 + 24);
      *(void *)(v4 + 24) = 0;
      BOOL v9 = v10 != 0;
    }
    else
    {
      uint64_t v8 = 0;
      BOOL v9 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 == 1)
    {
      if (v7) {
        return;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v7) {
        return;
      }
    }
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (!v9) {
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebImage::~WebImage(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebImage::parametersAndHandle@<X0>(WebKit::WebImage *this@<X0>, uint64_t a2@<X8>)
{
  WebKit::WebImage::createHandle((uint64_t)this, 1, v16);
  if (!v16[64])
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 96) = 0;
    return (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>::pair[abi:sn180100]<WebCore::ImageBufferParameters const&,WebCore::ShareableBitmapHandle,0>((uint64_t)&v9, (uint64_t *)(v4 + 16), (uint64_t)v16);
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v10;
    CFTypeRef v5 = v11;
    CFTypeRef v11 = 0;
    *(void *)(a2 + 16) = v5;
    *(_WORD *)(a2 + 24) = v12;
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 32, (uint64_t)v13);
    *(unsigned char *)(a2 + 96) = 1;
    if (v15)
    {
      CFTypeRef v6 = cf;
      CFTypeRef cf = 0;
      if (v6) {
        CFRelease(v6);
      }
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
    CFTypeRef v7 = v11;
    CFTypeRef v11 = 0;
    if (v7) {
      CFRelease(v7);
    }
    return (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
  }
  uint64_t result = 116;
  __break(0xC471u);
  return result;
}

void WebKit::WebImage::createHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5
    && ((*(void (**)(uint64_t))(*(void *)v5 + 24))(v5),
        (uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16))) != 0)
    && (uint64_t v8 = v7, ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7) & 1) != 0)
    && ((*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 24))(v12, v8, a2), v14))
  {
    if (v13)
    {
      int v10 = (WebKit::WebImage *)std::__throw_bad_variant_access[abi:sn180100]();
      WebKit::WebImage::bitmap(v10, v11);
    }
    else
    {
      double v9 = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a3, (uint64_t)v12);
      a3[64] = 1;
      if (v14)
      {
        if (v13 != -1) {
          ((void (*)(char *, void *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v13])(&v15, v12, v9);
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[64] = 0;
  }
}

uint64_t WebKit::WebImage::bitmap@<X0>(WebKit::WebImage *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 2);
  if (result
    && ((*(void (**)(uint64_t))(*(void *)result + 24))(result),
        (uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 128))(*((void *)this + 2))) != 0)
    && (uint64_t v5 = result, result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result), result))
  {
    CFTypeRef v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 40);
    return v6(v5);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)68>::type()
{
  return 68;
}

uint64_t API::ObjectImpl<(API::Object::Type)12>::type()
{
  return 12;
}

WebKit::WebKit2PlatformMouseEvent *WebKit::WebKit2PlatformMouseEvent::WebKit2PlatformMouseEvent(WebKit::WebKit2PlatformMouseEvent *this, const WebMouseEvent *a2)
{
  void v46[3] = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((_WORD *)this + 4) = 5;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_WORD *)this + 24) = 254;
  *((void *)this + 11) = 0;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *((_DWORD *)this + 24) = 1;
  uint64_t v4 = *(_DWORD **)WebCore::mousePointerEventType(this);
  if (v4) {
    *v4 += 2;
  }
  *((void *)this + 13) = v4;
  *((void *)this + 14) = 0;
  *((_WORD *)this + 60) = 0;
  *((_OWORD *)this + 8) = 0u;
  uint64_t v5 = (WTF::StringImpl **)((char *)this + 128);
  *((_OWORD *)this + 9) = 0u;
  switch(*((unsigned char *)a2 + 4))
  {
    case 0:
      *((unsigned char *)this + 8) = 6;
      double v6 = 1.0;
      goto LABEL_12;
    case 1:
      char v8 = 7;
      goto LABEL_11;
    case 2:
      char v7 = 5;
      goto LABEL_8;
    case 3:
      char v7 = 8;
LABEL_8:
      *((unsigned char *)this + 8) = v7;
      double v6 = *((double *)a2 + 10);
      goto LABEL_12;
    case 4:
      *((unsigned char *)this + 8) = 9;
      double v6 = 2.0;
      goto LABEL_12;
    case 5:
      char v8 = 10;
LABEL_11:
      *((unsigned char *)this + 8) = v8;
      double v6 = 0.0;
LABEL_12:
      *((double *)this + 11) = v6;
      break;
    default:
      break;
  }
  *((unsigned char *)this + 9) = *((unsigned char *)a2 + 5) & 0x12 | (8 * (*((unsigned char *)a2 + 5) & 1)) | ((*((unsigned char *)a2 + 5) & 4) != 0) | (*((unsigned char *)a2 + 5) >> 1) & 4;
  *(void *)this = *((void *)a2 + 1);
  uint64_t v9 = *((void *)a2 + 3);
  int v10 = *((unsigned __int8 *)this + 32);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v9;
  if (!v10) {
    *((unsigned char *)this + 32) = 1;
  }
  unsigned int v11 = *((unsigned __int8 *)a2 + 32);
  if (v11 >= 3 && v11 != 254)
  {
    __break(0xC471u);
    JUMPOUT(0x198D5267CLL);
  }
  *((unsigned char *)this + 48) = v11;
  *((_WORD *)this + 60) = *((_WORD *)a2 + 17);
  *(void *)((char *)this + 52) = *(void *)((char *)a2 + 36);
  *(void *)((char *)this + 68) = (int)*((float *)a2 + 13) | ((unint64_t)(int)*((float *)a2 + 14) << 32);
  *(void *)((char *)this + 76) = *((void *)a2 + 8);
  *(void *)((char *)this + 60) = *(void *)((char *)a2 + 44);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 18);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v39, (uint64_t *)a2 + 14);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (v40)
  {
    if (v40 >= 0x199999A)
    {
      __break(0xC471u);
      JUMPOUT(0x198D52684);
    }
    int v13 = 160 * v40;
    uint64_t v14 = WTF::fastMalloc((WTF *)(160 * v40));
    LODWORD(v42) = (v13 & 0xFFFFFFE0) / 0xA0;
    uint64_t v41 = v14;
    if (v40)
    {
      char v15 = v39;
      uint64_t v16 = 144 * v40;
      do
      {
        WebKit::platform((uint64_t *)v43, v15, v12);
        WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v41, v43);
        WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v46, v17);
        WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v18);
        float32x2_t v19 = v44;
        uint64_t v44 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v12);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        char v15 = (WebKit *)((char *)v15 + 144);
        v16 -= 144;
      }
      while (v16);
    }
  }
  unsigned int v20 = *((_DWORD *)this + 35);
  if (v20) {
    WTF::VectorDestructor<true,WebCore::PlatformMouseEvent>::destruct(*v5, (WTF::StringImpl *)((char *)*v5 + 160 * v20));
  }
  uint64_t v21 = *v5;
  if (*v5)
  {
    *((void *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v21, v12);
  }
  *((void *)this + 16) = v41;
  uint64_t v22 = v42;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  *((void *)this + 17) = v22;
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v12);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v23);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v39, (uint64_t *)a2 + 16);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (v40)
  {
    if (v40 >= 0x199999A)
    {
      __break(0xC471u);
      JUMPOUT(0x198D5268CLL);
    }
    int v25 = 160 * v40;
    uint64_t v26 = WTF::fastMalloc((WTF *)(160 * v40));
    LODWORD(v42) = (v25 & 0xFFFFFFE0) / 0xA0;
    uint64_t v41 = v26;
    if (v40)
    {
      int v27 = v39;
      uint64_t v28 = 144 * v40;
      do
      {
        WebKit::platform((uint64_t *)v43, v27, v24);
        WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v41, v43);
        WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v46, v29);
        WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v30);
        unsigned int v31 = v44;
        uint64_t v44 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v24);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        int v27 = (WebKit *)((char *)v27 + 144);
        v28 -= 144;
      }
      while (v28);
    }
  }
  unsigned int v32 = *((_DWORD *)this + 39);
  if (v32) {
    WTF::VectorDestructor<true,WebCore::PlatformMouseEvent>::destruct(*((WTF::StringImpl **)this + 18), (WTF::StringImpl *)(*((void *)this + 18) + 160 * v32));
  }
  int v33 = (WTF *)*((void *)this + 18);
  if (v33)
  {
    *((void *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v33, v24);
  }
  *((void *)this + 18) = v41;
  uint64_t v34 = v42;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  *((void *)this + 19) = v34;
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v24);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v35);
  *((_DWORD *)this + 29) = 0;
  int v36 = *((unsigned char *)a2 + 5) & 1;
  *((_DWORD *)this + 29) = v36;
  char v37 = *((unsigned char *)a2 + 5);
  if ((v37 & 2) == 0)
  {
    if ((*((unsigned char *)a2 + 5) & 4) == 0) {
      goto LABEL_45;
    }
LABEL_49:
    v36 |= 4u;
    *((_DWORD *)this + 29) = v36;
    if ((*((unsigned char *)a2 + 5) & 8) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  v36 |= 2u;
  *((_DWORD *)this + 29) = v36;
  char v37 = *((unsigned char *)a2 + 5);
  if ((v37 & 4) != 0) {
    goto LABEL_49;
  }
LABEL_45:
  if ((v37 & 8) != 0) {
LABEL_46:
  }
    *((_DWORD *)this + 29) = v36 | 8;
LABEL_47:
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 23);
  WTF::String::operator=((uint64_t *)this + 13, (WTF::StringImpl **)a2 + 12);
  return this;
}

__n128 WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)a1 + 160 * *(unsigned int *)(a1 + 12);
  long long v3 = *a2;
  long long v4 = a2[2];
  *(_OWORD *)(v2 + 16) = a2[1];
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)uint64_t v2 = v3;
  __n128 result = (__n128)a2[3];
  long long v6 = a2[4];
  long long v7 = a2[5];
  *(_DWORD *)(v2 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(v2 + 64) = v6;
  *(_OWORD *)(v2 + 80) = v7;
  *(__n128 *)(v2 + 48) = result;
  uint64_t v8 = *((void *)a2 + 13);
  *((void *)a2 + 13) = 0;
  *(void *)(v2 + 104) = v8;
  uint64_t v9 = *((void *)a2 + 14);
  *(_WORD *)(v2 + 120) = *((_WORD *)a2 + 60);
  *(void *)(v2 + 112) = v9;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  uint64_t v10 = *((void *)a2 + 16);
  *((void *)a2 + 16) = 0;
  *(void *)(v2 + 128) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(v2 + 136) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(v2 + 140) = v10;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  uint64_t v11 = *((void *)a2 + 18);
  *((void *)a2 + 18) = 0;
  *(void *)(v2 + 144) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = 0;
  *(_DWORD *)(v2 + 152) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = 0;
  *(_DWORD *)(v2 + 156) = v11;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::PlatformMouseEvent>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    long long v3 = (char *)result + 144;
    do
    {
      WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3);
      WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 16);
      __n128 result = (WTF::StringImpl *)*((void *)v3 - 5);
      *((void *)v3 - 5) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)(v3 + 16);
      v3 += 160;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::PlatformMouseEvent>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 160 * v3));
  }
  long long v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

double WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 50) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 78) = 0u;
  *(_WORD *)(a1 + 8) = 12;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 5) & 0x12 | (8 * (*(unsigned char *)(a2 + 5) & 1)) | ((*(unsigned char *)(a2 + 5) & 4) != 0) | (*(unsigned char *)(a2 + 5) >> 1) & 4;
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a1 + 52) = *(void *)(a2 + 32);
  *(void *)(a1 + 60) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 64) != 0;
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 77);
  int v2 = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 92) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 93) = v2;
  *(void *)(a1 + 96) = *(void *)(a2 + 80);
  int v3 = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 100);
  double result = *(double *)(a2 + 104);
  *(double *)(a1 + 120) = result;
  return result;
}

WebKit::WebKit2PlatformKeyboardEvent *WebKit::WebKit2PlatformKeyboardEvent::WebKit2PlatformKeyboardEvent(WebKit::WebKit2PlatformKeyboardEvent *this, const WebKit::WebKeyboardEvent *a2)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = 1;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_WORD *)this + 24) = 0;
  *((unsigned char *)this + 50) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  long long v4 = (uint64_t *)((char *)this + 56);
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 86) = 0u;
  int v5 = *((unsigned __int8 *)a2 + 4);
  if ((v5 - 8) <= 2) {
    *((unsigned char *)this + 8) = v5 - 6;
  }
  *((unsigned char *)this + 9) = *((unsigned char *)a2 + 5) & 0x12 | (8 * (*((unsigned char *)a2 + 5) & 1)) | ((*((unsigned char *)a2 + 5) & 4) != 0) | (*((unsigned char *)a2 + 5) >> 1) & 4;
  *(void *)this = *((void *)a2 + 1);
  WTF::String::operator=(v4, (WTF::StringImpl **)a2 + 4);
  WTF::String::operator=((uint64_t *)this + 8, (WTF::StringImpl **)a2 + 5);
  WTF::String::operator=((uint64_t *)this + 9, (WTF::StringImpl **)a2 + 6);
  WTF::String::operator=((uint64_t *)this + 10, (WTF::StringImpl **)a2 + 7);
  WTF::String::operator=((uint64_t *)this + 11, (WTF::StringImpl **)a2 + 8);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 18);
  *((unsigned char *)this + 101) = *((unsigned char *)a2 + 84);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 85);
  *(_WORD *)((char *)this + 49) = *((_WORD *)a2 + 43);
  uint64_t v6 = *((void *)a2 + 3);
  int v7 = *((unsigned __int8 *)this + 32);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v6;
  if (!v7) {
    *((unsigned char *)this + 32) = 1;
  }
  return this;
}

void WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(WebCore::PlatformKeyboardEvent *this, WTF::StringImpl *a2)
{
  int v3 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WebKit::WebKit2PlatformTouchEvent::WebKit2PlatformTouchEvent(uint64_t a1, uint64_t a2)
{
  _DWORD v58[6] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  long long v4 = (WTF **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 116) = 0;
  *(void *)(a1 + 108) = 0;
  char v5 = *(unsigned char *)(a2 + 4);
  if ((v5 - 11) <= 3u) {
    *(unsigned char *)(a1 + 8) = v5 + 2;
  }
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 5) & 0x12 | (8 * (*(unsigned char *)(a2 + 5) & 1)) | ((*(unsigned char *)(a2 + 5) & 4) != 0) | (*(unsigned char *)(a2 + 5) >> 1) & 4;
  *(void *)a1 = *(void *)(a2 + 8);
  uint64_t v6 = *(unsigned int *)(a2 + 44);
  if (v6)
  {
    if (v6 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x198D52F20);
    }
    int v7 = 72 * v6;
    uint64_t v8 = WTF::fastMalloc((WTF *)(72 * v6));
    uint64_t v9 = v8;
    unsigned int v10 = (v7 & 0xFFFFFFF8) / 0x48;
    unsigned int v11 = *(_DWORD *)(a2 + 44);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a2 + 32);
      int v14 = (72 * (unint64_t)v11 - 72) / 0x48 + 1;
      do
      {
        uint64_t v15 = v13 + v12;
        if ((*(unsigned char *)(v13 + v12 + 12) - 1) > 3u) {
          int v16 = 3;
        }
        else {
          int v16 = dword_1994F6D20[(char)(*(unsigned char *)(v13 + v12 + 12) - 1)];
        }
        uint64_t v17 = *(void *)(v15 + 4);
        int v18 = *(unsigned __int8 *)(v15 + 64);
        uint64_t v19 = v8 + v12;
        *(_DWORD *)uint64_t v19 = *(_DWORD *)v15;
        *(_DWORD *)(v19 + 12) = v16;
        long long v20 = *(_OWORD *)(v15 + 16);
        long long v21 = *(_OWORD *)(v15 + 32);
        long long v22 = *(_OWORD *)(v15 + 48);
        *(void *)(v19 + 4) = v17;
        *(_OWORD *)(v19 + 16) = v20;
        *(_OWORD *)(v19 + 32) = v21;
        *(_OWORD *)(v19 + 48) = v22;
        *(_DWORD *)(v19 + 64) = v18;
        v12 += 72;
      }
      while (v15 + 72 != v13 + 72 * v11);
    }
    else
    {
      int v14 = 0;
    }
  }
  else
  {
    int v14 = 0;
    unsigned int v10 = 0;
    uint64_t v9 = 0;
  }
  char v23 = *v4;
  if (*v4)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v23, (void *)a2);
  }
  *(void *)(a1 + 48) = v9;
  *(_DWORD *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 60) = v14;
  uint64_t v24 = *(unsigned int *)(a2 + 60);
  if (v24)
  {
    if (v24 >> 25)
    {
      __break(0xC471u);
      JUMPOUT(0x198D52F28);
    }
    uint64_t v25 = WTF::fastMalloc((WTF *)(v24 << 7));
    uint64_t v26 = v25;
    uint64_t v27 = *(unsigned int *)(a2 + 60);
    if (v27)
    {
      int v28 = 0;
      uint64_t v29 = *(void *)(a2 + 48);
      uint64_t v30 = 112 * v27;
      uint64_t v31 = v25;
      do
      {
        WebKit::platform(v54, v29);
        WebCore::PlatformTouchEvent::PlatformTouchEvent(v31, (uint64_t)v54);
        HIDWORD(v53) = ++v28;
        WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v32);
        WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v33);
        uint64_t v34 = v55;
        if (v55)
        {
          unsigned int v55 = 0;
          int v56 = 0;
          WTF::fastFree(v34, (void *)a2);
        }
        v29 += 112;
        v31 += 128;
        v30 -= 112;
      }
      while (v30);
    }
    else
    {
      int v28 = 0;
    }
  }
  else
  {
    int v28 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v35 = *(unsigned int *)(a1 + 76);
  int v36 = *(WTF **)(a1 + 64);
  if (v35)
  {
    WTF::VectorDestructor<true,WebCore::PlatformTouchEvent>::destruct(v36, (WTF *)((char *)v36 + 128 * v35));
    int v36 = *(WTF **)(a1 + 64);
  }
  if (v36)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v36, (void *)a2);
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  *(void *)(a1 + 64) = v26;
  *(_DWORD *)(a1 + 72) = v24;
  *(_DWORD *)(a1 + 76) = v28;
  WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, (void *)a2);
  uint64_t v38 = *(unsigned int *)(a2 + 76);
  if (v38)
  {
    if (v38 >> 25)
    {
      __break(0xC471u);
      JUMPOUT(0x198D52F30);
    }
    uint64_t v39 = WTF::fastMalloc((WTF *)(v38 << 7));
    uint64_t v40 = v39;
    uint64_t v41 = *(unsigned int *)(a2 + 76);
    if (v41)
    {
      int v42 = 0;
      uint64_t v43 = *(void *)(a2 + 64);
      uint64_t v44 = 112 * v41;
      uint64_t v45 = v39;
      do
      {
        WebKit::platform(v54, v43);
        WebCore::PlatformTouchEvent::PlatformTouchEvent(v45, (uint64_t)v54);
        HIDWORD(v53) = ++v42;
        WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v46);
        WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v47);
        __int16 v48 = v55;
        if (v55)
        {
          unsigned int v55 = 0;
          int v56 = 0;
          WTF::fastFree(v48, v37);
        }
        v43 += 112;
        v45 += 128;
        v44 -= 112;
      }
      while (v44);
    }
    else
    {
      int v42 = 0;
    }
  }
  else
  {
    int v42 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v49 = *(unsigned int *)(a1 + 92);
  if (v49) {
    WTF::VectorDestructor<true,WebCore::PlatformTouchEvent>::destruct(*(WTF **)(a1 + 80), (WTF *)(*(void *)(a1 + 80) + (v49 << 7)));
  }
  long long v50 = *(WTF **)(a1 + 80);
  if (v50)
  {
    *(void *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v50, v37);
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  *(void *)(a1 + 80) = v40;
  *(_DWORD *)(a1 + 88) = v38;
  *(_DWORD *)(a1 + 92) = v42;
  WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v37);
  *(void *)(a1 + 96) = *(void *)(a2 + 92);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 108) = *(void *)(a2 + 80);
  *(void *)(a1 + 116) = *(void *)(a2 + 80);
  return a1;
}

WTF *WTF::VectorDestructor<true,WebCore::PlatformTouchEvent>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (uint64_t)result + 80;
    do
    {
      WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 16, v4);
      double result = *(WTF **)(v3 - 32);
      if (result)
      {
        *(void *)(v3 - 32) = 0;
        *(_DWORD *)(v3 - 24) = 0;
        double result = (WTF *)WTF::fastFree(result, a2);
      }
      char v5 = (WTF *)(v3 + 48);
      v3 += 128;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::PlatformTouchEvent>::destruct(*(void *)a1, *(void *)a1 + (v3 << 7));
  }
  long long v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::PlatformTouchEvent::PlatformTouchEvent(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 9);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 9) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if ((v5 & 0xF) != 0) {
    *(unsigned char *)(a1 + 9) = v5 & 0xF;
  }
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, (uint64_t *)(a2 + 48));
  WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, (uint64_t *)(a2 + 64));
  WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 80, (uint64_t *)(a2 + 80));
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  *(void *)(a1 + 108) = *(void *)(a2 + 108);
  *(void *)(a1 + 116) = *(void *)(a2 + 116);
  return a1;
}

uint64_t WTF::Vector<WebCore::PlatformTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 25))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(v3 << 7));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = v6 << 7;
      do
      {
        WebCore::PlatformTouchEvent::PlatformTouchEvent();
        v7 += 128;
        v8 -= 128;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>::pair[abi:sn180100]<WebCore::ImageBufferParameters const&,WebCore::ShareableBitmapHandle,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v6;
  uint64_t v7 = (const void *)a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7) {
    CFRetain(v7);
  }
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a1 + 32, a3);
  return a1;
}

WebKit::SOAuthorizationCoordinator *WebKit::SOAuthorizationCoordinator::SOAuthorizationCoordinator(WebKit::SOAuthorizationCoordinator *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 8) = ((uint64_t (*)(void))*MEMORY[0x1E4FB62F8])() != 0;
  uint64_t v2 = objc_alloc_init(WKSOAuthorizationDelegate);
  uint64_t v3 = *(const void **)this;
  *(void *)this = v2;
  if (v3) {
    CFRelease(v3);
  }
  [MEMORY[0x1E4F18DC0] _disableAppSSO];
  return this;
}

void sub_198D531E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SOAuthorizationCoordinator::tryAuthorize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&void buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a2 + 40));
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v9 = (void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62F8])();
    if ([v9 canPerformAuthorizationWithURL:WTF::URL::operator NSURL *() responseCode:0])
    {
      uint64_t v10 = *(void *)(*a2 + 24);
      if (v10 && (CFRetain(*(CFTypeRef *)(v10 + 8)), !*(unsigned char *)(v10 + 16)))
      {
        if (!*(void *)(a3 + 328)
          || ([MEMORY[0x1E4F4EF90] isURLFromAppleOwnedDomain:WTF::URL::operator NSURL *()] & 1) == 0)
        {
          long long v22 = qword_1EB357BC8;
          if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&void buf[4] = a1;
            _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "%p - SOAuthorizationCoordinator::tryAuthorize: Attempting to perform subframe navigation for non-Apple authorization URL.", buf, 0xCu);
          }
          (*(void (**)(uint64_t, void))(*(void *)*a4 + 16))(*a4, 0);
          goto LABEL_28;
        }
        CFTypeRef v11 = *(CFTypeRef *)a1;
        if (*(void *)a1) {
          CFRetain(*(CFTypeRef *)a1);
        }
        uint64_t v17 = *a4;
        *a4 = 0;
        uint64_t v26 = v17;
        API::FrameInfo::handle((API::FrameInfo *)v10, &v25);
        uint64_t v18 = v25;
        uint64_t v19 = *(void *)(v25 + 16);
        uint64_t v20 = *(void *)(v25 + 24);
        uint64_t v21 = WTF::fastMalloc((WTF *)0xA0);
        if (v11)
        {
          CFRetain(v11);
          int v28 = v11;
          CFRetain(v11);
        }
        else
        {
          int v28 = 0;
        }
        WebKit::NavigationSOAuthorizationSession::NavigationSOAuthorizationSession((void *)v21, &v28, a2, a3, 2, &v26);
        if (v11) {
          CFRelease(v11);
        }
        *(void *)uint64_t v21 = &unk_1EE9D1658;
        *(void *)(v21 + 64) = &unk_1EE9D16B8;
        *(void *)(v21 + 96) = &unk_1EE9D16E0;
        *(void *)(v21 + 104) = 0;
        *(void *)(v21 + 112) = v19;
        *(void *)(v21 + 120) = v20;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        uint64_t v23 = WebKit::WebFrameProxy::webFrame(v19, v20);
        if (v23) {
          WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v23 + 208, (unsigned int *)(v21 + 96), (uint64_t)buf);
        }
        uint64_t v27 = v21;
        if (v11) {
          CFRelease(v11);
        }
        CFRelease(*(CFTypeRef *)(v18 + 8));
        uint64_t v13 = v26;
        if (!v26)
        {
LABEL_10:
          if (!v11) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
      }
      else
      {
        CFTypeRef v11 = *(CFTypeRef *)a1;
        uint64_t v24 = v11;
        if (v11) {
          CFRetain(v11);
        }
        uint64_t v12 = *a4;
        *a4 = 0;
        *(void *)long long buf = v12;
        WebKit::RedirectSOAuthorizationSession::create(&v24, a2, a3, (uint64_t *)buf, &v27);
        uint64_t v13 = *(void *)buf;
        if (!*(void *)buf) {
          goto LABEL_10;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      if (!v11)
      {
LABEL_12:
        int v14 = *(void **)a1;
        *(void *)long long buf = v27;
        [v14 setSession:buf];
        uint64_t v15 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v15) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v15 + 8));
        }
        if (!v10) {
          return;
        }
LABEL_28:
        CFRelease(*(CFTypeRef *)(v10 + 8));
        return;
      }
LABEL_11:
      CFRelease(v11);
      goto LABEL_12;
    }
  }
  int v16 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&void buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize: The requested URL is not registered for AppSSO handling. No further action needed.", buf, 0xCu);
  }
  (*(void (**)(uint64_t, void))(*(void *)*a4 + 16))(*a4, 0);
}

void sub_198D5362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFRelease(v16);
  WTF::fastFree(v17, v20);
  CFRelease(*(CFTypeRef *)(v18 + 8));
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
    if (!v16)
    {
LABEL_5:
      CFRelease(*(CFTypeRef *)(v15 + 8));
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_5;
  }
  CFRelease(v16);
  goto LABEL_5;
}

atomic_uchar *WebKit::SOAuthorizationCoordinator::tryAuthorize(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&void buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize (2)", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a3 + 40));
  if (!*(unsigned char *)(a1 + 8)
    || (uint64_t v13 = (void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62F8])(),
        ([v13 canPerformAuthorizationWithURL:WTF::URL::operator NSURL *() responseCode:0] & 1) == 0))
  {
    uint64_t v20 = qword_1EB357BC8;
    if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&void buf[4] = a1;
      _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize (2): The requested URL is not registered for AppSSO handling. No further action needed.", buf, 0xCu);
    }
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)*a6 + 16))(*a6, a3, a5);
  }
  uint64_t v14 = *(void *)(*a3 + 16);
  if (!v14 || *(unsigned char *)(v14 + 16))
  {
    if (*(void *)(*a3 + 288)) {
      uint64_t v15 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15)
    {
      int v16 = *(const void **)a1;
      uint64_t v24 = v16;
      if (v16) {
        CFRetain(v16);
      }
      WebKit::PopUpSOAuthorizationSession::create(a2, &v24, a4, a3, a5, a6, buf);
      if (v16) {
        CFRelease(v16);
      }
      uint64_t v17 = *(void **)a1;
      uint64_t v23 = *(void *)buf;
      double result = (atomic_uchar *)[v17 setSession:&v23];
      uint64_t v19 = v23;
      uint64_t v23 = 0;
      if (v19) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v19 + 8));
      }
      return result;
    }
    uint64_t v21 = qword_1EB357BC8;
    if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&void buf[4] = a1;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%p - SOAuthorizationCoordinator::tryAuthorize (2): Attempting to perform auth without a user gesture.", buf, 0xCu);
    }
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)*a6 + 16))(*a6, a3, a5);
  }
  long long v22 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&void buf[4] = a1;
    _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "%p - SOAuthorizationCoordinator::tryAuthorize (2): Attempting to perform subframe navigation.", buf, 0xCu);
  }
  return (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)*a6 + 16))(*a6, a3, a5);
}

void sub_198D53A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SOAuthorizationSession::SOAuthorizationSession(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1994F5F10;
  *(void *)(v10 + 24) = a1;
  *(void *)a1 = &unk_1EE9D1610;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = [objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB62F8])()) init];
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 32) = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
  uint64_t v12 = *(atomic_uint **)(a4 + 24);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = a5;
  *(unsigned char *)(a1 + 49) = 0;
  *(void *)(a1 + 56) = 0;
  [*(id *)(a1 + 24) setDelegate:*a2];
  return a1;
}

void sub_198D53C28(_Unwind_Exception *exception_object, void *a2)
{
  char v4 = (const void *)v2[7];
  v2[7] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (unsigned int *)v2[5];
  v2[5] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = v2[4];
  v2[4] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = (const void *)v2[3];
  v2[3] = 0;
  if (v7) {
    CFRelease(v7);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SOAuthorizationSession::~SOAuthorizationSession(WebKit::SOAuthorizationSession *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9D1610;
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v3 == 2)
      {
        char v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        char v4 = "PopUp";
      }
      else
      {
        char v4 = 0;
      }
    }
    else
    {
      char v4 = "Redirect";
    }
    uint64_t v5 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v5 = "Active";
        break;
      case 2:
        uint64_t v5 = "Waiting";
        break;
      case 3:
        uint64_t v5 = "Completed";
        break;
      default:
        uint64_t v5 = 0;
        break;
    }
    uint64_t v6 = *((void *)this + 7);
    int v14 = 134218754;
    uint64_t v15 = this;
    __int16 v16 = 2080;
    uint64_t v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v5;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::~SOAuthorizationSession: m_viewController=%p", (uint8_t *)&v14, 0x2Au);
  }
  *((unsigned char *)this + 49) = 1;
  int v7 = *((unsigned __int8 *)this + 16);
  if (v7 == 1)
  {
    uint64_t v8 = (void *)*((void *)this + 3);
    if (!v8) {
      goto LABEL_21;
    }
    [v8 cancelAuthorization];
    int v7 = *((unsigned __int8 *)this + 16);
  }
  if (!v7 || v7 == 3)
  {
    WebKit::SOAuthorizationSession::dismissViewController(this);
    goto LABEL_22;
  }
LABEL_21:
  WebKit::SOAuthorizationSession::becomeCompleted(this);
LABEL_22:
  uint64_t v10 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v9);
  }
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v13) {
    CFRelease(v13);
  }
}

void sub_198D53EB4(_Unwind_Exception *exception_object, void *a2)
{
  char v4 = (const void *)v2[7];
  v2[7] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (unsigned int *)v2[5];
  v2[5] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = v2[4];
  v2[4] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  int v7 = (const void *)v2[3];
  v2[3] = 0;
  if (v7) {
    CFRelease(v7);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SOAuthorizationSession::becomeCompleted(WebKit::SOAuthorizationSession *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    char v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      char v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    uint64_t v8 = *((void *)this + 7);
    int v9 = 134218754;
    uint64_t v10 = this;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2080;
    int v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::becomeCompleted: m_viewController=%p", (uint8_t *)&v9, 0x2Au);
  }
  *((unsigned char *)this + 16) = 3;
  WebKit::SOAuthorizationSession::dismissViewController(this);
}

void WebKit::SOAuthorizationSession::dismissViewController(WebKit::SOAuthorizationSession *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    char v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      char v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    uint64_t v8 = *((void *)this + 7);
    int v15 = 134218754;
    uint64_t v16 = this;
    __int16 v17 = 2080;
    __int16 v18 = v6;
    __int16 v19 = 2080;
    __int16 v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::dismissViewController: m_viewController=%p", (uint8_t *)&v15, 0x2Au);
  }
  int v9 = (void *)*((void *)this + 7);
  if (v9)
  {
    objc_msgSend((id)objc_msgSend(v9, "presentingViewController"), "dismissViewControllerAnimated:completion:", 1, 0);
    uint64_t v10 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v10) {
      CFRelease(v10);
    }
  }
  else
  {
    __int16 v11 = qword_1EB357BC8;
    if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *((unsigned __int8 *)this + 48);
      if (*((unsigned char *)this + 48))
      {
        if (v12 == 2)
        {
          __int16 v13 = "SubFrame";
        }
        else if (v12 == 1)
        {
          __int16 v13 = "PopUp";
        }
        else
        {
          __int16 v13 = 0;
        }
      }
      else
      {
        __int16 v13 = "Redirect";
      }
      int v14 = "Idle";
      switch(*((unsigned char *)this + 16))
      {
        case 0:
          break;
        case 1:
          int v14 = "Active";
          break;
        case 2:
          int v14 = "Waiting";
          break;
        case 3:
          int v14 = "Completed";
          break;
        default:
          int v14 = 0;
          break;
      }
      int v15 = 134218498;
      uint64_t v16 = this;
      __int16 v17 = 2080;
      __int16 v18 = v13;
      __int16 v19 = 2080;
      __int16 v20 = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::dismissViewController: No view controller, so returning early.", (uint8_t *)&v15, 0x20u);
    }
  }
}

void WebKit::SOAuthorizationSession::start(WebKit::SOAuthorizationSession *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v3 == 2)
      {
        uint64_t v5 = "SubFrame";
      }
      else
      {
        BOOL v4 = v3 == 1;
        uint64_t v5 = "PopUp";
        if (!v4) {
          uint64_t v5 = 0;
        }
      }
    }
    else
    {
      uint64_t v5 = "Redirect";
    }
    uint64_t v6 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v6 = "Active";
        break;
      case 2:
        uint64_t v6 = "Waiting";
        break;
      case 3:
        uint64_t v6 = "Completed";
        break;
      default:
        uint64_t v6 = 0;
        break;
    }
    uint64_t v7 = *((void *)this + 4);
    int v17 = 134218754;
    __int16 v18 = this;
    __int16 v19 = 2080;
    __int16 v20 = v5;
    __int16 v21 = 2080;
    uint64_t v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start: navigationAction=%p", (uint8_t *)&v17, 0x2Au);
    uint64_t v2 = qword_1EB357BC8;
  }
  *((unsigned char *)this + 16) = 1;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *((unsigned __int8 *)this + 48);
    int v9 = "SubFrame";
    uint64_t v10 = "PopUp";
    if (v8 != 1) {
      uint64_t v10 = 0;
    }
    if (v8 != 2) {
      int v9 = v10;
    }
    if (*((unsigned char *)this + 48)) {
      __int16 v11 = v9;
    }
    else {
      __int16 v11 = "Redirect";
    }
    int v17 = 134218498;
    __int16 v18 = this;
    __int16 v19 = 2080;
    __int16 v20 = v11;
    __int16 v21 = 2080;
    uint64_t v22 = "Active";
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start: Moving m_state to Active.", (uint8_t *)&v17, 0x20u);
  }
  int v12 = (void *)*((void *)this + 3);
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)this + 4) + 40));
  uint64_t v13 = WTF::URL::operator NSURL *();
  int v14 = (atomic_uchar *)*((void *)this + 1);
  if (v14) {
    int v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
  }
  else {
    int v15 = 0;
  }
  uint64_t v16 = malloc_type_malloc(0x38uLL, 0x10E00403075368FuLL);
  void *v16 = MEMORY[0x1E4F14398];
  v16[1] = 50331650;
  v16[2] = WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::{lambda(void *,SOAuthorizationHints *,NSError *)#1}::__invoke;
  v16[3] = &WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::descriptor;
  v16[4] = this;
  v16[5] = v15;
  _OWORD v16[6] = this;
  [v12 getAuthorizationHintsWithURL:v13 responseCode:0 completion:v16];
  _Block_release(v16);
}

void sub_198D54600(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::SOAuthorizationSession::fallBackToWebPath(WebKit::SOAuthorizationSession *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    BOOL v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      BOOL v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    uint64_t v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = "Active";
        break;
      case 2:
        uint64_t v7 = "Waiting";
        break;
      case 3:
        uint64_t v7 = "Completed";
        break;
      default:
        uint64_t v7 = 0;
        break;
    }
    int v13 = 134218498;
    int v14 = this;
    __int16 v15 = 2080;
    uint64_t v16 = v6;
    __int16 v17 = 2080;
    __int16 v18 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::fallBackToWebPath", (uint8_t *)&v13, 0x20u);
  }
  int v8 = *((unsigned __int8 *)this + 16);
  if (v8 == 1)
  {
    WebKit::SOAuthorizationSession::becomeCompleted(this);
    (*(void (**)(WebKit::SOAuthorizationSession *))(*(void *)this + 24))(this);
    return;
  }
  int v9 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v10 == 2)
      {
        __int16 v11 = "SubFrame";
        if (v8) {
          goto LABEL_28;
        }
      }
      else
      {
        if (v10 == 1)
        {
          __int16 v11 = "PopUp";
          if (!v8) {
            goto LABEL_26;
          }
LABEL_28:
          if (v8 == 3)
          {
            int v12 = "Completed";
          }
          else if (v8 == 2)
          {
            int v12 = "Waiting";
          }
          else
          {
            int v12 = 0;
          }
          goto LABEL_33;
        }
        __int16 v11 = 0;
        if (v8) {
          goto LABEL_28;
        }
      }
LABEL_26:
      int v12 = "Idle";
LABEL_33:
      int v13 = 134218498;
      int v14 = this;
      __int16 v15 = 2080;
      uint64_t v16 = v11;
      __int16 v17 = 2080;
      __int16 v18 = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::fallBackToWebPath: Returning early since not active.", (uint8_t *)&v13, 0x20u);
      goto LABEL_34;
    }
    __int16 v11 = "Redirect";
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
LABEL_34:
  WebKit::SOAuthorizationSession::dismissViewController(this);
}

void WebKit::SOAuthorizationSession::abort(WebKit::SOAuthorizationSession *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    if (*((unsigned char *)this + 48))
    {
      if (v3 == 2)
      {
        BOOL v4 = "SubFrame";
      }
      else
      {
        BOOL v8 = v3 == 1;
        BOOL v4 = "PopUp";
        if (!v8) {
          BOOL v4 = 0;
        }
      }
    }
    else
    {
      BOOL v4 = "Redirect";
    }
    uint64_t v5 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v5 = "Active";
        break;
      case 2:
        uint64_t v5 = "Waiting";
        break;
      case 3:
        uint64_t v5 = "Completed";
        break;
      default:
        uint64_t v5 = 0;
        break;
    }
    uint64_t v6 = *((void *)this + 7);
    int v13 = 134218754;
    int v14 = this;
    __int16 v15 = 2080;
    uint64_t v16 = v4;
    __int16 v17 = 2080;
    __int16 v18 = v5;
    __int16 v19 = 2048;
    uint64_t v20 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::abort: m_viewController=%p", (uint8_t *)&v13, 0x2Au);
  }
  int v7 = *((unsigned __int8 *)this + 16);
  BOOL v8 = v7 == 3 || v7 == 0;
  if (v8)
  {
    int v9 = qword_1EB357BC8;
    if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *((unsigned __int8 *)this + 48);
      if (*((unsigned char *)this + 48))
      {
        if (v10 == 2)
        {
          __int16 v11 = "SubFrame";
        }
        else if (v10 == 1)
        {
          __int16 v11 = "PopUp";
        }
        else
        {
          __int16 v11 = 0;
        }
      }
      else
      {
        __int16 v11 = "Redirect";
      }
      int v12 = "Idle";
      switch(v7)
      {
        case 0:
          break;
        case 1:
          int v12 = "Active";
          break;
        case 2:
          int v12 = "Waiting";
          break;
        case 3:
          int v12 = "Completed";
          break;
        default:
          int v12 = 0;
          break;
      }
      int v13 = 134218498;
      int v14 = this;
      __int16 v15 = 2080;
      uint64_t v16 = v11;
      __int16 v17 = 2080;
      __int16 v18 = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::abort: Returning early since idle or already completed.", (uint8_t *)&v13, 0x20u);
    }
    WebKit::SOAuthorizationSession::dismissViewController(this);
  }
  else
  {
    WebKit::SOAuthorizationSession::becomeCompleted(this);
    (*(void (**)(WebKit::SOAuthorizationSession *))(*(void *)this + 32))(this);
  }
}

void WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v2 = WebKit::WebFrameProxy::webFrame(*((void *)this + 14), *((void *)this + 15));
  if (v2) {
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v2 + 208, (void *)this + 12);
  }
  unint64_t v3 = *((void *)this + 16);
  unint64_t v4 = *((void *)this + 17);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 18);
  if (v3 <= v4)
  {
    BOOL v8 = (WTF::StringImpl *)((char *)v5 + 64 * v4);
    int v7 = (WTF::StringImpl *)((char *)v5 + 64 * v3);
  }
  else
  {
    WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct(v5, (WTF::StringImpl *)((char *)v5 + 64 * v4));
    uint64_t v6 = *((void *)this + 18);
    int v7 = (WTF::StringImpl *)(v6 + (*((void *)this + 16) << 6));
    BOOL v8 = (WTF::StringImpl *)(v6 + ((unint64_t)*((unsigned int *)this + 38) << 6));
  }
  WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct(v7, v8);
  int v10 = (WTF *)*((void *)this + 18);
  if (v10)
  {
    *((void *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v10, v9);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 13, v9);

  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession(this, v11);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession(WebKit::SubFrameSOAuthorizationSession *this)
{
}

{
  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 96));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 64));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 96));

  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebKit::SubFrameSOAuthorizationSession::fallBackToWebPathInternal(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    unint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      unint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    uint64_t v8 = *((void *)this + 4);
    *(_DWORD *)long long buf = 134218754;
    *(void *)&void buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&v28[0] = v7;
    WORD4(v28[0]) = 2048;
    *(void *)((char *)v28 + 10) = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::fallBackToWebPathInternal: navigationAction=%p", buf, 0x2Au);
  }
  uint64_t v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)this + 4) + 40));
  int v10 = *(_DWORD **)v9;
  if (*(void *)v9) {
    *v10 += 2;
  }
  *(void *)long long buf = v10;
  long long v11 = *(_OWORD *)(v9 + 24);
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(v9 + 8);
  v28[0] = v11;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x45);
  for (uint64_t i = 0; i != 69; ++i)
    *(unsigned char *)(v12 + i) = aScriptParentPo[i];
  v24[0] = v12;
  v24[1] = 0x4500000045;
  int v25 = 0;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)v24);
  if (v25 != -1) {
    ((void (*)(WTF::StringImpl **, void *))off_1EE9D1730[v25])(&v23, v24);
  }
  __int16 v15 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)this + 4) + 40));
  __int16 v17 = *(_DWORD **)v16;
  if (*(void *)v16) {
    *v17 += 2;
  }
  *(void *)long long buf = v17;
  long long v18 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(v16 + 8);
  v28[0] = v18;
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v23, (WebCore::ResourceRequestBase *)(*((void *)this + 4) + 40));
  __int16 v19 = v23;
  __int16 v23 = 0;
  v24[0] = v19;
  int v25 = 1;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)v24);
  if (v25 != -1) {
    ((void (*)(char *, void *))off_1EE9D1730[v25])(&v26, v24);
  }
  int v25 = -1;
  uint64_t v21 = v23;
  __int16 v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  double result = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D54FB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18, WTF::StringImpl *a19)
{
  if (a13 != -1) {
    ((void (*)(char *, char *))off_1EE9D1730[a13])(&a18, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  uint64_t v20 = a19;
  a19 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, a2);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::URL::URL((uint64_t)v24, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v25, a3);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  if (v6)
  {
    if (v5 + 1 != v6) {
      goto LABEL_20;
    }
    LODWORD(v7) = *(_DWORD *)(a1 + 152);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 152);
    if (v5)
    {
      if (v5 != v7 - 1) {
        goto LABEL_20;
      }
    }
    else if (v7)
    {
      uint64_t v5 = 0;
      goto LABEL_20;
    }
  }
  uint64_t v8 = v7;
  unint64_t v9 = ((unint64_t)v7 >> 2) + v7;
  if (v9 <= 0xF) {
    unint64_t v9 = 15;
  }
  if (v9 >= 0x3FFFFFF)
  {
    __break(0xC471u);
    return;
  }
  int v10 = *(WTF::StringImpl **)(a1 + 144);
  int v11 = v9 + 1;
  uint64_t v12 = WTF::fastMalloc((WTF *)((v9 + 1) << 6));
  *(_DWORD *)(a1 + 152) = v11;
  *(void *)(a1 + 144) = v12;
  unint64_t v13 = *(void *)(a1 + 128);
  unint64_t v14 = *(void *)(a1 + 136);
  if (v13 <= v14)
  {
    WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move((WTF::StringImpl *)((char *)v10 + 64 * v13), (WTF::StringImpl *)((char *)v10 + 64 * v14), v12 + (v13 << 6));
  }
  else
  {
    WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move(v10, (WTF::StringImpl *)((char *)v10 + 64 * v14), v12);
    uint64_t v15 = *(void *)(a1 + 128);
    uint64_t v16 = v15 - v8 + *(unsigned int *)(a1 + 152);
    WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move((WTF::StringImpl *)((char *)v10 + 64 * v15), (WTF::StringImpl *)((char *)v10 + 64 * v8), *(void *)(a1 + 144) + (v16 << 6));
    *(void *)(a1 + 128) = v16;
  }
  if (v10)
  {
    if (*(WTF::StringImpl **)(a1 + 144) == v10)
    {
      *(void *)(a1 + 144) = 0;
      *(_DWORD *)(a1 + 152) = 0;
    }
    WTF::fastFree(v10, v17);
  }
  uint64_t v5 = *(void *)(a1 + 136);
LABEL_20:
  std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100](*(void *)(a1 + 144) + (v5 << 6), (uint64_t *)v24);
  uint64_t v19 = *(void *)(a1 + 136);
  if (v19 == *(unsigned int *)(a1 + 152) - 1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  *(void *)(a1 + 136) = v20;
  if (v26 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9D1730[v26])(&v27, v25);
  }
  int v26 = -1;
  uint64_t v21 = v24[0];
  v24[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  unint64_t v22 = *(void *)(a1 + 128);
  unint64_t v23 = *(void *)(a1 + 136);
  if (v22 > v23) {
    v23 += *(unsigned int *)(a1 + 152);
  }
  if (v23 - v22 == 1) {
    WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame((WebKit::SubFrameSOAuthorizationSession *)a1);
  }
}

void sub_198D55280(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::SubFrameSOAuthorizationSession::abortInternal(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    unint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      unint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    uint64_t v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = "Active";
        break;
      case 2:
        uint64_t v7 = "Waiting";
        break;
      case 3:
        uint64_t v7 = "Completed";
        break;
      default:
        uint64_t v7 = 0;
        break;
    }
    int v9 = 134218498;
    int v10 = this;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2080;
    unint64_t v14 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::abortInternal", (uint8_t *)&v9, 0x20u);
  }
  return WebKit::SubFrameSOAuthorizationSession::fallBackToWebPathInternal(this);
}

NSUInteger WebKit::SubFrameSOAuthorizationSession::completeInternal(WebKit::SubFrameSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, NSData *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)this + 48);
    uint64_t v8 = "SubFrame";
    int v9 = "PopUp";
    if (v7 != 1) {
      int v9 = 0;
    }
    if (v7 != 2) {
      uint64_t v8 = v9;
    }
    if (*((unsigned char *)this + 48)) {
      int v10 = v8;
    }
    else {
      int v10 = "Redirect";
    }
    __int16 v11 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        __int16 v11 = "Active";
        break;
      case 2:
        __int16 v11 = "Waiting";
        break;
      case 3:
        __int16 v11 = "Completed";
        break;
      default:
        __int16 v11 = 0;
        break;
    }
    *(_DWORD *)long long buf = 134218754;
    *(void *)&void buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v10;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&long long v26 = v11;
    WORD4(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 10) = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::completeInternal: httpState=%d", buf, 0x26u);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(a2) != 200) {
    return (NSUInteger)WebKit::SubFrameSOAuthorizationSession::fallBackToWebPathInternal(this);
  }
  uint64_t v12 = WebCore::ResourceResponseBase::url(a2);
  __int16 v13 = *(_DWORD **)v12;
  if (*(void *)v12) {
    *v13 += 2;
  }
  *(void *)long long buf = v13;
  long long v14 = *(_OWORD *)(v12 + 24);
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(v12 + 8);
  long long v26 = v14;
  if (a3
    && (v15 = [(NSData *)a3 bytes], NSUInteger result = [(NSData *)a3 length], (a3 = (NSData *)result) != 0))
  {
    if (HIDWORD(result))
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v17 = WTF::fastMalloc((WTF *)result);
    long long v18 = 0;
    do
    {
      *((unsigned char *)&v18->super.isa + v17) = *((unsigned char *)&v18->super.isa + (void)v15);
      long long v18 = (NSData *)((char *)v18 + 1);
    }
    while (a3 != v18);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v20 = v17;
  int v21 = (int)a3;
  int v22 = (int)a3;
  int v23 = 0;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)&v20);
  if (v23 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9D1730[v23])(&v24, &v20);
  }
  NSUInteger result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D556B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17)
{
  if (a11 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9D1730[a11])(&a16, &a9);
  }
  long long v18 = a17;
  a17 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::SubFrameSOAuthorizationSession::beforeStart(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    unint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      unint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&void buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&long long v19 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::beforeStart", buf, 0x20u);
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)this + 10);
  uint64_t v8 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)this + 4) + 40));
  int v9 = *(_DWORD **)v8;
  if (*(void *)v8) {
    *v9 += 2;
  }
  *(void *)long long buf = v9;
  long long v10 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(v8 + 8);
  long long v19 = v10;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x44);
  for (uint64_t i = 0; i != 68; ++i)
    *(unsigned char *)(v11 + i) = aScriptParentPo_0[i];
  v15[0] = v11;
  v15[1] = 0x4400000044;
  int v16 = 0;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)v15);
  if (v16 != -1) {
    ((void (*)(char *, void *))off_1EE9D1730[v16])(&v17, v15);
  }
  NSUInteger result = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D55944(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17)
{
  if (a11 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9D1730[a11])(&a16, &a9);
  }
  long long v18 = a17;
  a17 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SubFrameSOAuthorizationSession::didFinishLoad(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    unint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      unint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    *(_DWORD *)long long buf = 134218498;
    int v22 = this;
    __int16 v23 = 2080;
    char v24 = v6;
    __int16 v25 = 2080;
    long long v26 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::didFinishLoad", buf, 0x20u);
  }
  uint64_t v8 = WebKit::WebFrameProxy::webFrame(*((void *)this + 14), *((void *)this + 15));
  uint64_t v10 = v8;
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v12 = (void *)((char *)this + 128);
    uint64_t v11 = *((void *)this + 16);
    __int16 v13 = (void *)((char *)this + 136);
    if (v11 == *((void *)this + 17))
    {
LABEL_30:
      CFRelease(*(CFTypeRef *)(v10 + 8));
      return;
    }
LABEL_17:
    if (WTF::equal(*(WTF **)(*((void *)this + 18) + (v11 << 6)), *(const WTF::StringImpl **)(v10 + 48), v9))
    {
      if (*v12 == *v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198D55C40);
      }
      std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100]((uint64_t)&v18, (uint64_t *)(*((void *)this + 18) + (*v12 << 6)));
      if (*v12 == *v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198D55C60);
      }
      WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct((WTF::StringImpl *)(*((void *)this + 18) + (*v12 << 6)), (WTF::StringImpl *)(*((void *)this + 18) + (*v12 << 6) + 64));
      uint64_t v15 = *((void *)this + 16);
      if (v15 == *((unsigned int *)this + 38) - 1) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15 + 1;
      }
      *((void *)this + 16) = v16;
      if (v20 != -1) {
        ((void (*)(uint8_t *, uint64_t *))off_1EE9D1730[v20])(buf, &v19);
      }
      int v20 = -1;
      char v17 = v18;
      long long v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v14);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(this);
    }
    goto LABEL_30;
  }
  uint64_t v12 = (void *)((char *)this + 128);
  uint64_t v11 = *((void *)this + 16);
  __int16 v13 = (void *)((char *)this + 136);
  if (v11 != *((void *)this + 17)) {
    goto LABEL_17;
  }
}

void sub_198D55C68(_Unwind_Exception *exception_object)
{
}

void WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 48);
    unint64_t v4 = "SubFrame";
    uint64_t v5 = "PopUp";
    if (v3 != 1) {
      uint64_t v5 = 0;
    }
    if (v3 != 2) {
      unint64_t v4 = v5;
    }
    if (*((unsigned char *)this + 48)) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = "Redirect";
    }
    int v7 = "Idle";
    switch(*((unsigned char *)this + 16))
    {
      case 0:
        break;
      case 1:
        int v7 = "Active";
        break;
      case 2:
        int v7 = "Waiting";
        break;
      case 3:
        int v7 = "Completed";
        break;
      default:
        int v7 = 0;
        break;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = this;
    __int16 v24 = 2080;
    __int16 v25 = v6;
    __int16 v26 = 2080;
    uint64_t v27 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::loadRequestToFrame", buf, 0x20u);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      if (*((void *)this + 16) == *((void *)this + 17)) {
        goto LABEL_32;
      }
      uint64_t v10 = WebKit::WebFrameProxy::webFrame(*((void *)this + 14), *((void *)this + 15));
      if (!v10) {
        goto LABEL_32;
      }
      uint64_t v11 = (CFTypeRef *)v10;
      CFRetain(*(CFTypeRef *)(v10 + 8));
      *(unsigned char *)(v9 + 793) = 1;
      uint64_t v12 = *((void *)this + 16);
      if (v12 == *((void *)this + 17))
      {
        __break(0xC471u);
      }
      else
      {
        __int16 v13 = (unsigned int *)(*((void *)this + 18) + (v12 << 6));
        long long v14 = (const WTF::String *)(v13 + 10);
        unsigned int v15 = v13[14];
        if (v15 == 1)
        {
          WebKit::WebFrameProxy::loadURL((WebKit::WebFrameProxy *)v11, (const WTF::URL *)v13, v14);
LABEL_31:
          CFRelease(v11[1]);
LABEL_32:
          CFRelease(*(CFTypeRef *)(v9 - 8));
          return;
        }
        if (!v15)
        {
          uint64_t v16 = *(void *)v14;
          uint64_t v17 = v13[13];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          int v21 = *(WTF::StringImpl **)buf;
          WebKit::WebFrameProxy::loadData((uint64_t)v11, v16, v17, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)v13);
          uint64_t v19 = v21;
          int v21 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v18);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          int v20 = v22;
          int v22 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v18);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          goto LABEL_31;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
      }
      JUMPOUT(0x198D55F28);
    }
  }
}

void sub_198D55F38(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  CFRelease(*(CFTypeRef *)(v11 - 8));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::SubFrameSOAuthorizationSession::didFinishLoad(WebKit::SubFrameSOAuthorizationSession *this)
{
}

uint64_t WebKit::SubFrameSOAuthorizationSession::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions(WebKit::SubFrameSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, const WTF::StringImpl *a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 256);
      {
        WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key, a3))return 0; {
    }
      }
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v9 = *(API::FrameInfo **)(*((void *)this + 4) + 24);
  if (v9)
  {
    API::FrameInfo::parentFrameHandle(v9, v79);
    uint64_t v10 = v79[0];
    if (v79[0])
    {
      uint64_t v11 = WebKit::WebFrameProxy::webFrame(*(void *)(v79[0] + 16), *(void *)(v79[0] + 24));
      if (!v11) {
        goto LABEL_20;
      }
      uint64_t v13 = v11;
      do
      {
        WebCore::SecurityOrigin::create((uint64_t *)buf, (WebCore::SecurityOrigin *)(v13 + 48), v12);
        LODWORD(v14) = HIDWORD(v84);
        if (HIDWORD(v84) == v84)
        {
          long long v18 = (const WebCore::SecurityOrigin **)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, HIDWORD(v84) + 1, (unint64_t)buf);
          uint64_t v14 = HIDWORD(v84);
          uint64_t v19 = v83;
          int v20 = *v18;
          WTF::StringImpl *v18 = 0;
          v19[v14] = v20;
        }
        else
        {
          unsigned int v15 = *(const WebCore::SecurityOrigin **)buf;
          *(void *)long long buf = 0;
          v83[HIDWORD(v84)] = v15;
        }
        HIDWORD(v84) = v14 + 1;
        uint64_t v16 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v16) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v16, v12);
        }
        uint64_t v17 = *(void *)(v13 + 312);
        if (!v17) {
          break;
        }
        uint64_t v13 = *(void *)(v17 + 8);
      }
      while (v13);
      uint64_t v10 = v79[0];
      if (v79[0]) {
LABEL_20:
      }
        CFRelease(*(CFTypeRef *)(v10 + 8));
    }
  }
  uint64_t v21 = WebCore::ResourceResponseBase::url(a2);
  int v22 = *(WTF::StringImpl **)v21;
  if (*(void *)v21)
  {
    *(_DWORD *)v22 += 2;
    long long v23 = *(_OWORD *)(v21 + 8);
    long long v82 = *(_OWORD *)(v21 + 24);
    long long v81 = v23;
    *(_DWORD *)v22 += 2;
  }
  else
  {
    long long v75 = *(_OWORD *)(v21 + 8);
    long long v82 = *(_OWORD *)(v21 + 24);
    long long v81 = v75;
  }
  uint64_t v80 = v22;
  *(void *)long long buf = v22;
  *(_OWORD *)&uint8_t buf[8] = v81;
  *(_OWORD *)CFTypeRef v90 = v82;
  MEMORY[0x199735820](v79, buf, 0, 0);
  __int16 v25 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v24);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  MEMORY[0x199739C00](buf, a2);
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v88, (WebCore::ResourceRequestBase *)(*((void *)this + 4) + 40));
  WebCore::ContentSecurityPolicy::didReceiveHeaders();
  uint64_t v27 = v88;
  unint64_t v88 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v26);
  if (WebCore::ContentSecurityPolicy::allowFrameAncestors())
  {
    if ((WebCore::ContentSecurityPolicy::overridesXFrameOptions((WebCore::ContentSecurityPolicy *)v79) & 1) == 0)
    {
      WebCore::ResourceResponseBase::httpHeaderField();
      if (v78)
      {
        uint64_t v28 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(a2);
        switch(WebCore::parseXFrameOptionsHeader())
        {
          case 1u:
            goto LABEL_109;
          case 2u:
            WebCore::SecurityOrigin::create((uint64_t *)buf, v28, v29);
            if (HIDWORD(v84))
            {
              uint64_t v30 = v83;
              uint64_t v31 = 8 * HIDWORD(v84) - 8;
              do
              {
                int isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort(*(WebCore::SecurityOrigin **)buf, *v30++);
                if (v31) {
                  char v33 = isSameSchemeHostPort;
                }
                else {
                  char v33 = 0;
                }
                v31 -= 8;
              }
              while ((v33 & 1) != 0);
              int v34 = isSameSchemeHostPort ^ 1;
            }
            else
            {
              int v34 = 0;
            }
            uint64_t v41 = *(void *)buf;
            *(void *)long long buf = 0;
            if (v41)
            {
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v41, v29);
              if (v34) {
                goto LABEL_109;
              }
            }
            else if (v34)
            {
LABEL_109:
              uint64_t v58 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
              WTF::URL::stringCenterEllipsizedToLength(v58);
              __int16 v59 = v78;
              if (v78) {
                *(_DWORD *)v78 += 2;
              }
              uint64_t v76 = v59;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to display '", 21, (uint64_t *)&v77, (uint64_t)"' in a frame because it set 'X-Frame-Options' to '", 51, (uint64_t *)&v76, (uint64_t)"'.", 3, &v88);
              __int16 v61 = v76;
              uint64_t v76 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2) {
                  WTF::StringImpl::destroy(v61, v60);
                }
                else {
                  *(_DWORD *)v61 -= 2;
                }
              }
              int v62 = v77;
              int v77 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2) {
                  WTF::StringImpl::destroy(v62, v60);
                }
                else {
                  *(_DWORD *)v62 -= 2;
                }
              }
              __int16 v63 = qword_1EB357BC8;
              if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
              {
                int v65 = *((unsigned __int8 *)this + 48);
                if (*((unsigned char *)this + 48))
                {
                  if (v65 == 2)
                  {
                    unsigned int v66 = "SubFrame";
                  }
                  else if (v65 == 1)
                  {
                    unsigned int v66 = "PopUp";
                  }
                  else
                  {
                    unsigned int v66 = 0;
                  }
                }
                else
                {
                  unsigned int v66 = "Redirect";
                }
                char v67 = "Idle";
                switch(*((unsigned char *)this + 16))
                {
                  case 0:
                    break;
                  case 1:
                    char v67 = "Active";
                    break;
                  case 2:
                    char v67 = "Waiting";
                    break;
                  case 3:
                    char v67 = "Completed";
                    break;
                  default:
                    char v67 = 0;
                    break;
                }
                WTF::String::utf8();
                if (v87) {
                  __int16 v68 = (char *)v87 + 16;
                }
                else {
                  __int16 v68 = 0;
                }
                *(_DWORD *)long long buf = 134218754;
                *(void *)&uint8_t buf[4] = this;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v66;
                *(_WORD *)&unsigned char buf[22] = 2080;
                *(void *)CFTypeRef v90 = v67;
                *(_WORD *)&v90[8] = 2080;
                *(void *)&v90[10] = v68;
                _os_log_impl(&dword_1985F2000, v63, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions: %s", buf, 0x2Au);
                unint64_t v69 = v87;
                unint64_t v87 = 0;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 1) {
                    WTF::fastFree(v69, v64);
                  }
                  else {
                    --*(_DWORD *)v69;
                  }
                }
              }
              uint64_t v70 = v88;
              unint64_t v88 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2) {
                  WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v64);
                }
                else {
                  *(_DWORD *)v70 -= 2;
                }
              }
              uint64_t v71 = v78;
              uint64_t v78 = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2) {
                  WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v64);
                }
                else {
                  *(_DWORD *)v71 -= 2;
                }
              }
              goto LABEL_147;
            }
LABEL_90:
            uint64_t v54 = v78;
            uint64_t v78 = 0;
            if (!v54) {
              break;
            }
            if (*(_DWORD *)v54 != 2)
            {
              uint64_t v8 = 0;
              *(_DWORD *)v54 -= 2;
              goto LABEL_148;
            }
            WTF::StringImpl::destroy(v54, v29);
            break;
          case 4u:
            uint64_t v35 = v78;
            *(_DWORD *)v78 += 2;
            int v85 = v35;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Invalid 'X-Frame-Options' header encountered: '", 48, (uint64_t *)&v85, (uint64_t)"' is not a recognized directive. The header will be ignored.", 61, &v88);
            char v37 = v85;
            int v85 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2) {
                WTF::StringImpl::destroy(v37, v36);
              }
              else {
                *(_DWORD *)v37 -= 2;
              }
            }
            int v42 = qword_1EB357BC8;
            if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
            {
              int v43 = *((unsigned __int8 *)this + 48);
              if (*((unsigned char *)this + 48))
              {
                if (v43 == 2)
                {
                  uint64_t v44 = "SubFrame";
                }
                else if (v43 == 1)
                {
                  uint64_t v44 = "PopUp";
                }
                else
                {
                  uint64_t v44 = 0;
                }
              }
              else
              {
                uint64_t v44 = "Redirect";
              }
              uint64_t v49 = "Idle";
              switch(*((unsigned char *)this + 16))
              {
                case 0:
                  break;
                case 1:
                  uint64_t v49 = "Active";
                  break;
                case 2:
                  uint64_t v49 = "Waiting";
                  break;
                case 3:
                  uint64_t v49 = "Completed";
                  break;
                default:
                  uint64_t v49 = 0;
                  break;
              }
              WTF::String::utf8();
              if (v86) {
                long long v51 = (char *)v86 + 16;
              }
              else {
                long long v51 = 0;
              }
              *(_DWORD *)long long buf = 134218754;
              *(void *)&uint8_t buf[4] = this;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v44;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)CFTypeRef v90 = v49;
              *(_WORD *)&v90[8] = 2080;
              *(void *)&v90[10] = v51;
              _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::shouldInterruptLoadForXFrameOptions: %s", buf, 0x2Au);
              uint64_t v52 = v86;
              uint64_t v86 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 1) {
                  WTF::fastFree(v52, v29);
                }
                else {
                  --*(_DWORD *)v52;
                }
              }
            }
            uint64_t v53 = v88;
            unint64_t v88 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2) {
                WTF::StringImpl::destroy(v53, v29);
              }
              else {
                *(_DWORD *)v53 -= 2;
              }
            }
            goto LABEL_90;
          case 5u:
            uint64_t v38 = v78;
            *(_DWORD *)v78 += 2;
            unint64_t v87 = v38;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Multiple 'X-Frame-Options' headers with conflicting values ('", 62, (uint64_t *)&v87, (uint64_t)"') encountered. Falling back to 'DENY'.", 40, &v88);
            uint64_t v40 = v87;
            unint64_t v87 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2) {
                WTF::StringImpl::destroy(v40, v39);
              }
              else {
                *(_DWORD *)v40 -= 2;
              }
            }
            uint64_t v45 = qword_1EB357BC8;
            if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
            {
              int v47 = *((unsigned __int8 *)this + 48);
              if (*((unsigned char *)this + 48))
              {
                if (v47 == 2)
                {
                  __int16 v48 = "SubFrame";
                }
                else if (v47 == 1)
                {
                  __int16 v48 = "PopUp";
                }
                else
                {
                  __int16 v48 = 0;
                }
              }
              else
              {
                __int16 v48 = "Redirect";
              }
              long long v50 = "Idle";
              switch(*((unsigned char *)this + 16))
              {
                case 0:
                  break;
                case 1:
                  long long v50 = "Active";
                  break;
                case 2:
                  long long v50 = "Waiting";
                  break;
                case 3:
                  long long v50 = "Completed";
                  break;
                default:
                  long long v50 = 0;
                  break;
              }
              WTF::String::utf8();
              if (v86) {
                unsigned int v55 = (char *)v86 + 16;
              }
              else {
                unsigned int v55 = 0;
              }
              *(_DWORD *)long long buf = 134218754;
              *(void *)&uint8_t buf[4] = this;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v48;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)CFTypeRef v90 = v50;
              *(_WORD *)&v90[8] = 2080;
              *(void *)&v90[10] = v55;
              _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::shouldInterruptLoadForXFrameOptions: %s", buf, 0x2Au);
              int v56 = v86;
              uint64_t v86 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 1) {
                  WTF::fastFree(v56, v46);
                }
                else {
                  --*(_DWORD *)v56;
                }
              }
            }
            uint64_t v57 = v88;
            unint64_t v88 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2) {
                WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v46);
              }
              else {
                *(_DWORD *)v57 -= 2;
              }
            }
            goto LABEL_109;
          default:
            goto LABEL_90;
        }
      }
    }
    uint64_t v8 = 0;
  }
  else
  {
LABEL_147:
    uint64_t v8 = 1;
  }
LABEL_148:
  MEMORY[0x199735830](v79);
  int v73 = v80;
  uint64_t v80 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2) {
      WTF::StringImpl::destroy(v73, v72);
    }
    else {
      *(_DWORD *)v73 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v72);
  return v8;
}

void sub_198D56990(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  uint64_t v14 = *(void *)(v12 - 128);
  *(void *)(v12 - 128) = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, a2);
  }
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 176, a2);
  _Unwind_Resume(a1);
}

void sub_198D57194(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D58560(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,CFTypeRef cf)
{
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  CFTypeRef v45 = cf;
  CFTypeRef cf = 0;
  if (v45) {
    CFRelease(v45);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a13, v44);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIGamepadProvider::platformSetDefaultGamepadProvider(WebKit::UIGamepadProvider *this)
{
  uint64_t v1 = WebCore::GamepadProvider::singleton(this);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
  if ((result & 1) == 0)
  {
    int v3 = (WebCore::GamepadProvider *)WebCore::GameControllerGamepadProvider::singleton((WebCore::GameControllerGamepadProvider *)result);
    return WebCore::GamepadProvider::setSharedProvider(v3, v4);
  }
  return result;
}

uint64_t WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(WebKit::UIGamepadProvider *this)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "keyWindow"), "firstResponder");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return [v1 page];
}

atomic_uchar *WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result) {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  }
  return result;
}

void WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::{lambda(void *,SOAuthorizationHints *,NSError *)#1}::__invoke(void *a1, void *a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  uint64_t v7 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v6 + 48);
    uint64_t v9 = "SubFrame";
    uint64_t v10 = "PopUp";
    if (v8 != 1) {
      uint64_t v10 = 0;
    }
    if (v8 != 2) {
      uint64_t v9 = v10;
    }
    if (*(unsigned char *)(v6 + 48)) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = "Redirect";
    }
    uint64_t v12 = "Idle";
    switch(*(unsigned char *)(v6 + 16))
    {
      case 0:
        goto LABEL_15;
      case 1:
        uint64_t v12 = "Active";
        if (!a3) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 2:
        uint64_t v12 = "Waiting";
        if (!a3) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 3:
        uint64_t v12 = "Completed";
        if (!a3) {
          goto LABEL_18;
        }
        goto LABEL_16;
      default:
        uint64_t v12 = 0;
LABEL_15:
        if (a3) {
LABEL_16:
        }
          uint64_t v13 = [a3 code];
        else {
LABEL_18:
        }
          uint64_t v13 = 0;
        *(_DWORD *)long long buf = 134218754;
        *(void *)&uint8_t buf[4] = v6;
        __int16 v52 = 2080;
        uint64_t v53 = v11;
        __int16 v54 = 2080;
        unsigned int v55 = v12;
        __int16 v56 = 2048;
        uint64_t v57 = (char *)v13;
        _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start: Receive SOAuthorizationHints (error=%ld)", buf, 0x2Au);
        break;
    }
  }
  uint64_t v14 = (atomic_uchar *)a1[5];
  if (!v14)
  {
    uint64_t v16 = qword_1EB357BC8;
LABEL_30:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "SOAuthorizationSession::start (getAuthorizationHintsWithURL completion handler): Returning early because weakThis is now null.", buf, 2u);
    }
    return;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v49, v14, a1[6]);
  uint64_t v15 = v49;
  uint64_t v16 = qword_1EB357BC8;
  if (!v49) {
    goto LABEL_30;
  }
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT);
  if (!a2 || a3)
  {
    if (v17)
    {
      int v20 = *(unsigned __int8 *)(v6 + 48);
      if (*(unsigned char *)(v6 + 48))
      {
        if (v20 == 2)
        {
          uint64_t v21 = "SubFrame";
        }
        else if (v20 == 1)
        {
          uint64_t v21 = "PopUp";
        }
        else
        {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = "Redirect";
      }
      long long v23 = "Idle";
      switch(*(unsigned char *)(v6 + 16))
      {
        case 0:
          break;
        case 1:
          long long v23 = "Active";
          break;
        case 2:
          long long v23 = "Waiting";
          break;
        case 3:
          long long v23 = "Completed";
          break;
        default:
          long long v23 = 0;
          break;
      }
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v52 = 2080;
      uint64_t v53 = v21;
      __int16 v54 = 2080;
      unsigned int v55 = v23;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start (getAuthorizationHintsWithURL completion handler): Returning early due to error or lack of hints.", buf, 0x20u);
    }
    goto LABEL_119;
  }
  if (v17)
  {
    int v18 = *(unsigned __int8 *)(v6 + 48);
    if (*(unsigned char *)(v6 + 48))
    {
      if (v18 == 2)
      {
        uint64_t v19 = "SubFrame";
      }
      else if (v18 == 1)
      {
        uint64_t v19 = "PopUp";
      }
      else
      {
        uint64_t v19 = 0;
      }
    }
    else
    {
      uint64_t v19 = "Redirect";
    }
    int v22 = "Idle";
    switch(*(unsigned char *)(v6 + 16))
    {
      case 0:
        break;
      case 1:
        int v22 = "Active";
        break;
      case 2:
        int v22 = "Waiting";
        break;
      case 3:
        int v22 = "Completed";
        break;
      default:
        int v22 = 0;
        break;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v52 = 2080;
    uint64_t v53 = v19;
    __int16 v54 = 2080;
    unsigned int v55 = v22;
    _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start (getAuthorizationHintsWithURL completion handler): Receive SOAuthorizationHints.", buf, 0x20u);
  }
  MEMORY[0x19972EAD0](&v48, [a2 localizedExtensionBundleDisplayName]);
  __int16 v24 = qword_1EB357BC8;
  if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(unsigned __int8 *)(v6 + 48);
    if (*(unsigned char *)(v6 + 48))
    {
      if (v25 == 2)
      {
        __int16 v26 = "SubFrame";
      }
      else if (v25 == 1)
      {
        __int16 v26 = "PopUp";
      }
      else
      {
        __int16 v26 = 0;
      }
    }
    else
    {
      __int16 v26 = "Redirect";
    }
    uint64_t v27 = "Idle";
    switch(*(unsigned char *)(v6 + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v27 = "Active";
        break;
      case 2:
        uint64_t v27 = "Waiting";
        break;
      case 3:
        uint64_t v27 = "Completed";
        break;
      default:
        uint64_t v27 = 0;
        break;
    }
    WTF::String::utf8();
    if (v50) {
      uint64_t v28 = (char *)v50 + 16;
    }
    else {
      uint64_t v28 = 0;
    }
    *(_DWORD *)long long buf = 134218754;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v52 = 2080;
    uint64_t v53 = v26;
    __int16 v54 = 2080;
    unsigned int v55 = v27;
    __int16 v56 = 2080;
    uint64_t v57 = v28;
    _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: (hints=%s)", buf, 0x2Au);
    uint64_t v30 = v50;
    long long v50 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1) {
        WTF::fastFree(v30, v29);
      }
      else {
        --*(_DWORD *)v30;
      }
    }
  }
  uint64_t v31 = *(void *)(v6 + 40);
  if (v31)
  {
    uint64_t v32 = *(void *)(v31 + 8);
    char v33 = qword_1EB357BC8;
    if (v32)
    {
      if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = *(unsigned __int8 *)(v6 + 48);
        if (*(unsigned char *)(v6 + 48))
        {
          if (v34 == 2)
          {
            uint64_t v35 = "SubFrame";
          }
          else if (v34 == 1)
          {
            uint64_t v35 = "PopUp";
          }
          else
          {
            uint64_t v35 = 0;
          }
        }
        else
        {
          uint64_t v35 = "Redirect";
        }
        uint64_t v40 = "Idle";
        switch(*(unsigned char *)(v6 + 16))
        {
          case 0:
            break;
          case 1:
            uint64_t v40 = "Active";
            break;
          case 2:
            uint64_t v40 = "Waiting";
            break;
          case 3:
            uint64_t v40 = "Completed";
            break;
          default:
            uint64_t v40 = 0;
            break;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v6;
        __int16 v52 = 2080;
        uint64_t v53 = v35;
        __int16 v54 = 2080;
        unsigned int v55 = v40;
        _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Checking page for policy choice.", buf, 0x20u);
        uint64_t v41 = *(void *)(v6 + 40);
        if (!v41)
        {
          uint64_t v42 = 0;
LABEL_110:
          int v43 = *(atomic_uchar **)(v6 + 8);
          if (v43) {
            uint64_t v44 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v43);
          }
          else {
            uint64_t v44 = 0;
          }
          CFTypeRef v45 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v45 = &unk_1EE9D1760;
          v45[1] = v44;
          v45[2] = v6;
          *(void *)long long buf = v45;
          (*(void (**)(void))(**(void **)(v42 + 72) + 368))();
          uint64_t v46 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v46) {
            (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
          }
          goto LABEL_114;
        }
        uint64_t v32 = *(void *)(v41 + 8);
      }
      if (v32) {
        uint64_t v42 = v32 - 16;
      }
      else {
        uint64_t v42 = 0;
      }
      goto LABEL_110;
    }
  }
  else
  {
    char v33 = qword_1EB357BC8;
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = *(unsigned __int8 *)(v6 + 48);
    if (*(unsigned char *)(v6 + 48))
    {
      if (v37 == 2)
      {
        uint64_t v38 = "SubFrame";
      }
      else if (v37 == 1)
      {
        uint64_t v38 = "PopUp";
      }
      else
      {
        uint64_t v38 = 0;
      }
    }
    else
    {
      uint64_t v38 = "Redirect";
    }
    uint64_t v39 = "Idle";
    switch(*(unsigned char *)(v6 + 16))
    {
      case 0:
        break;
      case 1:
        uint64_t v39 = "Active";
        break;
      case 2:
        uint64_t v39 = "Waiting";
        break;
      case 3:
        uint64_t v39 = "Completed";
        break;
      default:
        uint64_t v39 = 0;
        break;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v52 = 2080;
    uint64_t v53 = v38;
    __int16 v54 = 2080;
    unsigned int v55 = v39;
    _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Early return due to null m_page", buf, 0x20u);
  }
LABEL_114:
  int v47 = v48;
  __int16 v48 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v36);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  uint64_t v15 = v49;
  if (v49) {
LABEL_119:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v15 + 8));
}

void sub_198D5944C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, a2);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v11 + 8));
  _Unwind_Resume(a1);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EE9D1740[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 16) = v3;
  }
  return a1;
}

void sub_198D595A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = *(unsigned int *)(v12 + 16);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D1730[v14])(&a12, v12);
  }
  *(_DWORD *)(v12 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::continueStartAfterGetAuthorizationHints(WTF::String const&)::$_0,void,WebKit::SOAuthorizationLoadPolicy>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D1760;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::continueStartAfterGetAuthorizationHints(WTF::String const&)::$_0,void,WebKit::SOAuthorizationLoadPolicy>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D1760;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::continueStartAfterGetAuthorizationHints(WTF::String const&)::$_0,void,WebKit::SOAuthorizationLoadPolicy>::call(uint64_t a1, int a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(atomic_uchar **)(a1 + 8);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v50, v3, *(void *)(a1 + 16));
    uint64_t v4 = v50;
    if (v50)
    {
      char v5 = qword_1EB357BC8;
      uint64_t v6 = os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v6)
        {
          int v8 = *(unsigned __int8 *)(v4 + 48);
          if (*(unsigned char *)(v4 + 48))
          {
            if (v8 == 2)
            {
              uint64_t v9 = "SubFrame";
            }
            else if (v8 == 1)
            {
              uint64_t v9 = "PopUp";
            }
            else
            {
              uint64_t v9 = 0;
            }
          }
          else
          {
            uint64_t v9 = "Redirect";
          }
          uint64_t v12 = "Idle";
          switch(*(unsigned char *)(v4 + 16))
          {
            case 0:
              break;
            case 1:
              uint64_t v12 = "Active";
              break;
            case 2:
              uint64_t v12 = "Waiting";
              break;
            case 3:
              uint64_t v12 = "Completed";
              break;
            default:
              uint64_t v12 = 0;
              break;
          }
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = v4;
          __int16 v55 = 2080;
          __int16 v56 = v9;
          __int16 v57 = 2080;
          uint64_t v58 = v12;
          _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterDecidePolicy: Receive SOAuthorizationLoadPolicy::Ignore. Falling back to web path.", buf, 0x20u);
        }
        WebKit::SOAuthorizationSession::fallBackToWebPath((WebKit::SOAuthorizationSession *)v4);
      }
      else
      {
        if (v6)
        {
          int v10 = *(unsigned __int8 *)(v4 + 48);
          if (*(unsigned char *)(v4 + 48))
          {
            if (v10 == 2)
            {
              uint64_t v11 = "SubFrame";
            }
            else if (v10 == 1)
            {
              uint64_t v11 = "PopUp";
            }
            else
            {
              uint64_t v11 = 0;
            }
          }
          else
          {
            uint64_t v11 = "Redirect";
          }
          uint64_t v13 = "Idle";
          switch(*(unsigned char *)(v4 + 16))
          {
            case 0:
              break;
            case 1:
              uint64_t v13 = "Active";
              break;
            case 2:
              uint64_t v13 = "Waiting";
              break;
            case 3:
              uint64_t v13 = "Completed";
              break;
            default:
              uint64_t v13 = 0;
              break;
          }
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = v4;
          __int16 v55 = 2080;
          __int16 v56 = v11;
          __int16 v57 = 2080;
          uint64_t v58 = v13;
          _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterDecidePolicy: Receive SOAuthorizationLoadPolicy::Allow", buf, 0x20u);
        }
        uint64_t v14 = *(void *)(v4 + 24);
        if (v14 && (uint64_t v15 = *(void *)(v4 + 40)) != 0 && *(void *)(v15 + 8) && (v16 = *(void *)(v4 + 32)) != 0)
        {
          BOOL v17 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
          if (*MEMORY[0x1E4F30980]) {
            *(_DWORD *)v17 += 2;
          }
          uint64_t v18 = *(void *)(v16 + 16);
          if (v18)
          {
            WebCore::SecurityOriginData::securityOrigin((uint64_t *)v53, (WebCore::SecurityOriginData *)(v18 + 224));
            WebCore::SecurityOrigin::toString((uint64_t *)buf, v53[0]);
            uint64_t v19 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
              {
                WTF::StringImpl::destroy(v17, v7);
                uint64_t v27 = *(WTF::StringImpl **)buf;
                *(void *)long long buf = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2) {
                    WTF::StringImpl::destroy(v27, v7);
                  }
                  else {
                    *(_DWORD *)v27 -= 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)v17 -= 2;
                *(void *)long long buf = 0;
              }
            }
            uint64_t v6 = (uint64_t)v53[0];
            v53[0] = 0;
            if (v6) {
              uint64_t v6 = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v7);
            }
            BOOL v17 = v19;
          }
          if (*(unsigned char *)(v4 + 48) == 2)
          {
            uint64_t v28 = *(void *)(v4 + 40);
            if (v28)
            {
              uint64_t v29 = *(void *)(v28 + 8);
              uint64_t v30 = v29 ? v29 - 16 : 0;
              uint64_t v31 = *(void *)(v30 + 328);
              if (v31)
              {
                WebCore::SecurityOrigin::create((uint64_t *)v53, (WebCore::SecurityOrigin *)(v31 + 48), v7);
                WebCore::SecurityOrigin::toString((uint64_t *)buf, v53[0]);
                char v33 = *(WTF::StringImpl **)buf;
                *(void *)long long buf = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                  {
                    WTF::StringImpl::destroy(v17, v32);
                    int v34 = *(WTF::StringImpl **)buf;
                    *(void *)long long buf = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2) {
                        WTF::StringImpl::destroy(v34, v32);
                      }
                      else {
                        *(_DWORD *)v34 -= 2;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)v17 -= 2;
                    *(void *)long long buf = 0;
                  }
                }
                uint64_t v6 = (uint64_t)v53[0];
                v53[0] = 0;
                if (v6) {
                  uint64_t v6 = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v32);
                }
                BOOL v17 = v33;
              }
            }
          }
          v52[0] = PAL::get_AppSSO_SOAuthorizationOptionUserActionInitiated((PAL *)v6);
          if (*(void *)(*(void *)(v4 + 32) + 288)) {
            uint64_t v35 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
          }
          else {
            uint64_t v35 = 0;
          }
          v53[0] = (PAL *)[NSNumber numberWithBool:v35 != 0];
          v52[1] = PAL::get_AppSSO_SOAuthorizationOptionInitiatorOrigin(v53[0]);
          if (v17) {
            int v36 = (PAL *)WTF::StringImpl::operator NSString *();
          }
          else {
            int v36 = (PAL *)&stru_1EEA10550;
          }
          v53[1] = v36;
          v52[2] = PAL::get_AppSSO_SOAuthorizationOptionInitiatingAction(v36);
          v53[2] = (PAL *)[NSNumber numberWithInteger:*(unsigned __int8 *)(v4 + 48)];
          int v37 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v53 forKeys:v52 count:3];
          uint64_t v38 = *(void *)(v4 + 40);
          if (v38)
          {
            uint64_t v39 = *(void *)(v38 + 8);
            if (v39) {
              uint64_t v40 = (WebKit::WebPageProxy *)(v39 - 16);
            }
            else {
              uint64_t v40 = 0;
            }
          }
          else
          {
            uint64_t v40 = 0;
          }
          WebKit::WebPageProxy::cocoaView(v40, &v51);
          id v41 = v51;
          uint64_t v42 = (void *)[v51 UIDelegate];
          if (objc_opt_respondsToSelector())
          {
            uint64_t v43 = [v42 _hostSceneIdentifierForWebView:v41];
            if (v43)
            {
              int v37 = (void *)[v37 mutableCopy];
              [v37 setObject:v43 forKeyedSubscript:@"callerSceneIdentifier"];
            }
          }
          [*(id *)(v4 + 24) setAuthorizationOptions:v37];
          uint64_t v44 = (void *)WebCore::ResourceRequest::nsURLRequest();
          CFTypeRef v45 = qword_1EB357BC8;
          if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
          {
            int v46 = *(unsigned __int8 *)(v4 + 48);
            if (*(unsigned char *)(v4 + 48))
            {
              if (v46 == 2)
              {
                int v47 = "SubFrame";
              }
              else if (v46 == 1)
              {
                int v47 = "PopUp";
              }
              else
              {
                int v47 = 0;
              }
            }
            else
            {
              int v47 = "Redirect";
            }
            __int16 v48 = "Idle";
            switch(*(unsigned char *)(v4 + 16))
            {
              case 0:
                break;
              case 1:
                __int16 v48 = "Active";
                break;
              case 2:
                __int16 v48 = "Waiting";
                break;
              case 3:
                __int16 v48 = "Completed";
                break;
              default:
                __int16 v48 = 0;
                break;
            }
            *(_DWORD *)long long buf = 134218498;
            *(void *)&uint8_t buf[4] = v4;
            __int16 v55 = 2080;
            __int16 v56 = v47;
            __int16 v57 = 2080;
            uint64_t v58 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Beginning authorization with AppSSO.", buf, 0x20u);
          }
          objc_msgSend(*(id *)(v4 + 24), "beginAuthorizationWithURL:httpHeaders:httpBody:", objc_msgSend(v44, "URL"), objc_msgSend(v44, "allHTTPHeaderFields"), objc_msgSend(v44, "HTTPBody"));
          if (v41) {
            CFRelease(v41);
          }
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v49);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        else
        {
          int v20 = qword_1EB357BC8;
          if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
          {
            int v21 = *(unsigned __int8 *)(v4 + 48);
            if (*(unsigned char *)(v4 + 48))
            {
              if (v21 == 2)
              {
                int v22 = "SubFrame";
              }
              else if (v21 == 1)
              {
                int v22 = "PopUp";
              }
              else
              {
                int v22 = 0;
              }
            }
            else
            {
              int v22 = "Redirect";
            }
            long long v23 = "Idle";
            switch(*(unsigned char *)(v4 + 16))
            {
              case 0:
                break;
              case 1:
                long long v23 = "Active";
                break;
              case 2:
                long long v23 = "Waiting";
                break;
              case 3:
                long long v23 = "Completed";
                break;
              default:
                long long v23 = 0;
                break;
            }
            uint64_t v24 = *(void *)(v4 + 40);
            if (v24)
            {
              uint64_t v25 = *(void *)(v24 + 8);
              if (v25) {
                uint64_t v24 = v25 - 16;
              }
              else {
                uint64_t v24 = 0;
              }
            }
            uint64_t v26 = *(void *)(v4 + 32);
            *(_DWORD *)long long buf = 134219266;
            *(void *)&uint8_t buf[4] = v4;
            __int16 v55 = 2080;
            __int16 v56 = v22;
            __int16 v57 = 2080;
            uint64_t v58 = v23;
            __int16 v59 = 1024;
            BOOL v60 = v14 != 0;
            __int16 v61 = 2048;
            uint64_t v62 = v24;
            __int16 v63 = 2048;
            uint64_t v64 = v26;
            _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Early return m_soAuthorization=%d, m_page=%p, navigationAction=%p.", buf, 0x3Au);
          }
        }
      }
      if (v50) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v50 + 8));
      }
    }
  }
}

void sub_198D59E84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a14, a2);
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::complete(NSHTTPURLResponse *,NSData *)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D1788;
  uint64_t v3 = (const void *)a1[36];
  a1[36] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[34];
  a1[34] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 4), a2);
  uint64_t v6 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::complete(NSHTTPURLResponse *,NSData *)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D1788;
  uint64_t v3 = (const void *)a1[36];
  a1[36] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[34];
  a1[34] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 4), a2);
  uint64_t v6 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::complete(NSHTTPURLResponse *,NSData *)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (atomic_uchar *)*((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (unsigned char *)*((void *)result + 1);
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v9, v1, *((void *)result + 3));
    uint64_t v4 = v9;
    if (v9)
    {
      char v5 = qword_1EB357BC8;
      if (os_log_type_enabled((os_log_t)qword_1EB357BC8, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = v3[48];
        if (v3[48])
        {
          if (v6 == 2)
          {
            uint64_t v7 = "SubFrame";
          }
          else if (v6 == 1)
          {
            uint64_t v7 = "PopUp";
          }
          else
          {
            uint64_t v7 = 0;
          }
        }
        else
        {
          uint64_t v7 = "Redirect";
        }
        int v8 = "Idle";
        switch(v3[16])
        {
          case 0:
            break;
          case 1:
            int v8 = "Active";
            break;
          case 2:
            int v8 = "Waiting";
            break;
          case 3:
            int v8 = "Completed";
            break;
          default:
            int v8 = 0;
            break;
        }
        *(_DWORD *)long long buf = 134218498;
        uint64_t v11 = v3;
        __int16 v12 = 2080;
        uint64_t v13 = v7;
        __int16 v14 = 2080;
        uint64_t v15 = v8;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::complete: Cookies are set.", buf, 0x20u);
      }
      (*(void (**)(unsigned char *, atomic_uchar *, void))(*(void *)v3 + 40))(v3, v2 + 32, *((void *)v2 + 36));
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v4 + 8));
    }
  }
  return result;
}

void sub_198D5A218(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(atomic_uchar **)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    char v5 = result;
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 14);
      if (v6 != -1) {
        ((void (*)(char *, char *))off_1EE9D1730[v6])(&v7, (char *)v5 + 40);
      }
      *((_DWORD *)v5 + 14) = -1;
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)char v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      char v5 = (WTF::StringImpl *)((char *)v5 + 64);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  WTF::URL::URL(a1, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v4 + 40, (uint64_t)(a2 + 5));
  return a1;
}

void sub_198D5A318(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  atomic_uchar *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    char v7 = result;
    do
    {
      std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100](a3, (uint64_t *)v7);
      uint64_t v9 = *((unsigned int *)v7 + 14);
      if (v9 != -1) {
        ((void (*)(char *, char *))off_1EE9D1730[v9])(&v10, (char *)v7 + 40);
      }
      *((_DWORD *)v7 + 14) = -1;
      uint64_t result = *(WTF::StringImpl **)v7;
      *(void *)char v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 64;
      char v7 = (WTF::StringImpl *)((char *)v7 + 64);
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WebKit::WebKeyboardEvent::WebKeyboardEvent(uint64_t result, uint64_t a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, _DWORD **a7, int a8, int a9, int a10, char a11, char a12, char a13, char a14)
{
  *(_DWORD *)uint64_t result = 0;
  long long v14 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(result + 4) = v14;
  uint64_t v15 = *a3;
  if (*a3) {
    *v15 += 2;
  }
  *(void *)(result + 32) = v15;
  uint64_t v16 = *a4;
  if (*a4) {
    *v16 += 2;
  }
  *(void *)(result + 40) = v16;
  BOOL v17 = *a5;
  if (*a5) {
    *v17 += 2;
  }
  *(void *)(result + 48) = v17;
  uint64_t v18 = *a6;
  if (*a6) {
    *v18 += 2;
  }
  *(void *)(result + 56) = v18;
  uint64_t v19 = *a7;
  if (*a7) {
    *v19 += 2;
  }
  *(void *)(result + 64) = v19;
  *(_DWORD *)(result + 72) = a8;
  *(_DWORD *)(result + 76) = a9;
  *(_DWORD *)(result + 80) = a10;
  *(unsigned char *)(result + 84) = a11;
  *(unsigned char *)(result + 85) = a12;
  *(unsigned char *)(result + 86) = a13;
  *(unsigned char *)(result + 87) = a14;
  return result;
}

void WebKit::WebKeyboardEvent::~WebKeyboardEvent(WebKit::WebKeyboardEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebKit::WebMemorySampler::singleton(WebKit::WebMemorySampler *this)
{
  uint64_t result = WebKit::WebMemorySampler::singleton(void)::sharedMemorySampler;
  if (!WebKit::WebMemorySampler::singleton(void)::sharedMemorySampler) {
    operator new();
  }
  return result;
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::WebMemorySampler(WebKit::WebMemorySampler *this)
{
  *(_DWORD *)this = -1;
  *((void *)this + 1) = 0;
  WebCore::Timer::Timer<WebKit::WebMemorySampler,WebKit::WebMemorySampler>((WebKit::WebMemorySampler *)((char *)this + 16), (uint64_t)this, (uint64_t)WebKit::WebMemorySampler::sampleTimerFired, 0);
  WebCore::Timer::Timer<WebKit::WebMemorySampler,WebKit::WebMemorySampler>((WebKit::WebMemorySampler *)((char *)this + 72), (uint64_t)this, (uint64_t)WebKit::WebMemorySampler::stopTimerFired, 0);
  *((unsigned char *)this + 128) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  return this;
}

WTF::StringImpl *WebKit::WebMemorySampler::sampleTimerFired(WebKit::WebMemorySampler *this)
{
  v53[4] = *(WTF **)MEMORY[0x1E4F143B8];
  notify_post("org.WebKit.lowMemory");
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  unsigned int v51 = 0;
  char v52 = 1;
  WebKit::WebMemorySampler::sampleWebKit(this, (uint64_t)&v44);
  if (v48)
  {
    LOBYTE(v53[0]) = 9;
    WTF::StringBuilder::append();
    if (v48)
    {
      for (unint64_t i = 0; i < v48; ++i)
      {
        if (i >= v45) {
          goto LABEL_98;
        }
        uint64_t v3 = *(void *)(v44 + 8 * i);
        if (v3)
        {
          unsigned int v4 = *(_DWORD *)(v3 + 4);
          int v5 = v4 >= 0xFFFFFFFE ? -1 : v4 + 2;
        }
        else
        {
          int v5 = 2;
        }
        BOOL v6 = __CFADD__(v5, v51);
        unsigned int v7 = v5 + v51;
        uint64_t v8 = v6 ? 0xFFFFFFFFLL : v7;
        if (((uint64_t v9 = v50) != 0 || (uint64_t v9 = v49) != 0) && (*((unsigned char *)v9 + 16) & 4) == 0
          || v3 && (*(unsigned char *)(v3 + 16) & 4) == 0)
        {
          uint64_t v10 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v49);
          if (v10)
          {
            *(_DWORD *)uint64_t v10 = 589834;
            v53[0] = (WTF *)v3;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v53, (char *)(v10 + 4));
          }
        }
        else
        {
          uint64_t v11 = MEMORY[0x19972DE60](&v49, v8);
          if (v11)
          {
            *(_WORD *)uint64_t v11 = 2314;
            v53[0] = (WTF *)v3;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v53, (char *)(v11 + 2));
          }
        }
        if (i >= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x198D5AB44);
        }
        uint64_t v12 = *(void *)(v44 + 8 * i);
        if (v12) {
          LODWORD(v12) = *(_DWORD *)(v12 + 4);
        }
        if (35 - (int)v12 >= 1)
        {
          int v13 = v12 - 35;
          do
          {
            LOBYTE(v53[0]) = 32;
            if (v50 && ((v14 = v51, v51 < *((_DWORD *)v50 + 1)) ? (BOOL v15 = v49 == 0) : (BOOL v15 = 0), v15))
            {
              int v16 = *((_DWORD *)v50 + 4);
              uint64_t v17 = *((void *)v50 + 1);
              ++v51;
              if ((v16 & 4) != 0) {
                *(unsigned char *)(v17 + v14) = 32;
              }
              else {
                *(_WORD *)(v17 + 2 * v14) = 32;
              }
            }
            else
            {
              WTF::StringBuilder::append();
            }
            BOOL v6 = __CFADD__(v13++, 1);
          }
          while (!v6);
        }
        if (i >= v48)
        {
LABEL_98:
          __break(0xC471u);
          JUMPOUT(0x198D5AB3CLL);
        }
        unint64_t v18 = *((void *)v46 + i);
        unsigned int v19 = v51;
        unint64_t v20 = v18;
        do
        {
          int v21 = v19++;
          BOOL v22 = v20 > 9;
          v20 /= 0xAuLL;
        }
        while (v22);
        if (v19 >= v51) {
          uint64_t v23 = (v21 + 1);
        }
        else {
          uint64_t v23 = 0xFFFFFFFFLL;
        }
        uint64_t v24 = v50;
        if ((v50 || (uint64_t v24 = v49) != 0) && (*((unsigned char *)v24 + 16) & 4) == 0)
        {
          uint64_t v25 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v49);
          if (v25)
          {
            uint64_t v26 = -1;
            uint64_t v27 = 24;
            do
            {
              uint64_t v28 = v26;
              *((unsigned char *)v53 + v27--) = (v18 % 0xA) | 0x30;
              --v26;
              BOOL v22 = v18 > 9;
              v18 /= 0xAuLL;
            }
            while (v22);
            if (v27 + 2 <= 25)
            {
              do
              {
                *v25++ = *((unsigned __int8 *)&v53[3] + v28 + 1);
                BOOL v6 = __CFADD__(v28++, 1);
              }
              while (!v6);
            }
          }
        }
        else
        {
          uint64_t v29 = (void *)MEMORY[0x19972DE60](&v49, v23);
          if (v29)
          {
            uint64_t v30 = 0;
            do
            {
              *((unsigned char *)&v53[3] + v30--) = (v18 % 0xA) | 0x30;
              BOOL v22 = v18 > 9;
              v18 /= 0xAuLL;
            }
            while (v22);
            if (v30 + 26 <= 25) {
              memcpy(v29, (char *)&v53[3] + v30 + 1, -v30);
            }
          }
        }
      }
    }
  }
  LOBYTE(v53[0]) = 10;
  if (v50 && ((uint64_t v31 = v51, v51 < *((_DWORD *)v50 + 1)) ? (v32 = v49 == 0) : (v32 = 0), v32))
  {
    int v33 = *((_DWORD *)v50 + 4);
    uint64_t v34 = *((void *)v50 + 1);
    ++v51;
    if ((v33 & 4) != 0) {
      *(unsigned char *)(v34 + v31) = 10;
    }
    else {
      *(_WORD *)(v34 + 2 * v31) = 10;
    }
  }
  else
  {
    WTF::StringBuilder::append();
  }
  uint64_t v35 = v49;
  if (v49
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v49),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v49),
        (uint64_t v35 = v49) != 0))
  {
    *(_DWORD *)v35 += 2;
  }
  uint64_t v43 = v35;
  WTF::String::utf8();
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v36);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  WTF::FileSystemImpl::writeToFile();
  uint64_t v38 = v53[0];
  v53[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1) {
      WTF::fastFree(v38, v37);
    }
    else {
      --*(_DWORD *)v38;
    }
  }
  uint64_t v39 = v46;
  if (v46)
  {
    int v46 = 0;
    int v47 = 0;
    WTF::fastFree(v39, v37);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v37);
  id v41 = v50;
  uint64_t v50 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v40);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t result = v49;
  uint64_t v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

const char ***WebKit::WebMemorySampler::stopTimerFired(const char ***this)
{
  if (*((unsigned char *)this + 128))
  {
    uint64_t v1 = this;
    printf("%g seconds elapsed. Stopping memory sampler...\n", *((double *)this + 17));
    return WebKit::WebMemorySampler::stop(v1, v2);
  }
  return this;
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::start(WebKit::WebMemorySampler *this, double a2)
{
  if (!*((unsigned char *)this + 128))
  {
    uint64_t v3 = this;
    WebKit::WebMemorySampler::initializeTempLogFile(this);
    return (WebKit::WebMemorySampler *)WebKit::WebMemorySampler::initializeTimers(v3, a2);
  }
  return this;
}

WTF::StringImpl *WebKit::WebMemorySampler::initializeTempLogFile(WebKit::WebMemorySampler *this)
{
  WebKit::WebMemorySampler::processName(this);
  WTF::FileSystemImpl::openTemporaryFile();
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WTF::String::operator=((uint64_t *)this + 1, &v6);
  *(_DWORD *)this = v7;
  WebKit::WebMemorySampler::writeHeaders(this);
  uint64_t result = v6;
  BOOL v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebMemorySampler::initializeTimers(WebKit::WebMemorySampler *this, double a2)
{
  WebCore::TimerBase::start();
  WebKit::WebMemorySampler::processName(this);
  WTF::String::utf8();
  if (v9) {
    unsigned int v4 = (char *)v9 + 16;
  }
  else {
    unsigned int v4 = 0;
  }
  pid_t v5 = getpid();
  printf("Started memory sampler for process %s %d", v4, v5);
  if (v9)
  {
    if (*(_DWORD *)v9 == 1) {
      WTF::fastFree(v9, v6);
    }
    else {
      --*(_DWORD *)v9;
    }
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (a2 > 0.0)
  {
    WebCore::TimerBase::start();
    printf(" for a interval of %g seconds", a2);
  }
  WTF::String::utf8();
  printf("; Sampler log file stored at: %s\n", 0);
  uint64_t result = 0;
  *((double *)this + 17) = a2;
  *((unsigned char *)this + 128) = 1;
  return result;
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::start(WebKit::WebMemorySampler *this, uint64_t *a2, WTF::StringImpl **a3, double a4)
{
  if (!*((unsigned char *)this + 128))
  {
    pid_t v5 = this;
    if (*a3 && *((_DWORD *)*a3 + 1))
    {
      WebKit::WebMemorySampler::initializeSandboxedLogFile((uint64_t *)this, a2, a3);
      return (WebKit::WebMemorySampler *)WebKit::WebMemorySampler::initializeTimers(v5, a4);
    }
    else
    {
      return WebKit::WebMemorySampler::start(this, a4);
    }
  }
  return this;
}

uint64_t WebKit::WebMemorySampler::initializeSandboxedLogFile(uint64_t *a1, uint64_t *a2, WTF::StringImpl **a3)
{
  if (*a2)
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v6 = 1;
    uint64_t v7 = *a2;
    *a2 = 0;
    *(void *)(v6 + 8) = v7;
    *(void *)(v6 + 16) = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = (const char ***)a1[18];
  a1[18] = v6;
  if (v8)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v8);
    uint64_t v6 = a1[18];
  }
  if (v6)
  {
    uint64_t v9 = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = v9 + 1;
    if (!v9) {
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v6 + 8));
    }
  }
  WTF::String::operator=(a1 + 1, a3);
  *(_DWORD *)a1 = WTF::FileSystemImpl::openFile();

  return WebKit::WebMemorySampler::writeHeaders((WebKit::WebMemorySampler *)a1);
}

const char ***WebKit::WebMemorySampler::stop(const char ***this, int *a2)
{
  if (*((unsigned char *)this + 128))
  {
    uint64_t v2 = this;
    if (((unint64_t)this[6] & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 2));
    }
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)v2, a2);
    WebKit::WebMemorySampler::processName((WebKit::WebMemorySampler *)v2);
    WTF::String::utf8();
    if (v8) {
      uint64_t v3 = (char *)v8 + 16;
    }
    else {
      uint64_t v3 = 0;
    }
    pid_t v4 = getpid();
    printf("Stopped memory sampler for process %s %d\n", v3, v4);
    if (v8)
    {
      if (*(_DWORD *)v8 == 1) {
        WTF::fastFree(v8, v5);
      }
      else {
        --*(_DWORD *)v8;
      }
    }
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    fflush((FILE *)*MEMORY[0x1E4F143D8]);
    *((unsigned char *)v2 + 128) = 0;
    if (((unint64_t)v2[13] & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)(((unint64_t)v2[13] & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 9));
    }
    this = (const char ***)v2[18];
    if (this)
    {
      uint64_t v6 = (uint64_t)this[2] - 1;
      this[2] = (const char **)v6;
      if (v6)
      {
        v2[18] = 0;
      }
      else
      {
        this[1][1] = 0;
        sandbox_extension_release();
        this = (const char ***)v2[18];
        v2[18] = 0;
        if (!this) {
          return this;
        }
      }
      return WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
    }
  }
  return this;
}

uint64_t WebKit::WebMemorySampler::writeHeaders(WebKit::WebMemorySampler *this)
{
  WebKit::WebMemorySampler::processName(this);
  uint64_t result = getpid();
  uint64_t v2 = result;
  if (v34)
  {
    int v3 = *((_DWORD *)v34 + 1);
    if ((result & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v7 = -(int)result;
    int v4 = 1;
    do
    {
      ++v4;
      BOOL v8 = v7 >= 0xA;
      v7 /= 0xAu;
    }
    while (v8);
    goto LABEL_9;
  }
  int v3 = 0;
  if ((result & 0x80000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  int v4 = 0;
  unsigned int v5 = result;
  do
  {
    ++v4;
    BOOL v6 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v6);
LABEL_9:
  if (v4 < 0) {
    goto LABEL_62;
  }
  BOOL v9 = __OFADD__(v4, 1);
  int v10 = v4 + 1;
  if (v9) {
    goto LABEL_62;
  }
  BOOL v9 = __OFADD__(v10, 6);
  int v11 = v10 + 6;
  BOOL v12 = v9;
  if (v3 < 0) {
    goto LABEL_62;
  }
  if (v12) {
    goto LABEL_62;
  }
  BOOL v9 = __OFADD__(v3, v11);
  int v13 = v3 + v11;
  if (v9) {
    goto LABEL_62;
  }
  uint64_t v14 = (v13 + 9);
  if (__OFADD__(v13, 9)) {
    goto LABEL_62;
  }
  if (!v34 || (*((unsigned char *)v34 + 16) & 4) != 0)
  {
    if (v13 != -9)
    {
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
        BOOL v15 = v36;
        if (v36)
        {
          *(_DWORD *)int v36 = 2;
          *((_DWORD *)v15 + 1) = v14;
          *(void *)((char *)v15 + 20) = *(void *)"Process: ";
          *((void *)v15 + 1) = (char *)v15 + 20;
          *((_DWORD *)v15 + 4) = 4;
          *((unsigned char *)v15 + 28) = 32;
          int v36 = v34;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v36, (char *)v15 + 29);
          uint64_t v25 = v36;
          if (v36) {
            uint64_t v25 = (WTF *)*((unsigned int *)v36 + 1);
          }
          uint64_t v26 = (char *)v25 + (void)v15 + 29;
          *((_WORD *)v26 + 2) = 8250;
          *(_DWORD *)uint64_t v26 = 1684623392;
          uint64_t v27 = v26 + 6;
          WTF::writeIntegerToBuffer<unsigned char,int>(v2, v26 + 6);
          if ((v2 & 0x80000000) != 0)
          {
            unsigned int v29 = -(int)v2;
            unsigned int v28 = 1;
            do
            {
              ++v28;
              BOOL v8 = v29 >= 0xA;
              v29 /= 0xAu;
            }
            while (v8);
          }
          else
          {
            unsigned int v28 = 0;
            do
            {
              ++v28;
              BOOL v6 = v2 > 9;
              LODWORD(v2) = v2 / 0xA;
            }
            while (v6);
          }
          v27[v28] = 10;
          goto LABEL_49;
        }
      }
      goto LABEL_62;
    }
  }
  else if (v13 != -9)
  {
    if (v14 <= 0x7FFFFFEF)
    {
      uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * v14 + 20));
      BOOL v15 = v36;
      if (v36)
      {
        *(_DWORD *)int v36 = 2;
        *((_DWORD *)v15 + 1) = v14;
        *((void *)v15 + 1) = (char *)v15 + 20;
        *((_DWORD *)v15 + 4) = 0;
        int v16 = "Process: ";
        for (uint64_t i = 20; i != 38; i += 2)
        {
          __int16 v18 = *(unsigned __int8 *)v16++;
          *(_WORD *)((char *)v15 + i) = v18;
        }
        int v36 = v34;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v36, (char *)v15 + 38);
        unsigned int v19 = v36;
        if (v36) {
          unsigned int v19 = (WTF *)*((unsigned int *)v36 + 1);
        }
        uint64_t v20 = 0;
        uint64_t v21 = (uint64_t)v15 + 2 * (void)v19 + 38;
        do
        {
          *(_WORD *)(v21 + 2 * v20) = aPid[v20];
          ++v20;
        }
        while (v20 != 6);
        uint64_t v22 = v21 + 12;
        LODWORD(v35) = v2;
        WTF::StringTypeAdapter<int,void>::writeTo<char16_t>((unsigned int *)&v35, (_WORD *)(v21 + 12));
        unsigned int v23 = v35;
        if ((v35 & 0x80000000) != 0)
        {
          unsigned int v30 = -(int)v35;
          unsigned int v24 = 1;
          do
          {
            ++v24;
            BOOL v8 = v30 >= 0xA;
            v30 /= 0xAu;
          }
          while (v8);
        }
        else
        {
          unsigned int v24 = 0;
          do
          {
            ++v24;
            BOOL v6 = v23 > 9;
            v23 /= 0xAu;
          }
          while (v6);
        }
        *(_WORD *)(v22 + 2 * v24) = 10;
        goto LABEL_49;
      }
    }
LABEL_62:
    __break(0xC471u);
    return result;
  }
  BOOL v15 = (WTF *)MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
LABEL_49:
  uint64_t v35 = v15;
  WTF::String::utf8();
  BOOL v32 = v35;
  uint64_t v35 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v31);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v31);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  WTF::FileSystemImpl::writeToFile();
  uint64_t result = (uint64_t)v36;
  int v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return WTF::fastFree((WTF *)result, v33);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebKit::WebMouseEvent::WebMouseEvent(uint64_t a1, uint64_t a2, char a3, __int16 a4, void *a5, void *a6, int a7, char a8, float a9, float a10, float a11, double a12, int a13, _DWORD **a14, char a15, void *a16, uint64_t *a17, uint64_t *a18)
{
  *(_DWORD *)a1 = 0;
  long long v19 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4) = v19;
  *(unsigned char *)(a1 + 32) = a3;
  *(_WORD *)(a1 + 34) = a4;
  *(void *)(a1 + 36) = *a5;
  *(void *)(a1 + 44) = *a6;
  *(float *)(a1 + 52) = a9;
  *(float *)(a1 + 56) = a10;
  *(float *)(a1 + 60) = a11;
  *(void *)(a1 + 64) = *a16;
  *(_DWORD *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a12;
  *(unsigned char *)(a1 + 88) = a8;
  *(_DWORD *)(a1 + 92) = a13;
  uint64_t v20 = *a14;
  if (*a14) {
    *v20 += 2;
  }
  *(void *)(a1 + 96) = v20;
  *(unsigned char *)(a1 + 104) = a15;
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 112, a17);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 128, a18);
  return a1;
}

uint64_t WebKit::mouseButton(unsigned char *a1)
{
  if (!a1[476] || (a1[474] ? (BOOL v3 = a1[448] == 0) : (BOOL v3 = 1), v3))
  {
    LOBYTE(v1) = -2;
  }
  else
  {
    unint64_t v1 = 0x2010000uLL >> (8 * (a1[472] + 1));
    if ((a1[472] + 1) > 4u) {
      LOBYTE(v1) = -2;
    }
  }
  return (char)v1;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::WebMemorySampler,WebKit::WebMemorySampler>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  BOOL v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *BOOL v8 = &unk_1EE9D17B0;
  v8[1] = a3;
  void v8[2] = a4;
  v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebMemorySampler::*&)(void),WebKit::WebMemorySampler*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  BOOL v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_198D5B8FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D5BB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void layerPathWithHole(CAShapeLayer *a1, const WebCore::FloatQuad *a2, const WebCore::FloatQuad *this)
{
  BOOL v6 = *(float *)a2 == *(float *)this && *((float *)a2 + 1) == *((float *)this + 1);
  if (v6
    && (*((float *)a2 + 2) == *((float *)this + 2) ? (BOOL v7 = *((float *)a2 + 3) == *((float *)this + 3)) : (BOOL v7 = 0),
        v7
     && (*((float *)a2 + 4) == *((float *)this + 4) ? (BOOL v8 = *((float *)a2 + 5) == *((float *)this + 5)) : (BOOL v8 = 0),
         v8
      && (*((float *)a2 + 6) == *((float *)this + 6) ? (BOOL v9 = *((float *)a2 + 7) == *((float *)this + 7)) : (BOOL v9 = 0), v9)))
    || WebCore::FloatQuad::containsQuad(this, a2))
  {
    [(CAShapeLayer *)a1 setPath:0];
  }
  else
  {
    if (WebCore::FloatQuad::containsQuad(a2, this))
    {
      float v10 = *(float *)this;
      float v11 = *((float *)this + 1);
      float v12 = *((float *)this + 2);
      float v13 = *((float *)this + 3);
      float v14 = *((float *)this + 4);
      float v15 = *((float *)this + 5);
      float v16 = *((float *)this + 6);
      float v17 = *((float *)this + 7);
    }
    else
    {
      long long v18 = *((_OWORD *)a2 + 1);
      long long v36 = *(_OWORD *)a2;
      long long v37 = v18;
      long long v19 = *((_OWORD *)this + 1);
      long long v34 = *(_OWORD *)this;
      long long v35 = v19;
      uint64_t v40 = 0;
      *(void *)id v41 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      int v21 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)&v34);
      int v33 = a1;
      if (v21
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)((char *)&v35 + 8), (WebCore::FloatPoint *)v41, v20) & 1) == 0)
      {
        int v22 = 0;
        *(void *)id v41 = v34;
      }
      else
      {
        int v22 = 1;
      }
      int v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)((char *)&v34 + 8));
      if (v24
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)((char *)&v34 + 8), (const WebCore::FloatPoint *)&v35, (WebCore::FloatPoint *)&v40, v23) & 1) == 0)
      {
        int v25 = 0;
        uint64_t v40 = *((void *)&v34 + 1);
      }
      else
      {
        int v25 = 1;
      }
      int v27 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)&v35);
      if (v27
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)((char *)&v34 + 8), (const WebCore::FloatPoint *)&v35, (WebCore::FloatPoint *)&v39, v26) & 1) == 0)
      {
        int v28 = 0;
        uint64_t v39 = v35;
      }
      else
      {
        int v28 = 1;
      }
      int v30 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)((char *)&v35 + 8));
      if (v30
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)((char *)&v35 + 8), (WebCore::FloatPoint *)&v38, v29) & 1) == 0)
      {
        int v31 = 0;
        uint64_t v38 = *((void *)&v35 + 1);
      }
      else
      {
        int v31 = 1;
      }
      if ((v22 | v21 | v25 ^ 1))
      {
        if (((v24 | v22 ^ 1 | v25) & 1) == 0)
        {
          uint64_t v40 = *((void *)&v36 + 1);
          int v24 = 1;
        }
      }
      else
      {
        *(void *)id v41 = v36;
        int v21 = 1;
      }
      if ((v30 | v28 ^ 1 | v31))
      {
        if (((v28 | v31 ^ 1 | v27) & 1) == 0)
        {
          uint64_t v39 = v37;
          int v27 = 1;
        }
      }
      else
      {
        uint64_t v38 = *((void *)&v37 + 1);
        int v30 = 1;
      }
      if (((v25 | v24) & 1) == 0) {
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)v41, (const WebCore::FloatPoint *)&v40, (WebCore::FloatPoint *)&v40, v29);
      }
      if (((v28 | v27) & 1) == 0) {
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)&v38, (const WebCore::FloatPoint *)&v39, (WebCore::FloatPoint *)&v39, v29);
      }
      if (((v22 | v21) & 1) == 0) {
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)v41, (const WebCore::FloatPoint *)&v40, (WebCore::FloatPoint *)v41, v29);
      }
      if (((v31 | v30) & 1) == 0) {
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)&v38, (const WebCore::FloatPoint *)&v39, (WebCore::FloatPoint *)&v38, v29);
      }
      float v11 = v41[1];
      float v10 = v41[0];
      float v13 = *((float *)&v40 + 1);
      float v12 = *(float *)&v40;
      float v15 = *((float *)&v39 + 1);
      float v14 = *(float *)&v39;
      float v17 = *((float *)&v38 + 1);
      float v16 = *(float *)&v38;
      a1 = v33;
    }
    Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, v10, v11);
    CGPathAddLineToPoint(Mutable, 0, v12, v13);
    CGPathAddLineToPoint(Mutable, 0, v14, v15);
    CGPathAddLineToPoint(Mutable, 0, v16, v17);
    CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
    CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
    CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
    CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
    [(CAShapeLayer *)a1 setPath:Mutable];
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void sub_198D5BFE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void layerPath(CAShapeLayer *a1, const WebCore::FloatQuad *a2)
{
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
  CGPathCloseSubpath(Mutable);
  [(CAShapeLayer *)a1 setPath:Mutable];
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void sub_198D5C0C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D5C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D5C440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_198D5CBB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  long long v18 = *v14;
  if (*v14)
  {
    v10[6] = 0;
    *((_DWORD *)v10 + 14) = 0;
    WTF::fastFree(v18, v17);
  }
  uint64_t v19 = *v13;
  if ((*v13 & 0x8000000000000) != 0)
  {
    int v28 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v17);
    }
  }
  uint64_t v20 = *a10;
  if ((*a10 & 0x8000000000000) != 0)
  {
    int v27 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v17);
    }
  }
  uint64_t v21 = *v11;
  if ((*v11 & 0x8000000000000) != 0)
  {
    uint64_t v26 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v17);
    }
  }
  uint64_t v22 = *v12;
  if ((*v12 & 0x8000000000000) != 0)
  {
    int v25 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v17);
    }
  }
  uint64_t v23 = *v10;
  if ((*v10 & 0x8000000000000) != 0)
  {
    int v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t findIntersectionOnLineBetweenPoints(const WebCore::FloatPoint *a1, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  uint64_t v19 = 0;
  int Intersection = WebCore::findIntersection(a1, a2, a3, a4, (const WebCore::FloatPoint *)&v19, a6);
  uint64_t result = 0;
  if (Intersection)
  {
    float v11 = *(float *)a1;
    float v12 = *(float *)a2;
    if (*(float *)a1 >= *(float *)a2)
    {
      if (*(float *)&v19 <= v11 && *(float *)&v19 >= v12)
      {
LABEL_13:
        float v15 = *((float *)a1 + 1);
        float v16 = *((float *)a2 + 1);
        if (v15 >= v16)
        {
          if (*((float *)&v19 + 1) <= v15 && *((float *)&v19 + 1) >= v16) {
            goto LABEL_18;
          }
        }
        else if (*((float *)&v19 + 1) <= v16 && *((float *)&v19 + 1) >= v15)
        {
LABEL_18:
          *(void *)a5 = v19;
          return 1;
        }
      }
    }
    else if (*(float *)&v19 <= v12 && *(float *)&v19 >= v11)
    {
      goto LABEL_13;
    }
    return 0;
  }
  return result;
}

WebCore::InspectorOverlayHighlight::GridHighlightOverlay *WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(WebCore::InspectorOverlayHighlight::GridHighlightOverlay *this, const Color *a2)
{
  uint64_t v4 = WebCore::Color::Color(this, a2);
  uint64_t m_colorAndFlags_high = HIDWORD(a2[2].m_colorAndFlags);
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = m_colorAndFlags_high;
  if (m_colorAndFlags_high)
  {
    if (m_colorAndFlags_high >= 0xCCCCCCD) {
      goto LABEL_14;
    }
    unsigned int v6 = 20 * m_colorAndFlags_high;
    uint64_t v7 = WTF::fastMalloc((WTF *)(20 * m_colorAndFlags_high));
    *((_DWORD *)this + 4) = v6 / 0x14;
    *((void *)this + 1) = v7;
    uint64_t v8 = HIDWORD(a2[2].m_colorAndFlags);
    if (v8)
    {
      unint64_t m_colorAndFlags = a2[1].m_colorAndFlags;
      uint64_t v10 = 20 * v8;
      do
      {
        long long v11 = *(_OWORD *)m_colorAndFlags;
        *(_DWORD *)(v7 + 16) = *(_DWORD *)(m_colorAndFlags + 16);
        *(_OWORD *)uint64_t v7 = v11;
        v7 += 20;
        m_colorAndFlags += 20;
        v10 -= 20;
      }
      while (v10);
    }
  }
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 24, (uint64_t)&a2[3]);
  uint64_t v12 = HIDWORD(a2[6].m_colorAndFlags);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 13) = v12;
  if (!v12) {
    goto LABEL_13;
  }
  if (v12 >= 0x6666667)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198D5D144);
  }
  unsigned int v13 = 40 * v12;
  uint64_t v14 = WTF::fastMalloc((WTF *)(40 * v12));
  *((_DWORD *)this + 12) = v13 / 0x28;
  *((void *)this + 5) = v14;
  unsigned int v15 = HIDWORD(a2[6].m_colorAndFlags);
  if (v15)
  {
    unint64_t v16 = a2[5].m_colorAndFlags;
    unint64_t v17 = v16 + 40 * v15;
    do
    {
      long long v18 = *(_DWORD **)v16;
      if (*(void *)v16) {
        *v18 += 2;
      }
      *(void *)uint64_t v14 = v18;
      long long v19 = *(_OWORD *)(v16 + 8);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v14 + 8) = v19;
      v16 += 40;
      v14 += 40;
    }
    while (v16 != v17);
  }
LABEL_13:
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 56, (uint64_t)&a2[7]);
  return this;
}

void sub_198D5D150(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int v6 = *v3;
  if (*v3)
  {
    v2[3] = 0;
    *((_DWORD *)v2 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    v2[1] = 0;
    *((_DWORD *)v2 + 4) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *v2;
  if ((*v2 & 0x8000000000000) != 0)
  {
    BOOL v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x6666667)
  {
    int v5 = 40 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(*(void *)a2, *(void *)a2 + 40 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198D5D268(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    for (uint64_t i = 0; v5 + i != a2; i += 40)
    {
      uint64_t v7 = v5 + i;
      uint64_t v8 = *(unsigned int *)(v5 + i + 12);
      uint64_t v9 = a3 + i;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 12) = v8;
      if (v8)
      {
        if (v8 >> 27)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v10 = WTF::fastMalloc((WTF *)(32 * v8));
        uint64_t v11 = a3 + i;
        *(_DWORD *)(v11 + 8) = v8;
        *(void *)uint64_t v11 = v10;
        WTF::VectorCopier<false,WebCore::InspectorOverlayLabel::Content>::uninitializedCopy<WebCore::InspectorOverlayLabel::Content>(*(void *)v7, *(void *)v7 + 32 * *(unsigned int *)(v7 + 12), v10);
      }
      *(void *)(v9 + 16) = *(void *)(v7 + 16);
      uint64_t result = WebCore::Color::Color((WebCore::Color *)(v9 + 24), (const Color *)(v7 + 24));
      *(_WORD *)(a3 + i + 32) = *(_WORD *)(v5 + i + 32);
    }
  }
  return result;
}

void sub_198D5D358(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v6 = *(WTF **)v4;
  if (*(void *)v4)
  {
    *(void *)(v2 + v3) = 0;
    *(_DWORD *)(v4 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::InspectorOverlayLabel::Content>::uninitializedCopy<WebCore::InspectorOverlayLabel::Content>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v5 + v6;
      uint64_t v8 = *(_DWORD **)(v5 + v6);
      if (v8) {
        *v8 += 2;
      }
      *(void *)(a3 + v6) = v8;
      WebCore::Color::Color((WebCore::Color *)(a3 + v6 + 8), (const Color *)(v7 + 8));
      *(unsigned char *)(a3 + v6 + 16) = *(unsigned char *)(v7 + 16);
      uint64_t result = WebCore::Color::Color((WebCore::Color *)(a3 + v6 + 24), (const Color *)(v5 + v6 + 24));
      v6 += 32;
    }
    while (v7 + 32 != a2);
  }
  return result;
}

void sub_198D5D420(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v5 = *(void *)(v2 + v3 + 8);
  if ((v5 & 0x8000000000000) != 0)
  {
    uint64_t v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)(v2 + v3);
  *(void *)(v2 + v3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *this, const FlexHighlightOverlay *a2)
{
  uint64_t v4 = WebCore::Color::Color(this, (const Color *)a2);
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)(v4 + 8) = v5;
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 40, (uint64_t)a2 + 40);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 56, (uint64_t)a2 + 56);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 72, (uint64_t)a2 + 72);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88, (uint64_t)a2 + 88);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 104, (uint64_t)a2 + 104);
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 120, (uint64_t)a2 + 120);
  return this;
}

void sub_198D5D530(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v9 = *v7;
  if (*v7)
  {
    v2[13] = 0;
    *((_DWORD *)v2 + 28) = 0;
    WTF::fastFree(v9, a2);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    v2[11] = 0;
    *((_DWORD *)v2 + 24) = 0;
    WTF::fastFree(v10, a2);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    v2[9] = 0;
    *((_DWORD *)v2 + 20) = 0;
    WTF::fastFree(v11, a2);
  }
  uint64_t v12 = *v4;
  if (*v4)
  {
    v2[7] = 0;
    *((_DWORD *)v2 + 16) = 0;
    WTF::fastFree(v12, a2);
  }
  unsigned int v13 = *v3;
  if (*v3)
  {
    v2[5] = 0;
    *((_DWORD *)v2 + 12) = 0;
    WTF::fastFree(v13, a2);
  }
  uint64_t v14 = *v2;
  if ((*v2 & 0x8000000000000) != 0)
  {
    unsigned int v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel>::destruct(*(void *)a1 + 40 * v5, (void *)(*(void *)a1 + 40 * v4));
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = *(void *)a1;
    if (v4)
    {
      uint64_t v8 = &v6[5 * v4];
      do
      {
        if (v6 != (uint64_t *)v7)
        {
          unint64_t v9 = *(unsigned int *)(v7 + 12);
          unint64_t v10 = *((unsigned int *)v6 + 3);
          if (v9 <= v10)
          {
            if (v10 > *(unsigned int *)(v7 + 8))
            {
              WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
              WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7, *((unsigned int *)v6 + 3));
              unint64_t v9 = *(unsigned int *)(v7 + 12);
            }
          }
          else
          {
            WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel::Content>::destruct((WTF::StringImpl *)(*(void *)v7 + 32 * v10), (WTF::StringImpl *)(*(void *)v7 + 32 * v9));
            *(_DWORD *)(v7 + 12) = v10;
            unint64_t v9 = v10;
          }
          uint64_t v11 = *v6;
          uint64_t v12 = *(void *)v7;
          if (v9)
          {
            uint64_t v13 = v11 + 32 * v9;
            do
            {
              WTF::String::operator=((uint64_t *)v12, (WTF::StringImpl **)v11);
              WebCore::Color::operator=();
              *(unsigned char *)(v12 + 16) = *(unsigned char *)(v11 + 16);
              WebCore::Color::operator=();
              v11 += 32;
              v12 += 32;
            }
            while (v11 != v13);
            uint64_t v11 = *v6;
            unint64_t v9 = *(unsigned int *)(v7 + 12);
            uint64_t v12 = *(void *)v7;
          }
          WTF::VectorCopier<false,WebCore::InspectorOverlayLabel::Content>::uninitializedCopy<WebCore::InspectorOverlayLabel::Content>(v11 + 32 * v9, v11 + 32 * *((unsigned int *)v6 + 3), v12 + 32 * v9);
          *(_DWORD *)(v7 + 12) = *((_DWORD *)v6 + 3);
        }
        *(void *)(v7 + 16) = v6[2];
        WebCore::Color::operator=();
        *(_WORD *)(v7 + 32) = *((_WORD *)v6 + 16);
        v6 += 5;
        v7 += 40;
      }
      while (v6 != v8);
      uint64_t v6 = *(uint64_t **)a2;
      uint64_t v14 = a1[3];
      uint64_t v7 = *(void *)a1;
    }
    else
    {
      uint64_t v14 = 0;
    }
    WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>((uint64_t)&v6[5 * v14], (uint64_t)&v6[5 * a2[3]], v7 + 40 * v14);
    a1[3] = a2[3];
  }
  return a1;
}

uint64_t WebKit::WebPreferencesStore::deleteKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this, a2, a3);
  if (*(void *)this + 24 * *((unsigned int *)this + 2) != v5) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this, v5);
  }
  uint64_t result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 3, a2, v6);
  if (*((void *)this + 3) + 24 * *((unsigned int *)this + 8) != result)
  {
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 24, result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPushMessage::notificationPayloadToCoreData@<X0>(WebKit::WebPushMessage *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 208))
  {
    a2 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/WebPushMessage.cpp";
    __break(0xC471u);
    goto LABEL_52;
  }
  uint64_t v3 = this;
  if (_MergedGlobals_83 == 1)
  {
    long long v36 = 0;
    long long v37 = 0;
    long long v34 = 0;
    long long v35 = 0;
  }
  else
  {
    WeakRandomUUIDVersion4 = (WebCore::Process *)WTF::UUID::generateWeakRandomUUIDVersion4(this);
    uint64_t v31 = v30;
    uint64_t v32 = WebCore::Process::identifier(WeakRandomUUIDVersion4);
    *(void *)&xmmword_1EB359AC0 = WeakRandomUUIDVersion4;
    *((void *)&xmmword_1EB359AC0 + 1) = v31;
    qword_1EB359AD0 = v32;
    _MergedGlobals_83 = 1;
    int v33 = *((unsigned __int8 *)v3 + 208);
    long long v36 = 0;
    long long v37 = 0;
    long long v34 = 0;
    long long v35 = 0;
    if (!v33) {
      goto LABEL_52;
    }
  }
  if (*((unsigned char *)v3 + 192))
  {
    WTF::String::operator=((uint64_t *)&v37, (WTF::StringImpl **)v3 + 19);
    if (!*((unsigned char *)v3 + 208)) {
      goto LABEL_52;
    }
    if (!*((unsigned char *)v3 + 192)) {
      goto LABEL_52;
    }
    WTF::String::operator=((uint64_t *)&v34, (WTF::StringImpl **)v3 + 18);
    if (!*((unsigned char *)v3 + 208)) {
      goto LABEL_52;
    }
    if (!*((unsigned char *)v3 + 192)) {
      goto LABEL_52;
    }
    WTF::String::operator=((uint64_t *)&v35, (WTF::StringImpl **)v3 + 20);
    if (!*((unsigned char *)v3 + 208)) {
      goto LABEL_52;
    }
    if (!*((unsigned char *)v3 + 192)) {
      goto LABEL_52;
    }
    WTF::String::operator=((uint64_t *)&v36, (WTF::StringImpl **)v3 + 21);
    if (!*((unsigned char *)v3 + 208) || !*((unsigned char *)v3 + 192)) {
      goto LABEL_52;
    }
    char v4 = *((unsigned char *)v3 + 136);
    unsigned int v5 = *((unsigned __int16 *)v3 + 92);
    WTF::String::utf8();
    uint64_t result = v39[0];
    if (!v39[0]) {
      goto LABEL_53;
    }
    unint64_t v8 = *((void *)v39[0] + 1);
    if (v8)
    {
      if (HIDWORD(v8))
      {
        __break(0xC471u);
        return result;
      }
      unint64_t v9 = (char *)v39[0] + 16;
      uint64_t v10 = WTF::fastMalloc(*((WTF **)v39[0] + 1));
      uint64_t v11 = v10;
      for (uint64_t i = 0; i != v8; ++i)
        *(unsigned char *)(v10 + i) = v9[i];
      uint64_t result = v39[0];
      v39[0] = 0;
      if (!result) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = 0;
      v39[0] = 0;
    }
    if (*(_DWORD *)result == 1) {
      WTF::fastFree(result, a2);
    }
    else {
      --*(_DWORD *)result;
    }
LABEL_23:
    while (!*((unsigned char *)v3 + 208))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      LODWORD(v8) = 0;
      uint64_t v11 = 0;
    }
    unsigned int v13 = v5 >> 8;
    goto LABEL_25;
  }
  char v4 = 0;
  LODWORD(v8) = 0;
  uint64_t v11 = 0;
  LOBYTE(v5) = 0;
  LOBYTE(v13) = 0;
LABEL_25:
  uint64_t v14 = (_DWORD *)*((void *)v3 + 9);
  if (v14) {
    *v14 += 2;
  }
  *(void *)a3 = v14;
  long long v15 = *((_OWORD *)v3 + 6);
  *(_OWORD *)(a3 + 8) = *((_OWORD *)v3 + 5);
  *(_OWORD *)(a3 + 24) = v15;
  unint64_t v16 = (_DWORD *)*((void *)v3 + 14);
  if (v16) {
    *v16 += 2;
  }
  unint64_t v17 = v37;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v17;
  long long v19 = v35;
  long long v18 = v36;
  long long v36 = 0;
  long long v37 = 0;
  *(void *)(a3 + 56) = v18;
  *(void *)(a3 + 64) = v19;
  *(void *)(a3 + 72) = v34;
  *(unsigned char *)(a3 + 80) = v4;
  long long v34 = 0;
  long long v35 = 0;
  WebCore::SecurityOriginData::fromURL((uint64_t *)v39, (WebKit::WebPushMessage *)((char *)v3 + 32), (const WTF::URL *)a2);
  WebCore::SecurityOriginData::toString((uint64_t *)(a3 + 88), (WebCore::SecurityOriginData *)v39);
  uint64_t v20 = (_DWORD *)*((void *)v3 + 4);
  if (v20) {
    *v20 += 2;
  }
  *(void *)(a3 + 96) = v20;
  *(_OWORD *)(a3 + 104) = *(_OWORD *)((char *)v3 + 40);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)((char *)v3 + 56);
  uint64_t v21 = (WTF::MonotonicTime *)WTF::UUID::UUID((WTF::UUID *)v38);
  uint64_t v22 = v38[1];
  *(void *)(a3 + 144) = v38[0];
  *(void *)(a3 + 152) = v22;
  long long v23 = *(_OWORD *)&qword_1EB359AD0;
  *(_OWORD *)(a3 + 160) = xmmword_1EB359AC0;
  *(_OWORD *)(a3 + 176) = v23;
  *(unsigned char *)(a3 + 192) = 1;
  *(void *)(a3 + 208) = 1;
  WTF::MonotonicTime::now(v21);
  *(void *)(a3 + 216) = v25;
  *(void *)(a3 + 224) = v11;
  *(_DWORD *)(a3 + 232) = v8;
  *(_DWORD *)(a3 + 236) = v8;
  *(_WORD *)(a3 + 240) = v5 | (v13 << 8);
  if (v40 != -1) {
    ((void (*)(void *, WTF **))off_1EE9D1818[v40])(v38, v39);
  }
  uint64_t v26 = v34;
  long long v34 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  int v27 = v35;
  long long v35 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v24);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  int v28 = v36;
  long long v36 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v24);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t result = v37;
  long long v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebWheelEventCoalescer::nextEventToDispatch@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  if (*(void *)this == *(void *)(this + 8))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 112) = 0;
    return this;
  }
  uint64_t v4 = this;
  unsigned int v5 = (_OWORD *)(*(void *)(this + 16) + 112 * v3);
  int v105 = 0;
  long long v6 = v5[1];
  *(_OWORD *)unsigned int v106 = *(_OWORD *)((char *)v5 + 4);
  *(_OWORD *)&v106[12] = v6;
  long long v107 = v5[2];
  float32x4_t v7 = *((float32x4_t *)v5 + 3);
  long long v8 = v5[4];
  long long v9 = v5[6];
  long long v110 = v5[5];
  long long v111 = v9;
  float32x4_t v108 = v7;
  *(_OWORD *)v109 = v8;
  if (v3 == *(unsigned int *)(this + 24) - 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v3 + 1;
  }
  *(void *)this = v10;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  uint64_t v12 = (_OWORD *)WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, 1uLL, (unint64_t)&v105);
  uint64_t v13 = *(void *)v11 + 112 * *(unsigned int *)(v11 + 12);
  *(_DWORD *)uint64_t v13 = 0;
  long long v14 = *(_OWORD *)((char *)v12 + 4);
  *(_OWORD *)(v13 + 16) = v12[1];
  *(_OWORD *)(v13 + 4) = v14;
  *(_OWORD *)(v13 + 32) = v12[2];
  long long v15 = v12[3];
  long long v16 = v12[4];
  long long v17 = v12[6];
  *(_OWORD *)(v13 + 80) = v12[5];
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v15;
  *(_OWORD *)(v13 + 64) = v16;
  uint64_t v18 = *(void *)v4;
  uint64_t v19 = *(void *)(v4 + 8);
  ++*(_DWORD *)(v11 + 12);
  char v20 = v106[0];
  int v21 = v106[1];
  __int16 v22 = *(_WORD *)&v106[2];
  uint64_t v24 = *(void *)&v106[12];
  uint64_t v25 = *(void *)&v106[4];
  uint64_t v23 = *(void *)&v106[20];
  uint64_t v26 = *((void *)&v107 + 1);
  uint64_t v27 = v107;
  float32x4_t v97 = v108;
  int v28 = v109[0];
  int v29 = HIDWORD(v109[0]);
  int v30 = v109[1];
  this = BYTE4(v109[1]);
  char v31 = BYTE5(v109[1]);
  int v32 = BYTE6(v109[1]);
  char v33 = HIBYTE(v109[1]);
  unint64_t v34 = *((void *)&v110 + 1);
  uint64_t v35 = v110;
  int v36 = v111;
  int v37 = DWORD1(v111);
  float32x2_t v38 = *(float32x2_t *)((char *)&v111 + 8);
  if (v18 != v19)
  {
    uint64_t v39 = *(void *)(v4 + 16) + 112 * v18;
    int v40 = (float32x4_t *)(v39 + 32);
    if (v107 == *(_OWORD *)(v39 + 32))
    {
      __int16 v81 = *(_WORD *)&v106[2];
      char v79 = HIBYTE(v109[1]);
      while (v21 == *(unsigned __int8 *)(v39 + 5)
           && *(unsigned __int8 *)(v39 + 64) == v28
           && v29 == *(_DWORD *)(v39 + 68)
           && v30 == *(_DWORD *)(v39 + 72)
           && (v32 == 0) != (*(unsigned char *)(v39 + 78) != 0))
      {
        int v98 = 0;
        long long v41 = *(_OWORD *)(v39 + 16);
        *(_OWORD *)uint64_t v99 = *(_OWORD *)(v39 + 4);
        *(_OWORD *)&v99[12] = v41;
        float32x4_t v100 = *v40;
        float32x4_t v42 = v40[1];
        float32x4_t v43 = v40[2];
        float32x4_t v44 = v40[4];
        float32x4_t v103 = v40[3];
        float32x4_t v104 = v44;
        float32x4_t v101 = v42;
        float32x4_t v102 = v43;
        if (v18 == *(unsigned int *)(v4 + 24) - 1) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = v18 + 1;
        }
        *(void *)uint64_t v4 = v45;
        uint64_t v46 = *(unsigned int *)(v11 + 12);
        if (v46 == *(_DWORD *)(v11 + 8))
        {
          unint64_t v47 = WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v46 + 1, (unint64_t)&v98);
          uint64_t v48 = *(void *)v11 + 112 * *(unsigned int *)(v11 + 12);
          *(_DWORD *)uint64_t v48 = 0;
          long long v49 = *(_OWORD *)(v47 + 4);
          *(_OWORD *)(v48 + 16) = *(_OWORD *)(v47 + 16);
          *(_OWORD *)(v48 + 4) = v49;
          uint64_t v50 = (float32x4_t *)(v47 + 32);
        }
        else
        {
          uint64_t v48 = *(void *)v11 + 112 * v46;
          *(_DWORD *)uint64_t v48 = 0;
          long long v51 = *(_OWORD *)v99;
          *(_OWORD *)(v48 + 16) = *(_OWORD *)&v99[12];
          *(_OWORD *)(v48 + 4) = v51;
          uint64_t v50 = &v100;
        }
        unint64_t v52 = 0;
        *(float32x4_t *)(v48 + 32) = *v50;
        float32x4_t v53 = v50[1];
        float32x4_t v54 = v50[2];
        float32x4_t v55 = v50[4];
        *(float32x4_t *)(v48 + 80) = v50[3];
        *(float32x4_t *)(v48 + 96) = v55;
        *(float32x4_t *)(v48 + 48) = v53;
        *(float32x4_t *)(v48 + 64) = v54;
        ++*(_DWORD *)(v11 + 12);
        int v56 = v99[1];
        uint64_t v25 = *(void *)&v99[4];
        uint64_t v57 = v100.i64[1];
        uint64_t v27 = v100.i64[0];
        int v93 = v102.i32[1];
        int v95 = v102.u8[0];
        unsigned int v89 = v102.u8[12];
        int v91 = v102.i32[2];
        int v85 = v102.u8[14];
        char v87 = v102.i8[13];
        uint64_t v35 = v103.i64[0];
        int v83 = v104.i32[1];
        BOOL v58 = v36 == 0;
        int v36 = 0;
        if (!v58 && v104.i8[0])
        {
          unint64_t v52 = COERCE_UNSIGNED_INT(*(float *)&v34 + v103.f32[2]) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v34 + 1)+ v103.f32[3]) << 32);
          int v36 = 1;
        }
        float32x2_t v38 = vadd_f32(v38, *(float32x2_t *)&v104.u32[2]);
        float32x4_t v97 = vaddq_f32(v97, v101);
        WTF::UUID::UUID((WTF::UUID *)v112);
        uint64_t v24 = v112[0];
        uint64_t v23 = v112[1];
        uint64_t v18 = *(void *)v4;
        if (*(void *)v4 == *(void *)(v4 + 8))
        {
          uint64_t v26 = v57;
          char v20 = 6;
          __int16 v22 = v81;
          int v29 = v93;
          int v28 = v95;
          char v33 = v79;
          this = v89;
          int v30 = v91;
          LOBYTE(v32) = v85;
          char v31 = v87;
          int v37 = v83;
          LOBYTE(v21) = v56;
          goto LABEL_28;
        }
        uint64_t v39 = *(void *)(v4 + 16) + 112 * v18;
        int v40 = (float32x4_t *)(v39 + 32);
        uint64_t v26 = v57;
        __int16 v22 = v81;
        int v21 = v56;
        if (v27 != *(void *)(v39 + 32))
        {
          char v20 = 6;
          int v29 = v93;
          int v28 = v95;
          char v33 = v79;
          this = v89;
          int v30 = v91;
          LOBYTE(v32) = v85;
          char v31 = v87;
          int v37 = v83;
          goto LABEL_28;
        }
        char v20 = 6;
        unint64_t v34 = v52;
        int v29 = v93;
        int v28 = v95;
        char v33 = v79;
        this = v89;
        int v30 = v91;
        int v32 = v85;
        char v31 = v87;
        int v37 = v83;
        if (v57 != *(void *)(v39 + 40)) {
          goto LABEL_28;
        }
      }
    }
  }
  unint64_t v52 = v34;
LABEL_28:
  uint64_t v60 = *(void *)(v4 + 256);
  uint64_t v59 = *(void *)(v4 + 264);
  if (v60)
  {
    if (v59 + 1 != v60) {
      goto LABEL_47;
    }
    LODWORD(v61) = *(_DWORD *)(v4 + 280);
  }
  else
  {
    uint64_t v61 = *(unsigned int *)(v4 + 280);
    if (v59)
    {
      if (v59 != v61 - 1) {
        goto LABEL_47;
      }
    }
    else if (v61)
    {
      uint64_t v59 = 0;
      goto LABEL_47;
    }
  }
  unint64_t v75 = v52;
  char v76 = v20;
  uint64_t v80 = v23;
  uint64_t v82 = v24;
  int v84 = v37;
  char v86 = v32;
  char v88 = v31;
  unsigned int v90 = this;
  int v92 = v30;
  int v94 = v29;
  int v96 = v28;
  uint64_t v78 = v27;
  char v77 = v21;
  uint64_t v62 = v61;
  unint64_t v63 = ((unint64_t)v61 >> 2) + v61;
  if (v63 <= 0xF) {
    unint64_t v63 = 15;
  }
  if (v63 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return this;
  }
  uint64_t v64 = v26;
  __int16 v65 = v22;
  unsigned int v66 = *(char **)(v4 + 272);
  int v67 = v63 + 1;
  __int16 v68 = (char *)WTF::fastMalloc((WTF *)(8 * (v63 + 1)));
  *(_DWORD *)(v4 + 280) = v67;
  *(void *)(v4 + 272) = v68;
  unint64_t v70 = *(void *)(v4 + 256);
  unint64_t v69 = *(void *)(v4 + 264);
  if (v70 <= v69)
  {
    memcpy(&v68[8 * v70], &v66[8 * v70], 8 * v69 - 8 * v70);
  }
  else
  {
    memcpy(v68, v66, 8 * v69);
    uint64_t v71 = *(void *)(v4 + 256);
    uint64_t v72 = v71 - v62 + *(unsigned int *)(v4 + 280);
    memcpy((void *)(*(void *)(v4 + 272) + 8 * v72), &v66[8 * v71], 8 * v62 - 8 * v71);
    *(void *)(v4 + 256) = v72;
  }
  __int16 v22 = v65;
  LOBYTE(v21) = v77;
  uint64_t v27 = v78;
  uint64_t v23 = v80;
  uint64_t v26 = v64;
  uint64_t v24 = v82;
  if (v66)
  {
    if (*(char **)(v4 + 272) == v66)
    {
      *(void *)(v4 + 272) = 0;
      *(_DWORD *)(v4 + 280) = 0;
    }
    WTF::fastFree((WTF *)v66, v73);
    uint64_t v26 = v64;
    __int16 v22 = v65;
    uint64_t v23 = v80;
    uint64_t v24 = v82;
    LOBYTE(v21) = v77;
    uint64_t v27 = v78;
  }
  uint64_t v59 = *(void *)(v4 + 264);
  int v29 = v94;
  int v28 = v96;
  this = v90;
  int v30 = v92;
  LOBYTE(v32) = v86;
  char v31 = v88;
  int v37 = v84;
  char v20 = v76;
  unint64_t v52 = v75;
LABEL_47:
  *(void *)(*(void *)(v4 + 272) + 8 * v59) = v11;
  if (v59 == *(unsigned int *)(v4 + 280) - 1) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = v59 + 1;
  }
  *(void *)(v4 + 264) = v74;
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = v20;
  *(unsigned char *)(a2 + 5) = v21;
  *(_WORD *)(a2 + 6) = v22;
  *(void *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v23;
  *(void *)(a2 + 32) = v27;
  *(void *)(a2 + 40) = v26;
  *(float32x4_t *)(a2 + 48) = v97;
  *(_DWORD *)(a2 + 64) = v28;
  *(_DWORD *)(a2 + 68) = v29;
  *(_DWORD *)(a2 + 72) = v30;
  *(unsigned char *)(a2 + 76) = this;
  *(unsigned char *)(a2 + 77) = v31;
  *(unsigned char *)(a2 + 78) = v32;
  *(unsigned char *)(a2 + 79) = v33;
  *(void *)(a2 + 80) = v35;
  *(void *)(a2 + 88) = v52;
  *(_DWORD *)(a2 + 96) = v36;
  *(_DWORD *)(a2 + 100) = v37;
  *(float32x2_t *)(a2 + 104) = v38;
  *(unsigned char *)(a2 + 112) = 1;
  return this;
}

void WebKit::WebWheelEventCoalescer::takeOldestEventBeingProcessed(WebKit::WebWheelEventCoalescer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 32);
  if (v3 == *((void *)this + 33))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 112) = 0;
  }
  else
  {
    uint64_t v5 = *((void *)this + 34);
    uint64_t v6 = *(void *)(v5 + 8 * v3);
    *(void *)(v5 + 8 * v3) = 0;
    float32x4_t v7 = (WTF ***)(*((void *)this + 34) + 8 * v3);
    long long v8 = *v7;
    *float32x4_t v7 = 0;
    if (v8)
    {
      std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v7, v8);
      uint64_t v3 = *((void *)this + 32);
    }
    if (v3 == *((unsigned int *)this + 70) - 1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    *((void *)this + 32) = v9;
    unsigned int v10 = *(_DWORD *)(v6 + 12);
    if (v10)
    {
      uint64_t v11 = *(WTF **)v6;
      *(_DWORD *)a2 = 0;
      uint64_t v12 = (char *)v11 + 112 * v10;
      *(_OWORD *)(a2 + 4) = *(_OWORD *)(v12 - 108);
      long long v13 = *((_OWORD *)v12 - 3);
      *(_OWORD *)(a2 + 48) = *((_OWORD *)v12 - 4);
      *(_OWORD *)(a2 + 64) = v13;
      long long v14 = *((_OWORD *)v12 - 1);
      *(_OWORD *)(a2 + 80) = *((_OWORD *)v12 - 2);
      *(_OWORD *)(a2 + 96) = v14;
      long long v15 = *((_OWORD *)v12 - 5);
      *(_OWORD *)(a2 + 16) = *((_OWORD *)v12 - 6);
      *(_OWORD *)(a2 + 32) = v15;
      *(unsigned char *)(a2 + 112) = 1;
      uint64_t v16 = 0;
      std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)&v16, (WTF **)v6);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void WebKit::WebWheelEventCoalescer::clear(WebKit::WebWheelEventCoalescer *this, void *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  if ((WebKit::WebWheelEventCoalescer *)((char *)this + 32) != v3 && v3 != 0)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v5 = *((void *)this + 32);
  unint64_t v6 = *((void *)this + 33);
  float32x4_t v7 = (WTF *)*((void *)this + 34);
  if (v5 <= v6)
  {
    if (v5 == v6) {
      goto LABEL_25;
    }
    uint64_t v12 = (void **)((char *)v7 + 8 * v5);
    uint64_t v13 = 8 * v6 - 8 * v5;
    do
    {
      a2 = *v12;
      char *v12 = 0;
      if (a2) {
        std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v12, (WTF **)a2);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    if (v6)
    {
      uint64_t v8 = 8 * v6;
      do
      {
        a2 = *(void **)v7;
        *(void *)float32x4_t v7 = 0;
        if (a2) {
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v7, (WTF **)a2);
        }
        float32x4_t v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      float32x4_t v7 = (WTF *)*((void *)this + 34);
      unint64_t v5 = *((void *)this + 32);
    }
    uint64_t v9 = *((unsigned int *)this + 70);
    if (v5 != v9)
    {
      unsigned int v10 = (void **)((char *)v7 + 8 * v5);
      uint64_t v11 = 8 * v9 - 8 * v5;
      do
      {
        a2 = *v10;
        *unsigned int v10 = 0;
        if (a2) {
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v10, (WTF **)a2);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  float32x4_t v7 = (WTF *)*((void *)this + 34);
LABEL_25:
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  if (v7)
  {
    *((void *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v7, a2);
  }
}

uint64_t WebKit::WebsitePoliciesData::applyToDocumentLoader(uint64_t a1, uint64_t a2)
{
  WebCore::DocumentLoader::setCustomHeaderFields();
  WTF::String::operator=((uint64_t *)(a2 + 3384), (WTF::StringImpl **)(a1 + 40));
  WTF::String::operator=((uint64_t *)(a2 + 3392), (WTF::StringImpl **)(a1 + 48));
  WTF::String::operator=((uint64_t *)(a2 + 3400), (WTF::StringImpl **)(a1 + 56));
  *(unsigned char *)(a2 + 3536) = *(unsigned char *)(a1 + 110);
  *(unsigned char *)(a2 + 3512) = *(unsigned char *)(a1 + 107);
  if (*(unsigned char *)(a2 + 3432))
  {
    uint64_t v5 = *(void *)(a2 + 3440);
    if (!v5 || !*(_DWORD *)(v5 - 12))
    {
      *(unsigned char *)(a2 + 3432) = *(unsigned char *)(a1 + 80);
      uint64_t v6 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = 0;
      float32x4_t v7 = *(WTF::StringImpl ***)(a2 + 3440);
      *(void *)(a2 + 3440) = v6;
      if (v7) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v4);
      }
    }
  }
  WebCore::DocumentLoader::setActiveContentRuleListActionPatterns();
  uint64_t v9 = *(unsigned int *)(a2 + 3460);
  if (v9)
  {
    uint64_t v21 = *(void *)(a2 + 3448);
    uint64_t v22 = 16 * v9;
    do
    {
      uint64_t v21 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21, v8)+ 16;
      v22 -= 16;
    }
    while (v22);
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a2 + 3448, (_DWORD *)(a1 + 24));
  *(unsigned char *)(a2 + 3521) = *(unsigned char *)(a1 + 74) & 0xF;
  unsigned int v10 = *(unsigned __int8 *)(a1 + 96);
  if (v10 <= 3) {
    *(unsigned char *)(a2 + 3520) = v10;
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 97);
  if (v11 <= 2) {
    *(unsigned char *)(a2 + 3522) = v11;
  }
  unsigned int v12 = *(unsigned __int8 *)(a1 + 98);
  if (v12 <= 2) {
    *(unsigned char *)(a2 + 3523) = v12;
  }
  unsigned int v13 = *(unsigned __int8 *)(a1 + 99);
  if (v13 <= 2) {
    *(unsigned char *)(a2 + 3524) = v13;
  }
  unsigned int v14 = *(unsigned __int8 *)(a1 + 100);
  if (v14 <= 2) {
    *(unsigned char *)(a2 + 3525) = v14;
  }
  unsigned int v15 = *(unsigned __int8 *)(a1 + 101);
  if (v15 <= 2) {
    *(unsigned char *)(a2 + 3526) = v15;
  }
  unsigned int v16 = *(unsigned __int8 *)(a1 + 103);
  if (v16 <= 1) {
    *(unsigned char *)(a2 + 3527) = v16;
  }
  *(_WORD *)(a2 + 3528) = *(_WORD *)(a1 + 104);
  *(_WORD *)(a2 + 3514) = *(_WORD *)(a1 + 72);
  if (!*(unsigned char *)(a2 + 3518))
  {
    __int16 v17 = *(_WORD *)(a1 + 72);
    *(unsigned char *)(a2 + 3518) = 1;
    *(_WORD *)(a2 + 3516) = v17;
  }
  *(unsigned char *)(a2 + 3533) = *(unsigned char *)(a1 + 109);
  uint64_t result = WebCore::DocumentLoader::setHTTPSByDefaultMode();
  unsigned int v19 = *(unsigned __int8 *)(a1 + 112);
  if (v19 <= 2) {
    *(unsigned char *)(a2 + 3532) = v19;
  }
  uint64_t v20 = *(void *)(a2 + 16);
  if (v20 && *(void *)(v20 + 8))
  {
    return MEMORY[0x1F416D758](a2);
  }
  return result;
}

void WebKit::WebSQLiteDatabaseTracker::~WebSQLiteDatabaseTracker(WebKit::WebSQLiteDatabaseTracker *this, WebCore::SQLiteDatabaseTrackerClient *a2)
{
  WebCore::SQLiteDatabaseTracker::setClient(0, a2);
  if (*((void *)this + 4) && !*((unsigned char *)this + 40)) {
    (*(void (**)(void, void))(**((void **)this + 2) + 16))(*((void *)this + 2), 0);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  uint64_t vars8;

  WebKit::WebSQLiteDatabaseTracker::~WebSQLiteDatabaseTracker(this, a2);

  JUMPOUT(0x199740C10);
}

void std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](int a1, WTF **this)
{
  if (this)
  {
    uint64_t v3 = *this;
    if (*this)
    {
      *this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v3, this);
    }
    WTF::fastFree((WTF *)this, this);
  }
}

uint64_t WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::String const&,BOOL &>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unsigned int v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    unsigned int v15 = (WTF **)(v8 + 16 * v14);
    unsigned int v16 = *v15;
    if (*v15 != (WTF *)-1) {
      break;
    }
    unsigned int v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      char *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      unsigned int v15 = v12;
    }
    uint64_t result = (uint64_t)WTF::String::operator=((uint64_t *)v15, a2);
    *((unsigned char *)v15 + 8) = *(unsigned char *)a3;
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_27:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        unsigned int v15 = (WTF **)result;
        uint64_t v22 = *a1;
        if (*a1) {
          unint64_t v25 = *(unsigned int *)(v22 - 4);
        }
        else {
          unint64_t v25 = 0;
        }
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_27;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v22 + 16 * v25;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  uint64_t result = WTF::equal(v16, *a2, a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v20 = *a1;
  if (*a1) {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
  }
  else {
    uint64_t v21 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v20 + 16 * v21;
  *(unsigned char *)(a4 + 16) = 0;
  *(unsigned char *)(v8 + 16 * v14 + 8) = *(unsigned char *)a3;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, uint64_t a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v27, a2 + 8);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v6;
  unsigned int v7 = v5 - 1;
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *(void *)a1) >> 3);
  uint64_t v10 = (v9 + 1) & (v5 - 1);
  uint64_t v11 = *(void *)a1 + 24 * v10;
  uint64_t result = *(void *)v11;
  if (*(void *)v11)
  {
    int v25 = *(_DWORD *)(a1 + 16);
    uint64_t v13 = v9;
    uint64_t v14 = (uint64_t *)(v8 + 24 * v9);
    unsigned int v15 = (v9 + 1) & v7;
    do
    {
      unsigned int v16 = *(_DWORD *)(result + 16);
      if (v16 >= 0x100) {
        uint64_t result = v16 >> 8;
      }
      else {
        uint64_t result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      }
      if (((v15 + v5 - ((result ^ v25) & v7)) & v7) == 0) {
        break;
      }
      WTF::String::operator=(v14, (uint64_t *)v11);
      uint64_t v17 = v8 + 24 * v13 + 8;
      uint64_t v18 = v8 + 24 * v10;
      uint64_t v19 = v18 + 8;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v17, v18 + 8);
      unsigned int v23 = *(_DWORD *)(v18 + 16);
      uint64_t v22 = (_DWORD *)(v18 + 16);
      uint64_t v21 = v23;
      if (v23 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v21])(&v26, v19);
      }
      *uint64_t v22 = -1;
      uint64_t v24 = *(WTF::StringImpl **)v11;
      *(void *)uint64_t v11 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v20);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 16) = 0;
      uint64_t v10 = (v15 + 1) & v7;
      uint64_t v8 = *(void *)a1;
      uint64_t v13 = v15;
      uint64_t v14 = (uint64_t *)(*(void *)a1 + 24 * v15);
      uint64_t v11 = *(void *)a1 + 24 * v10;
      uint64_t result = *(void *)v11;
      unsigned int v15 = (v15 + 1) & v7;
    }
    while (*(void *)v11);
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= 9 && 6 * v6 < v5) {
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v5 >> 1);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 112 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2492493)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      unsigned int v5 = 112 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(112 * a2));
      *(_DWORD *)(v2 + 8) = (613566757 * (unint64_t)(v5 >> 4)) >> 32;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = 112 * v4;
        unint64_t v8 = (long long *)((char *)v3 + 32);
        do
        {
          *(_DWORD *)uint64_t result = 0;
          long long v9 = *(long long *)((char *)v8 - 28);
          *(_OWORD *)(result + 16) = *(v8 - 1);
          *(_OWORD *)(result + 4) = v9;
          long long v10 = v8[4];
          long long v12 = v8[1];
          long long v11 = v8[2];
          *(_OWORD *)(result + 80) = v8[3];
          *(_OWORD *)(result + 96) = v10;
          *(_OWORD *)(result + 48) = v12;
          *(_OWORD *)(result + 64) = v11;
          long long v13 = *v8;
          v8 += 7;
          *(_OWORD *)(result + 32) = v13;
          result += 112;
          v7 -= 112;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D1868;
  unint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D1868;
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = result;
    char v3 = 0;
    uint64_t v4 = *(void *)(result + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 24), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      uint64_t result = MEMORY[0x19972E8D0](v4 + 24);
    }
    if (*(void *)(v4 + 32) == *(void *)(v2 + 24))
    {
      *(void *)(v4 + 32) = 0;
      if (!*(unsigned char *)(v4 + 40)) {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v4 + 16) + 16))(*(void *)(v4 + 16), 0);
      }
    }
    int v5 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 24), (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != 1)
    {
      return WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 24));
    }
  }
  return result;
}

void WebKit::ProcessLauncher::terminateProcess(WebKit::ProcessLauncher *this)
{
  if (*((unsigned char *)this + 56)) {
    WebKit::ExtensionProcess::invalidate((WebKit::ProcessLauncher *)((char *)this + 40));
  }
  WebKit::ProcessLauncher::terminateXPCConnection(this);
  *((_DWORD *)this + 27) = 0;
}

void WebKit::ProcessLauncher::terminateXPCConnection(WebKit::ProcessLauncher *this)
{
  uint64_t v2 = (_xpc_connection_s *)*((void *)this + 3);
  if (v2)
  {
    xpc_connection_cancel(v2);
    char v3 = (void *)*((void *)this + 3);
    if (v3) {

    }
    *((void *)this + 3) = 0;
  }
}

void WebKit::ProcessLauncher::platformInvalidate(WebKit::ProcessLauncher *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v2);
  }
  if (*((unsigned char *)this + 56)) {
    WebKit::ExtensionProcess::invalidate((WebKit::ProcessLauncher *)((char *)this + 40));
  }

  WebKit::ProcessLauncher::terminateXPCConnection(this);
}

uint64_t WebKit::NetworkProcessProxy::removeBackgroundStateObservers(WebKit::NetworkProcessProxy *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 72));
  uint64_t v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = *((void *)this + 73);

  return [v2 removeObserver:v3];
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v12 = 456;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, **(double **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9D1D78;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  int v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198D5F10C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkProcessProxy::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  WebKit::WebProcessProxy::webPage(a2, &v9);
  uint64_t v4 = v9;
  if (v9)
  {
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (WTF::RefCountedBase *)(v9 + 352));
    int v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
  else
  {
    WebCore::standardUserAgentWithApplicationName();
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (WTF::RefCountedBase *)&v8);
    uint64_t v7 = v8;
    unint64_t v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
}

void sub_198D5F2A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteAcceleratedEffectStack::create@<X0>(uint64_t *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, double a6@<D4>)
{
  uint64_t v12 = bmalloc::api::isoAllocate();
  uint64_t result = WebCore::AcceleratedEffectStack::AcceleratedEffectStack((WebCore::AcceleratedEffectStack *)v12);
  *(void *)uint64_t v12 = &unk_1EE9D18D8;
  *(unsigned char *)(v12 + 296) = 0;
  *(float *)(v12 + 300) = a2;
  *(float *)(v12 + 304) = a3;
  *(float *)(v12 + 308) = a4;
  *(float *)(v12 + 312) = a5;
  *(double *)(v12 + 320) = a6;
  *a1 = v12;
  return result;
}

void sub_198D5F3A8(_Unwind_Exception *a1, void *a2)
{
  bmalloc::api::isoDeallocate(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteAcceleratedEffectStack::setEffects(uint64_t a1)
{
  uint64_t result = WebCore::AcceleratedEffectStack::setEffects();
  uint64_t v3 = a1 + 280;
  uint64_t v4 = 264;
  if (*(_DWORD *)(a1 + 292)) {
    uint64_t v4 = 280;
  }
  else {
    uint64_t v3 = a1 + 264;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 12);
  if (!v5) {
    return result;
  }
  LOBYTE(v6) = 0;
  LOBYTE(v7) = 0;
  LOBYTE(v8) = 0;
  uint64_t v9 = *(uint64_t **)(a1 + v4);
  uint64_t v10 = 8 * v5;
  do
  {
    uint64_t v11 = *v9;
    if (v6)
    {
      BOOL v6 = 1;
      if ((v7 & 1) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      BOOL v6 = (*(_WORD *)(v11 + 128) & 0x1800) != 0;
      if ((v7 & 1) == 0)
      {
LABEL_8:
        int v7 = (*(unsigned __int16 *)(v11 + 128) >> 1) & 1;
        if (v8) {
          goto LABEL_12;
        }
        goto LABEL_9;
      }
    }
    int v7 = 1;
    if (v8)
    {
LABEL_12:
      BOOL v8 = 1;
      goto LABEL_13;
    }
LABEL_9:
    BOOL v8 = (*(_WORD *)(v11 + 128) & 0x7FC) != 0;
LABEL_13:
    if ((v6 & v7) == 1 && v8)
    {
      char v13 = *(unsigned char *)(a1 + 296) | 0xA;
      goto LABEL_26;
    }
    ++v9;
    v10 -= 8;
  }
  while (v10);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_24;
    }
    char v12 = *(unsigned char *)(a1 + 296);
    goto LABEL_22;
  }
  char v12 = *(unsigned char *)(a1 + 296) | 8;
  *(unsigned char *)(a1 + 296) = v12;
  if (v7)
  {
LABEL_22:
    char v13 = v12 | 2;
    *(unsigned char *)(a1 + 296) = v12 | 2;
    if (!v8) {
      return result;
    }
    goto LABEL_26;
  }
LABEL_24:
  if (!v8) {
    return result;
  }
  char v13 = *(unsigned char *)(a1 + 296);
LABEL_26:
  *(unsigned char *)(a1 + 296) = v13 | 4;
  return result;
}

void WebKit::RemoteAcceleratedEffectStack::applyEffectsFromMainThread(uint64_t a1, void *a2)
{
  WebKit::RemoteAcceleratedEffectStack::computeValues(a1, (WebCore::AcceleratedEffectValues *)v9);
  char v6 = *(unsigned char *)(a1 + 296);
  if ((v6 & 8) != 0)
  {
    WebCore::PlatformCAFilters::setFiltersOnLayer();
    char v6 = *(unsigned char *)(a1 + 296);
  }
  if ((v6 & 2) != 0)
  {
    LODWORD(v5) = v9[0];
    [a2 setOpacity:v5];
    char v6 = *(unsigned char *)(a1 + 296);
  }
  if ((v6 & 4) != 0)
  {
    WebCore::AcceleratedEffectValues::computedTransformationMatrix(v8, (WebCore::AcceleratedEffectValues *)v9, (const WebCore::FloatRect *)(a1 + 300));
    WebCore::TransformationMatrix::operator CATransform3D();
    [a2 setTransform:v7];
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v9, v4);
}

void sub_198D5F580(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t WebKit::RemoteAcceleratedEffectStack::computeValues@<X0>(uint64_t a1@<X0>, WebCore::AcceleratedEffectValues *a2@<X8>)
{
  uint64_t result = (uint64_t)WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a2, (const WebCore::AcceleratedEffectValues *)(a1 + 16));
  uint64_t v4 = a1 + 280;
  uint64_t v5 = 280;
  if (!*(_DWORD *)(a1 + 292))
  {
    uint64_t v5 = 264;
    uint64_t v4 = a1 + 264;
  }
  uint64_t v6 = *(unsigned int *)(v4 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + v5);
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t result = WebCore::AcceleratedEffect::apply();
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_198D5F638(_Unwind_Exception *a1, void *a2)
{
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::initializeDebugIndicator(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::fastMalloc((WTF *)0x48);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  *(void *)uint64_t v2 = v3;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 49) = 0u;
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 21, (WebKit::RemoteLayerTreeHost *)v2);
  *(unsigned char *)(*((void *)this + 21) + 64) = 1;
  id v4 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  uint64_t v5 = (const void *)*((void *)this + 22);
  *((void *)this + 22) = v4;
  if (v5)
  {
    CFRelease(v5);
    id v4 = (id)*((void *)this + 22);
  }
  [v4 setName:@"Tile map host"];
  objc_msgSend(*((id *)this + 22), "setDelegate:", objc_msgSend(MEMORY[0x1E4FB61C8], "shared"));
  uint64_t v6 = (double *)MEMORY[0x1E4F1DAD8];
  objc_msgSend(*((id *)this + 22), "setAnchorPoint:", *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
  LODWORD(v7) = 1061997773;
  [*((id *)this + 22) setOpacity:v7];
  [*((id *)this + 22) setMasksToBounds:1];
  uint64_t v8 = (CGColorSpace *)WebCore::sRGBColorSpaceRef((WebCore *)[*((id *)this + 22) setBorderWidth:2.0]);
  *(_OWORD *)components = xmmword_1994F6D38;
  long long v16 = unk_1994F6D48;
  CGColorRef v9 = CGColorCreate(v8, components);
  [*((id *)this + 22) setBackgroundColor:v9];
  v14[0] = xmmword_1994F6D58;
  v14[1] = unk_1994F6D68;
  CGColorRef v10 = CGColorCreate(v8, (const CGFloat *)v14);
  [*((id *)this + 22) setBorderColor:v10];
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  id v11 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  char v12 = (const void *)*((void *)this + 23);
  *((void *)this + 23) = v11;
  if (v12)
  {
    CFRelease(v12);
    id v11 = (id)*((void *)this + 23);
  }
  objc_msgSend(v11, "setDelegate:", objc_msgSend(MEMORY[0x1E4FB61C8], "shared"));
  objc_msgSend(*((id *)this + 23), "setAnchorPoint:", *v6, v6[1]);
  *(_OWORD *)components = xmmword_1994F6D78;
  long long v16 = unk_1994F6D88;
  CGColorRef v13 = CGColorCreate(v8, components);
  [*((id *)this + 23) setBorderColor:v13];
  if (v13) {
    CFRelease(v13);
  }
}

void sub_198D5F88C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::~RemoteLayerTreeDrawingAreaProxy(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  *(void *)this = &unk_1EE9D1900;
  *((void *)this + 2) = &unk_1EE9D1AA8;
  uint64_t v2 = (const void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v3) {
    CFRelease(v3);
  }
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 21, 0);
  uint64_t v5 = (unsigned int **)*((void *)this + 16);
  if (v5) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v5, v4);
  }
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 9, 0);

  WebKit::DrawingAreaProxy::~DrawingAreaProxy(this, v6);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::addRemotePageDrawingAreaProxy(WebKit::RemoteLayerTreeDrawingAreaProxy *this, WebKit::RemotePageDrawingAreaProxy *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)((char *)this + 128);
  memset(&v35[4], 0, 32);
  unsigned int v4 = *((_DWORD *)this + 34);
  unsigned int v5 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 34) = v4 + 1;
  if (v4 > v5) {
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)this + 16, a2);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  double v7 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v7, 1u);
  atomic_fetch_add(v7, 1u);
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  uint64_t v8 = *v3;
  if (*v3
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v3, 0), (uint64_t v8 = *v3) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  id v11 = 0;
  unint64_t v12 = ((unint64_t)v7 + ~((void)v7 << 32)) ^ (((unint64_t)v7 + ~((void)v7 << 32)) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = (v14 >> 31) ^ v14;
  for (int i = 1; ; ++i)
  {
    unsigned int v17 = v15 & v10;
    uint64_t v18 = (unsigned int **)(v8 + 48 * v17);
    uint64_t v19 = (atomic_uint *)*v18;
    if (*v18 != (unsigned int *)-1) {
      break;
    }
    id v11 = (unsigned int **)(v8 + 48 * v17);
LABEL_15:
    unsigned int v15 = i + v17;
  }
  if (!v19)
  {
    if (v11)
    {
      WTF *v11 = 0;
      v11[1] = (unsigned int *)3;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      --*(_DWORD *)(*v3 - 16);
      WTF *v11 = (unsigned int *)v7;
    }
    else
    {
      WTF::StringImpl *v18 = (unsigned int *)v7;
      id v11 = (unsigned int **)(v8 + 48 * v17);
    }
    *((_DWORD *)v11 + 2) = 3;
    long long v24 = *(_OWORD *)v35;
    long long v25 = *(_OWORD *)&v35[16];
    *((_DWORD *)v11 + 11) = *(_DWORD *)&v35[32];
    *(_OWORD *)((char *)v11 + 28) = v25;
    *(_OWORD *)((char *)v11 + 12) = v24;
    uint64_t v26 = *v3;
    if (*v3) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v28 = *v3;
    if (*v3) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
      {
LABEL_33:
        id v11 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v3, v11);
        uint64_t v28 = *v3;
        if (*v3) {
          LODWORD(v31) = *(_DWORD *)(v28 - 4);
        }
        else {
          LODWORD(v31) = 0;
        }
      }
    }
    else if (3 * v31 <= 4 * v30)
    {
      goto LABEL_33;
    }
    uint64_t v21 = v28 + 48 * v31;
    uint64_t v18 = v11;
    return WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v34, v3, (uint64_t)v18, v21);
  }
  if (v19 != v7) {
    goto LABEL_15;
  }
  if (v9) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = *(_DWORD *)(v8 - 4);
  }
  uint64_t v21 = v8 + 48 * v20;
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7);
    uint64_t v22 = (WTF *)v7;
    char v33 = (unsigned int **)(v8 + 48 * v17);
    uint64_t v23 = v8 + 48 * v20;
    WTF::fastFree(v22, v11);
    uint64_t v21 = v23;
    uint64_t v18 = v33;
  }
  return WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v34, v3, (uint64_t)v18, v21);
}

void sub_198D5FC68(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int **WebKit::RemoteLayerTreeDrawingAreaProxy::removeRemotePageDrawingAreaProxy(unsigned int **this, WebKit::RemotePageDrawingAreaProxy *a2)
{
  uint64_t v3 = (uint64_t *)(this + 16);
  unsigned int v4 = *((_DWORD *)this + 34);
  unsigned int v5 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 34) = v4 + 1;
  if (v4 > v5) {
    this = WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::removeNullReferences(this + 16, a2);
  }
  uint64_t v6 = *((void *)a2 + 1);
  if (v6)
  {
    if (*(void *)(v6 + 8))
    {
      uint64_t v7 = *v3;
      if (*v3)
      {
        int v8 = *(_DWORD *)(v7 - 8);
        unint64_t v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
        for (int i = 1; ; ++i)
        {
          unint64_t v14 = (unsigned int ***)(v7 + 48 * v12);
          unsigned int v15 = *v14;
          if (*v14 != (unsigned int **)-1)
          {
            if (!v15)
            {
              unsigned int v16 = *(_DWORD *)(v7 - 4);
              unint64_t v14 = (unsigned int ***)(v7 + 48 * v16);
              goto LABEL_13;
            }
            if (v15 == (unsigned int **)v6) {
              break;
            }
          }
          unsigned int v12 = (v12 + i) & v8;
        }
        unsigned int v16 = *(_DWORD *)(v7 - 4);
LABEL_13:
        if ((unsigned int ***)(v7 + 48 * v16) != v14)
        {
          this = *v14;
          void *v14 = 0;
          if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            this = (unsigned int **)WTF::fastFree((WTF *)this, a2);
          }
          void *v14 = (unsigned int **)-1;
          ++*(_DWORD *)(*v3 - 16);
          uint64_t v17 = *v3;
          if (*v3) {
            int v18 = *(_DWORD *)(v17 - 12) - 1;
          }
          else {
            int v18 = -1;
          }
          *(_DWORD *)(v17 - 12) = v18;
          uint64_t v19 = *v3;
          if (*v3)
          {
            unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
            unsigned int v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9)
            {
              return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v3, v21 >> 1, 0);
            }
          }
        }
      }
    }
  }
  return this;
}

unsigned int *WebKit::RemoteLayerTreeDrawingAreaProxy::detachRemoteLayerTreeHost@<X0>(WebKit::RemoteLayerTreeDrawingAreaProxy *this@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unsigned int v5 = (unsigned int **)*((void *)this + 9);
  uint64_t result = *v5;
  *unsigned int v5 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  uint64_t v7 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  *a3 = v7;
  return result;
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::sizeDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(unsigned char *)(v2 + 801) && *(unsigned char *)(v2 + 800))
  {
    uint64_t v4 = *(void *)(v2 + 248);
    if (v4)
    {
      unsigned int v5 = *(WebCore::ScrollingTree **)(v4 + 24);
      if (v5) {
        WebCore::ScrollingTree::viewSizeDidChange(v5);
      }
    }
    if (!*((unsigned char *)this + 80))
    {
      WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(this);
    }
  }
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  *((void *)this + 19) = *(void *)(*(void *)(v3 + 32) + 836);
  unsigned int v5 = (int *)((char *)this + 56);
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 20) = *(void *)(*(void *)(v3 + 32) + 1764);
  *((void *)this + 18) = v4;
  *((unsigned char *)this + 80) = 1;
  int v19 = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v6 = (char *)this + 16;
  uint64_t v7 = (atomic_uint *)*((void *)this + 1);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v6 + 56))(v6);
  unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v9 = 33;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unsigned int v21 = v9;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v9, v5);
  unint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v11)
  {
    *unint64_t v10 = 0;
    IPC::Encoder::addAttachment((uint64_t)v9, (unint64_t)&v19);
    unsigned int v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v12 = &unk_1EE9D1DA0;
    v12[1] = v7;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v20[0] = v12;
    v20[1] = v13;
    (*(void (**)(char *, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v21, v20, 0);
    uint64_t v15 = v20[0];
    v20[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    unsigned int v16 = v21;
    unsigned int v21 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v19);
    if (v2) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void sub_198D60140(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13)
{
  uint64_t v16 = a11;
  a11 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = a13;
  a13 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (v14) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::remotePageProcessDidTerminate(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 72)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(*(void *)(result + 40) + 8);
  uint64_t v4 = v3 ? v3 - 16 : 0;
  uint64_t v5 = *(void *)(v4 + 248);
  if (!v5) {
    return result;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 152))(v5);
  uint64_t v7 = *(uint64_t **)(v2 + 72);
  uint64_t v8 = v7 + 5;
  uint64_t v9 = v7[5];
  unint64_t v10 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9, a2);
  if (v9) {
    uint64_t v11 = (void *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 == v10)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v12 = v10[1];
    v10[1] = 0;
    uint64_t v27 = v12;
    if (*v8)
    {
      uint64_t v13 = *v8 + 16 * *(unsigned int *)(*v8 - 4);
      if ((void *)v13 == v10) {
        goto LABEL_19;
      }
LABEL_17:
      if ((void *)v13 != v10) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v7 + 5, v10);
      }
      goto LABEL_19;
    }
    if (v10)
    {
      uint64_t v13 = 0;
      goto LABEL_17;
    }
  }
LABEL_19:
  uint64_t v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(&v27);
  uint64_t v16 = (uint64_t *)v14;
  uint64_t v17 = v15;
  uint64_t v18 = v27;
  if (v27) {
    int v19 = (uint64_t *)(v27 + 16 * *(unsigned int *)(v27 - 4));
  }
  else {
    int v19 = 0;
  }
  if (v19 != (uint64_t *)v14)
  {
    do
    {
      uint64_t v20 = *v16;
      uint64_t v21 = v16[1];
      v25[0] = *v16;
      v25[1] = v21;
      char v26 = 1;
      uint64_t v22 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v7 + 2, v25);
      if (v22) {
        [*(id *)(v22 + 48) removeFromSuperview];
      }
      WebKit::RemoteLayerTreeHost::layerWillBeRemoved(v7, a2, v20, v21);
      while (1)
      {
        v16 += 2;
        if (v16 == v17) {
          break;
        }
        if (*(_OWORD *)v16 != 0 && v16[1] != -1) {
          goto LABEL_33;
        }
      }
      uint64_t v16 = v17;
LABEL_33:
      ;
    }
    while (v16 != v19);
    uint64_t v18 = v27;
  }
  if (v18) {
    WTF::fastFree((WTF *)(v18 - 16), v15);
  }
  long long v24 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 160);

  return v24(v5);
}

void sub_198D60450(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::viewWillStartLiveResize(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 40) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v2 + 248);
  if (v3)
  {
    this = *(void *)(v3 + 24);
    if (this) {
      return MEMORY[0x1F416D578]();
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::viewWillEndLiveResize(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 40) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v2 + 248);
  if (v3)
  {
    this = *(void *)(v3 + 24);
    if (this) {
      return MEMORY[0x1F416D558]();
    }
  }
  return this;
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::asyncSetLayerContents(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::IOSurface *a4, void *a5)
{
  uint64_t v7 = *(void *)(a1 + 72);
  v13[0] = a2;
  v13[1] = a3;
  char v14 = 1;
  uint64_t v8 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(v7 + 16), v13);
  if (v8)
  {
    uint64_t v9 = v8;
    int v10 = WebKit::RemoteLayerTreeHost::layerContentsType(*(WebKit::RemoteLayerTreeHost **)v7);
    WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(a4, v10, &cf);
    [*(id *)(v9 + 40) setContents:cf];
    *(void *)(v9 + 224) = *a5;
    *(unsigned char *)(v9 + 232) = 1;
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
}

void sub_198D60578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t WebKit::RemoteLayerTreeDrawingAreaProxy::indicatorLocation(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1 = (char *)this - 16;
  if (!this) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *((void *)v1 + 4);
  double v3 = 10.0 / *(double *)(v2 + 2440);
  *(float *)&double v3 = v3;
  float32x2_t v4 = (float32x2_t)vbic_s8(*(int8x8_t *)(v2 + 2296), (int8x8_t)vcltz_f32(*(float32x2_t *)(v2 + 2296)));
  return vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v2 + 2280), v4), *(int8x8_t *)(v2 + 2280), (int8x8_t)v4), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v3, 0));
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay((uint64_t)this, 0);
}

WTF::MonotonicTime *WebKit::RemoteLayerTreeDrawingAreaProxy::waitForDidUpdateActivityState(WTF::MonotonicTime *this, unint64_t a2, WebKit::WebProcessProxy *a3)
{
  if (!a2) {
    return this;
  }
  float32x2_t v4 = (atomic_uchar *volatile *)*((void *)a3 + 18);
  if (!v4) {
    return this;
  }
  uint64_t v5 = (uint64_t)this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v27, v4);
  uint64_t v6 = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)v5, v27);
  if (*(_DWORD *)v6 == 1) {
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, v27);
  }
  if ((byte_1EB359AE1 & 1) == 0)
  {
LABEL_32:
    long long v25 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"WebKitOverrideActivityStateUpdateTimeout");
    if (v25) {
      [v25 doubleValue];
    }
    else {
      double v26 = 0.25;
    }
    qword_1EB359AE8 = *(void *)&v26;
    byte_1EB359AE1 = 1;
  }
  uint64_t v7 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
  uint64_t v8 = *(void *)(v5 + 8);
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  }
  this = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  double v10 = v9;
  while (1)
  {
    CFTypeRef v11 = v27;
    uint64_t v12 = *(void *)(v5 + 24);
    uint64_t v13 = (WTF::ApproximateTime *)WTF::MonotonicTime::now(this);
    double v15 = v14 - v10;
    double v16 = *(double *)&qword_1EB359AE8;
    double v17 = vabdd_f64(*(double *)&qword_1EB359AE8, v14 - v10);
    double v18 = INFINITY;
    if (v17 != INFINITY)
    {
      WTF::ApproximateTime::now(v13);
      double v18 = v16 - v15 + v19;
    }
    this = (WTF::MonotonicTime *)IPC::Connection::waitForMessage((atomic_uchar *volatile **)v11, 0x46Au, v12, 1, (uint64_t)&v28, v18);
    if (v29)
    {
      if (v29 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        goto LABEL_32;
      }
      int v21 = v28;
      uint64_t v22 = 1;
LABEL_18:
      this = (WTF::MonotonicTime *)((uint64_t (*)(char *, uint64_t *))off_1EE9D1DB8[v22])(&v30, &v28);
      goto LABEL_19;
    }
    unsigned __int8 v23 = atomic_load((unsigned __int8 *)v11 + 33);
    uint64_t v22 = v29;
    if (v23)
    {
      this = (WTF::MonotonicTime *)(*(uint64_t (**)(void, IPC::Connection *, uint64_t))(**((void **)v11 + 1)
                                                                                                 + 16))(*((void *)v11 + 1), v11, v28);
      int v21 = 0;
      uint64_t v22 = v29;
    }
    else
    {
      int v21 = 1;
    }
    if (v22 != 0xFFFFFFFFLL) {
      goto LABEL_18;
    }
LABEL_19:
    if (v21) {
      break;
    }
    if (!v8) {
      goto LABEL_28;
    }
    if (!*(void *)(v8 + 8) || *(void *)(v6 + 32) >= a2) {
      goto LABEL_26;
    }
    if (*(_DWORD *)v6 == 1) {
      this = (WTF::MonotonicTime *)WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, v27);
    }
  }
  if (!v8) {
    goto LABEL_28;
  }
LABEL_26:
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8);
    this = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v8, v20);
  }
LABEL_28:
  long long v24 = (atomic_uchar **)v27;
  uint64_t v27 = 0;
  if (v24) {
    return (WTF::MonotonicTime *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v24);
  }
  return this;
}

void sub_198D6084C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uchar **a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::hideContentUntilPendingUpdate(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 3);
  float32x2_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float32x2_t v4 = 28;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  double v17 = v4;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9D1DD8;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v5;
  v15[1] = v6;
  char v16 = 1;
  int v8 = WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v17, 0, (uint64_t)v15, 0);
  if (v16)
  {
    uint64_t v9 = v15[0];
    v15[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  double v10 = v17;
  double v17 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v7);
    WTF::fastFree(v13, v14);
  }
  if (v8) {
    uint64_t v11 = v6;
  }
  else {
    uint64_t v11 = 0;
  }
  *((void *)this + 24) = v11;
  return WebKit::RemoteLayerTreeHost::detachRootLayer(*((void *)this + 9));
}

void sub_198D60A08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeHost::detachRootLayer(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      float32x2_t v4 = *(void **)(v2 + 48);
      if (v4) {
        [v4 removeFromSuperview];
      }
      else {
        [*(id *)(v2 + 40) removeFromSuperlayer];
      }
      this = *(void *)(v3 + 8);
      *(void *)(v3 + 8) = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v5);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::hideContentUntilAnyUpdate(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return WebKit::RemoteLayerTreeHost::detachRootLayer(*((void *)this + 9));
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::prepareForAppSuspension(WebKit::RemoteLayerTreeDrawingAreaProxy *this, CALayer *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 9) + 8);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0) {
    float32x2_t v4 = *(WebKit **)(v3 + 40);
  }
  else {
    float32x2_t v4 = 0;
  }
  return WebKit::recursivelyMapIOSurfaceBackingStore(v4, a2);
}

BOOL WebKit::RemoteLayerTreeDrawingAreaProxy::hasVisibleContent(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 9) + 8);
  return v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && *(void *)(v2 + 40) != 0;
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::minimumSizeForAutoLayoutDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(unsigned char *)(v2 + 801) && *(unsigned char *)(v2 + 800) && !*((unsigned char *)this + 80)) {
    WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(this);
  }
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::sizeToContentAutoSizeMaximumSizeDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(unsigned char *)(v2 + 801) && *(unsigned char *)(v2 + 800) && !*((unsigned char *)this + 80)) {
    WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(this);
  }
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereAddedToNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(void, uint64_t))(**(void **)(v4 + 248) + 168))(*(void *)(v4 + 248), a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void sub_198D60C6C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereRemovedFromNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(void, uint64_t))(**(void **)(v4 + 248) + 176))(*(void *)(v4 + 248), a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void sub_198D60D1C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeHost::~RemoteLayerTreeHost(WebKit::RemoteLayerTreeHost *this, void *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 48);
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v5 = *(unsigned int *)(v3 - 4);
    uint64_t v6 = v3 + 24 * v5;
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v7 = *((void *)this + 6);
      if (v5)
      {
        uint64_t v8 = 24 * v5;
        uint64_t v7 = *((void *)this + 6);
        while (*(_OWORD *)v7 == 0 || *(void *)(v7 + 8) == -1)
        {
          v7 += 24;
          v8 -= 24;
          if (!v8)
          {
            uint64_t v7 = v6;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    uint64_t v7 = v3 + 24 * v5;
  }
  else
  {
    uint64_t v7 = 0;
    LODWORD(v5) = 0;
  }
  uint64_t v6 = v3 + 24 * v5;
  if (v3)
  {
LABEL_12:
    uint64_t v10 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_17;
  }
  uint64_t v10 = 0;
LABEL_17:
  while (v7 != v10)
  {
    [*(id *)(v7 + 16) invalidate];
    uint64_t v11 = v7 + 24;
    uint64_t v7 = v6;
    if (v11 != v6)
    {
      uint64_t v7 = v11;
      while (*(_OWORD *)v7 == 0 || *(void *)(v7 + 8) == -1)
      {
        v7 += 24;
        if (v7 == v6)
        {
          uint64_t v7 = v6;
          break;
        }
      }
    }
  }
  uint64_t v13 = *((void *)this + 2);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 - 4);
    double v15 = (void *)(v13 + 24 * v14);
    if (*(_DWORD *)(v13 - 12))
    {
      char v16 = (void *)*((void *)this + 2);
      if (v14)
      {
        uint64_t v17 = 24 * v14;
        char v16 = (void *)*((void *)this + 2);
        while (*(_OWORD *)v16 == 0 || v16[1] == -1)
        {
          v16 += 3;
          v17 -= 24;
          if (!v17)
          {
            char v16 = v15;
            goto LABEL_39;
          }
        }
      }
      goto LABEL_39;
    }
    char v16 = (void *)(v13 + 24 * v14);
  }
  else
  {
    char v16 = 0;
    LODWORD(v14) = 0;
  }
  double v15 = (void *)(v13 + 24 * v14);
  if (v13)
  {
LABEL_39:
    double v19 = (void *)(v13 + 24 * *(unsigned int *)(v13 - 4));
    goto LABEL_44;
  }
  double v19 = 0;
LABEL_44:
  if (v19 == v16) {
    goto LABEL_66;
  }
  do
  {
    uint64_t v20 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v4, v16);
    if (*v4)
    {
      uint64_t v21 = *v4 + 24 * *(unsigned int *)(*v4 - 4);
      if ((uint64_t *)v21 == v20) {
        goto LABEL_52;
      }
    }
    else
    {
      if (!v20) {
        goto LABEL_52;
      }
      uint64_t v21 = 0;
    }
    if ((uint64_t *)v21 != v20) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v4, v20);
    }
LABEL_52:
    uint64_t v22 = v16[2];
    unsigned __int8 v23 = *(void **)(v22 + 48);
    if (v23) {
      [v23 removeFromSuperview];
    }
    else {
      [*(id *)(v22 + 40) removeFromSuperlayer];
    }
    long long v24 = v16 + 3;
    char v16 = v15;
    if (v24 != v15)
    {
      char v16 = v24;
      while (*(_OWORD *)v16 == 0 || v16[1] == -1)
      {
        v16 += 3;
        if (v16 == v15)
        {
          char v16 = v15;
          break;
        }
      }
    }
  }
  while (v16 != v19);
  uint64_t v13 = *((void *)this + 2);
LABEL_66:
  if (v13)
  {
    *((void *)this + 2) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v13, a2);
  }
  double v26 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v26);
    WTF::fastFree((WTF *)v26, a2);
  }
  uint64_t v27 = *((void *)this + 7);
  if (v27) {
    WTF::fastFree((WTF *)(v27 - 16), a2);
  }
  if (*v4) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(*v4, a2);
  }
  uint64_t v28 = *((void *)this + 5);
  if (v28) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v28, a2);
  }
  uint64_t v29 = *((void *)this + 4);
  if (v29) {
    WTF::fastFree((WTF *)(v29 - 16), a2);
  }
  uint64_t v30 = *((void *)this + 3);
  if (v30) {
    WTF::fastFree((WTF *)(v30 - 16), a2);
  }
  uint64_t v31 = *((void *)this + 2);
  if (v31) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v31, a2);
  }
  int v32 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, a2);
  }
  char v33 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v33)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, a2);
    }
  }
}

void sub_198D61054(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 56);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  if (*v3) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(*v3, a2);
  }
  uint64_t v6 = *(void *)(v2 + 40);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *(void *)(v2 + 32);
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  uint64_t v8 = *(void *)(v2 + 24);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v9, a2);
  }
  uint64_t v10 = *(unsigned int **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, a2);
  }
  uint64_t v11 = *(unsigned int **)v2;
  *(void *)uint64_t v2 = 0;
  if (v11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeHost::threadedAnimationResolutionEnabled(WebKit::RemoteLayerTreeHost *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)this + 8) + 40) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 272);
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, a3);
}

void WebKit::RemoteLayerTreeHost::layerWillBeRemoved(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v6 = a1 + 6;
  uint64_t v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1 + 6, &v62);
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t *)a1[6];
  if (v9) {
    v9 += 3 * *((unsigned int *)v9 - 1);
  }
  if (v9 != v7)
  {
    [(id)v7[2] invalidate];
    if (*v6)
    {
      uint64_t v10 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
      if ((uint64_t *)v10 == v8) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_11;
      }
      uint64_t v10 = 0;
    }
    if ((uint64_t *)v10 != v8) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v6, v8);
    }
  }
LABEL_11:
  uint64_t v12 = a1 + 2;
  uint64_t v11 = a1[2];
  if (!v11) {
    goto LABEL_80;
  }
  int v13 = *(_DWORD *)(v11 - 8);
  LODWORD(v60[0]) = -1640531527;
  WORD2(v60[0]) = 0;
  BYTE6(v60[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)v60, &v62);
  unsigned int v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v60) & v13;
  uint64_t v15 = v11 + 24 * v14;
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  if (*(void *)v15 == v62 && v17 == v63)
  {
LABEL_23:
    uint64_t v21 = *v12;
    if (!*v12) {
      goto LABEL_28;
    }
  }
  else
  {
    int v19 = 1;
    while (v16 | v17)
    {
      unsigned int v14 = (v14 + v19) & v13;
      uint64_t v15 = v11 + 24 * v14;
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = *(void *)(v15 + 8);
      ++v19;
      if (*(void *)v15 == v62 && v17 == v63) {
        goto LABEL_23;
      }
    }
    uint64_t v21 = *v12;
    if (!*v12) {
      goto LABEL_80;
    }
    uint64_t v15 = v21 + 24 * *(unsigned int *)(v21 - 4);
  }
  v21 += 24 * *(unsigned int *)(v21 - 4);
LABEL_28:
  if (v21 != v15)
  {
    uint64_t v22 = *(WebKit::RemoteLayerTreeNode **)(v15 + 16);
    *(void *)(v15 + 16) = 0;
    uint64_t v23 = *v12;
    if (!*v12 || (v23 += 24 * *(unsigned int *)(v23 - 4), v23 != v15))
    {
      if (v23 != v15)
      {
        *(void *)uint64_t v15 = -1;
        *(void *)(v15 + 8) = -1;
        std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)(v15 + 16), 0);
        ++*(_DWORD *)(*v12 - 16);
        uint64_t v24 = *v12;
        int v25 = *v12 ? *(_DWORD *)(v24 - 12) - 1 : -1;
        *(_DWORD *)(v24 - 12) = v25;
        uint64_t v26 = *v12;
        if (*v12)
        {
          unsigned int v27 = 6 * *(_DWORD *)(v26 - 12);
          unsigned int v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1 + 2, v28 >> 1);
          }
        }
      }
    }
    if (v22)
    {
      if (*a1) {
        uint64_t v30 = *(void *)(*a1 + 8);
      }
      else {
        uint64_t v30 = 0;
      }
      WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereRemovedFromNode(v30, (uint64_t)v22);
      uint64_t v31 = *((void *)v22 + 3);
      if (v31)
      {
        uint64_t v32 = a1[3];
        char v33 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v32, v31);
        if (v32)
        {
          unint64_t v34 = (uint64_t *)(v32 + 24 * *(unsigned int *)(v32 - 4));
          if (v34 == v33) {
            goto LABEL_54;
          }
        }
        else
        {
          if (!v33) {
            goto LABEL_54;
          }
          unint64_t v34 = 0;
        }
        if (v34 != v33) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1 + 3, v33);
        }
      }
LABEL_54:
      uint64_t v35 = *((void *)v22 + 4);
      if (!v35) {
        goto LABEL_79;
      }
      uint64_t v36 = a1[4];
      int v37 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v36, v35);
      if (v36)
      {
        if ((uint64_t *)(v36 + 24 * *(unsigned int *)(v36 - 4)) == v37) {
          goto LABEL_79;
        }
      }
      else if (!v37)
      {
        goto LABEL_79;
      }
      uint64_t v39 = v37[1];
      uint64_t v38 = v37[2];
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1 + 4, v37);
      v60[0] = v39;
      v60[1] = v38;
      char v61 = 1;
      int v40 = a1 + 5;
      uint64_t v41 = a1[5];
      uint64_t v42 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v41, a2);
      float32x4_t v43 = (void *)v42;
      if (v41) {
        uint64_t v44 = v41 + 16 * *(unsigned int *)(v41 - 4);
      }
      else {
        uint64_t v44 = 0;
      }
      if (v44 == v42) {
        goto LABEL_79;
      }
      uint64_t v45 = (uint64_t *)(v42 + 8);
      uint64_t v46 = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(v42 + 8), v60);
      uint64_t v47 = *v45;
      if (*v45)
      {
        uint64_t v48 = (void *)(v47 + 16 * *(unsigned int *)(v47 - 4));
        if (v48 == v46) {
          goto LABEL_71;
        }
      }
      else
      {
        if (!v46) {
          goto LABEL_72;
        }
        uint64_t v48 = 0;
      }
      if (v48 != v46)
      {
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v43 + 1, v46);
        uint64_t v47 = *v45;
      }
      if (v47)
      {
LABEL_71:
        if (*(_DWORD *)(v47 - 12)) {
          goto LABEL_79;
        }
      }
LABEL_72:
      if (*v40)
      {
        uint64_t v49 = *v40 + 16 * *(unsigned int *)(*v40 - 4);
        if ((void *)v49 == v43) {
          goto LABEL_79;
        }
LABEL_77:
        if ((void *)v49 != v43) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 5, v43);
        }
        goto LABEL_79;
      }
      if (v43)
      {
        uint64_t v49 = 0;
        goto LABEL_77;
      }
LABEL_79:
      WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(v22);
      WTF::fastFree(v50, v51);
    }
  }
LABEL_80:
  unint64_t v52 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1 + 7, &v62);
  float32x4_t v53 = v52;
  uint64_t v54 = a1[7];
  if (v54) {
    float32x4_t v55 = (uint64_t *)(v54 + 24 * *(unsigned int *)(v54 - 4));
  }
  else {
    float32x4_t v55 = 0;
  }
  if (v55 != v52)
  {
    uint64_t v56 = *(void *)(*(void *)(*(void *)(*a1 + 8) + 40) + 8);
    if (v56) {
      uint64_t v57 = v56 - 16;
    }
    else {
      uint64_t v57 = 0;
    }
    BOOL v58 = *(void **)(v57 + 432);
    if (v58)
    {
      WebKit::VideoPresentationManagerProxy::removeClientForContext(v58, v53[2]);
      uint64_t v54 = a1[7];
    }
    if (v54)
    {
      uint64_t v59 = (uint64_t *)(v54 + 24 * *(unsigned int *)(v54 - 4));
      if (v59 == v53) {
        return;
      }
    }
    else
    {
      if (!v53) {
        return;
      }
      uint64_t v59 = 0;
    }
    if (v59 != v53) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(a1 + 7, v53);
    }
  }
}

void sub_198D615B4(_Unwind_Exception *a1)
{
  WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(v1);
  WTF::fastFree(v3, v4);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeHost::animationDidStart(uint64_t *result, long long *a2, uint64_t a3, double a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!*result) {
    return result;
  }
  if (!*(void *)(*result + 8)) {
    return result;
  }
  long long v28 = *a2;
  uint64_t v29 = *((void *)a2 + 2);
  if (!(_BYTE)v29) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t result = (uint64_t *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(result + 2, &v28);
  if (!result) {
    return result;
  }
  uint64_t v8 = (void *)result[5];
  if (!v8) {
    return result;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v9 = objc_msgSend(v8, "animationKeys", 0);
  uint64_t result = (uint64_t *)[v9 countByEnumeratingWithState:&v23 objects:v31 count:16];
  uint64_t v10 = result;
  if (!result) {
    return result;
  }
  uint64_t v11 = *(void *)v24;
  while (2)
  {
    uint64_t v12 = 0;
    do
    {
      if (*(void *)v24 != v11) {
        objc_enumerationMutation(v9);
      }
      uint64_t v13 = *(void *)(*((void *)&v23 + 1) + 8 * (void)v12);
      if ([v8 animationForKey:v13] == a3)
      {
        MEMORY[0x19972EAD0](&v28, v13);
        uint64_t result = (uint64_t *)v28;
        unsigned int v27 = (WTF::StringImpl *)v28;
        if (!(void)v28) {
          return result;
        }
        if (*(_DWORD *)(v28 + 4))
        {
          if (*v7) {
            uint64_t v15 = *(void *)(*v7 + 8);
          }
          else {
            uint64_t v15 = 0;
          }
          if (!*((unsigned char *)a2 + 16)) {
            __break(1u);
          }
          long long v28 = *a2;
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t v16 = v15 + 16;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v16);
          int v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)int v19 = 25;
          *((void *)v19 + 1) = v18;
          *((void *)v19 + 66) = (char *)v19 + 16;
          *((void *)v19 + 67) = 512;
          *((void *)v19 + 68) = 0;
          *((void *)v19 + 70) = 0;
          *((void *)v19 + 69) = 0;
          IPC::Encoder::encodeHeader(v19);
          uint64_t v30 = v19;
          IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v19, (uint64_t *)&v28);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)&v27);
          IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v19, a4);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v16 + 32))(v16, &v30, 0);
          uint64_t v20 = v30;
          uint64_t v30 = 0;
          if (v20)
          {
            IPC::Encoder::~Encoder(v20, v14);
            WTF::fastFree(v21, v22);
          }
          uint64_t result = (uint64_t *)v27;
          unsigned int v27 = 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unsigned int v27 = 0;
        }
        if (*(_DWORD *)result == 2) {
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
        }
        *(_DWORD *)result -= 2;
        return result;
      }
      uint64_t v12 = (uint64_t *)((char *)v12 + 1);
    }
    while (v10 != v12);
    uint64_t result = (uint64_t *)[v9 countByEnumeratingWithState:&v23 objects:v31 count:16];
    uint64_t v10 = result;
    if (result) {
      continue;
    }
    break;
  }
  return result;
}

void sub_198D61890(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,IPC::Encoder *a23)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::RemoteLayerTreeHost::animationDidEnd(uint64_t *result, long long *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*result) {
    return result;
  }
  if (!*(void *)(*result + 8)) {
    return result;
  }
  long long v26 = *a2;
  uint64_t v27 = *((void *)a2 + 2);
  if (!(_BYTE)v27) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(result + 2, &v26);
  if (!result) {
    return result;
  }
  uint64_t v6 = (void *)result[5];
  if (!v6) {
    return result;
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v7 = objc_msgSend(v6, "animationKeys", 0);
  uint64_t result = (uint64_t *)[v7 countByEnumeratingWithState:&v21 objects:v29 count:16];
  uint64_t v8 = result;
  if (!result) {
    return result;
  }
  uint64_t v9 = *(void *)v22;
  while (2)
  {
    uint64_t v10 = 0;
    do
    {
      if (*(void *)v22 != v9) {
        objc_enumerationMutation(v7);
      }
      uint64_t v11 = *(void *)(*((void *)&v21 + 1) + 8 * (void)v10);
      if ([v6 animationForKey:v11] == a3)
      {
        MEMORY[0x19972EAD0](&v26, v11);
        uint64_t result = (uint64_t *)v26;
        long long v25 = (WTF::StringImpl *)v26;
        if (!(void)v26) {
          return result;
        }
        if (*(_DWORD *)(v26 + 4))
        {
          if (*v5) {
            uint64_t v13 = *(void *)(*v5 + 8);
          }
          else {
            uint64_t v13 = 0;
          }
          if (!*((unsigned char *)a2 + 16)) {
            __break(1u);
          }
          long long v26 = *a2;
          uint64_t v15 = *(void *)(v13 + 16);
          uint64_t v14 = v13 + 16;
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
          uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v17 = 24;
          *((void *)v17 + 1) = v16;
          *((void *)v17 + 66) = (char *)v17 + 16;
          *((void *)v17 + 67) = 512;
          *((void *)v17 + 68) = 0;
          *((void *)v17 + 70) = 0;
          *((void *)v17 + 69) = 0;
          IPC::Encoder::encodeHeader(v17);
          long long v28 = v17;
          IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v17, (uint64_t *)&v26);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v25);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v14 + 32))(v14, &v28, 0);
          uint64_t v18 = v28;
          long long v28 = 0;
          if (v18)
          {
            IPC::Encoder::~Encoder(v18, v12);
            WTF::fastFree(v19, v20);
          }
          uint64_t result = (uint64_t *)v25;
          long long v25 = 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v25 = 0;
        }
        if (*(_DWORD *)result == 2) {
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
        }
        *(_DWORD *)result -= 2;
        return result;
      }
      uint64_t v10 = (uint64_t *)((char *)v10 + 1);
    }
    while (v8 != v10);
    uint64_t result = (uint64_t *)[v7 countByEnumeratingWithState:&v21 objects:v29 count:16];
    uint64_t v8 = result;
    if (result) {
      continue;
    }
    break;
  }
  return result;
}

void sub_198D61B7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,IPC::Encoder *a23)
{
  if (a23)
  {
    IPC::Encoder::~Encoder(a23, a2);
    WTF::fastFree(v24, v25);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::recursivelyMapIOSurfaceBackingStore(WebKit *this, CALayer *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ([(WebKit *)this contents])
  {
    CFTypeID v3 = CFGetTypeID((CFTypeRef)[(WebKit *)this contents]);
    if (v3 == CAMachPortGetTypeID())
    {
      [(WebKit *)this contents];
      Port = (WTF::MachSendRight *)CAMachPortGetPort();
      WTF::MachSendRight::create(Port);
      WebCore::IOSurface::createFromSendRight();
      if (v19) {
        uint64_t v5 = *((void *)v19 + 6);
      }
      else {
        uint64_t v5 = 0;
      }
      [(WebKit *)this setContents:v5];
      uint64_t v6 = v19;
      int v19 = 0;
      if (v6)
      {
        WebCore::IOSurface::~IOSurface(v6);
        WTF::fastFree(v13, v14);
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
    }
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = (void *)[(WebKit *)this sublayers];
  uint64_t result = [v7 countByEnumeratingWithState:&v15 objects:v21 count:16];
  uint64_t v10 = result;
  if (result)
  {
    uint64_t v11 = *(void *)v16;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v7);
        }
        WebKit::recursivelyMapIOSurfaceBackingStore(*(WebKit **)(*((void *)&v15 + 1) + 8 * v12++), v9);
      }
      while (v10 != v12);
      uint64_t result = [v7 countByEnumeratingWithState:&v15 objects:v21 count:16];
      uint64_t v10 = result;
    }
    while (result);
  }
  return result;
}

void sub_198D61D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WebCore::IOSurface *a18, int a19, char a20)
{
  if (a18)
  {
    WebCore::IOSurface::~IOSurface(a18);
    WTF::fastFree(v21, v22);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a20);
  _Unwind_Resume(a1);
}

void WebKit::NetworkProcessProxy::XPCEventHandler::~XPCEventHandler(WebKit::NetworkProcessProxy::XPCEventHandler *this, void *a2)
{
  *(void *)this = &unk_1EE9D18B0;
  CFTypeID v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D18B0;
  CFTypeID v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::RemoteAcceleratedEffectStack::~RemoteAcceleratedEffectStack(WebKit::RemoteAcceleratedEffectStack *this, void *a2)
{
  WebCore::AcceleratedEffectStack::~AcceleratedEffectStack(this, a2);

  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebKit::DrawingAreaProxy::displayNominalFramesPerSecond(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::shouldCoalesceVisualEditorStateUpdates(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return 1;
}

uint64_t WebKit::DrawingAreaProxy::shouldSendWheelEventsToEventDispatcher(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::isRemoteLayerTreeDrawingAreaProxyMac(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::isRemoteLayerTreeDrawingAreaProxyIOS(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return 0;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::{lambda(void *,NSNotification *)#1}::__invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t result = *(void *)(v1 + 8);
    if (result)
    {
      char v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationDidEnterBackground>(result, (uint64_t)&v2, 0, 0);
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::{lambda(void *,NSNotification *)#1}::__invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t result = *(void *)(v1 + 8);
    if (result)
    {
      char v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationWillEnterForeground>(result, (uint64_t)&v2, 0, 0);
    }
  }
  return result;
}

WebCore::AcceleratedEffectValues *WebCore::AcceleratedEffectValues::AcceleratedEffectValues(WebCore::AcceleratedEffectValues *this, const WebCore::AcceleratedEffectValues *a2)
{
  long long v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  long long v5 = *((_OWORD *)a2 + 2);
  long long v6 = *((_OWORD *)a2 + 3);
  long long v7 = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 77) = *(_OWORD *)((char *)a2 + 77);
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = v7;
  *((_OWORD *)this + 2) = v5;
  *((_DWORD *)this + 24) = 0;
  uint64_t v8 = (_DWORD *)((char *)this + 96);
  *(_WORD *)((char *)this + 101) = 0;
  unsigned int v9 = *((unsigned __int8 *)a2 + 100);
  *((unsigned char *)this + 100) = v9;
  *((unsigned char *)this + 101) = *((unsigned char *)a2 + 101);
  if (v9 <= 0xD)
  {
    int v10 = 1 << v9;
    if ((v10 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 102) = *((unsigned char *)a2 + 102);
      *uint64_t v8 = *((_DWORD *)a2 + 24);
    }
    else if ((v10 & 0x3003) != 0)
    {
      *uint64_t v8 = 0;
    }
    else
    {
      *uint64_t v8 = *((_DWORD *)a2 + 24);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 96));
    }
  }
  *((_DWORD *)this + 26) = 0;
  uint64_t v11 = (_DWORD *)((char *)this + 104);
  *(_WORD *)((char *)this + 109) = 0;
  unsigned int v12 = *((unsigned __int8 *)a2 + 108);
  *((unsigned char *)this + 108) = v12;
  *((unsigned char *)this + 109) = *((unsigned char *)a2 + 109);
  if (v12 <= 0xD)
  {
    int v13 = 1 << v12;
    if ((v13 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 110) = *((unsigned char *)a2 + 110);
      _DWORD *v11 = *((_DWORD *)a2 + 26);
    }
    else if ((v13 & 0x3003) != 0)
    {
      _DWORD *v11 = 0;
    }
    else
    {
      _DWORD *v11 = *((_DWORD *)a2 + 26);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 104));
    }
  }
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 120, (uint64_t)a2 + 120);
  uint64_t v14 = *((void *)a2 + 17);
  if (v14) {
    ++*(_DWORD *)(v14 + 8);
  }
  *((void *)this + 17) = v14;
  uint64_t v15 = *((void *)a2 + 18);
  if (v15) {
    ++*(_DWORD *)(v15 + 8);
  }
  *((void *)this + 18) = v15;
  uint64_t v16 = *((void *)a2 + 19);
  if (v16) {
    ++*(_DWORD *)(v16 + 8);
  }
  *((void *)this + 19) = v16;
  uint64_t v17 = *((void *)a2 + 20);
  if (v17) {
    ++*(_DWORD *)(v17 + 8);
  }
  *((_DWORD *)this + 42) = 0;
  long long v18 = (_DWORD *)((char *)this + 168);
  *((void *)this + 20) = v17;
  *(_WORD *)((char *)this + 173) = 0;
  unsigned int v19 = *((unsigned __int8 *)a2 + 172);
  *((unsigned char *)this + 172) = v19;
  *((unsigned char *)this + 173) = *((unsigned char *)a2 + 173);
  if (v19 <= 0xD)
  {
    int v20 = 1 << v19;
    if ((v20 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 174) = *((unsigned char *)a2 + 174);
      _DWORD *v18 = *((_DWORD *)a2 + 42);
    }
    else if ((v20 & 0x3003) != 0)
    {
      _DWORD *v18 = 0;
    }
    else
    {
      _DWORD *v18 = *((_DWORD *)a2 + 42);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 168));
    }
  }
  *((_DWORD *)this + 44) = 0;
  long long v21 = (_DWORD *)((char *)this + 176);
  *(_WORD *)((char *)this + 181) = 0;
  unsigned int v22 = *((unsigned __int8 *)a2 + 180);
  *((unsigned char *)this + 180) = v22;
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  if (v22 <= 0xD)
  {
    int v23 = 1 << v22;
    if ((v23 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 182) = *((unsigned char *)a2 + 182);
      _DWORD *v21 = *((_DWORD *)a2 + 44);
    }
    else if ((v23 & 0x3003) != 0)
    {
      _DWORD *v21 = 0;
    }
    else
    {
      _DWORD *v21 = *((_DWORD *)a2 + 44);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 176));
    }
  }
  *((_DWORD *)this + 46) = 0;
  long long v24 = (_DWORD *)((char *)this + 184);
  *(_WORD *)((char *)this + 189) = 0;
  unsigned int v25 = *((unsigned __int8 *)a2 + 188);
  *((unsigned char *)this + 188) = v25;
  *((unsigned char *)this + 189) = *((unsigned char *)a2 + 189);
  if (v25 <= 0xD)
  {
    int v26 = 1 << v25;
    if ((v26 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 190) = *((unsigned char *)a2 + 190);
      *long long v24 = *((_DWORD *)a2 + 46);
    }
    else if ((v26 & 0x3003) != 0)
    {
      *long long v24 = 0;
    }
    else
    {
      *long long v24 = *((_DWORD *)a2 + 46);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 184));
    }
  }
  *((_DWORD *)this + 48) = 0;
  uint64_t v27 = (_DWORD *)((char *)this + 192);
  *(_WORD *)((char *)this + 197) = 0;
  unsigned int v28 = *((unsigned __int8 *)a2 + 196);
  *((unsigned char *)this + 196) = v28;
  *((unsigned char *)this + 197) = *((unsigned char *)a2 + 197);
  if (v28 <= 0xD)
  {
    int v29 = 1 << v28;
    if ((v29 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 198) = *((unsigned char *)a2 + 198);
      *uint64_t v27 = *((_DWORD *)a2 + 48);
    }
    else if ((v29 & 0x3003) != 0)
    {
      *uint64_t v27 = 0;
    }
    else
    {
      *uint64_t v27 = *((_DWORD *)a2 + 48);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 192));
    }
  }
  *((_DWORD *)this + 50) = 0;
  uint64_t v30 = (_DWORD *)((char *)this + 200);
  *(_WORD *)((char *)this + 205) = 0;
  unsigned int v31 = *((unsigned __int8 *)a2 + 204);
  *((unsigned char *)this + 204) = v31;
  *((unsigned char *)this + 205) = *((unsigned char *)a2 + 205);
  if (v31 <= 0xD)
  {
    int v32 = 1 << v31;
    if ((v32 & 0x7FC) != 0)
    {
      *((unsigned char *)this + 206) = *((unsigned char *)a2 + 206);
      *uint64_t v30 = *((_DWORD *)a2 + 50);
    }
    else if ((v32 & 0x3003) != 0)
    {
      *uint64_t v30 = 0;
    }
    else
    {
      *uint64_t v30 = *((_DWORD *)a2 + 50);
      WebCore::Length::ref((WebCore::AcceleratedEffectValues *)((char *)this + 200));
    }
  }
  *((void *)this + 26) = *((void *)a2 + 26);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 216, (uint64_t)a2 + 216);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 232, (uint64_t)a2 + 232);
  return this;
}

void sub_198D62468(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 196) == 11) {
    WebCore::Length::deref(v16);
  }
  if (*(unsigned char *)(v10 + 188) == 11) {
    WebCore::Length::deref(v15);
  }
  if (*(unsigned char *)(v10 + 180) == 11) {
    WebCore::Length::deref(v14);
  }
  if (*(unsigned char *)(v10 + 172) == 11) {
    WebCore::Length::deref(v13);
  }
  long long v18 = *(_DWORD **)(v10 + 160);
  *(void *)(v10 + 160) = 0;
  if (v18)
  {
    if (v18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[2];
    }
  }
  unsigned int v19 = *(_DWORD **)(v10 + 152);
  *(void *)(v10 + 152) = 0;
  if (v19)
  {
    if (v19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
  }
  int v20 = *(_DWORD **)(v10 + 144);
  *(void *)(v10 + 144) = 0;
  if (v20)
  {
    if (v20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
    }
    else {
      --v20[2];
    }
  }
  long long v21 = *(_DWORD **)(v10 + 136);
  *(void *)(v10 + 136) = 0;
  if (v21)
  {
    if (v21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
    }
    else {
      --v21[2];
    }
  }
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
  if (*(unsigned char *)(v10 + 108) == 11) {
    WebCore::Length::deref(v12);
  }
  if (*(unsigned char *)(v10 + 100) == 11) {
    WebCore::Length::deref(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    long long v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      long long v7 = *(uint64_t **)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v7++;
        ++*(_DWORD *)(v9 + 8);
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(unsigned int **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    long long v4 = a1;
    do
    {
      long long v5 = *v4;
      if (*v4 != (unsigned int *)-1)
      {
        void *v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    long long v4 = (const void **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (const void *)-1)
      {
        long long v5 = *v4;
        void *v4 = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    long long v4 = (WebKit::RemoteLayerTreeNode **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteLayerTreeNode *)-1) {
        std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100](v4, 0);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::AcceleratedEffectStack::~AcceleratedEffectStack(WebCore::AcceleratedEffectStack *this, void *a2)
{
  *(void *)this = MEMORY[0x1E4FB6B80] + 16;
  uint64_t v3 = (WebCore::AcceleratedEffectStack *)((char *)this + 16);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, a2);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v4);
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v3, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9D1C88;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D1C88;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#1},void>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 1);
  if (v1)
  {
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v5, v1, *((void *)result + 2));
    uint64_t v3 = v5;
    if (v5)
    {
      if (!*((unsigned char *)v5 + 64))
      {
        *((unsigned char *)v5 + 64) = 1;
        WebKit::ProcessLauncher::launchProcess(v3);
      }
      long long v4 = (atomic_uchar *)*((void *)v3 + 1);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(v4, v2);
    }
  }
  return result;
}

void sub_198D629FC(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D1CB0;
  uint64_t v3 = *(unsigned int **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D1B98[v4])(&v7, a1 + 40);
  }
  *(_DWORD *)(a1 + 48) = -1;
  long long v5 = *(atomic_uchar **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_1,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D1CD8;
  uint64_t v3 = (WTF *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      WTF::fastFree(v3, a2);
    }
    else {
      --*(_DWORD *)v3;
    }
  }
  uint64_t v4 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_1,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D1CD8;
  uint64_t v3 = (WTF *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      WTF::fastFree(v3, a2);
    }
    else {
      --*(_DWORD *)v3;
    }
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_1,void,NSObject  {objcproto13OS_xpc_object}*>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v9, v1, *((void *)result + 2));
    uint64_t v4 = v9;
    if (v9)
    {
      if (*(unsigned char *)(v9 + 104))
      {
        WTF::deallocateSendRightSafely((WTF *)*((unsigned int *)v2 + 6));
        mach_port_mod_refs(*MEMORY[0x1E4F14960], *((_DWORD *)v2 + 6), 1u, -1);
        long long v5 = *(_xpc_connection_s **)(v4 + 24);
        if (v5)
        {
          xpc_connection_cancel(v5);
          uint64_t v6 = *(void **)(v4 + 24);
          if (v6) {
        }
          }
        *(void *)(v4 + 24) = 0;
        v8[0] = 0;
        v8[1] = 0;
        WebKit::ProcessLauncher::didFinishLaunchingProcess(v4, 0, (uint64_t)v8);
      }
      char v7 = *(atomic_uchar **)(v4 + 8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(v7, v3);
    }
  }
  return result;
}

void sub_198D62C60(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D1D00;
  uint64_t v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D1D00;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D1D28;
  uint64_t v2 = (void *)a1[2];
  if (v2) {

  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D1D28;
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3) {

  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, *(void *)(a1 + 16));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D1D50;
  uint64_t v2 = (void *)a1[2];
  if (v2) {

  }
  uint64_t v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D1D78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D1D78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

unsigned int **WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::removeNullReferences(unsigned int **result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)*result;
  if (*result)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4) {
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = (unsigned int ***)(v3 + 48 * v6);
      uint64_t result = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !result[1])
      {
        *uint64_t v8 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = (unsigned int **)WTF::fastFree((WTF *)result, a2);
        }
        *uint64_t v8 = (unsigned int **)-1;
        ++v5;
      }
      --v6;
    }
    while (v7);
    uint64_t v3 = (uint64_t)*v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v9 = (uint64_t)*v2;
      if (*v2) {
        int v10 = *(_DWORD *)(v9 - 12);
      }
      else {
        int v10 = 0;
      }
      *(_DWORD *)(v9 - 12) = v10 - v5;
      uint64_t v3 = (uint64_t)*v2;
    }
    if (v3)
    {
      unsigned int v11 = *(_DWORD *)(v3 - 4);
      uint64_t v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        unsigned int v16 = (v12 - 1) | ((v12 - 1) >> 1) | (((v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        unint64_t v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12) {
            goto LABEL_32;
          }
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_30:
          double v19 = (double)v12;
          double v20 = (double)v18;
          double v21 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v19 = (double)v12;
        double v20 = (double)v18;
        double v21 = 0.416666667;
LABEL_33:
        if (v20 * v21 <= v19) {
          LODWORD(v18) = 2 * v18;
        }
        if (v18 <= 8) {
          unsigned int v22 = 8;
        }
        else {
          unsigned int v22 = v18;
        }
        uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        uint64_t v3 = (uint64_t)*v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          unsigned int v14 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v14 = *(_DWORD *)(v3 - 12);
        int v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_22;
    }
  }
  unsigned int v14 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_25:
  int v15 = v14;
LABEL_26:
  *((_DWORD *)v2 + 3) = 2 * v15;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = (_OWORD *)(v9 + 32);
    do
    {
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 3;
      _OWORD *v12 = 0uLL;
      v12[1] = 0uLL;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v15 = v7;
    do
    {
      unsigned int v16 = (unsigned int **)(v6 + 48 * v13);
      unsigned int v17 = *v16;
      if (*v16 != (unsigned int *)-1)
      {
        if (v17)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = ((unint64_t)v17 + ~((void)v17 << 32)) ^ (((unint64_t)v17 + ~((void)v17 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            int v26 = (unsigned int **)(v18 + 48 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (*v26);
          *int v26 = 0;
          uint64_t v27 = *v16;
          WebCore::Length *v16 = 0;
          *int v26 = v27;
          uint64_t v28 = v18 + 48 * v25;
          uint64_t v29 = v6 + 48 * v13;
          long long v30 = *(_OWORD *)(v29 + 8);
          long long v31 = *(_OWORD *)(v29 + 24);
          *(void *)(v28 + 40) = *(void *)(v29 + 40);
          *(_OWORD *)(v28 + 24) = v31;
          *(_OWORD *)(v28 + 8) = v30;
          int v32 = *v16;
          WebCore::Length *v16 = 0;
          if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v32);
            WTF::fastFree((WTF *)v32, v10);
          }
          if (v16 == a3) {
            unsigned int v14 = v26;
          }
        }
        else
        {
          WebCore::Length *v16 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    unsigned int v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DrawingArea::UpdateGeometry,WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0>(WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D1DA0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DrawingArea::UpdateGeometry,WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0>(WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D1DA0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DrawingArea::UpdateGeometry,WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0>(WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      *(unsigned char *)(v2 + 80) = 0;
      uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 8);
      if (v3) {
        uint64_t v4 = v3 - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      CFRetain(*(CFTypeRef *)(v4 + 8));
      BOOL v5 = *(_DWORD *)(v2 + 144) == *(_DWORD *)(v2 + 56) && *(_DWORD *)(v2 + 148) == *(_DWORD *)(v2 + 60);
      if (!v5
        || ((uint64_t v6 = *(_DWORD **)(v4 + 32), *(_DWORD *)(v2 + 152) == v6[209])
          ? (BOOL v7 = *(_DWORD *)(v2 + 156) == v6[210])
          : (BOOL v7 = 0),
            !v7
         || ((int v8 = v6[441], v9 = v6[442], *(_DWORD *)(v2 + 160) == v8) ? (v10 = *(_DWORD *)(v2 + 164) == v9) : (v10 = 0),
             !v10)))
      {
        WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry((WebKit::RemoteLayerTreeDrawingAreaProxy *)v2);
      }
      if (v3)
      {
        uint64_t v11 = *(const void **)(v4 + 8);
        CFRelease(v11);
      }
    }
  }
}

void sub_198D63680(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + 48);
  *(void *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 6;
    *(void *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a1);
  ++*(_DWORD *)(*(void *)a1 + 8);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      BOOL v10 = (void *)(v4 + 24 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        uint64_t v13 = (*v10 + ~(*v10 << 32)) ^ ((*v10 + ~(*v10 << 32)) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          uint64_t v18 = (void *)(v11 + 24 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (*v18);
        long long v19 = *(_OWORD *)v10;
        void v18[2] = v10[2];
        *(_OWORD *)uint64_t v18 = v19;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 16;
  }
  if (v4 <= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v6 = result;
      BOOL v7 = *(WTF **)result;
      uint64_t v8 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(void *)uint64_t v6 = result;
      if (v8)
      {
        uint64_t v10 = 32 * v8;
        uint64_t v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)v11;
          long long v13 = *((_OWORD *)v11 + 1);
          uint64_t v11 = (WTF *)((char *)v11 + 32);
          *(_OWORD *)uint64_t result = v12;
          *(_OWORD *)(result + 16) = v13;
          result += 32;
          v10 -= 32;
        }
        while (v10);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(void *)uint64_t v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  unsigned int v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 24 * (v6 & v5));
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      unsigned int v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 24 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    }
    return 0;
  }
  return result;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  unint64_t v3 = (const void *)a2[2];
  a2[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    int v13 = (void *)v6;
    do
    {
      if (v13[1] != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v18 = (const void *)v13[2];
          void v13[2] = 0;
          if (v18) {
            CFRelease(v18);
          }
        }
        else
        {
          unint64_t v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::lookupForReinsert(a1, v13);
          unsigned int v15 = (const void *)*((void *)v14 + 2);
          *((void *)v14 + 2) = 0;
          if (v15) {
            CFRelease(v15);
          }
          _OWORD *v14 = *(_OWORD *)v13;
          uint64_t v16 = v13[2];
          void v13[2] = 0;
          *((void *)v14 + 2) = v16;
          char v17 = (const void *)v13[2];
          void v13[2] = 0;
          if (v17) {
            CFRelease(v17);
          }
          if (v13 == a3) {
            uint64_t v11 = v14;
          }
        }
      }
      v13 += 3;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  unsigned int v8 = -1640531527;
  __int16 v9 = 0;
  char v10 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v8, a2);
  int v4 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8);
  int v5 = 0;
  do
  {
    uint64_t v6 = (_OWORD *)(v2 + 24 * (v4 & v3));
    int v4 = ++v5 + (v4 & v3);
  }
  while (*v6 != 0);
  return v6;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(result, v6 >> 1);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  unsigned int v7 = (uint64_t *)(a1 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v9) & v2;
      unsigned int v7 = (uint64_t *)(a1 + 24 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  uint64_t v2 = result;
  *a2 = -1;
  uint64_t v3 = a2[1];
  if (v3) {
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t *a1, void *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v14 = -1640531527;
  __int16 v15 = 0;
  char v16 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v14, a2);
  int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v14);
  uint64_t v6 = a2[1];
  unsigned int v7 = v5 & v4;
  uint64_t result = (uint64_t *)(v2 + 24 * (v5 & v4));
  uint64_t v9 = *result;
  uint64_t v10 = result[1];
  if (*result != *a2 || v10 != v6)
  {
    int v12 = 1;
    while (v9 | v10)
    {
      unsigned int v7 = (v7 + v12) & v4;
      uint64_t result = (uint64_t *)(v2 + 24 * v7);
      uint64_t v9 = *result;
      uint64_t v10 = result[1];
      ++v12;
      if (*result == *a2 && v10 == v6) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    int v12 = (void *)v6;
    do
    {
      if (v12[1] != -1 && *(_OWORD *)v12 != 0)
      {
        int v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::lookupForReinsert(a1, v12);
        uint64_t v14 = v12[2];
        _OWORD *v13 = *(_OWORD *)v12;
        *((void *)v13 + 2) = v14;
        if (v12 == a3) {
          uint64_t v11 = v13;
        }
      }
      v12 += 3;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t API::Array::create@<X0>(uint64_t *a1@<X8>)
{
  v4[0] = 0;
  v4[1] = 0;
  API::Array::create(v4, a1);
  return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t API::Array::createStringArray@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (!v3)
  {
LABEL_7:
    API::Array::create(&v10, a2);
    return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
  if (!(v3 >> 29))
  {
    uint64_t v4 = result;
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v3));
    LODWORD(v11) = v3;
    uint64_t v10 = v5;
    if (*(_DWORD *)(v4 + 12))
    {
      uint64_t v6 = v5;
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        API::String::create(&v12);
        ++v8;
        *(void *)(v6 + v7) = v12;
        v7 += 8;
      }
      while (v8 < *(unsigned int *)(v4 + 12));
      HIDWORD(v11) = v8;
    }
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t API::Array::createStringArray@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!a2)
  {
LABEL_12:
    API::Array::create(&v13, a3);
    return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v12);
  }
  int v4 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v5 = result;
    uint64_t v6 = 8 * a2;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a2));
    uint64_t v8 = 0;
    LODWORD(v14) = v4;
    uint64_t v13 = v7;
    do
    {
      uint64_t v9 = *(WTF::StringImpl **)(v5 + 8 * v8);
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      __int16 v15 = v9;
      API::String::create(&v16);
      *(void *)(v7 + 8 * v8) = v16;
      uint64_t v11 = v15;
      __int16 v15 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      ++v8;
      v6 -= 8;
    }
    while (v6);
    HIDWORD(v14) = v8;
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

unsigned int *API::Array::toStringVector@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = this[7];
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = (uint64_t)this;
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(void *)a2 = v5;
      this = (unsigned int *)API::Array::elementsOfType<API::String>(v4, &v18);
      uint64_t v6 = v19;
      uint64_t v7 = v21;
      if (v19 != v21)
      {
        uint64_t v8 = v20;
        do
        {
          WTF::String::isolatedCopy();
          uint64_t v10 = *(unsigned int *)(a2 + 12);
          if (v10 == *(_DWORD *)(a2 + 8))
          {
            char v16 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v10 + 1, (unint64_t)&v17);
            uint64_t v10 = *(unsigned int *)(a2 + 12);
            uint64_t v11 = *(void *)a2;
            int v12 = *v16;
            WebKit *v16 = 0;
          }
          else
          {
            uint64_t v11 = *(void *)a2;
            int v12 = v17;
            char v17 = 0;
          }
          *(void *)(v11 + 8 * v10) = v12;
          *(_DWORD *)(a2 + 12) = v10 + 1;
          this = (unsigned int *)v17;
          char v17 = 0;
          if (this)
          {
            if (*this == 2) {
              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
            }
            else {
              *this -= 2;
            }
          }
          uint64_t v13 = v6 + 1;
          while (v13 - 1 != v8 && v13 != v8)
          {
            uint64_t v15 = *v13++;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
            if (this == 21)
            {
              uint64_t v6 = v13 - 1;
              goto LABEL_19;
            }
          }
          uint64_t v6 = v8;
LABEL_19:
          ;
        }
        while (v6 != v7);
      }
    }
  }
  return this;
}

uint64_t API::Array::elementsOfType<API::String>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(unsigned int *)(result + 28);
  uint64_t v5 = v3 + 8 * v4;
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = 8 * v4;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 16))();
      if (result == 21) {
        break;
      }
      v3 += 8;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v3 = v5;
        break;
      }
    }
    uint64_t v8 = v3;
    uint64_t v3 = *(void *)(v6 + 16);
    uint64_t v9 = *(unsigned int *)(v6 + 28);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(result + 16);
  }
  a2[2] = v8;
  a2[3] = v5;
  uint64_t v10 = v3 + 8 * v9;
  a2[6] = v10;
  a2[7] = v10;
  return result;
}

uint64_t API::Array::copy@<X0>(API::Array *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((_DWORD *)this + 7))
  {
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v5, (uint64_t)this + 16);
  }
  else
  {
    v5[0] = 0;
    v5[1] = 0;
  }
  API::Array::create(v5, a2);
  return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void API::Dictionary::create(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)uint64_t v4 = &unk_1EE9D1E00;
  *((void *)v4 + 2) = 0;
  uint64_t v5 = *a1;
  *a1 = 0;
  *((void *)v4 + 2) = v5;
  *a2 = v4;
}

uint64_t API::Dictionary::createWithCapacity@<X0>(API::Dictionary *this@<X0>, WebKit **a2@<X8>)
{
  unsigned int v2 = this;
  uint64_t v4 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)uint64_t v4 = &unk_1EE9D1E00;
  *((void *)v4 + 2) = 0;
  *a2 = v4;

  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity((void *)v4 + 2, v2);
}

void API::Dictionary::~Dictionary(API::Dictionary *this, WTF::StringImpl *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v2, a2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v2, a2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::Dictionary::keys@<X0>(API::Dictionary *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v4 = v5;
  if (v5 && *(_DWORD *)(v4 - 12))
  {
    WTF::map<0ul,WTF::CrashOnOverflow,16ul,API::Dictionary::keys(void)::$_0,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const>(v3, (uint64_t)v8);
    API::Array::create(v8, a2);
    return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v7);
  }
  else
  {
    return API::Array::create(a2);
  }
}

void *WTF::map<0ul,WTF::CrashOnOverflow,16ul,API::Dictionary::keys(void)::$_0,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void **)result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (*result)
  {
    uint64_t v4 = *(unsigned int *)(*result - 12);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a2 + 8) = v4;
      *(void *)a2 = v5;
    }
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
  uint64_t v6 = result;
  uint64_t v8 = v7;
  if (*v2) {
    uint64_t v9 = (uint64_t)&(*v2)[2 * *((unsigned int *)*v2 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((void *)v9 != result)
  {
    do
    {
      uint64_t result = API::String::create(&v11);
      uint64_t v10 = *(unsigned int *)(a2 + 12);
      *(void *)(*(void *)a2 + 8 * v10) = v11;
      *(_DWORD *)(a2 + 12) = v10 + 1;
      while (1)
      {
        v6 += 2;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = v8;
LABEL_13:
      ;
    }
    while (v6 != (void *)v9);
  }
  return result;
}

void API::SerializedScriptValue::deserializeWK(API::SerializedScriptValue *this@<X0>, API *a2@<X8>)
{
  uint64_t v3 = this;
  if ((_MergedGlobals_85 & 1) == 0)
  {
    qword_1EB359AF8 = 0;
    uint64_t v10 = (WTF::RunLoop *)WTF::RunLoop::main(this);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v11 = &unk_1EE9D1EA0;
    v11[1] = API::SharedJSContextWK::releaseContextIfNecessary;
    v11[2] = 0;
    _OWORD v11[3] = &qword_1EB359AF8;
    this = (API::SerializedScriptValue *)WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1EB359B00, v10);
    qword_1EB359B00[0] = (uint64_t)&unk_1EE9B3390;
    qword_1EB359B18 = (uint64_t)v11;
    qword_1EB359B20 = 0;
    _MergedGlobals_85 = 1;
  }
  WTF::MonotonicTime::now(this);
  qword_1EB359B20 = v5;
  uint64_t v6 = (OpaqueJSContext *)qword_1EB359AF8;
  if (qword_1EB359AF8) {
    goto LABEL_7;
  }
  JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  JSRemoteInspectorGetInspectionEnabledByDefault();
  JSRemoteInspectorSetInspectionEnabledByDefault();
  JSGlobalContextRef v7 = JSGlobalContextCreate(0);
  uint64_t v8 = (OpaqueJSContext *)qword_1EB359AF8;
  qword_1EB359AF8 = (uint64_t)v7;
  if (v8) {
    JSGlobalContextRelease(v8);
  }
  JSRemoteInspectorSetInspectionEnabledByDefault();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  WTF::RunLoop::TimerBase::start();
  uint64_t v6 = (OpaqueJSContext *)qword_1EB359AF8;
  if (qword_1EB359AF8) {
LABEL_7:
  }
    JSGlobalContextRetain(v6);
  uint64_t v9 = (const OpaqueJSValue *)WebCore::SerializedScriptValue::deserialize(v3, v6, 0);
  if (v9)
  {
    API::valueToWKObject(a2, v6, v9);
    if (!v6) {
      return;
    }
  }
  else
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
  }

  JSGlobalContextRelease(v6);
}

void API::valueToWKObject(API *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  if (JSValueIsObject(a2, a3))
  {
    uint64_t v6 = JSValueToObject(a2, a3, 0);
    if (JSValueIsArray(a2, a3))
    {
      JSGlobalContextRef v7 = JSStringCreateWithUTF8CString("length");
      String = JSValueMakeString(a2, v7);
      JSStringRelease(v7);
      PropertyForKey = JSObjectGetPropertyForKey(a2, v6, String, 0);
      double v10 = JSValueToNumber(a2, PropertyForKey, 0);
      uint64_t v11 = 0;
      if (v10 >= 0.0 && v10 <= 1.84467441e19)
      {
        unint64_t v13 = (unint64_t)v10;
        uint64_t v11 = (char *)WKMutableArrayCreateWithCapacity();
        if (v13)
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            PropertyAtIndex = JSObjectGetPropertyAtIndex(a2, v6, i, 0);
            API::valueToWKObject((API *)&v37, a2, PropertyAtIndex);
            char v16 = (WebKit *)v37;
            WKArrayAppendItem(v11, v37);
            if (v16) {
              CFRelease(*(CFTypeRef *)([(WebKit *)v16 _apiObject] + 8));
            }
          }
        }
      }
      goto LABEL_43;
    }
    uint64_t v18 = JSObjectCopyPropertyNames(a2, v6);
    Count = (API::Dictionary *)JSPropertyNameArrayGetCount(v18);
    API::Dictionary::createWithCapacity(Count, (WebKit **)&v37);
    if (v37)
    {
      uint64_t v11 = v37[1];
      if (Count)
      {
LABEL_19:
        for (size_t j = 0; Count != (API::Dictionary *)j; ++j)
        {
          NameAtIndex = JSPropertyNameArrayGetNameAtIndex(v18, j);
          size_t MaximumUTF8CStringSize = JSStringGetMaximumUTF8CStringSize(NameAtIndex);
          size_t v23 = MaximumUTF8CStringSize;
          if (MaximumUTF8CStringSize)
          {
            if (HIDWORD(MaximumUTF8CStringSize))
            {
              __break(0xC471u);
              goto LABEL_48;
            }
            int v24 = (char *)WTF::fastMalloc((WTF *)MaximumUTF8CStringSize);
          }
          else
          {
            int v24 = 0;
          }
          JSStringGetUTF8CString(NameAtIndex, v24, v23);
          int v26 = (void *)WKStringCreateWithUTF8CStringWithLength();
          if (v24) {
            WTF::fastFree((WTF *)v24, v25);
          }
          uint64_t v27 = JSValueMakeString(a2, NameAtIndex);
          uint64_t v28 = JSObjectGetPropertyForKey(a2, v6, v27, 0);
          API::valueToWKObject((API *)&v37, a2, v28);
          uint64_t v29 = (WebKit *)v37;
          WKDictionarySetItem(v11, v26, (CFTypeRef *)v37);
          if (v29) {
            CFRelease(*(CFTypeRef *)([(WebKit *)v29 _apiObject] + 8));
          }
          if (v26) {
            CFRelease(*(CFTypeRef *)([v26 _apiObject] + 8));
          }
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (Count) {
        goto LABEL_19;
      }
    }
    JSPropertyNameArrayRelease(v18);
    goto LABEL_43;
  }
  if (JSValueIsBoolean(a2, a3))
  {
    BOOL v17 = JSValueToBoolean(a2, a3);
    API::Boolean::create((API::Boolean *)v17, (WebKit **)&v37);
    if (v37)
    {
      uint64_t v11 = v37[1];
      goto LABEL_43;
    }
LABEL_38:
    uint64_t v11 = 0;
    goto LABEL_43;
  }
  if (JSValueIsNumber(a2, a3))
  {
    double v30 = JSValueToNumber(a2, a3, 0);
    long long v31 = (double *)API::Object::newObject(0x18uLL, 33);
    void v31[2] = v30;
    *(void *)long long v31 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v31);
    *(void *)long long v31 = &unk_1EE9B5380;
    uint64_t v11 = (char *)*((void *)v31 + 1);
    goto LABEL_43;
  }
  if (!JSValueIsString(a2, a3)) {
    goto LABEL_38;
  }
  int v32 = JSValueToStringCopy(a2, a3, 0);
  size_t v33 = JSStringGetMaximumUTF8CStringSize(v32);
  size_t v34 = v33;
  if (v33)
  {
    if (HIDWORD(v33))
    {
      __break(0xC471u);
LABEL_48:
      JUMPOUT(0x198D64E94);
    }
    uint64_t v35 = (char *)WTF::fastMalloc((WTF *)v33);
  }
  else
  {
    uint64_t v35 = 0;
  }
  JSStringGetUTF8CString(v32, v35, v34);
  uint64_t v11 = (char *)WKStringCreateWithUTF8CStringWithLength();
  if (v35) {
    WTF::fastFree((WTF *)v35, v36);
  }
  JSStringRelease(v32);
LABEL_43:
  *(void *)this = v11;
}

CFTypeRef *API::URLRequest::URLRequest(CFTypeRef *this, const String *a2)
{
  *this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)this);
  *this = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest(this + 2, a2);
  return this;
}

uint64_t API::URLRequest::setDefaultTimeoutInterval(API::URLRequest *this, double a2)
{
  WebCore::ResourceRequestBase::setDefaultTimeoutInterval(this, a2);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    uint64_t v4 = v8;
    uint64_t v5 = 8 * v9;
    do
    {
      uint64_t v6 = *v4++;
      double v10 = a2;
      WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(v6, (uint64_t *)&v10, 0);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

uint64_t WKArrayGetTypeID()
{
  return 1;
}

id *WKArrayCreate(id *result, unint64_t a2)
{
  double v10 = 0;
  uint64_t v11 = 0;
  if (a2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    LODWORD(v11) = a2;
    double v10 = v4;
    unint64_t v5 = a2;
    do
    {
      if (*v3)
      {
        uint64_t v6 = [*v3 _apiObject];
        CFRetain(*(CFTypeRef *)(v6 + 8));
      }
      else
      {
        uint64_t v6 = 0;
      }
      *v4++ = v6;
      ++v3;
      --v5;
    }
    while (v5);
    HIDWORD(v11) = a2;
  }
  API::Array::create((uint64_t *)&v10, &v9);
  if (v9) {
    uint64_t v8 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
  return (id *)v8;
}

void **WKArrayCreateAdoptingValues(void **result, unint64_t a2)
{
  double v10 = 0;
  uint64_t v11 = 0;
  if (a2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v3 = result;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    LODWORD(v11) = a2;
    double v10 = v4;
    unint64_t v5 = a2;
    do
    {
      uint64_t v6 = *v3;
      if (*v3) {
        uint64_t v6 = (void *)[v6 _apiObject];
      }
      *v4++ = v6;
      ++v3;
      --v5;
    }
    while (v5);
    HIDWORD(v11) = a2;
  }
  API::Array::create((uint64_t *)&v10, &v9);
  if (v9) {
    uint64_t v8 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
  return (void **)v8;
}

uint64_t WKArrayGetItemAtIndex(void *a1, unint64_t a2)
{
  uint64_t result = [a1 _apiObject];
  if (*(unsigned int *)(result + 28) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(result + 16) + 8 * a2);
    if (v4) {
      return *(void *)(v4 + 8);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WKArrayGetSize(void *a1)
{
  return *(unsigned int *)([a1 _apiObject] + 28);
}

uint64_t API::ObjectImpl<(API::Object::Type)9>::type()
{
  return 9;
}

void API::URLRequest::~URLRequest(API::URLRequest *this)
{
  *(void *)this = &unk_1EE9D1E50;
  uint64_t v2 = (const void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v2) {
    CFRelease(v2);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::URLRequest *)((char *)this + 16));
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D1E50;
  uint64_t v2 = (const void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v2) {
    CFRelease(v2);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::URLRequest *)((char *)this + 16));

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)25>::type()
{
  return 25;
}

void API::Array::~Array(API::Array *this, void *a2)
{
}

{
  uint64_t vars8;

  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)1>::type()
{
  return 1;
}

void API::SharedJSContextWK::releaseContextIfNecessary(API::SharedJSContextWK *this)
{
  WTF::MonotonicTime::now(this);
  if (v2 - *((double *)this + 5) >= 10.0)
  {
    uint64_t v3 = *(OpaqueJSContext **)this;
    *(void *)this = 0;
    if (v3)
    {
      JSGlobalContextRelease(v3);
    }
  }
  else
  {
    WTF::RunLoop::TimerBase::start();
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (API::SharedJSContextWK::*&)(void),API::SharedJSContextWK*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  double v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * v14);
    char v16 = (WTF *)*v15;
    if (!*v15)
    {
      if (v12)
      {
        uint64_t *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v15 = v12;
      }
      WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> &&)::{lambda(void)#1}>(v15, a2, &v29);
      uint64_t v17 = *a1;
      if (*a1) {
        int v18 = *(_DWORD *)(v17 - 12) + 1;
      }
      else {
        int v18 = 1;
      }
      *(_DWORD *)(v17 - 12) = v18;
      uint64_t v19 = *a1;
      if (*a1) {
        int v20 = *(_DWORD *)(v19 - 12);
      }
      else {
        int v20 = 0;
      }
      uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
      unint64_t v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21) {
          goto LABEL_19;
        }
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_19:
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v19 + 16 * v22;
        *(unsigned char *)(a4 + 16) = 1;
        return;
      }
      uint64_t v15 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
      uint64_t v19 = *a1;
      if (*a1) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
      goto LABEL_19;
    }
    if (v16 != (WTF *)-1) {
      break;
    }
    int v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_10:
    unsigned int v11 = i + v14;
  }
  if (!WTF::equal(v16, *a2, (const WTF::StringImpl *)a3)) {
    goto LABEL_10;
  }
  uint64_t v23 = *a1;
  if (*a1) {
    uint64_t v24 = *(unsigned int *)(v23 - 4);
  }
  else {
    uint64_t v24 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v23 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v25 = v8 + 16 * v14;
  uint64_t v26 = *a3;
  *a3 = 0;
  uint64_t v27 = *(void *)(v25 + 8);
  *(void *)(v25 + 8) = v26;
  if (v27)
  {
    uint64_t v28 = *(const void **)(v27 + 8);
    CFRelease(v28);
  }
}

void WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(WebKit::RemoteLayerTreeNode *this)
{
  [*((id *)this + 5) setValue:0 forKey:@"WKRemoteLayerTreeNode"];
  uint64_t v3 = (_DWORD *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[2];
    }
  }
  WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 52, v2);
  unint64_t v5 = (WTF *)*((void *)this + 24);
  if (v5)
  {
    *((void *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v5, v4);
  }
  if (*((unsigned char *)this + 168)) {
    WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 144));
  }
  WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 120));
  WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 96));
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v6);
  WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 56));
  uint64_t v8 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8) {
    CFRelease(v8);
  }
  int v9 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v9) {
    CFRelease(v9);
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v7);
}

void sub_198D656B8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *(_DWORD **)(v2 + 240);
  *(void *)(v2 + 240) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
  WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 208), a2);
  uint64_t v6 = *(WTF **)(v2 + 192);
  if (v6)
  {
    *(void *)(v2 + 192) = 0;
    *(_DWORD *)(v2 + 200) = 0;
    WTF::fastFree(v6, v5);
  }
  if (*(unsigned char *)(v2 + 168)) {
    WebCore::Region::~Region((WebCore::Region *)(v2 + 144));
  }
  WebCore::Region::~Region((WebCore::Region *)(v2 + 120));
  WebCore::Region::~Region((WebCore::Region *)(v2 + 96));
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 80, v7);
  WebCore::Region::~Region((WebCore::Region *)(v2 + 56));
  int v9 = *(const void **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v9) {
    CFRelease(v9);
  }
  unsigned int v10 = *(const void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v10) {
    CFRelease(v10);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v2, v8);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeNode::setEventRegion(WebKit::RemoteLayerTreeNode *this, const WebCore::EventRegion *a2)
{
  WebCore::Region::operator=();
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 80, (uint64_t)a2 + 24);
  WebCore::Region::operator=();
  WebCore::Region::operator=();

  std::__optional_storage_base<WebCore::Region,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Region,false> const&>((WebKit::RemoteLayerTreeNode *)((char *)this + 144), (unsigned __int8 *)a2 + 88);
}

uint64_t WebKit::RemoteLayerTreeNode::layerID@<X0>(WebKit::RemoteLayerTreeNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = objc_msgSend((id)-[WebKit::RemoteLayerTreeNode valueForKey:](this, "valueForKey:", @"WKRemoteLayerTreeNode"), "pointerValue");
  if (result)
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 8);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t WebKit::RemoteLayerTreeNode::forCALayer(WebKit::RemoteLayerTreeNode *this, CALayer *a2)
{
  uint64_t v2 = (void *)[(WebKit::RemoteLayerTreeNode *)this valueForKey:@"WKRemoteLayerTreeNode"];

  return [v2 pointerValue];
}

uint64_t WebKit::RemoteLayerTreeNode::appendLayerDescription(WebKit::RemoteLayerTreeNode *this, NSString *a2, CALayer *a3)
{
  uint64_t v5 = objc_msgSend((id)-[NSString valueForKey:](a2, "valueForKey:", @"WKRemoteLayerTreeNode"), "pointerValue");
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  JSGlobalContextRef v7 = NSString;
  if ([(NSString *)a2 name]) {
    uint64_t v8 = (__CFString *)[(NSString *)a2 name];
  }
  else {
    uint64_t v8 = &stru_1EEA10550;
  }
  uint64_t v9 = [v7 stringWithFormat:@" layerID = %llu \"%@\"", v6, v8];

  return [(WebKit::RemoteLayerTreeNode *)this stringByAppendingString:v9];
}

void WebKit::RemoteLayerTreeNode::setAcceleratedEffectsAndBaseValues(uint64_t a1, uint64_t a2, WebCore::AcceleratedEffectValues *a3, uint64_t a4)
{
  if (*(void *)a4) {
    uint64_t v8 = *(void *)(*(void *)a4 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereRemovedFromNode(v8, a1);
  if (*(_DWORD *)(a2 + 12))
  {
    [*(id *)(a1 + 40) bounds];
    v23.origin.x = v9;
    v23.origin.y = v10;
    v23.size.width = v11;
    v23.size.CGFloat height = v12;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v27, &v23);
    WebKit::RemoteAcceleratedEffectStack::create((uint64_t *)&v24, v27[0], v27[1], v27[2], v27[3], *(double *)(*(void *)(*(void *)a4 + 8) + 208));
    unint64_t v13 = *(_DWORD **)(a1 + 240);
    *(void *)(a1 + 240) = v24;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 16))(v13);
      }
      else {
        --v13[2];
      }
    }
    uint64_t v14 = *(unsigned int *)(a2 + 12);
    uint64_t v24 = 0;
    int v25 = 0;
    int v26 = v14;
    if (v14)
    {
      if (v14 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
      int v25 = v14;
      uint64_t v24 = v15;
      uint64_t v16 = *(unsigned int *)(a2 + 12);
      if (v16)
      {
        uint64_t v17 = *(uint64_t **)a2;
        uint64_t v18 = 8 * v16;
        do
        {
          uint64_t v19 = *v17++;
          ++*(_DWORD *)(v19 + 8);
          *v15++ = v19;
          v18 -= 8;
        }
        while (v18);
      }
    }
    WebCore::AcceleratedEffectValues::clone((uint64_t *)&v23, a3);
    WebKit::RemoteAcceleratedEffectStack::setEffects(*(void *)(a1 + 240));
    WebCore::AcceleratedEffectStack::setBaseValues();
    WebKit::RemoteAcceleratedEffectStack::applyEffectsFromMainThread(*(void *)(a1 + 240), *(void **)(a1 + 40));
    if (*(void *)a4) {
      uint64_t v20 = *(void *)(*(void *)a4 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereAddedToNode(v20, a1);
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v23, v21);
    WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v22);
  }
}

void sub_198D65AC8(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 80, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeScrollingPerformanceData::~RemoteLayerTreeScrollingPerformanceData(WebKit::RemoteLayerTreeScrollingPerformanceData *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 32);
    if (v5) {
      *(_DWORD *)(v4 + 32) = v5 - 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

unint64_t WebKit::RemoteLayerTreeScrollingPerformanceData::appendBlankPixelCount(WebKit::RemoteLayerTreeScrollingPerformanceData *this, int a2, uint64_t a3)
{
  WTF::MonotonicTime::now(this);
  unint64_t result = (unint64_t)this + 8;
  uint64_t v8 = *((unsigned int *)this + 5);
  if (v8)
  {
    uint64_t v9 = *(void *)result + 32 * (v8 - 1);
    uint64_t v10 = *((unsigned int *)this + 5);
    if (*(_DWORD *)(v9 + 16) == a2)
    {
      uint64_t v10 = *((unsigned int *)this + 5);
      if (*(void *)(v9 + 24) == a3)
      {
        *(void *)(*(void *)result + 32 * (v8 - 1) + 8) = v6;
        return result;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)&long long v14 = v6;
  *((void *)&v14 + 1) = v6;
  LODWORD(v15) = a2;
  *((void *)&v15 + 1) = a3;
  if (v8 == *((_DWORD *)this + 4))
  {
    unint64_t result = WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v10 + 1, (unint64_t)&v14);
    CGFloat v11 = (_OWORD *)(*((void *)this + 1) + 32 * *((unsigned int *)this + 5));
    long long v12 = *(_OWORD *)result;
    long long v13 = *(_OWORD *)(result + 16);
  }
  else
  {
    CGFloat v11 = (_OWORD *)(*(void *)result + 32 * v10);
    long long v12 = v14;
    long long v13 = v15;
  }
  _OWORD *v11 = v12;
  v11[1] = v13;
  ++*((_DWORD *)this + 5);
  return result;
}

uint64_t WebKit::RemoteLayerTreeScrollingPerformanceData::blankPixelCount(WebKit::RemoteLayerTreeScrollingPerformanceData *this, CALayer *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(*(void *)this + 72) + 8);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0) {
    int v5 = *(WebKit **)(v4 + 40);
  }
  else {
    int v5 = 0;
  }
  uint64_t TileGridContainerLayer = WebKit::findTileGridContainerLayer(v5, a2);
  if (TileGridContainerLayer)
  {
    JSGlobalContextRef v7 = (void *)TileGridContainerLayer;
    long long v32 = *(_OWORD *)&a2->super.isa;
    if (*((float *)&v32 + 1) < 0.0) {
      DWORD1(v32) = 0;
    }
    WebCore::Region::Region((WebCore::Region *)v31);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v8 = (void *)[v7 sublayers];
    uint64_t v10 = [v8 countByEnumeratingWithState:&v27 objects:v33 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v28 != v11) {
            objc_enumerationMutation(v8);
          }
          long long v13 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          [v13 bounds];
          objc_msgSend(v13, "convertRect:toLayer:", v7);
          v25.origin.x = v14;
          v25.origin.y = v15;
          v25.size.width = v16;
          v25.size.CGFloat height = v17;
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v26, &v25);
          WebCore::FloatRect::intersect((WebCore::FloatRect *)&v26, (const WebCore::FloatRect *)&v32);
          LODWORD(v19) = v26.m_size.m_width;
          if (*(float *)&v26.m_size.m_width > 0.0)
          {
            LODWORD(v19) = v26.m_size.m_height;
            if (*(float *)&v26.m_size.m_height > 0.0)
            {
              v24.IntPoint m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)&v26, v18);
              v24.IntSize m_size = v20;
              WebCore::Region::Region((WebCore::Region *)&v25, &v24);
              WebCore::Region::unite();
              WebCore::Region::~Region((WebCore::Region *)&v25);
            }
          }
        }
        uint64_t v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v33, 16, v19);
      }
      while (v10);
    }
    v26.IntPoint m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)&v32, v9);
    v26.IntSize m_size = v21;
    WebCore::Region::Region((WebCore::Region *)&v25, &v26);
    WebCore::Region::subtract();
    uint64_t v22 = WebCore::Region::totalArea((WebCore::Region *)&v25);
    WebCore::Region::~Region((WebCore::Region *)&v25);
    WebCore::Region::~Region((WebCore::Region *)v31);
  }
  else
  {
    NSLog(&cfstr_FailedToFindTi.isa);
    return 0xFFFFFFFFLL;
  }
  return v22;
}

void sub_198D65E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

long long *WebKit::RemoteLayerTreeScrollingPerformanceData::appendSynchronousScrollingChange(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t result = (long long *)(a1 + 8);
  *(double *)&long long v9 = a3;
  *((double *)&v9 + 1) = a3;
  LODWORD(v10) = 2;
  *((void *)&v10 + 1) = a2;
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (v5 == *(_DWORD *)(a1 + 16))
  {
    unint64_t result = (long long *)WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)&v9);
    uint64_t v6 = (_OWORD *)(*(void *)(a1 + 8) + 32 * *(unsigned int *)(a1 + 20));
    long long v7 = *result;
    long long v8 = result[1];
  }
  else
  {
    uint64_t v6 = (_OWORD *)(*(void *)result + 32 * v5);
    long long v7 = v9;
    long long v8 = v10;
  }
  _OWORD *v6 = v7;
  v6[1] = v8;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

CFTypeRef WebKit::RemoteLayerTreeScrollingPerformanceData::data(WebKit::RemoteLayerTreeScrollingPerformanceData *this)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 5)];
  uint64_t v3 = *((unsigned int *)this + 5);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v5 = v4 + 32 * v3;
    do
    {
      v9[0] = [NSNumber numberWithUnsignedLongLong:WTF::MonotonicTime::toMachAbsoluteTime((WTF::MonotonicTime *)v4)];
      if (*(_DWORD *)(v4 + 16)) {
        uint64_t v6 = @"exposed";
      }
      else {
        uint64_t v6 = @"filled";
      }
      v9[1] = v6;
      uint64_t v9[2] = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", *(void *)(v4 + 24), v9[0], v6);
      uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:3];
      if (v7) {
        [v2 addObject:v7];
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  return (id)CFMakeCollectable(v2);
}

void sub_198D66034(_Unwind_Exception *exception_object)
{
}

uint64_t WebKit::findTileGridContainerLayer(WebKit *this, CALayer *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v3 = (void *)[(WebKit *)this sublayers];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)v20;
  do
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (*(void *)v20 != v5) {
        objc_enumerationMutation(v3);
      }
      uint64_t v7 = *(void **)(*((void *)&v19 + 1) + 8 * i);
      long long v8 = (WebCore::TileController *)MEMORY[0x19972EAD0](&v18, objc_msgSend(v7, "name", v17));
      WebCore::TileController::tileGridContainerLayerName((uint64_t *)&v17, v8);
      char v11 = WTF::equal(v18, v17, v9);
      long long v12 = v17;
      CGFloat v17 = 0;
      if (!v12) {
        goto LABEL_9;
      }
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
LABEL_9:
        if (v11) {
          goto LABEL_10;
        }
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v12, v10);
      if (v11)
      {
LABEL_10:
        BOOL v13 = 1;
        uint64_t v2 = (uint64_t)v7;
        goto LABEL_14;
      }
LABEL_12:
      uint64_t TileGridContainerLayer = WebKit::findTileGridContainerLayer((WebKit *)v7, (CALayer *)v10);
      BOOL v13 = TileGridContainerLayer != 0;
      if (TileGridContainerLayer) {
        uint64_t v2 = TileGridContainerLayer;
      }
LABEL_14:
      CGFloat v15 = v18;
      uint64_t v18 = 0;
      if (!v15) {
        goto LABEL_17;
      }
      if (*(_DWORD *)v15 != 2)
      {
        *(_DWORD *)v15 -= 2;
LABEL_17:
        if (v13) {
          return v2;
        }
        continue;
      }
      WTF::StringImpl::destroy(v15, v10);
      if (v13) {
        return v2;
      }
    }
    uint64_t v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16, v17);
  }
  while (v4);
  return 0;
}

void sub_198D661E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(id *this)
{
  [this[28] invalidate];
  id v2 = this[28];
  this[28] = 0;
  if (v2) {
    CFRelease(v2);
  }

  WebKit::RemoteLayerTreeDrawingAreaProxy::~RemoteLayerTreeDrawingAreaProxy((WebKit::RemoteLayerTreeDrawingAreaProxy *)this);
}

void sub_198D663E0(_Unwind_Exception *a1)
{
  uint64_t v3 = (const void *)*((void *)v1 + 28);
  *((void *)v1 + 28) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::RemoteLayerTreeDrawingAreaProxy::~RemoteLayerTreeDrawingAreaProxy(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(id *this)
{
}

{
  WebKit::RemoteLayerTreeDrawingAreaProxyIOS::operator delete(this - 2);
}

double WebKit::RemoteLayerTreeDrawingAreaProxyIOS::operator delete(id *a1)
{
  WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(a1);
  if (*((_DWORD *)v1 + 8))
  {
    double result = 0.0;
    *((_OWORD *)v1 + 13) = 0u;
    *((_OWORD *)v1 + 14) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_OWORD *)v1 + 8) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::delegatedScrollingMode(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  return 1;
}

uint64_t *WebKit::RemoteScrollingCoordinatorProxyIOS::clearTouchActionsForTouchIdentifier(WebKit::RemoteScrollingCoordinatorProxyIOS *this, int a2)
{
  int v7 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 144);
  double result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>((uint64_t *)this + 18, &v7);
  uint64_t v5 = *((void *)this + 18);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::remove(v3, result);
  }
  return result;
}

id **WebKit::RemoteScrollingCoordinatorProxyIOS::scrollViewForScrollingNodeID()
{
  uint64_t v0 = WebCore::ScrollingTree::nodeForID();
  uint64_t v1 = (id **)v0;
  if (v0)
  {
    unsigned int v2 = *(unsigned __int8 *)(v0 + 40);
    if (v2 == 5)
    {
      uint64_t v3 = (atomic_uchar **)(v0 + 8);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v0 + 8));
      uint64_t v4 = WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView(v1[12]);
    }
    else if (v2 > 1)
    {
      if (*(unsigned char *)(v0 + 40) != 3) {
        return 0;
      }
      uint64_t v3 = (atomic_uchar **)(v0 + 8);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v0 + 8));
      uint64_t v4 = WebKit::ScrollingTreePluginScrollingNodeIOS::scrollView((WebKit::ScrollingTreePluginScrollingNodeIOS *)v1);
    }
    else
    {
      uint64_t v3 = (atomic_uchar **)(v0 + 8);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v0 + 8));
      int v7 = v1[12];
      if (!v7)
      {
        uint64_t v1 = 0;
        goto LABEL_5;
      }
      uint64_t v4 = WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView(v7);
    }
    uint64_t v1 = (id **)v4;
LABEL_5:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingTreeNode,(WTF::DestructionThread)0>(*v3, v5);
  }
  return v1;
}

void sub_198D665EC(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingTreeNode,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::scrollingTreeNodeWillStartPanGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  return WebKit::WebPageProxy::scrollingNodeScrollViewWillStartPanGesture(v4, a2, a3);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::scrollingTreeNodeWillStartScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = a2;
  v9[1] = a3;
  char v10 = 1;
  WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll(v7, v9);
  WebKit::RemoteScrollingUIState::addNodeWithActiveUserScroll(a1 + 80, a2, a3);

  return WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(a1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::scrollingTreeNodeDidEndScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = a2;
  v9[1] = a3;
  char v10 = 1;
  WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll(v7, v9);
  WebKit::RemoteScrollingUIState::removeNodeWithActiveUserScroll(a1 + 80, a2, a3);

  return WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(a1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::adjustTargetContentOffsetForSnapping(WebKit::RemoteScrollingCoordinatorProxyIOS *this, CGSize a2, CGPoint a3, double a4, CGPoint a5, CGPoint *a6)
{
  double height = a2.height;
  double width = a2.width;
  if (WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 0))
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v26, a6);
    unint64_t v11 = WebKit::RemoteScrollingCoordinatorProxyIOS::closestSnapOffsetForMainFrameScrolling((uint64_t)this);
    *((_DWORD *)this + 28) = HIDWORD(v11);
    *((unsigned char *)this + 116) = v12;
    if (a6->x > 0.0 && a6->x < width)
    {
      float v14 = *(float *)&v11;
      float v15 = width;
      if (*(float *)&v11 >= v15) {
        float v14 = width;
      }
      a6->x = v14;
    }
  }
  uint64_t result = WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 1);
  if (result)
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v24, a6);
    float v17 = a4;
    float v24 = v24 + 0.0;
    float v25 = v25 + v17;
    uint64_t result = WebKit::RemoteScrollingCoordinatorProxyIOS::closestSnapOffsetForMainFrameScrolling((uint64_t)this);
    *((_DWORD *)this + 30) = HIDWORD(result);
    *((unsigned char *)this + 124) = v18;
    double y = a6->y;
    if (y > 0.0 && y < height)
    {
      float v21 = *(float *)&result;
      if (v18)
      {
        float v22 = *(float *)&result - a4;
        float v21 = v22;
      }
      float v23 = height;
      if (v21 >= v23) {
        float v21 = height;
      }
      a6->double y = v21;
    }
  }
  return result;
}

BOOL WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling(uint64_t a1, int a2)
{
  unsigned int v2 = *(WebCore::ScrollingTreeScrollingNode **)(*(void *)(a1 + 24) + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(v2);
  if (a2 == 1) {
    uint64_t v5 = (unsigned int *)(v4 + 24);
  }
  else {
    uint64_t v5 = (unsigned int *)(v4 + 8);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v9, v5);
  BOOL v6 = v9[3] != 0;
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v7);
  return v6;
}

unint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::closestSnapOffsetForMainFrameScrolling(uint64_t a1)
{
  WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(*(void *)(a1 + 24)
                                                                                               + 16));
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(v3 + 32) + 2016));
  objc_msgSend((id)objc_msgSend(WeakRetained, "scrollView"), "zoomScale");
  double v6 = v5;
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  uint64_t v9 = WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::closestSnapOffset<WebCore::FloatSize,WebCore::FloatPoint>();
  *(float *)&unsigned int v7 = v6 * *(float *)&v9;
  return __PAIR64__(HIDWORD(v9), v7);
}

void sub_198D66A18(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSetScrollViewDecelerationRateFast(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  if (WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 0)) {
    return 1;
  }

  return WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::setRootNodeIsInUserScroll(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 24) + 16);
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = this + 80;
    uint64_t v5 = *(void *)(v2 + 56);
    if (a2) {
      WebKit::RemoteScrollingUIState::addNodeWithActiveUserScroll(v4, *(void *)(v2 + 48), v5);
    }
    else {
      WebKit::RemoteScrollingUIState::removeNodeWithActiveUserScroll(v4, *(void *)(v2 + 48), v5);
    }
    return WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(v3);
  }
  return this;
}

double WebKit::RemoteScrollingCoordinatorProxyIOS::nearestActiveContentInsetAdjustedSnapOffset(WebKit::RemoteScrollingCoordinatorProxyIOS *this, double a2, const CGPoint *a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(WebCore::ScrollingTreeScrollingNode **)(v3 + 16);
  if (!v4) {
    return *MEMORY[0x1E4F1DAD8];
  }
  double x = a3->x;
  uint64_t v7 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v3 + 16));
  WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(v4);
  uint64_t v8 = *(void *)(*((void *)this + 2) + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(v9 + 32) + 2016));
  objc_msgSend((id)objc_msgSend(WeakRetained, "scrollView"), "zoomScale");
  double v12 = v11;
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  unsigned int v13 = *(_DWORD *)(v7 + 20);
  if (v13)
  {
    if (*((unsigned char *)this + 116))
    {
      unsigned int v14 = *((_DWORD *)this + 28);
      if (v13 > v14) {
        return v12 * *(float *)(*(void *)(v7 + 8) + 40 * v14);
      }
    }
  }
  return x;
}

void sub_198D66C24(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::displayDidRefresh(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  WTF::MonotonicTime::now(this);
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 232);
  if (*(unsigned char *)(v4 + 36)) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v7 = *((void *)this + 19);
  double v6 = (uint64_t *)((char *)this + 152);
  uint64_t v22 = v7;
  uint64_t *v6 = 0;
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(&v22);
  uint64_t v10 = result;
  double v11 = v9;
  uint64_t v12 = v22;
  if (v22) {
    uint64_t v13 = v22 + 16 * *(unsigned int *)(v22 - 4);
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13 != result)
  {
    unsigned int v14 = (uint64_t *)(v5 + 16);
    do
    {
      *(_OWORD *)float v21 = *(_OWORD *)v10;
      long long v19 = *(_OWORD *)v10;
      char v20 = 1;
      uint64_t v15 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v14, &v19);
      CGFloat v16 = *(WebCore::AcceleratedEffectStack **)(v15 + 240);
      WebKit::RemoteAcceleratedEffectStack::applyEffectsFromMainThread((uint64_t)v16, *(void **)(v15 + 40));
      uint64_t result = WebCore::AcceleratedEffectStack::hasEffects(v16);
      if (result) {
        uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add(v6, v21, (uint64_t)v18);
      }
      while (1)
      {
        v10 += 16;
        if ((void *)v10 == v11) {
          break;
        }
        if (*(_OWORD *)v10 != 0 && *(void *)(v10 + 8) != -1) {
          goto LABEL_20;
        }
      }
      uint64_t v10 = (uint64_t)v11;
LABEL_20:
      ;
    }
    while (v10 != v13);
    uint64_t v12 = v22;
  }
  if (v12) {
    return WTF::fastFree((WTF *)(v12 - 16), v9);
  }
  return result;
}

void sub_198D66D8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    WTF::fastFree((WTF *)(a20 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::animationsWereAddedToNode(WebKit::RemoteScrollingCoordinatorProxyIOS *this, WebKit::RemoteLayerTreeNode *a2)
{
  long long v9 = *(_OWORD *)((char *)a2 + 8);
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add((uint64_t *)this + 19, (uint64_t *)&v9, (uint64_t)v8);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(WebKit::RemoteLayerTreeDrawingAreaProxyIOS **)(v4 + 232);
  if (v5)
  {
    if (*((unsigned char *)v5 + 36)) {
      double v6 = 0;
    }
    else {
      double v6 = v5;
    }
  }
  else
  {
    double v6 = 0;
  }
  *((unsigned char *)v6 + 233) = 1;
  return [(WKDisplayLinkHandler *)WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(v6) schedule];
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::animationsWereRemovedFromNode(WebKit::RemoteScrollingCoordinatorProxyIOS *this, WebKit::RemoteLayerTreeNode *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 152);
  long long v10 = *(_OWORD *)((char *)a2 + 8);
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 19, &v10);
  uint64_t v5 = *((void *)this + 19);
  if (v5)
  {
    uint64_t v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v6 == result) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_10;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v3, (void *)result);
    uint64_t v5 = *v3;
  }
  if (v5)
  {
LABEL_9:
    if (*(_DWORD *)(v5 - 12)) {
      return result;
    }
  }
LABEL_10:
  uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 232);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 36)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v9;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(unsigned char *)(result + 233) = 0;
  if (!*(unsigned char *)(result + 232)) {
    return [(WKDisplayLinkHandler *)WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler((WebKit::RemoteLayerTreeDrawingAreaProxyIOS *)result) pause];
  }
  return result;
}

void WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::~ScrollingTreeFrameScrollingNodeRemoteIOS(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  *(void *)this = &unk_1EE9D21B8;
  uint64_t v2 = (const void *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 52);
  *((void *)this + 5WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v4) {
    CFRelease(v4);
  }

  JUMPOUT(0x1997395A0);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::~ScrollingTreeFrameScrollingNodeRemoteIOS(this);

  WTF::fastFree(v1, v2);
}

float WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::minimumScrollPosition(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v4, (const IntPoint *)this + 19);
  float v2 = v4;
  if (WebCore::ScrollingTreeNode::isRootNode(this)
    && WebCore::ScrollingTree::scrollPinningBehavior(*((WebCore::ScrollingTree **)this + 4)) == 2)
  {
    (*(void (**)(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *))(*(void *)this + 136))(this);
  }
  return 0.0 - v2;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::maximumScrollPosition(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v3, (const IntPoint *)this + 19);
  uint64_t result = WebCore::ScrollingTreeNode::isRootNode(this);
  if (result)
  {
    uint64_t result = WebCore::ScrollingTree::scrollPinningBehavior(*((WebCore::ScrollingTree **)this + 4));
    if (result == 1) {
      return (*(uint64_t (**)(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *))(*(void *)this + 128))(this);
    }
  }
  return result;
}

char *WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::scrollbarStateForOrientation@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = *(char **)(a1 + 96);
  if (!result) {
    goto LABEL_10;
  }
  uint64_t result = (char *)WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView((id *)result);
  if (!result) {
    goto LABEL_10;
  }
  if (a2)
  {
    if ([result showsVerticalScrollIndicator])
    {
LABEL_5:
      uint64_t result = "";
      uint64_t v6 = 1;
      goto LABEL_8;
    }
  }
  else if ([result showsHorizontalScrollIndicator])
  {
    goto LABEL_5;
  }
  uint64_t result = "none";
  uint64_t v6 = 5;
LABEL_8:
  if (v6 == 1)
  {
LABEL_10:
    uint64_t v7 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_11;
  }
  uint64_t result = (char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v7 = v8;
LABEL_11:
  *a3 = v7;
  return result;
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreeOverflowScrollingNodeIOS::create@<X0>(WebCore::ScrollingTreeScrollingNode **a1@<X8>)
{
  float v2 = (WebCore::ScrollingTreeScrollingNode *)WTF::fastMalloc((WTF *)0x158);
  uint64_t result = WebKit::ScrollingTreeOverflowScrollingNodeIOS::ScrollingTreeOverflowScrollingNodeIOS(v2);
  *a1 = v2;
  return result;
}

void sub_198D67218(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreeOverflowScrollingNodeIOS::ScrollingTreeOverflowScrollingNodeIOS(WebCore::ScrollingTreeScrollingNode *a1)
{
  *(void *)WebCore::ScrollingTreeOverflowScrollingNode::ScrollingTreeOverflowScrollingNode() = &unk_1EE9D22A0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x38);
  WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate((WebCore::ScrollingTreeScrollingNodeDelegate *)v2, a1);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_1EE9D2440;
  *(void *)(v2 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *(void *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 48) = 0;
  uint64_t v3 = *((void *)a1 + 12);
  *((void *)a1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_198D672E4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);
  MEMORY[0x1997399D0](v2);
  _Unwind_Resume(a1);
}

void WebKit::ScrollingTreeOverflowScrollingNodeIOS::~ScrollingTreeOverflowScrollingNodeIOS(WebKit::ScrollingTreeOverflowScrollingNodeIOS *this)
{
  uint64_t v1 = (WTF *)MEMORY[0x1997399D0](this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  BOOL v3 = v2 > 5;
  int v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0) {
    return 0;
  }
  if ((*(unsigned char *)(a2 + 41) & 0x10) != 0) {
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::resetScrollViewDelegate(*(id **)(a1 + 96));
  }
  uint64_t result = WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren();
  if (result)
  {
    unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
    BOOL v3 = v9 > 5;
    int v10 = (1 << v9) & 0x2B;
    if (v3 || v10 == 0)
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
    else
    {
      WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(*(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(a1 + 96), (WebCore::LayerRepresentation **)a2);
      return 1;
    }
  }
  return result;
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::commitStateAfterChildren(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = a2[16];
  BOOL v3 = v2 > 5;
  int v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0) {
    return 0;
  }
  WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(*(void *)(a1 + 96), (const WebCore::ScrollingStateScrollingNode *)a2);

  return MEMORY[0x1F41716F0](a1, a2);
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::repositionScrollingLayers(id **this)
{
  return WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(this[12]);
}

char *WebKit::ScrollingTreeOverflowScrollingNodeIOS::scrollbarStateForOrientation@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (char *)WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView(*(id **)(a1 + 96));
  if (!result) {
    goto LABEL_9;
  }
  if (a2)
  {
    if ([result showsVerticalScrollIndicator])
    {
LABEL_4:
      uint64_t result = "";
      uint64_t v6 = 1;
      goto LABEL_7;
    }
  }
  else if ([result showsHorizontalScrollIndicator])
  {
    goto LABEL_4;
  }
  uint64_t result = "none";
  uint64_t v6 = 5;
LABEL_7:
  if (v6 == 1)
  {
LABEL_9:
    uint64_t v7 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_10;
  }
  uint64_t result = (char *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v7 = v8;
LABEL_10:
  *a3 = v7;
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::isRemoteLayerTreeDrawingAreaProxyIOS(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  return 1;
}

void WebKit::RemoteScrollingCoordinatorProxyIOS::~RemoteScrollingCoordinatorProxyIOS(WebKit::RemoteScrollingCoordinatorProxyIOS *this, void *a2)
{
  WebKit::RemoteScrollingCoordinatorProxyIOS::~RemoteScrollingCoordinatorProxyIOS(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  BOOL v3 = *((void *)this + 19);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  int v4 = *((void *)this + 18);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }

  WebKit::RemoteScrollingCoordinatorProxy::~RemoteScrollingCoordinatorProxy(this);
}

__n128 WebKit::RemoteScrollingCoordinatorProxy::filteredWheelEvent@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v2;
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 11WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v3;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      BOOL v9 = v5 > *(_DWORD *)(a1 + 8);
      LODWORD(v5) = *(_DWORD *)(a1 + 12);
      if (v9)
      {
        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v5) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      long long v6 = (WebCore::Region *)(*(void *)a1 + 24 * v5);
      uint64_t v7 = 24 * v4 - 24 * v5;
      do
      {
        WebCore::Region::~Region(v6);
        long long v6 = (WebCore::Region *)(v8 + 24);
        v7 -= 24;
      }
      while (v7);
      *(_DWORD *)(a1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::Region const*,WebCore::Region const*,WebCore::Region*,0>(*(void *)a2, *(void *)a2 + 24 * v5, *(void *)a1);
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    unsigned int v11 = *(_DWORD *)(a2 + 12);
    if (v10 != v11)
    {
      uint64_t v12 = 3 * v10;
      uint64_t v13 = (WebCore::Region *)(*(void *)a1 + 8 * v12);
      unsigned int v14 = (const WebCore::Region *)(*(void *)a2 + 8 * v12);
      uint64_t v15 = 24 * v11 - 8 * v12;
      do
      {
        uint64_t v13 = (WebCore::Region *)(WebCore::Region::Region(v13, v14) + 24);
        unsigned int v14 = (const WebCore::Region *)((char *)v14 + 24);
        v15 -= 24;
      }
      while (v15);
      LODWORD(v10) = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v10;
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::Region const*,WebCore::Region const*,WebCore::Region*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      WebCore::Region::operator=();
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__optional_storage_base<WebCore::Region,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Region,false> const&>(WebCore::Region *a1, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)a1 + 24) == a2[24])
  {
    if (*((unsigned char *)a1 + 24))
    {
      WebCore::Region::operator=();
    }
  }
  else if (*((unsigned char *)a1 + 24))
  {
    WebCore::Region::~Region(a1);
    *(unsigned char *)(v2 + 24) = 0;
  }
  else
  {
    *(unsigned char *)(WebCore::Region::Region(a1, (const WebCore::Region *)a2) + 24) = 1;
  }
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      __n128 result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = 32 * v5;
        unint64_t v8 = v4;
        do
        {
          long long v9 = *(_OWORD *)v8;
          long long v10 = *((_OWORD *)v8 + 1);
          unint64_t v8 = (WTF *)((char *)v8 + 32);
          *(_OWORD *)__n128 result = v9;
          *(_OWORD *)(result + 16) = v10;
          result += 32;
          v7 -= 32;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  uint64_t v7 = (v6 ^ HIWORD(v6)) & v3;
  int v8 = *(_DWORD *)(v2 + 8 * v7);
  if (v8 == *a2) {
    return v2 + 8 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    int v8 = *(_DWORD *)(v2 + 8 * v7);
    ++v9;
    if (v8 == v4) {
      return v2 + 8 * v7;
    }
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t *WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::OptionSet<WebCore::TouchAction>&>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (__n128 result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (uint64_t *)(v8 + 8 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    float v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v8 + 8 * v21;
        *(unsigned char *)(a4 + 16) = 0;
        *((unsigned char *)v15 + 4) = *a3;
        return result;
      }
      if (v16 == -1) {
        float v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (uint64_t *)(v8 + 8 * v14);
      int v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *(_DWORD *)float v17 = 0;
      *((unsigned char *)v17 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      int v11 = *a2;
      uint64_t v15 = v17;
    }
  }
  *(_DWORD *)uint64_t v15 = v11;
  *((unsigned char *)v15 + 4) = *a3;
  uint64_t v19 = *v6;
  if (*v6) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v20;
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      __n128 result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v6, v15);
      uint64_t v15 = result;
      uint64_t v22 = *v6;
      if (*v6) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v22 + 8 * v25;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v8;
  int v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    unsigned int v12 = (_DWORD *)v6;
    do
    {
      if ((*v12 + 1) >= 2)
      {
        unsigned int v13 = (void *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookupForReinsert(a1, v12);
        void *v13 = *(void *)v12;
        if (v12 == a3) {
          int v11 = v13;
        }
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(8 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    unsigned int v5 = (unsigned char *)(v2 + 20);
    do
    {
      *((_DWORD *)v5 - 1) = 0;
      *unsigned int v5 = 0;
      v5 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookupForReinsert(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  int v4 = 0;
  unsigned int v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  unsigned int v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    uint64_t v7 = v6 & v3;
    unsigned int v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(v2 + 8 * v7));
  return v2 + 8 * v7;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  int v2 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v2 = *(_DWORD *)(v3 - 12) - 1;
  }
  *(_DWORD *)(v3 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v2;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingTreeNode,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  int v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = a2[3];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v3;
  if (v3)
  {
    if (v3 >= 0x6666667)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x198D67FACLL);
    }
    int v5 = 40 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v6;
    uint64_t v7 = a2[3];
    if (v7)
    {
      BOOL v8 = (unsigned int *)(*(void *)a2 + 36);
      uint64_t v9 = v6 + 24;
      uint64_t v10 = 40 * v7;
      do
      {
        long long v11 = *(_OWORD *)(v8 - 9);
        *(unsigned char *)(v9 - 8) = *((unsigned char *)v8 - 20);
        *(_OWORD *)(v9 - 24) = v11;
        uint64_t v12 = *v8;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v12;
        if (v12)
        {
          if (v12 >> 29) {
            goto LABEL_10;
          }
          unsigned int v13 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
          *(_DWORD *)(v9 + 8) = v12;
          *(void *)uint64_t v9 = v13;
          memcpy(v13, *(const void **)(v8 - 3), 8 * *v8);
        }
        v8 += 10;
        v9 += 40;
        v10 -= 40;
      }
      while (v10);
    }
  }
  return a1;
}

void sub_198D67FB8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKCertificateInfoGetTypeID()
{
  return 0;
}

uint64_t WKContextMenuItemGetTypeID()
{
  return 0;
}

uint64_t WKContextMenuItemCreateAsAction()
{
  return 0;
}

uint64_t WKContextMenuItemCreateAsCheckableAction()
{
  return 0;
}

uint64_t WKContextMenuItemCreateAsSubmenu()
{
  return 0;
}

uint64_t WKContextMenuItemSeparatorItem()
{
  return 0;
}

uint64_t WKContextMenuItemGetTag()
{
  return 0;
}

uint64_t WKContextMenuItemGetType()
{
  return 0;
}

uint64_t WKContextMenuItemCopyTitle()
{
  return 0;
}

uint64_t WKContextMenuItemGetEnabled()
{
  return 0;
}

uint64_t WKContextMenuItemGetChecked()
{
  return 0;
}

uint64_t WKContextMenuCopySubmenuItems()
{
  return 0;
}

uint64_t WKContextMenuItemGetUserData()
{
  return 0;
}

uint64_t WKDataGetTypeID()
{
  return 8;
}

uint64_t WKDataCreate(const void *a1, WTF *a2)
{
  API::Data::create(a2, a1, &v3);
  if (v3) {
    return *((void *)v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKDataGetBytes(void *a1)
{
  return *(void *)([a1 _apiObject] + 16);
}

uint64_t WKDataGetSize(void *a1)
{
  return *(void *)([a1 _apiObject] + 24);
}

uint64_t WKPreferencesGetQTKitEnabled()
{
  return 0;
}

uint64_t WKBundleFrameGetJavaScriptWrapperForFileForWorld()
{
  return 0;
}

uint64_t WKBundleFileHandleCreateWithPath()
{
  return 0;
}

uint64_t WKPreferencesGetAccelerated2DCanvasEnabled()
{
  return 0;
}

uint64_t WKDictionaryGetTypeID()
{
  return 9;
}

uint64_t WKDictionaryCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(a3);
  if (v5 <= 8) {
    unsigned int v6 = 8;
  }
  else {
    unsigned int v6 = v5;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
  uint64_t v35 = v7 + 16;
  *(_DWORD *)(v7 + 8) = v6 - 1;
  *(_DWORD *)(v7 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v6;
  *(void *)uint64_t v7 = 0;
  if (!a3) {
    goto LABEL_53;
  }
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = *(void **)(a1 + 8 * v8);
    if (v9) {
      [v9 _apiObject];
    }
    WTF::String::isolatedCopy();
    uint64_t v12 = *(void **)(a2 + 8 * v8);
    if (v12) {
      uint64_t v13 = [v12 _apiObject];
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v35;
    if (v35
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v35, 0), (uint64_t v14 = v35) != 0))
    {
      int v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      int v15 = 0;
    }
    unsigned int v16 = *((_DWORD *)v34 + 4);
    if (v16 >= 0x100) {
      unsigned int v17 = v16 >> 8;
    }
    else {
      unsigned int v17 = WTF::StringImpl::hashSlowCase(v34);
    }
    int v18 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v20 = v17 & v15;
      uint64_t v21 = (WTF **)(v14 + 16 * (v17 & v15));
      uint64_t v22 = *v21;
      if (*v21 == (WTF *)-1)
      {
        int v18 = (WTF **)(v14 + 16 * v20);
        goto LABEL_22;
      }
      if (!v22) {
        break;
      }
      if (WTF::equal(v22, v34, v11)) {
        goto LABEL_39;
      }
LABEL_22:
      unsigned int v17 = i + v20;
    }
    if (v18)
    {
      WTF::StringImpl *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(v35 - 16);
      uint64_t v21 = v18;
    }
    int v23 = v34;
    uint64_t v34 = 0;
    uint64_t v24 = *v21;
    void *v21 = v23;
    if (!v24)
    {
LABEL_28:
      if (!v13) {
        goto LABEL_30;
      }
LABEL_29:
      CFRetain(*(CFTypeRef *)(v13 + 8));
      goto LABEL_30;
    }
    if (*(_DWORD *)v24 != 2)
    {
      *(_DWORD *)v24 -= 2;
      goto LABEL_28;
    }
    WTF::StringImpl::destroy(v24, v10);
    if (v13) {
      goto LABEL_29;
    }
LABEL_30:
    unint64_t v25 = v21[1];
    v21[1] = (WTF *)v13;
    if (v25) {
      CFRelease(*((CFTypeRef *)v25 + 1));
    }
    if (v35) {
      int v26 = *(_DWORD *)(v35 - 12) + 1;
    }
    else {
      int v26 = 1;
    }
    *(_DWORD *)(v35 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v26;
    if (v35) {
      int v27 = *(_DWORD *)(v35 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v35 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v35 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28) {
LABEL_38:
      }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v35, (uint64_t)v21);
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_38;
    }
LABEL_39:
    long long v30 = v34;
    uint64_t v34 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v10);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    ++v8;
  }
  while (v8 != a3);
LABEL_53:
  long long v31 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(void *)long long v31 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v31);
  *(void *)long long v31 = &unk_1EE9D1E00;
  *((void *)v31 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v35;
  return *((void *)v31 + 1);
}

uint64_t WKDictionaryGetItemForKey(void *a1, void *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  unsigned int v5 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v3 + 16), &v10, v4);
  if (v5) {
    uint64_t v7 = *((void *)v5 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v10;
  uint64_t v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v7;
}

uint64_t WKDictionaryGetSize(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 16);
  if (v1) {
    return *(unsigned int *)(v1 - 12);
  }
  else {
    return 0;
  }
}

uint64_t WKDictionaryCopyKeys(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::Dictionary::keys((API::Dictionary *)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKErrorGetTypeID()
{
  return 10;
}

uint64_t WKErrorCopyWKErrorDomain()
{
  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  API::String::create(&v1);
  if (v1) {
    return *((void *)v1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKErrorCopyDomain(char *a1)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  MEMORY[0x19973EC60](a1 + 16);
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKErrorGetErrorCode(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  MEMORY[0x19973EC60](v1 + 16);
  return *(unsigned int *)(v1 + 72);
}

API::URL *WKErrorCopyFailingURL(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  MEMORY[0x19973EC60](v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v2 = (const WTF::String *)(v1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v4, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKErrorCopyLocalizedDescription(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  MEMORY[0x19973EC60](v1 + 16);
  API::String::create(&v3);
  if (v3) {
    return *((void *)v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKSizeGetTypeID()
{
  return 37;
}

uint64_t WKPointGetTypeID()
{
  return 36;
}

uint64_t WKRectGetTypeID()
{
  return 38;
}

uint64_t WKPointCreate(double a1, double a2)
{
  uint64_t v4 = API::Object::newObject(0x20uLL, 36);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(void *)uint64_t v4 = &unk_1EE9B3E80;
  *(double *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  return *(void *)(v4 + 8);
}

uint64_t WKSizeCreate(double a1, double a2)
{
  uint64_t v4 = API::Object::newObject(0x20uLL, 37);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(void *)uint64_t v4 = &unk_1EE9B3E58;
  *(double *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  return *(void *)(v4 + 8);
}

uint64_t WKRectCreate(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = API::Object::newObject(0x30uLL, 38);
  *(void *)uint64_t v8 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v8);
  *(void *)uint64_t v8 = &unk_1EE9B3EA8;
  *(double *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a2;
  *(double *)(v8 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = a3;
  *(double *)(v8 + 40) = a4;
  return *(void *)(v8 + 8);
}

double WKSizeGetValue(void *a1)
{
  return *(double *)([a1 _apiObject] + 16);
}

double WKPointGetValue(void *a1)
{
  return *(double *)([a1 _apiObject] + 16);
}

double WKRectGetValue(void *a1)
{
  return *(double *)([a1 _apiObject] + 16);
}

uint64_t WKImageGetTypeID()
{
  return 12;
}

uint64_t WKImageCreate(WebCore::DestinationColorSpace *a1, double a2, double a3)
{
  v6.i32[0] = (int)a2;
  v6.i32[1] = (int)a3;
  char v3 = a1 & 1;
  uint64_t v4 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(a1);
  WebKit::WebImage::create(&v6, v3, v4, 0, (WebKit::WebImage *)&v7);
  if (v7) {
    return *(void *)(v7 + 8);
  }
  else {
    return 0;
  }
}

double WKImageGetSize(void *a1)
{
  uint64_t v1 = *(WebCore::ImageBuffer **)([a1 _apiObject] + 16);
  if (v1) {
    LODWORD(v1) = WebCore::ImageBuffer::backendSize(v1);
  }
  return (double)(int)v1;
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreePluginScrollingNodeIOS::create@<X0>(WebCore::ScrollingTreeScrollingNode **a1@<X8>)
{
  uint64_t v2 = (WebCore::ScrollingTreeScrollingNode *)WTF::fastMalloc((WTF *)0x158);
  uint64_t result = WebKit::ScrollingTreePluginScrollingNodeIOS::ScrollingTreePluginScrollingNodeIOS(v2);
  *a1 = v2;
  return result;
}

void sub_198D6897C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreePluginScrollingNodeIOS::ScrollingTreePluginScrollingNodeIOS(WebCore::ScrollingTreeScrollingNode *a1)
{
  *(void *)WebCore::ScrollingTreePluginScrollingNode::ScrollingTreePluginScrollingNode() = &unk_1EE9D2370;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x38);
  WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate((WebCore::ScrollingTreeScrollingNodeDelegate *)v2, a1);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_1EE9D2440;
  *(void *)(v2 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *(void *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 48) = 0;
  uint64_t v3 = *((void *)a1 + 12);
  *((void *)a1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_198D68A48(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);
  MEMORY[0x199739890](v2);
  _Unwind_Resume(a1);
}

void WebKit::ScrollingTreePluginScrollingNodeIOS::~ScrollingTreePluginScrollingNodeIOS(WebKit::ScrollingTreePluginScrollingNodeIOS *this)
{
  uint64_t v1 = (WTF *)MEMORY[0x199739890](this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::scrollView(WebKit::ScrollingTreePluginScrollingNodeIOS *this)
{
  uint64_t v1 = [*(id *)(*((void *)this + 12) + 24) delegate];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView(id *this)
{
  uint64_t v1 = [this[3] delegate];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  BOOL v3 = v2 > 5;
  int v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0) {
    return 0;
  }
  if ((*(unsigned char *)(a2 + 41) & 0x10) != 0) {
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::resetScrollViewDelegate(*(id **)(a1 + 96));
  }
  uint64_t result = WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren();
  if (result)
  {
    unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
    BOOL v3 = v9 > 5;
    int v10 = (1 << v9) & 0x2B;
    if (v3 || v10 == 0)
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
    else
    {
      WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(*(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(a1 + 96), (WebCore::LayerRepresentation **)a2);
      return 1;
    }
  }
  return result;
}

void *WebKit::ScrollingTreeScrollingNodeDelegateIOS::resetScrollViewDelegate(id *this)
{
  uint64_t result = (void *)[this[3] delegate];
  if (result) {
    return (void *)[result setDelegate:0];
  }
  return result;
}

void WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(WebKit::ScrollingTreeScrollingNodeDelegateIOS *this, WebCore::LayerRepresentation **a2)
{
  if ((*((unsigned char *)a2 + 41) & 0x10) != 0)
  {
    PlatformLayerTyped = (const void *)WebCore::LayerRepresentation::makePlatformLayerTyped(a2[33], a2);
    int v4 = PlatformLayerTyped;
    if (PlatformLayerTyped) {
      CFRetain(PlatformLayerTyped);
    }
    unsigned int v5 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = v4;
    if (v5)
    {
      CFRelease(v5);
    }
  }
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::commitStateAfterChildren(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = a2[16];
  BOOL v3 = v2 > 5;
  int v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0) {
    return 0;
  }
  WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(*(void *)(a1 + 96), (const WebCore::ScrollingStateScrollingNode *)a2);

  return MEMORY[0x1F41716F0](a1, a2);
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(uint64_t this, const WebCore::ScrollingStateScrollingNode *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 49);
  *(unsigned char *)(this + 49) = 1;
  if ((*((_WORD *)a2 + 20) & 0x107C) == 0) {
    goto LABEL_22;
  }
  unsigned int v5 = (void *)[*(id *)(this + 24) delegate];
  objc_opt_class();
  this = objc_opt_isKindOfClass();
  if ((this & 1) == 0) {
    unsigned int v5 = 0;
  }
  if ((*((unsigned char *)a2 + 41) & 0x10) != 0)
  {
    if (!*(void *)(v3 + 40))
    {
      int32x2_t v6 = [[WKScrollingNodeScrollViewDelegate alloc] initWithScrollingTreeNodeDelegate:v3];
      uint64_t v7 = *(const void **)(v3 + 40);
      *(void *)(v3 + 40) = v6;
      if (v7) {
        CFRelease(v7);
      }
    }
    [v5 setScrollsToTop:0];
    [v5 setDelegate:*(void *)(v3 + 40)];
    [v5 setBaseScrollViewDelegate:*(void *)(v3 + 40)];
    this = objc_opt_respondsToSelector();
    if (this)
    {
      [v5 setTracksImmediatelyWhileDecelerating:0];
      this = [v5 _setAvoidsJumpOnInterruptedBounce:1];
    }
  }
  unint64_t v8 = *((void *)a2 + 5);
  if ((v8 & 8) != 0)
  {
    WebCore::FloatSize::operator CGSize();
    this = objc_msgSend(v5, "setContentSize:");
    unint64_t v8 = *((void *)a2 + 5);
    LODWORD(v9) = 1;
    if ((v8 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v9 = (v8 >> 2) & 1;
  if ((v8 & 0x40) != 0)
  {
LABEL_14:
    this = WebKit::ScrollingTreeScrollingNodeDelegateIOS::updateScrollViewForOverscrollBehavior(v5, *((unsigned __int8 *)a2 + 442), *((unsigned __int8 *)a2 + 443), 1);
    unint64_t v8 = *((void *)a2 + 5);
  }
LABEL_15:
  if ((((v8 & 0x20) == 0) & ~v9) == 0)
  {
    if (WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin((WebCore::ScrollingTreeScrollingNodeDelegate *)v3))
    {
      WebCore::ScrollingTreeScrollingNodeDelegate::reachableContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      float v11 = v10;
      WebCore::ScrollingTreeScrollingNodeDelegate::totalContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      double v13 = (float)(v11 - v12);
    }
    else
    {
      double v13 = 0.0;
    }
    unint64_t v14 = WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
    double v15 = 0.0;
    if (HIDWORD(v14))
    {
      WebCore::ScrollingTreeScrollingNodeDelegate::reachableContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      float v17 = v16;
      WebCore::ScrollingTreeScrollingNodeDelegate::totalContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      double v15 = (float)(v17 - v18);
    }
    this = objc_msgSend(v5, "setContentInset:", v15, v13, 0.0, 0.0);
  }
LABEL_22:
  if (*((unsigned char *)a2 + 41))
  {
    uint64_t v19 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v3 + 8));
    unsigned int v20 = (double *)MEMORY[0x1E4F43CD8];
    if (!*(_DWORD *)(v19 + 20)
      && !*(_DWORD *)(WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v3 + 8))
                    + 36))
    {
      unsigned int v20 = (double *)MEMORY[0x1E4F43CE0];
    }
    double v21 = *v20;
    uint64_t v22 = [*(id *)(v3 + 24) delegate];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v23 = (void *)v22;
    }
    else {
      int v23 = 0;
    }
    this = [v23 setDecelerationRate:v21];
  }
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0)
  {
    uint64_t v24 = (void *)[*(id *)(v3 + 24) delegate];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      uint64_t v24 = 0;
    }
    [v24 setShowsHorizontalScrollIndicator:*(unsigned __int8 *)(*(void *)(v3 + 8) + 256) != 1];
    [v24 setShowsVerticalScrollIndicator:*(unsigned __int8 *)(*(void *)(v3 + 8) + 257) != 1];
    uint64_t v25 = *(void *)(v3 + 8);
    BOOL v26 = *(unsigned char *)(v25 + 250) != 1 || *(unsigned __int8 *)(v25 + 251) != 1;
    this = [v24 setScrollEnabled:v26];
  }
  uint64_t v27 = *((void *)a2 + 5);
  if ((v27 & 0x80) != 0)
  {
    WebCore::ScrollingTreeScrollingNode::handleScrollPositionRequest();
    this = WebCore::ScrollingTreeScrollingNodeDelegate::scrollingTree((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
    *(unsigned char *)(this + 34WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
    uint64_t v27 = *((void *)a2 + 5);
  }
  if ((v27 & 0x200000) != 0)
  {
    int v28 = *((unsigned __int8 *)a2 + 533);
    unint64_t v29 = (void *)[*(id *)(v3 + 24) delegate];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      unint64_t v29 = 0;
    }
    BOOL v30 = v28 != 2 && *(unsigned __int8 *)(*(void *)(v3 + 8) + 256) != 1;
    [v29 setShowsHorizontalScrollIndicator:v30];
    BOOL v31 = v28 != 2 && *(unsigned __int8 *)(*(void *)(v3 + 8) + 256) != 1;
    this = [v29 setShowsVerticalScrollIndicator:v31];
  }
  *(unsigned char *)(v3 + 49) = v4;
  return this;
}

void sub_198D690B8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    char v4 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v4);
    objc_end_catch();
    JUMPOUT(0x198D68EF8);
  }
  *(unsigned char *)(v2 + 49) = v3;
  _Unwind_Resume(exc_buf);
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::repositionScrollingLayers(id **this)
{
  return WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(this[12]);
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(id *this)
{
  uint64_t v2 = [this[3] delegate];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = (void *)v2;
  }
  else {
    char v3 = 0;
  }
  uint64_t result = objc_msgSend(v3, "_wk_isScrollAnimating");
  if ((result & 1) == 0)
  {
    unsigned int v5 = (void *)[this[3] delegate];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      unsigned int v5 = 0;
    }
    int32x2_t v6 = (char *)this[1];
    float32x2_t v7 = *(float32x2_t *)(v6 + 144);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v9, (const IntPoint *)v6 + 19);
    float32x2_t v8 = vadd_f32(v7, v9);
    WebCore::FloatPoint::operator CGPoint();
    return [v5 setContentOffset:*(void *)&v8];
  }
  return result;
}

void sub_198D69254(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x198D6923CLL);
  }
  _Unwind_Resume(exception_object);
}

WebCore::ScrollingTreeScrollingNodeDelegate *WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollViewDidScroll(WebCore::ScrollingTreeScrollingNodeDelegate *this, const WebCore::FloatPoint *a2, float a3, float a4)
{
  if (!*((unsigned char *)this + 49))
  {
    IntPoint v6 = (IntPoint)WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin(this);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v7, &v6);
    void v7[2] = a3 - v7[0];
    v7[3] = a4 - v7[1];
    return (WebCore::ScrollingTreeScrollingNodeDelegate *)WebCore::ScrollingTreeScrollingNode::wasScrolledByDelegatedScrolling();
  }
  return this;
}

void WebKit::ScrollingTreeScrollingNodeDelegateIOS::~ScrollingTreeScrollingNodeDelegateIOS(WebKit::ScrollingTreeScrollingNodeDelegateIOS *this)
{
  uint64_t v2 = (void *)[*((id *)this + 3) delegate];
  char v4 = v2;
  if (v2 && [v2 delegate] == *((void *)this + 5)) {
    [v4 setDelegate:0];
  }
  unsigned int v5 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    CFRelease(v5);
  }
  IntPoint v6 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    CFRelease(v6);
  }
  float32x2_t v7 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v3);

  WebCore::ScrollingTreeScrollingNodeDelegate::~ScrollingTreeScrollingNodeDelegate(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ScrollingTreeScrollingNodeDelegateIOS::~ScrollingTreeScrollingNodeDelegateIOS(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::startAnimatedScrollToPosition(id *a1, float a2, float a3)
{
  IntPoint v10 = (IntPoint)WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin((WebCore::ScrollingTreeScrollingNodeDelegate *)a1);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v11, &v10);
  v11[2] = a2 + v11[0];
  _OWORD v11[3] = a3 + v11[1];
  uint64_t v6 = [a1[3] delegate];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  WebCore::FloatPoint::operator CGPoint();
  if (isKindOfClass) {
    float32x2_t v8 = (void *)v6;
  }
  else {
    float32x2_t v8 = 0;
  }
  objc_msgSend(v8, "setContentOffset:animated:", 1);
  return 1;
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::stopAnimatedScroll(id *this)
{
  uint64_t v1 = [this[3] delegate];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = (void *)v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return objc_msgSend(v2, "_wk_stopScrollingAndZooming");
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, int a5, void *a6)
{
  *(void *)a1 = 0;
  float v11 = (atomic_uint **)(a2 + 8);
  float v12 = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  double v13 = *v11;
  if (*v11) {
    atomic_fetch_add(v13, 1u);
  }
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v14 = (void **)(a1 + 16);
  *(void *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 7WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  uint64_t v15 = [objc_alloc((Class)WebKit::getASCAuthorizationPresentationContextClass[0]((WebKit *)v12)) initWithRequestContext:0 appIdentifier:0];
  float v16 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  if (v16) {
    CFRelease(v16);
  }
  float v17 = (WebKit *)[(id)WebKit::getASCAuthorizationPresentationContextClass[0]((WebKit *)v16) instancesRespondToSelector:sel_setServiceName_];
  if (v17)
  {
    float v18 = *v14;
    if (*a3) {
      uint64_t v19 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v19 = &stru_1EEA10550;
    }
    float v17 = (WebKit *)[v18 setServiceName:v19];
  }
  if (a5)
  {
    unsigned __int8 v48 = 0;
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v48)|| (unsigned __int8 v47 = 1, WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v47)))
    {
      unsigned __int8 v46 = 3;
      BOOL v20 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v46);
      if (!v20)
      {
        double v21 = *v14;
        uint64_t v22 = [objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0]((WebKit *)v20)) initAssertionPlaceholderChoice];
        [v21 addLoginChoice:v22];
        if (v22)
        {
          int v23 = (const void *)v22;
LABEL_26:
          CFRelease(v23);
        }
      }
    }
  }
  else
  {
    uint64_t v24 = (void *)[objc_alloc((Class)WebKit::getASCPublicKeyCredentialCreationOptionsClass[0](v17)) init];
    if (*a6) {
      uint64_t v25 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v25 = &stru_1EEA10550;
    }
    [v24 setUserName:v25];
    unsigned __int8 v51 = 3;
    BOOL v26 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v51);
    if (v26)
    {
      uint64_t v27 = *v14;
      int v28 = (const void *)[objc_alloc((Class)WebKit::getASCPlatformPublicKeyCredentialLoginChoiceClass[0]((WebKit *)v26)) initRegistrationChoiceWithOptions:v24];
      [v27 addLoginChoice:v28];
      if (v28) {
        CFRelease(v28);
      }
    }
    unsigned __int8 v50 = 0;
    BOOL v29 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v50);
    if (v29
      || (unsigned __int8 v49 = 1,
          BOOL v29 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v49)))
    {
      BOOL v30 = *v14;
      BOOL v31 = (const void *)[objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0]((WebKit *)v29)) initRegistrationChoiceWithOptions:v24];
      [v30 addLoginChoice:v31];
      if (v31) {
        CFRelease(v31);
      }
    }
    if (v24)
    {
      int v23 = v24;
      goto LABEL_26;
    }
  }
  long long v32 = [[WKASCAuthorizationPresenterDelegate alloc] initWithCoordinator:a1];
  size_t v33 = *(void **)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v32;
  if (v33) {
    CFRelease(v33);
  }
  uint64_t v34 = (void *)[objc_alloc((Class)WebKit::getASCAuthorizationPresenterClass[0]((WebKit *)v33)) init];
  uint64_t v35 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = v34;
  if (v35)
  {
    CFRelease(v35);
    uint64_t v34 = *(void **)(a1 + 24);
  }
  [v34 setDelegate:*(void *)(a1 + 32)];
  uint64_t v36 = *(atomic_uint **)(a1 + 8);
  if (v36) {
    atomic_fetch_add(v36, 1u);
  }
  int v37 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v37 = MEMORY[0x1E4F14398];
  v37[1] = 50331650;
  void v37[2] = WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke;
  v37[3] = &WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::descriptor;
  v37[4] = v36;
  if (a5
    && (unsigned __int8 v45 = 3,
        WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v45)))
  {
    unsigned __int8 v44 = 0;
    BOOL v38 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v44);
    BOOL v39 = 1;
    if (!v38)
    {
      unsigned __int8 v43 = 1;
      BOOL v39 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v43);
    }
    *(unsigned char *)(a1 + 48) = v39;
    int v40 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v40 = &unk_1EE9D2618;
    v40[1] = v37;
    _OWORD v40[2] = a1;
    uint64_t v41 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v40;
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
    _Block_release(0);
    int v37 = 0;
  }
  else
  {
    [*(id *)(a1 + 24) presentAuthorizationWithContext:*(void *)(a1 + 16) completionHandler:v37];
  }
  _Block_release(v37);
  return a1;
}

void sub_198D6A6BC(_Unwind_Exception *a1)
{
  _Block_release(v2);
  uint64_t v7 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v1 + 88);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v6);
  }
  uint64_t v9 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  IntPoint v10 = *(const void **)(v1 + 72);
  *(void *)(v1 + 7WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *v4;
  uint64_t *v4 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  unint64_t v14 = *(const void **)(v1 + 32);
  *(void *)(v1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v15) {
    CFRelease(v15);
  }
  float v16 = *v3;
  void *v3 = 0;
  if (v16) {
    CFRelease(v16);
  }
  float v17 = *(unsigned int **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v17)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v6);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v1, v6);
  _Unwind_Resume(a1);
}

void WebKit::AuthenticatorPresenterCoordinator::~AuthenticatorPresenterCoordinator(WebKit::AuthenticatorPresenterCoordinator *this, WTF::StringImpl *a2)
{
  char v3 = (uint64_t *)((char *)this + 64);
  if (*((void *)this + 8)) {
    WTF::CompletionHandler<void ()(LAContext *)>::operator()((uint64_t *)this + 8);
  }
  char v4 = (uint64_t *)((char *)this + 80);
  if (*((void *)this + 10)) {
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::operator()((uint64_t *)this + 10);
  }
  unsigned int v5 = (uint64_t *)((char *)this + 96);
  if (*((void *)this + 12))
  {
    float v18 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WebKit::AuthenticatorPresenterCoordinator *)((char *)this + 96), (WTF::RefCountedBase *)&v18);
    uint64_t v6 = v18;
    float v18 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *v5;
    *unsigned int v5 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    *unsigned int v5 = 0;
  }
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  }
  uint64_t v9 = *v4;
  uint64_t *v4 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  IntPoint v10 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *v3;
  uint64_t *v3 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  unint64_t v14 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v15) {
    CFRelease(v15);
  }
  float v16 = (const void *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v16) {
    CFRelease(v16);
  }
  float v17 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void sub_198D6AB24(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  uint64_t v13 = *(void *)(v10 + 96);
  *(void *)(v10 + 96) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(v10 + 88);
  if (v14) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, a2);
  }
  uint64_t v15 = *(void *)(v10 + 80);
  *(void *)(v10 + 80) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  float v16 = *(const void **)(v10 + 72);
  *(void *)(v10 + 7WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *v11;
  uint64_t *v11 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v10 + 56);
  *(void *)(v10 + 56) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(v10 + 40);
  *(void *)(v10 + 40) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  BOOL v20 = *(const void **)(v10 + 32);
  *(void *)(v10 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v20) {
    CFRelease(v20);
  }
  double v21 = *(const void **)(v10 + 24);
  *(void *)(v10 + 24) = 0;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(v10 + 16);
  *(void *)(v10 + 16) = 0;
  if (v22) {
    CFRelease(v22);
  }
  int v23 = *(unsigned int **)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v23)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v10, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(LAContext *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D6AD4C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D6AE00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::AuthenticatorPresenterCoordinator::updatePresenter(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      id v3 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v3 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v3) code:4 userInfo:0];
      [*(id *)(a1 + 24) updateInterfaceForUserVisibleError:v4];
      goto LABEL_15;
    case 1:
      id v11 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v11 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v11) code:5 userInfo:0];
      [*(id *)(a1 + 24) updateInterfaceForUserVisibleError:v4];
      goto LABEL_15;
    case 2:
      id v6 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v6 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v6) code:10 userInfo:0];
      (*(void (**)(void, void, const void *))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, v4);
      goto LABEL_15;
    case 3:
      id v7 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v7 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v7) code:9 userInfo:0];
      (*(void (**)(void, void, const void *))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, v4);
      goto LABEL_15;
    case 4:
      id v5 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v5 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v5) code:8 userInfo:0];
      (*(void (**)(void, void, const void *))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, v4);
      goto LABEL_15;
    case 5:
      id v12 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v12 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v12) code:6 userInfo:0];
      [*(id *)(a1 + 24) updateInterfaceForUserVisibleError:v4];
      goto LABEL_15;
    case 6:
      id v13 = objc_alloc(MEMORY[0x1E4F28C58]);
      char v4 = (const void *)[v13 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v13) code:7 userInfo:0];
      [*(id *)(a1 + 24) updateInterfaceForUserVisibleError:v4];
LABEL_15:
      if (!v4) {
        return;
      }
      goto LABEL_20;
    case 7:
      if (*(unsigned char *)(a1 + 48))
      {
        uint64_t v8 = *(void **)(a1 + 16);
        uint64_t v9 = (const void *)[objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0]((WebKit *)a1)) initAssertionPlaceholderChoice];
        [v8 addLoginChoice:v9];
        if (v9) {
          CFRelease(v9);
        }
        uint64_t v10 = *(void (**)(void))(**(void **)(a1 + 40) + 16);
        v10();
      }
      else
      {
        id v14 = objc_alloc(MEMORY[0x1E4F28C58]);
        char v4 = (const void *)[v14 initWithDomain:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v14) code:5 userInfo:0];
        uint64_t v15 = *(void **)(a1 + 24);
        uint64_t v16 = [*(id *)(a1 + 16) serviceName];
        uint64_t v17 = *(atomic_uint **)(a1 + 8);
        if (v17) {
          atomic_fetch_add(v17, 1u);
        }
        uint64_t v18 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
        void *v18 = MEMORY[0x1E4F14398];
        v18[1] = 50331650;
        void v18[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::{lambda(void *)#1}::__invoke;
        v18[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::descriptor;
        void v18[4] = v17;
        [v15 presentError:v4 forService:v16 completionHandler:v18];
        _Block_release(v18);
        if (v4)
        {
LABEL_20:
          CFRelease(v4);
        }
      }
      return;
    default:
      return;
  }
}

void sub_198D6B218(_Unwind_Exception *a1)
{
  id v3 = v2;
  _Block_release(v3);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::requestPin(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v5 = (uint64_t *)(a1 + 96);
  if (*(void *)(a1 + 96))
  {
    uint64_t v10 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 96), (WTF::RefCountedBase *)&v10);
    id v7 = v10;
    uint64_t v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t result = *v5;
  *id v5 = v8;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (!*(unsigned char *)(a1 + 104))
  {
    *(unsigned char *)(a1 + 104) = 1;
    return [*(id *)(a1 + 24) presentPINEntryInterface];
  }
  return result;
}

void sub_198D6B374(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuthenticatorPresenterCoordinator::selectAssertionResponse(uint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v8 = (uint64_t *)(a1 + 80);
  if (*(void *)(a1 + 80)) {
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::operator()((uint64_t *)(a1 + 80));
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = *v8;
  *uint64_t v8 = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (a3)
  {
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v13 = *(void *)(a1 + 88);
    if (v13)
    {
      *(void *)(a1 + 88) = 0;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v11);
    }
    uint64_t v14 = a2[3];
    if (v14)
    {
      uint64_t v15 = *(uint64_t **)a2;
      uint64_t v16 = 8 * v14;
      do
      {
        if (*(void *)(*v15 + 144))
        {
          uint64_t v17 = *(JSC::ArrayBuffer **)(*v15 + 136);
          if (v17)
          {
            uint64_t v18 = JSC::ArrayBuffer::span(v17);
            uint64_t v17 = (JSC::ArrayBuffer *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v18 length:v19];
            BOOL v20 = v17;
          }
          else
          {
            BOOL v20 = 0;
          }
          id v21 = objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0](v17));
          uint64_t v22 = *v15;
          if (*(void *)(*v15 + 144))
          {
            int v23 = (__CFString *)WTF::StringImpl::operator NSString *();
            uint64_t v22 = *v15;
          }
          else
          {
            int v23 = &stru_1EEA10550;
          }
          if (*(void *)(v22 + 152)) {
            uint64_t v24 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v24 = &stru_1EEA10550;
          }
          uint64_t v25 = (const void *)[v21 initWithName:v23 displayName:v24 userHandle:v20];
          [v12 addObject:v25];
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((uint64_t)v42, (uint64_t *)(a1 + 88), (WTF::StringImpl **)(*v15 + 144), v15);
          if (v25) {
            CFRelease(v25);
          }
          if (v20) {
            CFRelease(v20);
          }
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    [*(id *)(a1 + 24) updateInterfaceWithLoginChoices:v12];
    if (v12)
    {
      CFRelease(v12);
    }
  }
  else
  {
    BOOL v26 = *(WebKit **)(a1 + 88);
    if (v26)
    {
      *(void *)(a1 + 88) = 0;
      BOOL v26 = (WebKit *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v26, (WTF::StringImpl *)a2);
    }
    uint64_t v27 = a2[3];
    if (v27)
    {
      int v28 = *(uint64_t **)a2;
      uint64_t v29 = 8 * v27;
      do
      {
        BOOL v30 = *(JSC::ArrayBuffer **)(*v28 + 136);
        if (v30)
        {
          uint64_t v31 = JSC::ArrayBuffer::span(v30);
          BOOL v30 = (JSC::ArrayBuffer *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v31 length:v32];
          size_t v33 = v30;
        }
        else
        {
          size_t v33 = 0;
        }
        id v34 = objc_alloc((Class)WebKit::getASCPlatformPublicKeyCredentialLoginChoiceClass[0](v30));
        uint64_t v35 = *v28;
        if (*(void *)(*v28 + 144))
        {
          uint64_t v36 = (__CFString *)WTF::StringImpl::operator NSString *();
          uint64_t v35 = *v28;
        }
        else
        {
          uint64_t v36 = &stru_1EEA10550;
        }
        if (*(void *)(v35 + 152)) {
          int v37 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          int v37 = &stru_1EEA10550;
        }
        BOOL v38 = (const void *)[v34 initWithName:v36 displayName:v37 userHandle:v33];
        [*(id *)(a1 + 16) addLoginChoice:v38];
        BOOL v26 = (WebKit *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((uint64_t)v42, (uint64_t *)(a1 + 88), (WTF::StringImpl **)(*v28 + 144), v28);
        if (v38) {
          CFRelease(v38);
        }
        if (v33) {
          CFRelease(v33);
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    if (*(unsigned char *)(a1 + 48))
    {
      BOOL v39 = *(void **)(a1 + 16);
      int v40 = (const void *)[objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0](v26)) initAssertionPlaceholderChoice];
      [v39 addLoginChoice:v40];
      if (v40) {
        CFRelease(v40);
      }
    }
    uint64_t v41 = *(void (**)(void))(**(void **)(a1 + 40) + 16);
    v41();
  }
}

void sub_198D6B760(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  id v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    id v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=(v15, a3);
    uint64_t v18 = *a4;
    *a4 = 0;
    uint64_t result = (uint64_t *)v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    uint64_t v23 = *a2;
    if (*a2) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v24;
    uint64_t v25 = *a2;
    if (*a2) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_32:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
        uint64_t v15 = result;
        uint64_t v25 = *a2;
        if (*a2) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_32;
    }
    uint64_t v22 = v25 + 16 * v28;
    char v21 = 1;
    goto LABEL_37;
  }
  uint64_t result = (uint64_t *)WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v19 = *a2;
  if (*a2) {
    uint64_t v20 = *(unsigned int *)(v19 - 4);
  }
  else {
    uint64_t v20 = 0;
  }
  char v21 = 0;
  uint64_t v22 = v19 + 16 * v20;
LABEL_37:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v22;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 72)) {
    return WTF::CompletionHandler<void ()(LAContext *)>::operator()(a2);
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::dimissPresenter(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && *(void *)(a1 + 56))
  {
    id v3 = objc_alloc((Class)WebKit::getASCAppleIDCredentialClass((WebKit *)a1));
    id v4 = objc_alloc_init(MEMORY[0x1E4F1C9B8]);
    id v5 = (const void *)[v3 initWithUser:&stru_1EEA10550 identityToken:v4 state:0];
    (*(void (**)(void, const void *, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), v5, 0);
    if (v5) {
      CFRelease(v5);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  id v6 = *(void **)(a1 + 24);

  return [v6 dismissWithError:0];
}

void sub_198D6BAD4(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuthenticatorPresenterCoordinator::setLAContext(WebKit::AuthenticatorPresenterCoordinator *this, CFTypeRef cf)
{
  uint64_t v5 = *((void *)this + 8);
  id v4 = (uint64_t *)((char *)this + 64);
  if (v5)
  {
    WTF::CompletionHandler<void ()(LAContext *)>::operator()(v4);
  }
  else
  {
    if (cf) {
      CFRetain(cf);
    }
    id v6 = (const void *)*((void *)this + 9);
    *((void *)this + 9) = cf;
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

_DWORD *WebKit::AuthenticatorPresenterCoordinator::didSelectAssertionResponse(WebKit::AuthenticatorPresenterCoordinator *this, WTF::StringImpl **a2, LAContext *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 88);
  id v6 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 11, a2, (const WTF::StringImpl *)a3);
  uint64_t result = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::take(v5, v6, &v8);
  if (v8)
  {
    if (a3) {
      WebCore::AuthenticatorAssertionResponse::setLAContext(v8, a3);
    }
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::operator()((uint64_t *)this + 10);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  return result;
}

void sub_198D6BC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CcidConnection::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::CcidConnection::CcidConnection(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_198D6BCE0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CcidConnection::CcidConnection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = (atomic_uint **)(a3 + 8);
  uint64_t v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  id v7 = *v5;
  if (*v5) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  int v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v9 = &unk_1EE9D2640;
  v9[1] = WebKit::CcidConnection::startPolling;
  uint64_t v9[2] = 0;
  v9[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 32), v8);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = &unk_1EE9B3390;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = 0;
  WebKit::CcidConnection::detectContactless((WebKit::CcidConnection *)a1);
  WebKit::CcidConnection::trySelectFidoApplet((WebKit::CcidConnection *)a1);
  return a1;
}

void sub_198D6BDF8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  id v7 = *(unsigned int **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  uint64_t v8 = *(const void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v8) {
    CFRelease(v8);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v6);
  _Unwind_Resume(a1);
}

WTF *WebKit::CcidConnection::startPolling(WebKit::CcidConnection *this)
{
  WebKit::CcidConnection::detectContactless(this);

  return WebKit::CcidConnection::trySelectFidoApplet(this);
}

void WebKit::CcidConnection::~CcidConnection(WebKit::CcidConnection *this)
{
  uint64_t v2 = (WebKit::CcidConnection *)((char *)this + 32);
  *((void *)this + 4) = &unk_1EE9B3390;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  uint64_t v6 = (const void *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

WTF *WebKit::CcidConnection::detectContactless(WebKit::CcidConnection *this)
{
  uint64_t v2 = (WTF *)WTF::fastMalloc((WTF *)5);
  v8[1] = (WTF *)0x500000005;
  v8[0] = v2;
  *(_DWORD *)uint64_t v2 = 51967;
  *((unsigned char *)v2 + 4) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9D2668;
  v4[1] = v3;
  id v7 = v4;
  WebKit::CcidConnection::transact((uint64_t)this, (uint64_t *)v8, (uint64_t *)&v7);
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  uint64_t result = v8[0];
  if (v8[0])
  {
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_198D6C0B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CcidConnection::transact(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = malloc_type_malloc(0x40uLL, 0x10F0040B1C425BBuLL);
  *uint64_t v8 = MEMORY[0x1E4F14398];
  v8[1] = 50331650;
  uint64_t v8[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::descriptor;
  void v8[4] = a1;
  v8[5] = v5;
  v8[6] = v6;
  v8[7] = v7;
  [v4 beginSessionWithReply:v8];

  _Block_release(v8);
}

void sub_198D6C200(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::CcidConnection::trySelectFidoApplet(WebKit::CcidConnection *this)
{
  uint64_t v2 = (WTF *)WTF::fastMalloc((WTF *)0xD);
  uint64_t v3 = 0;
  v9[1] = (WTF *)0xD0000000DLL;
  v9[0] = v2;
  do
  {
    *((unsigned char *)v2 + v3) = fido::kCtapNfcAppletSelectionCommand[v3];
    ++v3;
  }
  while (v3 != 13);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v4 = (atomic_uint *)*((void *)this + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9D2690;
  v5[1] = v4;
  uint64_t v8 = v5;
  WebKit::CcidConnection::transact((uint64_t)this, (uint64_t *)v9, (uint64_t *)&v8);
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  uint64_t result = v9[0];
  if (v9[0])
  {
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

void sub_198D6C35C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CcidService *WebKit::CcidService::CcidService(WebKit::CcidService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  uint64_t v3 = WebKit::FidoService::FidoService(this, a2);
  *(void *)uint64_t v3 = &unk_1EE9D24C8;
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main(v3);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9D26E0;
  v5[1] = WebKit::CcidService::platformStartDiscovery;
  uint64_t v5[2] = 0;
  v5[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::CcidService *)((char *)this + 32), v4);
  *((void *)this + 4) = &unk_1EE9B3390;
  *((void *)this + 7) = v5;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  return this;
}

void sub_198D6C494(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)uint64_t v1 = &unk_1EE9B5558;
  uint64_t v5 = *((void *)v1 + 3);
  if (v5) {
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v5, v4);
  }
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CcidService::platformStartDiscovery(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void WebKit::CcidService::~CcidService(WebKit::CcidService *this)
{
  *(void *)this = &unk_1EE9D24C8;
  WebKit::CcidService::removeObservers(this);
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (WebKit::CcidConnection *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::CcidConnection>::deref(v5);
  }
  *((void *)this + 4) = &unk_1EE9B3390;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::CcidService *)((char *)this + 32));
  *(void *)this = &unk_1EE9B5558;
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v8, v7);
  }

  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::CcidService::~CcidService(this);

  WTF::fastFree(v1, v2);
}

void sub_198D6C630(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[10];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (const void *)v2[9];
  v2[9] = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (WebKit::CcidConnection *)v2[8];
  v2[8] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::CcidConnection>::deref(v6);
  }
  v2[4] = &unk_1EE9B3390;
  uint64_t v7 = v2[7];
  v2[7] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 4));
  void *v2 = &unk_1EE9B5558;
  uint64_t v9 = v2[3];
  if (v9) {
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v9, v8);
  }
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService((WebKit::AuthenticatorTransportService *)v2);
  _Unwind_Resume(a1);
}

void WebKit::CcidService::removeObservers(WebKit::CcidService *this)
{
  if (*((void *)this + 9))
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F25248], "defaultManager"), "removeObserver:forKeyPath:", *((void *)this + 9), @"slotNames");
    uint64_t v2 = (const void *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v2) {
      CFRelease(v2);
    }
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  uint64_t v4 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v3);
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  if (v3) {
    uint64_t v8 = (WTF::StringImpl *)&v3[2 * *((unsigned int *)v3 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v4)
  {
    do
    {
      uint64_t v9 = (void *)*((void *)v6 + 1);
      if (v9) {
        CFRetain(*((CFTypeRef *)v6 + 1));
      }
      [v9 removeObserver];
      if (v9) {
        CFRelease(v9);
      }
      while (1)
      {
        uint64_t v6 = (WTF::StringImpl *)((char *)v6 + 16);
        if (v6 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v6 + 1) > 1) {
          goto LABEL_16;
        }
      }
      uint64_t v6 = v7;
LABEL_16:
      ;
    }
    while (v6 != v8);
    uint64_t v3 = (void *)*((void *)this + 10);
  }
  if (v3)
  {
    *((void *)this + 10) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v3, v5);
  }
}

void sub_198D6C80C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CcidService::didConnectTag(WebKit::CcidService *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    ++*(_DWORD *)v2;
  }
  int v3 = *(unsigned __int8 *)(v2 + 64);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  if (v3) {
    char v5 = 1;
  }
  else {
    char v5 = 6;
  }
  *(_DWORD *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 20) = v5;
  *(void *)uint64_t v4 = &unk_1EE9B3A48;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 24) = v2;
  uint64_t v7 = v4;
  WebKit::FidoService::getInfo((uint64_t)this, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D6C914(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::CcidConnection>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CcidService::startDiscoveryInternal(WebKit::CcidService *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 32))();
}

uint64_t WebKit::CcidService::restartDiscoveryInternal(WebKit::CcidService *this)
{
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WebKit::CcidService::platformStartDiscovery(WebKit::CcidService *this)
{
  WebKit::CcidService::removeObservers(this);
  uint64_t v2 = [_WKSmartCardSlotObserver alloc];
  if (this)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    int v3 = (atomic_uint *)*((void *)this + 1);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v9 = (WTF *)v3;
  uint64_t v5 = [(_WKSmartCardSlotObserver *)v2 initWithService:&v9];
  uint64_t v6 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = v5;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (unsigned int *)v9;
  uint64_t v9 = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v4);
  }
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F25248], "defaultManager"), "addObserver:forKeyPath:options:context:", *((void *)this + 9), @"slotNames", 5, 0);
}

void sub_198D6CA30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::CcidConnection *WebKit::CcidService::onValidCard(uint64_t a1, uint64_t *a2)
{
  WebKit::CcidConnection::create(a2, a1, &v4);
  uint64_t result = *(WebKit::CcidConnection **)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  if (result)
  {
    return WTF::RefCounted<WebKit::CcidConnection>::deref(result);
  }
  return result;
}

void sub_198D6CBFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198D6CE68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ScrollingTreeScrollingNode::scrollbarStateForOrientation(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
  *a1 = v1;
}

float WebCore::ScrollingTreeScrollingNodeDelegate::adjustedScrollPosition(WebCore::ScrollingTreeScrollingNodeDelegate *this, const FloatPoint *a2)
{
  return a2->m_x;
}

void WebCore::ScrollingTreeScrollingNodeDelegate::scrollbarStateForOrientation(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
  *a1 = v1;
}

unsigned int *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::RunLoop *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke(WTF::RunLoop *result, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    int v3 = result;
    WTF::RunLoop::main(result);
    uint64_t v4 = (atomic_uint *)*((void *)v3 + 4);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    uint64_t v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9D2520;
    *((void *)v5 + 1) = v4;
    uint64_t v6 = v5;
    WTF::RunLoop::dispatch();
    uint64_t result = v6;
    if (v6) {
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v6 + 8))(v6);
    }
  }
  return result;
}

void sub_198D6D0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D2520;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D2520;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::AuthenticatorManager *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::call(WebKit::AuthenticatorManager *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(WebKit::AuthenticatorManager **)(v1 + 8);
    if (result) {
      return (WebKit::AuthenticatorManager *)WebKit::AuthenticatorManager::cancel(result);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(_DWORD **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
            uint64_t v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[2];
          }
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = (atomic_uint *)*((void *)a1 + 4);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9D2568;
  v3[1] = v2;
  uint64_t v5 = v3;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

void sub_198D6D3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D2568;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D2568;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::AuthenticatorManager *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0::operator() const(void)::{lambda(void)#1},void>::call(WebKit::AuthenticatorManager *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(WebKit::AuthenticatorManager **)(v1 + 8);
    if (result) {
      return (WebKit::AuthenticatorManager *)WebKit::AuthenticatorManager::cancel(result);
    }
  }
  return result;
}

WTF *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(WTF **)(a1 + 40);
  if (result)
  {
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 16);
    CFTypeRef v5 = (id)CFMakeCollectable((CFTypeRef)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:*(void *)(a1 + 40) length:*(unsigned int *)(a1 + 52)]);
    uint64_t v6 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    uint64_t v7 = malloc_type_malloc(0x30uLL, 0x10E004086A57CB7uLL);
    *uint64_t v7 = MEMORY[0x1E4F14398];
    v7[1] = 50331650;
    void v7[2] = WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::{lambda(void *,NSData *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::descriptor;
    float v7[4] = v3;
    v7[5] = v6;
    [v4 transmitRequest:v5 reply:v7];
    _Block_release(v7);
  }
}

void sub_198D6D6CC(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::{lambda(void *,NSData *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  [*(id *)(*(void *)(a1 + 32) + 16) endSession];
  if (a2)
  {
    uint64_t v4 = [a2 bytes];
    unint64_t result = [a2 length];
    unint64_t v6 = result;
    if (result)
    {
      if (HIDWORD(result))
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v7 = WTF::fastMalloc((WTF *)result);
      a2 = (void *)v7;
      uint64_t v8 = 0;
      do
      {
        *(unsigned char *)(v7 + v8) = *(unsigned char *)(v4 + v8);
        ++v8;
      }
      while (v6 != v8);
    }
    else
    {
      a2 = 0;
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v10 = &unk_1EE9D25D0;
  *(void *)(v10 + 8) = a2;
  *(_DWORD *)(v10 + 16) = v6;
  *(_DWORD *)(v10 + 20) = v6;
  *(void *)(v10 + 24) = v9;
  unint64_t v11 = v10;
  WTF::callOnMainRunLoop();
  unint64_t result = v11;
  if (v11) {
    return (*(uint64_t (**)(unint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

void sub_198D6D864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,$_0)#1}::operator()(NSError *,$_0)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D25D0;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,$_0)#1}::operator()(NSError *,$_0)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D25D0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,$_0)#1}::operator()(NSError *,$_0)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a1 + 8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      CFTypeRef v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        unint64_t v6 = *(const void **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(v6);
          CFTypeRef v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *WTF::BlockPtr<void ()(TKSmartCardSlot *)>::fromCallable<WebKit::CcidService::updateSlots(NSArray *)::$_0>(WebKit::CcidService::updateSlots(NSArray *)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t result = *(WTF::StringImpl **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::BlockPtr<void ()(TKSmartCardSlot *)>::fromCallable<WebKit::CcidService::updateSlots(NSArray *)::$_0>(WebKit::CcidService::updateSlots(NSArray *)::$_0)::{lambda(void *,TKSmartCardSlot *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef v5 = [_WKSmartCardSlotStateObserver alloc];
  if (v4)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    unint64_t v6 = *(atomic_uint **)(v4 + 8);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  CFTypeRef cf = a2;
  size_t v33 = (WTF *)v6;
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v9 = [(_WKSmartCardSlotStateObserver *)v5 initWithService:&v33 slot:&cf];
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = (unsigned int *)v33;
  size_t v33 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v7);
  }
  uint64_t v14 = *(void *)(v4 + 80);
  id v12 = (uint64_t *)(v4 + 80);
  uint64_t v13 = v14;
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12),
        (uint64_t v13 = *v12) != 0))
  {
    int v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = (const WTF::StringImpl **)(a1 + 40);
  uint64_t v17 = *(WTF::StringImpl **)(a1 + 40);
  unsigned int v18 = *((_DWORD *)v17 + 4);
  if (v18 >= 0x100) {
    unsigned int v19 = v18 >> 8;
  }
  else {
    unsigned int v19 = WTF::StringImpl::hashSlowCase(v17);
  }
  uint64_t v20 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v22 = v19 & v15;
    uint64_t v23 = (uint64_t *)(v13 + 16 * (v19 & v15));
    int v24 = (WTF *)*v23;
    if (*v23 == -1)
    {
      uint64_t v20 = (uint64_t *)(v13 + 16 * v22);
      goto LABEL_24;
    }
    if (!v24) {
      break;
    }
    if (WTF::equal(v24, *v16, v8)) {
      goto LABEL_40;
    }
LABEL_24:
    unsigned int v19 = i + v22;
  }
  if (v20)
  {
    *uint64_t v20 = 0;
    v20[1] = 0;
    --*(_DWORD *)(*v12 - 16);
    uint64_t v23 = v20;
  }
  WTF::String::operator=(v23, v16);
  if (v9) {
    CFRetain(v9);
  }
  uint64_t v25 = (const void *)v23[1];
  v23[1] = (uint64_t)v9;
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *v12;
  if (*v12) {
    int v27 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(v26 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v27;
  uint64_t v28 = *v12;
  if (*v12) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30) {
LABEL_39:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12);
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_39;
  }
LABEL_40:
  objc_msgSend(a2, "addObserver:forKeyPath:options:context:", v9, @"state", 5, 0, cf, v33);
  if (v9) {
    CFRelease(v9);
  }
}

void sub_198D6DD24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      CFTypeRef v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      unint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          uint64_t v20 = v14 + 16 * v19;
          char v21 = *(const void **)(v20 + 8);
          *(void *)(v20 + 8) = 0;
          if (v21)
          {
            CFRelease(v21);
            unsigned int v22 = *(WTF::StringImpl **)v20;
            *(void *)uint64_t v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v8);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v20 = 0;
          }
          uint64_t v23 = *v10;
          *CFTypeRef v10 = 0;
          *(void *)uint64_t v20 = v23;
          uint64_t v24 = v4 + 16 * v9;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v20 + 8) = v25;
          uint64_t v26 = *(const void **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26) {
            CFRelease(v26);
          }
          unint64_t v11 = *v10;
          *CFTypeRef v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2) {
            goto LABEL_33;
          }
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          uint64_t v13 = *(const void **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(v13);
            unint64_t v11 = *v10;
          }
          *CFTypeRef v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5) {
        goto LABEL_37;
      }
    }
  }
  if (v4)
  {
LABEL_37:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  uint64_t v7 = (v6 ^ HIWORD(v6)) & v3;
  int v8 = *(unsigned __int8 *)(v2 + v7);
  if (v8 == v4) {
    return 1;
  }
  int v10 = 1;
  do
  {
    BOOL result = v8 != 255;
    if (v8 == 255) {
      break;
    }
    uint64_t v7 = (v7 + v10) & v3;
    int v8 = *(unsigned __int8 *)(v2 + v7);
    ++v10;
  }
  while (v8 != v4);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D2618;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_1,void>::~CallableWrapper(const void **a1)
{
  *a1 = &unk_1EE9D2618;
  _Block_release(a1[1]);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_1,void>::call(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 16) + 24) presentAuthorizationWithContext:*(void *)(*(void *)(a1 + 16) + 16) completionHandler:*(void *)(a1 + 8)];
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = v17 + 16 * v22;
          uint64_t v24 = *(_DWORD **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            if (v24[2] != 1)
            {
              --v24[2];
              goto LABEL_22;
            }
            (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
            uint64_t v25 = *(WTF::StringImpl **)v23;
            *(void *)uint64_t v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v10);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
LABEL_22:
            *(void *)uint64_t v23 = 0;
          }
          uint64_t v26 = *v13;
          const void *v13 = 0;
          *(void *)uint64_t v23 = v26;
          uint64_t v27 = v6 + 16 * v11;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          *(void *)(v23 + 8) = v28;
          int v29 = *(_DWORD **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29)
          {
            if (v29[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
            }
            else {
              --v29[2];
            }
          }
          uint64_t v30 = *v13;
          const void *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v23;
          }
          goto LABEL_42;
        }
        uint64_t v15 = v6 + 16 * v11;
        unsigned int v16 = *(_DWORD **)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16)
        {
          if (v16[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
            uint64_t v14 = *v13;
          }
          else
          {
            --v16[2];
          }
        }
        const void *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v10);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
LABEL_42:
      if (++v11 == v7) {
        goto LABEL_45;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  if (*result) {
    v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  if ((WTF::StringImpl *)v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  uint64_t v5 = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  *a3 = v5;
  if (*result)
  {
    uint64_t v6 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((WTF::StringImpl *)v6 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if ((WTF::StringImpl *)v6 != a2) {
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(result, a2);
  }
  return result;
}

void sub_198D6E46C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (_DWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  uint64_t result = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (result)
  {
    if (result[2] == 1)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (_DWORD *)v4();
    }
    else
    {
      --result[2];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::CcidConnection::*&)(void),WebKit::CcidConnection*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::CcidConnection::detectContactless(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D2668;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::detectContactless(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D2668;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::detectContactless(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      BOOL v4 = *(_DWORD *)(a2 + 12) >= 3u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      *(unsigned char *)(v3 + 64) = 1;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D2690;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D2690;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (!v2) {
    return result;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(const void **)a2;
  size_t v6 = *(unsigned int *)(a2 + 12);
  if (v6 == 8)
  {
    unsigned int v7 = &fido::kCtapNfcAppletSelectionU2f;
  }
  else
  {
    if (v6 != 10)
    {
LABEL_6:
      unsigned int v8 = (WTF *)WTF::fastMalloc((WTF *)0xD);
      uint64_t v9 = 0;
      v15[1] = (WTF *)0xD0000000DLL;
      v15[0] = v8;
      do
      {
        *((unsigned char *)v8 + v9) = fido::kCtapNfcAppletSelectionCommand[v9];
        ++v9;
      }
      while (v9 != 13);
      uint64_t v10 = *(void *)(v4 + 8);
      *(void *)(v4 + 8) = 0;
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v11 = &unk_1EE9D26B8;
      v11[1] = v10;
      uint64_t v14 = v11;
      WebKit::CcidConnection::transact(v3, (uint64_t *)v15, (uint64_t *)&v14);
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
      uint64_t result = (uint64_t)v15[0];
      if (v15[0]) {
        return WTF::fastFree(v15[0], v12);
      }
      return result;
    }
    unsigned int v7 = &fido::kCtapNfcAppletSelectionCtap;
  }
  uint64_t result = memcmp(v5, v7, v6);
  if (result) {
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v3 + 24);
  if (v13)
  {
    uint64_t result = *(void *)(v13 + 8);
    if (result)
    {
      return WebKit::CcidService::didConnectTag((WebKit::CcidService *)result);
    }
  }
  return result;
}

void sub_198D6E938(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0::operator()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D26B8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0::operator()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D26B8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::CcidService *WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0::operator()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(WebKit::CcidService *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      BOOL v4 = *(_DWORD *)(a2 + 12) == 8;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4 && **(void **)a2 == 0x9032565F463255)
    {
      uint64_t v5 = *(void *)(v3 + 24);
      if (v5)
      {
        uint64_t result = *(WebKit::CcidService **)(v5 + 8);
        if (result) {
          return (WebKit::CcidService *)WebKit::CcidService::didConnectTag(result);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::CcidService::*&)(void),WebKit::CcidService*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    uint64_t v10 = v8 & v6;
    uint64_t v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 == (WTF *)-1) {
      goto LABEL_9;
    }
    if (!v11) {
      break;
    }
    if (WTF::equal(v11, *a2, a3)) {
      return v3 + 16 * v10;
    }
LABEL_9:
    ++i;
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 16 * *(unsigned int *)(*a1 - 4);
}

void sub_198D6F118(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl **a24)
{
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  }
  if (a24) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a24, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKMutableArrayCreate()
{
  v3[0] = 0;
  v3[1] = 0;
  API::Array::create(v3, &v2);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKMutableArrayCreateWithCapacity()
{
  v3[0] = 0;
  v3[1] = 0;
  API::Array::create(v3, &v2);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

char *WKArrayAppendItem(char *result, void *a2)
{
  if (result)
  {
    uint64_t result = (char *)[result _apiObject];
    uint64_t v3 = result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  BOOL v4 = v3 + 16;
  if (a2)
  {
    uint64_t v5 = [a2 _apiObject];
    uint64_t v13 = v5;
    unsigned int v8 = *((_DWORD *)v3 + 7);
    unsigned int v7 = v3 + 28;
    uint64_t v6 = v8;
    if (v8 == *(v7 - 1)) {
      return (char *)WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>((uint64_t)v4, &v13);
    }
    uint64_t v9 = v5;
    uint64_t v10 = (uint64_t *)(*v4 + 8 * v6);
    uint64_t result = (char *)CFRetain(*(CFTypeRef *)(v5 + 8));
    LODWORD(v11) = *v7;
  }
  else
  {
    uint64_t v13 = 0;
    unsigned int v12 = *((_DWORD *)v3 + 7);
    unsigned int v7 = v3 + 28;
    uint64_t v11 = v12;
    if (v12 == *(v7 - 1)) {
      return (char *)WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>((uint64_t)v4, &v13);
    }
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(*v4 + 8 * v11);
  }
  *uint64_t v10 = v9;
  *unsigned int v7 = v11 + 1;
  return result;
}

void *WKArrayRemoveItemAtIndex(void *a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v4 = (uint64_t *)(*(void *)(v3 + 16) + 8 * a2);
  uint64_t v5 = *v4;
  uint64_t *v4 = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t result = memmove(v4, v4 + 1, *(void *)(v3 + 16) + 8 * *(unsigned int *)(v3 + 28) - (void)(v4 + 1));
  --*(_DWORD *)(v3 + 28);
  return result;
}

uint64_t WKMutableDictionaryCreate()
{
  uint64_t v0 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(void *)uint64_t v0 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v0);
  *(void *)uint64_t v0 = &unk_1EE9D1E00;
  *((void *)v0 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  return *((void *)v0 + 1);
}

uint64_t WKMutableDictionaryCreateWithCapacity(API::Dictionary *a1)
{
  API::Dictionary::createWithCapacity(a1, &v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

BOOL WKDictionarySetItem(void *a1, void *a2, CFTypeRef *a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (a3)
  {
    a3 = (CFTypeRef *)[(CFTypeRef *)a3 _apiObject];
    CFRetain(a3[1]);
  }
  uint64_t v11 = a3;
  WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)(v5 + 16), &v12, (uint64_t *)&v11, (uint64_t)v13);
  int v7 = v13[16];
  uint64_t v8 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = v12;
  unsigned int v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v6);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v7 != 0;
}

uint64_t WKBooleanGetTypeID()
{
  return 32;
}

uint64_t WKBooleanCreate(API::Boolean *a1)
{
  API::Boolean::create(a1, &v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKBooleanGetValue(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 16);
}

uint64_t WKDoubleGetTypeID()
{
  return 33;
}

uint64_t WKDoubleCreate(double a1)
{
  uint64_t v2 = API::Object::newObject(0x18uLL, 33);
  *(double *)(v2 + 16) = a1;
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(void *)uint64_t v2 = &unk_1EE9B5380;
  return *(void *)(v2 + 8);
}

double WKDoubleGetValue(void *a1)
{
  return *(double *)([a1 _apiObject] + 16);
}

uint64_t WKUInt64GetTypeID()
{
  return 34;
}

uint64_t WKUInt64Create(uint64_t a1)
{
  uint64_t v2 = (WebKit *)API::Object::newObject(0x18uLL, 34);
  *((void *)v2 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = a1;
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B3EF8;
  return *((void *)v2 + 1);
}

uint64_t WKUInt64GetValue(void *a1)
{
  return *(void *)([a1 _apiObject] + 16);
}

uint64_t WKPluginInformationBundleIdentifierKey()
{
  return 0;
}

uint64_t WKPluginInformationBundleVersionKey()
{
  return 0;
}

uint64_t WKPluginInformationBundleShortVersionKey()
{
  return 0;
}

uint64_t WKPluginInformationPathKey()
{
  return 0;
}

uint64_t WKPluginInformationDisplayNameKey()
{
  return 0;
}

uint64_t WKPluginInformationDefaultLoadPolicyKey()
{
  return 0;
}

uint64_t WKPluginInformationUpdatePastLastBlockedVersionIsKnownAvailableKey()
{
  return 0;
}

uint64_t WKPluginInformationHasSandboxProfileKey()
{
  return 0;
}

uint64_t WKPluginInformationFrameURLKey()
{
  return 0;
}

uint64_t WKPluginInformationMIMETypeKey()
{
  return 0;
}

uint64_t WKPluginInformationPageURLKey()
{
  return 0;
}

uint64_t WKPluginInformationPluginspageAttributeURLKey()
{
  return 0;
}

uint64_t WKPluginInformationPluginURLKey()
{
  return 0;
}

uint64_t WKPlugInInformationReplacementObscuredKey()
{
  return 0;
}

uint64_t WKSecurityOriginGetTypeID()
{
  return 18;
}

uint64_t WKSecurityOriginCreateFromString(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v8, (WebCore::SecurityOrigin *)&v7, v1);
  API::SecurityOrigin::create(&v9);
  if (v9) {
    uint64_t v3 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v4 = v8;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v4, v2);
  }
  uint64_t v5 = v7;
  int v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKSecurityOriginCreateFromDatabaseIdentifier(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1) {
    [a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  uint64_t v2 = v8;
  uint64_t v8 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v1);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  if (!v11) {
    return 0;
  }
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v7, (WebCore::SecurityOriginData *)v9);
  API::SecurityOrigin::create(&v8);
  if (v8) {
    uint64_t v4 = *((void *)v8 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v7;
  int v7 = 0;
  uint64_t v8 = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v5, v3);
  }
  if (v11 && v10 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9D2748[v10])(&v8, v9);
  }
  return v4;
}

uint64_t WKSecurityOriginCreate(void *a1, void *a2, int a3)
{
  __int16 v3 = a3;
  if (a3) {
    BOOL v5 = a3 < 0x10000;
  }
  else {
    BOOL v5 = 0;
  }
  int v6 = v5;
  if (a1) {
    [a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (v6) {
    int v7 = v3;
  }
  else {
    int v7 = 0;
  }
  int v8 = v7 | v3 & 0xFF00;
  if (v6) {
    int v9 = 0x10000;
  }
  else {
    int v9 = 0;
  }
  API::SecurityOrigin::create((_DWORD **)&v15, (_DWORD **)&v14, v8 | v9, &v16);
  char v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v16) {
    return *(void *)(v16 + 8);
  }
  else {
    return 0;
  }
}

uint64_t API::SecurityOrigin::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = API::Object::newObject(0x30uLL, 18);
  int v9 = (WebKit *)WebCore::SecurityOriginData::SecurityOriginData((uint64_t)v12, a1, a2, a3);
  *(void *)uint64_t v8 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v9);
  *(void *)uint64_t v8 = &unk_1EE9C2E10;
  *(unsigned char *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 40) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v8 + 16, (uint64_t)v12);
  *a4 = v8;
  if (v13 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9D2748[v13])(&v11, v12);
  }
  return result;
}

uint64_t WKSecurityOriginCopyDatabaseIdentifier(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v5, (WebCore::SecurityOriginData *)(a1 + 16));
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  __int16 v3 = v5;
  BOOL v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKSecurityOriginCopyToString(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::SecurityOriginData::toString((uint64_t *)&v5, (WebCore::SecurityOriginData *)(a1 + 16));
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  __int16 v3 = v5;
  BOOL v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKSecurityOriginCopyProtocol(_DWORD *a1)
{
  if (a1) {
    a1 = (_DWORD *)[a1 _apiObject];
  }
  if (a1[10] > 1u)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    API::String::create(&v2);
    if (v2) {
      return *((void *)v2 + 1);
    }
  }
  return 0;
}

uint64_t WKSecurityOriginCopyHost(void *a1)
{
  int v1 = *(_DWORD *)([a1 _apiObject] + 40);
  if (v1 && v1 != 1)
  {
    uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WKSecurityOriginGetPort(v3);
  }
  else
  {
    API::String::create(&v4);
    if (v4) {
      return *((void *)v4 + 1);
    }
    else {
      return 0;
    }
  }
}

uint64_t WKSecurityOriginGetPort(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  int v2 = *(_DWORD *)(v1 + 40);
  if (!v2)
  {
    int v3 = *(_DWORD *)(v1 + 32);
    if ((v3 & 0xFF0000) != 0) {
      return (unsigned __int16)v3;
    }
LABEL_5:
    LOWORD(v3) = 0;
    return (unsigned __int16)v3;
  }
  if (v2 == 1) {
    goto LABEL_5;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return WKSerializedScriptValueGetTypeID();
}

uint64_t WKSerializedScriptValueGetTypeID()
{
  return 0;
}

uint64_t WKSerializedScriptValueCreate()
{
  return 0;
}

uint64_t WKSerializedScriptValueDeserialize()
{
  return 0;
}

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *a2;
  if (v10) {
    CFRetain(*(CFTypeRef *)(v10 + 8));
  }
  int v11 = *(_DWORD *)(a1 + 12);
  *(void *)(v9 + 8 * v8) = v10;
  *(_DWORD *)(a1 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v11 + 1;
  return 1;
}

uint64_t WebKit::shouldUseAlternateKeychainAttribute(WebKit *this)
{
  WebKit::getASCWebKitSPISupportClass[0](this);
  uint64_t v1 = objc_opt_respondsToSelector();
  if ((v1 & 1) == 0) {
    return 0;
  }
  int v2 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v1);

  return [v2 shouldUseAlternateKeychainAttribute];
}

void WebKit::LocalAuthenticator::clearAllCredentials(WebKit::LocalAuthenticator *this)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  id v1 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v2 = *MEMORY[0x1E4F3B978];
  v8[0] = *MEMORY[0x1E4F3B9A0];
  uint64_t v3 = *MEMORY[0x1E4F3B550];
  v7[0] = v2;
  v7[1] = v3;
  uint64_t v4 = [NSString stringWithUTF8String:"com.apple.webkit.webauthn"];
  void v7[2] = *MEMORY[0x1E4F3BD08];
  v8[1] = v4;
  uint64_t v8[2] = MEMORY[0x1E4F1CC38];
  unint64_t v5 = (WebKit *)objc_msgSend(v1, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v8, v7, 3));
  unint64_t v6 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v5);
  if (v6
    && [(id)WebKit::getASCWebKitSPISupportClass[0](v6) shouldUseAlternateCredentialStore])
  {
    [v1 setObject:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F3B878]];
  }
  SecItemDelete((CFDictionaryRef)v1);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_198D700CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::Authenticator *WebKit::Authenticator::Authenticator(WebKit::Authenticator *this)
{
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *((_DWORD *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
  *(void *)this = &unk_1EE9D2D30;
  *((void *)this + 3) = 0;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((WebKit::Authenticator *)((char *)this + 32));
  return this;
}

void sub_198D70144(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = v3;
  unint64_t v6 = *(unsigned int **)(v4 + 24);
  *(void *)(v4 + 24) = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::Authenticator::~Authenticator(WebKit::Authenticator *this)
{
  *(void *)this = &unk_1EE9D2D30;
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::Authenticator *)((char *)this + 32));
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v2);
}

void WebKit::LocalAuthenticator::getExistingCredentials(WebKit::LocalAuthenticator *this, const WTF::String *a2, uint64_t a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  (*(void (**)(id *__return_ptr, const WTF::String *, uint64_t))(*(void *)a2 + 16))(&v86, a2, a3);
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  unint64_t v4 = [v86 count];
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
LABEL_90:
      JUMPOUT(0x198D7092CLL);
    }
    LODWORD(v85) = v4;
    uint64_t v84 = WTF::fastMalloc((WTF *)(8 * v4));
  }
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  obsize_t j = v86;
  uint64_t v5 = [v86 countByEnumeratingWithState:&v80 objects:v87 count:16];
  if (v5)
  {
    uint64_t v73 = *(void *)v81;
    uint64_t v6 = *MEMORY[0x1E4F3B5E0];
    uint64_t v68 = *MEMORY[0x1E4F3B5D0];
    uint64_t v66 = *MEMORY[0x1E4F3B5C8];
    uint64_t v70 = *MEMORY[0x1E4F3B548];
    uint64_t v71 = *MEMORY[0x1E4F3B858];
    uint64_t v67 = *MEMORY[0x1E4F3B878];
    uint64_t v69 = *MEMORY[0x1E4F3B550];
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v81 != v73) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v80 + 1) + 8 * v7);
        uint64_t v9 = objc_msgSend(v8, "objectForKeyedSubscript:", v6, v66);
        uint64_t v10 = v9;
        if (v9)
        {
          uint64_t v11 = [v9 bytes];
          unint64_t v12 = [v10 length];
          unint64_t v13 = v12;
          if (v12)
          {
            if (HIDWORD(v12))
            {
              __break(0xC471u);
              goto LABEL_90;
            }
            uint64_t v14 = WTF::fastMalloc((WTF *)v12);
            uint64_t v10 = (void *)v14;
            uint64_t v15 = 0;
            do
            {
              *(unsigned char *)(v14 + v15) = *(unsigned char *)(v11 + v15);
              ++v15;
            }
            while (v13 != v15);
          }
          else
          {
            uint64_t v10 = 0;
          }
        }
        else
        {
          LODWORD(v13) = 0;
        }
        v76[0] = (WTF::StringImpl *)v10;
        v76[1] = (WTF::StringImpl *)v13;
        cbor::CBORReader::read();
        if (v10) {
          WTF::fastFree((WTF *)v10, v16);
        }
        int v17 = v79;
        if (!v79 || v78[0] != 5)
        {
          *(unsigned char *)this = 0;
          *((unsigned char *)this + 16) = 0;
          int v34 = 1;
          if (!v17) {
            goto LABEL_36;
          }
LABEL_35:
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v78);
          goto LABEL_36;
        }
        uint64_t Map = cbor::CBORValue::getMap((cbor::CBORValue *)v78);
        char v77 = 0;
        cbor::CBORValue::CBORValue();
        unsigned int v19 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        unsigned int v20 = (void *)(Map + 8);
        if ((void *)(Map + 8) != v19)
        {
          int v22 = *((_DWORD *)v19 + 16);
          int v21 = (cbor::CBORValue *)(v19 + 8);
          if (v22 == 2)
          {
            cbor::CBORValue::getByteString(v21);
            JSC::ArrayBuffer::create();
            uint64_t v23 = v76[0];
            v76[0] = 0;
            uint64_t v24 = v77;
            char v77 = v23;
            if (v24)
            {
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v24);
              uint64_t v25 = v76[0];
              v76[0] = 0;
              if (v25) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v25);
              }
            }
          }
        }
        cbor::CBORValue::CBORValue();
        uint64_t v26 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        if (v20 == v26 || (v28 = *((_DWORD *)v26 + 16), uint64_t v27 = (cbor::CBORValue *)(v26 + 8), v28 != 3))
        {
          *(unsigned char *)this = 0;
          *((unsigned char *)this + 16) = 0;
          int v34 = 1;
          goto LABEL_77;
        }
        String = (WebKit *)cbor::CBORValue::getString(v27);
        if (WebKit::shouldUseAlternateKeychainAttribute(String)
          && (uint64_t v30 = (void *)[v8 objectForKeyedSubscript:v66]) != 0
          || (uint64_t v30 = (void *)[v8 objectForKeyedSubscript:v68]) != 0)
        {
          [v30 bytes];
          [v30 length];
        }
        JSC::ArrayBuffer::create();
        unint64_t v31 = *(WTF::StringImpl **)String;
        if (*(void *)String) {
          *(_DWORD *)v31 += 2;
        }
        uint64_t v74 = v31;
        [v8 objectForKeyedSubscript:v70];
        WebCore::AuthenticatorAssertionResponse::create();
        size_t v33 = v74;
        uint64_t v74 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v32);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        uint64_t v35 = v76[0];
        v76[0] = 0;
        if (v35) {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v35);
        }
        if (objc_msgSend((id)objc_msgSend(v8, "allKeys"), "containsObject:", v71))
        {
          MEMORY[0x19972EAD0](&v74, [v8 objectForKeyedSubscript:v71]);
          if (v74) {
            goto LABEL_51;
          }
        }
        else
        {
          BOOL v39 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
          if (*MEMORY[0x1E4F30978]) {
            *(_DWORD *)v39 += 2;
          }
          uint64_t v74 = v39;
          if (v39)
          {
LABEL_51:
            WTF::String::operator=((uint64_t *)(v75 + 160), &v74);
            char v38 = 1;
            uint64_t v36 = v75;
            goto LABEL_52;
          }
        }
        if (!objc_msgSend((id)objc_msgSend(v8, "allKeys"), "containsObject:", v67)) {
          goto LABEL_53;
        }
        uint64_t v36 = v75;
        int v37 = (void *)[v8 objectForKeyedSubscript:v67];
        char v38 = [v37 isEqual:MEMORY[0x1E4F1CC38]];
LABEL_52:
        *(unsigned char *)(v36 + 168) = v38;
LABEL_53:
        cbor::CBORValue::CBORValue();
        int v40 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        if (v20 != v40)
        {
          int v42 = *((_DWORD *)v40 + 16);
          uint64_t v41 = (cbor::CBORValue *)(v40 + 8);
          if (v42 == 3)
          {
            uint64_t v43 = v75;
            unsigned __int8 v44 = (WTF::StringImpl **)cbor::CBORValue::getString(v41);
            WTF::String::operator=((uint64_t *)(v43 + 152), v44);
          }
        }
        cbor::CBORValue::CBORValue((cbor::CBORValue *)v76, "largeBlob");
        unsigned __int8 v45 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        if (v20 != v45)
        {
          int v47 = *((_DWORD *)v45 + 16);
          unsigned __int8 v46 = (cbor::CBORValue *)(v45 + 8);
          if (v47 == 2)
          {
            uint64_t v48 = v75;
            cbor::CBORValue::getByteString(v46);
            JSC::ArrayBuffer::create();
            unsigned __int8 v49 = v76[0];
            v76[0] = 0;
            unsigned __int8 v50 = *(WTF::DeferrableRefCountedBase **)(v48 + 200);
            *(void *)(v48 + 200) = v49;
            if (v50)
            {
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v50);
              unsigned __int8 v51 = v76[0];
              v76[0] = 0;
              if (v51) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v51);
              }
            }
          }
        }
        uint64_t v52 = v75;
        MEMORY[0x19972EAD0](v76, [v8 objectForKeyedSubscript:v69]);
        WTF::String::operator=((uint64_t *)(v52 + 208), v76);
        uint64_t v54 = v76[0];
        v76[0] = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2) {
            WTF::StringImpl::destroy(v54, v53);
          }
          else {
            *(_DWORD *)v54 -= 2;
          }
        }
        LODWORD(v55) = HIDWORD(v85);
        if (HIDWORD(v85) == v85)
        {
          uint64_t v56 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v84, HIDWORD(v85) + 1, (unint64_t)&v75);
          uint64_t v55 = HIDWORD(v85);
          uint64_t v57 = v84;
          uint64_t v58 = *v56;
          uint64_t *v56 = 0;
          *(void *)(v57 + 8 * v55) = v58;
        }
        else
        {
          uint64_t v59 = v75;
          uint64_t v75 = 0;
          *(void *)(v84 + 8 * HIDWORD(v85)) = v59;
        }
        HIDWORD(v85) = v55 + 1;
        uint64_t v60 = v74;
        uint64_t v74 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2) {
            WTF::StringImpl::destroy(v60, v53);
          }
          else {
            *(_DWORD *)v60 -= 2;
          }
        }
        char v61 = (_DWORD *)v75;
        uint64_t v75 = 0;
        if (v61)
        {
          if (v61[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v61 + 8))(v61);
          }
          else {
            --v61[2];
          }
        }
        int v34 = 0;
LABEL_77:
        uint64_t v62 = v77;
        char v77 = 0;
        if (v62) {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v62);
        }
        if (v79) {
          goto LABEL_35;
        }
LABEL_36:
        if (v34) {
          goto LABEL_85;
        }
        ++v7;
      }
      while (v7 != v5);
      uint64_t v63 = [obj countByEnumeratingWithState:&v80 objects:v87 count:16];
      uint64_t v5 = v63;
    }
    while (v63);
  }
  *(void *)this = v84;
  uint64_t v64 = v85;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  *((void *)this + 1) = v64;
  *((unsigned char *)this + 16) = 1;
LABEL_85:
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v84);
  id v65 = v86;
  id v86 = 0;
  if (v65) {
    CFRelease(v65);
  }
}

void sub_198D70938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a38);
  int v40 = *(const void **)(v38 - 232);
  *(void *)(v38 - 23WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v40) {
    CFRelease(v40);
  }
  _Unwind_Resume(a1);
}

WTF::ASCIILiteral *WebKit::LocalAuthenticator::makeCredential(WTF::ASCIILiteral *this, WTF::StringImpl *a2)
{
  *((_DWORD *)this + 194) = 1;
  if (*((_DWORD *)this + 88))
  {
    int v29 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    uint64_t v30 = v32;
    uint64_t v32 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    if (v31) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v28);
    }
    if (v36) {
      WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v34);
    }
    _Unwind_Resume(v29);
  }
  uint64_t v2 = (uint64_t)this;
  uint64_t v3 = *((unsigned int *)this + 39);
  if (!v3)
  {
LABEL_9:
    LOBYTE(v34) = 6;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::LocalAuthenticator::receiveException((WebKit *)v2, (uint64_t)&v34, 5);
    this = v35;
    uint64_t v35 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::ASCIILiteral *)WTF::StringImpl::destroy(this, v6);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
    return this;
  }
  unint64_t v4 = (void *)(*((void *)this + 18) + 8);
  while (*((unsigned char *)v4 - 8) || *v4 != -7)
  {
    v4 += 2;
    if (!--v3) {
      goto LABEL_9;
    }
  }
  if (*((unsigned char *)this + 80))
  {
    WebKit::LocalAuthenticator::getExistingCredentials((WebKit::LocalAuthenticator *)&v34, *((const WTF::String **)this + 98), (uint64_t)this + 72);
    if (!v36)
    {
      LOBYTE(v3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 24;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      size_t v33 = v37;
      WebKit::LocalAuthenticator::receiveException((WebKit *)v2, (uint64_t)&v32, 5);
      this = v33;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          this = (WTF::ASCIILiteral *)WTF::StringImpl::destroy(v33, v27);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      goto LABEL_58;
    }
    uint64_t v8 = *(unsigned int *)(v2 + 804);
    if (v8) {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(*(uint64_t **)(v2 + 792), (uint64_t *)(*(void *)(v2 + 792) + 8 * v8));
    }
    uint64_t v9 = *(WTF **)(v2 + 792);
    if (v9)
    {
      *(void *)(v2 + 79WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
      *(_DWORD *)(v2 + 800) = 0;
      WTF::fastFree(v9, v7);
    }
    *(void *)(v2 + 79WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v34;
    uint64_t v10 = v35;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)(v2 + 800) = v10;
    WebKit::LocalAuthenticatorInternal::produceHashSet((WTF::StringImpl *)&v31, *(void *)(v2 + 168), *(_DWORD *)(v2 + 180));
    if (v31 && *((_DWORD *)v31 - 3) && *(_DWORD *)(v2 + 804))
    {
      uint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)(*(void *)(v2 + 792) + 8 * v11));
        JSC::ArrayBuffer::span(v12);
        WTF::base64EncodeToString();
        uint64_t v15 = v31;
        uint64_t v14 = v32;
        if (v31)
        {
          int v16 = *((_DWORD *)v31 - 2);
          unsigned int v17 = *((_DWORD *)v32 + 4);
          if (v17 >= 0x100) {
            unsigned int v18 = v17 >> 8;
          }
          else {
            unsigned int v18 = WTF::StringImpl::hashSlowCase(v32);
          }
          for (i = 0; ; unsigned int v18 = i + v20)
          {
            int v20 = v18 & v16;
            int v21 = v15[v18 & v16];
            if (v21 != (WTF *)-1)
            {
              if (!v21)
              {
                LOBYTE(v15) = 0;
                goto LABEL_41;
              }
              if (WTF::equal(v21, v32, v13)) {
                break;
              }
            }
            ++i;
          }
          LOBYTE(v15) = 1;
LABEL_41:
          uint64_t v14 = v32;
        }
        uint64_t v32 = 0;
        if (!v14) {
          goto LABEL_26;
        }
        if (*(_DWORD *)v14 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v14, a2);
        if (v15)
        {
LABEL_53:
          LOBYTE(v3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 8;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          size_t v33 = v37;
          WebKit::LocalAuthenticator::receiveException((WebKit *)v2, (uint64_t)&v32, 6);
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, a2);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          goto LABEL_57;
        }
LABEL_29:
        if (++v11 >= (unint64_t)*(unsigned int *)(v2 + 804)) {
          goto LABEL_43;
        }
      }
      *(_DWORD *)v14 -= 2;
LABEL_26:
      if (v15) {
        goto LABEL_53;
      }
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v22 = *(void *)(v2 + 24);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23)
      {
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v2 + 16), v2);
        uint64_t v24 = *(atomic_uint **)(v2 + 16);
        if (v24) {
          atomic_fetch_add(v24, 1u);
        }
        uint64_t v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v25 = &unk_1EE9D2A88;
        *((void *)v25 + 1) = v24;
        uint64_t v32 = v25;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v23 + 64))(v23, &v32);
        uint64_t v26 = v32;
        uint64_t v32 = 0;
        if (v26) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
        }
      }
    }
LABEL_57:
    this = (WTF::ASCIILiteral *)v31;
    if (!v31) {
      goto LABEL_58;
    }
  }
  else
  {
    __break(1u);
  }
  this = (WTF::ASCIILiteral *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)this, a2);
LABEL_58:
  if (v36) {
    return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v34);
  }
  return this;
}

uint64_t WebKit::LocalAuthenticator::receiveException(WebKit *a1, uint64_t a2, uint64_t a3)
{
  void v31[2] = *MEMORY[0x1E4F143B8];
  if (*((void *)a1 + 101))
  {
    int shouldUseAlternateKeychainAttribute = WebKit::shouldUseAlternateKeychainAttribute(a1);
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v8 = *MEMORY[0x1E4F3B9A0];
    uint64_t v9 = *MEMORY[0x1E4F3BD08];
    v30[0] = *MEMORY[0x1E4F3B978];
    v30[1] = v9;
    v31[0] = v8;
    v31[1] = MEMORY[0x1E4F1CC38];
    uint64_t v10 = (WebKit *)objc_msgSend(v7, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v31, v30, 2));
    uint64_t v11 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v10);
    if (v11
      && [(id)WebKit::getASCWebKitSPISupportClass[0](v11) shouldUseAlternateCredentialStore])
    {
      [v7 setObject:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F3B878]];
    }
    uint64_t v12 = *MEMORY[0x1E4F3B5C8];
    uint64_t v13 = *MEMORY[0x1E4F3B5D0];
    if (shouldUseAlternateKeychainAttribute) {
      uint64_t v14 = *MEMORY[0x1E4F3B5C8];
    }
    else {
      uint64_t v14 = *MEMORY[0x1E4F3B5D0];
    }
    [v7 setObject:*((void *)a1 + 101) forKey:v14];
    OSStatus v15 = SecItemDelete((CFDictionaryRef)v7);
    if (v15 == -25300) {
      int v16 = shouldUseAlternateKeychainAttribute;
    }
    else {
      int v16 = 0;
    }
    if (v16 == 1)
    {
      [v7 removeObjectForKey:v12];
      [v7 setObject:*((void *)a1 + 101) forKey:v13];
      OSStatus v15 = SecItemDelete((CFDictionaryRef)v7);
    }
    if (v15)
    {
      unsigned int v17 = qword_1EB3587D0;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        OSStatus v27 = v15;
        _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "Couldn't delete provisional credential while handling error: %d", buf, 8u);
        if (!v7) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    if (v7) {
LABEL_16:
    }
      CFRelease(v7);
  }
LABEL_17:
  uint64_t v18 = *((void *)a1 + 3);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a3);
    }
  }
  buf[0] = *(unsigned char *)a2;
  uint64_t v20 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v28 = v20;
  int v21 = 1;
  int v29 = 1;
  uint64_t v22 = *((void *)a1 + 3);
  if (!v22) {
    return ((uint64_t (*)(char *, uint8_t *))off_1EE9D28E8[v21])(&v25, buf);
  }
  uint64_t v23 = *(void *)(v22 + 8);
  if (!v23) {
    return ((uint64_t (*)(char *, uint8_t *))off_1EE9D28E8[v21])(&v25, buf);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v23 + 16))(v23, buf);
  int v21 = v29;
  if (v29 != -1) {
    return ((uint64_t (*)(void, void))off_1EE9D28E8[v21])(&v25, buf);
  }
  return result;
}

void sub_198D71278(_Unwind_Exception *exception_object)
{
}

WTF::StringImpl *WebKit::LocalAuthenticatorInternal::produceHashSet(WTF::StringImpl *result, uint64_t a2, unsigned int a3)
{
  *(void *)uint64_t result = 0;
  if (a3)
  {
    uint64_t v3 = a2;
    unint64_t v4 = (uint64_t *)result;
    uint64_t v5 = a2 + 40 * a3;
    do
    {
      uint64_t v6 = *(unsigned int *)(v3 + 36);
      if (v6)
      {
        id v7 = *(unsigned __int8 **)(v3 + 24);
        while (1)
        {
          int v8 = *v7++;
          if (v8 == 3) {
            break;
          }
          if (!--v6) {
            goto LABEL_13;
          }
        }
      }
      if (!*(unsigned char *)v3)
      {
        WebCore::BufferSource::span((WebCore::BufferSource *)(v3 + 8));
        WTF::base64EncodeToString();
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v4, &v12, v9, (uint64_t)&v11);
        uint64_t result = v12;
        uint64_t v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
LABEL_13:
      v3 += 40;
    }
    while (v3 != v5);
  }
  return result;
}

void sub_198D71364(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (*v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v4)
  {
    uint64_t v6 = *(WTF::DeferrableRefCountedBase **)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    if (v6) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = v5;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

unint64_t WebKit::LocalAuthenticator::processClientExtensions(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (WTF::DeferrableRefCountedBase *)a2;
  unint64_t v6 = a1;
  v78[6] = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 == 1)
  {
    if (*(_DWORD *)(a2 + 352) != 1) {
      goto LABEL_111;
    }
    if (!*(unsigned char *)(a2 + 256)) {
      goto LABEL_23;
    }
    WebCore::AuthenticatorResponse::extensions(&v50, *(WebCore::AuthenticatorResponse **)a3);
    if (!*((unsigned char *)v5 + 256) || !*((unsigned char *)v5 + 168))
    {
LABEL_101:
      a1 = WebCore::AuthenticatorResponse::setExtensions();
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 16) = 0;
      goto LABEL_102;
    }
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](&v66, (uint64_t)v5 + 128);
    if (!v71) {
      goto LABEL_68;
    }
    if (v66)
    {
LABEL_20:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v3 = v63[0];
      a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v66);
      char v9 = 6;
      goto LABEL_21;
    }
    if (!v68) {
      goto LABEL_38;
    }
    if (v70) {
      goto LABEL_20;
    }
    if (v67)
    {
      uint64_t v5 = *(WTF::DeferrableRefCountedBase **)(*(void *)a3 + 200);
      if (v5)
      {
        *(_DWORD *)v5 += 4;
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
        if (!v71) {
          goto LABEL_68;
        }
      }
    }
    else
    {
LABEL_38:
      uint64_t v5 = 0;
    }
    if (!v70)
    {
LABEL_69:
      __int16 v40 = 0;
      goto LABEL_89;
    }
    uint64_t v11 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)a3);
    uint64_t v12 = JSC::ArrayBuffer::span(v11);
    uint64_t v14 = (WebKit *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v12 length:v13];
    int shouldUseAlternateKeychainAttribute = WebKit::shouldUseAlternateKeychainAttribute(v14);
    id v16 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v17 = *MEMORY[0x1E4F3B9A0];
    uint64_t v18 = *MEMORY[0x1E4F3B6D8];
    v77[0] = *MEMORY[0x1E4F3B978];
    v77[1] = v18;
    uint64_t v19 = *MEMORY[0x1E4F3B6E8];
    v78[0] = v17;
    v78[1] = v19;
    uint64_t v20 = *MEMORY[0x1E4F3B880];
    uint64_t v21 = *MEMORY[0x1E4F3BD08];
    v77[2] = *MEMORY[0x1E4F3B878];
    v77[3] = v21;
    v78[2] = v20;
    v78[3] = MEMORY[0x1E4F1CC38];
    uint64_t v22 = *MEMORY[0x1E4F3BC78];
    v77[4] = *MEMORY[0x1E4F3BC68];
    v77[5] = v22;
    v78[4] = MEMORY[0x1E4F1CC38];
    v78[5] = MEMORY[0x1E4F1CC38];
    objc_msgSend(v16, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v78, v77, 6));
    uint64_t v23 = *MEMORY[0x1E4F3B5C8];
    uint64_t v24 = *MEMORY[0x1E4F3B5D0];
    if (shouldUseAlternateKeychainAttribute) {
      uint64_t v25 = *MEMORY[0x1E4F3B5C8];
    }
    else {
      uint64_t v25 = *MEMORY[0x1E4F3B5D0];
    }
    [v16 setObject:v14 forKey:v25];
    CFTypeRef result = 0;
    OSStatus v26 = SecItemCopyMatching((CFDictionaryRef)v16, &result);
    if (v26 == -25300) {
      int v27 = shouldUseAlternateKeychainAttribute;
    }
    else {
      int v27 = 0;
    }
    if (v27 == 1)
    {
      [v16 removeObjectForKey:v23];
      [v16 setObject:v14 forKey:v24];
      OSStatus v26 = SecItemCopyMatching((CFDictionaryRef)v16, &result);
    }
    if (v26 != -25300 && v26)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      __int16 v40 = 0;
      uint64_t v3 = v63[0];
      int v41 = 1;
      goto LABEL_83;
    }
    uint64_t v3 = *MEMORY[0x1E4F3B5E0];
    uint64_t v28 = objc_msgSend((id)result, "objectForKeyedSubscript:", *MEMORY[0x1E4F3B5E0], result);
    int v29 = v28;
    if (v28)
    {
      uint64_t v30 = [v28 bytes];
      a1 = [v29 length];
      unint64_t v31 = a1;
      if (a1)
      {
        if (HIDWORD(a1))
        {
          __break(0xC471u);
          return a1;
        }
        uint64_t v32 = WTF::fastMalloc((WTF *)a1);
        int v29 = (void *)v32;
        uint64_t v33 = 0;
        do
        {
          *(unsigned char *)(v32 + v33) = *(unsigned char *)(v30 + v33);
          ++v33;
        }
        while (v31 != v33);
      }
      else
      {
        int v29 = 0;
      }
    }
    else
    {
      LODWORD(v31) = 0;
    }
    v60[0] = (uint64_t)v29;
    v60[1] = v31;
    cbor::CBORReader::read();
    if (v29) {
      WTF::fastFree((WTF *)v29, v34);
    }
    if (v64 && LODWORD(v63[0]) == 5)
    {
      v62[0] = 0;
      v62[1] = 0;
      char v61 = v62;
      uint64_t Map = (void *)cbor::CBORValue::getMap((cbor::CBORValue *)v63);
      if (!v64) {
        goto LABEL_68;
      }
      char v36 = (void *)*Map;
      while (v36 != (void *)(cbor::CBORValue::getMap((cbor::CBORValue *)v63) + 8))
      {
        cbor::CBORValue::clone(v60, (cbor::CBORValue *)(v36 + 8));
        cbor::CBORValue::clone((uint64_t *)&v56, (cbor::CBORValue *)(v36 + 4));
        uint64_t v72 = &v56;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v61, (cbor::CBORValue *)&v56);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v56);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v60);
        int v37 = (void *)v36[1];
        if (v37)
        {
          do
          {
            uint64_t v38 = v37;
            int v37 = (void *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            uint64_t v38 = (void *)v36[2];
            BOOL v39 = *v38 == (void)v36;
            char v36 = v38;
          }
          while (!v39);
        }
        char v36 = v38;
        if (!v64) {
          goto LABEL_68;
        }
      }
      if (!v71) {
        goto LABEL_68;
      }
      if (v70)
      {
        cbor::CBORValue::CBORValue((cbor::CBORValue *)v60, (const WebCore::BufferSource *)&v69);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v56, "largeBlob");
        uint64_t v72 = &v56;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v61, (cbor::CBORValue *)&v56);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v56);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v60);
        cbor::CBORValue::CBORValue();
        cbor::CBORWriter::write();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v60);
        if (v59)
        {
          int v42 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v56 length:v58];
          uint64_t v75 = *MEMORY[0x1E4F3BD40];
          uint64_t v76 = objc_msgSend(cf, "objectForKeyedSubscript:");
          CFDictionaryRef v43 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v76 forKeys:&v75 count:1];
          uint64_t v73 = v3;
          uint64_t v74 = v42;
          __int16 v45 = SecItemUpdate(v43, (CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v74 forKeys:&v73 count:1]) == 0;
          if (v42) {
            CFRelease(v42);
          }
          __int16 v40 = v45 | 0x100;
          if (v59)
          {
            uint64_t v48 = v56;
            if (v56)
            {
              uint64_t v56 = 0;
              int v57 = 0;
              WTF::fastFree(v48, v44);
            }
          }
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v61, v62[0]);
          int v41 = 0;
          goto LABEL_79;
        }
      }
      else
      {
        std::__throw_bad_optional_access[abi:sn180100]();
      }
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v40 = 0;
    uint64_t v3 = v60[0];
    int v41 = 1;
LABEL_79:
    if (v64) {
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v63);
    }
    if (cf) {
      CFRelease(cf);
    }
LABEL_83:
    if (v16) {
      CFRelease(v16);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v41)
    {
      char v46 = 0;
      char v9 = 24;
      goto LABEL_98;
    }
LABEL_89:
    __int16 v51 = 0;
    if (v54)
    {
      if (v5) {
        *(_DWORD *)v5 += 2;
      }
      int v47 = v52;
      uint64_t v52 = v5;
      if (v47) {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v47);
      }
      char v9 = 0;
      __int16 v53 = v40;
      char v46 = 1;
    }
    else
    {
      if (v5) {
        *(_DWORD *)v5 += 2;
      }
      char v9 = 0;
      uint64_t v52 = v5;
      __int16 v53 = v40;
      char v46 = 1;
      char v54 = 1;
    }
LABEL_98:
    if (v5) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
    }
    a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v66);
    if (v46) {
      goto LABEL_101;
    }
LABEL_21:
    *(unsigned char *)unint64_t v6 = v9;
    *(void *)(v6 + 8) = v3;
    goto LABEL_22;
  }
  if (v7 || *(_DWORD *)(a2 + 352)) {
LABEL_111:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  if (!*(unsigned char *)(a2 + 344))
  {
LABEL_23:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return a1;
  }
  WebCore::AuthenticatorResponse::extensions(&v50, *(WebCore::AuthenticatorResponse **)a3);
  if (!*((unsigned char *)v5 + 344)) {
    goto LABEL_68;
  }
  if (*((unsigned char *)v5 + 208))
  {
    if (!BYTE3(v50)) {
      BYTE3(v50) = 1;
    }
    BYTE2(v50) = 1;
  }
  if (!*((unsigned char *)v5 + 256)) {
    goto LABEL_101;
  }
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](&v66, (uint64_t)v5 + 216);
  if (!v71) {
    goto LABEL_68;
  }
  if (!(v68 | v70))
  {
    __int16 v51 = 257;
    if (v54)
    {
      uint64_t v10 = v52;
      uint64_t v52 = 0;
      if (v10) {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v10);
      }
      __int16 v53 = 0;
    }
    else
    {
      uint64_t v52 = 0;
      __int16 v53 = 0;
      char v54 = 1;
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v66);
    goto LABEL_101;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v8 = v78[0];
  a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v66);
  *(unsigned char *)unint64_t v6 = 6;
  *(void *)(v6 + 8) = v8;
LABEL_22:
  *(unsigned char *)(v6 + 16) = 1;
LABEL_102:
  if (v55[24]) {
    a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)v55);
  }
  if (v54)
  {
    a1 = (unint64_t)v52;
    uint64_t v52 = 0;
    if (a1) {
      return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)a1);
    }
  }
  return a1;
}

void sub_198D71C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, WTF::DeferrableRefCountedBase *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,WTF *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a25);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a29, a30);
  if (a36) {
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a32);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v38);
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&a38);
  if (a19) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&a16);
  }
  if (a14)
  {
    if (a12) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a12);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::LocalAuthenticator::validateUserVerification(WebKit *a1, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v3 = *((void *)a1 + 3);
      if (!v3) {
        return 0;
      }
      uint64_t result = *(void *)(v3 + 8);
      if (result)
      {
        (*(void (**)(uint64_t))(*(void *)result + 72))(result);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v8[0] = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::LocalAuthenticator::receiveException(a1, (uint64_t)v8, 5);
    unint64_t v6 = v9;
    char v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    int v7 = qword_1EB3587D0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Could not verify user.", v8, 2u);
      return 0;
    }
  }
  return result;
}

void sub_198D71EEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::LocalAuthenticator::finishMakeCredential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v67[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a4 + 16))
  {
    return (_DWORD *)WebKit::LocalAuthenticator::receiveException((WebKit *)a1, a4, 5);
  }
  if (*(_DWORD *)(a1 + 352))
  {
    uint64_t v55 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    uint64_t v56 = v60;
    if (v60)
    {
      uint64_t v60 = 0;
      LODWORD(v61) = 0;
      WTF::fastFree(v56, v54);
    }
    _Unwind_Resume(v55);
  }
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&v60, (const PublicKeyCredentialCreationOptions *)(a1 + 56));
  if (*(_DWORD *)(a1 + 804))
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(a1 + 792);
      char v9 = (const void *)JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(*(void *)(v8 + 8 * v7) + 136));
      size_t v11 = v10;
      uint64_t v12 = (const void *)WebCore::BufferSource::span((WebCore::BufferSource *)&v63);
      if (v11 == v13)
      {
        uint64_t v14 = (WebKit *)memcmp(v9, v12, v11);
        if (!v14) {
          break;
        }
      }
      if (++v7 >= (unint64_t)*(unsigned int *)(a1 + 804)) {
        goto LABEL_31;
      }
    }
    int shouldUseAlternateKeychainAttribute = WebKit::shouldUseAlternateKeychainAttribute(v14);
    id v15 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v16 = *MEMORY[0x1E4F3B978];
    v67[0] = *MEMORY[0x1E4F3B9A0];
    uint64_t v17 = *MEMORY[0x1E4F3B5C8];
    v66[0] = v16;
    v66[1] = v17;
    uint64_t v18 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)(v8 + 8 * v7));
    uint64_t v19 = JSC::ArrayBuffer::span(v18);
    uint64_t v21 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v19 length:v20];
    uint64_t v22 = *MEMORY[0x1E4F3B878];
    uint64_t v23 = *MEMORY[0x1E4F3B880];
    v67[1] = v21;
    v67[2] = v23;
    uint64_t v24 = *MEMORY[0x1E4F3BD08];
    v66[2] = v22;
    v66[3] = v24;
    v67[3] = MEMORY[0x1E4F1CC38];
    objc_msgSend(v15, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v67, v66, 4));
    if (v21) {
      CFRelease(v21);
    }
    uint64_t v25 = *MEMORY[0x1E4F3B5D0];
    if (shouldUseAlternateKeychainAttribute) {
      uint64_t v26 = v17;
    }
    else {
      uint64_t v26 = *MEMORY[0x1E4F3B5D0];
    }
    int v27 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)(v8 + 8 * v7));
    uint64_t v28 = JSC::ArrayBuffer::span(v27);
    uint64_t v30 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v28 length:v29];
    [v15 setObject:v30 forKey:v26];
    if (v30) {
      CFRelease(v30);
    }
    OSStatus v31 = SecItemDelete((CFDictionaryRef)v15);
    if (v31 == -25300) {
      int v32 = shouldUseAlternateKeychainAttribute;
    }
    else {
      int v32 = 0;
    }
    if (v32 == 1)
    {
      [v15 removeObjectForKey:v17];
      uint64_t v33 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)(v8 + 8 * v7));
      uint64_t v34 = JSC::ArrayBuffer::span(v33);
      char v36 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v34 length:v35];
      [v15 setObject:v36 forKey:v25];
      if (v36) {
        CFRelease(v36);
      }
      OSStatus v31 = SecItemDelete((CFDictionaryRef)v15);
    }
    if (v31 != -25300)
    {
      if (v31)
      {
        int v37 = qword_1EB3587D0;
        if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          OSStatus v65 = v31;
          _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Couldn't delete older credential: %d", buf, 8u);
          if (!v15) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
    }
    if (v15) {
LABEL_30:
    }
      CFRelease(v15);
  }
LABEL_31:
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&v60);
  LOBYTE(v66[0]) = 3;
  uint64_t v38 = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)&v60, (uint64_t)v66, 1);
  BOOL v39 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v38);
  if (v39
    && [(id)WebKit::getASCWebKitSPISupportClass[0](v39) shouldUseAlternateCredentialStore])
  {
    LOBYTE(v66[0]) = 5;
    int v40 = HIDWORD(v61);
    if (HIDWORD(v61) == v61)
    {
      int v41 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, (WTF *)(HIDWORD(v61) + 1), (unint64_t)v66);
      int v40 = HIDWORD(v61);
      *((unsigned char *)v60 + HIDWORD(v61)) = *v41;
    }
    else
    {
      *((unsigned char *)v60 + HIDWORD(v61)) = 5;
    }
    HIDWORD(v61) = v40 + 1;
  }
  WebCore::AuthenticatorAttestationResponse::create();
  CFDictionaryRef v43 = v60;
  if (v60)
  {
    uint64_t v60 = 0;
    LODWORD(v61) = 0;
    WTF::fastFree(v43, v42);
  }
  uint64_t v44 = v67[0];
  ++*(_DWORD *)(v67[0] + 8);
  uint64_t v58 = v44;
  int v59 = 0;
  WebKit::LocalAuthenticator::processClientExtensions((unint64_t)&v60, a1, (uint64_t)&v58);
  int v46 = v62;
  if (*(unsigned __int8 *)(a4 + 16) == v62)
  {
    if (*(unsigned char *)(a4 + 16))
    {
      *(unsigned char *)a4 = (_BYTE)v60;
      int v47 = v61;
      char v61 = 0;
      uint64_t v48 = *(WTF::StringImpl **)(a4 + 8);
      *(void *)(a4 + 8) = v47;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, v45);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
  }
  else if (*(unsigned char *)(a4 + 16))
  {
    unsigned __int8 v49 = *(WTF::StringImpl **)(a4 + 8);
    *(void *)(a4 + 8) = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v45);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
    *(unsigned char *)(a4 + 16) = 0;
  }
  else
  {
    *(unsigned char *)a4 = (_BYTE)v60;
    uint64_t v50 = v61;
    char v61 = 0;
    *(void *)(a4 + 8) = v50;
    *(unsigned char *)(a4 + 16) = 1;
  }
  if (v46 && v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, v45);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  if (v59 != -1) {
    ((void (*)(void *, uint64_t *))off_1EE9D28D8[v59])(v66, &v58);
  }
  int v59 = -1;
  if (*(unsigned char *)(a4 + 16))
  {
    WebKit::LocalAuthenticator::receiveException((WebKit *)a1, a4, 5);
    goto LABEL_67;
  }
  __int16 v51 = (WTF *)v67[0];
  v67[0] = 0;
  uint64_t v60 = v51;
  int v62 = 0;
  uint64_t v52 = *(void *)(a1 + 24);
  if (!v52) {
    goto LABEL_66;
  }
  uint64_t v53 = *(void *)(v52 + 8);
  if (!v53)
  {
    LODWORD(v5WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
    goto LABEL_66;
  }
  (*(void (**)(uint64_t, WTF **))(*(void *)v53 + 16))(v53, &v60);
  LODWORD(v5WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v62;
  if (v62 != -1) {
LABEL_66:
  }
    ((void (*)(void *, WTF **))off_1EE9D28E8[v52])(v66, &v60);
LABEL_67:
  uint64_t result = (_DWORD *)v67[0];
  v67[0] = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

WTF *WebKit::LocalAuthenticator::getAssertion(WebKit::LocalAuthenticator *this)
{
  *((_DWORD *)this + 194) = 1;
  if (*((_DWORD *)this + 88) != 1)
  {
    uint64_t result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_75;
  }
  WebKit::LocalAuthenticatorInternal::produceHashSet((WTF::StringImpl *)v45, *((void *)this + 11), *((_DWORD *)this + 25));
  if (*((_DWORD *)this + 25) && (!v45[0] || !*((_DWORD *)v45[0] - 3)))
  {
    buf[0] = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    CFDictionaryRef v43 = *(WTF::StringImpl **)v40;
    WebKit::LocalAuthenticator::receiveException(this, (uint64_t)buf, 7);
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v31);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    uint64_t v34 = qword_1EB3587D0;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v34, OS_LOG_TYPE_ERROR, "No matched credentials are found in the platform attached authenticator.", buf, 2u);
    }
    goto LABEL_71;
  }
  WebKit::LocalAuthenticator::getExistingCredentials((WebKit::LocalAuthenticator *)buf, *((const WTF::String **)this + 98), (uint64_t)this + 80);
  if (!v44)
  {
    v40[0] = 24;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v41 = v38;
    WebKit::LocalAuthenticator::receiveException(this, (uint64_t)v40, 5);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v32);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    char v36 = qword_1EB3587D0;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v40 = 0;
      _os_log_error_impl(&dword_1985F2000, v36, OS_LOG_TYPE_ERROR, "Couldn't get existing credentials", v40, 2u);
    }
    goto LABEL_69;
  }
  uint64_t v3 = *((unsigned int *)this + 201);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(*((uint64_t **)this + 99), (uint64_t *)(*((void *)this + 99) + 8 * v3));
  }
  uint64_t result = (WTF *)*((void *)this + 99);
  if (result)
  {
    *((void *)this + 99) = 0;
    *((_DWORD *)this + 200) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v2);
  }
  *((void *)this + 99) = *(void *)buf;
  uint64_t v5 = HIDWORD(v43);
  *((_DWORD *)this + 200) = v43;
  *(void *)long long buf = 0;
  CFDictionaryRef v43 = 0;
  *((_DWORD *)this + 201) = v5;
  *(void *)int v40 = 0;
  int v41 = 0;
  if (v5)
  {
    if (!(v5 >> 29))
    {
      LODWORD(v41) = v5;
      *(void *)int v40 = WTF::fastMalloc((WTF *)(8 * v5));
      uint64_t v6 = *((unsigned int *)this + 201);
      if (v6)
      {
        uint64_t v7 = (WebCore::AuthenticatorResponse **)*((void *)this + 99);
        uint64_t v8 = &v7[v6];
        while (1)
        {
          if (!v45[0] || !*((_DWORD *)v45[0] - 3))
          {
LABEL_23:
            uint64_t v14 = *v7;
            *((_DWORD *)v14 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *((_DWORD *)*v7 + 2) + 1;
            uint64_t v38 = v14;
            LODWORD(v15) = HIDWORD(v41);
            if (HIDWORD(v41) == v41)
            {
              uint64_t v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)v40, HIDWORD(v41) + 1, (unint64_t)&v38);
              uint64_t v15 = HIDWORD(v41);
              uint64_t v17 = *(WTF::StringImpl **)v40;
              uint64_t v18 = *v16;
              uint64_t *v16 = 0;
              *((void *)v17 + v15) = v18;
            }
            else
            {
              uint64_t v38 = 0;
              *(void *)(*(void *)v40 + 8 * HIDWORD(v41)) = v14;
            }
            HIDWORD(v41) = v15 + 1;
            uint64_t v19 = v38;
            uint64_t v38 = 0;
            if (v19)
            {
              if (*((_DWORD *)v19 + 2) == 1) {
                (*(void (**)(WTF::StringImpl *))(*(void *)v19 + 8))(v19);
              }
              else {
                --*((_DWORD *)v19 + 2);
              }
            }
            goto LABEL_30;
          }
          char v9 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*v7);
          JSC::ArrayBuffer::span(v9);
          WTF::base64EncodeToString();
          uint64_t v12 = v45[0];
          uint64_t v13 = v38;
          if (v45[0])
          {
            int v20 = *((_DWORD *)v45[0] - 2);
            unsigned int v21 = *((_DWORD *)v38 + 4);
            if (v21 >= 0x100) {
              unsigned int v22 = v21 >> 8;
            }
            else {
              unsigned int v22 = WTF::StringImpl::hashSlowCase(v38);
            }
            for (int i = 0; ; v22 = i + v24)
            {
              int v24 = v22 & v20;
              uint64_t v25 = v12[v22 & v20];
              if (v25 != (WTF *)-1)
              {
                if (!v25)
                {
                  LOBYTE(v1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
                  goto LABEL_42;
                }
                if (WTF::equal(v25, v38, v11)) {
                  break;
                }
              }
              ++i;
            }
            LOBYTE(v1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
LABEL_42:
            uint64_t v13 = v38;
          }
          uint64_t v38 = 0;
          if (!v13) {
            goto LABEL_20;
          }
          if (*(_DWORD *)v13 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v13, v10);
          if (v12) {
            goto LABEL_23;
          }
LABEL_30:
          if (++v7 == v8) {
            goto LABEL_43;
          }
        }
        *(_DWORD *)v13 -= 2;
LABEL_20:
        if (v12) {
          goto LABEL_23;
        }
        goto LABEL_30;
      }
      goto LABEL_43;
    }
LABEL_75:
    __break(0xC471u);
    return result;
  }
LABEL_43:
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)v40, HIDWORD(v41));
  if (HIDWORD(v41))
  {
    (*(void (**)(void, uint8_t *))(**((void **)this + 98) + 48))(*((void *)this + 98), v40);
    uint64_t v26 = *((void *)this + 3);
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + 8);
      if (v27)
      {
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)this + 2, (uint64_t)this);
        uint64_t v28 = (atomic_uint *)*((void *)this + 2);
        if (v28) {
          atomic_fetch_add(v28, 1u);
        }
        uint64_t v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v29 = &unk_1EE9D2B00;
        *((void *)v29 + 1) = this;
        *((void *)v29 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v28;
        uint64_t v38 = v29;
        (*(void (**)(uint64_t, uint8_t *, void, WTF::StringImpl **))(*(void *)v27 + 48))(v27, v40, 0, &v38);
        uint64_t v30 = v38;
        uint64_t v38 = 0;
        if (v30) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
        }
      }
    }
  }
  else
  {
    LOBYTE(v38) = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BOOL v39 = (WTF::StringImpl *)v45[1];
    WebKit::LocalAuthenticator::receiveException(this, (uint64_t)&v38, 7);
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v33);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    int v37 = qword_1EB3587D0;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v38) = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "No matched credentials are found in the platform attached authenticator.", (uint8_t *)&v38, 2u);
    }
  }
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v40);
LABEL_69:
  if (v44) {
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)buf);
  }
LABEL_71:
  uint64_t result = (WTF *)v45[0];
  if (v45[0]) {
    return (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v45[0], v35);
  }
  return result;
}

void sub_198D72BC4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, char a13, WTF::StringImpl *a14, char a15, uint64_t a16, WTF::StringImpl **a17)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a11);
  if (a15) {
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a13);
  }
  if (a17) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a17, v18);
  }
  _Unwind_Resume(a1);
}

void WebKit::LocalConnection::~LocalConnection(id *this)
{
  *this = &unk_1EE9D2798;
  [this[1] invalidate];
  id v2 = this[1];
  this[1] = 0;
  if (v2) {
    CFRelease(v2);
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::LocalConnection::~LocalConnection(this);

  WTF::fastFree(v1, v2);
}

void sub_198D72DB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::LocalConnection::verifyUser(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  size_t v10 = (WebKit *)WebCore::genericTouchIDPromptTitle((uint64_t *)&v27, (WebCore *)a1);
  size_t v11 = (void *)[objc_alloc((Class)WebKit::getLAContextClass(v10)) init];
  uint64_t v12 = v11;
  if (v11) {
    CFRetain(v11);
  }
  id v13 = a1[1];
  a1[1] = v12;
  if (v13) {
    CFRelease(v13);
  }
  id v14 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ([a1[1] biometryType] == 1)
  {
    if (v27) {
      uint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v15 = &stru_1EEA10550;
    }
    [v14 setObject:v15 forKey:&unk_1EEA52E40];
    [v14 setObject:MEMORY[0x1E4F1CC28] forKey:&unk_1EEA52E58];
  }
  id v16 = a1[1];
  if (v16) {
    CFRetain(a1[1]);
  }
  uint64_t v17 = *a6;
  *a6 = 0;
  uint64_t v18 = (WebKit *)malloc_type_malloc(0x30uLL, 0x10E0040F5BF99D1uLL);
  *(void *)uint64_t v18 = MEMORY[0x1E4F14398];
  *((void *)v18 + 1) = 50331650;
  *((void *)v18 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke;
  *((void *)v18 + 3) = &WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::descriptor;
  *((void *)v18 + 4) = v16;
  *((void *)v18 + 5) = v17;
  uint64_t v19 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v18);
  if (v19
    && [(id)WebKit::getASCWebKitSPISupportClass[0](v19) shouldUseAlternateCredentialStore])
  {
    id v26 = 0;
    char v20 = [a1[1] canEvaluatePolicy:1 error:&v26];
    uint64_t v21 = [v26 code];
    if (a5) {
      BOOL v22 = v21 == -8;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      char v23 = 1;
    }
    else {
      char v23 = v20;
    }
    if (v23) {
      [a1[1] evaluatePolicy:2 options:v14 reply:v18];
    }
    else {
      (*((void (**)(WebKit *, void *, void))v18 + 2))(v18, &unk_1EEA53250, 0);
    }
  }
  else
  {
    [a1[1] evaluateAccessControl:a4 operation:3 options:v14 reply:v18];
  }
  _Block_release(v18);
  if (v14) {
    CFRelease(v14);
  }
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D73034(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LocalConnection::verifyUser(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v7 setObject:MEMORY[0x1E4F1CC38] forKey:&unk_1EEA52E70];
  uint64_t v8 = *a4;
  *a4 = 0;
  char v9 = (WebKit *)malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *(void *)char v9 = MEMORY[0x1E4F14398];
  *((void *)v9 + 1) = 50331650;
  *((void *)v9 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke;
  *((void *)v9 + 3) = &WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::descriptor;
  *((void *)v9 + 4) = v8;
  size_t v10 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v9);
  if (!v10) {
    goto LABEL_6;
  }
  int v11 = [(id)WebKit::getASCWebKitSPISupportClass[0](v10) shouldUseAlternateCredentialStore] ^ 1;
  if (a3) {
    LOBYTE(v11) = 1;
  }
  if (v11) {
LABEL_6:
  }
    [a3 evaluateAccessControl:a2 operation:3 options:v7 reply:v9];
  else {
    (*((void (**)(WebKit *, void *, void))v9 + 2))(v9, &unk_1EEA53278, 0);
  }
  _Block_release(v9);
  if (v7)
  {
    CFRelease(v7);
  }
}

void sub_198D73240(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LocalConnection::createCredentialPrivateKey(LAContext *a1@<X1>, __SecAccessControl *a2@<X2>, const WTF::String *a3@<X3>, NSData *a4@<X4>, SecKeyRef *a5@<X8>)
{
  error[4] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v10 = *MEMORY[0x1E4F3B6B0];
  v35[0] = *MEMORY[0x1E4F3B548];
  v35[1] = v10;
  int v11 = (__CFError *)MEMORY[0x1E4F1CC38];
  v36[0] = a2;
  v36[1] = MEMORY[0x1E4F1CC38];
  uint64_t v12 = *MEMORY[0x1E4F3B550];
  v35[2] = *MEMORY[0x1E4F3B550];
  v36[2] = [NSString stringWithUTF8String:"com.apple.webkit.webauthn"];
  uint64_t v31 = *MEMORY[0x1E4F3B788];
  v35[3] = *MEMORY[0x1E4F3B788];
  if (*(void *)a3) {
    id v13 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    id v13 = &stru_1EEA10550;
  }
  uint64_t v30 = *MEMORY[0x1E4F3B5E0];
  v35[4] = *MEMORY[0x1E4F3B5E0];
  uint64_t v36[3] = v13;
  v36[4] = a4;
  id v14 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:v35 count:5];
  uint64_t v15 = v14;
  if (v14) {
    CFRetain(v14);
  }
  int v32 = a5;
  uint64_t v28 = a3;
  uint64_t v29 = v12;
  if (a1)
  {
    id v16 = (void *)[v15 mutableCopy];
    [v16 setObject:a1 forKeyedSubscript:*MEMORY[0x1E4F3BCE8]];
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    id v16 = v15;
  }
  uint64_t v17 = *MEMORY[0x1E4F3B8A8];
  uint64_t v18 = *MEMORY[0x1E4F3B718];
  v33[0] = *MEMORY[0x1E4F3B890];
  v33[1] = v18;
  uint64_t v19 = (__CFError *)*MEMORY[0x1E4F3B740];
  v34[0] = v17;
  v34[1] = v19;
  uint64_t v20 = *MEMORY[0x1E4F3B708];
  uint64_t v21 = *MEMORY[0x1E4F3BC18];
  v33[2] = *MEMORY[0x1E4F3B708];
  v33[3] = v21;
  v34[2] = &unk_1EEA52E88;
  uint64_t v34[3] = v16;
  BOOL v22 = (WebKit *)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v34, v33, 4, a4);
  char v23 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v22);
  if (v23
    && [(id)WebKit::getASCWebKitSPISupportClass[0](v23) shouldUseAlternateCredentialStore])
  {
    v39[0] = *MEMORY[0x1E4F3B878];
    v39[1] = v18;
    error[0] = v11;
    error[1] = v19;
    error[2] = (CFErrorRef)&unk_1EEA52E88;
    v39[2] = v20;
    v39[3] = v21;
    v38[0] = v11;
    v37[0] = v10;
    v37[1] = v29;
    v38[1] = [NSString stringWithUTF8String:"com.apple.webkit.webauthn"];
    void v37[2] = v31;
    if (*(void *)v28) {
      int v24 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v24 = &stru_1EEA10550;
    }
    v37[3] = v30;
    v38[2] = v24;
    void v38[3] = v27;
    error[3] = (CFErrorRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:4];
    BOOL v22 = (WebKit *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:error forKeys:v39 count:4];
  }
  error[0] = 0;
  RandomKedouble y = SecKeyCreateRandomKey(v22, error);
  CFErrorRef v26 = error[0];
  if (error[0])
  {
    *int v32 = 0;
    CFRelease(v26);
    if (RandomKey) {
      CFRelease(RandomKey);
    }
    if (v16) {
      goto LABEL_18;
    }
  }
  else
  {
    *int v32 = RandomKey;
    if (v16) {
LABEL_18:
    }
      CFRelease(v16);
  }
}

void sub_198D735B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LocalConnection::getExistingCredentials(const WTF::String *a1@<X1>, void *a2@<X8>)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F3B6D8];
  v14[0] = *MEMORY[0x1E4F3B978];
  v14[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F3B6E8];
  v15[0] = *MEMORY[0x1E4F3B9A0];
  v15[1] = v6;
  void v15[2] = *MEMORY[0x1E4F3B880];
  uint64_t v7 = *MEMORY[0x1E4F3B550];
  _OWORD v14[2] = *MEMORY[0x1E4F3B878];
  uint64_t v14[3] = v7;
  v15[3] = [NSString stringWithUTF8String:"com.apple.webkit.webauthn"];
  void v14[4] = *MEMORY[0x1E4F3B788];
  if (*(void *)a1) {
    uint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = &stru_1EEA10550;
  }
  uint64_t v9 = *MEMORY[0x1E4F3BB80];
  v14[5] = *MEMORY[0x1E4F3BC68];
  v14[6] = v9;
  v14[7] = *MEMORY[0x1E4F3BD08];
  void v15[4] = v8;
  v15[5] = MEMORY[0x1E4F1CC38];
  v15[6] = *MEMORY[0x1E4F3BB88];
  v15[7] = MEMORY[0x1E4F1CC38];
  id v13 = 0;
  OSStatus v10 = SecItemCopyMatching((CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:8], (CFTypeRef *)&v13);
  if (v10 != -25300 && v10)
  {
    *a2 = 0;
  }
  else
  {
    int v11 = v13;
    uint64_t v12 = (const void *)[v13 sortedArrayUsingComparator:&__block_literal_global_27];
    *a2 = v12;
    if (v12) {
      CFRetain(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
}

void sub_198D737A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit15LocalConnection22getExistingCredentialsERKN3WTF6StringE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F3B790];
  uint64_t v5 = (void *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F3B790]];
  uint64_t v6 = [a2 objectForKeyedSubscript:v4];

  return [v5 compare:v6];
}

WebKit::LocalService *WebKit::LocalService::LocalService(WebKit::LocalService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  *(void *)this = &unk_1EE9B5528;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)a2 + 1, (uint64_t)a2);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v4;
  *(void *)this = &unk_1EE9D2800;
  return this;
}

uint64_t WebKit::LocalService::isAvailable(WebKit::LocalService *this)
{
  uint64_t v1 = (WebKit *)[(id)WebKit::getASCWebKitSPISupportClass[0](this) shouldUseAlternateCredentialStore];
  if ((v1 & 1) == 0)
  {
    uint64_t v3 = (void *)[objc_alloc((Class)WebKit::getLAContextClass(v1)) init];
    uint64_t v7 = 0;
    char v4 = [v3 canEvaluatePolicy:1 error:&v7];
    uint64_t v5 = v7;
    if (v7) {
      char v4 = 0;
    }
    if ((v4 & 1) != 0 || (uint64_t v5 = (WebKit *)[(WebKit *)v7 code], v5 == (WebKit *)-8))
    {
      uint64_t v2 = WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported[0](v5);
      if (!v3) {
        return v2;
      }
    }
    else
    {
      uint64_t v2 = 0;
      if (!v3) {
        return v2;
      }
    }
    CFRelease(v3);
    return v2;
  }
  return 1;
}

void sub_198D7395C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LocalService::startDiscoveryInternal(WebKit::LocalService *this)
{
  uint64_t result = (*(uint64_t (**)(WebKit::LocalService *))(*(void *)this + 32))(this);
  if (result)
  {
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        (*(void (**)(uint64_t *__return_ptr, WebKit::LocalService *))(*(void *)this + 40))(&v8, this);
        WebKit::LocalAuthenticator::create(&v8, (uint64_t *)&v9);
        uint64_t v5 = (uint64_t)v9;
        uint64_t v9 = 0;
        OSStatus v10 = (_DWORD *)v5;
        (*(void (**)(uint64_t, _DWORD **))(*(void *)v4 + 16))(v4, &v10);
        uint64_t v6 = v10;
        OSStatus v10 = 0;
        if (v6)
        {
          if (v6[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
          }
          else {
            --v6[2];
          }
        }
        uint64_t v7 = v9;
        uint64_t v9 = 0;
        if (v7)
        {
          if (v7[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[2];
          }
        }
        uint64_t result = v8;
        uint64_t v8 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

void sub_198D73AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  if (a12)
  {
    if (a12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a12 + 8))(a12);
    }
    else {
      --a12[2];
    }
  }
  if (a11)
  {
    if (a11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[2];
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebKit::Authenticator *WebKit::LocalAuthenticator::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x330);
  uint64_t result = WebKit::Authenticator::Authenticator((WebKit::Authenticator *)v4);
  *(void *)uint64_t v4 = &unk_1EE9D2768;
  *(_DWORD *)(v4 + 776) = 0;
  uint64_t v6 = *a1;
  *a1 = 0;
  *(void *)(v4 + 784) = v6;
  *(void *)(v4 + 79WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *(void *)(v4 + 808) = 0;
  *(void *)(v4 + 800) = 0;
  *a2 = v4;
  return result;
}

void sub_198D73C3C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WebKit::LocalService::createLocalConnection@<X0>(void *a1@<X8>)
{
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  void *result = &unk_1EE9D2798;
  result[1] = 0;
  *a1 = result;
  return result;
}

uint64_t WebKit::NfcConnection::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::NfcConnection::NfcConnection(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_198D73CE8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcConnection::NfcConnection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = [[WKNFReaderSessionDelegate alloc] initWithConnection:a1];
  uint64_t v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v7 = *(atomic_uint **)(a3 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v7;
  uint64_t v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v9 = &unk_1EE9D2B50;
  v9[1] = WebKit::NfcConnection::startPolling;
  uint64_t v9[2] = 0;
  v9[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 40), v8);
  *(void *)(a1 + 40) = &unk_1EE9B3390;
  *(void *)(a1 + 64) = v9;
  [*(id *)(a1 + 16) setDelegate:*(void *)(a1 + 24)];
  uint64_t v11 = 0;
  [*(id *)(a1 + 16) startPollingWithError:&v11];
  return a1;
}

void sub_198D73E28(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t v7 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  uint64_t v8 = (const void *)v2[3];
  v2[3] = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)v2[2];
  v2[2] = 0;
  if (v9) {
    CFRelease(v9);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v6);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcConnection::startPolling(id *this)
{
  uint64_t v2 = 0;
  return [this[2] startPollingWithError:&v2];
}

void WebKit::NfcConnection::~NfcConnection(WebKit::NfcConnection *this)
{
  [*((id *)this + 2) disconnectTag];
  [*((id *)this + 2) stopPolling];
  [*((id *)this + 2) endSession];
  *((void *)this + 5) = &unk_1EE9B3390;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::NfcConnection *)((char *)this + 40));
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  uint64_t v5 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

void sub_198D7402C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = &unk_1EE9B3390;
  uint64_t v3 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 40));
  uint64_t v5 = *(unsigned int **)(v1 + 32);
  *(void *)(v1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  uint64_t v6 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcConnection::transact@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:*(void *)a2 length:*(unsigned int *)(a2 + 12)];
  uint64_t v6 = (void *)[v4 transceive:v5];
  if (v5) {
    CFRelease(v5);
  }
  if (v6)
  {
    uint64_t v7 = (char *)[v6 bytes];
    uint64_t v8 = (WTF *)[v6 length];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }

  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a3, v7, v8);
}

void sub_198D74190(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::NfcService *WebKit::NfcService::NfcService(WebKit::NfcService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  uint64_t v3 = WebKit::FidoService::FidoService(this, a2);
  *(void *)uint64_t v3 = &unk_1EE9D2840;
  *((void *)v3 + 4) = 0;
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main(v3);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9D2B78;
  v5[1] = WebKit::NfcService::platformStartDiscovery;
  uint64_t v5[2] = 0;
  v5[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::NfcService *)((char *)this + 40), v4);
  *((void *)this + 5) = &unk_1EE9B3390;
  *((void *)this + 8) = v5;
  return this;
}

void sub_198D7426C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v5 = (WebKit::NfcConnection *)*((void *)v1 + 4);
  *((void *)v1 + 4) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NfcConnection>::deref(v5);
  }
  *(void *)uint64_t v1 = &unk_1EE9B5558;
  uint64_t v6 = *((void *)v1 + 3);
  if (v6) {
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v6, v4);
  }
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcService::platformStartDiscovery(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void WebKit::NfcService::~NfcService(WebKit::NfcService *this)
{
  *(void *)this = &unk_1EE9D2840;
  uint64_t v2 = (WebKit::NfcService *)((char *)this + 40);
  *((void *)this + 5) = &unk_1EE9B3390;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  uint64_t v5 = (WebKit::NfcConnection *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NfcConnection>::deref(v5);
  }
  *(void *)this = &unk_1EE9B5558;
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v6, v4);
  }

  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::NfcService::~NfcService(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::NfcService::isAvailable(WebKit::NfcService *this)
{
  uint64_t v1 = (void *)[(id)WebKit::getNFHardwareManagerClass(this) sharedHardwareManager];

  return [v1 areFeaturesSupported:1 outError:0];
}

uint64_t WebKit::NfcService::startDiscoveryInternal(WebKit::NfcService *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 32))();
}

uint64_t WebKit::NfcService::restartDiscoveryInternal(WebKit::NfcService *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    [*(id *)(v1 + 16) disconnectTag];
    [*(id *)(v1 + 16) stopPolling];
    [*(id *)(v1 + 16) endSession];
  }

  return WTF::RunLoop::TimerBase::start();
}

void WebKit::NfcService::platformStartDiscovery(WebKit::NfcService *this)
{
  if (objc_msgSend((id)objc_msgSend((id)WebKit::getNFHardwareManagerClass(this), "sharedHardwareManager"), "areFeaturesSupported:outError:", 1, 0))
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v2 = (atomic_uint *)*((void *)this + 1);
    if (v2) {
      atomic_fetch_add(v2, 1u);
    }
    uint64_t v3 = (WebKit *)malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *(void *)uint64_t v3 = MEMORY[0x1E4F14398];
    *((void *)v3 + 1) = 50331650;
    *((void *)v3 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::{lambda(void *,NFReaderSession *,NSError *)#1}::__invoke;
    *((void *)v3 + 3) = &WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::descriptor;
    *((void *)v3 + 4) = v2;
    *((void *)v3 + 5) = this;
    objc_msgSend((id)objc_msgSend((id)WebKit::getNFHardwareManagerClass(v3), "sharedHardwareManager"), "startReaderSession:", v3);
    _Block_release(v3);
  }
}

void sub_198D745D4(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198D7496C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198D74C3C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198D74DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D75040(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebAuthenticationPanelClient::WebAuthenticationPanelClient(uint64_t a1, uint64_t a2, id val)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE9D2878;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  objc_initWeak((id *)(a1 + 24), val);
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *(unsigned char *)(a1 + 32) & 0xFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    char v4 = 2;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *(unsigned char *)(a1 + 32) & 0xFD | v4;
  if (objc_opt_respondsToSelector()) {
    char v5 = 4;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *(unsigned char *)(a1 + 32) & 0xFB | v5;
  if (objc_opt_respondsToSelector()) {
    char v6 = 8;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *(unsigned char *)(a1 + 32) & 0xF7 | v6;
  if (objc_opt_respondsToSelector()) {
    char v7 = 16;
  }
  else {
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *(unsigned char *)(a1 + 32) & 0xEF | v7;
  if (objc_opt_respondsToSelector()) {
    char v8 = 32;
  }
  else {
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *(unsigned char *)(a1 + 32) & 0xDF | v8;
  return a1;
}

void sub_198D75258(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::updatePanel(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      char v5 = WeakRetained;
      if (((a2 - 1) & 0xF8) != 0) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = (a2 - 1) + 1;
      }
      [WeakRetained panel:*(void *)(a1 + 16) updateWebAuthenticationPanel:v6];
      CFRelease(v5);
    }
  }
}

void sub_198D752FC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::dismissPanel(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      char v5 = WeakRetained;
      [WeakRetained panel:*(void *)(a1 + 16) dismissWebAuthenticationPanelWithResult:a2];
      CFRelease(v5);
    }
  }
}

void sub_198D75384(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::requestPin(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    id v14 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (WTF::RefCountedBase *)&v14);
    goto LABEL_8;
  }
  id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24));
  if (!WeakRetained)
  {
    id v14 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (WTF::RefCountedBase *)&v14);
LABEL_8:
    id v13 = v14;
    id v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v4);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    return;
  }
  char v8 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_panel_requestPINWithRemainingRetries_completionHandler_, (uint64_t *)&v14);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v11 = v14;
  uint64_t v12 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  void *v12 = MEMORY[0x1E4F14398];
  v12[1] = 50331650;
  void v12[2] = WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
  v12[3] = &WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::descriptor;
  void v12[4] = v10;
  v12[5] = v11;
  [(WebKit::CompletionHandlerCallChecker *)v8 panel:v9 requestPINWithRemainingRetries:a2 completionHandler:v12];
  _Block_release(v12);

  CFRelease(v8);
}

void sub_198D75500(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebAuthenticationPanelClient::selectAssertionResponse(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  if ((*(unsigned char *)(a1 + 32) & 8) != 0
    && (id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24))) != 0)
  {
    uint64_t v9 = WeakRetained;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v10 = *(unsigned int *)(a2 + 12);
    if (v10)
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v11 = WTF::fastMalloc((WTF *)(8 * v10));
      LODWORD(v26) = v10;
      uint64_t v25 = v11;
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = v12;
          uint64_t v14 = *(void *)(*(void *)a2 + 8 * v12);
          ++*(_DWORD *)(v14 + 8);
          uint64_t v15 = (WebKit *)API::Object::newObject(0x18uLL, 128);
          *(void *)uint64_t v15 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v15);
          *(void *)uint64_t v15 = &unk_1EE9E0A68;
          *((void *)v15 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v14;
          uint64_t v12 = v13 + 1;
          *(void *)(v11 + 8 * v13) = v15;
        }
        while (v13 + 1 < (unint64_t)*(unsigned int *)(a2 + 12));
        HIDWORD(v26) = v13 + 1;
      }
    }
    WebKit::CompletionHandlerCallChecker::create(v9, (objc_object *)sel_panel_selectAssertionResponse_source_completionHandler_, &v24);
    uint64_t v16 = *(void *)(a1 + 16);
    API::Array::create(&v25, &v23);
    uint64_t v17 = v23;
    uint64_t v18 = *(const void **)(v23 + 8);
    if (v18) {
      CFRetain(*(CFTypeRef *)(v23 + 8));
    }
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t v20 = v24;
    uint64_t v21 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v21 = MEMORY[0x1E4F14398];
    v21[1] = 50331650;
    void v21[2] = WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::{lambda(void *,_WKWebAuthenticationAssertionResponse *)#1}::__invoke;
    uint64_t v21[3] = &WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::descriptor;
    v21[4] = v19;
    v21[5] = v20;
    [(WebKit::CompletionHandlerCallChecker *)v9 panel:v16 selectAssertionResponse:v18 source:a3 completionHandler:v21];
    _Block_release(v21);
    if (v18) {
      CFRelease(v18);
    }
    CFRelease(*(CFTypeRef *)(v17 + 8));
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v22);
    CFRelease(v9);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::operator()(a4);
  }
}

void sub_198D757E0(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  va_start(va, a3);
  CFRelease(*(CFTypeRef *)(v4 + 8));
  if (a3) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a3);
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v6);
  CFRelease(v3);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0
    && (id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24))) != 0)
  {
    char v5 = WeakRetained;
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_panel_decidePolicyForLocalAuthenticatorWithCompletionHandler_, &v10);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = v10;
    uint64_t v9 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    uint64_t v9[2] = WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::{lambda(void *,_WKLocalAuthenticatorPolicy)#1}::__invoke;
    v9[3] = &WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::descriptor;
    _DWORD v9[4] = v7;
    v9[5] = v8;
    [(WebKit::CompletionHandlerCallChecker *)v5 panel:v6 decidePolicyForLocalAuthenticatorWithCompletionHandler:v9];
    _Block_release(v9);
    CFRelease(v5);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::operator()(a2);
  }
}

void sub_198D759C0(_Unwind_Exception *a1)
{
  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D75AA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0
    && (id WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24))) != 0)
  {
    char v5 = WeakRetained;
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_panel_requestLAContextForUserVerificationWithCompletionHandler_, &v10);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = v10;
    uint64_t v9 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    uint64_t v9[2] = WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::{lambda(void *,LAContext *)#1}::__invoke;
    v9[3] = &WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::descriptor;
    _DWORD v9[4] = v7;
    v9[5] = v8;
    [(WebKit::CompletionHandlerCallChecker *)v5 panel:v6 requestLAContextForUserVerificationWithCompletionHandler:v9];
    _Block_release(v9);
    CFRelease(v5);
  }
  else
  {
    WTF::CompletionHandler<void ()(LAContext *)>::operator()(a2);
  }
}

void sub_198D75C08(_Unwind_Exception *a1)
{
  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::LocalAuthenticator::~LocalAuthenticator(WebKit::LocalAuthenticator *this)
{
  uint64_t v2 = (const void *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v2) {
    CFRelease(v2);
  }
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::LocalAuthenticator *)((char *)this + 792));
  uint64_t v3 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  WebKit::Authenticator::~Authenticator(this);
}

{
  const void *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  uint64_t v2 = (const void *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v2) {
    CFRelease(v2);
  }
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::LocalAuthenticator *)((char *)this + 792));
  uint64_t v3 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::Authenticator::~Authenticator(this);

  WTF::fastFree(v4, v5);
}

void WebKit::LocalService::~LocalService(WebKit::LocalService *this)
{
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);

  WTF::fastFree(v1, v2);
}

void WebKit::WebAuthenticationPanelClient::~WebAuthenticationPanelClient(WebKit::WebAuthenticationPanelClient *this)
{
  objc_destroyWeak((id *)this + 3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  objc_destroyWeak((id *)this + 3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);

  WTF::fastFree(this, v3);
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs const&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_198D75E5C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs const&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    *(void *)uint64_t result = v3;
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(result + 16), a2 + 16);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198D75EC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  void *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_198D75F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 16))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9D28B8[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void sub_198D75FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D28B8[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9D28B8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9D28C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    ++*v3;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (a3[16])
  {
    char v4 = *a3;
    uint64_t v5 = (WTF::StringImpl *)*((void *)a3 + 1);
    *((void *)a3 + 1) = 0;
    v9[0] = v4;
    uint64_t v10 = v5;
    char v11 = 1;
  }
  else
  {
    v9[0] = 0;
    char v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, a2, v9);
  if (v11)
  {
    char v7 = v10;
    uint64_t v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void sub_198D76198(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore32AuthenticatorAttestationResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_30AuthenticatorAssertionResponseENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore32AuthenticatorAttestationResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_30AuthenticatorAssertionResponseENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x6666667)
  {
    int v5 = 40 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,WebCore::PublicKeyCredentialDescriptor>::uninitializedCopy<WebCore::PublicKeyCredentialDescriptor>(*(void *)a2, *(void *)a2 + 40 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198D7631C(_Unwind_Exception *exception_object, void *a2)
{
  char v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::PublicKeyCredentialDescriptor>::uninitializedCopy<WebCore::PublicKeyCredentialDescriptor>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(unsigned char *)(a3 + v6) = *(unsigned char *)(v5 + v6);
      uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3 + v6 + 8, v5 + v6 + 8);
      uint64_t v8 = (WTF *)*(unsigned int *)(v5 + v6 + 36);
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
      *(_DWORD *)(a3 + v6 + 36) = v8;
      if (v8)
      {
        uint64_t v9 = (void *)WTF::fastMalloc(v8);
        *(_DWORD *)(a3 + v6 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v8;
        *(void *)(a3 + v6 + 24) = v9;
        uint64_t result = (uint64_t)memcpy(v9, *(const void **)(v5 + v6 + 24), *(unsigned int *)(v5 + v6 + 36));
      }
      v6 += 40;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

void sub_198D763EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = v13 + v14;
  uint64_t v17 = *(unsigned int *)(v16 + 16);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D28B8[v17])(&a13, v16 + 8);
  }
  *(_DWORD *)(v16 + 16) = -1;
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>((uint64_t)a1, a2);
    a1[144] = 1;
  }
  return a1;
}

void sub_198D7646C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    char v4 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v4 += 2;
    }
    *(void *)uint64_t result = v4;
    *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(result + 16), a2 + 16);
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(v3 + 64), a2 + 64);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198D764F4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v2);
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs const&,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
    a1[72] = 1;
  }
  return a1;
}

void sub_198D76578(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs const&,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(unsigned char *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    char v4 = std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](result, a2);
    std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](v4 + 48, a2 + 48);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198D765CC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues const&,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_198D76624(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues const&,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(result, a2);
    std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(v4 + 16), a2 + 16);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198D76680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D28B8[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_198D766FC(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x5555556)
  {
    int v5 = 48 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::uninitializedCopy<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(*(unsigned char **)a2, (unsigned char *)(*(void *)a2 + 48 * *(unsigned int *)(a2 + 12)), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198D767B4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *WTF::VectorCopier<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::uninitializedCopy<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(unsigned char *result, unsigned char *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(_DWORD **)&v5[v6];
      if (v7) {
        *v7 += 2;
      }
      *(void *)(a3 + v6) = v7;
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3 + v6 + 8, (uint64_t)&v5[v6 + 8]);
      uint64_t result = std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a3 + v6 + 24), (uint64_t)&v5[v6 + 24]);
      v6 += 48;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

void sub_198D76868(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = v13 + v14;
  uint64_t v17 = *(unsigned int *)(v13 + v14 + 16);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D28B8[v17])(&a13, v16 + 8);
  }
  *(_DWORD *)(v16 + 16) = -1;
  uint64_t v18 = *(WTF::StringImpl **)(v13 + v14);
  *(void *)(v13 + v14) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::PublicKeyCredentialCreationOptions *WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(WebCore::PublicKeyCredentialCreationOptions *this, const PublicKeyCredentialCreationOptions *a2)
{
  m_ptr = a2->var0.var0.m_impl.m_ptr;
  if (a2->var0.var0.m_impl.m_ptr) {
    *(_DWORD *)m_ptr += 2;
  }
  *(void *)this = m_ptr;
  int v5 = a2->var0.var1.m_impl.m_ptr;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 1) = v5;
  *((unsigned char *)this + 24) = 0;
  if (a2->var0.var2.var1)
  {
    uint64_t v6 = a2->var0.var2.var0.var1.m_impl.m_ptr;
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
    *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v6;
    *((unsigned char *)this + 24) = 1;
  }
  uint64_t v7 = a2->var1.var0.m_impl.m_ptr;
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  *((void *)this + 4) = v7;
  uint64_t v8 = a2->var1.var1.m_impl.m_ptr;
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  *((void *)this + 5) = v8;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this + 48, (uint64_t)&a2->var1.var2);
  uint64_t v9 = a2->var1.var3.m_impl.m_ptr;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  *((void *)this + 8) = v9;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this + 72, (uint64_t)&a2->var2);
  WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88, (uint64_t)&a2->var3);
  *((void *)this + 13) = a2->var4;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112, (uint64_t)&a2->var5);
  uint64_t v10 = *(void *)&a2->var6.var0.var0;
  *((unsigned char *)this + 136) = a2->var8.var0.var0;
  *((void *)this + 16) = v10;
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100]((unsigned char *)this + 144, (uint64_t)&a2->var8.var0.var1.var1);
  return this;
}

void sub_198D76A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18);
  uint64_t v21 = *v17;
  if (*v17)
  {
    *(void *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 96) = 0;
    WTF::fastFree(v21, v20);
  }
  uint64_t v22 = *(unsigned int *)(v13 + 80);
  if (v22 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D28B8[v22])(&a12, v16);
  }
  *(_DWORD *)(v13 + 80) = -1;
  uint64_t v23 = *(WTF::StringImpl **)(v13 + 64);
  *(void *)(v13 + 64) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v20);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = *(unsigned int *)(v13 + 56);
  if (v24 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D28B8[v24])(&a13, v15);
  }
  *(_DWORD *)(v13 + 56) = -1;
  uint64_t v25 = *(WTF::StringImpl **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v20);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = *(WTF::StringImpl **)(v13 + 32);
  *(void *)(v13 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v20);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v14);
  uint64_t v28 = *(WTF::StringImpl **)(v13 + 8);
  *(void *)(v13 + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = *(WTF::StringImpl **)v13;
  *(void *)uint64_t v13 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v27);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  if (a3) {
    char v5 = 2 * ([a3 code] == -2);
  }
  else {
    char v5 = 1;
  }
  uint64_t v6 = (WTF::RunLoop *)[a2 objectForKeyedSubscript:@"UserPresence"];
  WTF::RunLoop::main(v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v9 = &unk_1EE9D2928;
  *(void *)(v9 + 8) = v7;
  if (v6) {
    char v10 = 3;
  }
  else {
    char v10 = v5;
  }
  *(unsigned char *)(v9 + 16) = v10;
  *(void *)(v9 + 24) = v8;
  uint64_t v12 = v9;
  WTF::RunLoop::dispatch();
  uint64_t result = v12;
  if (v12) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return result;
}

void sub_198D76CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D2928;
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2928;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D76F18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  if (a3) {
    char v5 = 2 * ([a3 code] == -2);
  }
  else {
    char v5 = 1;
  }
  uint64_t v6 = (WTF::RunLoop *)[a2 objectForKeyedSubscript:@"UserPresence"];
  WTF::RunLoop::main(v6);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v8 = &unk_1EE9D2970;
  *(void *)(v8 + 8) = v7;
  if (v6) {
    char v9 = 3;
  }
  else {
    char v9 = v5;
  }
  *(unsigned char *)(v8 + 16) = v9;
  uint64_t v11 = v8;
  WTF::RunLoop::dispatch();
  uint64_t result = v11;
  if (v11) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

void sub_198D7707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D2970;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D2970;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D77264(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::RunLoop *WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::{lambda(void *,NFReaderSession *,NSError *)#1}::__invoke(WTF::RunLoop *result, const void *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *((void *)result + 5);
    WTF::RunLoop::main(result);
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v4 + 4) = 0;
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v7 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v7 = &unk_1EE9D29B8;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v5;
    *((void *)v7 + 3) = a2;
    uint64_t v8 = v7;
    WTF::RunLoop::dispatch();
    uint64_t result = v8;
    if (v8) {
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v8 + 8))(v8);
    }
  }
  return result;
}

void sub_198D77390(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::NfcService::platformStartDiscovery(void)::$_0::operator()(NFReaderSession *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D29B8;
  uint64_t v3 = (const void *)a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NfcService::platformStartDiscovery(void)::$_0::operator()(NFReaderSession *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D29B8;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::NfcConnection *WTF::Detail::CallableWrapper<WebKit::NfcService::platformStartDiscovery(void)::$_0::operator()(NFReaderSession *,NSError *)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = a1[2];
    WebKit::NfcConnection::create(a1 + 3, v2, &v5);
    uint64_t result = *(WebKit::NfcConnection **)(v2 + 32);
    *(void *)(v2 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v5;
    if (result)
    {
      return WTF::RefCounted<WebKit::NfcConnection>::deref(result);
    }
  }
  else
  {
    uint64_t v4 = (void *)a1[3];
    return (WebKit::NfcConnection *)[v4 endSession];
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9D2A00;
  v5[1] = v3;
  uint64_t v5[2] = v4;
  v5[3] = cf;
  uint64_t v7 = (uint64_t)v5;
  WTF::ensureOnMainThread();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_198D776D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v11);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(NSString *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D2A00;
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(NSString *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2A00;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(NSString *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 16));
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    *(unsigned char *)(*(void *)(a1 + 16) + 24) = 1;
    MEMORY[0x19972EAD0](&v5, v3);
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 8), (WTF::RefCountedBase *)&v5);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198D77910(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::{lambda(void *,_WKWebAuthenticationAssertionResponse *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    if (a2) {
      [a2 _apiObject];
    }
    return WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::{lambda(void *,_WKLocalAuthenticatorPolicy)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::{lambda(void *,LAContext *)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    return WTF::CompletionHandler<void ()(LAContext *)>::operator()((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(cbor::CBORValue **)a1;
    uint64_t v5 = 32 * v3;
    do
    {
      cbor::CBORValue::~CBORValue(v4);
      uint64_t v4 = (cbor::CBORValue *)(v6 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = *(WTF **)a1;
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(void *)a1 = v6;
      if (v5)
      {
        uint64_t v8 = v6;
        uint64_t v9 = 32 * v5;
        unint64_t v10 = v4;
        do
        {
          cbor::CBORValue::CBORValue();
          cbor::CBORValue::~CBORValue(v10);
          v8 += 32;
          unint64_t v10 = (cbor::CBORValue *)((char *)v10 + 32);
          v9 -= 32;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::makeCredential(void)::$_2,void,LAContext *>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D2A88;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::makeCredential(void)::$_2,void,LAContext *>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D2A88;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::makeCredential(void)::$_2,void,LAContext *>::call(uint64_t a1, const void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 776) = 5;
      CFErrorRef error = 0;
      SecAccessControlRef v5 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x1E4F3B5A8], 0x40000001uLL, &error);
      CFErrorRef v6 = error;
      if (error)
      {
        v15[0] = 24;
        MEMORY[0x19972EAD0](&v14, [(__CFError *)error localizedDescription]);
        v18[0] = (uint64_t)"Couldn't create access control: ";
        v18[1] = 33;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v18, (uint64_t *)&v14, &v16);
        if (v16)
        {
          WebKit::LocalAuthenticator::receiveException((WebKit *)v3, (uint64_t)v15, 5);
          uint64_t v8 = v16;
          uint64_t v16 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v7);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
          uint64_t v13 = v14;
          uint64_t v14 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v7);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          CFRelease(v6);
          if (v5) {
            CFRelease(v5);
          }
        }
        else
        {
          __break(0xC471u);
        }
      }
      else
      {
        if (a2) {
          CFRetain(a2);
        }
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v3 + 16), v3);
        uint64_t v9 = *(atomic_uint **)(v3 + 16);
        if (v9) {
          atomic_fetch_add(v9, 1u);
        }
        uint64_t v10 = *(void *)(v3 + 784);
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x20);
        void *v11 = &unk_1EE9D2AB0;
        v11[1] = v5;
        v11[2] = a2;
        _OWORD v11[3] = v9;
        v18[0] = (uint64_t)v11;
        (*(void (**)(uint64_t, SecAccessControlRef, const void *, uint64_t *))(*(void *)v10 + 32))(v10, v5, a2, v18);
        uint64_t v12 = v18[0];
        v18[0] = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
    }
  }
}

void sub_198D78090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    CFRelease(v13);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterReceivingLAContext(LAContext *)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D2AB0;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (const void *)a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(v4);
  }
  SecAccessControlRef v5 = (const void *)a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterReceivingLAContext(LAContext *)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2AB0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (const void *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  SecAccessControlRef v5 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterReceivingLAContext(LAContext *)::$_0,void,WebKit::LocalConnection::UserVerification>::call(uint64_t a1, __SecKey *a2)
{
  v160[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    return a1;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    return a1;
  }
  unint64_t v9 = *(void *)(a1 + 8);
  *(_DWORD *)(v8 + 776) = 2;
  if (*(_DWORD *)(v8 + 352))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_188;
  }
  SecKeyRef v10 = a2;
  a1 = WebKit::LocalAuthenticator::validateUserVerification((WebKit *)v8, (int)a2);
  if (!a1) {
    return a1;
  }
  if (!*(unsigned char *)(v8 + 80)) {
    goto LABEL_110;
  }
  v131[0] = 0;
  v131[1] = 0;
  v130 = v131;
  cbor::CBORValue::CBORValue((cbor::CBORValue *)&buf, (const WebCore::BufferSource *)(v8 + 104));
  cbor::CBORValue::CBORValue();
  error[0] = (CFErrorRef)v139;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v130, (cbor::CBORValue *)v139);
  cbor::CBORValue::operator=();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v139);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  cbor::CBORValue::CBORValue((cbor::CBORValue *)&buf, (const WTF::String *)(v8 + 88));
  cbor::CBORValue::CBORValue();
  error[0] = (CFErrorRef)v139;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v130, (cbor::CBORValue *)v139);
  cbor::CBORValue::operator=();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v139);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  cbor::CBORValue::CBORValue((cbor::CBORValue *)&buf, (const WTF::String *)(v8 + 120));
  uint64_t v2 = v139;
  cbor::CBORValue::CBORValue();
  error[0] = (CFErrorRef)v139;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v130, (cbor::CBORValue *)v139);
  cbor::CBORValue::operator=();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v139);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  cbor::CBORValue::CBORValue();
  cbor::CBORWriter::write();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  if (!v129) {
    goto LABEL_110;
  }
  uint64_t v2 = (PAL::CryptoDigest **)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v126 length:v128];
  uint64_t v3 = (void *)(v8 + 72);
  (*(void (**)(SecKeyRef *__return_ptr))(**(void **)(v8 + 784) + 40))(&key);
  if (!key)
  {
    LOBYTE(buf) = 24;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *((PAL::CryptoDigest **)&buf + 1) = v139[0];
    WebKit::LocalAuthenticator::receiveException((WebKit *)v8, (uint64_t)&buf, 5);
    if (*((void *)&buf + 1))
    {
      if (**((_DWORD **)&buf + 1) == 2) {
        WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v16);
      }
      else {
        **((_DWORD **)&buf + 1) -= 2;
      }
    }
    goto LABEL_162;
  }
  uint64_t v11 = SecKeyCopyPublicKey(key);
  error[0] = 0;
  CFDataRef v12 = SecKeyCopyExternalRepresentation(v11, error);
  CFErrorRef v13 = error[0];
  CFDataRef cf = v12;
  if (!error[0])
  {
    if (v11) {
      CFRelease(v11);
    }
    long long v124 = 0uLL;
    PAL::CryptoDigest::create();
    if (cf)
    {
      [(__CFData *)cf bytes];
      [(__CFData *)cf length];
    }
    PAL::CryptoDigest::addBytes();
    PAL::CryptoDigest::computeHash((uint64_t *)&buf, v139[0]);
    long long v124 = buf;
    uint64_t v17 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:(void)buf length:HIDWORD(buf)];
    uint64_t v18 = *(const void **)(v8 + 808);
    *(void *)(v8 + 808) = v17;
    if (v18) {
      CFRelease(v18);
    }
    id v19 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    CFTypeRef v4 = (CFTypeRef)*MEMORY[0x1E4F3B978];
    uint64_t v20 = (__CFError *)*MEMORY[0x1E4F3B9A0];
    uint64_t v21 = (WTF::StringImpl *)*MEMORY[0x1E4F3B6D8];
    v154[0] = *(WTF::StringImpl **)MEMORY[0x1E4F3B978];
    v154[1] = v21;
    uint64_t v22 = (__CFError *)*MEMORY[0x1E4F3B6E8];
    error[0] = v20;
    error[1] = v22;
    v154[2] = *(WTF::StringImpl **)MEMORY[0x1E4F3B788];
    if (*v3) {
      uint64_t v23 = (__CFError *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v23 = (__CFError *)&stru_1EEA10550;
    }
    uint64_t v24 = (WTF::StringImpl *)*MEMORY[0x1E4F3B5D0];
    uint64_t v25 = *(__CFError **)(v8 + 808);
    error[2] = v23;
    error[3] = v25;
    uint64_t v26 = (WTF::StringImpl *)*MEMORY[0x1E4F3BD08];
    v154[3] = v24;
    v154[4] = v26;
    uint64_t v6 = MEMORY[0x1E4F1CC38];
    error[4] = (CFErrorRef)MEMORY[0x1E4F1CC38];
    unint64_t v9 = 0x1E4F1C000uLL;
    uint64_t v27 = (WebKit *)objc_msgSend(v19, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", error, v154, 5));
    CFDataRef v5 = (CFDataRef)&OBJC_METACLASS___WKWebProcessPlugInCSSStyleDeclarationHandle;
    uint64_t v28 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v27);
    if (v28
      && [(id)WebKit::getASCWebKitSPISupportClass[0](v28) shouldUseAlternateCredentialStore])
    {
      [v19 setObject:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F3B878]];
    }
    uint64_t v29 = *(void *)(v8 + 808);
    uint64_t v152 = *MEMORY[0x1E4F3B5C8];
    uint64_t v153 = v29;
    SecItemUpdate((CFDictionaryRef)v19, (CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v153 forKeys:&v152 count:1]);
    if (v19) {
      CFRelease(v19);
    }
    uint64_t v30 = v139[0];
    v139[0] = 0;
    if (v30)
    {
      PAL::CryptoDigest::~CryptoDigest(v30);
      WTF::fastFree(v31, v32);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = 0x2000000000;
    uint64_t v33 = WTF::fastMalloc((WTF *)0x20);
    DWORD2(buf) = 32;
    *(void *)&long long buf = v33;
    -[__CFData getBytes:range:](cf, "getBytes:range:", v33, 1, 32);
    v139[0] = 0;
    v139[1] = (PAL::CryptoDigest *)0x2000000000;
    uint64_t v34 = (PAL::CryptoDigest *)WTF::fastMalloc((WTF *)0x20);
    LODWORD(v139[1]) = 32;
    v139[0] = v34;
    -[__CFData getBytes:range:](cf, "getBytes:range:", v34, 33, 32);
    WebCore::encodeES256PublicKeyAsCBOR();
    v122 = v136;
    int v123 = v137;
    char v36 = v139[0];
    if (v139[0])
    {
      v139[0] = 0;
      LODWORD(v139[1]) = 0;
      WTF::fastFree(v36, v35);
    }
    int v37 = (WTF *)buf;
    if ((void)buf)
    {
      *(void *)&long long buf = 0;
      DWORD2(buf) = 0;
      int v37 = (WTF *)WTF::fastFree(v37, v35);
    }
    uint64_t v38 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v37);
    if (v38) {
      [(id)WebKit::getASCWebKitSPISupportClass[0](v38) shouldUseAlternateCredentialStore];
    }
    if (!*(unsigned char *)(v8 + 80)) {
      goto LABEL_110;
    }
    if (_MergedGlobals_87)
    {
LABEL_39:
      int v39 = dword_1EB359B4C;
      v139[0] = 0;
      LODWORD(v139[1]) = 0;
      HIDWORD(v139[1]) = dword_1EB359B4C;
      if (dword_1EB359B4C)
      {
        int v40 = (PAL::CryptoDigest *)WTF::fastMalloc((WTF *)dword_1EB359B4C);
        LODWORD(v139[1]) = v39;
        v139[0] = v40;
        memcpy(v40, (const void *)qword_1EB359B40, dword_1EB359B4C);
      }
      WebCore::buildAttestedCredentialData();
      WebCore::buildAuthData();
      int v42 = (WTF *)buf;
      if ((void)buf)
      {
        *(void *)&long long buf = 0;
        DWORD2(buf) = 0;
        WTF::fastFree(v42, v41);
      }
      CFDictionaryRef v43 = v139[0];
      if (v139[0])
      {
        v139[0] = 0;
        LODWORD(v139[1]) = 0;
        WTF::fastFree(v43, v41);
      }
      if (*(unsigned char *)(v8 + 192) != 3)
      {
        int v57 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
        if (*MEMORY[0x1E4F30980]) {
          *(_DWORD *)v57 += 2;
        }
        char v136 = v57;
        *((void *)&buf + 1) = 0;
        uint64_t v157 = 0;
        *(void *)&long long buf = (char *)&buf + 8;
        LOBYTE(v134) = 0;
        WebCore::buildAttestationObject();
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&buf, *((WTF **)&buf + 1));
        int v59 = v136;
        char v136 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2) {
            WTF::StringImpl::destroy(v59, v58);
          }
          else {
            *(_DWORD *)v59 -= 2;
          }
        }
        LOBYTE(buf) = 0;
        LOBYTE(v157) = 0;
        WebKit::LocalAuthenticator::finishMakeCredential(v8, (uint64_t)&v124, (uint64_t)v139, (uint64_t)&buf);
        if ((_BYTE)v157 && *((void *)&buf + 1))
        {
          if (**((_DWORD **)&buf + 1) == 2) {
            WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v16);
          }
          else {
            **((_DWORD **)&buf + 1) -= 2;
          }
        }
        OSStatus v65 = v139[0];
        if (v139[0])
        {
          v139[0] = 0;
          LODWORD(v139[1]) = 0;
          WTF::fastFree(v65, v16);
        }
        goto LABEL_154;
      }
      uint64_t v44 = *((void *)&v124 + 1);
      SecKeyRef v10 = (SecKeyRef)v124;
      long long v124 = 0uLL;
      WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v8 + 16), v8);
      __int16 v45 = *(atomic_uint **)(v8 + 16);
      if (v45) {
        atomic_fetch_add(v45, 1u);
      }
      int v46 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v46 = &unk_1EE9D2AD8;
      v46[1] = v10;
      void v46[2] = v44;
      void v46[3] = v45;
      v118 = v46;
      int v47 = (void *)[MEMORY[0x1E4F1CA58] dataWithBytes:v119 length:v121];
      objc_msgSend(v47, "replaceBytesInRange:withBytes:", 37, 16, &enterpriseAAGUID);
      uint64_t v48 = (*((uint64_t (**)(uint64_t))v5 + 482))([v47 appendBytes:*(void *)(v8 + 32) length:*(unsigned int *)(v8 + 44)]);
      if (*(unsigned char *)(v8 + 80))
      {
        unsigned __int8 v49 = (void *)v48;
        if (*v3) {
          uint64_t v50 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v50 = &stru_1EEA10550;
        }
        uint64_t v51 = [v49 entepriseAttestationIdentityPersistentReferenceForRelyingParty:v50];
        if (!v51)
        {
LABEL_69:
          v139[0] = 0;
          v139[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v61 = buf;
          LOBYTE(buf) = 24;
          *((void *)&buf + 1) = v61;
          LOBYTE(v157) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()((uint64_t *)&v118, (uint64_t)v139, (char *)&buf);
          if ((_BYTE)v157 && *((void *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2) {
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v16);
            }
            else {
              **((_DWORD **)&buf + 1) -= 2;
            }
          }
          uint64_t v66 = v139[0];
          if (v139[0])
          {
            v139[0] = 0;
            LODWORD(v139[1]) = 0;
            WTF::fastFree(v66, v16);
          }
LABEL_152:
          if (v118) {
            (*(void (**)(void *))(*v118 + 8))(v118);
          }
LABEL_154:
          float32x4_t v103 = v119;
          if (v119)
          {
            v119 = 0;
            int v120 = 0;
            WTF::fastFree(v103, v16);
          }
          float32x4_t v104 = v122;
          if (v122)
          {
            v122 = 0;
            LODWORD(v123) = 0;
            WTF::fastFree(v104, v16);
          }
          int v105 = (WTF *)v124;
          if ((void)v124)
          {
            *(void *)&long long v124 = 0;
            DWORD2(v124) = 0;
            WTF::fastFree(v105, v16);
          }
          goto LABEL_160;
        }
        uint64_t v52 = *MEMORY[0x1E4F3B990];
        uint64_t v53 = *MEMORY[0x1E4F3BD40];
        v159[0] = v4;
        v159[1] = v53;
        v160[0] = v52;
        v160[1] = v51;
        v159[2] = *MEMORY[0x1E4F3BC80];
        v160[2] = v6;
        CFDictionaryRef v54 = (const __CFDictionary *)[*(id *)(v9 + 2536) dictionaryWithObjects:v160 forKeys:v159 count:3];
        result[0] = 0;
        OSStatus v55 = SecItemCopyMatching(v54, result);
        if (v55)
        {
          uint64_t v56 = qword_1EB3587D0;
          if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v55;
            _os_log_error_impl(&dword_1985F2000, v56, OS_LOG_TYPE_ERROR, "Couldn't find attestation certificate: %d", (uint8_t *)&buf, 8u);
          }
          goto LABEL_69;
        }
        CFTypeRef v4 = result[0];
        SecKeyRef privateKeyRef = 0;
        OSStatus v62 = SecIdentityCopyPrivateKey((SecIdentityRef)result[0], &privateKeyRef);
        if (v62)
        {
          uint64_t v63 = qword_1EB3587D0;
          if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v62;
            _os_log_error_impl(&dword_1985F2000, v63, OS_LOG_TYPE_ERROR, "Couldn't access attestation signing key: %d", (uint8_t *)&buf, 8u);
          }
          v139[0] = 0;
          v139[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v64 = buf;
          LOBYTE(buf) = 24;
          *((void *)&buf + 1) = v64;
          LOBYTE(v157) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()((uint64_t *)&v118, (uint64_t)v139, (char *)&buf);
          if ((_BYTE)v157 && *((void *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2) {
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v16);
            }
            else {
              **((_DWORD **)&buf + 1) -= 2;
            }
          }
          uint64_t v74 = v139[0];
          if (v139[0])
          {
            v139[0] = 0;
            LODWORD(v139[1]) = 0;
            WTF::fastFree(v74, v16);
          }
LABEL_150:
          if (v4) {
            CFRelease(v4);
          }
          goto LABEL_152;
        }
        SecKeyRef v10 = privateKeyRef;
        CFErrorRef v149 = 0;
        CFDataRef v5 = SecKeyCreateSignature(privateKeyRef, (SecKeyAlgorithm)*MEMORY[0x1E4F3BA70], (CFDataRef)v47, &v149);
        CFErrorRef v67 = v149;
        if (v149)
        {
          unsigned __int8 v68 = qword_1EB3587D0;
          if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v110 = [(__CFError *)v67 localizedDescription];
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v110;
            _os_log_error_impl(&dword_1985F2000, v68, OS_LOG_TYPE_ERROR, "Couldn't generate attestation signature: %@", (uint8_t *)&buf, 0xCu);
          }
          v139[0] = 0;
          v139[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v69 = buf;
          LOBYTE(buf) = 24;
          *((void *)&buf + 1) = v69;
          LOBYTE(v157) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()((uint64_t *)&v118, (uint64_t)v139, (char *)&buf);
          if ((_BYTE)v157 && *((void *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2) {
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v70);
            }
            else {
              **((_DWORD **)&buf + 1) -= 2;
            }
          }
          float32x4_t v101 = v139[0];
          if (v139[0])
          {
            v139[0] = 0;
            LODWORD(v139[1]) = 0;
            WTF::fastFree(v101, v70);
          }
          CFErrorRef v102 = v67;
LABEL_145:
          CFRelease(v102);
LABEL_146:
          if (v5) {
            CFRelease(v5);
          }
          if (v10) {
            CFRelease(v10);
          }
          goto LABEL_150;
        }
        SecCertificateRef certificateRef = 0;
        OSStatus v71 = SecIdentityCopyCertificate((SecIdentityRef)result[0], &certificateRef);
        if (v71)
        {
          uint64_t v72 = qword_1EB3587D0;
          if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v71;
            _os_log_error_impl(&dword_1985F2000, v72, OS_LOG_TYPE_ERROR, "Couldn't access attestation certificate: %d", (uint8_t *)&buf, 8u);
          }
          v139[0] = 0;
          v139[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v73 = buf;
          LOBYTE(buf) = 24;
          *((void *)&buf + 1) = v73;
          LOBYTE(v157) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()((uint64_t *)&v118, (uint64_t)v139, (char *)&buf);
          if ((_BYTE)v157 && *((void *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2) {
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v16);
            }
            else {
              **((_DWORD **)&buf + 1) -= 2;
            }
          }
          float32x4_t v108 = v139[0];
          if (v139[0])
          {
            v139[0] = 0;
            LODWORD(v139[1]) = 0;
            WTF::fastFree(v108, v16);
          }
          goto LABEL_146;
        }
LABEL_111:
        SecCertificateRef v114 = certificateRef;
        uint64_t v115 = v10;
        SecCertificateRef v158 = certificateRef;
        CFTypeRef v116 = v4;
        CFDataRef v113 = v5;
        uint64_t v75 = (const void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v158 count:1];
        SecPolicyRef BasicX509 = SecPolicyCreateBasicX509();
        SecTrustRef trust = 0;
        SecTrustCreateWithCertificates(v75, BasicX509, &trust);
        CFArrayRef v77 = SecTrustCopyCertificateChain(trust);
        uint64_t v78 = (id)CFMakeCollectable(v77);
        v146[0] = 0;
        v146[1] = 0;
        uint64_t v144 = 0;
        uint64_t v145 = v146;
        v143 = 0;
        *(_OWORD *)v139 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        uint64_t v79 = [v78 countByEnumeratingWithState:v139 objects:&buf count:16];
        if (v79)
        {
          uint64_t v80 = *(void *)v140;
          do
          {
            uint64_t v81 = 0;
            do
            {
              if (*(void *)v140 != v80) {
                objc_enumerationMutation(v78);
              }
              CFDataRef v82 = SecCertificateCopyData(*((SecCertificateRef *)v139[1] + v81));
              CFDataRef v83 = v82;
              if (v82)
              {
                uint64_t v84 = (char *)[(__CFData *)v82 bytes];
                unint64_t v85 = [(__CFData *)v83 length];
                unint64_t v86 = v85;
                v134 = 0;
                LODWORD(v135) = 0;
                HIDWORD(v135) = v85;
                if (v85)
                {
                  if (HIDWORD(v85)) {
                    goto LABEL_191;
                  }
                  char v87 = (WTF *)WTF::fastMalloc((WTF *)v85);
                  LODWORD(v135) = v86;
                  v134 = v87;
                  do
                  {
                    char v88 = *v84++;
                    *(unsigned char *)char v87 = v88;
                    char v87 = (WTF *)((char *)v87 + 1);
                    --v86;
                  }
                  while (v86);
                }
              }
              else
              {
                v134 = 0;
                uint64_t v135 = 0;
              }
              cbor::CBORValue::CBORValue();
              if (HIDWORD(v144) == v144) {
                WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v143, HIDWORD(v144) + 1, (unint64_t)&v136);
              }
              cbor::CBORValue::CBORValue();
              ++HIDWORD(v144);
              cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v136);
              unsigned int v90 = v134;
              if (v134)
              {
                v134 = 0;
                LODWORD(v135) = 0;
                WTF::fastFree(v90, v89);
              }
              if (v83) {
                CFRelease(v83);
              }
              ++v81;
            }
            while (v81 != v79);
            uint64_t v91 = [v78 countByEnumeratingWithState:v139 objects:&buf count:16];
            uint64_t v79 = v91;
          }
          while (v91);
        }
        cbor::CBORValue::CBORValue();
        CFTypeRef v4 = v116;
        CFDataRef v5 = v113;
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v134, "x5c");
        v132 = (WTF *)&v134;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v145, (cbor::CBORValue *)&v134);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v134);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v136);
        SecKeyRef v10 = v115;
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v136);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v134, "alg");
        v132 = (WTF *)&v134;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v145, (cbor::CBORValue *)&v134);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v134);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v136);
        if (v113)
        {
          int v92 = (char *)[(__CFData *)v113 bytes];
          unint64_t v93 = [(__CFData *)v113 length];
          unint64_t v94 = v93;
          v132 = 0;
          LODWORD(v133) = 0;
          HIDWORD(v133) = v93;
          if (v93)
          {
            if (HIDWORD(v93))
            {
LABEL_191:
              __break(0xC471u);
              JUMPOUT(0x198D7956CLL);
            }
            int v95 = (WTF *)WTF::fastMalloc((WTF *)v93);
            LODWORD(v133) = v94;
            v132 = v95;
            do
            {
              char v96 = *v92++;
              *(unsigned char *)int v95 = v96;
              int v95 = (WTF *)((char *)v95 + 1);
              --v94;
            }
            while (v94);
          }
        }
        else
        {
          v132 = 0;
          uint64_t v133 = 0;
        }
        cbor::CBORValue::CBORValue();
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v134, "sig");
        result[2] = &v134;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v145, (cbor::CBORValue *)&v134);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v134);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v136);
        int v98 = v132;
        if (v132)
        {
          v132 = 0;
          LODWORD(v133) = 0;
          WTF::fastFree(v98, v97);
        }
        WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v143, v97);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v143 = v136;
        WebCore::buildAttestationObject();
        float32x4_t v100 = v143;
        v143 = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2) {
            WTF::StringImpl::destroy(v100, v99);
          }
          else {
            *(_DWORD *)v100 -= 2;
          }
        }
        LOBYTE(v136) = 0;
        char v138 = 0;
        WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()((uint64_t *)&v118, (uint64_t)&v134, (char *)&v136);
        if (v138 && v137)
        {
          if (*(_DWORD *)v137 == 2) {
            WTF::StringImpl::destroy(v137, v109);
          }
          else {
            *(_DWORD *)v137 -= 2;
          }
        }
        long long v111 = v134;
        if (v134)
        {
          v134 = 0;
          LODWORD(v135) = 0;
          WTF::fastFree(v111, v109);
        }
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v145, v146[0]);
        CFErrorRef v102 = v114;
        if (!v114) {
          goto LABEL_146;
        }
        goto LABEL_145;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_188:
    qword_1EB359B40 = 0;
    *(void *)&dword_1EB359B48 = 0x1000000000;
    v112 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
    dword_1EB359B48 = 16;
    qword_1EB359B40 = (uint64_t)v112;
    _OWORD *v112 = xmmword_1994F6DC0;
    _MergedGlobals_87 = 1;
    goto LABEL_39;
  }
  LOBYTE(v139[0]) = 24;
  MEMORY[0x19972EAD0](v154, [(__CFError *)error[0] localizedDescription]);
  *(void *)&long long buf = "Couldn't export the public key: ";
  *((void *)&buf + 1) = 33;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&buf, (uint64_t *)v154, &v139[1]);
  if (!v139[1])
  {
    __break(0xC471u);
    JUMPOUT(0x198D79574);
  }
  WebKit::LocalAuthenticator::receiveException((WebKit *)v8, (uint64_t)v139, 5);
  uint64_t v15 = v139[1];
  v139[1] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v60 = v154[0];
  v154[0] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, v14);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  CFRelease(v13);
  if (v11) {
    CFRelease(v11);
  }
LABEL_160:
  if (cf) {
    CFRelease(cf);
  }
LABEL_162:
  SecKeyRef v106 = key;
  kedouble y = 0;
  if (v106) {
    CFRelease(v106);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v129)
  {
    long long v107 = v126;
    if (v126)
    {
      v126 = 0;
      int v127 = 0;
      WTF::fastFree(v107, v16);
    }
  }
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v130, v131[0]);
}

void sub_198D79580(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, CFTypeRef a12, CFTypeRef a13, CFTypeRef a14, uint64_t a15, WTF *a16, uint64_t a17, WTF *a18, uint64_t a19, WTF *a20,uint64_t a21,CFTypeRef a22,WTF *a23,uint64_t a24,char a25,int a26,__int16 a27,uint64_t a28,uint64_t a29,WTF *a30,uint64_t a31,WTF *a32,int a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36,WTF::StringImpl *a37,char a38,uint64_t a39,PAL::CryptoDigest *a40,WTF::StringImpl *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,char a50,uint64_t a51)
{
  if (a38)
  {
    uint64_t v53 = a37;
    a37 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, a2);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
  CFDictionaryRef v54 = a32;
  if (a32)
  {
    a32 = 0;
    a33 = 0;
    WTF::fastFree(v54, a2);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a50, (WTF *)a51);
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  if (a12) {
    CFRelease(a12);
  }
  if (a13) {
    CFRelease(a13);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a16) {
    WTF::fastFree(a16, v55);
  }
  uint64_t v56 = a14;
  if (a18)
  {
    WTF::fastFree(a18, v55);
    uint64_t v56 = a14;
  }
  if (a20)
  {
    WTF::fastFree(a20, v55);
    uint64_t v56 = a14;
  }
  if (v56) {
    CFRelease(v56);
  }
  if (a22) {
    CFRelease(a22);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (a25)
  {
    if (a23) {
      WTF::fastFree(a23, v55);
    }
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a27, (WTF *)a28);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification(__SecAccessControl *,WebKit::LocalConnection::UserVerification,LAContext *)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D2AD8;
  uint64_t v3 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  CFTypeRef v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification(__SecAccessControl *,WebKit::LocalConnection::UserVerification,LAContext *)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2AD8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  CFTypeRef v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification(__SecAccessControl *,WebKit::LocalConnection::UserVerification,LAContext *)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>>::call(void *result, WTF::StringImpl *a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)(a3 + 16);
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a3 + 8);
    *(void *)(a3 + 8) = 0;
  }
  uint64_t v5 = result[3];
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      v8[0] = 0;
      char v10 = 0;
      uint64_t result = WebKit::LocalAuthenticator::finishMakeCredential(v6, (uint64_t)(result + 1), (uint64_t)a2, (uint64_t)v8);
      if (v10)
      {
        uint64_t result = v9;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            uint64_t result = (void *)WTF::StringImpl::destroy(v9, a2);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
      }
    }
  }
  if (v4) {
    BOOL v7 = v3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(_DWORD *)v3 == 2)
    {
      return (void *)WTF::StringImpl::destroy(v3, a2);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void sub_198D79E50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (v13 && v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct((uint64_t *)(*(void *)result + 8 * a2), (uint64_t *)(*(void *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        uint64_t v3[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      uint64_t v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)memcpy(result, v5, 8 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        uint64_t v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::getAssertion(void)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D2B00;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::getAssertion(void)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2B00;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::getAssertion(void)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::call(WTF::RunLoop *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  uint64_t result = WTF::RunLoop::isCurrent(v5);
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 2);
  if (!v7) {
    return result;
  }
  if (!*(void *)(v7 + 8)) {
    return result;
  }
  unint64_t v8 = *(unsigned int *)(v4 + 804);
  if (!v8) {
    return result;
  }
  unint64_t v9 = 0;
  while (*(void *)(*(void *)(v4 + 792) + 8 * v9) != a2)
  {
    if (v8 == ++v9) {
      return result;
    }
  }
  if (v9 >= v8)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198D7A1F8);
  }
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 776) = 4;
  uint64_t v10 = *(void *)(a2 + 184);
  uint64_t v11 = *(void *)(a2 + 192);
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v4 + 16), v4);
  CFDataRef v12 = *(atomic_uint **)(v4 + 16);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  uint64_t v13 = *(void *)(v4 + 784);
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v14 = &unk_1EE9D2B28;
  v14[1] = v12;
  _OWORD v14[2] = a2;
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v13 + 32))(v13, v10, v11, &v15);
  uint64_t result = (uint64_t)v15;
  uint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D7A204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected(WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>> &&)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D2B28;
  uint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected(WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>> &&)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2B28;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected(WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>> &&)::$_0,void,WebKit::LocalConnection::UserVerification>::call(WTF::StringImpl *a1, int a2)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a1 + 1);
  if (!v2) {
    return a1;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*((void *)a1 + 2) + 192);
  *(_DWORD *)(v3 + 776) = 2;
  a1 = (WTF::StringImpl *)WebKit::LocalAuthenticator::validateUserVerification((WebKit *)v3, a2);
  if (!a1) {
    return a1;
  }
  if (*(_DWORD *)(v3 + 352) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_93;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v74, v3 + 56);
  uint64_t v6 = *(WTF::StringImpl **)(v3 + 80);
  uint64_t v76 = *(void *)(v3 + 72);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  CFArrayRef v77 = v6;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v78, v3 + 88);
  v78[16] = *(unsigned char *)(v3 + 104);
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](v79, v3 + 112);
  __int16 v80 = *(_WORD *)(v3 + 264);
  unint64_t v93 = 0;
  uint64_t v94 = 0;
  WebCore::buildAuthData();
  unint64_t v8 = v93;
  if (v93)
  {
    unint64_t v93 = 0;
    LODWORD(v94) = 0;
    WTF::fastFree(v8, v7);
  }
  unint64_t v9 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*((WebCore::AuthenticatorResponse **)v4 + 2));
  uint64_t v10 = JSC::ArrayBuffer::span(v9);
  OSStatus v65 = (WebKit *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v10 length:v11];
  int shouldUseAlternateKeychainAttribute = WebKit::shouldUseAlternateKeychainAttribute(v65);
  uint64_t v13 = (WTF *)*MEMORY[0x1E4F3B9A0];
  uint64_t v14 = *MEMORY[0x1E4F3B6D8];
  uint64_t v64 = *MEMORY[0x1E4F3B978];
  v92[0] = *MEMORY[0x1E4F3B978];
  v92[1] = v14;
  uint64_t v62 = v14;
  uint64_t v15 = *MEMORY[0x1E4F3B6E8];
  uint64_t v63 = v13;
  unint64_t v93 = v13;
  uint64_t v94 = v15;
  uint64_t v61 = v15;
  uint64_t v16 = *MEMORY[0x1E4F3B878];
  uint64_t v17 = *MEMORY[0x1E4F3B880];
  uint64_t v18 = *MEMORY[0x1E4F3BC80];
  v92[2] = *MEMORY[0x1E4F3B878];
  v92[3] = v18;
  uint64_t v60 = v17;
  uint64_t v95 = v17;
  uint64_t v96 = MEMORY[0x1E4F1CC38];
  uint64_t v19 = *MEMORY[0x1E4F3BD08];
  v92[4] = *MEMORY[0x1E4F3BD08];
  uint64_t v97 = MEMORY[0x1E4F1CC38];
  uint64_t v20 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v93, v92, 5), "mutableCopy");
  uint64_t v21 = v20;
  uint64_t v22 = *MEMORY[0x1E4F3B5C8];
  uint64_t v23 = *MEMORY[0x1E4F3B5D0];
  if (shouldUseAlternateKeychainAttribute) {
    uint64_t v24 = *MEMORY[0x1E4F3B5C8];
  }
  else {
    uint64_t v24 = *MEMORY[0x1E4F3B5D0];
  }
  [v20 setObject:v65 forKeyedSubscript:v24];
  if (v5) {
    [v21 setObject:v5 forKeyedSubscript:*MEMORY[0x1E4F3BCE8]];
  }
  CFTypeRef result = 0;
  OSStatus v25 = SecItemCopyMatching((CFDictionaryRef)v21, &result);
  if (v25 == -25300) {
    int v26 = shouldUseAlternateKeychainAttribute;
  }
  else {
    int v26 = 0;
  }
  if (v26 == 1)
  {
    [v21 setObject:0 forKeyedSubscript:v22];
    [v21 setObject:v65 forKeyedSubscript:v23];
    OSStatus v25 = SecItemCopyMatching((CFDictionaryRef)v21, &result);
  }
  if (v25)
  {
    LOBYTE(v87) = 24;
    *(void *)&long long buf = "Couldn't get the private key reference: ";
    *((void *)&buf + 1) = 41;
    LODWORD(error[0]) = v25;
    WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)&buf, (unsigned int *)error, v88);
    if (v88[0])
    {
      WebKit::LocalAuthenticator::receiveException((WebKit *)v3, (uint64_t)&v87, 5);
      uint64_t v28 = (WTF::StringImpl *)v88[0];
      v88[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v27);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
      uint64_t v38 = qword_1EB3587D0;
      BOOL v39 = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR);
      if (v39)
      {
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v25;
        _os_log_error_impl(&dword_1985F2000, v38, OS_LOG_TYPE_ERROR, "Couldn't get the private key reference: %d", (uint8_t *)&buf, 8u);
      }
      CFDataRef Signature = 0;
      LODWORD(v3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
      goto LABEL_43;
    }
LABEL_93:
    __break(0xC471u);
    JUMPOUT(0x198D7ACDCLL);
  }
  CFTypeRef cf = result;
  uint64_t v29 = (void *)[MEMORY[0x1E4F1CA58] dataWithBytes:v71 length:v73];
  [v29 appendBytes:*(void *)(v3 + 32) length:*(unsigned int *)(v3 + 44)];
  error[0] = 0;
  CFDataRef Signature = SecKeyCreateSignature((SecKeyRef)result, (SecKeyAlgorithm)*MEMORY[0x1E4F3BA70], (CFDataRef)v29, error);
  CFErrorRef v32 = error[0];
  if (error[0])
  {
    uint64_t v33 = qword_1EB3587D0;
    BOOL v34 = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR);
    CFErrorRef v35 = v32;
    if (v34)
    {
      uint64_t v58 = [(__CFError *)v32 localizedDescription];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v58;
      _os_log_error_impl(&dword_1985F2000, v33, OS_LOG_TYPE_ERROR, "Couldn't generate signature: %@", (uint8_t *)&buf, 0xCu);
      CFErrorRef v35 = error[0];
    }
    LOBYTE(v87) = 24;
    MEMORY[0x19972EAD0](&v70, [(__CFError *)v35 localizedDescription]);
    *(void *)&long long buf = "Couldn't generate the signature: ";
    *((void *)&buf + 1) = 34;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&buf, (uint64_t *)&v70, v88);
    if (!v88[0]) {
      goto LABEL_93;
    }
    WebKit::LocalAuthenticator::receiveException((WebKit *)v3, (uint64_t)&v87, 5);
    int v37 = (WTF::StringImpl *)v88[0];
    v88[0] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    int v40 = v70;
    unsigned __int8 v70 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v36);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    CFRelease(v32);
    LODWORD(v3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
  }
  BOOL v39 = (BOOL)cf;
  if (cf) {
    CFRelease(cf);
  }
LABEL_43:
  if (v21) {
    CFRelease(v21);
  }
  if (v32) {
    goto LABEL_79;
  }
  int v41 = WebKit::shouldUseAlternateKeychainAttribute((WebKit *)v39);
  id v42 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v87 = v64;
  v88[0] = v62;
  *(void *)&long long buf = v63;
  *((void *)&buf + 1) = v61;
  v88[1] = v16;
  v88[2] = v19;
  uint64_t v90 = v60;
  uint64_t v91 = MEMORY[0x1E4F1CC38];
  objc_msgSend(v42, "setDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &buf, &v87, 4));
  if (v41) {
    uint64_t v43 = v22;
  }
  else {
    uint64_t v43 = v23;
  }
  [v42 setObject:v65 forKey:v43];
  uint64_t v85 = v22;
  unint64_t v86 = v65;
  CFDictionaryRef v44 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v86 forKeys:&v85 count:1];
  OSStatus v45 = SecItemUpdate((CFDictionaryRef)v42, v44);
  if (v45 == -25300) {
    int v46 = v41;
  }
  else {
    int v46 = 0;
  }
  if (v46 == 1)
  {
    [v42 removeObjectForKey:v22];
    [v42 setObject:v65 forKey:v23];
    OSStatus v45 = SecItemUpdate((CFDictionaryRef)v42, v44);
  }
  if (v45)
  {
    int v47 = qword_1EB3587D0;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      LODWORD(result) = 67109120;
      HIDWORD(result) = v45;
      _os_log_error_impl(&dword_1985F2000, v47, OS_LOG_TYPE_ERROR, "Couldn't update the Keychain item: %d", (uint8_t *)&result, 8u);
    }
  }
  WebCore::AuthenticatorAssertionResponse::setAuthenticatorData();
  uint64_t v48 = *((void *)v4 + 2);
  if (Signature)
  {
    [(__CFData *)Signature bytes];
    [(__CFData *)Signature length];
  }
  JSC::ArrayBuffer::create();
  CFTypeRef v49 = result;
  CFTypeRef result = 0;
  uint64_t v50 = *(WTF::DeferrableRefCountedBase **)(v48 + 128);
  *(void *)(v48 + 128) = v49;
  if (v50)
  {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v50);
    uint64_t v51 = (WTF::DeferrableRefCountedBase *)result;
    CFTypeRef result = 0;
    if (v51) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v51);
    }
  }
  uint64_t v52 = *((void *)v4 + 2);
  ++*(_DWORD *)(v52 + 8);
  uint64_t v68 = v52;
  int v69 = 1;
  WebKit::LocalAuthenticator::processClientExtensions((unint64_t)&result, v3, (uint64_t)&v68);
  if (v69 != -1) {
    ((void (*)(CFErrorRef *, uint64_t *))off_1EE9D28D8[v69])(error, &v68);
  }
  int v69 = -1;
  if (v84)
  {
    WebKit::LocalAuthenticator::receiveException((WebKit *)v3, (uint64_t)&result, 5);
    if (v84 && v83)
    {
      if (*(_DWORD *)v83 == 2) {
        WTF::StringImpl::destroy(v83, v30);
      }
      else {
        *(_DWORD *)v83 -= 2;
      }
    }
    goto LABEL_77;
  }
  uint64_t v53 = (__CFError *)*((void *)v4 + 2);
  *((void *)v4 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  error[0] = v53;
  int v67 = 0;
  uint64_t v54 = *(void *)(v3 + 24);
  if (!v54) {
    goto LABEL_76;
  }
  uint64_t v55 = *(void *)(v54 + 8);
  if (!v55)
  {
    LODWORD(v54) = 0;
    goto LABEL_76;
  }
  (*(void (**)(uint64_t, CFErrorRef *))(*(void *)v55 + 16))(v55, error);
  LODWORD(v54) = v67;
  if (v67 != -1) {
LABEL_76:
  }
    ((void (*)(char *, CFErrorRef *))off_1EE9D28E8[v54])(&v81, error);
LABEL_77:
  if (v42) {
    CFRelease(v42);
  }
LABEL_79:
  if (v65) {
    CFRelease(v65);
  }
  if (Signature) {
    CFRelease(Signature);
  }
  uint64_t v56 = v71;
  if (v71)
  {
    OSStatus v71 = 0;
    int v72 = 0;
    WTF::fastFree(v56, v30);
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v79);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v78);
  a1 = v77;
  CFArrayRef v77 = 0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 2) {
      a1 = (WTF::StringImpl *)WTF::StringImpl::destroy(a1, v57);
    }
    else {
      *(_DWORD *)a1 -= 2;
    }
  }
  if (v75 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(CFTypeRef *, char *))off_1EE9D28B8[v75])(&result, v74);
  }
  return a1;
}

void sub_198D7ACE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WebCore::AuthenticationExtensionsClientInputs *a16, WTF::ASCIILiteral *a17, CFTypeRef a18, char a19, uint64_t a20,uint64_t a21,char a22,int a23,int a24,WTF::StringImpl *a25,WTF *a26,int a27,int a28,char a29,int a30,int a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,WTF::StringImpl *a59,char a60)
{
  CFRelease(v60);
  if (cf) {
    CFRelease(cf);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (a18) {
    CFRelease(a18);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (a26) {
    WTF::fastFree(a26, v64);
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](a16);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a17);
  uint64_t v66 = a33;
  a33 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2) {
      WTF::StringImpl::destroy(v66, v65);
    }
    else {
      *(_DWORD *)v66 -= 2;
    }
  }
  if (a31 != -1) {
    ((void (*)(char *, char *))off_1EE9D28B8[a31])(&a58, &a29);
  }
  _Unwind_Resume(a1);
}

WebKit::NfcConnection *WTF::RefCounted<WebKit::NfcConnection>::deref(WebKit::NfcConnection *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::NfcConnection::~NfcConnection(result);
    return (WebKit::NfcConnection *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NfcConnection::*&)(void),WebKit::NfcConnection*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NfcService::*&)(void),WebKit::NfcService*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_198D7BE48(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebKit::NfcConnection>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKStringGetTypeID()
{
  return 21;
}

uint64_t WKStringCreateWithUTF8CString(WTF::String *a1, const char *a2)
{
  WTF::String::fromUTF8((uint64_t *)&v6, a1, a2);
  API::String::create(&v6, &v7);
  if (v7) {
    uint64_t v3 = *((void *)v7 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

uint64_t WKStringCreateWithUTF8CStringWithLength()
{
  WTF::String::fromUTF8();
  API::String::create(&v4, &v5);
  if (v5) {
    uint64_t v1 = *((void *)v5 + 1);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v4;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v0);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return v1;
}

BOOL WKStringIsEmpty(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 16);
  return !v1 || *(_DWORD *)(v1 + 4) == 0;
}

uint64_t WKStringGetLength(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 16);
  if (v1) {
    return *(unsigned int *)(v1 + 4);
  }
  else {
    return 0;
  }
}

uint64_t WKStringGetCharacters(void *a1, char *a2, unint64_t a3)
{
  if (a3 >= 0xFFFFFFFF) {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v4 = a3;
  }
  uint64_t v5 = *(void *)([a1 _apiObject] + 16);
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v5 + 4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(int8x16_t **)(v5 + 8);
  if (v6 <= v4) {
    uint64_t v4 = *(unsigned int *)(v5 + 4);
  }
  if ((*(unsigned char *)(v5 + 16) & 4) != 0)
  {
    unint64_t v8 = &a2[2 * v4];
    if (v4 >= 0x40)
    {
      unint64_t v9 = &a2[2 * (v4 & 0xFFFFFFC0)];
      long long v10 = 0uLL;
      do
      {
        v19.val[0] = *v7;
        int8x16_t v11 = v7[1];
        v20.val[0] = v7[2];
        int8x16_t v12 = v7[3];
        v7 += 4;
        int8x16_t v13 = v12;
        v20.val[1] = 0uLL;
        v21.val[0] = v11;
        v19.val[1] = 0uLL;
        uint64_t v14 = a2;
        vst2q_s8(v14, v19);
        v14 += 32;
        v21.val[1] = 0uLL;
        vst2q_s8(v14, v21);
        uint64_t v15 = a2 + 64;
        vst2q_s8(v15, v20);
        uint64_t v16 = a2 + 96;
        vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
        a2 += 128;
      }
      while (a2 != v9);
      a2 = v9;
    }
    while (a2 != v8)
    {
      __int16 v17 = v7->u8[0];
      uint64_t v7 = (int8x16_t *)((char *)v7 + 1);
      *(_WORD *)a2 = v17;
      a2 += 2;
    }
  }
  else if (v4)
  {
    if (v4 == 1)
    {
      *(_WORD *)a2 = v7->i16[0];
      return 1;
    }
    else
    {
      memcpy(a2, v7, 2 * v4);
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t WKStringGetMaximumUTF8CStringSize(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 16);
  if (v1) {
    return 3 * *(unsigned int *)(v1 + 4) + 1;
  }
  else {
    return 1;
  }
}

uint64_t WKStringGetUTF8CString(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = *(void *)([a1 _apiObject] + 16);
  if (!v4 || (*(unsigned char *)(v4 + 16) & 4) != 0)
  {
    WTF::Unicode::convert();
  }
  else
  {
    WTF::Unicode::convert();
    if (v6 == 1) {
      return 0;
    }
  }
  *(unsigned char *)(a2 + v7) = 0;
  return v7 + 1;
}

uint64_t WKStringGetUTF8CStringNonStrict(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = *(void *)([a1 _apiObject] + 16);
  if (!v4 || (*(unsigned char *)(v4 + 16) & 4) != 0) {
    WTF::Unicode::convert();
  }
  else {
    WTF::Unicode::convertReplacingInvalidSequences();
  }
  *(unsigned char *)(a2 + v6) = 0;
  return v6 + 1;
}

BOOL WKStringIsEqual(void *a1, void *a2)
{
  uint64_t v3 = *(void *)([a1 _apiObject] + 16);
  if (v3)
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 + 8);
    unint64_t v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0x100000000;
  }
  uint64_t v6 = *(void *)([a2 _apiObject] + 16);
  if (v6)
  {
    uint64_t v7 = *(unsigned __int8 **)(v6 + 8);
    unint64_t v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0x100000000;
  }

  return WTF::operator==(v4, v5, v7, v8);
}

BOOL WKStringIsEqualToUTF8CString(void *a1, WTF::String *a2)
{
  uint64_t v4 = *(void *)([a1 _apiObject] + 16);
  if (v4)
  {
    unint64_t v5 = *(unsigned __int8 **)(v4 + 8);
    unint64_t v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0x100000000;
  }
  WTF::String::fromUTF8((uint64_t *)&v13, a2, v3);
  if (v13)
  {
    uint64_t v7 = (unsigned __int8 *)*((void *)v13 + 1);
    unint64_t v8 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0x100000000;
  }
  BOOL v10 = WTF::operator==(v5, v6, v7, v8);
  int8x16_t v11 = v13;
  int8x16_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return v10;
}

BOOL WKStringIsEqualToUTF8CStringIgnoringCase(void *a1, WTF::String *a2)
{
  uint64_t v4 = *(void *)([a1 _apiObject] + 16);
  if (v4)
  {
    unint64_t v5 = *(unsigned __int16 **)(v4 + 8);
    unint64_t v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0x100000000;
  }
  WTF::String::fromUTF8((uint64_t *)&v13, a2, v3);
  if (v13)
  {
    uint64_t v7 = (unsigned __int8 *)*((void *)v13 + 1);
    unint64_t v8 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0x100000000;
  }
  v15[0] = v5;
  v15[1] = (unsigned __int16 *)v6;
  v14[0] = v7;
  v14[1] = (unsigned __int8 *)v8;
  BOOL v10 = WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(v15, v14);
  int8x16_t v11 = v13;
  int8x16_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return v10;
}

uint64_t WKStringCreateWithJSString(OpaqueJSString *a1)
{
  if (a1)
  {
    OpaqueJSString::string((uint64_t *)&v5, a1);
    API::String::create(&v5, &v6);
    uint64_t v2 = v5;
    unint64_t v5 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v1);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
    uint64_t v3 = v6;
    if (!v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = (WebKit *)API::Object::newObject(0x18uLL, 21);
    *(void *)uint64_t v3 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v3);
    *(void *)uint64_t v3 = &unk_1EE9B53D0;
    *((void *)v3 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  }
  return *((void *)v3 + 1);
}

uint64_t WKStringCopyJSString(JSC *a1)
{
  uint64_t v2 = (WebCore *)JSC::initialize(a1);
  WebCore::populateJITOperations(v2);
  if (a1) {
    [(JSC *)a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  OpaqueJSString::tryCreate();
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v6;
}

uint64_t WKGetTypeID(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)[a1 _apiObject] + 16);

  return v1();
}

void *WKRetain(void *a1)
{
  return a1;
}

void WKRelease(void *a1)
{
  uint64_t v1 = *(const void **)([a1 _apiObject] + 8);

  CFRelease(v1);
}

uint64_t WKURLGetTypeID()
{
  return 24;
}

uint64_t WKURLCreateWithUTF8CString(WTF::String *a1, const char *a2)
{
  WTF::String::fromUTF8((uint64_t *)&v8, a1, a2);
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  uint64_t v4 = v8;
  if (v8)
  {
    int v5 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    *((void *)v2 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v4;
    *((void *)v2 + 3) = 0;
    uint64_t v6 = *((void *)v2 + 1);
    unint64_t v8 = 0;
    if (v5) {
      *(_DWORD *)uint64_t v4 = v5;
    }
    else {
      WTF::StringImpl::destroy(v4, v3);
    }
  }
  else
  {
    *((void *)v2 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
    *((void *)v2 + 3) = 0;
    return *((void *)v2 + 1);
  }
  return v6;
}

uint64_t WKURLCreateWithBaseURL(void *a1, WTF::String *a2)
{
  if (a1) {
    uint64_t v3 = (API::URL *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  WTF::String::fromUTF8((uint64_t *)&v12, a2, (const char *)a2);
  API::URL::parseURLIfNecessary(v3);
  uint64_t v4 = *((void *)v3 + 3);
  int v5 = (_DWORD **)WTF::fastMalloc((WTF *)0x28);
  MEMORY[0x19972E8B0](v5, v4, &v12, 0);
  uint64_t v6 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v6 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v6);
  *(void *)uint64_t v6 = &unk_1EE9B53A8;
  unint64_t v8 = *v5;
  if (*v5) {
    *v8 += 2;
  }
  *((void *)v6 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v8;
  *((void *)v6 + 3) = v5;
  uint64_t v9 = *((void *)v6 + 1);
  BOOL v10 = v12;
  int8x16_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return v9;
}

uint64_t WKURLCopyString(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKURLIsEqual(void *a1, void **a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = (API::URL *)[a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2) {
LABEL_3:
  }
    uint64_t v2 = (void **)[v2 _apiObject];
LABEL_4:
  API::URL::parseURLIfNecessary(v3);
  uint64_t v4 = (WTF **)*((void *)v3 + 3);
  API::URL::parseURLIfNecessary((API::URL *)v2);
  uint64_t v6 = *v4;
  uint64_t v7 = (const WTF::StringImpl *)*v2[3];

  return WTF::equal(v6, v7, v5);
}

uint64_t WKURLCopyHostName(void *a1)
{
  if (a1) {
    uint64_t v1 = (WTF::URL **)[a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::host(v1[3]);
  if ((v2 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  API::String::create(&v7);
  if (v7) {
    uint64_t v4 = *((void *)v7 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

uint64_t WKURLCopyScheme(void *a1)
{
  if (a1) {
    uint64_t v1 = (WTF::URL **)[a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::protocol(v1[3]);
  if ((v2 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  API::String::create(&v7);
  if (v7) {
    uint64_t v4 = *((void *)v7 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

uint64_t WKURLCopyPath(void *a1)
{
  if (a1) {
    uint64_t v1 = (WTF::URL **)[a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::path(v1[3]);
  if ((v2 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  API::String::create(&v7);
  if (v7) {
    uint64_t v4 = *((void *)v7 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

uint64_t WKURLCopyLastPathComponent(void *a1)
{
  if (a1) {
    uint64_t v1 = (WTF::URL **)[a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::lastPathComponent(v1[3]);
  if ((v2 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  API::String::create(&v7);
  if (v7) {
    uint64_t v4 = *((void *)v7 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

uint64_t WKURLRequestGetTypeID()
{
  return 25;
}

uint64_t WKURLRequestCreateWithWKURL(WTF::StringImpl **a1)
{
  if (a1) {
    a1 = (WTF::StringImpl **)[a1 _apiObject];
  }
  WTF::URL::URL((uint64_t)v7, a1 + 2);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v8, (const String *)v7, 0);
  CFTypeRef cf = 0;
  uint64_t v1 = API::Object::newObject(0xD8uLL, 25);
  *(void *)uint64_t v1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v1);
  *(void *)uint64_t v1 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v1 + 16), v8);
  uint64_t v2 = *(void *)(v1 + 8);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
  int v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v2;
}

API::URL *WKURLRequestCopyURL(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = (const WTF::String *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 16));
  if (!*(void *)v1) {
    return 0;
  }
  uint64_t v2 = v1;
  CFTypeRef v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  CFTypeRef result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

API::URL *WKURLRequestCopyFirstPartyForCookies(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  PartyForCookies = (const WTF::String *)WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)(a1 + 16));
  if (!*(void *)PartyForCookies) {
    return 0;
  }
  uint64_t v2 = PartyForCookies;
  CFTypeRef v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  CFTypeRef result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKURLRequestCopyHTTPMethod(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(a1 + 16));
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKURLRequestCopySettingHTTPBody(String *a1, void *a2)
{
  if (a1) {
    a1 = (String *)[(String *)a1 _apiObject];
  }
  WebCore::ResourceRequest::ResourceRequest(v8, a1 + 2);
  [a2 _apiObject];
  [a2 _apiObject];
  WebCore::FormData::create();
  WebCore::ResourceRequestBase::setHTTPBody();
  if (v7) {
    WTF::RefCounted<WebCore::FormData>::deref(v7);
  }
  uint64_t v3 = API::Object::newObject(0xD8uLL, 25);
  *(void *)uint64_t v3 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v3);
  *(void *)uint64_t v3 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v3 + 16), (const String *)v8);
  uint64_t v4 = *(void *)(v3 + 8);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
  return v4;
}

uint64_t WKURLResponseGetTypeID()
{
  return 26;
}

API::URL *WKURLResponseCopyURL(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = (const WTF::String *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(a1 + 16));
  if (!*(void *)v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  CFTypeRef result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKURLResponseCopyMIMEType(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(a1 + 16));
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKURLResponseHTTPStatusCode(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = (WebCore::ResourceResponseBase *)(a1 + 16);
  return WebCore::ResourceResponseBase::httpStatusCode(v2);
}

uint64_t WKURLResponseCopySuggestedFilename(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::ResourceResponseBase::suggestedFilename((uint64_t *)&v5, (WebCore::ResourceResponseBase *)(a1 + 16));
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  CFTypeRef v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKURLResponseIsAttachment(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = a1 + 16;
  return MEMORY[0x1F4175600](v2);
}

uint64_t WKURLResponseGetExpectedContentLength(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  return WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)(a1 + 16));
}

uint64_t WKUserContentURLPatternGetTypeID()
{
  return 27;
}

uint64_t WKUserContentURLPatternCreate(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  uint64_t v1 = (API::UserContentURLPattern *)API::Object::newObject(0x38uLL, 27);
  uint64_t v2 = API::UserContentURLPattern::UserContentURLPattern(v1, (const WTF::String *)&v7);
  if (v2) {
    uint64_t v4 = *((void *)v2 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

uint64_t WKUserContentURLPatternCopyHost(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKUserContentURLPatternCopyScheme(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

BOOL WKUserContentURLPatternIsValid(void *a1)
{
  return *(unsigned char *)([a1 _apiObject] + 40) == 0;
}

uint64_t WKUserContentURLPatternMatchesURL(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
LABEL_7:
  int8x16_t v11 = v4;
  v12[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v12);
  MEMORY[0x19972E8B0](v13, v12, &v11, 0);
  uint64_t v6 = WebCore::UserContentURLPattern::matches<WTF::URL>((WebCore::UserContentURLPattern *)(v3 + 16), (const WTF::URL *)v13);
  uint64_t v7 = v13[0];
  v13[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unint64_t v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v11;
  int8x16_t v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v6;
}

uint64_t WKUserContentURLPatternMatchesSubdomains(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 41);
}

uint64_t WKErrorCreateWithCFError(uint64_t a1)
{
  MEMORY[0x199731580](&v10, a1);
  uint64_t v1 = (API::Error *)API::Object::newObject(0x60uLL, 10);
  uint64_t v2 = API::Error::Error(v1, (const WebCore::ResourceError *)&v10);
  if (v2) {
    uint64_t v4 = *((void *)v2 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = v12;
  int8x16_t v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v11;
  int8x16_t v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unint64_t v8 = v10;
  BOOL v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v3);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v4;
}

const void *WKErrorCopyCFError(uint64_t a1, void *a2)
{
  if (a2) {
    uint64_t v2 = [a2 _apiObject];
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (const void *)WebCore::ResourceError::nsError((WebCore::ResourceError *)(v2 + 16));
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  return v4;
}

CFTypeRef WKImageCreateCGImage(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)([a1 _apiObject] + 16);
  if (!v1) {
    return 0;
  }
  (*(void (**)(WebCore::NativeImage **__return_ptr))(*(void *)v1 + 48))(&v15);
  if (!v15) {
    return 0;
  }
  uint64_t v2 = (CFTypeRef *)WebCore::NativeImage::platformImage(v15);
  CFTypeRef v4 = *v2;
  if (*v2) {
    CFRetain(*v2);
  }
  CFTypeRef v5 = v15;
  uint64_t v15 = 0;
  if (v5)
  {
    char v6 = 0;
    uint64_t v7 = *((void *)v5 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    int v9 = 1;
    uint64_t v10 = v8 - 1;
    *(void *)(v7 + 8) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v14 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      BOOL v12 = v14 != 0;
    }
    else
    {
      uint64_t v11 = 0;
      BOOL v12 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v10) {
        return v4;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v10) {
        return v4;
      }
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    if (!v12) {
      WTF::fastFree((WTF *)v7, v3);
    }
  }
  return v4;
}

uint64_t WKImageCreateFromCGImage(const void *a1, char a2)
{
  if (!a1) {
    return 0;
  }
  CFRetain(a1);
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebCore::NativeImage::create();
  CFRelease(a1);
  uint64_t v21 = WebCore::NativeImage::size(v22);
  uint64_t v3 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v21);
  WebKit::WebImage::create((int32x2_t *)&v21, a2 & 1, v3, 0, (WebKit::WebImage *)&v20);
  uint64_t v4 = v20;
  uint64_t v5 = *(void *)(v20 + 16);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v20 + 16) + 16))(*(void *)(v20 + 16));
    (*(void (**)(void))(*(void *)v6 + 280))();
    WebCore::GraphicsContext::drawNativeImage();
    if (v20)
    {
      uint64_t v8 = *(void *)(v20 + 8);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = 0;
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v8 = 0;
LABEL_8:
  int v9 = v22;
  uint64_t v22 = 0;
  if (v9)
  {
    char v10 = 0;
    uint64_t v11 = *((void *)v9 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10) {
      MEMORY[0x19972E8D0](v11);
    }
    uint64_t v12 = *(void *)(v11 + 8);
    int v13 = 1;
    uint64_t v14 = v12 - 1;
    *(void *)(v11 + 8) = v12 - 1;
    if (v12 == 1)
    {
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      *(void *)(v11 + 24) = 0;
      BOOL v16 = v18 != 0;
    }
    else
    {
      uint64_t v15 = 0;
      BOOL v16 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (v14) {
        return v8;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14) {
        return v8;
      }
    }
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    if (!v16) {
      WTF::fastFree((WTF *)v11, v7);
    }
  }
  return v8;
}

uint64_t WKImageCreateDataURLFromImage()
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::dataURL();
  WTF::String::utf8();
  if (v5) {
    uint64_t v1 = (WTF *)((char *)v5 + 16);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v3 = WKStringCreateWithUTF8CString(v1, v0);
  if (v5)
  {
    if (*(_DWORD *)v5 == 1) {
      WTF::fastFree(v5, v2);
    }
    else {
      --*(_DWORD *)v5;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return v3;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(unsigned __int16 **a1, unsigned __int8 **a2)
{
  unint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 != *((_DWORD *)a2 + 2)) {
    return 0;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (!*((unsigned char *)a1 + 12))
  {
    if (*((unsigned char *)a2 + 12))
    {
      if (!v2) {
        return 1;
      }
      if ((*v3 | (32 * (*v3 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *v4))
      {
        uint64_t v9 = 1;
        do
        {
          unint64_t v6 = v9;
          if (v2 == v9) {
            break;
          }
          int v10 = v3[v9] | (32 * (v3[v9] - 65 < 0x1A));
          ++v9;
        }
        while (v10 == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v4[v6]));
        return v6 >= v2;
      }
    }
    else
    {
      if (!v2) {
        return 1;
      }
      if ((*v3 | (32 * (*v3 - 65 < 0x1A))) == (*(unsigned __int16 *)v4 | (32
                                                                                       * (*(unsigned __int16 *)v4
                                                                                        - 65 < 0x1A))))
      {
        uint64_t v16 = 1;
        do
        {
          unint64_t v17 = v16;
          if (v2 == v16) {
            break;
          }
          int v18 = v3[v16] | (32 * (v3[v16] - 65 < 0x1A));
          ++v16;
        }
        while (v18 == (*(unsigned __int16 *)&v4[2 * v17] | (32
                                                           * (*(unsigned __int16 *)&v4[2 * v17] - 65 < 0x1A))));
        return v17 >= v2;
      }
    }
    return 0;
  }
  if (!*((unsigned char *)a2 + 12))
  {
    if (!v2) {
      return 1;
    }
    if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)v3))
    {
      uint64_t v11 = 1;
      do
      {
        unint64_t v6 = v11;
        if (v2 == v11) {
          break;
        }
        int v12 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v3 + v11));
        int v13 = *(unsigned __int16 *)&v4[2 * v11] | (32 * (*(unsigned __int16 *)&v4[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v13 == v12);
      return v6 >= v2;
    }
    return 0;
  }
  if (!v2) {
    return 1;
  }
  if (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)v3) != *(unsigned __int8 *)(MEMORY[0x1E4F30990]
                                                                                                + *v4))
    return 0;
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v2 == v5) {
      break;
    }
    int v7 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v3 + v5));
    int v8 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v4[v5++]);
  }
  while (v7 == v8);
  return v6 >= v2;
}

void API::URL::parseURLIfNecessary(API::URL *this)
{
  int v1 = this + 24;
  if (!*((void *)this + 3))
  {
    uint64_t v3 = (WTF::StringImpl **)((char *)this + 16);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
    uint64_t v5 = WTF::URL::URL(v4, v3);
    unint64_t v6 = (WTF::StringImpl **)*((void *)this + 3);
    *((void *)this + 3) = v5;
    if (v6)
    {
      std::default_delete<WTF::URL>::operator()[abi:sn180100](v1, v6);
    }
  }
}

void sub_198D7DD78(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CcidService *WebKit::MockCcidService::MockCcidService(WebKit::CcidService *a1, WebKit::AuthenticatorTransportServiceObserver *a2, unsigned char *a3)
{
  uint64_t v5 = WebKit::CcidService::CcidService(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE9D2D60;
  *((unsigned char *)v5 + 88) = *a3;
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)v5 + 96, (uint64_t)(a3 + 8));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 144, (uint64_t)(a3 + 56));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 184, (uint64_t)(a3 + 96));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)a1 + 224, (uint64_t)(a3 + 136));
  return a1;
}

void sub_198D7DE64(_Unwind_Exception *a1, void *a2)
{
  if (*((unsigned char *)v2 + 216)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 192, a2);
  }
  if (*((unsigned char *)v2 + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::CcidService::~CcidService(v2);
  _Unwind_Resume(a1);
}

void WebKit::MockCcidService::platformStartDiscovery(WebKit::MockCcidService *this)
{
  if (*((unsigned char *)this + 240))
  {
    unint64_t v2 = [_WKMockTKSmartCard alloc];
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v3 = (atomic_uint *)*((void *)this + 1);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
    CFTypeRef cf = v3;
    uint64_t v5 = [(_WKMockTKSmartCard *)v2 initWithService:&cf];
    unint64_t v6 = (unsigned int *)cf;
    CFTypeRef cf = 0;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
    CFTypeRef cf = v5;
    WebKit::CcidService::onValidCard((uint64_t)this, (uint64_t *)&cf);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_198D7DF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::MockLocalConnection::verifyUser(WTF::RunLoop *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WTF::RunLoop::main(a1);
  char v20 = *((unsigned char *)a1 + 16);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](&v21, (uint64_t)a1 + 24);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v25, (uint64_t)a1 + 72);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)v29, (uint64_t)a1 + 112);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](&v34, (uint64_t)a1 + 152);
  uint64_t v8 = *a6;
  *a6 = 0;
  uint64_t v37 = v8;
  uint64_t v9 = WTF::fastMalloc((WTF *)0xB0);
  *(void *)uint64_t v9 = &unk_1EE9D2F48;
  *(unsigned char *)(v9 + 8) = v20;
  *(unsigned char *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 56) = 0;
  if (v24)
  {
    *(_WORD *)(v9 + 16) = v21;
    *(_OWORD *)(v9 + 24) = v22;
    *(void *)(v9 + 40) = v23;
    uint64_t v10 = *((void *)&v23 + 1);
    long long v22 = 0u;
    long long v23 = 0u;
    *(void *)(v9 + 48) = v10;
    *(unsigned char *)(v9 + 56) = 1;
  }
  *(unsigned char *)(v9 + 64) = 0;
  *(unsigned char *)(v9 + 96) = 0;
  if (v28)
  {
    *(void *)(v9 + 64) = v25;
    uint64_t v11 = v26;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)(v9 + 7WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v11;
    int v12 = *(_DWORD *)&v27[7];
    *(void *)(v9 + 80) = *(void *)v27;
    *(_DWORD *)(v9 + 87) = v12;
    *(unsigned char *)(v9 + 96) = 1;
  }
  *(unsigned char *)(v9 + 104) = 0;
  *(unsigned char *)(v9 + 136) = 0;
  if (v33)
  {
    *(unsigned char *)(v9 + 104) = v29[0];
    *(void *)(v9 + 11WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v30;
    uint64_t v13 = v31;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)(v9 + 120) = v13;
    *(_WORD *)(v9 + 128) = v32;
    *(unsigned char *)(v9 + 136) = 1;
  }
  *(unsigned char *)(v9 + 144) = 0;
  *(unsigned char *)(v9 + 160) = 0;
  if (v36)
  {
    *(void *)(v9 + 144) = v34;
    uint64_t v14 = v35;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)(v9 + 15WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v14;
    *(unsigned char *)(v9 + 160) = 1;
  }
  uint64_t v15 = v37;
  uint64_t v37 = 0;
  *(void *)(v9 + 168) = v15;
  uint64_t v38 = v9;
  WTF::RunLoop::dispatch();
  uint64_t v17 = v38;
  uint64_t v38 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v37;
  uint64_t v37 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v36) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v16);
  }
  if (v33) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v16);
  }
  if (v28) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v16);
  }
  return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, (WTF::StringImpl *)v16);
}

void sub_198D7E224(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  uint64_t v34 = *(void *)(v32 - 56);
  *(void *)(v32 - 56) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = a29;
  a29 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (a28) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31, a2);
  }
  if (a25) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  }
  if (a20) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v29, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::MockLocalConnection::verifyUser(WTF::RunLoop *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::RunLoop::main(a1);
  char v18 = *((unsigned char *)a1 + 16);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](&v19, (uint64_t)a1 + 24);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v23, (uint64_t)a1 + 72);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)v27, (uint64_t)a1 + 112);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](&v32, (uint64_t)a1 + 152);
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v35 = v6;
  uint64_t v7 = WTF::fastMalloc((WTF *)0xB0);
  *(void *)uint64_t v7 = &unk_1EE9D2F70;
  *(unsigned char *)(v7 + 8) = v18;
  *(unsigned char *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 56) = 0;
  if (v22)
  {
    *(_WORD *)(v7 + 16) = v19;
    *(_OWORD *)(v7 + 24) = v20;
    *(void *)(v7 + 40) = v21;
    uint64_t v8 = *((void *)&v21 + 1);
    long long v20 = 0u;
    long long v21 = 0u;
    *(void *)(v7 + 48) = v8;
    *(unsigned char *)(v7 + 56) = 1;
  }
  *(unsigned char *)(v7 + 64) = 0;
  *(unsigned char *)(v7 + 96) = 0;
  if (v26)
  {
    *(void *)(v7 + 64) = v23;
    uint64_t v9 = v24;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)(v7 + 7WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v9;
    int v10 = *(_DWORD *)&v25[7];
    *(void *)(v7 + 80) = *(void *)v25;
    *(_DWORD *)(v7 + 87) = v10;
    *(unsigned char *)(v7 + 96) = 1;
  }
  *(unsigned char *)(v7 + 104) = 0;
  *(unsigned char *)(v7 + 136) = 0;
  if (v31)
  {
    *(unsigned char *)(v7 + 104) = v27[0];
    *(void *)(v7 + 11WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v28;
    uint64_t v11 = v29;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    *(void *)(v7 + 120) = v11;
    *(_WORD *)(v7 + 128) = v30;
    *(unsigned char *)(v7 + 136) = 1;
  }
  *(unsigned char *)(v7 + 144) = 0;
  *(unsigned char *)(v7 + 160) = 0;
  if (v34)
  {
    *(void *)(v7 + 144) = v32;
    uint64_t v12 = v33;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)(v7 + 15WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v12;
    *(unsigned char *)(v7 + 160) = 1;
  }
  uint64_t v13 = v35;
  uint64_t v35 = 0;
  *(void *)(v7 + 168) = v13;
  uint64_t v36 = v7;
  WTF::RunLoop::dispatch();
  uint64_t v15 = v36;
  uint64_t v36 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v35;
  uint64_t v35 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (v34) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v14);
  }
  if (v31) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v14);
  }
  if (v26) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v14);
  }
  return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, (WTF::StringImpl *)v14);
}

void sub_198D7E55C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  uint64_t v34 = *(void *)(v32 - 56);
  *(void *)(v32 - 56) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = a29;
  a29 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (a28) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31, a2);
  }
  if (a25) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  }
  if (a20) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v29, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

void WebKit::MockLocalConnection::createCredentialPrivateKey(WebKit::MockLocalConnection *this@<X0>, const WTF::String *a2@<X3>, NSData *a3@<X4>, SecKeyRef *a4@<X8>)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *MEMORY[0x1E4F3B740];
  uint64_t v12 = *MEMORY[0x1E4F3B6D8];
  v28[0] = *MEMORY[0x1E4F3B718];
  v28[1] = v12;
  uint64_t v13 = *MEMORY[0x1E4F3B6E8];
  v29[0] = v11;
  v29[1] = v13;
  _OWORD v28[2] = *MEMORY[0x1E4F3B708];
  _OWORD v29[2] = &unk_1EEA52EA0;
  CFDictionaryRef v14 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:3];
  CFErrorRef v25 = 0;
  id v15 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  if (*((unsigned char *)this + 64))
  {
    uint64_t v6 = v15;
    if (*((void *)this + 4))
    {
      uint64_t v16 = (__CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v16 = &stru_1EEA10550;
LABEL_4:
  CFDataRef v17 = (const __CFData *)objc_msgSend(v6, "initWithBase64EncodedString:options:", v16, 1, v25);
  SecKeyRef v18 = SecKeyCreateWithData(v17, v14, &v25);
  if (v17) {
    CFRelease(v17);
  }
  if (v25) {
    goto LABEL_10;
  }
  uint64_t v19 = *MEMORY[0x1E4F3B978];
  v26[0] = *MEMORY[0x1E4F3BD48];
  v26[1] = v19;
  uint64_t v20 = *MEMORY[0x1E4F3B9A0];
  v27[0] = v18;
  v27[1] = v20;
  void v26[2] = *MEMORY[0x1E4F3B788];
  long long v21 = *(void *)a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
  uint64_t v22 = *MEMORY[0x1E4F3B5E0];
  void v27[2] = v21;
  v27[3] = a3;
  uint64_t v23 = *MEMORY[0x1E4F3B558];
  v26[3] = v22;
  v26[4] = v23;
  uint64_t v24 = *MEMORY[0x1E4F3B570];
  v26[5] = *MEMORY[0x1E4F3BD08];
  float v27[4] = v24;
  v27[5] = MEMORY[0x1E4F1CC38];
  if (SecItemAdd((CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:v26 count:6], 0))
  {
LABEL_10:
    *a4 = 0;
    if (v18) {
      CFRelease(v18);
    }
  }
  else
  {
    *a4 = v18;
  }
}

void sub_198D7E850(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::MockLocalConnection::filterResponses(void *result, unsigned int *a2)
{
  if (*((unsigned char *)result + 64))
  {
    unint64_t v2 = result;
    uint64_t v3 = result[7];
    if (v3 && *(_DWORD *)(v3 + 4))
    {
      uint64_t v5 = *(WebCore::AuthenticatorResponse ***)a2;
      if (a2[3])
      {
        do
        {
          uint64_t v6 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*v5);
          JSC::ArrayBuffer::span(v6);
          WTF::base64EncodeToString();
          char v9 = WTF::equal(v17, (const WTF::StringImpl *)v2[7], v7);
          int v10 = v17;
          CFDataRef v17 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              WTF::StringImpl::destroy(v10, v8);
              if (v9) {
                break;
              }
              goto LABEL_11;
            }
            *(_DWORD *)v10 -= 2;
          }
          if (v9) {
            break;
          }
LABEL_11:
          ++v5;
        }
        while (v5 != (WebCore::AuthenticatorResponse **)(*(void *)a2 + 8 * a2[3]));
      }
      uint64_t v11 = *v5;
      *((_DWORD *)v11 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *((_DWORD *)*v5 + 2) + 1;
      CFDataRef v17 = v11;
      CFTypeRef result = WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, 0);
      uint64_t v12 = a2[3];
      if (v12 == a2[2])
      {
        uint64_t v13 = (WebCore::AuthenticatorResponse **)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a2, v12 + 1, (unint64_t)&v17);
        uint64_t v14 = a2[3];
        id v15 = *(WebCore::AuthenticatorResponse ***)a2;
        uint64_t v16 = *v13;
        WTF::StringImpl *v13 = 0;
        v15[v14] = v16;
        CFTypeRef result = v17;
        a2[3] = v14 + 1;
        CFDataRef v17 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1) {
            return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
          else {
            --*((_DWORD *)result + 2);
          }
        }
      }
      else
      {
        *(void *)(*(void *)a2 + 8 * v1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v11;
        a2[3] = v12 + 1;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_198D7E9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 2) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)a10 + 8))(a10);
    }
    else {
      --*((_DWORD *)a10 + 2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MockLocalConnection::getExistingCredentials(const WTF::String *a1@<X1>, void *a2@<X8>)
{
  v16[7] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *MEMORY[0x1E4F3B9A0];
  uint64_t v5 = *MEMORY[0x1E4F3B6D8];
  v15[0] = *MEMORY[0x1E4F3B978];
  v15[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F3B6E8];
  v16[0] = v4;
  v16[1] = v6;
  uint64_t v7 = *MEMORY[0x1E4F3B878];
  v16[2] = *MEMORY[0x1E4F3B880];
  uint64_t v8 = *MEMORY[0x1E4F3B788];
  void v15[2] = v7;
  v15[3] = v8;
  if (*(void *)a1) {
    char v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v9 = &stru_1EEA10550;
  }
  uint64_t v10 = *MEMORY[0x1E4F3BB80];
  void v15[4] = *MEMORY[0x1E4F3BC68];
  v15[5] = v10;
  v15[6] = *MEMORY[0x1E4F3BD08];
  v16[3] = v9;
  v16[4] = MEMORY[0x1E4F1CC38];
  v16[5] = *MEMORY[0x1E4F3BB88];
  _OWORD v16[6] = MEMORY[0x1E4F1CC38];
  uint64_t v14 = 0;
  OSStatus v11 = SecItemCopyMatching((CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:7], (CFTypeRef *)&v14);
  if (v11 != -25300 && v11)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v12 = v14;
    uint64_t v13 = (const void *)[v14 sortedArrayUsingComparator:&__block_literal_global_28];
    *a2 = v13;
    if (v13) {
      CFRetain(v13);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
}

void sub_198D7EBF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit19MockLocalConnection22getExistingCredentialsERKN3WTF6StringE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F3B790];
  uint64_t v5 = (void *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F3B790]];
  uint64_t v6 = [a2 objectForKeyedSubscript:v4];

  return [v5 compare:v6];
}

WebKit::LocalService *WebKit::MockLocalService::MockLocalService(WebKit::LocalService *a1, WebKit::AuthenticatorTransportServiceObserver *a2, unsigned char *a3)
{
  uint64_t v5 = WebKit::LocalService::LocalService(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE9D2E00;
  *((unsigned char *)v5 + 24) = *a3;
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)v5 + 32, (uint64_t)(a3 + 8));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 80, (uint64_t)(a3 + 56));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 120, (uint64_t)(a3 + 96));
  uint64_t v6 = (WebKit *)std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)a1 + 160, (uint64_t)(a3 + 136));
  uint64_t v7 = (objc_class *)WebKit::getASCWebKitSPISupportClass[0](v6);
  ClassMethod = class_getClassMethod(v7, sel_shouldUseAlternateCredentialStore);
  method_setImplementation(ClassMethod, (IMP)ACSWebKitSPIMockSupportMethod);
  return a1;
}

void sub_198D7ED48(_Unwind_Exception *a1, void *a2)
{
  if (*((unsigned char *)v2 + 152)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 128, a2);
  }
  if (*((unsigned char *)v2 + 112)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v2);
  _Unwind_Resume(a1);
}

uint64_t ACSWebKitSPIMockSupportMethod(objc_object *a1, objc_selector *a2)
{
  return 0;
}

uint64_t WebKit::MockLocalService::platformStartDiscovery(WebKit::MockLocalService *this)
{
  return *((unsigned __int8 *)this + 72);
}

unsigned char *WebKit::MockLocalService::createLocalConnection@<X0>(WebKit::MockLocalService *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xB0);
  *(void *)uint64_t v4 = &unk_1EE9D2D98;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = *((unsigned char *)this + 24);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(v4 + 24), (uint64_t)this + 32);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100](v4 + 72, (uint64_t)this + 80);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100](v4 + 112, (uint64_t)this + 120);
  CFTypeRef result = std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(v4 + 152), (uint64_t)this + 160);
  *a2 = v4;
  return result;
}

void sub_198D7EE64(_Unwind_Exception *a1, void *a2)
{
  if (*(unsigned char *)(v2 + 144)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 120, a2);
  }
  if (*(unsigned char *)(v2 + 104)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::LocalConnection::~LocalConnection((id *)v2);
  WTF::fastFree(v6, v7);
  _Unwind_Resume(a1);
}

void sub_198D7F030(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::NfcService *WebKit::MockNfcService::MockNfcService(WebKit::NfcService *a1, WebKit::AuthenticatorTransportServiceObserver *a2, unsigned char *a3)
{
  uint64_t v5 = WebKit::NfcService::NfcService(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE9D2E40;
  *((unsigned char *)v5 + 7WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = *a3;
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)v5 + 80, (uint64_t)(a3 + 8));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 128, (uint64_t)(a3 + 56));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 168, (uint64_t)(a3 + 96));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((unsigned char *)a1 + 208, (uint64_t)(a3 + 136));
  return a1;
}

void sub_198D7F1BC(_Unwind_Exception *a1, void *a2)
{
  if (*((unsigned char *)v2 + 200)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 176, a2);
  }
  if (*((unsigned char *)v2 + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::NfcService::~NfcService(v2);
  _Unwind_Resume(a1);
}

void WebKit::MockNfcService::platformStartDiscovery(WebKit::NfcConnection **this)
{
  if (*((unsigned char *)this + 200))
  {
    uint64_t v2 = (objc_class *)WebKit::getNFReaderSessionClass[0]((WebKit *)this);
    InstanceMethod = class_getInstanceMethod(v2, sel_setDelegate_);
    uint64_t v5 = (objc_class *)WebKit::getNFReaderSessionClass[0](v4);
    uint64_t v6 = class_getInstanceMethod(v5, sel_connectTag_);
    if (*((unsigned char *)this + 200))
    {
      if (*((unsigned char *)this + 168) == 3) {
      else
      }
      uint64_t v8 = (WebKit *)method_setImplementation(v6, (IMP)v7);
      char v9 = (objc_class *)WebKit::getNFReaderSessionClass[0](v8);
      uint64_t v10 = class_getInstanceMethod(v9, sel_transceive_);
      uint64_t v12 = (objc_class *)WebKit::getNFReaderSessionClass[0](v11);
      uint64_t v13 = class_getInstanceMethod(v12, sel_stopPolling);
      id v15 = (objc_class *)WebKit::getNFReaderSessionClass[0](v14);
      uint64_t v16 = class_getInstanceMethod(v15, sel_startPollingWithError_);
      SecKeyRef v18 = (const void *)[objc_alloc((Class)WebKit::getNFReaderSessionClass[0](v17)) initWithUIType:0];
      uint64_t v19 = v18;
      CFTypeRef cf = v18;
      if (v18) {
        CFRetain(v18);
      }
      WebKit::NfcConnection::create((uint64_t *)&cf, (uint64_t)this, (uint64_t *)&v22);
      uint64_t v20 = this[4];
      this[4] = v22;
      if (v20) {
        WTF::RefCounted<WebKit::NfcConnection>::deref(v20);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v19)
      {
        CFRelease(v19);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_198D7F3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebKit::anonymous namespace'::NFReaderSessionSetDelegate(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t WebKit::anonymous namespace'::NFReaderSessionConnectTagFail()
{
  return 0;
}

uint64_t WebKit::anonymous namespace'::NFReaderSessionConnectTag()
{
  return 1;
}

id WebKit::anonymous namespace'::NFReaderSessionTransceive(WebKit::_anonymous_namespace_ *this, objc_object *a2, objc_selector *a3, NSData *a4)
{
    return 0;
    goto LABEL_17;
    return 0;
  id result = objc_alloc(MEMORY[0x1E4F1C9B8]);
  if (!*(unsigned char *)(v5 + 200)) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v5 + 188))
  {
    uint64_t v4 = result;
    if (!**(void **)(v5 + 176)) {
      goto LABEL_18;
    }
    for (int i = (__CFString *)WTF::StringImpl::operator NSString *(); ; int i = &stru_1EEA10550)
    {
      uint64_t v8 = [v4 initWithBase64EncodedString:i options:1];
      if (*(unsigned char *)(v5 + 200)) {
        break;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      ;
    }
    uint64_t v10 = (const void *)v8;
    OSStatus v11 = *(WTF::StringImpl ***)(v5 + 176);
    uint64_t v12 = *v11;
    WebKit *v11 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    memmove(v11, v11 + 1, *(void *)(v5 + 176) + 8 * *(unsigned int *)(v5 + 188) - (void)(v11 + 1));
    --*(_DWORD *)(v5 + 188);
    uint64_t v13 = (void *)CFMakeCollectable(v10);
    return v13;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WebKit::anonymous namespace'::NFReaderSessionStopPolling(WebKit::_anonymous_namespace_ *this, objc_object *a2, objc_selector *a3)
{
    return v3 != 0;
  {
    return v3 != 0;
  }
  __break(1u);
  return result;
}

BOOL WebKit::anonymous namespace'::NFReaderSessionStartPollingWithError(WebKit::_anonymous_namespace_ *this, objc_object *a2, objc_selector *a3, NSError **a4)
{
  {
    WTF::RunLoop::main(this);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    uint64_t v5 = *(atomic_uint **)(v4 + 8);
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9D2F98;
    v6[1] = v5;
    uint64_t v8 = v6;
    WTF::RunLoop::dispatch();
    if (v8) {
      (*(void (**)(void *))(*v8 + 8))(v8);
    }
  }
  return v4 != 0;
}

void sub_198D7F614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WebKit::WebsiteDataStore *a1, WTF::RefCountedBase *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 <= 1uLL)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a2, (WTF::RefCountedBase *)&v20);
    uint64_t v7 = v20;
    uint64_t v20 = 0;
    if (!v7) {
      return;
    }
    goto LABEL_23;
  }
  uint64_t v4 = (WebKit::WebsiteDataStore *)WebKit::WebsiteDataStore::existingDataStoreForIdentifier(a1, &v19);
  uint64_t v5 = v19;
  if (v19)
  {
    if (WebKit::WebsiteDataStore::hasActivePages(v19) || *((void *)v5 + 50))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      SecKeyRef v18 = v20;
      WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a2, (WTF::RefCountedBase *)&v18);
      char v9 = v18;
      SecKeyRef v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      CFRelease(*((CFTypeRef *)v5 + 1));
      return;
    }
    CFRelease(*((CFTypeRef *)v5 + 1));
  }
  uint64_t v10 = WebKit::WebsiteDataStore::websiteDataStoreIOQueue(v4);
  OSStatus v11 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  uint64_t v20 = v11;
  long long v21 = *(_OWORD *)a1;
  WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(a1, v12);
  WTF::String::isolatedCopy();
  uint64_t v13 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v13 = &unk_1EE9D3010;
  *(void *)(v13 + 16) = v20;
  *(_OWORD *)(v13 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v21;
  uint64_t v14 = v22;
  uint64_t v19 = (WebKit::WebsiteDataStore *)v13;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  *(void *)(v13 + 48) = v14;
  (*(void (**)(uint64_t, WebKit::WebsiteDataStore **))(*(void *)v10 + 32))(v10, &v19);
  id v15 = v19;
  uint64_t v19 = 0;
  if (v15) {
    (*(void (**)(WebKit::WebsiteDataStore *))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v22;
  uint64_t v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v6);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  CFDataRef v17 = v20;
  uint64_t v20 = 0;
  if (v17) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v17 + 8))(v17);
  }
  uint64_t v7 = v18;
  SecKeyRef v18 = 0;
  if (v7)
  {
LABEL_23:
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

void sub_198D7F928(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v15 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(WebKit::WebsiteDataStore *this, const WTF::UUID *a2)
{
  WebKit::defaultWebsiteDataStoreRootDirectory((WebKit *)&v7);
  WTF::UUID::toString((uint64_t *)&v6, this);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  BOOL result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D7FBA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c17_ZTSN3WTF6StringE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a2 + 32);
  if (v2) {
    *v2 += 2;
  }
  *(void *)(result + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v2;
  return result;
}

WTF::StringImpl *__destroy_helper_block_e8_32c17_ZTSN3WTF6StringE(uint64_t a1, WTF::StringImpl *a2)
{
  BOOL result = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WebKit::applicationOrProcessIdentifier(WebKit *this)
{
  int v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
  uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName");
  if ([v1 isEqualToString:@"com.apple.Safari"]
    && [v2 isEqualToString:@"SafariForWebKitDevelopment"])
  {
    int v1 = v2;
  }
  if (v1) {
    return v1;
  }
  else {
    return v2;
  }
}

WebCore *WebKit::WebsiteDataStore::addTestDomains(WebCore *this)
{
  {
    if (WebKit::appBoundDomains(void)::appBoundDomains
      && *(_DWORD *)(WebKit::appBoundDomains(void)::appBoundDomains - 12))
    {
      return this;
    }
  }
  else
  {
    WebKit::appBoundDomains(void)::appBoundDomains = 0;
  }
  WebCore::applicationBundleIdentifier((uint64_t *)v6, this);
  uint64_t v3 = WebKit::appBoundDomainsForTesting((WebKit *)v6, v1);
  uint64_t v4 = v2;
  this = v6[0];
  v6[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = (WebCore *)WTF::StringImpl::destroy(this, v2);
      if (!v4) {
        return this;
      }
      goto LABEL_10;
    }
    *(_DWORD *)this -= 2;
  }
  if (!v2) {
    return this;
  }
LABEL_10:
  uint64_t v5 = 8 * (void)v4;
  do
  {
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
    this = (WebCore *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&WebKit::appBoundDomains(void)::appBoundDomains, (WTF::StringImpl **)v3++, (uint64_t)v6);
    v5 -= 8;
  }
  while (v5);
  return this;
}

void sub_198D7FDB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebsiteDataStore *WebKit::WebsiteDataStore::ensureAppBoundDomains(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if (v4)
  {
    if (*(unsigned char *)(*(void *)(a1 + 208) + 472)) {
      WebKit::WebsiteDataStore::addTestDomains((WebCore *)a1);
    }
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
    if ((byte_1EB359B5D & 1) == 0)
    {
      qword_1EB359BB0 = 0;
      byte_1EB359B5D = 1;
    }
    return (WebKit::WebsiteDataStore *)WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)>::operator()(a2);
  }
  else
  {
    uint64_t v5 = WebKit::appBoundDomainQueue((WebKit *)a1);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (WebKit::WebsiteDataStore *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v7 = &unk_1EE9D30D8;
    *((void *)v7 + 1) = a1;
    *((void *)v7 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = a1;
    *((void *)v7 + 3) = v6;
    char v9 = v7;
    (*(void (**)(uint64_t, WebKit::WebsiteDataStore **))(*(void *)v5 + 32))(v5, &v9);
    BOOL result = v9;
    char v9 = 0;
    if (result) {
      return (WebKit::WebsiteDataStore *)(*(uint64_t (**)(WebKit::WebsiteDataStore *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198D7FF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v1 + 16))(v1, &WebKit::appBoundDomains(void)::appBoundDomains, &qword_1EB359BB0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D8004C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WebKit::WebsiteDataStore *this, const WTF::String *a2, const WTF::String *a3, CFTypeRef *a4)
{
  CFRetain(a4[1]);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9D3128;
  v8[1] = a2;
  uint64_t v8[2] = a3;
  v8[3] = a4;
  OSStatus v11 = v8;
  WebKit::WebsiteDataStore::ensureAppBoundDomains((uint64_t)this, (uint64_t *)&v11);
  BOOL result = v11;
  if (v11)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*v11 + 8);
    return (void *)v10();
  }
  return result;
}

void sub_198D80148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::getAppBoundDomains(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned __int8 v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9D3150;
  v4[1] = v3;
  uint64_t v7 = v4;
  WebKit::WebsiteDataStore::ensureAppBoundDomains(a1, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*v7 + 8);
    return v6();
  }
  return result;
}

void sub_198D8023C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::getAppBoundSchemes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned __int8 v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9D3178;
  v4[1] = v3;
  uint64_t v7 = v4;
  WebKit::WebsiteDataStore::ensureAppBoundDomains(a1, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*v7 + 8);
    return v6();
  }
  return result;
}

void sub_198D80354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebsiteDataStore::appBoundDomainsIfInitialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = a1;
  unsigned __int8 v3 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if (v3)
  {
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(result, &WebKit::appBoundDomains(void)::appBoundDomains);
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    *(unsigned char *)uint64_t result = 0;
  }
  *((unsigned char *)result + 8) = v4;
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setAppBoundDomainsForTesting(uint64_t *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, (uint64_t)a2, a3);
  uint64_t v7 = (void *)v5;
  v14[0] = v5;
  v14[1] = v6;
  if (*a1) {
    uint64_t v8 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v5)
  {
    do
    {
      if ((MEMORY[0x19972E990](*v7, "localhost", 9) & 1) == 0
        && (MEMORY[0x19972E990](*v7, "127.0.0.1", 9) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198D80548);
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, v9, v10);
      uint64_t v7 = (void *)v14[0];
    }
    while (v14[0] != v8);
  }
  {
    WebKit::appBoundDomains(void)::appBoundDomains = 0;
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  uint64_t v12 = (WTF::StringImpl **)WebKit::appBoundDomains(void)::appBoundDomains;
  WebKit::appBoundDomains(void)::appBoundDomains = v11;
  if (v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v6);
  }
  atomic_store(1u, WebKit::hasInitializedAppBoundDomains);
  return WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(a2);
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198D805DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebsiteDataStore::setManagedDomainsForTesting(uint64_t *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, (uint64_t)a2, a3);
  uint64_t v7 = (void *)v5;
  v14[0] = v5;
  v14[1] = v6;
  if (*a1) {
    uint64_t v8 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v5)
  {
    do
    {
      if ((MEMORY[0x19972E990](*v7, "localhost", 9) & 1) == 0
        && (MEMORY[0x19972E990](*v7, "127.0.0.1", 9) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198D80730);
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, v9, v10);
      uint64_t v7 = (void *)v14[0];
    }
    while (v14[0] != v8);
  }
  {
    WebKit::managedDomains(void)::managedDomains = 0;
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  uint64_t v12 = (WTF::StringImpl **)WebKit::managedDomains(void)::managedDomains;
  WebKit::managedDomains(void)::managedDomains = v11;
  if (v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v6);
  }
  atomic_store(1u, WebKit::hasInitializedManagedDomains);
  return WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(a2);
}

uint64_t WebKit::WebsiteDataStore::networkProcessHasEntitlementForTesting(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  uint64_t v4 = *(void *)(WebKit::WebsiteDataStore::networkProcess(this) + 144);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 352);
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2)
    {
      uint64_t v7 = *(const char **)(v6 + 8);
      unint64_t v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0x100000000;
    }
  }
  else
  {
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h";
    unint64_t v8 = (unint64_t)"IPC::Connection &WebKit::AuxiliaryProcessProxy::connection() const";
    uint64_t v5 = 130;
    uint64_t v3 = 106;
    __break(0xC471u);
  }
  return MEMORY[0x1F40EB390](v5, v7, v8, v3);
}

uint64_t WebKit::WebsiteDataStore::setBackupExclusionPeriodForTesting(WebKit::WebsiteDataStore *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v10 = *((void *)a1 + 3);
  double v9 = a3;
  v8[0] = &v10;
  v8[1] = &v9;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(v6, (uint64_t)v8, a2, 0, 0, 1);
}

uint64_t WebKit::WebsiteDataStore::saveRecentSearches(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 280);
  WTF::String::isolatedCopy();
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(0ul &)#1},WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(&v14, a3);
  WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)a1);
  WTF::String::isolatedCopy();
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v6 = &unk_1EE9D3218;
  v6[1] = v13;
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  uint64_t v6[2] = v7;
  v6[3] = v15;
  unint64_t v8 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  void v6[4] = v8;
  CFDataRef v17 = v6;
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &v17);
  uint64_t v10 = v17;
  CFDataRef v17 = 0;
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  return 0;
}

void sub_198D809AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v16);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebsiteDataStore::loadRecentSearches(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 280);
  WTF::String::isolatedCopy();
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v11 = v6;
  WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)a1);
  WTF::String::isolatedCopy();
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9D3240;
  v7[1] = v10;
  void v7[2] = v11;
  uint64_t v13 = v7;
  void v7[3] = v12;
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &v13);
  unint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  return 0;
}

void sub_198D80BD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::removeRecentSearches(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 280);
  WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)a1);
  WTF::String::isolatedCopy();
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v11 = v5;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9D3290;
  *(double *)(v6 + 8) = a3;
  *(void *)(v6 + 16) = v10;
  *(void *)(v6 + 24) = v11;
  uint64_t v12 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, &v12);
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return 0;
}

void sub_198D80DF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MockCcidService::~MockCcidService(WebKit::MockCcidService *this, void *a2)
{
  if (*((unsigned char *)this + 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, a2);
  }
  if (*((unsigned char *)this + 216)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  }
  if (*((unsigned char *)this + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)a2);

  WebKit::CcidService::~CcidService(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, a2);
  }
  if (*((unsigned char *)this + 216)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  }
  if (*((unsigned char *)this + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)a2);
  WebKit::CcidService::~CcidService(this);

  WTF::fastFree(v3, v4);
}

void WebKit::MockLocalConnection::~MockLocalConnection(WebKit::MockLocalConnection *this, void *a2)
{
  if (*((unsigned char *)this + 168)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, a2);
  }
  if (*((unsigned char *)this + 144)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  }
  if (*((unsigned char *)this + 104)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, (WTF::StringImpl *)a2);

  WebKit::LocalConnection::~LocalConnection((id *)this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 168)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, a2);
  }
  if (*((unsigned char *)this + 144)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  }
  if (*((unsigned char *)this + 104)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, (WTF::StringImpl *)a2);
  WebKit::LocalConnection::~LocalConnection((id *)this);

  WTF::fastFree(v3, v4);
}

void WebKit::MockLocalService::~MockLocalService(WebKit::MockLocalService *this, void *a2)
{
  if (*((unsigned char *)this + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 160, a2);
  }
  if (*((unsigned char *)this + 152)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  }
  if (*((unsigned char *)this + 112)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 32, (WTF::StringImpl *)a2);

  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 160, a2);
  }
  if (*((unsigned char *)this + 152)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  }
  if (*((unsigned char *)this + 112)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 32, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);

  WTF::fastFree(v3, v4);
}

void WebKit::MockNfcService::~MockNfcService(WebKit::MockNfcService *this, void *a2)
{
  if (*((unsigned char *)this + 224)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 208, a2);
  }
  if (*((unsigned char *)this + 200)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  }
  if (*((unsigned char *)this + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, (WTF::StringImpl *)a2);

  WebKit::NfcService::~NfcService(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 224)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 208, a2);
  }
  if (*((unsigned char *)this + 200)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  }
  if (*((unsigned char *)this + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, (WTF::StringImpl *)a2);
  WebKit::NfcService::~NfcService(this);

  WTF::fastFree(v3, v4);
}

unsigned char *std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_198D81240(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(_WORD *)uint64_t result = *(_WORD *)a2;
    uint64_t v2 = *(_DWORD **)(a2 + 8);
    if (v2) {
      *v2 += 2;
    }
    *(void *)(result + 8) = v2;
    uint64_t v3 = *(_DWORD **)(a2 + 16);
    if (v3) {
      *v3 += 2;
    }
    *(void *)(result + 16) = v3;
    uint64_t v4 = *(_DWORD **)(a2 + 24);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(result + 24) = v4;
    uint64_t v5 = *(_DWORD **)(a2 + 32);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(result + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 23) = *(_DWORD *)(a2 + 23);
    *(void *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
  }
  return a1;
}

void sub_198D81320(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 32)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 8, a2 + 8);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
  }
  return a1;
}

void sub_198D813A0(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 32)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_198D81400(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::{lambda(void const*)#1}::__invoke(unsigned char *a1, void *a2)
{
  if (a1[184]) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 168), a2);
  }
  if (a1[160]) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 136), a2);
  }
  if (a1[120]) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 88), a2);
  }

  return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 40), (WTF::StringImpl *)a2);
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::{lambda(void *)#1}::__invoke(unsigned char *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (!a1[160]) {
    goto LABEL_24;
  }
  uint64_t v3 = v2;
  if (a1[128] == 2 || a1[152])
  {
    uint64_t v4 = [[WKMockNFTag alloc] initWithType:0];
    uint64_t v5 = (WebKit *)[v3 addObject:v4];
  }
  else
  {
    uint64_t v4 = [[WKMockNFTag alloc] initWithType:3];
    uint64_t v5 = (WebKit *)[v3 addObject:v4];
  }
  if (v4) {
    CFRelease(v4);
  }
  if (!a1[160]) {
    goto LABEL_24;
  }
  if (a1[152])
  {
    uint64_t v6 = [[WKMockNFTag alloc] initWithType:3];
    uint64_t v5 = (WebKit *)[v3 addObject:v6];
    if (v6) {
      CFRelease(v6);
    }
  }
  if (a1[160])
  {
    if (a1[153])
    {
      uint64_t v7 = [WKMockNFTag alloc];
      double v9 = [(WKMockNFTag *)v7 initWithType:3 tagID:v8];
      uint64_t v5 = (WebKit *)[v3 addObject:v9];
      if (v9) {
        CFRelease(v9);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    uint64_t v10 = (const void *)[objc_alloc((Class)WebKit::getNFReaderSessionClass[0](v5)) initWithUIType:0];
    if (v10) {
      CFRelease(v10);
    }
    if (v3)
    {
      CFRelease(v3);
    }
  }
  else
  {
LABEL_24:
    __break(1u);
  }
}

void sub_198D81644(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(0ul &)#1},WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(void *result, uint64_t *a2)
{
  uint64_t *result = 0;
  result[1] = 0;
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if (v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      uint64_t result = (void *)WTF::fastMalloc((WTF *)(16 * v2));
      *((_DWORD *)v4 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v2;
      void *v4 = result;
      uint64_t v5 = *((unsigned int *)a2 + 3);
      if (v5)
      {
        uint64_t v6 = *a2;
        uint64_t v7 = v6 + 16 * v5;
        unint64_t v8 = result + 1;
        int v9 = 1;
        do
        {
          uint64_t result = (void *)WTF::String::isolatedCopy();
          uint64_t v10 = *(void *)(v6 + 8);
          *(v8 - 1) = v11;
          *unint64_t v8 = v10;
          v8 += 2;
          *((_DWORD *)v4 + 3) = v9++;
          v6 += 16;
        }
        while (v6 != v7);
      }
    }
  }
  return result;
}

void sub_198D81760(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D2F48;
  uint64_t v3 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  }
  if (*(unsigned char *)(a1 + 136)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  }
  if (*(unsigned char *)(a1 + 96)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  return a1;
}

{
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D2F48;
  uint64_t v3 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  }
  if (*(unsigned char *)(a1 + 136)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  }
  if (*(unsigned char *)(a1 + 96)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::call(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = (const void *)[objc_alloc((Class)WebKit::getLAContextClass((WebKit *)a1)) init];
    WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)>::operator()((uint64_t *)(a1 + 168));
    if (v2)
    {
      CFRelease(v2);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_198D81968(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D2F70;
  uint64_t v3 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  }
  if (*(unsigned char *)(a1 + 136)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  }
  if (*(unsigned char *)(a1 + 96)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  return a1;
}

{
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D2F70;
  uint64_t v3 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 160)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  }
  if (*(unsigned char *)(a1 + 136)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  }
  if (*(unsigned char *)(a1 + 96)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::call(uint64_t result)
{
  if (*(unsigned char *)(result + 56)) {
    return WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)>::operator()((uint64_t *)(result + 168));
  }
  __break(1u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MockNfcService::receiveStartPolling(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D2F98;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockNfcService::receiveStartPolling(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D2F98;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::MockNfcService::receiveStartPolling(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(unsigned char **)(v1 + 8);
    if (v2)
    {
      if (v2[200])
      {
        if (v2[168] != 1)
        {
          char v19 = v2[72];
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](&v20, (uint64_t)(v2 + 80));
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v24, (uint64_t)(v2 + 128));
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)v28, (uint64_t)(v2 + 168));
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](&v33, (uint64_t)(v2 + 208));
          char v36 = v19;
          LOBYTE(v37) = 0;
          char v40 = 0;
          if (v23)
          {
            __int16 v37 = v20;
            long long v3 = v21;
            long long v4 = v22;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v38 = v3;
            long long v39 = v4;
            char v40 = 1;
          }
          LOBYTE(v41) = 0;
          char v44 = 0;
          if (v27)
          {
            uint64_t v41 = v24;
            uint64_t v5 = v25;
            uint64_t v24 = 0;
            uint64_t v25 = 0;
            uint64_t v42 = v5;
            v43[0] = v26[0];
            *(_DWORD *)((char *)v43 + 7) = *(_DWORD *)((char *)v26 + 7);
            char v44 = 1;
          }
          char v45 = 0;
          unsigned __int8 v49 = 0;
          if (v32)
          {
            char v45 = v28[0];
            uint64_t v46 = v29;
            uint64_t v6 = v30;
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v47 = v6;
            __int16 v48 = v31;
            unsigned __int8 v49 = 1;
          }
          LOBYTE(v50) = 0;
          char v52 = 0;
          if (v35)
          {
            uint64_t v50 = v33;
            uint64_t v7 = v34;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            uint64_t v51 = v7;
            char v52 = 1;
          }
          unint64_t v8 = (char *)malloc_type_malloc(0xC0uLL, 0x10E204063196E6AuLL);
          uint64_t v10 = v8;
          *(void *)unint64_t v8 = MEMORY[0x1E4F14398];
          *((void *)v8 + 1) = 50331650;
          *((void *)v8 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::{lambda(void *)#1}::__invoke;
          *((void *)v8 + 3) = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::descriptor;
          v8[32] = v36;
          v8[40] = 0;
          v8[80] = 0;
          if (v40)
          {
            *((_WORD *)v8 + 20) = v37;
            long long v11 = v38;
            long long v12 = v39;
            long long v38 = 0u;
            long long v39 = 0u;
            *((_OWORD *)v8 + 3) = v11;
            *((_OWORD *)v8 + 4) = v12;
            v8[80] = 1;
          }
          v8[88] = 0;
          v8[120] = 0;
          if (v44)
          {
            *((void *)v8 + 11) = v41;
            uint64_t v13 = v42;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            *((void *)v8 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v13;
            *((void *)v8 + 13) = v43[0];
            *(_DWORD *)(v8 + 111) = *(_DWORD *)((char *)v43 + 7);
            v8[120] = 1;
          }
          v8[128] = 0;
          v8[160] = 0;
          int v14 = v49;
          if (v49)
          {
            v8[128] = v45;
            *((void *)v8 + 17) = v46;
            uint64_t v15 = v47;
            uint64_t v46 = 0;
            uint64_t v47 = 0;
            *((void *)v8 + 18) = v15;
            *((_WORD *)v8 + 76) = v48;
            v8[160] = 1;
          }
          v8[168] = 0;
          v8[184] = 0;
          if (v52)
          {
            *((void *)v8 + 21) = v50;
            uint64_t v16 = v51;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            *((void *)v8 + 2WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v16;
            v8[184] = 1;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v9);
            int v14 = v49;
          }
          if (v14) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v9);
          }
          if (v44) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v9);
          }
          std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, (WTF::StringImpl *)v9);
          if (v35) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v17);
          }
          if (v32) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v17);
          }
          if (v27) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v17);
          }
          std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, (WTF::StringImpl *)v17);
          global_queue = dispatch_get_global_queue(0, 0);
          dispatch_async(global_queue, v10);
          _Block_release(v10);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_198D81F4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a48) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v53, a2);
  }
  if (a45) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a42, a2);
  }
  if (a40) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v52, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v51, (WTF::StringImpl *)a2);
  if (a28) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v50, v55);
  }
  if (a25) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v55);
  }
  if (a20) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v49, v55);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v48, (WTF::StringImpl *)v55);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D2FC0;
  long long v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D2FE8;
  long long v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D3010;
  long long v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D3010;
  long long v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::call(uint64_t a1)
{
  v32[16] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F18D90]);
  WTF::UUID::toString(v32, (WTF::UUID *)(a1 + 32));
  if (v32[0]) {
    long long v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    long long v3 = &stru_1EEA10550;
  }
  uint64_t v5 = (void *)[v2 _initWithIdentifier:v3 private:0];
  uint64_t v6 = (WTF::StringImpl *)v32[0];
  v32[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (void *)[v5 allCredentials];
  uint64_t v21 = a1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v9 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        uint64_t v13 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v12), "allValues");
        uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v14)
        {
          uint64_t v15 = *(void *)v24;
          do
          {
            for (uint64_t j = 0; j != v14; ++j)
            {
              if (*(void *)v24 != v15) {
                objc_enumerationMutation(v13);
              }
              [v5 removeCredential:*(void *)(*((void *)&v23 + 1) + 8 * j) forProtectionSpace:v12];
            }
            uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
          }
          while (v14);
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v9);
  }
  CFDataRef v17 = (WTF::RunLoop *)WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)(v21 + 48), v8);
  char v18 = (char)v17;
  WTF::RunLoop::main(v17);
  uint64_t v19 = *(void *)(v21 + 16);
  *(void *)(v21 + 16) = 0;
  uint64_t v20 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v20 = &unk_1EE9D3038;
  *(void *)(v20 + 8) = v19;
  *(unsigned char *)(v20 + 16) = v18;
  uint64_t v22 = v20;
  WTF::RunLoop::dispatch();
  if (!v22)
  {
    if (!v5) {
      return;
    }
    goto LABEL_23;
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  if (v5) {
LABEL_23:
  }
    CFRelease(v5);
}

void sub_198D824D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D3038;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D3038;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (WTF::RefCountedBase *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 8), (WTF::RefCountedBase *)&v4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v1, (WTF::RefCountedBase *)&v4);
  }
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D82718(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D3088;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D30D8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D30D8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void>::call(WTF::RunLoop *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  WTF::RunLoop::main(a1);
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  *((void *)a1 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *((void *)a1 + 3) = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9D3100;
  v5[1] = v2;
  uint64_t v5[2] = v3;
  v5[3] = v4;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_198D8297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D3100;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D3100;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t *a1)
{
  if (*(unsigned char *)(*(void *)(a1[1] + 208) + 472)) {
    WebKit::WebsiteDataStore::addTestDomains((WebCore *)a1);
  }
  {
    WebKit::appBoundDomains(void)::appBoundDomains = 0;
  }
  if ((byte_1EB359B5D & 1) == 0)
  {
    qword_1EB359BB0 = 0;
    byte_1EB359B5D = 1;
  }

  return WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)>::operator()(a1 + 3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WTF::String const&,WTF::String const&,WebKit::WebFramePolicyListenerProxy &)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D3128;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WTF::String const&,WTF::String const&,WebKit::WebFramePolicyListenerProxy &)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D3128;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WTF::String const&,WTF::String const&,WebKit::WebFramePolicyListenerProxy &)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::call(void *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  unsigned __int8 v4 = atomic_load(WebKit::keyExists);
  if ((v4 & 1) != 0 || *a2 && *(_DWORD *)(*a2 - 12))
  {
    uint64_t v6 = (const WTF::StringImpl **)a1[2];
    uint64_t v5 = a1[3];
    uint64_t v7 = (WebCore::RegistrableDomain *)a1[1];
    unint64_t v8 = *v6;
    if (*v6 && (uint64_t v9 = *(void *)a3) != 0)
    {
      int v16 = *(_DWORD *)(v9 - 8);
      unsigned int v17 = *((_DWORD *)v8 + 4);
      if (v17 >= 0x100) {
        unsigned int v18 = v17 >> 8;
      }
      else {
        unsigned int v18 = WTF::StringImpl::hashSlowCase(v8);
      }
      for (i = 0; ; unsigned int v18 = i + v20)
      {
        int v20 = v18 & v16;
        uint64_t v21 = *(WTF **)(v9 + 8 * (v18 & v16));
        if (v21 != (WTF *)-1)
        {
          if (!v21) {
            goto LABEL_6;
          }
          if (WTF::equal(v21, *v6, a3)) {
            break;
          }
        }
        ++i;
      }
      __int16 v10 = 1;
    }
    else
    {
LABEL_6:
      __int16 v10 = 0;
    }
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v7, &v22);
    __int16 v12 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a2, &v22);
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    return WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(v5, v10 | v12 | 0x100u);
  }
  else
  {
    uint64_t v14 = a1[3];
    return WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(v14, 0);
  }
}

void sub_198D82DA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTraits<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D3150;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTraits<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D3150;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTraits<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTableTraits> const&>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundSchemes(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D3178;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundSchemes(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D3178;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundSchemes(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, a3);
  unsigned __int8 v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

void sub_198D83034(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D31C8;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::saveRecentSearches(WTF::String const&,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D3218;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::saveRecentSearches(WTF::String const&,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9D3218;
  uint64_t v3 = (WTF::StringImpl *)*((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::saveRecentSearches(WTF::String const&,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F41713E0](a1 + 8, a1 + 16, a1 + 32);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D3240;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D3240;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(void *a1, uint64_t a2, const WTF::String *a3)
{
  RecentSearchesFromFile = (WTF::RunLoop *)WebCore::loadRecentSearchesFromFile(v17, (WebCore *)(a1 + 1), (const WTF::String *)(a1 + 3), a3);
  WTF::RunLoop::main(RecentSearchesFromFile);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  uint64_t v13 = v5;
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(0ul &)#1},WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(&v14, v17);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9D3268;
  v6[1] = v13;
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  uint64_t v6[2] = v7;
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  int v16 = v6;
  v6[3] = v8;
  WTF::RunLoop::dispatch();
  __int16 v10 = v16;
  int v16 = 0;
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v11);
}

void sub_198D834A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 8))(a6);
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v8);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D3268;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D3268;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeRecentSearches(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D3290;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeRecentSearches(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D3290;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeRecentSearches(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = (WTF::RunLoop *)WebCore::removeRecentlyModifiedRecentSearchesFromFile();
  WTF::RunLoop::main(v2);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::dispatch();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198D8380C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKWebArchiveGetTypeID()
{
  return 30;
}

uint64_t WKWebArchiveCreate(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v6 = [a2 _apiObject];
      CFRetain(*(CFTypeRef *)(v6 + 8));
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  uint64_t v10 = v6;
  if (a3)
  {
    uint64_t v7 = [a3 _apiObject];
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v9 = v7;
    API::WebArchive::create(v5, &v10, &v9, &v11);
    CFRelease(*(CFTypeRef *)(v7 + 8));
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = 0;
  API::WebArchive::create(v5, &v10, &v9, &v11);
  if (a2) {
LABEL_6:
  }
    CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_7:
  if (v11) {
    return *((void *)v11 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKWebArchiveCreateWithData(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::WebArchive::create((API::WebArchive *)a1, &v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKWebArchiveCreateFromRange(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  WebCore::makeSimpleRange(v4, *(WebCore **)(v1 + 24), v2);
  API::WebArchive::create(&v6);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v5);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v4);
  if (v6) {
    return *(void *)(v6 + 8);
  }
  else {
    return 0;
  }
}

WebKit *WKWebArchiveCopyMainResource(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = API::WebArchive::mainResource((API::WebArchive *)a1);
  if (result)
  {
    uint64_t v2 = result;
    CFRetain(*((CFTypeRef *)result + 1));
    return (WebKit *)*((void *)v2 + 1);
  }
  return result;
}

uint64_t WKWebArchiveCopySubresources(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = API::WebArchive::subresources((API::WebArchive *)a1);
  if (result)
  {
    uint64_t v2 = result;
    CFRetain(*(CFTypeRef *)(result + 8));
    return *(void *)(v2 + 8);
  }
  return result;
}

uint64_t WKWebArchiveCopySubframeArchives(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = API::WebArchive::subframeArchives((API::WebArchive *)a1);
  if (result)
  {
    uint64_t v2 = result;
    CFRetain(*(CFTypeRef *)(result + 8));
    return *(void *)(v2 + 8);
  }
  return result;
}

uint64_t WKWebArchiveCopyData(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::WebArchive::data((WebCore::LegacyWebArchive **)a1, &v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKWebArchiveResourceGetTypeID()
{
  return 31;
}

uint64_t WKWebArchiveResourceCreate(void *a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
    uint64_t v7 = (API::WebArchiveResource *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v8 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
LABEL_7:
  int v16 = v8;
  if (a3)
  {
    [a3 _apiObject];
    WTF::String::isolatedCopy();
    if (a4)
    {
LABEL_9:
      [a4 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v15 = 0;
    if (a4) {
      goto LABEL_9;
    }
  }
  uint64_t v14 = 0;
LABEL_10:
  API::WebArchiveResource::create(v7, &v16, (const WTF::String *)&v15, (const WTF::String *)&v14, &v17);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  long long v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  __int16 v12 = v16;
  int v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v17) {
    return *((void *)v17 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKWebArchiveResourceCopyData(void *a1, void *a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::WebArchiveResource::data((API::WebArchiveResource *)a1, a2, &v3);
  if (v3) {
    return *((void *)v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKWebArchiveResourceCopyURL(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)(*(void *)([a1 _apiObject] + 16) + 16);
  if (!v1) {
    return 0;
  }
  *(_DWORD *)v1 += 2;
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

uint64_t WKWebArchiveResourceCopyMIMEType(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)(*(void *)([a1 _apiObject] + 16) + 320);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  uint64_t v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKWebArchiveResourceCopyTextEncoding(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)(*(void *)([a1 _apiObject] + 16) + 328);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  uint64_t v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WebKit::WebPaymentCoordinatorProxy::messageSenderConnection(WebKit::WebPaymentCoordinatorProxy *this)
{
  return (*(uint64_t (**)(void, WebKit::WebPaymentCoordinatorProxy *))(**((void **)this + 4) + 16))(*((void *)this + 4), this);
}

uint64_t non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::messageSenderConnection(WebKit::WebPaymentCoordinatorProxy *this)
{
  return (*(uint64_t (**)(void, char *))(**((void **)this + 2) + 16))(*((void *)this + 2), (char *)this - 16);
}

uint64_t WebKit::WebPaymentCoordinatorProxy::messageSenderDestinationID(uint64_t this)
{
  if (*(unsigned char *)(this + 48)) {
    return *(void *)(this + 40);
  }
  __break(1u);
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::messageSenderDestinationID(uint64_t this)
{
  if (*(unsigned char *)(this + 32)) {
    return *(void *)(this + 24);
  }
  __break(1u);
  return this;
}

uint64_t WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    uint64_t v10 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_8:
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
      uint64_t v12 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 8))(v12, v13);
    }
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)&void v14[4] = "void WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard(const String &, const St"
                         "ring &, CompletionHandler<void (BOOL)> &&)";
    long long v11 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 75: "
          "Invalid message dispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, v11, v14, 0xCu);
    goto LABEL_8;
  }
  if (!*a3)
  {
    uint64_t v10 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_8;
    }
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)&void v14[4] = "void WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard(const String &, const St"
                         "ring &, CompletionHandler<void (BOOL)> &&)";
    long long v11 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 76: "
          "Invalid message dispatched %{public}s";
    goto LABEL_10;
  }
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(v14, a4);
  WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(a1, a2, a3, (uint64_t *)v14);
  uint64_t result = *(void *)v14;
  *(void *)uint64_t v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 8))(result, v8);
  }
  return result;
}

uint64_t WebKit::WebPaymentCoordinatorProxy::openPaymentSetup(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    uint64_t v10 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_8:
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
      uint64_t v12 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 8))(v12, v13);
    }
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)&void v14[4] = "void WebKit::WebPaymentCoordinatorProxy::openPaymentSetup(const String &, const String &, Compl"
                         "etionHandler<void (BOOL)> &&)";
    long long v11 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 82: "
          "Invalid message dispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, v11, v14, 0xCu);
    goto LABEL_8;
  }
  if (!*a3)
  {
    uint64_t v10 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_8;
    }
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)&void v14[4] = "void WebKit::WebPaymentCoordinatorProxy::openPaymentSetup(const String &, const String &, Compl"
                         "etionHandler<void (BOOL)> &&)";
    long long v11 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 83: "
          "Invalid message dispatched %{public}s";
    goto LABEL_10;
  }
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(v14, a4);
  WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(a1, a2, a3, (uint64_t *)v14);
  uint64_t result = *(void *)v14;
  *(void *)uint64_t v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 8))(result, v8);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPaymentCoordinatorProxy::showPaymentUI(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  {
    if (WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy)
    {
      uint64_t v14 = *(void *)(WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy + 8);
      if (v14)
      {
        *(void *)CFTypeRef cf = 0;
        WebKit::WebPaymentCoordinatorProxy::didReachFinalState(v14, (WebCore::PaymentSessionError *)cf);
        uint64_t v15 = *(const void **)cf;
        *(void *)CFTypeRef cf = 0;
        if (v15) {
          CFRelease(v15);
        }
      }
    }
  }
  else
  {
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxdouble y = 0;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  unsigned int v17 = *(atomic_uint **)(a1 + 8);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  {
    unsigned int v18 = (unsigned int *)WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy;
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxdouble y = (uint64_t)v17;
    if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v16);
    }
  }
  else
  {
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxdouble y = (uint64_t)v17;
  }
  if (*(unsigned __int16 *)(a1 + 56) - 10 >= 0xFFFFFFF7)
  {
    uint64_t v34 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)CFTypeRef cf = 136446210;
      *(void *)&cf[4] = "void WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WebCore::PageIdentifier, WebPageProxyId"
                          "entifier, const String &, const Vector<String> &, const WebCore::ApplePaySessionPaymentRequest"
                          " &, CompletionHandler<void (BOOL)> &&)";
      char v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 93"
            ": Invalid message dispatched %{public}s";
      goto LABEL_41;
    }
LABEL_39:
    *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
             + 98) = 1;
    uint64_t v36 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v36 + 16))(v36, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v34 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)CFTypeRef cf = 136446210;
      *(void *)&cf[4] = "void WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WebCore::PageIdentifier, WebPageProxyId"
                          "entifier, const String &, const Vector<String> &, const WebCore::ApplePaySessionPaymentRequest"
                          " &, CompletionHandler<void (BOOL)> &&)";
      char v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 94"
            ": Invalid message dispatched %{public}s";
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v34 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_39;
    }
    *(_DWORD *)CFTypeRef cf = 136446210;
    *(void *)&cf[4] = "void WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WebCore::PageIdentifier, WebPageProxyIden"
                        "tifier, const String &, const Vector<String> &, const WebCore::ApplePaySessionPaymentRequest &, "
                        "CompletionHandler<void (BOOL)> &&)";
    char v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 95: "
          "Invalid message dispatched %{public}s";
LABEL_41:
    _os_log_fault_impl(&dword_1985F2000, v34, OS_LOG_TYPE_FAULT, v35, cf, 0xCu);
    goto LABEL_39;
  }
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 56) = 1;
  uint64_t result = (WTF::StringImpl *)WTF::URL::URL((uint64_t)v39, a4);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v20 = *(unsigned int *)(a5 + 12);
  if (v20)
  {
    if (v20 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    int v21 = 40 * v20;
    uint64_t v22 = WTF::fastMalloc((WTF *)(40 * v20));
    LODWORD(v38) = (v21 & 0xFFFFFFF8) / 0x28;
    uint64_t v37 = v22;
    if (*(_DWORD *)(a5 + 12))
    {
      uint64_t v23 = v22;
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        WTF::URL::URL((uint64_t)cf, (WTF::StringImpl **)(*(void *)a5 + v24));
        WTF::URL::URL(v23, (uint64_t *)cf);
        long long v27 = *(WTF::StringImpl **)cf;
        *(void *)CFTypeRef cf = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v26);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        ++v25;
        v23 += 40;
        v24 += 8;
      }
      while (v25 < *(unsigned int *)(a5 + 12));
      HIDWORD(v38) = v25;
    }
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  long long v28 = *(atomic_uint **)(a1 + 8);
  if (v28) {
    atomic_fetch_add(v28, 1u);
  }
  long long v29 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v29 = &unk_1EE9D33C0;
  v29[1] = a1;
  _OWORD v29[2] = v28;
  *(void *)CFTypeRef cf = v29;
  WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(a1, a3, (uint64_t)v39, (uint64_t)&v37, a6, (uint64_t *)cf);
  uint64_t v30 = *(void *)cf;
  *(void *)CFTypeRef cf = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, 1);
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v32);
  uint64_t result = v39[0];
  v39[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebPaymentCoordinatorProxy::didReachFinalState(uint64_t a1, WebCore::PaymentSessionError *a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 56);
  BOOL v4 = v3 > 9;
  int v5 = (1 << v3) & 0x301;
  if (v4 || v5 == 0)
  {
    uint64_t v8 = a1 + 16;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 2575;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v15 = v10;
    IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::encode(v10, a2);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(a1 + 16, &v15, 0);
    long long v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, a2);
      WTF::fastFree(v13, v14);
    }
  }
  uint64_t result = *(unsigned int **)(a1 + 64);
  if (result)
  {
    (*(void (**)(unsigned int *))(*(void *)result + 16))(result);
    uint64_t result = *(unsigned int **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (result) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  if (*(unsigned char *)(a1 + 48)) {
    *(unsigned char *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 60) = 0;
  *(_WORD *)(a1 + 56) = 0;
  {
    uint64_t result = (unsigned int *)WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy;
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxdouble y = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  else
  {
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxdouble y = 0;
  }
  return result;
}

void WebKit::WebPaymentCoordinatorProxy::completeMerchantValidation(uint64_t a1, const void **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_DWORD *)(a1 + 60) == 1)
    {
      WebKit::PaymentAuthorizationPresenter::completeMerchantValidation(*(void *)(a1 + 64), a2);
      *(_DWORD *)(a1 + 60) = 2;
    }
    else
    {
      unsigned int v3 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        int v4 = 136446210;
        int v5 = "void WebKit::WebPaymentCoordinatorProxy::completeMerchantValidation(const WebCore::PaymentMerchantSession &)";
        _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 135: Invalid message dispatched %{public}s", (uint8_t *)&v4, 0xCu);
      }
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completeShippingMethodSelection(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 4)
    {
      WebKit::PaymentAuthorizationPresenter::completeShippingMethodSelection(*(void *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      unsigned int v3 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        int v4 = 136446210;
        int v5 = "void WebKit::WebPaymentCoordinatorProxy::completeShippingMethodSelection(std::optional<WebCore::ApplePayShi"
             "ppingMethodUpdate> &&)";
        _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 147: Invalid message dispatched %{public}s", (uint8_t *)&v4, 0xCu);
      }
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completeShippingContactSelection(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 5)
    {
      WebKit::PaymentAuthorizationPresenter::completeShippingContactSelection(*(void *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      unsigned int v3 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        int v4 = 136446210;
        int v5 = "void WebKit::WebPaymentCoordinatorProxy::completeShippingContactSelection(std::optional<WebCore::ApplePaySh"
             "ippingContactUpdate> &&)";
        _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 159: Invalid message dispatched %{public}s", (uint8_t *)&v4, 0xCu);
      }
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 6)
    {
      WebKit::PaymentAuthorizationPresenter::completePaymentMethodSelection(*(void *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      unsigned int v3 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        int v4 = 136446210;
        int v5 = "void WebKit::WebPaymentCoordinatorProxy::completePaymentMethodSelection(std::optional<WebCore::ApplePayPaym"
             "entMethodUpdate> &&)";
        _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 171: Invalid message dispatched %{public}s", (uint8_t *)&v4, 0xCu);
      }
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completeCouponCodeChange(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 7)
    {
      WebKit::PaymentAuthorizationPresenter::completeCouponCodeChange(*(void *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      unsigned int v3 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        int v4 = 136446210;
        int v5 = "void WebKit::WebPaymentCoordinatorProxy::completeCouponCodeChange(std::optional<WebCore::ApplePayCouponCodeUpdate> &&)";
        _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 185: Invalid message dispatched %{public}s", (uint8_t *)&v4, 0xCu);
      }
      *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completePaymentSession(uint64_t a1, WebCore::ApplePayPaymentAuthorizationResult *this)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
  if (v2 > 9 || v2 == 3)
  {
    int isFinalState = WebCore::ApplePayPaymentAuthorizationResult::isFinalState(this);
    WebKit::PaymentAuthorizationPresenter::completePaymentSession(*(void *)(a1 + 64), (__int16 *)this);
    if (isFinalState) {
      __int16 v7 = 9;
    }
    else {
      __int16 v7 = 2;
    }
    *(_WORD *)(a1 + 56) = v7;
  }
}

void WebKit::WebPaymentCoordinatorProxy::abortPaymentSession(WebKit::WebPaymentCoordinatorProxy *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 28);
  BOOL v2 = v1 >= 9;
  BOOL v4 = v1 == 9;
  int v3 = (1 << v1) & 0x301;
  BOOL v4 = !v4 && v2 || v3 == 0;
  if (v4)
  {
    CFTypeRef cf = 0;
    WebKit::WebPaymentCoordinatorProxy::didReachFinalState((uint64_t)this, (WebCore::PaymentSessionError *)&cf);
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterWillValidateMerchant(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 60) = 1;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 2580;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterWillValidateMerchant(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterWillValidateMerchant(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidAuthorizePayment(uint64_t a1, uint64_t a2, WebCore::Payment *a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 2574;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::Payment,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidAuthorizePayment(uint64_t a1, uint64_t a2, WebCore::Payment *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidAuthorizePayment(a1 - 24, a2, a3);
}

unsigned int *WebKit::WebPaymentCoordinatorProxy::presenterDidFinish(uint64_t a1, uint64_t a2, WebCore::PaymentSessionError *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::didReachFinalState(a1, a3);
}

unsigned int *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidFinish(uint64_t a1, uint64_t a2, WebCore::PaymentSessionError *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::didReachFinalState(a1 - 24, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingMethod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 2579;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::ApplePayShippingMethod,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingMethod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingMethod(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidChangeCouponCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 7;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 2576;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidChangeCouponCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidChangeCouponCode(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingContact(uint64_t a1, uint64_t a2, WebCore::PaymentContact *a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 2578;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingContact(uint64_t a1, uint64_t a2, WebCore::PaymentContact *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingContact(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPaymentCoordinatorProxy::presentingWindowForPaymentAuthorization(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32), a1);
}

uint64_t non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presentingWindowForPaymentAuthorization(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), a1 - 24);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidSelectPaymentMethod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 6;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 2577;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::encodeObjectDirectly<PKPaymentMethod>(v7, *(objc_object **)(a3 + 8));
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidSelectPaymentMethod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidSelectPaymentMethod(a1 - 24, a2, a3);
}

void WebKit::AuthenticationManager::~AuthenticationManager(WebKit::AuthenticationManager *this, void *a2)
{
  *(void *)this = &unk_1EE9D32B8;
  *((void *)this + 1) = &unk_1EE9D32F0;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (void *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          a2 = (void *)*v5;
          *uint64_t v5 = 0;
          if (a2) {
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v5, a2);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::AuthenticationManager::~AuthenticationManager(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::AuthenticationManager::~AuthenticationManager(WebKit::AuthenticationManager *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::AuthenticationManager::~AuthenticationManager((WebKit::AuthenticationManager *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::AuthenticationManager::shouldCoalesceChallenge(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::AuthenticationChallengeBase *this)
{
  if (*(unsigned char *)(WebCore::AuthenticationChallengeBase::protectionSpace(this) + 21) == 8) {
    return 0;
  }
  uint64_t v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 32));
  uint64_t v9 = v8;
  long long v11 = v10;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
  if ((void *)v13 == v8) {
    return 0;
  }
  while (1)
  {
    if (*v9 != a3 && *(void *)v9[1] == a2)
    {
      uint64_t v14 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace(this);
      uint64_t v15 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v9[1] + 8));
      if (WebCore::ProtectionSpaceBase::compare(v14, v15, v16)) {
        return 1;
      }
    }
    while (1)
    {
      v9 += 2;
      if (v9 == v11) {
        break;
      }
      if ((unint64_t)(*v9 + 1) > 1) {
        goto LABEL_13;
      }
    }
    uint64_t v9 = v11;
LABEL_13:
    if (v9 == (void *)v13) {
      return 0;
    }
  }
}

uint64_t WebKit::AuthenticationManager::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::AuthenticationChallengeBase *a5, char a6, uint64_t *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  if (a3)
  {
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x1C0);
    long long v29 = WebKit::AuthenticationManager::Challenge::Challenge(v13, a3, a5, a7);
    IdentifierInternal = (IPC::Encoder *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>((uint64_t *)(a1 + 32), (uint64_t *)&IdentifierInternal, (uint64_t *)&v29, (uint64_t)&v34);
    uint64_t v14 = IdentifierInternal;
    uint64_t v15 = v29;
    long long v29 = 0;
    uint64_t v30 = IdentifierInternal;
    if (v15) {
      std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)&v29, v15);
    }
    uint64_t result = WebKit::AuthenticationManager::shouldCoalesceChallenge(a1, a3, (uint64_t)v14, a5);
    if ((result & 1) == 0)
    {
      LOBYTE(v34) = 0;
      char v37 = 0;
      if (a4) {
        std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]<WebCore::SecurityOriginData const&,void>((uint64_t)&v34, a4);
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 8);
      atomic_fetch_add((atomic_uint *volatile)(v17 + 128), 1u);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 24) + 56))(v17 + 24);
      uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v19 = 327;
      *((void *)v19 + 1) = v18;
      *((void *)v19 + 66) = (char *)v19 + 16;
      *((void *)v19 + 67) = 512;
      *((void *)v19 + 68) = 0;
      *((void *)v19 + 70) = 0;
      *((void *)v19 + 69) = 0;
      IPC::Encoder::encodeHeader(v19);
      IdentifierInternal = v19;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, &v32);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, &v31);
      IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v19, (uint64_t)&v34);
      IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode(v19, a5);
      uint64_t v20 = (unsigned char *)IPC::Encoder::grow(v19, 1uLL, 1);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198D85B40);
      }
      *uint64_t v20 = a6;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v19, (uint64_t *)&v30);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v17 + 24) + 32))(v17 + 24, &IdentifierInternal, 0);
      uint64_t result = (uint64_t)IdentifierInternal;
      IdentifierInternal = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v22);
        uint64_t result = WTF::fastFree(v27, v28);
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v17 + 128), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v17 + 128));
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      if (v37)
      {
        if (cf != -1) {
          return ((uint64_t (*)(IPC::Encoder **, WTF::StringImpl **))off_1EE9D3318[cf])(&IdentifierInternal, &v34);
        }
      }
    }
  }
  else
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v34);
    CFTypeRef cf = 0;
    uint64_t v23 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v23 + 16))(v23, 1, &v34);
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    CFTypeRef v25 = cf;
    CFTypeRef cf = 0;
    if (v25) {
      CFRelease(v25);
    }
    long long v26 = v35;
    char v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t result = (uint64_t)v34;
    uint64_t v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]<WebCore::SecurityOriginData const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
    *(unsigned char *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
  }
  return a1;
}

uint64_t WebKit::AuthenticationManager::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, WebCore::AuthenticationChallengeBase *a3, uint64_t *a4)
{
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x1C0);
  uint64_t v17 = WebKit::AuthenticationManager::Challenge::Challenge(v8, 0, a3, a4);
  *(void *)uint64_t v19 = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>((uint64_t *)(a1 + 32), (uint64_t *)v19, (uint64_t *)&v17, (uint64_t)v18);
  uint64_t v9 = *(void *)v19;
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  if (v10) {
    std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)&v17, v10);
  }
  uint64_t result = WebKit::AuthenticationManager::shouldCoalesceChallenge(a1, 0, v9, a3);
  if ((result & 1) == 0)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 14;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    v18[0] = v13;
    IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode(v13, a3);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, (uint64_t *)v19);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a2 + 32))(a2, v18, 0);
    uint64_t result = (uint64_t)v18[0];
    v18[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
      return WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void WebKit::AuthenticationManager::completeAuthenticationChallenge(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a2;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    return;
  }
  unsigned int v8 = *(_DWORD *)(v4 - 8);
  unint64_t v9 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = *(void **)(v4 + 16 * v12);
  if (v13 == a2)
  {
LABEL_6:
    uint64_t v15 = *(void **)(v4 + 16 * v12 + 8);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    if (!v15) {
      return;
    }
    int v16 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, 1uLL, (unint64_t)&v51);
    int v17 = HIDWORD(v50);
    uint64_t v18 = v49;
    *((void *)v49 + HIDWORD(v50)) = *v16;
    unsigned int v19 = v17 + 1;
    HIDWORD(v50) = v17 + 1;
    if (*(unsigned char *)(WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v15 + 1))
                  + 21) != 8)
    {
      uint64_t v48 = v18;
      uint64_t v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)v5);
      uint64_t v22 = v21;
      uint64_t v23 = v20;
      if (*v5) {
        uint64_t v24 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
      }
      else {
        uint64_t v24 = 0;
      }
      if ((void *)v24 == v21)
      {
        uint64_t v18 = v48;
        if (v19)
        {
LABEL_26:
          uint64_t v30 = v18;
          do
          {
            uint64_t v31 = (void *)*v5;
            unsigned int v32 = *(_DWORD *)(*v5 - 8);
            unint64_t v33 = *(void *)v30 + ~(*(void *)v30 << 32);
            unint64_t v34 = (v33 ^ (v33 >> 22)) + ~((v33 ^ (v33 >> 22)) << 13);
            unint64_t v35 = (9 * (v34 ^ (v34 >> 8))) ^ ((9 * (v34 ^ (v34 >> 8))) >> 15);
            uint64_t v36 = v32 & (((v35 + ~(v35 << 27)) >> 31) ^ (v35 + ~(v35 << 27)));
            uint64_t v37 = *(void *)(*v5 + 16 * v36);
            if (v37 != *(void *)v30)
            {
              int v38 = 1;
              while (v37)
              {
                uint64_t v36 = (v36 + v38) & v32;
                uint64_t v37 = v31[2 * v36];
                ++v38;
                if (v37 == *(void *)v30) {
                  goto LABEL_33;
                }
              }
              uint64_t v36 = *((unsigned int *)v31 - 1);
            }
LABEL_33:
            long long v39 = &v31[2 * v36];
            char v40 = (void *)v39[1];
            v39[1] = 0;
            uint64_t v51 = v40;
            uint64_t v41 = (void *)*v5;
            if (!*v5 || (v41 += 2 * *((unsigned int *)v41 - 1), v41 != v39))
            {
              if (v41 != v39)
              {
                void *v39 = -1;
                v39[1] = 0;
                ++*(_DWORD *)(*v5 - 16);
                uint64_t v42 = (void *)*v5;
                int v43 = *v5 ? *((_DWORD *)v42 - 3) - 1 : -1;
                *((_DWORD *)v42 - 3) = v43;
                char v44 = (void *)*v5;
                if (*v5)
                {
                  unsigned int v45 = 6 * *((_DWORD *)v44 - 3);
                  unsigned int v46 = *((_DWORD *)v44 - 1);
                  if (v45 < v46 && v46 >= 9)
                  {
                    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v5, v46 >> 1, 0);
                    char v40 = v51;
                  }
                }
              }
            }
            uint64_t v47 = v40[55];
            v40[55] = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v47 + 16))(v47, a3, a4);
            (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            uint64_t v20 = v51;
            uint64_t v51 = 0;
            if (v20) {
              std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)&v51, v20);
            }
            uint64_t v30 = (WTF *)((char *)v30 + 8);
          }
          while (v30 != (WTF *)((char *)v18 + 8 * v19));
        }
LABEL_46:
        if (v18) {
          WTF::fastFree(v18, v20);
        }
        return;
      }
      do
      {
        if ((void *)*v22 != v51 && *(void *)v22[1] == *v15)
        {
          CFTypeRef v25 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v15 + 1));
          long long v26 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v22[1] + 8));
          if (WebCore::ProtectionSpaceBase::compare(v25, v26, v27))
          {
            if (v19 == v50)
            {
              long long v28 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, v19 + 1, (unint64_t)v22);
              unsigned int v19 = HIDWORD(v50);
              uint64_t v48 = v49;
              long long v29 = (void *)((char *)v49 + 8 * HIDWORD(v50));
            }
            else
            {
              long long v29 = (void *)((char *)v48 + 8 * v19);
              long long v28 = v22;
            }
            *long long v29 = *v28;
            HIDWORD(v50) = ++v19;
          }
        }
        while (1)
        {
          v22 += 2;
          if (v22 == v23) {
            break;
          }
          if ((unint64_t)(*v22 + 1) > 1) {
            goto LABEL_23;
          }
        }
        uint64_t v22 = v23;
LABEL_23:
        ;
      }
      while (v22 != (void *)v24);
      uint64_t v18 = v49;
    }
    if (v19) {
      goto LABEL_26;
    }
    goto LABEL_46;
  }
  int v14 = 1;
  while (v13)
  {
    uint64_t v12 = (v12 + v14) & v8;
    uint64_t v13 = *(void **)(v4 + 16 * v12);
    ++v14;
    if (v13 == a2) {
      goto LABEL_6;
    }
  }
}

IPC::Encoder *WebKit::AuthenticationManager::negotiatedLegacyTLS(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 1u);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 24) + 56))(v2 + 24);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 338;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v2 + 24) + 32))(v2 + 24, &v10, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v2 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v2 + 128));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

void WebKit::ConsumerSharedCARingBuffer::map(WebCore::CARingBuffer *this@<X0>, WebCore::CARingBuffer **a2@<X8>)
{
  WebCore::CARingBuffer::computeSizeForBuffers((WebCore::CARingBuffer *)this);
  if (!v12 && v13 < 0xFFFFFFFFFFFFFFE8)
  {
    WebCore::SharedMemory::map();
    if (*(void *)buf)
    {
      if (*(void *)(*(void *)buf + 8) >= v13 + 24)
      {
        uint64_t v5 = (WebCore::CARingBuffer *)WTF::fastMalloc((WTF *)0x50);
        uint64_t v6 = *(unsigned int **)buf;
        *(void *)long long buf = 0;
        __int16 v7 = (WebCore::CARingBuffer *)WebCore::CARingBuffer::CARingBuffer(v5);
        *((void *)v7 + 9) = v6;
        *(void *)__int16 v7 = &unk_1EE9D3338;
        *a2 = v7;
        WebCore::CARingBuffer::initialize(v7);
LABEL_10:
        unsigned int v8 = *(unsigned int **)buf;
        *(void *)long long buf = 0;
        if (v8) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
        }
        return;
      }
      uint64_t v3 = qword_1EB358078;
      if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_FAULT))
      {
        v10[0] = 0;
        uint64_t v4 = "ConsumerSharedCARingBuffer::map: Storage size is insufficient for format and frameCount";
LABEL_14:
        _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, v4, (uint8_t *)v10, 2u);
      }
    }
    else
    {
      uint64_t v3 = qword_1EB358078;
      if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_FAULT))
      {
        v10[0] = 0;
        uint64_t v4 = "ConsumerSharedCARingBuffer::map: Failed to map memory";
        goto LABEL_14;
      }
    }
    *a2 = 0;
    goto LABEL_10;
  }
  uint64_t v9 = qword_1EB358078;
  if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "ConsumerSharedCARingBuffer::map: Overflowed when trying to compute the storage size", buf, 2u);
  }
  *a2 = 0;
}

void WebKit::ProducerSharedCARingBuffer::allocate(WebKit::ProducerSharedCARingBuffer *this@<X0>, const WebCore::CAAudioStreamDescription *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  uint64_t v7 = (v6 | HIWORD(v6)) + 1;
  unsigned int v8 = WebCore::CAAudioStreamDescription::bytesPerFrame(this);
  WebCore::CAAudioStreamDescription::numberOfChannelStreams(this);
  WebCore::CARingBuffer::computeSizeForBuffers((WebCore::CARingBuffer *)v8);
  if (v24 || v25 >= 0xFFFFFFFFFFFFFFE8)
  {
LABEL_14:
    int v16 = qword_1EB358078;
    if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v17) = 0;
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "ProducerSharedCARingBuffer::allocate: Overflowed when trying to compute the storage size", (uint8_t *)&v17, 2u);
    }
    goto LABEL_16;
  }
  WebCore::SharedMemory::allocate((WebCore::SharedMemory *)(v25 + 24));
  if (!v23)
  {
LABEL_16:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
    return;
  }
  WebCore::SharedMemory::createHandle();
  if (v22)
  {
    uint64_t v9 = *(void **)(v23 + 16);
    v9[1] = 0;
    uint64_t v9[2] = 0;
    *uint64_t v9 = 0;
    unint64_t v10 = (WebCore::CARingBuffer *)WTF::fastMalloc((WTF *)0x50);
    uint64_t v11 = v23;
    uint64_t v23 = 0;
    char v12 = (WebCore::CARingBuffer *)WebCore::CARingBuffer::CARingBuffer(v10);
    *((void *)v12 + 9) = v11;
    *(void *)char v12 = &unk_1EE9D3368;
    WebCore::CARingBuffer::initialize(v12);
    int v17 = v10;
    if (v22)
    {
      WTF::MachSendRight::MachSendRight();
      *(void *)&long long v19 = v21;
      *((void *)&v19 + 1) = v7;
      unint64_t v13 = v17;
      int v17 = 0;
      *(void *)a3 = v13;
      WTF::MachSendRight::MachSendRight();
      *(_OWORD *)(a3 + 16) = v19;
      *(unsigned char *)(a3 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 1;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v18);
      int v14 = v17;
      int v17 = 0;
      if (v14) {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v17, v14);
      }
      if (v22) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
      }
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_14;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
LABEL_11:
  uint64_t v15 = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (v15) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v15);
  }
}

uint64_t WebKit::GamepadData::GamepadData(uint64_t a1, int a2, _DWORD **a3, _DWORD **a4, uint64_t *a5, uint64_t *a6, unsigned __int8 **a7, double a8)
{
  *(_DWORD *)a1 = a2;
  unint64_t v13 = *a3;
  if (*a3) {
    *v13 += 2;
  }
  *(void *)(a1 + 8) = v13;
  int v14 = *a4;
  if (*a4) {
    *v14 += 2;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  *(void *)(a1 + 16) = v14;
  uint64_t v15 = *((unsigned int *)a5 + 3);
  if (v15)
  {
    if (v15 >> 29) {
      goto LABEL_18;
    }
    uint64_t v16 = WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 3WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v15;
    *(void *)(a1 + 24) = v16;
    uint64_t v17 = *((unsigned int *)a5 + 3);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = *a5;
      uint64_t v20 = 8 * v17;
      do
      {
        *(void *)(v16 + 8 * v18) = *(void *)(*(void *)(v19 + 8 * v18) + 8);
        ++v18;
        v20 -= 8;
      }
      while (v20);
      *(_DWORD *)(a1 + 36) = v18;
    }
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v21 = *((unsigned int *)a6 + 3);
  if (!v21) {
    goto LABEL_17;
  }
  if (v21 >> 29)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198D86788);
  }
  uint64_t v22 = WTF::fastMalloc((WTF *)(8 * v21));
  *(_DWORD *)(a1 + 48) = v21;
  *(void *)(a1 + 40) = v22;
  uint64_t v23 = *((unsigned int *)a6 + 3);
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a6;
    uint64_t v26 = 8 * v23;
    do
    {
      *(void *)(v22 + 8 * v24) = *(void *)(*(void *)(v25 + 8 * v24) + 8);
      ++v24;
      v26 -= 8;
    }
    while (v26);
    *(_DWORD *)(a1 + 5WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v24;
  }
LABEL_17:
  *(double *)(a1 + 56) = a8;
  WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::HashTable((uint64_t *)(a1 + 64), a7);
  return a1;
}

void std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[55];
    a2[55] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = (const void *)a2[54];
    a2[54] = 0;
    if (v4) {
      CFRelease(v4);
    }
    unsigned int v5 = (const void *)a2[53];
    a2[53] = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a2 + 1), (WTF::StringImpl *)a2);
    WTF::fastFree((WTF *)a2, v6);
  }
}

void WebKit::ConsumerSharedCARingBuffer::~ConsumerSharedCARingBuffer(WebKit::ConsumerSharedCARingBuffer *this)
{
  *(void *)this = &unk_1EE9B9FD8;
  uint64_t v2 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }

  WebCore::CARingBuffer::~CARingBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B9FD8;
  uint64_t v2 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  WebCore::CARingBuffer::~CARingBuffer(this);

  WTF::fastFree(v3, v4);
}

void WebKit::ProducerSharedCARingBuffer::~ProducerSharedCARingBuffer(WebKit::ProducerSharedCARingBuffer *this)
{
  *(void *)this = &unk_1EE9B9FD8;
  uint64_t v2 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }

  WebCore::CARingBuffer::~CARingBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B9FD8;
  uint64_t v2 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  WebCore::CARingBuffer::~CARingBuffer(this);

  WTF::fastFree(v3, v4);
}

uint64_t *WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (!*a2) {
    return a1;
  }
  int v4 = *((_DWORD *)v3 - 3);
  if (!v4) {
    return a1;
  }
  unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*((_DWORD *)v3 - 3));
  uint64_t v7 = WTF::fastMalloc((WTF *)(v6 + 16));
  uint64_t v8 = v7;
  uint64_t v9 = v7 + 16;
  if (v6) {
    memset((void *)(v7 + 16), 255, v6);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  unint64_t v10 = *a2;
  if (*a2)
  {
    uint64_t v11 = *((unsigned int *)v10 - 1);
    char v12 = &v10[v11];
    if (*((_DWORD *)v10 - 3))
    {
      unint64_t v13 = *a2;
      if (v11)
      {
        unint64_t v13 = *a2;
        while (*v13 >= 0xFEu)
        {
          ++v13;
          if (!--v11)
          {
            unint64_t v13 = v12;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    unint64_t v13 = &v10[v11];
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v11 = 0;
  }
  char v12 = &v10[v11];
LABEL_15:
  if (v10) {
    v10 += *((unsigned int *)v10 - 1);
  }
  while (v13 != v10)
  {
    uint64_t v14 = *a1;
    if (*a1) {
      int v15 = *(_DWORD *)(v14 - 8);
    }
    else {
      int v15 = 0;
    }
    int v16 = 0;
    int v17 = *v13;
    unsigned int v18 = 9 * ((~(v17 << 15) + v17) ^ ((~(v17 << 15) + v17) >> 10));
    unsigned int v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
    do
    {
      uint64_t v20 = v19 & v15;
      unsigned int v19 = ++v16 + v20;
    }
    while (*(unsigned __int8 *)(v14 + v20) != 255);
    *(unsigned char *)(v14 + v20) = v17;
    uint64_t v21 = v13 + 1;
    unint64_t v13 = v12;
    if (v21 != v12)
    {
      unint64_t v13 = v21;
      while (*v13 >= 0xFEu)
      {
        if (++v13 == v12)
        {
          unint64_t v13 = v12;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(void *a1, uint64_t *a2)
{
  int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v5 = *a2;
  *a2 = 0;
  void *v4 = &unk_1EE9D3398;
  v4[1] = v5;
  if (v5)
  {
    *a1 = v4;
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = 139;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(BOOL)>,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D3398;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(BOOL)>,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D3398;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(BOOL)>,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D33C0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D33C0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (*(_WORD *)(v3 + 56))
      {
        if (a2)
        {
          *(_WORD *)(v3 + 56) = 2;
        }
        else
        {
          CFTypeRef cf = 0;
          WebKit::WebPaymentCoordinatorProxy::didReachFinalState(v3, (WebCore::PaymentSessionError *)&cf);
          CFTypeRef v4 = cf;
          CFTypeRef cf = 0;
          if (v4) {
            CFRelease(v4);
          }
        }
      }
    }
  }
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    uint64_t *v16 = v11;
    uint64_t v20 = *a3;
    *a3 = 0;
    uint64_t v21 = (void *)v16[1];
    v16[1] = v20;
    if (v21) {
      std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)(v16 + 1), v21);
    }
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v23;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        int v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, v16);
        uint64_t v25 = *a1;
        if (*a1) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  unsigned int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      unsigned int v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        uint64_t *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = *a2;
        int v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v8 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v29 = *a3;
  *a3 = 0;
  unsigned int v32 = (void *)v16[1];
  uint64_t v31 = v16 + 1;
  uint64_t v30 = v32;
  *uint64_t v31 = v29;
  if (v32)
  {
    std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v31, v30);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 16 * v25);
          uint64_t v29 = v27 + 1;
          unint64_t v28 = (void *)v27[1];
          v27[1] = 0;
          if (v28) {
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v29, v28);
          }
          *uint64_t v27 = *v13;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (void *)(v30 + 8);
          *uint64_t v31 = 0;
          *uint64_t v29 = v32;
          int v10 = (void *)*v31;
          *uint64_t v31 = 0;
          if (v10) {
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v31, v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v17 = *(void **)(v15 + 8);
          int v16 = (void *)(v15 + 8);
          int v10 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}