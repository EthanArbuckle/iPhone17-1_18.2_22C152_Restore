uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA388[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 907;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  v25 = v43;
  v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v26 = 907;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  v28 = v47;
  v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      *unint64_t v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1001;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    *uint64_t v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  v27 = v45;
  v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v28 = 1001;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::QueryCounterEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1028;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1028;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3668;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE54u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  v29 = v63;
  v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    double v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3668, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA398[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3665;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE51u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  v29 = v63;
  v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3665, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA3A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v57, v9);
    if (!(_BYTE)v59) {
      goto LABEL_101;
    }
    unint64_t v45 = v57;
    unint64_t v44 = v58;
    unint64_t v46 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - (void)v57;
    if (v46 >= (unint64_t)v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v58)
      {
        *(_WORD *)((char *)v57 + v47) = 2871;
        goto LABEL_87;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_87:
    v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v45 + v48)
    {
      unint64_t v48 = v50 - (char *)v45 + 8;
      if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        goto LABEL_111;
      }
      *(void *)v50 = a3;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v56 = 17;
    goto LABEL_102;
  }
LABEL_4:
  result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v9);
  if (!v63)
  {
LABEL_101:
    char v56 = 15;
LABEL_102:
    *(unsigned char *)a4 = v56;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v61;
  unint64_t v14 = v62;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v67, v16))
  {
    LOBYTE(v72) = 11;
    uint64_t v11 = 1;
    LODWORD(v74) = 1;
    LOBYTE(v57) = 0;
    int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
    char v60 = 1;
    if (v74 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
    }
    goto LABEL_53;
  }
  uint64_t v72 = v13;
  unint64_t v73 = v14;
  unint64_t v74 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3667;
    unint64_t v74 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v73 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v74 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v72, a2);
    if (!v73)
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v74;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v74 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v69, (uint64_t)(v6 + 8), v9);
    if (!v71)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v68, (uint64_t)&v69, (uint64_t *)v11);
    if (*((_WORD *)v68 + 25) != 2870)
    {
      int v64 = v68;
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v68);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v67, v16, 0xE53u, (uint64_t)&v69, v9);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v69);
    char v66 = 1;
    if (v70 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v70])(&v68, &v69);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v67);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_50;
    }
    if (v65 == 1)
    {
      char v31 = (char)v64;
LABEL_49:
      LOBYTE(v57) = v31;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_107;
    }
    unint64_t v28 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v64);
    if (!v29)
    {
      char v31 = 13;
      goto LABEL_49;
    }
    if (v66) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v73 = 0;
  }
  if (v65) {
    goto LABEL_107;
  }
  char v30 = v64;
  int v64 = 0;
  uint64_t v72 = (uint64_t)v30;
  unint64_t v73 = v28;
  LODWORD(v74) = 0;
  LOBYTE(v57) = 0;
  int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
  char v60 = 1;
  if (v74 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
  }
LABEL_50:
  if (v66 && v65 != -1) {
    ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9E9D68[v65])(&v72, &v64);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v60)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v57);
    if (v60)
    {
      if (v59 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v59])(&v72, &v57);
      }
    }
    return result;
  }
  if (!v63) {
    goto LABEL_104;
  }
  unint64_t v32 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v61;
  if (v32 < v61)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v62)
    {
      *(_WORD *)(v61 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v6[8];
  if (v35 + 16 >= v36) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v37 = v35 + v34;
    if (v36 <= v37) {
      unint64_t v37 = 0;
    }
    v6[10] = v37;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v37);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v64, v15);
    char v6 = (uint64_t *)v64;
    uint64_t v72 = 0;
    IPC::Connection::createSyncMessageEncoder(3667, a3, &v72, &v69);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v69, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v72, (uint64_t *)&v69, 0, (uint64_t)&v57, v9);
    a2 = (int *)v58;
    if (v58)
    {
      if (v58 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v57;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    unint64_t v38 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v57);
    if (!(_BYTE)v39) {
      break;
    }
    if (!v58)
    {
      unint64_t v40 = v57;
      unint64_t v57 = 0;
      *(void *)a4 = v40;
      *(void *)(a4 + 8) = v38;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[a2])(&v68, &v57);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v35 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v58;
  if (v58 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v41 = v69;
  int v69 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v39);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA3B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v62, v9);
    if (!(_BYTE)v64) {
      goto LABEL_105;
    }
    v50 = v62;
    unint64_t v49 = v63;
    unint64_t v51 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v52 = v51 - (void)v62;
    if (v51 >= (unint64_t)v62)
    {
      unint64_t v53 = v52 + 2;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v53 <= v63)
      {
        *(_WORD *)((char *)v62 + v52) = 2871;
        goto LABEL_91;
      }
      unint64_t v49 = 0;
    }
    unint64_t v53 = 0;
LABEL_91:
    unint64_t v55 = (char *)(((unint64_t)v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v55 >= (char *)v50 + v53)
    {
      unint64_t v53 = v55 - (char *)v50 + 8;
      if ((unint64_t)(v55 - (char *)v50) > 0xFFFFFFFFFFFFFFF7 || v53 > v49) {
        goto LABEL_115;
      }
      *(void *)unint64_t v55 = a3;
    }
    if (v49)
    {
      uint64_t v57 = *((void *)v6 + 9);
      unint64_t v58 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v59 = *((void *)v6 + 8);
      if (v58 + 16 >= v59) {
        unint64_t v58 = 0;
      }
      if (v53 <= 0x10) {
        unint64_t v53 = 16;
      }
      unint64_t v60 = v58 + v53;
      if (v59 <= v60) {
        unint64_t v60 = 0;
      }
      *((void *)v6 + 10) = v60;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v57 + 16) + 128), v60) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_115:
    char v61 = 17;
    goto LABEL_106;
  }
LABEL_4:
  result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v66, v9);
  if (!v68)
  {
LABEL_105:
    char v61 = 15;
LABEL_106:
    *(unsigned char *)a4 = v61;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v66;
  unint64_t v14 = v67;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v72, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v72, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v62) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&v74);
    char v65 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v69, &v74);
    }
    goto LABEL_57;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3657;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_109;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v69) = 0;
        unsigned __int8 v71 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v69) = 16;
      int v70 = 1;
LABEL_41:
      unsigned __int8 v71 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      int v69 = v73;
      int v70 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v72, v16, 0xE49u, (uint64_t)&v74, v9);
    LOBYTE(v69) = 0;
    int v70 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v69, (uint64_t)&v74);
    unsigned __int8 v71 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v72);
    if (!v71)
    {
      LOBYTE(v62) = 0;
      char v65 = 0;
      goto LABEL_54;
    }
    if (v70 == 1)
    {
      char v36 = (char)v69;
LABEL_53:
      LOBYTE(v62) = v36;
      int v64 = 1;
      char v65 = 1;
      goto LABEL_54;
    }
    if (v70) {
      goto LABEL_111;
    }
    unint64_t v33 = IPC::Decoder::decode<std::tuple<long long>>(v69);
    if (!v34)
    {
      char v36 = 13;
      goto LABEL_53;
    }
    unint64_t v20 = v71;
    if (v71) {
      break;
    }
LABEL_108:
    __break(1u);
LABEL_109:
    unint64_t v19 = 0;
  }
  if (v70) {
    goto LABEL_111;
  }
  unint64_t v35 = v69;
  int v69 = 0;
  unint64_t v74 = v35;
  unint64_t v75 = v33;
  int v76 = 0;
  LOBYTE(v62) = 0;
  int v64 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&v74);
  char v65 = 1;
  if (v76 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v73, &v74);
  }
LABEL_54:
  if (v71 && v70 != -1) {
    ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v70])(&v74, &v69);
  }
LABEL_57:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
  if (v65)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v62);
    if (v65)
    {
      if (v64 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v64])(&v74, &v62);
      }
    }
    return result;
  }
  unint64_t v20 = v68;
  if (!v68) {
    goto LABEL_108;
  }
  unint64_t v37 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = v37 - v66;
  if (v37 < v66)
  {
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v39 = 0;
    if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= v67)
    {
      *(_WORD *)(v66 + v38) = 2870;
      unint64_t v39 = v38 + 2;
    }
  }
  unint64_t v40 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *((void *)v6 + 8);
  if (v40 + 16 >= v41) {
    goto LABEL_112;
  }
  while (1)
  {
    if (v39 <= 0x10) {
      unint64_t v39 = 16;
    }
    unint64_t v42 = v40 + v39;
    if (v41 <= v42) {
      unint64_t v42 = 0;
    }
    *((void *)v6 + 10) = v42;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v42);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3657, a3, (uint64_t *)&v74, &v69);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v69, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v69, 0, (uint64_t)&v62, v9);
    a2 = (int *)v63;
    if (v63)
    {
      if (v63 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v62;
        goto LABEL_77;
      }
      goto LABEL_111;
    }
    unint64_t v43 = IPC::Decoder::decode<std::tuple<long long>>(v62);
    if (!(_BYTE)v44) {
      break;
    }
    if (!v63)
    {
      unint64_t v45 = v62;
      unint64_t v62 = 0;
      *(void *)a4 = v45;
      *(void *)(a4 + 8) = v43;
LABEL_77:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_78:
      ((void (*)(IPC::Decoder ***, IPC::Decoder **))off_1EE9E9D68[a2])(&v72, &v62);
      goto LABEL_79;
    }
LABEL_111:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_112:
    unint64_t v40 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v63;
  if (v63 != -1) {
    goto LABEL_78;
  }
LABEL_79:
  unint64_t v46 = v69;
  int v69 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v44);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64EXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA3C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 999;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 999;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 987;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 987;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 923;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 923;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 922;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 922;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunciOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 927;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 927;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 926;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 926;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMaskiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v66, v7);
    if (!v68) {
      return 15;
    }
    unint64_t v26 = v66;
    unint64_t v25 = v67;
    unint64_t v27 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v28 = v27 - v66;
    if (v27 >= v66)
    {
      unint64_t v29 = v28 + 2;
      if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v29 <= v67)
      {
        *(_WORD *)(v66 + v28) = 2871;
        goto LABEL_40;
      }
      unint64_t v25 = 0;
    }
    unint64_t v29 = 0;
LABEL_40:
    unint64_t v31 = (void *)((v26 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v31 >= v26 + v29)
    {
      unint64_t v29 = (unint64_t)v31 - v26 + 8;
      if ((unint64_t)v31 - v26 > 0xFFFFFFFFFFFFFFF7 || v29 > v25) {
        return 17;
      }
      *unint64_t v31 = a3;
    }
    if (v25)
    {
      unint64_t v33 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = *(void *)(a1 + 64);
      if (v33 + 16 >= v34) {
        unint64_t v33 = 0;
      }
      if (v29 <= 0x10) {
        unint64_t v29 = 16;
      }
      unint64_t v35 = v33 + v29;
      if (v34 <= v35) {
        unint64_t v35 = 0;
      }
      *(void *)(a1 + 80) = v35;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v35) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v66, v7);
  if (!v68) {
    return 15;
  }
  unint64_t v9 = v66;
  unint64_t v10 = v67;
  unint64_t v11 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v66;
  if (v11 >= v66)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v67)
    {
      *(_WORD *)(v66 + v12) = 942;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  if (v13 < v10)
  {
    *(unsigned char *)(v9 + v13) = *((unsigned char *)a2 + 4);
    if (v13 + 1 < v10)
    {
      *(unsigned char *)(v9 + v13 + 1) = *((unsigned char *)a2 + 5);
      if (v13 + 2 < v10)
      {
        *(unsigned char *)(v9 + v13 + 2) = *((unsigned char *)a2 + 6);
        if (v13 + 3 < v10)
        {
          *(unsigned char *)(v9 + v13 + 3) = *((unsigned char *)a2 + 7);
          uint64_t v20 = *(void *)(a1 + 72);
          unint64_t v21 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v22 = *(void *)(a1 + 64);
          if (v21 + 16 >= v22) {
            unint64_t v21 = 0;
          }
          if (v13 <= 0xC) {
            unint64_t v13 = 12;
          }
          unint64_t v23 = v13 + v21 + 4;
          if (v22 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(a1 + 80) = v23;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v20 + 16) + 128), v23) != 0x80000000
            && !*(_DWORD *)(a1 + 116))
          {
            return 0;
          }
          if (*(unsigned char *)(a1 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
          }
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + 116) = 0;
          return v24;
        }
      }
    }
  }
  if (!v68)
  {
    __break(1u);
    goto LABEL_82;
  }
  unint64_t v37 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = v37 - v66;
  if (v37 < v66)
  {
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v39 = 0;
    if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= v67)
    {
      *(_WORD *)(v66 + v38) = 2870;
      unint64_t v39 = v38 + 2;
    }
  }
  unint64_t v40 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *(void *)(a1 + 64);
  if (v40 + 16 >= v41) {
    unint64_t v40 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v42 = v40 + v39;
  if (v41 <= v42) {
    unint64_t v42 = 0;
  }
  *(void *)(a1 + 80) = v42;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v42);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(a1 + 8));
  unint64_t v43 = v65;
  unint64_t v44 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v44 = 942;
  *((void *)v44 + 1) = a3;
  unint64_t v45 = v44;
  *((void *)v44 + 66) = (char *)v44 + 16;
  *((void *)v44 + 67) = 512;
  *((void *)v44 + 68) = 0;
  *((void *)v44 + 70) = 0;
  *((void *)v44 + 69) = 0;
  IPC::Encoder::encodeHeader(v44);
  int v69 = v45;
  int v46 = *a2;
  unint64_t v47 = (_DWORD *)IPC::Encoder::grow(v45, 4uLL, 4);
  if (v48 <= 3)
  {
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x1990B6A50);
  }
  _DWORD *v47 = v46;
  char v49 = *((unsigned char *)a2 + 4);
  v50 = (unsigned char *)IPC::Encoder::grow(v45, 1uLL, 1);
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B6A70);
  }
  unsigned char *v50 = v49;
  char v52 = *((unsigned char *)a2 + 5);
  unint64_t v53 = (unsigned char *)IPC::Encoder::grow(v45, 1uLL, 1);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B6A90);
  }
  *unint64_t v53 = v52;
  char v55 = *((unsigned char *)a2 + 6);
  char v56 = (unsigned char *)IPC::Encoder::grow(v45, 1uLL, 1);
  if (!v57)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B6AB0);
  }
  unsigned char *v56 = v55;
  char v58 = *((unsigned char *)a2 + 7);
  unint64_t v59 = (unsigned char *)IPC::Encoder::grow(v45, 1uLL, 1);
  if (!v60)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B6AD0);
  }
  *unint64_t v59 = v58;
  uint64_t v24 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v69, 1, 0);
  unint64_t v62 = v69;
  int v69 = 0;
  if (v62)
  {
    IPC::Encoder::~Encoder(v62, v61);
    WTF::fastFree(v63, v64);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65);
  return v24;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstancedBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    uint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      *uint64_t v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 990;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v78 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v78 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v78)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v79 = v78;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v79 = v78;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v79) {
      goto LABEL_48;
    }
    _DWORD *v32 = a2[4];
  }
  if (v79)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  int v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v46 = 990;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x1990B7008);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  uint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B7028);
  }
  *uint64_t v51 = v50;
  int v53 = a2[2];
  uint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B7048);
  }
  *uint64_t v54 = v53;
  int v56 = a2[3];
  uint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B7068);
  }
  *uint64_t v57 = v56;
  int v59 = a2[4];
  uint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B7088);
  }
  *uint64_t v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstancedBaseVertexBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v95, v7);
    if (!v97) {
      return 15;
    }
    unint64_t v79 = v95;
    unint64_t v78 = v96;
    unint64_t v80 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v81 = v80 - v95;
    if (v80 >= v95)
    {
      unint64_t v82 = v81 + 2;
      if (v81 <= 0xFFFFFFFFFFFFFFFDLL && v82 <= v96)
      {
        *(_WORD *)(v95 + v81) = 2871;
        goto LABEL_89;
      }
      unint64_t v78 = 0;
    }
    unint64_t v82 = 0;
LABEL_89:
    v84 = (void *)((v79 + v82 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v84 >= v79 + v82)
    {
      unint64_t v82 = (unint64_t)v84 - v79 + 8;
      if ((unint64_t)v84 - v79 > 0xFFFFFFFFFFFFFFF7 || v82 > v78) {
        return 17;
      }
      void *v84 = a3;
    }
    if (v78)
    {
      unint64_t v86 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v87 = *(void *)(a1 + 64);
      if (v86 + 16 >= v87) {
        unint64_t v86 = 0;
      }
      if (v82 <= 0x10) {
        unint64_t v82 = 16;
      }
      unint64_t v88 = v86 + v82;
      if (v87 <= v88) {
        unint64_t v88 = 0;
      }
      *(void *)(a1 + 80) = v88;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v88) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v95, v7);
  if (!v97) {
    return 15;
  }
  unint64_t v9 = v95;
  unint64_t v10 = v96;
  unint64_t v11 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v95;
  if (v11 >= v95)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v96)
    {
      *(_WORD *)(v95 + v12) = 995;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v93 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v93 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v93 = v10;
  }
  unint64_t v29 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v92 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= v93)
    {
      *(void *)(v9 + v31) = *((void *)a2 + 2);
      unint64_t v92 = v93;
      unint64_t v13 = v31 + 8;
    }
  }
  else
  {
    unint64_t v92 = v93;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v90 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v92)
    {
      *(_DWORD *)(v9 + v34) = a2[6];
      unint64_t v90 = v92;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v90 = v92;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v91 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v90)
    {
      *(_DWORD *)(v9 + v37) = a2[7];
      unint64_t v91 = v90;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v91 = v90;
  }
  uint64_t v38 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v38 >= v9 + v13)
  {
    unint64_t v39 = (char *)v38 - v9;
    if ((unint64_t)v38 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_58;
    }
    unint64_t v13 = (unint64_t)(v39 + 4);
    if ((unint64_t)(v39 + 4) > v91) {
      goto LABEL_58;
    }
    _DWORD *v38 = a2[8];
  }
  if (v91)
  {
    unint64_t v40 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = *(void *)(a1 + 64);
    if (v40 + 16 >= v41) {
      unint64_t v40 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v42 = v40 + v13;
    if (v41 <= v42) {
      unint64_t v43 = 0;
    }
    else {
      unint64_t v43 = v42;
    }
    *(void *)(a1 + 80) = v43;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v44 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v44;
  }
LABEL_58:
  if (!v97)
  {
    __break(1u);
    goto LABEL_110;
  }
  unint64_t v45 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = v45 - v95;
  if (v45 < v95)
  {
    unint64_t v47 = 0;
  }
  else
  {
    unint64_t v47 = 0;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v96)
    {
      *(_WORD *)(v95 + v46) = 2870;
      unint64_t v47 = v46 + 2;
    }
  }
  unint64_t v48 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = *(void *)(a1 + 64);
  if (v48 + 16 >= v49) {
    unint64_t v48 = 0;
  }
  if (v47 <= 0x10) {
    unint64_t v47 = 16;
  }
  unint64_t v50 = v48 + v47;
  if (v49 <= v50) {
    unint64_t v50 = 0;
  }
  *(void *)(a1 + 80) = v50;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v50);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v94, (uint64_t **)(a1 + 8));
  uint64_t v51 = v94;
  unint64_t v52 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v52 = 995;
  *((void *)v52 + 1) = a3;
  *((void *)v52 + 66) = (char *)v52 + 16;
  *((void *)v52 + 67) = 512;
  *((void *)v52 + 68) = 0;
  *((void *)v52 + 70) = 0;
  *((void *)v52 + 69) = 0;
  IPC::Encoder::encodeHeader(v52);
  v98 = v52;
  int v53 = *a2;
  uint64_t v54 = (_DWORD *)IPC::Encoder::grow(v52, 4uLL, 4);
  if (v55 <= 3)
  {
LABEL_110:
    __break(0xC471u);
    JUMPOUT(0x1990B76ACLL);
  }
  *uint64_t v54 = v53;
  int v56 = a2[1];
  uint64_t v57 = (_DWORD *)IPC::Encoder::grow(v52, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B76CCLL);
  }
  *uint64_t v57 = v56;
  int v59 = a2[2];
  uint64_t v60 = (_DWORD *)IPC::Encoder::grow(v52, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B76ECLL);
  }
  *uint64_t v60 = v59;
  uint64_t v62 = *((void *)a2 + 2);
  unint64_t v63 = (void *)IPC::Encoder::grow(v52, 8uLL, 8);
  if (v64 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B770CLL);
  }
  void *v63 = v62;
  int v65 = a2[6];
  unint64_t v66 = (_DWORD *)IPC::Encoder::grow(v52, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B772CLL);
  }
  *unint64_t v66 = v65;
  int v68 = a2[7];
  unint64_t v69 = (_DWORD *)IPC::Encoder::grow(v52, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B774CLL);
  }
  *unint64_t v69 = v68;
  int v71 = a2[8];
  uint64_t v72 = (_DWORD *)IPC::Encoder::grow(v52, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B776CLL);
  }
  *uint64_t v72 = v71;
  uint64_t v44 = IPC::Connection::sendMessageImpl((uint64_t)v51, (uint64_t *)&v98, 1, 0);
  unint64_t v75 = v98;
  v98 = 0;
  if (v75)
  {
    IPC::Encoder::~Encoder(v75, v74);
    WTF::fastFree(v76, v77);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v94);
  return v44;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClipControlEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 940;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 940;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ProvokingVertexANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      *unint64_t v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1027;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    *uint64_t v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1027;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonModeANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1024;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1024;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffsetClampEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v57, v7);
    if (!v59) {
      return 15;
    }
    unint64_t v45 = v57;
    unint64_t v44 = v58;
    unint64_t v46 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - v57;
    if (v46 >= v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v58)
      {
        *(_WORD *)(v57 + v47) = 2871;
        goto LABEL_60;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_60:
    unint64_t v50 = (void *)((v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v45 + v48)
    {
      unint64_t v48 = (unint64_t)v50 - v45 + 8;
      if ((unint64_t)v50 - v45 > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        return 17;
      }
      void *v50 = a3;
    }
    if (v44)
    {
      unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = *(void *)(a1 + 64);
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v54 = v52 + v48;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      *(void *)(a1 + 80) = v54;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v54) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v57, v7);
  if (!v59) {
    return 15;
  }
  unint64_t v9 = v57;
  unint64_t v10 = v58;
  unint64_t v11 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v57;
  if (v11 >= v57)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v58)
    {
      *(_WORD *)(v57 + v12) = 1026;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    unint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = *((_DWORD *)a2 + 2);
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  unint64_t v33 = v59;
  if (v59)
  {
    unint64_t v34 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 - v57;
    if (v34 < v57)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v33 = 0;
      if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v58)
      {
        *(_WORD *)(v57 + v35) = 2870;
        unint64_t v33 = v35 + 2;
      }
    }
    unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = *(void *)(a1 + 64);
    if (v36 + 16 < v10) {
      goto LABEL_43;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v36 = 0;
LABEL_43:
  if (v33 <= 0x10) {
    unint64_t v33 = 16;
  }
  unint64_t v37 = v36 + v33;
  if (v10 <= v37) {
    unint64_t v37 = 0;
  }
  *(void *)(a1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(a1 + 8));
  uint64_t v38 = v56;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1026;
  *((void *)v39 + 1) = a3;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  uint64_t v60 = v39;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v39, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v39, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v39, a2[2]);
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v60, 1, 0);
  unint64_t v41 = v60;
  uint64_t v60 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisampleANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    uint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1033;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1033;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9D48[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA3D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetInternalformativEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetInternalformativEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SetDrawingBufferColorSpace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, CFTypeRef **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    uint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1040;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)&v47, *a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1040;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v26, *a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteExternalSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      *unint64_t v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 969;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    *uint64_t v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  uint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 969;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  uint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteRenderingBackendProxy::*&)(void),WebKit::RemoteRenderingBackendProxy*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy()::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EA420;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EA420;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy()::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      char v4 = 0;
      uint64_t v5 = *(void *)(v2 + 24);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x19972E8D0](v5);
      }
      ++*(void *)(v5 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
      }
      uint64_t v7 = *((void *)v3 + 1);
      uint64_t v8 = *(void *)(v2 + 32);
      unint64_t v11 = &v12;
      uint64_t v12 = v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseRenderingBackend>(v8, &v11, 0, 1, 0);
      unint64_t v10 = *(atomic_uchar **)(v2 + 24);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(v10, v9);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EA448;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 2));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 1));
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9EA470;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EA470;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(void)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      char v3 = 0;
      uint64_t v4 = *(void *)(v2 + 24);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
      if (v3) {
        MEMORY[0x19972E8D0](v4);
      }
      ++*(void *)(v4 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v4);
      }
      WebKit::GPUProcessConnection::didBecomeUnresponsive(v2);
      uint64_t v7 = *(atomic_uchar **)(v2 + 24);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(v7, v6);
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (a2) {
    bzero((void *)(v6 + 16), 24 * a2);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v32 = v4;
    while (1)
    {
      unint64_t v11 = (uint64_t *)(v3 + 24 * v10);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v12 == -1) {
          goto LABEL_17;
        }
        uint64_t v13 = *a1;
        if (*a1) {
          int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          int v14 = 0;
        }
        unint64_t v15 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
        unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
        int v19 = 1;
        do
        {
          unsigned int v20 = v18;
          uint64_t v21 = (uint64_t *)(v13 + 24 * v18);
          unsigned int v18 = (v18 + v19++) & v14;
        }
        while (*v21);
        unsigned int v22 = v20;
        uint64_t v23 = v13 + 24 * v20;
        unint64_t v26 = *(atomic_uchar **)(v23 + 8);
        unint64_t v25 = (void *)(v23 + 8);
        unint64_t v24 = v26;
        void *v25 = 0;
        if (v26) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v24, v7);
        }
        *uint64_t v21 = *v11;
        uint64_t v27 = v3 + 24 * v10;
        void *v25 = *(void *)(v27 + 8);
        uint64_t v28 = *(void *)(v27 + 16);
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 16) = 0;
        *(void *)(v13 + 24 * v22 + 16) = v28;
        unint64_t v29 = *(atomic_uchar **)(v27 + 8);
        *(void *)(v27 + 8) = 0;
        if (!v29) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v30 = v3 + 24 * v10;
        unint64_t v29 = *(atomic_uchar **)(v30 + 8);
        *(void *)(v30 + 8) = 0;
        if (!v29) {
          goto LABEL_17;
        }
      }
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v29, v7);
LABEL_17:
      if (++v10 == v32) {
        goto LABEL_22;
      }
    }
  }
  if (v3)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v3 - 16), v7);
  }
}

atomic_uchar *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(atomic_uchar *result@<X0>, void *a2@<X1>, atomic_uchar **a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (!*(void *)result)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  int v5 = *(_DWORD *)(v4 - 8);
  unint64_t v6 = *a2 + ~(*a2 << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  unsigned int v9 = v5 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27)));
  uint64_t v10 = *(void *)(v4 + 24 * v9);
  if (v10 != *a2)
  {
    int v12 = 1;
    while (v10)
    {
      unsigned int v9 = (v9 + v12) & v5;
      uint64_t v10 = *(void *)(v4 + 24 * v9);
      ++v12;
      if (v10 == *a2) {
        goto LABEL_3;
      }
    }
    goto LABEL_10;
  }
LABEL_3:
  __n128 result = *(atomic_uchar **)(v4 + 24 * v9 + 8);
  if (result) {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  }
  unint64_t v11 = *(atomic_uchar **)(v4 + 24 * v9 + 16);
  *a3 = result;
  a3[1] = v11;
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>@<X0>(atomic_uchar *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = this;
  char v6 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  if (*((void *)v4 + 3)) {
    ++*((void *)v4 + 1);
  }
  else {
    a2 = 0;
  }
  *a3 = a2;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return this;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (a2) {
    bzero((void *)(v6 + 16), 24 * a2);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      int v12 = (uint64_t *)(v3 + 24 * v10);
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v13 != -1)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            unsigned int v22 = (uint64_t *)(v14 + 24 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          unsigned int v23 = v21;
          uint64_t v24 = v14 + 24 * v21;
          uint64_t v27 = *(atomic_uchar **)(v24 + 8);
          unint64_t v26 = (void *)(v24 + 8);
          unint64_t v25 = v27;
          void *v26 = 0;
          if (v27) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v25, v7);
          }
          *unsigned int v22 = *v12;
          uint64_t v28 = v3 + 24 * v10;
          void *v26 = *(void *)(v28 + 8);
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 8) = 0;
          *(void *)(v28 + 16) = 0;
          *(void *)(v14 + 24 * v23 + 16) = v29;
          uint64_t v30 = *(atomic_uchar **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v30, v7);
          }
        }
      }
      else
      {
        uint64_t v31 = v3 + 24 * v10;
        uint64_t v32 = *(atomic_uchar **)(v31 + 8);
        *(void *)(v31 + 8) = 0;
        if (v32) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return;
  }

  WTF::fastFree((WTF *)(v3 - 16), v7);
}

atomic_uchar *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::Filter &>(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &&,WebCore::Filter &)::{lambda(void)#1}>(void *a1, void *a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = *a3;
  __n128 result = *(atomic_uchar **)(*a3 + 8);
  if (result) {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  }
  uint64_t v6 = (atomic_uchar *)a1[1];
  a1[1] = result;
  if (v6) {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }
  a1[2] = v4;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (void *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        uint64_t v13 = (*v10 + ~(*v10 << 32)) ^ ((*v10 + ~(*v10 << 32)) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          unsigned int v18 = v16;
          uint64_t v19 = *(void *)(v11 + 16 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  int v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[3 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 24 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v3 -= 24;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  int v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = *a3 + ~(*a3 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  unint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v24 = 0;
    int v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = *(unsigned int *)(v6 - 4);
        }
        char v23 = 0;
        uint64_t v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1) {
        uint64_t v24 = v14;
      }
      unsigned int v13 = (v13 + v25) & v8;
      unint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *uint64_t v24 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = *a3;
      unint64_t v14 = v24;
    }
  }
  *unint64_t v14 = v9;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *a2;
  if (*a2) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_11;
    }
LABEL_23:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v14);
    unint64_t v14 = result;
    uint64_t v18 = *a2;
    if (*a2) {
      unint64_t v21 = *(unsigned int *)(v18 - 4);
    }
    else {
      unint64_t v21 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v22 = v18 + 8 * v21;
  char v23 = 1;
LABEL_12:
  *int v5 = (uint64_t)v14;
  v5[1] = v22;
  *((unsigned char *)v5 + 16) = v23;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    int v5 = 0;
    int v6 = 0;
    goto LABEL_3;
  }
  int v5 = *(_DWORD *)(v4 - 4);
  int v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    unsigned int v7 = 8;
    goto LABEL_4;
  }
  unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    unint64_t v10 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v4 + 8 * v12);
      uint64_t v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
        int v21 = 1;
        do
        {
          unsigned int v22 = v20;
          uint64_t v23 = *(void *)(v15 + 8 * v20);
          unsigned int v20 = (v20 + v21++) & v16;
        }
        while (v23);
        uint64_t v24 = (void *)(v15 + 8 * v22);
        *uint64_t v24 = v14;
        if (v13 == a2) {
          unint64_t v10 = v24;
        }
      }
      ++v12;
    }
    while (v12 != v5);
    goto LABEL_17;
  }
  unint64_t v10 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_14;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_5:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_6;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_5;
  }
LABEL_14:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_6:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 - 8);
  unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(a1 + 8 * v8);
  if (v9 == a2) {
    return 1;
  }
  int v10 = 1;
  do
  {
    BOOL v2 = v9 != 0;
    if (!v9) {
      break;
    }
    unsigned int v8 = (v8 + v10) & v4;
    uint64_t v9 = *(void *)(a1 + 8 * v8);
    ++v10;
  }
  while (v9 != a2);
  return v2;
}

void WebKit::WebGPU::RemoteAdapterProxy::~RemoteAdapterProxy(WebKit::WebGPU::RemoteAdapterProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 9) + 80);
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  unint64_t v53 = (unsigned int *)v2;
  uint64_t v3 = *((void *)this + 7);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v55, v5);
  if (!v57) {
    goto LABEL_71;
  }
  unint64_t v19 = v55;
  unint64_t v18 = v56;
  unint64_t v20 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v55;
  if (v20 < v55) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v56)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v55 + v21) = 2871;
LABEL_29:
  uint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *uint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v55, v5);
  if (!v57) {
    goto LABEL_71;
  }
  unint64_t v8 = v55;
  unint64_t v9 = v56;
  int v10 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v55;
  if ((unint64_t)v10 < v55)
  {
    unint64_t v12 = 0;
    if (v56) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v56)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v56)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_95;
    }
    *int v10 = 699;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v57;
  if (v57)
  {
    unint64_t v8 = v55;
    int v10 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_95:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v2 + 8));
  unint64_t v39 = v54;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 699;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v58 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v58, 1, 0);
  unint64_t v42 = v58;
  unint64_t v58 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v51, v52);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
LABEL_71:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v53, v7);
  unint64_t v44 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v44 && atomic_fetch_add((atomic_uint *volatile)v44 + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v44 + 7);
    (*(void (**)(unsigned int *))(*(void *)v44 + 8))(v44);
  }
  unint64_t v45 = (_DWORD *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
    }
    else {
      --v45[2];
    }
  }
  *(void *)this = &unk_1EE9EA6E0;
  unint64_t v46 = (WTF *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1) {
      WTF::fastFree(v46, v43);
    }
    else {
      --*(_DWORD *)v46;
    }
  }
  unint64_t v47 = (WTF *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v47) {
    WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v47, v43);
  }
  unsigned __int8 v48 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t v49 = *((void *)this + 2);
  if (v49)
  {
    *(void *)(v49 + 8) = 0;
    unint64_t v50 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v50)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v50, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v50);
        WTF::fastFree((WTF *)v50, v43);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteAdapterProxy::~RemoteAdapterProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteAdapterProxy::requestDevice(void *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v108);
  if (!v109)
  {
    v112 = 0;
    uint64_t v35 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v35 + 16))(v35, &v112);
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    unint64_t v37 = v112;
    v112 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v37 + 8))(v37);
      }
      else {
        --*((_DWORD *)v37 + 2);
      }
    }
    return std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v108, v36);
  }
  uint64_t v107 = WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v11 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v106 = v11;
  if (!v109) {
    goto LABEL_158;
  }
  uint64_t v7 = *(void *)(a1[9] + 80);
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  v110 = (unsigned int *)v7;
  uint64_t v3 = (uint64_t *)a1[7];
  double v12 = *(double *)(v7 + 120);
  double v8 = INFINITY;
  if (fabs(v12) != INFINITY)
  {
    WTF::ApproximateTime::now(v11);
    double v8 = v12 + v13;
  }
  if (*(uint64_t **)(v7 + 56) != v3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v112, v8);
    if (v114[0])
    {
      char v83 = v112;
      unint64_t v84 = v113;
      unint64_t v85 = ((unint64_t)v112 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v86 = v85 - (void)v112;
      if (v85 < (unint64_t)v112)
      {
        unint64_t v88 = 0;
        unint64_t v87 = v113;
      }
      else
      {
        unint64_t v87 = 0;
        if (v86 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v88 = 0;
        }
        else
        {
          unint64_t v88 = 0;
          if (v86 + 2 <= v113)
          {
            *(_WORD *)((char *)v112 + v86) = 2871;
            unint64_t v87 = v84;
            unint64_t v88 = v86 + 2;
          }
        }
      }
      unint64_t v89 = ((unint64_t)v83 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v89 >= (unint64_t)v83 + v88)
      {
        unint64_t v90 = v89 - (void)v83;
        char v91 = 17;
        if (v90 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_167;
        }
        unint64_t v88 = v90 + 8;
        if (v90 + 8 > v87) {
          goto LABEL_167;
        }
        *(void *)((char *)v83 + v90) = v3;
      }
      if (v87)
      {
        unint64_t v92 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v93 = *(void *)(v7 + 64);
        if (v92 + 16 >= v93) {
          unint64_t v92 = 0;
        }
        if (v88 <= 0x10) {
          unint64_t v88 = 16;
        }
        unint64_t v94 = v92 + v88;
        if (v93 <= v94) {
          unint64_t v95 = 0;
        }
        else {
          unint64_t v95 = v94;
        }
        *(void *)(v7 + 80) = v95;
        unint64_t v96 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v95);
        int v97 = *(_DWORD *)(v7 + 116);
        if (v96 == 0x80000000 || v97 != 0)
        {
          unsigned int v99 = v97 + 1;
          *(_DWORD *)(v7 + 116) = v99;
          if (v99 >= *(_DWORD *)(v7 + 112))
          {
            if (*(unsigned char *)(v7 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
            }
            *(_DWORD *)(v7 + 116) = 0;
          }
        }
        *(void *)(v7 + 56) = v3;
        goto LABEL_6;
      }
      char v91 = 17;
    }
    else
    {
      char v91 = 15;
    }
LABEL_167:
    LOBYTE(v132) = v91;
    goto LABEL_46;
  }
LABEL_6:
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v123, v8);
  if (!v125)
  {
    LOBYTE(v132) = 15;
LABEL_46:
    int v144 = 1;
    goto LABEL_102;
  }
  unint64_t v6 = (unint64_t)v123;
  unint64_t v15 = v124;
  double v4 = (uint64_t **)(v7 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v145, (uint64_t **)(v7 + 8));
  uint64_t v5 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v145, v5))
  {
    unint64_t v132 = v6;
    unint64_t v133 = v15;
    unint64_t v134 = 0;
    unint64_t v16 = (v6 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = v16 - v6;
    if (v16 < v6)
    {
      unint64_t v18 = 0;
      goto LABEL_12;
    }
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v18 = v17 + 2;
      if (v17 + 2 <= v15)
      {
        *(_WORD *)(v6 + v17) = 3625;
        unint64_t v134 = v17 + 2;
        goto LABEL_12;
      }
    }
    goto LABEL_159;
  }
  LOBYTE(v132) = 11;
  uint64_t v5 = 1;
  int v144 = 1;
  LOBYTE(v112) = 0;
  int v121 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v112, (uint64_t)&v132);
  char v122 = 1;
  if (v144 != -1) {
    ((void (*)(WTF::StringImpl **, unint64_t *))off_1EE9EA700[v144])(&v126, &v132);
  }
  while (1)
  {
LABEL_75:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v145);
    if (v122)
    {
      LOBYTE(v132) = 0;
      int v144 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v132, (uint64_t)&v112);
      if (v122 && v121 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9EA700[v121])(&v126, &v112);
      }
      goto LABEL_102;
    }
    if (!v125) {
      goto LABEL_158;
    }
    unint64_t v51 = ((unint64_t)v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v52 = v51 - (void)v123;
    if (v51 < (unint64_t)v123)
    {
      unint64_t v53 = 0;
    }
    else
    {
      unint64_t v53 = 0;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v124)
      {
        *(_WORD *)((char *)v123 + v52) = 2870;
        unint64_t v53 = v52 + 2;
      }
    }
    unint64_t v54 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v55 = *(void *)(v7 + 64);
    if (v54 + 16 >= v55) {
LABEL_164:
    }
      unint64_t v54 = 0;
    if (v53 <= 0x10) {
      unint64_t v53 = 16;
    }
    unint64_t v56 = v54 + v53;
    if (v55 <= v56) {
      unint64_t v56 = 0;
    }
    *(void *)(v7 + 80) = v56;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v56);
    *(_DWORD *)(v7 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v111, v4);
    double v4 = v111;
    v129 = 0;
    IPC::Connection::createSyncMessageEncoder(3625, (uint64_t)v3, (uint64_t *)&v129, &v145);
    uint64_t v3 = (uint64_t *)v145;
    IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(v145, v108);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode((IPC::Encoder *)v3, &v107);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v106);
    IPC::Connection::sendSyncMessage((uint64_t)v4, (uint64_t)v129, (uint64_t *)&v145, 0, (uint64_t)&v126, v8);
    if (v127)
    {
      if (v127 == 1)
      {
        LOBYTE(v132) = (_BYTE)v126;
        int v57 = 1;
        int v144 = 1;
LABEL_98:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9EA948[v57])(&v112, &v126);
        goto LABEL_99;
      }
LABEL_163:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_164;
    }
    LOBYTE(v112) = 0;
    char v120 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::WebGPU::SupportedFeatures,WebKit::WebGPU::SupportedLimits>>(v126, &v112);
    if (v120)
    {
      if (v127) {
        goto LABEL_163;
      }
      IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ConnectionSendSyncResult((uint64_t)&v132, (uint64_t *)&v126, (uint64_t *)&v112);
      if (v120) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v58);
      }
    }
    else
    {
      LOBYTE(v132) = 13;
      int v144 = 1;
    }
    int v57 = v127;
    if (v127 != -1) {
      goto LABEL_98;
    }
LABEL_99:
    unsigned __int8 v59 = v145;
    v145 = 0;
    if (v59)
    {
      IPC::Encoder::~Encoder(v59, v58);
      WTF::fastFree(v81, v82);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v111);
LABEL_102:
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v110, v14);
    if (v144)
    {
      v112 = 0;
      uint64_t v60 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v60 + 16))(v60, &v112);
      (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
      unint64_t v61 = v112;
      v112 = 0;
      if (v61)
      {
        if (*((_DWORD *)v61 + 2) == 1) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v61 + 8))(v61);
        }
        else {
          --*((_DWORD *)v61 + 2);
        }
      }
      goto LABEL_128;
    }
    uint64_t v62 = (WTF::StringImpl *)v133;
    unint64_t v133 = 0;
    v112 = v62;
    unsigned int v63 = v134;
    unsigned int v64 = HIDWORD(v134);
    unint64_t v134 = 0;
    unint64_t v113 = __PAIR64__(v64, v63);
    long long v117 = v141;
    long long v118 = v142;
    long long v119 = v143;
    *(_OWORD *)&v114[32] = v137;
    *(_OWORD *)&v114[48] = v138;
    long long v116 = v140;
    long long v115 = v139;
    *(_OWORD *)&v114[16] = v136;
    *(_OWORD *)v114 = v135;
    int v65 = DWORD1(v135);
    if (!DWORD1(v135)) {
      break;
    }
    uint64_t v66 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v66 = 1;
    *(void *)(v66 + 8) = v62;
    v112 = 0;
    unint64_t v113 = 0;
    *(_DWORD *)(v66 + 16) = v63;
    *(_DWORD *)(v66 + 20) = v64;
    v126 = (WTF::StringImpl *)v66;
    int v67 = *(_DWORD *)v114;
    uint64_t v68 = *(void *)&v114[56];
    uint64_t v69 = v115;
    uint64_t v7 = v116;
    uint64_t v70 = *((void *)&v116 + 1);
    long long v101 = *(_OWORD *)&v114[24];
    long long v102 = *(_OWORD *)&v114[8];
    long long v100 = *(_OWORD *)&v114[40];
    double v8 = *((double *)&v115 + 1);
    long long v104 = v118;
    long long v105 = v117;
    long long v103 = v119;
    uint64_t v71 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)uint64_t v71 = 1;
    *(_DWORD *)(v71 + 4) = v67;
    *(_DWORD *)(v71 + 8) = v65;
    *(_OWORD *)(v71 + 12) = v102;
    *(_OWORD *)(v71 + 28) = v101;
    *(_OWORD *)(v71 + 44) = v100;
    *(void *)(v71 + 64) = v68;
    *(void *)(v71 + 72) = v69;
    *(double *)(v71 + 80) = v8;
    *(_DWORD *)(v71 + 88) = v7;
    *(void *)(v71 + 96) = v70;
    *(_OWORD *)(v71 + 104) = v105;
    *(_OWORD *)(v71 + 120) = v104;
    *(_OWORD *)(v71 + 136) = v103;
    v129 = (WTF *)v71;
    double v4 = (uint64_t **)a1[8];
    unint64_t v6 = (unint64_t)v106;
    uint64_t v5 = v107;
    uint64_t v3 = (uint64_t *)WTF::fastMalloc((WTF *)0x70);
    WebKit::WebGPU::RemoteDeviceProxy::RemoteDeviceProxy((uint64_t)v3, (uint64_t *)&v126, (uint64_t *)&v129, (uint64_t)a1, (uint64_t)v4, v5, v6);
    if (v109)
    {
      unint64_t v73 = (WTF::StringImpl *)v3[3];
      uint64_t v74 = v108[0];
      v108[0] = 0;
      v3[3] = v74;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2) {
          WTF::StringImpl::destroy(v73, v72);
        }
        else {
          *(_DWORD *)v73 -= 2;
        }
      }
      (*(void (**)(uint64_t *, uint64_t *))(*v3 + 200))(v3, v3 + 3);
      v123 = v3;
      uint64_t v78 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t **))(*(void *)v78 + 16))(v78, &v123);
      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
      unint64_t v79 = v123;
      v123 = 0;
      if (v79)
      {
        if (*((_DWORD *)v79 + 2) == 1) {
          (*(void (**)(uint64_t *))(*v79 + 8))(v79);
        }
        else {
          --*((_DWORD *)v79 + 2);
        }
      }
      if (v129)
      {
        if (*(_DWORD *)v129 == 1) {
          WTF::fastFree(v129, v76);
        }
        else {
          --*(_DWORD *)v129;
        }
      }
      if (v126) {
        WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v126, v76);
      }
      goto LABEL_127;
    }
    while (1)
    {
LABEL_158:
      __break(1u);
LABEL_159:
      unint64_t v15 = 0;
      unint64_t v18 = 0;
      unint64_t v133 = 0;
LABEL_12:
      unint64_t v19 = (void *)((v6 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v6 + v18)
      {
        unint64_t v20 = (char *)v19 - v6;
        if ((unint64_t)v19 - v6 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v15)
        {
          unint64_t v133 = 0;
        }
        else
        {
          *unint64_t v19 = v5;
          unint64_t v134 = (unint64_t)(v20 + 8);
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(&v132, v108);
      unint64_t v21 = v134;
      unint64_t v22 = v132;
      unint64_t v23 = v133;
      unint64_t v24 = (v132 + v134 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v25 = v24 - (v132 + v134);
      if (v24 >= v132 + v134)
      {
        unint64_t v26 = v24 - v132;
        if (v25 + v134 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > v133)
        {
          unint64_t v23 = 0;
          unint64_t v133 = 0;
        }
        else
        {
          *(void *)(v132 + v26) = v107;
          unint64_t v134 = v26 + 8;
          unint64_t v22 = v132;
          unint64_t v23 = v133;
          unint64_t v21 = v26 + 8;
        }
      }
      unint64_t v27 = (void *)((v22 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v27 >= v22 + v21)
      {
        unint64_t v28 = (char *)v27 - v22;
        if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7
          || (unint64_t v21 = (unint64_t)(v28 + 8), (unint64_t)(v28 + 8) > v23))
        {
LABEL_57:
          LOBYTE(v129) = 0;
          char v131 = 0;
          goto LABEL_60;
        }
        void *v27 = v106;
        unint64_t v134 = (unint64_t)(v28 + 8);
        unint64_t v23 = v133;
      }
      if (!v23) {
        goto LABEL_57;
      }
      unint64_t v29 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = *(void *)(v7 + 64);
      if (v29 + 16 >= v30) {
        unint64_t v29 = 0;
      }
      if (v21 <= 0x10) {
        unint64_t v21 = 16;
      }
      unint64_t v31 = v29 + v21;
      if (v30 <= v31) {
        unint64_t v31 = 0;
      }
      *(void *)(v7 + 80) = v31;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v31) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      unint64_t v6 = v7 + 96;
      while (1)
      {
        unint64_t v32 = atomic_exchange(*(atomic_ullong *volatile *)(*(void *)(v7 + 72) + 16), 0x80000000uLL);
        if (!(v32 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
        if (*(unsigned char *)(v7 + 104))
        }
        {
          BOOL v33 = IPC::Semaphore::waitFor((semaphore_t *)(v7 + 96), v8);
          if (v33)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v33);
            if (v34 < v8) {
              continue;
            }
          }
        }
        LOBYTE(v129) = 16;
        int v130 = 1;
LABEL_59:
        char v131 = 1;
        goto LABEL_60;
      }
      atomic_store(0, *(unint64_t **)(*(void *)(v7 + 72) + 16));
      *(void *)(v7 + 80) = 0;
      uint64_t v38 = *(void *)(v7 + 72);
      unint64_t v39 = *(void *)(v38 + 8);
      if (v39 > 0xFF)
      {
        uint64_t v40 = *(void *)(v7 + 64);
        uint64_t v41 = *(void *)(v38 + 16);
        unint64_t v6 = v39 - 256;
        if (!v40 || (v42 = v40 - 1, v43 = v6 >= v42, unint64_t v6 = v42, v43))
        {
          uint64_t v44 = v41 + 256;
          uint64_t v45 = WTF::fastMalloc((WTF *)0x50);
          unint64_t v46 = (WTF *)IPC::Decoder::Decoder(v45, v44, v6, *(void *)(v7 + 56));
          if (*((_WORD *)v46 + 25) != 2870)
          {
            v129 = v46;
            int v130 = 0;
            goto LABEL_59;
          }
          IPC::Decoder::~Decoder(v46);
          WTF::fastFree(v47, v48);
          IPC::Connection::waitForSyncReply((uint64_t)v145, v5, 0xE29u, (uint64_t)&v126, v8);
          LOBYTE(v129) = 0;
          int v130 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v129, (uint64_t)&v126);
          char v131 = 1;
          if (v127 != -1) {
            ((void (*)(uint64_t ***, WTF::StringImpl **))off_1EE9EA948[v127])(&v111, &v126);
          }
LABEL_60:
          IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v145);
          if (!v131)
          {
            LOBYTE(v112) = 0;
            char v122 = 0;
            goto LABEL_75;
          }
          if (v130 == 1)
          {
            LOBYTE(v112) = (_BYTE)v129;
            int v50 = 1;
            int v121 = 1;
            char v122 = 1;
            goto LABEL_74;
          }
          if (v130) {
            goto LABEL_163;
          }
          LOBYTE(v126) = 0;
          char v128 = 0;
          IPC::Decoder::operator>><std::tuple<WebKit::WebGPU::SupportedFeatures,WebKit::WebGPU::SupportedLimits>>(v129, &v126);
          if (!v128)
          {
            LOBYTE(v112) = 13;
            int v121 = 1;
            char v122 = 1;
            goto LABEL_72;
          }
          if (v131) {
            break;
          }
        }
      }
    }
    if (v130) {
      goto LABEL_163;
    }
    IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ConnectionSendSyncResult((uint64_t)&v132, (uint64_t *)&v129, (uint64_t *)&v126);
    LOBYTE(v112) = 0;
    int v121 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v112, (uint64_t)&v132);
    char v122 = 1;
    if (v144 != -1) {
      ((void (*)(uint64_t ***, unint64_t *))off_1EE9EA700[v144])(&v111, &v132);
    }
    if (v128) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v126, v49);
    }
LABEL_72:
    if (v131)
    {
      int v50 = v130;
      if (v130 != -1)
      {
LABEL_74:
        ((void (*)(unint64_t *, WTF **))off_1EE9EA948[v50])(&v132, &v129);
        continue;
      }
    }
  }
  v126 = 0;
  uint64_t v75 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v75 + 16))(v75, &v126);
  (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  v77 = v126;
  v126 = 0;
  if (v77)
  {
    if (*((_DWORD *)v77 + 2) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v77 + 8))(v77);
    }
    else {
      --*((_DWORD *)v77 + 2);
    }
  }
LABEL_127:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v76);
LABEL_128:
  if (v144 != -1) {
    ((void (*)(WTF::StringImpl **, unint64_t *))off_1EE9EA700[v144])(&v112, &v132);
  }
  return std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v108, v36);
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebGPU::RemoteAdapterProxy::xrCompatible(WebKit::WebGPU::RemoteAdapterProxy *this)
{
  return *((unsigned __int8 *)this + 80);
}

void WebKit::WebGPU::RemoteBindGroupLayoutProxy::~RemoteBindGroupLayoutProxy(WebKit::WebGPU::RemoteBindGroupLayoutProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  int v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *int v10 = 728;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    int v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  uint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v40 = 728;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  BOOL v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  uint64_t v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EA720;
  uint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteBindGroupLayoutProxy::~RemoteBindGroupLayoutProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteBindGroupLayoutProxy::setLabelInternal(WebKit::WebGPU::RemoteBindGroupLayoutProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  uint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 729;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 729;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  uint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  uint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteBindGroupProxy::~RemoteBindGroupProxy(WebKit::WebGPU::RemoteBindGroupProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 730;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 730;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  BOOL v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EA748;
  uint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteBindGroupProxy::~RemoteBindGroupProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteBindGroupProxy::setLabelInternal(WebKit::WebGPU::RemoteBindGroupProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  uint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 731;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 731;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  uint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  uint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

uint64_t WebKit::WebGPU::RemoteBindGroupProxy::updateExternalTextures(WebKit::WebGPU::RemoteBindGroupProxy *this, const WebCore::WebGPU::ExternalTexture *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  ++v3[2];
  uint64_t v4 = (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::ExternalTexture *))(*(void *)v3 + 104))(v3, a2);
  uint64_t v49 = v4;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v6 = *((void *)this + 4);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(v4);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) == v6) {
    goto LABEL_4;
  }
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v51, v8);
  if (!v53) {
    goto LABEL_42;
  }
  unint64_t v35 = v51;
  unint64_t v34 = v52;
  unint64_t v36 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v51;
  if (v36 < v51) {
    goto LABEL_80;
  }
  unint64_t v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v52)
  {
    unint64_t v34 = 0;
LABEL_80:
    unint64_t v38 = 0;
    goto LABEL_52;
  }
  *(_WORD *)(v51 + v37) = 2871;
LABEL_52:
  unint64_t v40 = (void *)((v35 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v40 >= v35 + v38)
  {
    unint64_t v38 = (unint64_t)v40 - v35 + 8;
    if ((unint64_t)v40 - v35 > 0xFFFFFFFFFFFFFFF7 || v38 > v34) {
      goto LABEL_42;
    }
    *unint64_t v40 = v6;
  }
  if (!v34) {
    goto LABEL_42;
  }
  unint64_t v42 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(v5 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v44 = v42 + v38;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(v5 + 80) = v44;
  unint64_t v45 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v44);
  int v46 = *(_DWORD *)(v5 + 116);
  if (v45 == 0x80000000 || v46 != 0)
  {
    unsigned int v48 = v46 + 1;
    *(_DWORD *)(v5 + 116) = v48;
    if (v48 >= *(_DWORD *)(v5 + 112))
    {
      if (*(unsigned char *)(v5 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  *(void *)(v5 + 56) = v6;
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v51, v8);
  if (!v53) {
    goto LABEL_42;
  }
  unint64_t v12 = v51;
  unint64_t v11 = v52;
  unint64_t v13 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - v51;
  if (v13 >= v51)
  {
    unint64_t v15 = v14 + 2;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= v52)
    {
      *(_WORD *)(v51 + v14) = 732;
      goto LABEL_11;
    }
    unint64_t v11 = 0;
  }
  unint64_t v15 = 0;
LABEL_11:
  unint64_t v17 = (void *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v17 >= v12 + v15)
  {
    unint64_t v15 = (unint64_t)v17 - v12 + 8;
    if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7 || v15 > v11) {
      goto LABEL_29;
    }
    *unint64_t v17 = v49;
  }
  if (v11)
  {
    uint64_t v19 = *(void *)(v5 + 72);
    unint64_t v20 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = *(void *)(v5 + 64);
    if (v20 + 16 >= v21) {
      unint64_t v20 = 0;
    }
    if (v15 <= 0x10) {
      unint64_t v15 = 16;
    }
    unint64_t v22 = v20 + v15;
    if (v21 <= v22) {
      unint64_t v22 = 0;
    }
    *(void *)(v5 + 80) = v22;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v19 + 16) + 128), v22) == 0x80000000
      || *(_DWORD *)(v5 + 116))
    {
      if (*(unsigned char *)(v5 + 104)) {
        uint64_t result = MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
    goto LABEL_42;
  }
LABEL_29:
  unint64_t v23 = v53;
  if (v53)
  {
    unint64_t v24 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = v24 - v51;
    if (v24 < v51)
    {
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v23 = 0;
      if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v52)
      {
        *(_WORD *)(v51 + v25) = 2870;
        unint64_t v23 = v25 + 2;
      }
    }
    unint64_t v26 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = *(void *)(v5 + 64);
    if (v26 + 16 < v11) {
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v26 = 0;
LABEL_35:
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v27 = v26 + v23;
  if (v11 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v5 + 80) = v27;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v27);
  *(_DWORD *)(v5 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v5 + 8));
  unint64_t v28 = v50;
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 732;
  *((void *)v29 + 1) = v6;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  unint64_t v54 = v29;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, (uint64_t *)&v49);
  IPC::Connection::sendMessageImpl((uint64_t)v28, (uint64_t *)&v54, 1, 0);
  unint64_t v31 = v54;
  unint64_t v54 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v30);
    WTF::fastFree(v32, v33);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_42:
  if (v3[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  --v3[2];
  return result;
}

void WebKit::WebGPU::RemoteBufferProxy::~RemoteBufferProxy(WebKit::WebGPU::RemoteBufferProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  unint64_t v51 = (unsigned int *)v2;
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v53, v5);
  if (!v55) {
    goto LABEL_71;
  }
  unint64_t v19 = v53;
  unint64_t v18 = v54;
  unint64_t v20 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v53;
  if (v20 < v53) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v54)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v53 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v53, v5);
  if (!v55) {
    goto LABEL_71;
  }
  unint64_t v8 = v53;
  unint64_t v9 = v54;
  BOOL v10 = (_WORD *)((v53 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v53;
  if ((unint64_t)v10 < v53)
  {
    unint64_t v12 = 0;
    if (v54) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v54)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v54)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 735;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v55;
  if (v55)
  {
    unint64_t v8 = v53;
    BOOL v10 = (_WORD *)((v53 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(v2 + 8));
  unint64_t v39 = v52;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 735;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v56 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v56, 1, 0);
  unint64_t v42 = v56;
  unint64_t v56 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
LABEL_71:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v51, v7);
  unint64_t v44 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  unint64_t v45 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
    }
    else {
      --v45[2];
    }
  }
  *(void *)this = &unk_1EE9EA778;
  int v46 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, v43);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  uint64_t v47 = *((void *)this + 2);
  if (v47)
  {
    *(void *)(v47 + 8) = 0;
    unsigned int v48 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v48)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v48, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v43);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteBufferProxy::~RemoteBufferProxy(this);

  WTF::fastFree(v1, v2);
}

unsigned int **WebKit::WebGPU::RemoteBufferProxy::mapAsync(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v69[0] = a4;
  v69[1] = a5;
  uint64_t v68 = a3;
  uint64_t v8 = *a6;
  *a6 = 0;
  ++*(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  uint64_t v70 = (unsigned int *)v9;
  uint64_t v10 = *(void *)(a1 + 32);
  double v11 = *(double *)(v9 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v12 = v11 + v13;
  }
  if (*(void *)(v9 + 56) != v10)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v79, v12);
    if (!(_BYTE)v81) {
      goto LABEL_79;
    }
    unint64_t v52 = v79;
    unint64_t v53 = v80;
    unint64_t v54 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v55 = v54 - v79;
    if (v54 < v79)
    {
      unint64_t v57 = 0;
      unint64_t v56 = v80;
    }
    else
    {
      unint64_t v56 = 0;
      if (v55 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v57 = 0;
      }
      else
      {
        unint64_t v57 = 0;
        if (v55 + 2 <= v80)
        {
          *(_WORD *)(v79 + v55) = 2871;
          unint64_t v56 = v53;
          unint64_t v57 = v55 + 2;
        }
      }
    }
    unint64_t v58 = (void *)((v52 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v58 >= v52 + v57)
    {
      unint64_t v57 = (unint64_t)v58 - v52 + 8;
      if ((unint64_t)v58 - v52 > 0xFFFFFFFFFFFFFFF7 || v57 > v56) {
        goto LABEL_79;
      }
      *unint64_t v58 = v10;
    }
    if (v56)
    {
      uint64_t v60 = *(void *)(v9 + 72);
      unint64_t v61 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v62 = *(void *)(v9 + 64);
      if (v61 + 16 >= v62) {
        unint64_t v61 = 0;
      }
      if (v57 <= 0x10) {
        unint64_t v57 = 16;
      }
      unint64_t v63 = v61 + v57;
      if (v62 <= v63) {
        unint64_t v63 = 0;
      }
      *(void *)(v9 + 80) = v63;
      unint64_t v64 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v60 + 16) + 128), v63);
      int v65 = *(_DWORD *)(v9 + 116);
      if (v64 == 0x80000000 || v65 != 0)
      {
        unsigned int v67 = v65 + 1;
        *(_DWORD *)(v9 + 116) = v67;
        if (v67 >= *(_DWORD *)(v9 + 112))
        {
          if (*(unsigned char *)(v9 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
          }
          *(_DWORD *)(v9 + 116) = 0;
        }
      }
      *(void *)(v9 + 56) = v10;
      goto LABEL_4;
    }
LABEL_79:
    uint64_t result = WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v70, v14);
    if (*(_DWORD *)(a1 + 8) == 1)
    {
      uint64_t result = (unsigned int **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
      if (!v8) {
        return result;
      }
    }
    else
    {
      --*(_DWORD *)(a1 + 8);
      if (!v8) {
        return result;
      }
    }
    return (unsigned int **)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v76, v12);
  if (!v78) {
    goto LABEL_79;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v75, (uint64_t **)(v9 + 8));
  uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v15 = &unk_1EE9EA978;
  *(void *)(v15 + 8) = v8;
  *(unsigned char *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a1;
  v74[0] = v15;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v74[1] = v16;
  uint64_t v73 = v16;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v75, v74);
  unint64_t v18 = v78;
  if (!v78) {
    goto LABEL_89;
  }
  unint64_t v18 = v76;
  unint64_t v19 = v77;
  unint64_t v79 = v76;
  unint64_t v80 = v77;
  unint64_t v81 = 0;
  unint64_t v20 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v76;
  if (v20 < v76)
  {
    unint64_t v17 = 0;
  }
  else if (v21 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v17 = (char *)(v21 + 2), v21 + 2 > v77))
  {
    unint64_t v19 = 0;
    unint64_t v17 = 0;
    unint64_t v80 = 0;
  }
  else
  {
    *(_WORD *)(v76 + v21) = 736;
    unint64_t v81 = v21 + 2;
  }
  if ((unint64_t)v17 >= v19) {
    goto LABEL_90;
  }
  (v17++)[v18] = a2;
  unint64_t v81 = (unint64_t)v17;
  while (1)
  {
    unint64_t v22 = (char *)((unint64_t)&v17[v18 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= &v17[v18])
    {
      unint64_t v23 = &v22[-v18];
      if ((unint64_t)&v22[-v18] > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v23 + 8) > v19)
      {
        unint64_t v80 = 0;
      }
      else
      {
        *(void *)unint64_t v22 = v68;
        unint64_t v81 = (unint64_t)(v23 + 8);
      }
    }
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(&v79, (uint64_t)v69);
    unint64_t v24 = v81;
    unint64_t v25 = (void *)((v79 + v81 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v17 = (char *)v25 - v79 - v81;
    if ((unint64_t)v25 >= v79 + v81)
    {
      unint64_t v17 = (char *)v25 - v79;
      if ((unint64_t)v25 - v79 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
      unint64_t v24 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v80) {
        goto LABEL_32;
      }
      void *v25 = v16;
      unint64_t v81 = (unint64_t)(v17 + 8);
    }
    if (v80)
    {
      unint64_t v26 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(v9 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v24 <= 0x10) {
        unint64_t v24 = 16;
      }
      unint64_t v28 = v26 + v24;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(v9 + 80) = v28;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v28) == 0x80000000
        || *(_DWORD *)(v9 + 116))
      {
        if (*(unsigned char *)(v9 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
        }
        *(_DWORD *)(v9 + 116) = 0;
      }
      goto LABEL_52;
    }
LABEL_32:
    unint64_t v18 = v78;
    if (v78) {
      break;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    unint64_t v19 = 0;
    unint64_t v80 = 0;
  }
  unint64_t v29 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = v29 - v76;
  if (v29 < v76)
  {
    unint64_t v31 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v77)
    {
      *(_WORD *)(v76 + v30) = 2870;
      unint64_t v31 = v30 + 2;
    }
  }
  unint64_t v32 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = *(void *)(v9 + 64);
  if (v32 + 16 >= v33) {
    unint64_t v32 = 0;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v34 = v32 + v31;
  if (v33 <= v34) {
    unint64_t v34 = 0;
  }
  *(void *)(v9 + 80) = v34;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v34);
  *(_DWORD *)(v9 + 116) = 0;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 736;
  *((void *)v35 + 1) = v10;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v79 = (unint64_t)v35;
  unint64_t v36 = (unsigned char *)IPC::Encoder::grow(v35, 1uLL, 1);
  if (!v37)
  {
    __break(0xC471u);
    JUMPOUT(0x1990BD544);
  }
  *unint64_t v36 = a2;
  unint64_t v38 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>(v35, &v68);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v38, (uint64_t)v69);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v35, &v73);
  if (IPC::Connection::sendMessageImpl((uint64_t)v75, (uint64_t *)&v79, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v75, v73, &v72);
    if (v72)
    {
      unint64_t v41 = (atomic_uint *)(WTF::RunLoop::main(v40) + 8);
      atomic_fetch_add(v41, 1u);
      uint64_t v42 = v72;
      uint64_t v72 = 0;
      unint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v43 = &unk_1EE9EA9A0;
      v43[1] = v42;
      uint64_t v71 = v43;
      WTF::RunLoop::dispatch();
      unint64_t v44 = v71;
      uint64_t v71 = 0;
      if (v44) {
        (*(void (**)(void *))(*v44 + 8))(v44);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v41);
      uint64_t v45 = v72;
      uint64_t v72 = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
    }
  }
  int v46 = (IPC::Encoder *)v79;
  unint64_t v79 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v39);
    WTF::fastFree(v50, v51);
  }
LABEL_52:
  uint64_t v47 = v74[0];
  v74[0] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v75);
  return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v70, v48);
}

uint64_t WebKit::WebGPU::RemoteBufferProxy::getMappedRange(WTF::ApproximateTime *a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v85 = a3;
  uint64_t v86 = a4;
  unint64_t v84 = a2;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  unint64_t v87 = (unsigned int *)v6;
  uint64_t v7 = *((void *)a1 + 4);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v89, v9);
    if (!v91) {
      goto LABEL_121;
    }
    unint64_t v61 = v89;
    unint64_t v60 = v90;
    unint64_t v62 = ((unint64_t)v89 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - (void)v89;
    if (v62 >= (unint64_t)v89)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v90)
      {
        *(_WORD *)((char *)v89 + v63) = 2871;
        goto LABEL_102;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_102:
    uint64_t v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v66 >= (char *)v61 + v64)
    {
      unint64_t v64 = v66 - (char *)v61 + 8;
      if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60) {
        goto LABEL_160;
      }
      *(void *)uint64_t v66 = v7;
    }
    if (v60)
    {
      unint64_t v68 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v69 = *(void *)(v6 + 64);
      if (v68 + 16 >= v69) {
        unint64_t v68 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v70 = v68 + v64;
      if (v69 <= v70) {
        unint64_t v70 = 0;
      }
      *(void *)(v6 + 80) = v70;
      unint64_t v71 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v70);
      int v72 = *(_DWORD *)(v6 + 116);
      if (v71 == 0x80000000 || v72 != 0)
      {
        unsigned int v83 = v72 + 1;
        *(_DWORD *)(v6 + 116) = v83;
        if (v83 >= *(_DWORD *)(v6 + 112))
        {
          if (*(unsigned char *)(v6 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
          }
          *(_DWORD *)(v6 + 116) = 0;
        }
      }
      *(void *)(v6 + 56) = v7;
      goto LABEL_4;
    }
LABEL_160:
    char v74 = 17;
    goto LABEL_122;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v95, v9);
  if (!v97)
  {
LABEL_121:
    char v74 = 15;
LABEL_122:
    LOBYTE(v105) = v74;
    int v109 = 1;
    goto LABEL_123;
  }
  unint64_t v12 = v95;
  unint64_t v13 = v96;
  uint64_t v14 = (uint64_t **)(v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v110, (uint64_t **)(v6 + 8));
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v110, v15))
  {
    LOBYTE(v105) = 11;
    uint64_t v15 = 1;
    int v109 = 1;
    LOBYTE(v89) = 0;
    int v93 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v89, (uint64_t)&v105);
    char v94 = 1;
    if (v109 != -1) {
      ((void (*)(WTF **, unint64_t *))off_1EE9EA7C0[v109])(&v98, &v105);
    }
    goto LABEL_66;
  }
  unint64_t v105 = v12;
  v106 = (WTF *)v13;
  unint64_t v107 = 0;
  unint64_t v16 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - v12;
  if (v16 < v12)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_152;
    }
    unint64_t v18 = v17 + 2;
    if (v17 + 2 > v13) {
      goto LABEL_152;
    }
    *(_WORD *)(v12 + v17) = 3627;
    unint64_t v107 = v17 + 2;
  }
  while (1)
  {
    unint64_t v19 = (void *)((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v12 + v18)
    {
      unint64_t v20 = (char *)v19 - v12;
      if ((unint64_t)v19 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v13)
      {
        unint64_t v13 = 0;
        v106 = 0;
      }
      else
      {
        *unint64_t v19 = v15;
        unint64_t v107 = (unint64_t)(v20 + 8);
        unint64_t v18 = (unint64_t)(v20 + 8);
      }
    }
    unint64_t v21 = (void *)((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v21 >= v12 + v18)
    {
      unint64_t v22 = (char *)v21 - v12;
      if ((unint64_t)v21 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v22 + 8) > v13)
      {
        v106 = 0;
      }
      else
      {
        *unint64_t v21 = v84;
        unint64_t v107 = (unint64_t)(v22 + 8);
      }
    }
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(&v105, (uint64_t)&v85);
    if (v106)
    {
      uint64_t v23 = v107;
      unint64_t v24 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(v6 + 64);
      if (v24 + 16 >= v25) {
        unint64_t v24 = 0;
      }
      if (v107 <= 0x10) {
        uint64_t v23 = 16;
      }
      unint64_t v26 = v24 + v23;
      if (v25 <= v26) {
        unint64_t v26 = 0;
      }
      *(void *)(v6 + 80) = v26;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v26) == 0x80000000
        || *(_DWORD *)(v6 + 116))
      {
        if (*(unsigned char *)(v6 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
      unint64_t v12 = v6 + 96;
      while (1)
      {
        unint64_t v27 = atomic_exchange(*(atomic_ullong *volatile *)(*(void *)(v6 + 72) + 16), 0x80000000uLL);
        if (!(v27 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
        if (*(unsigned char *)(v6 + 104))
        }
        {
          BOOL v28 = IPC::Semaphore::waitFor((semaphore_t *)(v6 + 96), v9);
          if (v28)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v28);
            if (v29 < v9) {
              continue;
            }
          }
        }
        LOBYTE(v102) = 16;
        int v103 = 1;
LABEL_47:
        char v104 = 1;
        goto LABEL_48;
      }
      atomic_store(0, *(unint64_t **)(*(void *)(v6 + 72) + 16));
      *(void *)(v6 + 80) = 0;
      uint64_t v30 = *(void *)(v6 + 72);
      unint64_t v31 = *(void *)(v30 + 8);
      if (v31 <= 0xFF) {
        goto LABEL_151;
      }
      uint64_t v32 = *(void *)(v6 + 64);
      uint64_t v33 = *(void *)(v30 + 16);
      unint64_t v12 = v31 - 256;
      if (v32)
      {
        unint64_t v34 = v32 - 1;
        BOOL v35 = v12 >= v34;
        unint64_t v12 = v34;
        if (!v35) {
          goto LABEL_151;
        }
      }
      uint64_t v36 = v33 + 256;
      uint64_t v37 = WTF::fastMalloc((WTF *)0x50);
      uint64_t v38 = IPC::Decoder::Decoder(v37, v36, v12, *(void *)(v6 + 56));
      if (*(_WORD *)(v38 + 50) != 2870)
      {
        long long v102 = (uint64_t *)v38;
        int v103 = 0;
        goto LABEL_47;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v38);
      WTF::fastFree(v39, v40);
      IPC::Connection::waitForSyncReply((uint64_t)v110, v15, 0xE2Bu, (uint64_t)&v98, v9);
      LOBYTE(v102) = 0;
      int v103 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v102, (uint64_t)&v98);
      char v104 = 1;
      if (v99 != -1) {
        ((void (*)(uint64_t ***, WTF **))off_1EE9EA948[v99])(&v88, &v98);
      }
    }
    else
    {
      LOBYTE(v102) = 0;
      char v104 = 0;
    }
LABEL_48:
    IPC::Connection::popPendingSyncRequestID(v110);
    if (!v104)
    {
      LOBYTE(v89) = 0;
      char v94 = 0;
      goto LABEL_66;
    }
    if (v103 == 1)
    {
      LOBYTE(v89) = (_BYTE)v102;
      int v43 = 1;
      int v93 = 1;
      char v94 = 1;
      goto LABEL_65;
    }
    if (v103) {
      goto LABEL_156;
    }
    LOBYTE(v98) = 0;
    char v101 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v102, (uint64_t)&v98);
    if (!v101)
    {
      LOBYTE(v89) = 13;
      int v93 = 1;
      char v94 = 1;
      goto LABEL_63;
    }
    if (v104) {
      break;
    }
LABEL_151:
    __break(1u);
LABEL_152:
    unint64_t v13 = 0;
    unint64_t v18 = 0;
    v106 = 0;
  }
  if (v103) {
    goto LABEL_156;
  }
  unint64_t v41 = v102;
  long long v102 = 0;
  char v42 = v100;
  if (v100)
  {
    v106 = v98;
    unint64_t v44 = v99;
    v98 = 0;
    unint64_t v99 = 0;
    unint64_t v107 = v44;
    char v42 = 1;
  }
  else
  {
    LOBYTE(v106) = 0;
  }
  unint64_t v105 = (unint64_t)v41;
  char v108 = v42;
  int v109 = 0;
  LOBYTE(v89) = 0;
  int v93 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v89, (uint64_t)&v105);
  char v94 = 1;
  if (v109 != -1) {
    ((void (*)(uint64_t ***, unint64_t *))off_1EE9EA7C0[v109])(&v88, &v105);
  }
  if (v101)
  {
    if (v100)
    {
      unint64_t v82 = v98;
      if (v98)
      {
        v98 = 0;
        LODWORD(v99) = 0;
        WTF::fastFree(v82, v45);
      }
    }
  }
LABEL_63:
  if (v104)
  {
    int v43 = v103;
    if (v103 != -1) {
LABEL_65:
    }
      ((void (*)(unint64_t *, uint64_t **))off_1EE9EA948[v43])(&v105, &v102);
  }
LABEL_66:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v110);
  if (v94)
  {
    LOBYTE(v105) = 0;
    int v109 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v105, (uint64_t)&v89);
    if (v94 && v93 != -1) {
      ((void (*)(WTF **, WTF **))off_1EE9EA7C0[v93])(&v98, &v89);
    }
    goto LABEL_123;
  }
  if (!v97) {
    goto LABEL_151;
  }
  unint64_t v46 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v47 = v46 - v95;
  if (v46 < v95)
  {
    unint64_t v48 = 0;
  }
  else
  {
    unint64_t v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v96)
    {
      *(_WORD *)(v95 + v47) = 2870;
      unint64_t v48 = v47 + 2;
    }
  }
  unint64_t v49 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = *(void *)(v6 + 64);
  if (v49 + 16 >= v50) {
    goto LABEL_157;
  }
  while (1)
  {
    if (v48 <= 0x10) {
      unint64_t v48 = 16;
    }
    unint64_t v51 = v49 + v48;
    if (v50 <= v51) {
      unint64_t v51 = 0;
    }
    *(void *)(v6 + 80) = v51;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v51);
    *(_DWORD *)(v6 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, v14);
    uint64_t v14 = v88;
    long long v102 = 0;
    IPC::Connection::createSyncMessageEncoder(3627, v7, (uint64_t *)&v102, (IPC::Encoder **)&v110);
    unint64_t v52 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>((IPC::Encoder *)v110, (uint64_t *)&v84);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v52, (uint64_t)&v85);
    IPC::Connection::sendSyncMessage((uint64_t)v14, (uint64_t)v102, (uint64_t *)&v110, 0, (uint64_t)&v98, v9);
    if (v99)
    {
      if (v99 == 1)
      {
        LOBYTE(v105) = (_BYTE)v98;
        int v53 = 1;
        int v109 = 1;
        goto LABEL_91;
      }
      goto LABEL_156;
    }
    LOBYTE(v89) = 0;
    char v92 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)v98, (uint64_t)&v89);
    if (!v92) {
      break;
    }
    if (!v99)
    {
      unint64_t v55 = v98;
      v98 = 0;
      if (v91)
      {
        v106 = v89;
        unint64_t v107 = v90;
        char v56 = 1;
      }
      else
      {
        char v56 = 0;
        LOBYTE(v106) = 0;
      }
      int v53 = 0;
      unint64_t v105 = (unint64_t)v55;
      char v108 = v56;
      int v109 = 0;
      goto LABEL_91;
    }
LABEL_156:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_157:
    unint64_t v49 = 0;
  }
  LOBYTE(v105) = 13;
  int v109 = 1;
  int v53 = v99;
  if (v99 == -1) {
    goto LABEL_92;
  }
LABEL_91:
  ((void (*)(WTF **, WTF **))off_1EE9EA948[v53])(&v89, &v98);
LABEL_92:
  unint64_t v57 = (IPC::Encoder *)v110;
  v110 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v54);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v88);
LABEL_123:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v87, v11);
  if (v109) {
    BOOL v75 = 1;
  }
  else {
    BOOL v75 = v108 == 0;
  }
  char v76 = v75;
  if (v75)
  {
    unint64_t v77 = 0;
  }
  else
  {
    unint64_t v77 = v106;
    unint64_t v81 = HIDWORD(v107);
    v106 = 0;
    unint64_t v107 = 0;
    if (v77 && v81 > v84 && (!(_BYTE)v86 || v85 + v84 <= v81))
    {
      (*(void (**)(void, unint64_t, unint64_t))(*(void *)*a5 + 16))(*a5, (unint64_t)v77 + v84, v81 - v84);
      goto LABEL_144;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, void))(*(void *)*a5 + 16))(*a5, 0, 0);
  if (v77) {
    char v80 = v76;
  }
  else {
    char v80 = 1;
  }
  if ((v80 & 1) == 0) {
LABEL_144:
  }
    uint64_t result = WTF::fastFree(v77, v79);
  if (v109 != -1) {
    return ((uint64_t (*)(WTF **, unint64_t *))off_1EE9EA7C0[v109])(&v89, &v105);
  }
  return result;
}

void WebKit::WebGPU::RemoteBufferProxy::getBufferContents(WebKit::WebGPU::RemoteBufferProxy *this)
{
}

unsigned int *WebKit::WebGPU::RemoteBufferProxy::copy(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((result[14] & 2) == 0) {
    return result;
  }
  double v5 = result;
  WebCore::SharedMemory::copySpan();
  v50[0] = 0;
  char v51 = 0;
  uint64_t v6 = v52;
  if (v52)
  {
    WebCore::SharedMemory::createHandle();
    std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v50, (uint64_t)&v61);
    if (v63) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v61);
    }
    uint64_t v7 = (unsigned int *)v52;
    if (v52) {
      atomic_fetch_add((atomic_uint *volatile)v52, 1u);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  char v8 = v51;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*((void *)v5 + 6) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  int v53 = (unsigned int *)v9;
  uint64_t v10 = *((void *)v5 + 4);
  double v11 = *(double *)(v9 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v12 = v11 + v13;
  }
  if (*(void *)(v9 + 56) == v10)
  {
LABEL_11:
    IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v61, v12);
    if (v63)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v60, (uint64_t **)(v9 + 8));
      uint64_t v15 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v15 = &unk_1EE9EA9D8;
      *(void *)(v15 + 8) = v7;
      *(unsigned char *)(v15 + 16) = v8;
      uint64_t v58 = v15;
      uint64_t v59 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v57 = v59;
      IPC::Connection::addAsyncReplyHandler((uint64_t)v60, &v58);
      unint64_t v17 = v63;
      if (v63)
      {
        unint64_t v18 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v19 = v18 - v61;
        if (v18 < v61)
        {
          unint64_t v17 = 0;
        }
        else
        {
          unint64_t v17 = 0;
          if (v19 <= 0xFFFFFFFFFFFFFFFDLL && v19 + 2 <= v62)
          {
            *(_WORD *)(v61 + v19) = 2870;
            unint64_t v17 = v19 + 2;
          }
        }
        unint64_t v20 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v16 = *(void *)(v9 + 64);
        if (v20 + 16 < v16) {
          goto LABEL_18;
        }
      }
      else
      {
        __break(1u);
      }
      unint64_t v20 = 0;
LABEL_18:
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v21 = v20 + v17;
      if (v16 <= v21) {
        unint64_t v21 = 0;
      }
      *(void *)(v9 + 80) = v21;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v21);
      *(_DWORD *)(v9 + 116) = 0;
      unint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v22 = 733;
      *((void *)v22 + 1) = v10;
      *((void *)v22 + 66) = (char *)v22 + 16;
      *((void *)v22 + 67) = 512;
      *((void *)v22 + 68) = 0;
      *((void *)v22 + 70) = 0;
      *((void *)v22 + 69) = 0;
      IPC::Encoder::encodeHeader(v22);
      char v56 = v22;
      IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(v22, (unint64_t)v50);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v22, a4);
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v22, &v57);
      if (IPC::Connection::sendMessageImpl((uint64_t)v60, (uint64_t *)&v56, 1, 0))
      {
        IPC::Connection::takeAsyncReplyHandler(v60, v57, &v55);
        if (v55)
        {
          unint64_t v25 = (atomic_uint *)(WTF::RunLoop::main(v24) + 8);
          atomic_fetch_add(v25, 1u);
          uint64_t v26 = v55;
          uint64_t v55 = 0;
          unint64_t v27 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v27 = &unk_1EE9EAA00;
          v27[1] = v26;
          unint64_t v54 = v27;
          WTF::RunLoop::dispatch();
          BOOL v28 = v54;
          unint64_t v54 = 0;
          if (v28) {
            (*(void (**)(void *))(*v28 + 8))(v28);
          }
          WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v25);
          uint64_t v29 = v55;
          uint64_t v55 = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
        }
      }
      uint64_t v30 = v56;
      char v56 = 0;
      if (v30)
      {
        IPC::Encoder::~Encoder(v30, v23);
        WTF::fastFree(v32, v33);
      }
      uint64_t v31 = v58;
      uint64_t v58 = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
      uint64_t v7 = 0;
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v61, v12);
  if (v63)
  {
    unint64_t v34 = v61;
    unint64_t v35 = v62;
    unint64_t v36 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v37 = v36 - v61;
    if (v36 < v61)
    {
      unint64_t v39 = 0;
      unint64_t v38 = v62;
    }
    else
    {
      unint64_t v38 = 0;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v39 = 0;
      }
      else
      {
        unint64_t v39 = 0;
        if (v37 + 2 <= v62)
        {
          *(_WORD *)(v61 + v37) = 2871;
          unint64_t v38 = v35;
          unint64_t v39 = v37 + 2;
        }
      }
    }
    unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v40 >= v34 + v39)
    {
      unint64_t v39 = (unint64_t)v40 - v34 + 8;
      if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7 || v39 > v38) {
        goto LABEL_33;
      }
      *unint64_t v40 = v10;
    }
    if (v38)
    {
      uint64_t v42 = *(void *)(v9 + 72);
      unint64_t v43 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v44 = *(void *)(v9 + 64);
      if (v43 + 16 >= v44) {
        unint64_t v43 = 0;
      }
      if (v39 <= 0x10) {
        unint64_t v39 = 16;
      }
      unint64_t v45 = v43 + v39;
      if (v44 <= v45) {
        unint64_t v45 = 0;
      }
      *(void *)(v9 + 80) = v45;
      unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v42 + 16) + 128), v45);
      int v47 = *(_DWORD *)(v9 + 116);
      if (v46 == 0x80000000 || v47 != 0)
      {
        unsigned int v49 = v47 + 1;
        *(_DWORD *)(v9 + 116) = v49;
        if (v49 >= *(_DWORD *)(v9 + 112))
        {
          if (*(unsigned char *)(v9 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
          }
          *(_DWORD *)(v9 + 116) = 0;
        }
      }
      *(void *)(v9 + 56) = v10;
      goto LABEL_11;
    }
  }
LABEL_33:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v53, v14);
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  if (v51) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v50);
  }
  uint64_t result = (unsigned int *)v52;
  unint64_t v52 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

unsigned int **WebKit::WebGPU::RemoteBufferProxy::unmap(WebKit::WebGPU::RemoteBufferProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  unint64_t v46 = (unsigned int *)v2;
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v48, v5);
  if (!v50) {
    goto LABEL_71;
  }
  unint64_t v19 = v48;
  unint64_t v18 = v49;
  unint64_t v20 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v48;
  if (v20 < v48) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v49)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v48 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v48, v5);
  if (!v50) {
    goto LABEL_71;
  }
  unint64_t v8 = v48;
  unint64_t v9 = v49;
  uint64_t v10 = (_WORD *)((v48 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v48;
  if ((unint64_t)v10 < v48)
  {
    unint64_t v12 = 0;
    if (v49) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v49)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v49)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *uint64_t v10 = 738;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v50;
  if (v50)
  {
    unint64_t v8 = v48;
    uint64_t v10 = (_WORD *)((v48 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v2 + 8));
  unint64_t v39 = v47;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 738;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  char v51 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v51, 1, 0);
  uint64_t v42 = v51;
  char v51 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
LABEL_71:
  uint64_t result = WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v7);
  *((unsigned char *)this + 56) = 0;
  return result;
}

unsigned int **WebKit::WebGPU::RemoteBufferProxy::destroy(WebKit::WebGPU::RemoteBufferProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v1, 1u);
  unint64_t v45 = (unsigned int *)v1;
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v47, v4);
  if (!v49) {
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v45, v6);
  }
  unint64_t v18 = v47;
  unint64_t v17 = v48;
  unint64_t v19 = (v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v47;
  if (v19 < v47) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v48)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v47 + v20) = 2871;
LABEL_29:
  uint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v45, v6);
    }
    *uint64_t v23 = v2;
  }
  if (!v17) {
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v45, v6);
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v47, v4);
  if (!v49) {
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v45, v6);
  }
  unint64_t v7 = v47;
  unint64_t v8 = v48;
  unint64_t v9 = (_WORD *)((v47 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v47;
  if ((unint64_t)v9 < v47)
  {
    unint64_t v11 = 0;
    if (v48) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v48)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v48)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 734;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v45, v6);
    }
  }
  unint64_t v32 = v49;
  if (v49)
  {
    unint64_t v7 = v47;
    unint64_t v9 = (_WORD *)((v47 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(v1 + 8));
  unint64_t v38 = v46;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 734;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v50 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v50, 1, 0);
  unint64_t v41 = v50;
  unsigned __int8 v50 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
  return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v45, v6);
}

unsigned int **WebKit::WebGPU::RemoteBufferProxy::setLabelInternal(WebKit::WebGPU::RemoteBufferProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  unint64_t v46 = (unsigned int *)v3;
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v51, v6);
  if (!(_BYTE)v53) {
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v8);
  }
  unint64_t v32 = v51;
  unint64_t v31 = v52;
  unint64_t v33 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v51;
  if (v33 < (unint64_t)v51) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v52)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v51 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v8);
    }
    *(void *)unint64_t v37 = v4;
  }
  if (!v31) {
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v8);
  }
  unint64_t v39 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(v3 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(v3 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(v3 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(v3 + 116) = v45;
    if (v45 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v48, v6);
  if (!v50) {
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v8);
  }
  char v51 = v48;
  unint64_t v52 = v49;
  unint64_t v53 = 0;
  unint64_t v9 = ((unint64_t)v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v48;
  unint64_t v11 = v9 - (void)v48;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v49)
    {
      unint64_t v52 = 0;
    }
    else
    {
      *(_WORD *)((char *)v48 + v11) = 737;
      unint64_t v53 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v51, (uint64_t *)a2);
  if (v52)
  {
    uint64_t v14 = v53;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v53 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v8);
  }
  unint64_t v19 = v50;
  if (v50)
  {
    unint64_t v20 = ((unint64_t)v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v48;
    if (v20 < (unint64_t)v48)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v49)
      {
        *(_WORD *)((char *)v48 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v3 + 8));
  unint64_t v24 = v47;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 737;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  char v51 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v51, 1, 0);
  unint64_t v27 = v51;
  char v51 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
  return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v46, v8);
}

void WebKit::WebGPU::RemoteCommandBufferProxy::~RemoteCommandBufferProxy(WebKit::WebGPU::RemoteCommandBufferProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 761;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 761;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  int v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unint64_t v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EA7E0;
  unsigned int v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteCommandBufferProxy::~RemoteCommandBufferProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandBufferProxy::setLabelInternal(WebKit::WebGPU::RemoteCommandBufferProxy *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)a2;
  return IPC::StreamClientConnection::send<Messages::RemoteCommandBuffer::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80), &v3, *((void *)this + 4));
}

void WebKit::WebGPU::RemoteCommandEncoderProxy::~RemoteCommandEncoderProxy(WebKit::WebGPU::RemoteCommandEncoderProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 770;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 770;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  int v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unint64_t v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EA808;
  unsigned int v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteCommandEncoderProxy::~RemoteCommandEncoderProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteCommandEncoderProxy::beginRenderPass@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  unint64_t v8 = *(_DWORD **)(a1 + 40);
  ++v8[2];
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v8, a2, (uint64_t)v57, a4);
  if (!v58)
  {
    *a3 = 0;
    goto LABEL_47;
  }
  BOOL v10 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v56 = v10;
  if (!v58) {
    goto LABEL_77;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 72) + 72) + 80);
  uint64_t v5 = *(void *)(a1 + 32);
  double v11 = *(double *)(v4 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v10);
    double v12 = v11 + v13;
  }
  if (*(void *)(v4 + 56) != v5)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v63, v12);
    if (!(_BYTE)v65) {
      goto LABEL_43;
    }
    unint64_t v40 = v63;
    unint64_t v41 = v64;
    unint64_t v42 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - v63;
    if (v42 < v63)
    {
      unint64_t v45 = 0;
      unint64_t v44 = v64;
    }
    else
    {
      unint64_t v44 = 0;
      if (v43 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v45 = 0;
        if (v43 + 2 <= v64)
        {
          *(_WORD *)(v63 + v43) = 2871;
          unint64_t v44 = v41;
          unint64_t v45 = v43 + 2;
        }
      }
    }
    uint64_t v46 = (void *)((v40 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v46 >= v40 + v45)
    {
      unint64_t v47 = (char *)v46 - v40;
      if ((unint64_t)v46 - v40 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v45 = (unint64_t)(v47 + 8);
      if ((unint64_t)(v47 + 8) > v44) {
        goto LABEL_43;
      }
      *uint64_t v46 = v5;
    }
    if (!v44)
    {
LABEL_43:
      uint64_t v33 = 0;
      goto LABEL_46;
    }
    unint64_t v48 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = *(void *)(v4 + 64);
    if (v48 + 16 >= v49) {
      unint64_t v48 = 0;
    }
    if (v45 <= 0x10) {
      unint64_t v45 = 16;
    }
    unint64_t v50 = v48 + v45;
    if (v49 <= v50) {
      unint64_t v51 = 0;
    }
    else {
      unint64_t v51 = v50;
    }
    *(void *)(v4 + 80) = v51;
    unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v51);
    int v53 = *(_DWORD *)(v4 + 116);
    if (v52 == 0x80000000 || v53 != 0)
    {
      unsigned int v55 = v53 + 1;
      *(_DWORD *)(v4 + 116) = v55;
      if (v55 >= *(_DWORD *)(v4 + 112))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
    }
    *(void *)(v4 + 56) = v5;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v60, v12);
  if (!v62) {
    goto LABEL_43;
  }
  unint64_t v63 = v60;
  unint64_t v64 = v61;
  unint64_t v65 = 0;
  unint64_t v14 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v15 = v14 >= v60;
  unint64_t v16 = v14 - v60;
  if (v15)
  {
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v61) {
      goto LABEL_78;
    }
    *(_WORD *)(v60 + v16) = 764;
    unint64_t v65 = v16 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode((uint64_t *)&v63, v57);
    unint64_t v17 = v65;
    unint64_t v18 = (void *)((v63 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v63 + v65)
    {
      unint64_t v19 = (char *)v18 - v63;
      if ((unint64_t)v18 - v63 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v17 = (unint64_t)(v19 + 8);
      if ((unint64_t)(v19 + 8) > v64) {
        goto LABEL_29;
      }
      *unint64_t v18 = v56;
      unint64_t v65 = (unint64_t)(v19 + 8);
    }
    if (v64)
    {
      unint64_t v20 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v21 = *(void *)(v4 + 64);
      if (v20 + 16 >= v21) {
        unint64_t v20 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v22 = v20 + v17;
      if (v21 <= v22) {
        unint64_t v22 = 0;
      }
      *(void *)(v4 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v4 + 116))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v62) {
      break;
    }
LABEL_77:
    __break(1u);
LABEL_78:
    unint64_t v64 = 0;
  }
  unint64_t v23 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v60;
  if (v23 < v60)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v61)
    {
      *(_WORD *)(v60 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v4 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v4 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v28);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v4 + 8));
  unint64_t v29 = v59;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 764;
  *((void *)v30 + 1) = v5;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  unint64_t v63 = (unint64_t)v30;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode(v30, v57);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v30, (uint64_t *)&v56);
  uint64_t v4 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v63, 1, 0);
  unsigned int v32 = (IPC::Encoder *)v63;
  unint64_t v63 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
  if (v4) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v34 = (uint64_t)v56;
  uint64_t v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = 1;
  *(void *)(v35 + 16) = 0;
  *(void *)(v35 + 24) = 0;
  *(void *)uint64_t v35 = &unk_1EE9EB650;
  *(void *)(v35 + 32) = v34;
  ++v8[2];
  *(void *)(v35 + 40) = v8;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v35 + 48) = a1;
  if (!v58) {
    goto LABEL_77;
  }
  uint64_t v33 = v35;
  uint64_t v36 = v57[0];
  v57[0] = 0;
  *(void *)(v35 + 24) = v36;
  off_1EE9EB700((WebKit::WebGPU::RemoteRenderPassEncoderProxy *)v35, (const WTF::String *)(v35 + 24));
LABEL_46:
  *a3 = v33;
LABEL_47:
  uint64_t result = std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v9);
  if (v8[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  --v8[2];
  return result;
}

WTF::StringImpl *WebKit::WebGPU::RemoteCommandEncoderProxy::beginComputePass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  double v6 = *(_DWORD **)(a1 + 40);
  ++v6[2];
  LOBYTE(v68) = 0;
  unsigned __int8 v71 = 0;
  if (!*(unsigned char *)(a2 + 32)) {
    goto LABEL_24;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v6, a2, (uint64_t)&v64, a4);
  int v9 = v67;
  if (v71 != v67)
  {
    if (!v71)
    {
      int v11 = 0;
      double v12 = v64;
      unint64_t v64 = 0;
      unint64_t v68 = v12;
      long long v69 = v65;
      uint64_t v70 = v66;
      unsigned __int8 v71 = 1;
      goto LABEL_17;
    }
    uint64_t result = v68;
    unint64_t v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    unsigned __int8 v71 = 0;
LABEL_16:
    int v11 = 1;
    goto LABEL_17;
  }
  if (!v71) {
    goto LABEL_16;
  }
  BOOL v10 = v64;
  unint64_t v64 = 0;
  uint64_t result = v68;
  unint64_t v68 = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  int v11 = 0;
  long long v69 = v65;
  LOBYTE(v70) = v66;
LABEL_17:
  if (v9)
  {
    uint64_t result = v64;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v64, v8);
        if (v11) {
          goto LABEL_22;
        }
        goto LABEL_24;
      }
      *(_DWORD *)v64 -= 2;
    }
  }
  if (v11)
  {
LABEL_22:
    *a3 = 0;
    goto LABEL_82;
  }
LABEL_24:
  double v13 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v63 = v13;
  unint64_t v14 = *(uint64_t **)(*(void *)(*(void *)(*(void *)(a1 + 48) + 72) + 72) + 80);
  BOOL v15 = *(WTF::StringImpl ***)(a1 + 32);
  double v16 = *((double *)v14 + 15);
  double v17 = INFINITY;
  if (fabs(v16) != INFINITY)
  {
    WTF::ApproximateTime::now(v13);
    double v17 = v16 + v18;
  }
  if ((WTF::StringImpl **)v14[7] != v15)
  {
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v14 + 8), &v64, v17);
    if (!BYTE8(v65)) {
      goto LABEL_74;
    }
    unint64_t v47 = v64;
    unint64_t v48 = v65;
    unint64_t v49 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = v49 - (void)v64;
    if (v49 < (unint64_t)v64)
    {
      unint64_t v52 = 0;
      unint64_t v51 = v65;
    }
    else
    {
      unint64_t v51 = 0;
      if (v50 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v52 = 0;
      }
      else
      {
        unint64_t v52 = 0;
        if (v50 + 2 <= (unint64_t)v65)
        {
          *(_WORD *)((char *)v64 + v50) = 2871;
          unint64_t v51 = v48;
          unint64_t v52 = v50 + 2;
        }
      }
    }
    int v53 = (char *)(((unint64_t)v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v53 >= (char *)v47 + v52)
    {
      unint64_t v52 = v53 - (char *)v47 + 8;
      if ((unint64_t)(v53 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v52 > v51) {
        goto LABEL_74;
      }
      *(void *)int v53 = v15;
    }
    if (!v51)
    {
LABEL_74:
      uint64_t v41 = 0;
      goto LABEL_77;
    }
    unint64_t v55 = (v14[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v56 = v14[8];
    if (v55 + 16 >= v56) {
      unint64_t v55 = 0;
    }
    if (v52 <= 0x10) {
      unint64_t v52 = 16;
    }
    unint64_t v57 = v55 + v52;
    if (v56 <= v57) {
      unint64_t v58 = 0;
    }
    else {
      unint64_t v58 = v57;
    }
    v14[10] = v58;
    unint64_t v59 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v14[9] + 16) + 128), v58);
    int v60 = *((_DWORD *)v14 + 29);
    if (v59 == 0x80000000 || v60 != 0)
    {
      unsigned int v62 = v60 + 1;
      *((_DWORD *)v14 + 29) = v62;
      if (v62 >= *((_DWORD *)v14 + 28))
      {
        if (*((unsigned char *)v14 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v14 + 23));
        }
        *((_DWORD *)v14 + 29) = 0;
      }
    }
    v14[7] = (uint64_t)v15;
  }
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v14 + 8), &v73, v17);
  if (!v75) {
    goto LABEL_74;
  }
  unint64_t v20 = v73;
  unint64_t v21 = v74;
  unint64_t v64 = v73;
  long long v65 = v74;
  unint64_t v22 = ((unint64_t)v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v23 = v22 - (void)v73;
  if (v22 < (unint64_t)v73) {
    goto LABEL_122;
  }
  if (v23 > 0xFFFFFFFFFFFFFFFDLL) {
    goto LABEL_115;
  }
  unint64_t v24 = v23 + 2;
  if (v23 + 2 > v74) {
    goto LABEL_115;
  }
  *(_WORD *)((char *)v73 + v23) = 763;
  *((void *)&v65 + 1) = v23 + 2;
  while (1)
  {
    while (1)
    {
      if (v71)
      {
        if (v24 >= v21)
        {
          *(void *)&long long v65 = 0;
        }
        else
        {
          *((unsigned char *)v20 + v24) = 1;
          *((void *)&v65 + 1) = v24 + 1;
          if (!v71) {
            goto LABEL_121;
          }
        }
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v64, (uint64_t *)&v68);
        IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>((uint64_t *)&v64, (uint64_t)&v69);
        unint64_t v24 = *((void *)&v65 + 1);
        unint64_t v21 = v65;
        unint64_t v20 = v64;
      }
      else if (v24 >= v21)
      {
        unint64_t v21 = 0;
        *(void *)&long long v65 = 0;
      }
      else
      {
        *((unsigned char *)v20 + v24++) = 0;
        *((void *)&v65 + 1) = v24;
      }
      unint64_t v25 = (char *)(((unint64_t)v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v25 >= (char *)v20 + v24)
      {
        int64_t v26 = v25 - (char *)v20;
        if ((unint64_t)(v25 - (char *)v20) > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_54;
        }
        unint64_t v24 = v26 + 8;
        if (v26 + 8 > v21) {
          goto LABEL_54;
        }
        *(void *)unint64_t v25 = v63;
        *((void *)&v65 + 1) = v26 + 8;
        unint64_t v21 = v65;
      }
      if (v21)
      {
        unint64_t v27 = (v14[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v28 = v14[8];
        if (v27 + 16 >= v28) {
          unint64_t v27 = 0;
        }
        if (v24 <= 0x10) {
          unint64_t v24 = 16;
        }
        unint64_t v29 = v27 + v24;
        if (v28 <= v29) {
          unint64_t v29 = 0;
        }
        v14[10] = v29;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14[9] + 16) + 128), v29) == 0x80000000
          || *((_DWORD *)v14 + 29))
        {
          if (*((unsigned char *)v14 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v14 + 23));
          }
          *((_DWORD *)v14 + 29) = 0;
        }
        goto LABEL_75;
      }
LABEL_54:
      if (v75) {
        break;
      }
LABEL_114:
      __break(1u);
LABEL_115:
      unint64_t v21 = 0;
      unint64_t v24 = 0;
      *(void *)&long long v65 = 0;
    }
    unint64_t v30 = ((unint64_t)v73 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v31 = v30 - (void)v73;
    if (v30 < (unint64_t)v73)
    {
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v32 = 0;
      if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v74)
      {
        *(_WORD *)((char *)v73 + v31) = 2870;
        unint64_t v32 = v31 + 2;
      }
    }
    unint64_t v33 = (v14[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v14[8];
    if (v33 + 16 >= v34) {
      unint64_t v33 = 0;
    }
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    v14[10] = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v14[9] + 16) + 128), v35);
    *((_DWORD *)v14 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v72, (uint64_t **)v14 + 1);
    unint64_t v14 = v72;
    uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v36 = 763;
    *((void *)v36 + 1) = v15;
    *((void *)v36 + 66) = (char *)v36 + 16;
    *((void *)v36 + 67) = 512;
    *((void *)v36 + 68) = 0;
    *((void *)v36 + 70) = 0;
    *((void *)v36 + 69) = 0;
    IPC::Encoder::encodeHeader(v36);
    unint64_t v64 = v36;
    BOOL v15 = (WTF::StringImpl **)v71;
    unint64_t v37 = (unsigned char *)IPC::Encoder::grow(v36, 1uLL, 1);
    if (!v15) {
      break;
    }
    if (!v38)
    {
      __break(0xC471u);
      JUMPOUT(0x1990C0478);
    }
    unsigned char *v37 = 1;
    if (v71)
    {
      BOOL v15 = &v68;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v36, (uint64_t *)&v68);
      IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(v36, (uint64_t)&v69);
      goto LABEL_71;
    }
LABEL_121:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_122:
    unint64_t v24 = 0;
  }
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1990C04A4);
  }
  unsigned char *v37 = 0;
LABEL_71:
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v36, (uint64_t *)&v63);
  unint64_t v14 = (uint64_t *)IPC::Connection::sendMessageImpl((uint64_t)v14, (uint64_t *)&v64, 1, 0);
  unint64_t v40 = v64;
  unint64_t v64 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v39);
    WTF::fastFree(v45, v46);
  }
  uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
  if (v14) {
    goto LABEL_74;
  }
LABEL_75:
  uint64_t v42 = (uint64_t)v63;
  uint64_t v43 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v43 + 8) = 1;
  *(void *)(v43 + 16) = 0;
  *(void *)(v43 + 24) = 0;
  *(void *)uint64_t v43 = &unk_1EE9EA670;
  *(void *)(v43 + 32) = v42;
  ++v6[2];
  *(void *)(v43 + 40) = v6;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v43 + 48) = a1;
  if (!v71) {
    goto LABEL_114;
  }
  uint64_t v41 = v43;
  unint64_t v44 = v68;
  unint64_t v68 = 0;
  *(void *)(v43 + 24) = v44;
  unint64_t v64 = (WTF::StringImpl *)(v43 + 24);
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 72) + 72) + 80), (uint64_t **)&v64, *(void *)(v43 + 32));
LABEL_77:
  *a3 = v41;
  if (v71)
  {
    uint64_t result = v68;
    unint64_t v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_82:
  if (v6[2] == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  --v6[2];
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyBufferToBuffer(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3, const WebCore::WebGPU::Buffer *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v77 = a5;
  uint64_t v78 = a3;
  uint64_t v76 = a6;
  unint64_t v8 = (_DWORD *)*((void *)this + 5);
  ++v8[2];
  uint64_t v75 = (*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v8 + 40))(v8, a2);
  uint64_t result = (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v8 + 40))(v8, a4);
  unint64_t v74 = result;
  if (v75) {
    BOOL v10 = result == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    goto LABEL_63;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v12 = *((void *)this + 4);
  double v13 = *(double *)(v11 + 120);
  double v14 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v14 = v13 + v15;
  }
  if (*(void *)(v11 + 56) == v12) {
    goto LABEL_8;
  }
  uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v80, v14);
  if (v82)
  {
    unint64_t v55 = v80;
    unint64_t v56 = v81;
    unint64_t v57 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v58 = v57 - v80;
    if (v57 < v80)
    {
      unint64_t v60 = 0;
      unint64_t v59 = v81;
    }
    else
    {
      unint64_t v59 = 0;
      if (v58 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v60 = 0;
      }
      else
      {
        unint64_t v60 = 0;
        if (v58 + 2 <= v81)
        {
          *(_WORD *)(v80 + v58) = 2871;
          unint64_t v59 = v56;
          unint64_t v60 = v58 + 2;
        }
      }
    }
    unint64_t v61 = (void *)((v55 + v60 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v61 >= v55 + v60)
    {
      unsigned int v62 = (char *)v61 - v55;
      if ((unint64_t)v61 - v55 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_63;
      }
      unint64_t v60 = (unint64_t)(v62 + 8);
      if ((unint64_t)(v62 + 8) > v59) {
        goto LABEL_63;
      }
      *unint64_t v61 = v12;
    }
    if (v59)
    {
      unint64_t v63 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v64 = *(void *)(v11 + 64);
      if (v63 + 16 >= v64) {
        unint64_t v63 = 0;
      }
      if (v60 <= 0x10) {
        unint64_t v60 = 16;
      }
      unint64_t v65 = v63 + v60;
      if (v64 <= v65) {
        unint64_t v66 = 0;
      }
      else {
        unint64_t v66 = v65;
      }
      *(void *)(v11 + 80) = v66;
      unint64_t v67 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v66);
      int v68 = *(_DWORD *)(v11 + 116);
      if (v67 == 0x80000000 || v68 != 0)
      {
        unsigned int v70 = v68 + 1;
        *(_DWORD *)(v11 + 116) = v70;
        if (v70 >= *(_DWORD *)(v11 + 112))
        {
          if (*(unsigned char *)(v11 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
          }
          *(_DWORD *)(v11 + 116) = 0;
        }
      }
      *(void *)(v11 + 56) = v12;
LABEL_8:
      uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v80, v14);
      if (!v82) {
        goto LABEL_63;
      }
      unint64_t v16 = v80;
      unint64_t v17 = v81;
      unint64_t v18 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = v18 - v80;
      if (v18 < v80)
      {
        unint64_t v21 = 0;
        unint64_t v20 = v81;
      }
      else
      {
        unint64_t v20 = 0;
        if (v19 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_94;
        }
        unint64_t v21 = 0;
        if (v19 + 2 <= v81)
        {
          *(_WORD *)(v80 + v19) = 766;
          unint64_t v20 = v17;
          unint64_t v21 = v19 + 2;
        }
      }
      while (1)
      {
        unint64_t v22 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v23 = v22 >= v16 + v21;
        unint64_t v24 = v22 - (v16 + v21);
        if (v23)
        {
          unint64_t v71 = 0;
          unint64_t v25 = v24 + v21;
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= v20)
          {
            *(void *)(v16 + v25) = v75;
            unint64_t v71 = v20;
            unint64_t v21 = v25 + 8;
          }
        }
        else
        {
          unint64_t v71 = v20;
        }
        unint64_t v26 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v23 = v26 >= v16 + v21;
        unint64_t v27 = v26 - (v16 + v21);
        if (v23)
        {
          unint64_t v72 = 0;
          unint64_t v28 = v27 + v21;
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= v71)
          {
            *(void *)(v16 + v28) = v78;
            unint64_t v72 = v71;
            unint64_t v21 = v28 + 8;
          }
        }
        else
        {
          unint64_t v72 = v71;
        }
        unint64_t v29 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v30 = v29 - (v16 + v21);
        if (v29 < v16 + v21)
        {
          unint64_t v31 = v72;
        }
        else
        {
          unint64_t v31 = 0;
          unint64_t v32 = v30 + v21;
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= v72)
          {
            *(void *)(v16 + v32) = v74;
            unint64_t v31 = v72;
            unint64_t v21 = v32 + 8;
          }
        }
        unint64_t v33 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v23 = v33 >= v16 + v21;
        unint64_t v34 = v33 - (v16 + v21);
        if (v23)
        {
          unint64_t v73 = 0;
          unint64_t v35 = v34 + v21;
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= v31)
          {
            *(void *)(v16 + v35) = v77;
            unint64_t v73 = v31;
            unint64_t v21 = v35 + 8;
          }
        }
        else
        {
          unint64_t v73 = v31;
        }
        uint64_t v36 = (void *)((v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v20 = (unint64_t)v36 - v16 - v21;
        if ((unint64_t)v36 >= v16 + v21)
        {
          unint64_t v20 = (unint64_t)v36 - v16;
          if ((unint64_t)v36 - v16 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_49;
          }
          unint64_t v21 = v20 + 8;
          if (v20 + 8 > v73) {
            goto LABEL_49;
          }
          *uint64_t v36 = v76;
        }
        if (v73)
        {
          unint64_t v37 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v38 = *(void *)(v11 + 64);
          if (v37 + 16 >= v38) {
            unint64_t v37 = 0;
          }
          if (v21 <= 0x10) {
            unint64_t v21 = 16;
          }
          unint64_t v39 = v37 + v21;
          if (v38 <= v39) {
            unint64_t v40 = 0;
          }
          else {
            unint64_t v40 = v39;
          }
          *(void *)(v11 + 80) = v40;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v40) == 0x80000000
            || *(_DWORD *)(v11 + 116))
          {
            if (*(unsigned char *)(v11 + 104)) {
              uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
            }
            *(_DWORD *)(v11 + 116) = 0;
          }
          break;
        }
LABEL_49:
        unint64_t v16 = v82;
        if (v82)
        {
          unint64_t v41 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v42 = v41 - v80;
          if (v41 < v80)
          {
            unint64_t v43 = 0;
          }
          else
          {
            unint64_t v43 = 0;
            if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v81)
            {
              *(_WORD *)(v80 + v42) = 2870;
              unint64_t v43 = v42 + 2;
            }
          }
          unint64_t v44 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v45 = *(void *)(v11 + 64);
          if (v44 + 16 >= v45) {
            unint64_t v44 = 0;
          }
          if (v43 <= 0x10) {
            unint64_t v43 = 16;
          }
          unint64_t v46 = v44 + v43;
          if (v45 <= v46) {
            unint64_t v46 = 0;
          }
          *(void *)(v11 + 80) = v46;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v46);
          *(_DWORD *)(v11 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)(v11 + 8));
          unint64_t v47 = v79;
          unint64_t v48 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v48 = 766;
          *((void *)v48 + 1) = v12;
          *((void *)v48 + 66) = (char *)v48 + 16;
          *((void *)v48 + 67) = 512;
          *((void *)v48 + 68) = 0;
          *((void *)v48 + 70) = 0;
          *((void *)v48 + 69) = 0;
          IPC::Encoder::encodeHeader(v48);
          unsigned int v83 = v48;
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v48, &v75);
          unint64_t v49 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>(v48, &v78);
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v49, (uint64_t *)&v74);
          unint64_t v50 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>(v49, &v77);
          IPC::Encoder::operator<<<unsigned long long const&>(v50, &v76);
          IPC::Connection::sendMessageImpl((uint64_t)v47, (uint64_t *)&v83, 1, 0);
          unint64_t v52 = v83;
          unsigned int v83 = 0;
          if (v52)
          {
            IPC::Encoder::~Encoder(v52, v51);
            WTF::fastFree(v53, v54);
          }
          uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
          break;
        }
        __break(1u);
LABEL_94:
        unint64_t v21 = v20;
      }
    }
  }
LABEL_63:
  if (v8[2] == 1) {
    return (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  --v8[2];
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyBufferToTexture(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (_DWORD *)a1[5];
  ++v7[2];
  uint64_t v8 = *(void *)a2;
  int v58 = *(_DWORD *)(a2 + 8);
  char v59 = *(unsigned char *)(a2 + 12);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 20);
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  uint64_t v11 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v7 + 40))(v7, *(void *)(*(void *)(a2 + 24) + 8));
  if (v11)
  {
    int v65 = v58;
    char v66 = v59;
    uint64_t v64 = v8;
    uint64_t v67 = (v10 | (v9 << 32)) << 24;
    uint64_t v68 = v11;
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    LOBYTE(v64) = 0;
  }
  char v69 = v12;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v7, a3, (uint64_t)&v58);
  uint64_t result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a4, (uint64_t)v55);
  int v14 = v57;
  if (v69 && v63 && v57)
  {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
    uint64_t v16 = a1[4];
    double v17 = *(double *)(v15 + 120);
    double v18 = INFINITY;
    if (fabs(v17) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      double v18 = v17 + v19;
    }
    if (*(void *)(v15 + 56) != v16)
    {
      uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v15 + 64, &v74, v18);
      if (!(_BYTE)v76) {
        goto LABEL_41;
      }
      unint64_t v39 = v74;
      unint64_t v40 = v75;
      unint64_t v41 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = v41 - v74;
      if (v41 < v74)
      {
        unint64_t v44 = 0;
        unint64_t v43 = v75;
      }
      else
      {
        unint64_t v43 = 0;
        if (v42 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v44 = 0;
        }
        else
        {
          unint64_t v44 = 0;
          if (v42 + 2 <= v75)
          {
            *(_WORD *)(v74 + v42) = 2871;
            unint64_t v43 = v40;
            unint64_t v44 = v42 + 2;
          }
        }
      }
      unint64_t v45 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v45 >= v39 + v44)
      {
        unint64_t v46 = (char *)v45 - v39;
        if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_41;
        }
        unint64_t v44 = (unint64_t)(v46 + 8);
        if ((unint64_t)(v46 + 8) > v43) {
          goto LABEL_41;
        }
        *unint64_t v45 = v16;
      }
      if (!v43)
      {
LABEL_41:
        int v14 = v57;
        goto LABEL_42;
      }
      unint64_t v47 = (*(void *)(v15 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v48 = *(void *)(v15 + 64);
      if (v47 + 16 >= v48) {
        unint64_t v47 = 0;
      }
      if (v44 <= 0x10) {
        unint64_t v44 = 16;
      }
      unint64_t v49 = v47 + v44;
      if (v48 <= v49) {
        unint64_t v50 = 0;
      }
      else {
        unint64_t v50 = v49;
      }
      *(void *)(v15 + 80) = v50;
      unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v15 + 72) + 16) + 128), v50);
      int v52 = *(_DWORD *)(v15 + 116);
      if (v51 == 0x80000000 || v52 != 0)
      {
        unsigned int v54 = v52 + 1;
        *(_DWORD *)(v15 + 116) = v54;
        if (v54 >= *(_DWORD *)(v15 + 112))
        {
          if (*(unsigned char *)(v15 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v15 + 92));
          }
          *(_DWORD *)(v15 + 116) = 0;
        }
      }
      *(void *)(v15 + 56) = v16;
    }
    uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v15 + 64, &v71, v18);
    if (v73)
    {
      unint64_t v74 = v71;
      unint64_t v75 = v72;
      unint64_t v76 = 0;
      unint64_t v20 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v21 = v20 >= v71;
      unint64_t v22 = v20 - v71;
      if (v21)
      {
        if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v72)
        {
          unint64_t v75 = 0;
        }
        else
        {
          *(_WORD *)(v71 + v22) = 767;
          unint64_t v76 = v22 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(&v74, &v64);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v74, (uint64_t)&v58);
      uint64_t result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v74, (uint64_t)v55);
      if (v75)
      {
        unint64_t v24 = v76;
        unint64_t v25 = (*(void *)(v15 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v23 = *(void *)(v15 + 64);
        if (v25 + 16 < v23)
        {
LABEL_18:
          if (v24 <= 0x10) {
            unint64_t v24 = 16;
          }
          unint64_t v26 = v25 + v24;
          if (v23 <= v26) {
            unint64_t v26 = 0;
          }
          *(void *)(v15 + 80) = v26;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v15 + 72) + 16) + 128), v26) == 0x80000000
            || *(_DWORD *)(v15 + 116))
          {
            if (*(unsigned char *)(v15 + 104)) {
              uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v15 + 92));
            }
            *(_DWORD *)(v15 + 116) = 0;
          }
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v24 = v73;
        if (v73)
        {
          unint64_t v27 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v28 = v27 - v71;
          if (v27 < v71)
          {
            unint64_t v29 = 0;
          }
          else
          {
            unint64_t v29 = 0;
            if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v72)
            {
              *(_WORD *)(v71 + v28) = 2870;
              unint64_t v29 = v28 + 2;
            }
          }
          unint64_t v30 = (*(void *)(v15 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v31 = *(void *)(v15 + 64);
          if (v30 + 16 >= v31) {
            unint64_t v30 = 0;
          }
          if (v29 <= 0x10) {
            unint64_t v29 = 16;
          }
          unint64_t v32 = v30 + v29;
          if (v31 <= v32) {
            unint64_t v32 = 0;
          }
          *(void *)(v15 + 80) = v32;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v15 + 72) + 16) + 128), v32);
          *(_DWORD *)(v15 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, (uint64_t **)(v15 + 8));
          unint64_t v33 = v70;
          unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v34 = 767;
          *((void *)v34 + 1) = v16;
          *((void *)v34 + 66) = (char *)v34 + 16;
          *((void *)v34 + 67) = 512;
          *((void *)v34 + 68) = 0;
          *((void *)v34 + 70) = 0;
          *((void *)v34 + 69) = 0;
          IPC::Encoder::encodeHeader(v34);
          unint64_t v74 = (unint64_t)v34;
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(v34, &v64);
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(v34, (uint64_t)&v58);
          unsigned __int8 v77 = v56;
          IPC::Encoder::operator<<<BOOL>(v34, (char *)&v77);
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(v34, v55, v77);
          IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v74, 1, 0);
          uint64_t v36 = (IPC::Encoder *)v74;
          unint64_t v74 = 0;
          if (v36)
          {
            IPC::Encoder::~Encoder(v36, v35);
            WTF::fastFree(v37, v38);
          }
          uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
          goto LABEL_41;
        }
        __break(1u);
      }
      unint64_t v25 = 0;
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_42:
  if (v14 && v56 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, int *))off_1EE9EA888[v56])(&v74, v55);
  }
  if (v63 && v62 && v61 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(int *, uint64_t *))off_1EE9EA898[v61])(v55, &v60);
  }
  if (v7[2] == 1) {
    return (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  --v7[2];
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyTextureToBuffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (_DWORD *)a1[5];
  ++v7[2];
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v7, a2, (uint64_t)v65);
  uint64_t v8 = *(void *)a3;
  int v55 = *(_DWORD *)(a3 + 8);
  char v56 = *(unsigned char *)(a3 + 12);
  uint64_t v9 = *(unsigned __int8 *)(a3 + 20);
  uint64_t v10 = *(unsigned int *)(a3 + 16);
  uint64_t v11 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v7 + 40))(v7, *(void *)(*(void *)(a3 + 24) + 8));
  if (v11)
  {
    int v60 = v55;
    char v61 = v56;
    uint64_t v59 = v8;
    uint64_t v62 = (v10 | (v9 << 32)) << 24;
    uint64_t v63 = v11;
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    LOBYTE(v59) = 0;
  }
  char v64 = v12;
  uint64_t result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a4, (uint64_t)&v55);
  int v14 = v58;
  if (v69 && v64 && v58)
  {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
    uint64_t v16 = a1[4];
    double v17 = *(double *)(v15 + 120);
    double v18 = INFINITY;
    if (fabs(v17) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      double v18 = v17 + v19;
    }
    if (*(void *)(v15 + 56) != v16)
    {
      uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v15 + 64, &v74, v18);
      if (!(_BYTE)v76) {
        goto LABEL_41;
      }
      unint64_t v39 = v74;
      unint64_t v40 = v75;
      unint64_t v41 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = v41 - v74;
      if (v41 < v74)
      {
        unint64_t v44 = 0;
        unint64_t v43 = v75;
      }
      else
      {
        unint64_t v43 = 0;
        if (v42 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v44 = 0;
        }
        else
        {
          unint64_t v44 = 0;
          if (v42 + 2 <= v75)
          {
            *(_WORD *)(v74 + v42) = 2871;
            unint64_t v43 = v40;
            unint64_t v44 = v42 + 2;
          }
        }
      }
      unint64_t v45 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v45 >= v39 + v44)
      {
        unint64_t v46 = (char *)v45 - v39;
        if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_41;
        }
        unint64_t v44 = (unint64_t)(v46 + 8);
        if ((unint64_t)(v46 + 8) > v43) {
          goto LABEL_41;
        }
        *unint64_t v45 = v16;
      }
      if (!v43)
      {
LABEL_41:
        int v14 = v58;
        goto LABEL_42;
      }
      unint64_t v47 = (*(void *)(v15 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v48 = *(void *)(v15 + 64);
      if (v47 + 16 >= v48) {
        unint64_t v47 = 0;
      }
      if (v44 <= 0x10) {
        unint64_t v44 = 16;
      }
      unint64_t v49 = v47 + v44;
      if (v48 <= v49) {
        unint64_t v50 = 0;
      }
      else {
        unint64_t v50 = v49;
      }
      *(void *)(v15 + 80) = v50;
      unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v15 + 72) + 16) + 128), v50);
      int v52 = *(_DWORD *)(v15 + 116);
      if (v51 == 0x80000000 || v52 != 0)
      {
        unsigned int v54 = v52 + 1;
        *(_DWORD *)(v15 + 116) = v54;
        if (v54 >= *(_DWORD *)(v15 + 112))
        {
          if (*(unsigned char *)(v15 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v15 + 92));
          }
          *(_DWORD *)(v15 + 116) = 0;
        }
      }
      *(void *)(v15 + 56) = v16;
    }
    uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v15 + 64, &v71, v18);
    if (v73)
    {
      unint64_t v74 = v71;
      unint64_t v75 = v72;
      unint64_t v76 = 0;
      unint64_t v20 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v21 = v20 >= v71;
      unint64_t v22 = v20 - v71;
      if (v21)
      {
        if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v72)
        {
          unint64_t v75 = 0;
        }
        else
        {
          *(_WORD *)(v71 + v22) = 768;
          unint64_t v76 = v22 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v74, (uint64_t)v65);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(&v74, &v59);
      uint64_t result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v74, (uint64_t)&v55);
      if (v75)
      {
        unint64_t v24 = v76;
        unint64_t v25 = (*(void *)(v15 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v23 = *(void *)(v15 + 64);
        if (v25 + 16 < v23)
        {
LABEL_18:
          if (v24 <= 0x10) {
            unint64_t v24 = 16;
          }
          unint64_t v26 = v25 + v24;
          if (v23 <= v26) {
            unint64_t v26 = 0;
          }
          *(void *)(v15 + 80) = v26;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v15 + 72) + 16) + 128), v26) == 0x80000000
            || *(_DWORD *)(v15 + 116))
          {
            if (*(unsigned char *)(v15 + 104)) {
              uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v15 + 92));
            }
            *(_DWORD *)(v15 + 116) = 0;
          }
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v24 = v73;
        if (v73)
        {
          unint64_t v27 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v28 = v27 - v71;
          if (v27 < v71)
          {
            unint64_t v29 = 0;
          }
          else
          {
            unint64_t v29 = 0;
            if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v72)
            {
              *(_WORD *)(v71 + v28) = 2870;
              unint64_t v29 = v28 + 2;
            }
          }
          unint64_t v30 = (*(void *)(v15 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v31 = *(void *)(v15 + 64);
          if (v30 + 16 >= v31) {
            unint64_t v30 = 0;
          }
          if (v29 <= 0x10) {
            unint64_t v29 = 16;
          }
          unint64_t v32 = v30 + v29;
          if (v31 <= v32) {
            unint64_t v32 = 0;
          }
          *(void *)(v15 + 80) = v32;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v15 + 72) + 16) + 128), v32);
          *(_DWORD *)(v15 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, (uint64_t **)(v15 + 8));
          unint64_t v33 = v70;
          unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v34 = 768;
          *((void *)v34 + 1) = v16;
          *((void *)v34 + 66) = (char *)v34 + 16;
          *((void *)v34 + 67) = 512;
          *((void *)v34 + 68) = 0;
          *((void *)v34 + 70) = 0;
          *((void *)v34 + 69) = 0;
          IPC::Encoder::encodeHeader(v34);
          unint64_t v74 = (unint64_t)v34;
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(v34, (uint64_t)v65);
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(v34, &v59);
          unsigned __int8 v77 = v57;
          IPC::Encoder::operator<<<BOOL>(v34, (char *)&v77);
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(v34, &v55, v77);
          IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v74, 1, 0);
          uint64_t v36 = (IPC::Encoder *)v74;
          unint64_t v74 = 0;
          if (v36)
          {
            IPC::Encoder::~Encoder(v36, v35);
            WTF::fastFree(v37, v38);
          }
          uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
          goto LABEL_41;
        }
        __break(1u);
      }
      unint64_t v25 = 0;
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_42:
  if (v14 && v57 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, int *))off_1EE9EA888[v57])(&v74, &v55);
  }
  if (v69 && v68 && v67 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9EA898[v67])(&v59, &v66);
  }
  if (v7[2] == 1) {
    return (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  --v7[2];
  return result;
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::copyTextureToTexture(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (_DWORD *)a1[5];
  ++v7[2];
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v7, a2, (uint64_t)v60);
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v7, a3, (uint64_t)v55);
  uint64_t result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a4, (uint64_t)v52);
  int v9 = v54;
  if (v64) {
    BOOL v10 = v59 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v54 != 0)
  {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
    uint64_t v13 = a1[4];
    double v14 = *(double *)(v12 + 120);
    double v15 = INFINITY;
    if (fabs(v14) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      double v15 = v14 + v16;
    }
    if (*(void *)(v12 + 56) != v13)
    {
      uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v69, v15);
      if (!(_BYTE)v71) {
        goto LABEL_42;
      }
      unint64_t v36 = v69;
      unint64_t v37 = v70;
      unint64_t v38 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v39 = v38 - v69;
      if (v38 < v69)
      {
        unint64_t v41 = 0;
        unint64_t v40 = v70;
      }
      else
      {
        unint64_t v40 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v41 = 0;
        }
        else
        {
          unint64_t v41 = 0;
          if (v39 + 2 <= v70)
          {
            *(_WORD *)(v69 + v39) = 2871;
            unint64_t v40 = v37;
            unint64_t v41 = v39 + 2;
          }
        }
      }
      unint64_t v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v42 >= v36 + v41)
      {
        unint64_t v43 = (char *)v42 - v36;
        if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_42;
        }
        unint64_t v41 = (unint64_t)(v43 + 8);
        if ((unint64_t)(v43 + 8) > v40) {
          goto LABEL_42;
        }
        *unint64_t v42 = v13;
      }
      if (!v40)
      {
LABEL_42:
        int v9 = v54;
        goto LABEL_43;
      }
      unint64_t v44 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v45 = *(void *)(v12 + 64);
      if (v44 + 16 >= v45) {
        unint64_t v44 = 0;
      }
      if (v41 <= 0x10) {
        unint64_t v41 = 16;
      }
      unint64_t v46 = v44 + v41;
      if (v45 <= v46) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v46;
      }
      *(void *)(v12 + 80) = v47;
      unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v47);
      int v49 = *(_DWORD *)(v12 + 116);
      if (v48 == 0x80000000 || v49 != 0)
      {
        unsigned int v51 = v49 + 1;
        *(_DWORD *)(v12 + 116) = v51;
        if (v51 >= *(_DWORD *)(v12 + 112))
        {
          if (*(unsigned char *)(v12 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
          }
          *(_DWORD *)(v12 + 116) = 0;
        }
      }
      *(void *)(v12 + 56) = v13;
    }
    uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v66, v15);
    if (v68)
    {
      unint64_t v69 = v66;
      unint64_t v70 = v67;
      unint64_t v71 = 0;
      unint64_t v17 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v18 = v17 >= v66;
      unint64_t v19 = v17 - v66;
      if (v18)
      {
        if (v19 > 0xFFFFFFFFFFFFFFFDLL || v19 + 2 > v67)
        {
          unint64_t v70 = 0;
        }
        else
        {
          *(_WORD *)(v66 + v19) = 769;
          unint64_t v71 = v19 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v69, (uint64_t)v60);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((uint64_t *)&v69, (uint64_t)v55);
      uint64_t result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v69, (uint64_t)v52);
      if (v70)
      {
        unint64_t v21 = v71;
        unint64_t v22 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v20 = *(void *)(v12 + 64);
        if (v22 + 16 < v20)
        {
LABEL_19:
          if (v21 <= 0x10) {
            unint64_t v21 = 16;
          }
          unint64_t v23 = v22 + v21;
          if (v20 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(v12 + 80) = v23;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v23) == 0x80000000
            || *(_DWORD *)(v12 + 116))
          {
            if (*(unsigned char *)(v12 + 104)) {
              uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
            }
            *(_DWORD *)(v12 + 116) = 0;
          }
          goto LABEL_42;
        }
      }
      else
      {
        unint64_t v21 = v68;
        if (v68)
        {
          unint64_t v24 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v25 = v24 - v66;
          if (v24 < v66)
          {
            unint64_t v26 = 0;
          }
          else
          {
            unint64_t v26 = 0;
            if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v67)
            {
              *(_WORD *)(v66 + v25) = 2870;
              unint64_t v26 = v25 + 2;
            }
          }
          unint64_t v27 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v28 = *(void *)(v12 + 64);
          if (v27 + 16 >= v28) {
            unint64_t v27 = 0;
          }
          if (v26 <= 0x10) {
            unint64_t v26 = 16;
          }
          unint64_t v29 = v27 + v26;
          if (v28 <= v29) {
            unint64_t v29 = 0;
          }
          *(void *)(v12 + 80) = v29;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v29);
          *(_DWORD *)(v12 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v12 + 8));
          unint64_t v30 = v65;
          unint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v31 = 769;
          *((void *)v31 + 1) = v13;
          *((void *)v31 + 66) = (char *)v31 + 16;
          *((void *)v31 + 67) = 512;
          *((void *)v31 + 68) = 0;
          *((void *)v31 + 70) = 0;
          *((void *)v31 + 69) = 0;
          IPC::Encoder::encodeHeader(v31);
          unint64_t v69 = (unint64_t)v31;
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(v31, (uint64_t)v60);
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(v31, (uint64_t)v55);
          unsigned __int8 v72 = v53;
          IPC::Encoder::operator<<<BOOL>(v31, (char *)&v72);
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(v31, v52, v72);
          IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v69, 1, 0);
          unint64_t v33 = (IPC::Encoder *)v69;
          unint64_t v69 = 0;
          if (v33)
          {
            IPC::Encoder::~Encoder(v33, v32);
            WTF::fastFree(v34, v35);
          }
          uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65);
          goto LABEL_42;
        }
        __break(1u);
      }
      unint64_t v22 = 0;
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_43:
  if (v9 && v53 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, int *))off_1EE9EA888[v53])(&v69, v52);
  }
  if (v59 && v58 && v57 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(int *, uint64_t *))off_1EE9EA898[v57])(v52, &v56);
  }
  if (v64 && v63 && v62 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9EA898[v62])(v55, &v61);
  }
  if (v7[2] == 1) {
    return (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  --v7[2];
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandEncoderProxy::clearBuffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v58[0] = a4;
  v58[1] = a5;
  uint64_t v57 = a3;
  double v6 = (_DWORD *)a1[5];
  ++v6[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 40))(v6);
  uint64_t v8 = result;
  uint64_t v56 = result;
  if (v6[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    if (!v8) {
      return result;
    }
  }
  else
  {
    --v6[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
  uint64_t v10 = a1[4];
  double v11 = *(double *)(v9 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v12 = v11 + v13;
  }
  if (*(void *)(v9 + 56) != v10)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v63, v12);
    if (!(_BYTE)v65) {
      return result;
    }
    unint64_t v40 = v63;
    unint64_t v41 = v64;
    unint64_t v42 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - (void)v63;
    if (v42 < (unint64_t)v63)
    {
      unint64_t v45 = 0;
      unint64_t v44 = v64;
    }
    else
    {
      unint64_t v44 = 0;
      if (v43 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v45 = 0;
        if (v43 + 2 <= v64)
        {
          *(_WORD *)((char *)v63 + v43) = 2871;
          unint64_t v44 = v41;
          unint64_t v45 = v43 + 2;
        }
      }
    }
    unint64_t v46 = (char *)(((unint64_t)v40 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v46 >= (char *)v40 + v45)
    {
      int64_t v47 = v46 - (char *)v40;
      if ((unint64_t)(v46 - (char *)v40) > 0xFFFFFFFFFFFFFFF7) {
        return result;
      }
      unint64_t v45 = v47 + 8;
      if (v47 + 8 > v44) {
        return result;
      }
      *(void *)unint64_t v46 = v10;
    }
    if (!v44) {
      return result;
    }
    unint64_t v48 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = *(void *)(v9 + 64);
    if (v48 + 16 >= v49) {
      unint64_t v48 = 0;
    }
    if (v45 <= 0x10) {
      unint64_t v45 = 16;
    }
    unint64_t v50 = v48 + v45;
    if (v49 <= v50) {
      unint64_t v51 = 0;
    }
    else {
      unint64_t v51 = v50;
    }
    *(void *)(v9 + 80) = v51;
    unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v51);
    int v53 = *(_DWORD *)(v9 + 116);
    if (v52 == 0x80000000 || v53 != 0)
    {
      unsigned int v55 = v53 + 1;
      *(_DWORD *)(v9 + 116) = v55;
      if (v55 >= *(_DWORD *)(v9 + 112))
      {
        if (*(unsigned char *)(v9 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
        }
        *(_DWORD *)(v9 + 116) = 0;
      }
    }
    *(void *)(v9 + 56) = v10;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v60, v12);
  if (!v62) {
    return result;
  }
  double v14 = v60;
  unint64_t v15 = v61;
  char v63 = v60;
  unint64_t v64 = v61;
  unint64_t v65 = 0;
  unint64_t v16 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - (void)v60;
  if (v16 < (unint64_t)v60)
  {
    unint64_t v18 = 0;
  }
  else if (v17 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v18 = v17 + 2, v17 + 2 > v61))
  {
    unint64_t v15 = 0;
    unint64_t v18 = 0;
    unint64_t v64 = 0;
  }
  else
  {
    *(_WORD *)((char *)v60 + v17) = 765;
    unint64_t v65 = v17 + 2;
  }
  unint64_t v19 = (char *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= (char *)v14 + v18)
  {
    unint64_t v20 = (char *)(v19 - (char *)v14);
    if ((unint64_t)(v19 - (char *)v14) > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v15)
    {
      unint64_t v15 = 0;
      unint64_t v64 = 0;
    }
    else
    {
      *(void *)unint64_t v19 = v56;
      unint64_t v65 = (unint64_t)(v20 + 8);
      unint64_t v18 = (unint64_t)(v20 + 8);
    }
  }
  unint64_t v21 = (char *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v21 >= (char *)v14 + v18)
  {
    unint64_t v22 = (char *)(v21 - (char *)v14);
    if ((unint64_t)(v21 - (char *)v14) > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v22 + 8) > v15)
    {
      unint64_t v64 = 0;
    }
    else
    {
      *(void *)unint64_t v21 = v57;
      unint64_t v65 = (unint64_t)(v22 + 8);
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(&v63, (uint64_t)v58);
  if (v64)
  {
    unint64_t v24 = v65;
    unint64_t v25 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *(void *)(v9 + 64);
    if (v25 + 16 < v23)
    {
LABEL_23:
      if (v24 <= 0x10) {
        unint64_t v24 = 16;
      }
      unint64_t v26 = v25 + v24;
      if (v23 <= v26) {
        unint64_t v26 = 0;
      }
      *(void *)(v9 + 80) = v26;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v26) == 0x80000000
        || *(_DWORD *)(v9 + 116))
      {
        if (*(unsigned char *)(v9 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
        }
        *(_DWORD *)(v9 + 116) = 0;
      }
      return result;
    }
LABEL_78:
    unint64_t v25 = 0;
    goto LABEL_23;
  }
  unint64_t v24 = v62;
  if (!v62)
  {
    __break(1u);
    goto LABEL_78;
  }
  unint64_t v27 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - (void)v60;
  if (v27 < (unint64_t)v60)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v61)
    {
      *(_WORD *)((char *)v60 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(v9 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(v9 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v32);
  *(_DWORD *)(v9 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v9 + 8));
  unint64_t v33 = v59;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 765;
  *((void *)v34 + 1) = v10;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  char v63 = v34;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, (uint64_t *)&v56);
  unint64_t v35 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>(v34, &v57);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v35, (uint64_t)v58);
  IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v63, 1, 0);
  unint64_t v37 = v63;
  char v63 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v38, v39);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 774;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 774;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteCommandEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 773;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 773;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unsigned __int8 v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 772;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 772;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandEncoderProxy::writeTimestamp(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WebCore::WebGPU::QuerySet *a2, int a3)
{
  int v58 = a3;
  uint64_t v4 = (_DWORD *)*((void *)this + 5);
  ++v4[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::QuerySet *))(*(void *)v4 + 136))(v4, a2);
  double v6 = result;
  uint64_t v57 = result;
  if (v4[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    if (!v6) {
      return result;
    }
  }
  else
  {
    --v4[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) != v8)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v60, v10);
    if (!v62) {
      return result;
    }
    unint64_t v41 = v60;
    unint64_t v42 = v61;
    unint64_t v43 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = v43 - v60;
    if (v43 < v60)
    {
      unint64_t v46 = 0;
      unint64_t v45 = v61;
    }
    else
    {
      unint64_t v45 = 0;
      if (v44 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v46 = 0;
        if (v44 + 2 <= v61)
        {
          *(_WORD *)(v60 + v44) = 2871;
          unint64_t v45 = v42;
          unint64_t v46 = v44 + 2;
        }
      }
    }
    unint64_t v47 = (void *)((v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v47 >= v41 + v46)
    {
      unint64_t v46 = (unint64_t)v47 - v41 + 8;
      if ((unint64_t)v47 - v41 > 0xFFFFFFFFFFFFFFF7 || v46 > v45) {
        return result;
      }
      void *v47 = v8;
    }
    if (!v45) {
      return result;
    }
    unint64_t v49 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = *(void *)(v7 + 64);
    if (v49 + 16 >= v50) {
      unint64_t v49 = 0;
    }
    if (v46 <= 0x10) {
      unint64_t v46 = 16;
    }
    unint64_t v51 = v49 + v46;
    if (v50 <= v51) {
      unint64_t v52 = 0;
    }
    else {
      unint64_t v52 = v51;
    }
    *(void *)(v7 + 80) = v52;
    unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v52);
    int v54 = *(_DWORD *)(v7 + 116);
    if (v53 == 0x80000000 || v54 != 0)
    {
      unsigned int v56 = v54 + 1;
      *(_DWORD *)(v7 + 116) = v56;
      if (v56 >= *(_DWORD *)(v7 + 112))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
    }
    *(void *)(v7 + 56) = v8;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v60, v10);
  if (!v62) {
    return result;
  }
  unint64_t v12 = v60;
  unint64_t v13 = v61;
  unint64_t v14 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v60;
  if (v14 < v60)
  {
    unint64_t v17 = 0;
    unint64_t v16 = v61;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_81;
    }
    unint64_t v17 = 0;
    if (v15 + 2 <= v61)
    {
      *(_WORD *)(v60 + v15) = 777;
      unint64_t v16 = v13;
      unint64_t v17 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = v18 - (v12 + v17);
    if (v18 >= v12 + v17)
    {
      unint64_t v20 = v18 - v12;
      unint64_t v21 = v19 + v17 + 8;
      if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v16)
      {
        unint64_t v16 = 0;
      }
      else
      {
        *(void *)(v12 + v20) = v57;
        unint64_t v17 = v21;
      }
    }
    unint64_t v23 = (_DWORD *)((v12 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v23 >= v12 + v17)
    {
      unint64_t v24 = (char *)v23 - v12;
      if ((unint64_t)v23 - v12 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_35;
      }
      unint64_t v17 = (unint64_t)(v24 + 4);
      if ((unint64_t)(v24 + 4) > v16) {
        goto LABEL_35;
      }
      *unint64_t v23 = v58;
    }
    if (v16)
    {
      uint64_t v25 = *(void *)(v7 + 72);
      unint64_t v26 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(v7 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v28 = v26 + v17;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(v7 + 80) = v28;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v25 + 16) + 128), v28) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      return result;
    }
LABEL_35:
    unint64_t v12 = v62;
    if (v62) {
      break;
    }
    __break(1u);
LABEL_81:
    unint64_t v17 = v16;
  }
  unint64_t v29 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = v29 - v60;
  if (v29 < v60)
  {
    unint64_t v31 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v61)
    {
      *(_WORD *)(v60 + v30) = 2870;
      unint64_t v31 = v30 + 2;
    }
  }
  unint64_t v32 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = *(void *)(v7 + 64);
  if (v32 + 16 >= v33) {
    unint64_t v32 = 0;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v34 = v32 + v31;
  if (v33 <= v34) {
    unint64_t v34 = 0;
  }
  *(void *)(v7 + 80) = v34;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v34);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v7 + 8));
  unint64_t v35 = v59;
  unint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v36 = 777;
  *((void *)v36 + 1) = v8;
  *((void *)v36 + 66) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  char v63 = v36;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v36, (uint64_t *)&v57);
  IPC::Encoder::operator<<<int>(v36, &v58);
  IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v63, 1, 0);
  unint64_t v38 = v63;
  char v63 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v39, v40);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteCommandEncoderProxy::resolveQuerySet(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WebCore::WebGPU::QuerySet *a2, int a3, int a4, const WebCore::WebGPU::Buffer *a5, uint64_t a6)
{
  int v77 = a4;
  int v78 = a3;
  uint64_t v76 = a6;
  uint64_t v8 = (_DWORD *)*((void *)this + 5);
  ++v8[2];
  uint64_t v75 = (*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::QuerySet *))(*(void *)v8 + 136))(v8, a2);
  uint64_t result = (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v8 + 40))(v8, a5);
  unint64_t v74 = result;
  if (v75) {
    BOOL v10 = result == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    goto LABEL_63;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v12 = *((void *)this + 4);
  double v13 = *(double *)(v11 + 120);
  double v14 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v14 = v13 + v15;
  }
  if (*(void *)(v11 + 56) == v12) {
    goto LABEL_8;
  }
  uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v80, v14);
  if (v82)
  {
    unint64_t v55 = v80;
    unint64_t v56 = v81;
    unint64_t v57 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v58 = v57 - v80;
    if (v57 < v80)
    {
      unint64_t v60 = 0;
      unint64_t v59 = v81;
    }
    else
    {
      unint64_t v59 = 0;
      if (v58 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v60 = 0;
      }
      else
      {
        unint64_t v60 = 0;
        if (v58 + 2 <= v81)
        {
          *(_WORD *)(v80 + v58) = 2871;
          unint64_t v59 = v56;
          unint64_t v60 = v58 + 2;
        }
      }
    }
    unint64_t v61 = (void *)((v55 + v60 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v61 >= v55 + v60)
    {
      unsigned __int8 v62 = (char *)v61 - v55;
      if ((unint64_t)v61 - v55 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_63;
      }
      unint64_t v60 = (unint64_t)(v62 + 8);
      if ((unint64_t)(v62 + 8) > v59) {
        goto LABEL_63;
      }
      *unint64_t v61 = v12;
    }
    if (v59)
    {
      unint64_t v63 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v64 = *(void *)(v11 + 64);
      if (v63 + 16 >= v64) {
        unint64_t v63 = 0;
      }
      if (v60 <= 0x10) {
        unint64_t v60 = 16;
      }
      unint64_t v65 = v63 + v60;
      if (v64 <= v65) {
        unint64_t v66 = 0;
      }
      else {
        unint64_t v66 = v65;
      }
      *(void *)(v11 + 80) = v66;
      unint64_t v67 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v66);
      int v68 = *(_DWORD *)(v11 + 116);
      if (v67 == 0x80000000 || v68 != 0)
      {
        unsigned int v70 = v68 + 1;
        *(_DWORD *)(v11 + 116) = v70;
        if (v70 >= *(_DWORD *)(v11 + 112))
        {
          if (*(unsigned char *)(v11 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
          }
          *(_DWORD *)(v11 + 116) = 0;
        }
      }
      *(void *)(v11 + 56) = v12;
LABEL_8:
      uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v80, v14);
      if (!v82) {
        goto LABEL_63;
      }
      unint64_t v16 = v80;
      unint64_t v17 = v81;
      unint64_t v18 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = v18 - v80;
      if (v18 < v80)
      {
        unint64_t v21 = 0;
        unint64_t v20 = v81;
      }
      else
      {
        unint64_t v20 = 0;
        if (v19 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_94;
        }
        unint64_t v21 = 0;
        if (v19 + 2 <= v81)
        {
          *(_WORD *)(v80 + v19) = 775;
          unint64_t v20 = v17;
          unint64_t v21 = v19 + 2;
        }
      }
      while (1)
      {
        unint64_t v22 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v23 = v22 >= v16 + v21;
        unint64_t v24 = v22 - (v16 + v21);
        if (v23)
        {
          unint64_t v71 = 0;
          unint64_t v25 = v24 + v21;
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= v20)
          {
            *(void *)(v16 + v25) = v75;
            unint64_t v71 = v20;
            unint64_t v21 = v25 + 8;
          }
        }
        else
        {
          unint64_t v71 = v20;
        }
        unint64_t v26 = (v16 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        BOOL v23 = v26 >= v16 + v21;
        unint64_t v27 = v26 - (v16 + v21);
        if (v23)
        {
          unint64_t v73 = 0;
          unint64_t v28 = v27 + v21;
          if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v71)
          {
            *(_DWORD *)(v16 + v28) = v78;
            unint64_t v73 = v71;
            unint64_t v21 = v28 + 4;
          }
        }
        else
        {
          unint64_t v73 = v71;
        }
        unint64_t v29 = (v16 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v30 = v29 - (v16 + v21);
        if (v29 < v16 + v21)
        {
          unint64_t v31 = v73;
        }
        else
        {
          unint64_t v31 = 0;
          unint64_t v32 = v30 + v21;
          if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= v73)
          {
            *(_DWORD *)(v16 + v32) = v77;
            unint64_t v31 = v73;
            unint64_t v21 = v32 + 4;
          }
        }
        unint64_t v33 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v23 = v33 >= v16 + v21;
        unint64_t v34 = v33 - (v16 + v21);
        if (v23)
        {
          unint64_t v72 = 0;
          unint64_t v35 = v34 + v21;
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= v31)
          {
            *(void *)(v16 + v35) = v74;
            unint64_t v72 = v31;
            unint64_t v21 = v35 + 8;
          }
        }
        else
        {
          unint64_t v72 = v31;
        }
        unint64_t v36 = (void *)((v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v20 = (unint64_t)v36 - v16 - v21;
        if ((unint64_t)v36 >= v16 + v21)
        {
          unint64_t v20 = (unint64_t)v36 - v16;
          if ((unint64_t)v36 - v16 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_49;
          }
          unint64_t v21 = v20 + 8;
          if (v20 + 8 > v72) {
            goto LABEL_49;
          }
          *unint64_t v36 = v76;
        }
        if (v72)
        {
          unint64_t v37 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v38 = *(void *)(v11 + 64);
          if (v37 + 16 >= v38) {
            unint64_t v37 = 0;
          }
          if (v21 <= 0x10) {
            unint64_t v21 = 16;
          }
          unint64_t v39 = v37 + v21;
          if (v38 <= v39) {
            unint64_t v40 = 0;
          }
          else {
            unint64_t v40 = v39;
          }
          *(void *)(v11 + 80) = v40;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v40) == 0x80000000
            || *(_DWORD *)(v11 + 116))
          {
            if (*(unsigned char *)(v11 + 104)) {
              uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
            }
            *(_DWORD *)(v11 + 116) = 0;
          }
          break;
        }
LABEL_49:
        unint64_t v16 = v82;
        if (v82)
        {
          unint64_t v41 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v42 = v41 - v80;
          if (v41 < v80)
          {
            unint64_t v43 = 0;
          }
          else
          {
            unint64_t v43 = 0;
            if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v81)
            {
              *(_WORD *)(v80 + v42) = 2870;
              unint64_t v43 = v42 + 2;
            }
          }
          unint64_t v44 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v45 = *(void *)(v11 + 64);
          if (v44 + 16 >= v45) {
            unint64_t v44 = 0;
          }
          if (v43 <= 0x10) {
            unint64_t v43 = 16;
          }
          unint64_t v46 = v44 + v43;
          if (v45 <= v46) {
            unint64_t v46 = 0;
          }
          *(void *)(v11 + 80) = v46;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v46);
          *(_DWORD *)(v11 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)(v11 + 8));
          unint64_t v47 = v79;
          unsigned __int8 v48 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unsigned __int8 v48 = 775;
          *((void *)v48 + 1) = v12;
          *((void *)v48 + 66) = (char *)v48 + 16;
          *((void *)v48 + 67) = 512;
          *((void *)v48 + 68) = 0;
          *((void *)v48 + 70) = 0;
          *((void *)v48 + 69) = 0;
          IPC::Encoder::encodeHeader(v48);
          unsigned int v83 = v48;
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v48, &v75);
          unint64_t v49 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v48, &v78);
          unint64_t v50 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v49, &v77);
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v50, (uint64_t *)&v74);
          IPC::Encoder::operator<<<unsigned long long const&>(v50, &v76);
          IPC::Connection::sendMessageImpl((uint64_t)v47, (uint64_t *)&v83, 1, 0);
          unint64_t v52 = v83;
          unsigned int v83 = 0;
          if (v52)
          {
            IPC::Encoder::~Encoder(v52, v51);
            WTF::fastFree(v53, v54);
          }
          uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
          break;
        }
        __break(1u);
LABEL_94:
        unint64_t v21 = v20;
      }
    }
  }
LABEL_63:
  if (v8[2] == 1) {
    return (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  --v8[2];
  return result;
}

WTF::StringImpl *WebKit::WebGPU::RemoteCommandEncoderProxy::finish@<X0>(void *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = (_DWORD *)a1[5];
  ++v5[2];
  double v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  unint64_t v57 = v6;
  char v58 = 1;
  uint64_t v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v56 = v7;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
  uint64_t v9 = a1[4];
  double v10 = *(double *)(v8 + 120);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v11 = v10 + v12;
  }
  if (*(void *)(v8 + 56) == v9)
  {
LABEL_6:
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v60, v11);
    if (v62)
    {
      unint64_t v63 = v60;
      unint64_t v64 = v61;
      unint64_t v65 = 0;
      unint64_t v15 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v16 = v15 >= (unint64_t)v60;
      unint64_t v17 = v15 - (void)v60;
      if (v16)
      {
        if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v61) {
          goto LABEL_83;
        }
        *(_WORD *)((char *)v60 + v17) = 771;
        unint64_t v65 = v17 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v63, (uint64_t *)&v57);
        unint64_t v18 = v65;
        unint64_t v19 = (char *)(((unint64_t)v63 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= (char *)v63 + v65)
        {
          int64_t v20 = v19 - (char *)v63;
          if ((unint64_t)(v19 - (char *)v63) > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_28;
          }
          unint64_t v18 = v20 + 8;
          if (v20 + 8 > v64) {
            goto LABEL_28;
          }
          *(void *)unint64_t v19 = v56;
          unint64_t v65 = v20 + 8;
        }
        if (v64)
        {
          unint64_t v21 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v22 = *(void *)(v8 + 64);
          if (v21 + 16 >= v22) {
            unint64_t v21 = 0;
          }
          if (v18 <= 0x10) {
            unint64_t v18 = 16;
          }
          unint64_t v23 = v21 + v18;
          if (v22 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(v8 + 80) = v23;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v23) == 0x80000000
            || *(_DWORD *)(v8 + 116))
          {
            if (*(unsigned char *)(v8 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
            }
            *(_DWORD *)(v8 + 116) = 0;
          }
          goto LABEL_43;
        }
LABEL_28:
        if (!v62) {
          goto LABEL_82;
        }
        unint64_t v24 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v25 = v24 - (void)v60;
        if (v24 < (unint64_t)v60)
        {
          unint64_t v26 = 0;
        }
        else
        {
          unint64_t v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v61)
          {
            *(_WORD *)((char *)v60 + v25) = 2870;
            unint64_t v26 = v25 + 2;
          }
        }
        unint64_t v27 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v28 = *(void *)(v8 + 64);
        if (v27 + 16 >= v28) {
          unint64_t v27 = 0;
        }
        if (v26 <= 0x10) {
          unint64_t v26 = 16;
        }
        unint64_t v29 = v27 + v26;
        if (v28 <= v29) {
          unint64_t v29 = 0;
        }
        *(void *)(v8 + 80) = v29;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v29);
        *(_DWORD *)(v8 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v8 + 8));
        unint64_t v30 = v59;
        unint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v31 = 771;
        *((void *)v31 + 1) = v9;
        *((void *)v31 + 66) = (char *)v31 + 16;
        *((void *)v31 + 67) = 512;
        *((void *)v31 + 68) = 0;
        *((void *)v31 + 70) = 0;
        *((void *)v31 + 69) = 0;
        IPC::Encoder::encodeHeader(v31);
        unint64_t v63 = v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, (uint64_t *)&v57);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v31, (uint64_t *)&v56);
        int v33 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v63, 1, 0);
        unint64_t v34 = v63;
        unint64_t v63 = 0;
        if (v34)
        {
          IPC::Encoder::~Encoder(v34, v32);
          WTF::fastFree(v38, v39);
        }
        uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
        if (v33) {
          goto LABEL_42;
        }
LABEL_43:
        uint64_t v8 = a1[6];
        uint64_t v36 = (uint64_t)v56;
        uint64_t v37 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v37 + 8) = 1;
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        *(void *)uint64_t v37 = &unk_1EE9EA578;
        *(void *)(v37 + 32) = v36;
        ++v5[2];
        *(void *)(v37 + 40) = v5;
        ++*(_DWORD *)(v8 + 8);
        *(void *)(v37 + 48) = v8;
        if (v58)
        {
          uint64_t v35 = v37;
          *(void *)(v37 + 24) = v57;
          unint64_t v57 = 0;
          unint64_t v63 = (IPC::Encoder *)(v37 + 24);
          uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnection::send<Messages::RemoteCommandBuffer::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(v8 + 72) + 72) + 80), (uint64_t **)&v63, *(void *)(v37 + 32));
          goto LABEL_45;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        unint64_t v64 = 0;
      }
    }
    goto LABEL_42;
  }
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v63, v11);
  if ((_BYTE)v65)
  {
    unint64_t v40 = v63;
    unint64_t v41 = v64;
    unint64_t v42 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - (void)v63;
    if (v42 < (unint64_t)v63)
    {
      unint64_t v45 = 0;
      unint64_t v44 = v64;
    }
    else
    {
      unint64_t v44 = 0;
      if (v43 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v45 = 0;
        if (v43 + 2 <= v64)
        {
          *(_WORD *)((char *)v63 + v43) = 2871;
          unint64_t v44 = v41;
          unint64_t v45 = v43 + 2;
        }
      }
    }
    unint64_t v46 = (char *)(((unint64_t)v40 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v46 >= (char *)v40 + v45)
    {
      unint64_t v45 = v46 - (char *)v40 + 8;
      if ((unint64_t)(v46 - (char *)v40) > 0xFFFFFFFFFFFFFFF7 || v45 > v44) {
        goto LABEL_42;
      }
      *(void *)unint64_t v46 = v9;
    }
    if (v44)
    {
      unint64_t v48 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v49 = *(void *)(v8 + 64);
      if (v48 + 16 >= v49) {
        unint64_t v48 = 0;
      }
      if (v45 <= 0x10) {
        unint64_t v45 = 16;
      }
      unint64_t v50 = v48 + v45;
      if (v49 <= v50) {
        unint64_t v51 = 0;
      }
      else {
        unint64_t v51 = v50;
      }
      *(void *)(v8 + 80) = v51;
      unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v51);
      int v53 = *(_DWORD *)(v8 + 116);
      if (v52 == 0x80000000 || v53 != 0)
      {
        unsigned int v55 = v53 + 1;
        *(_DWORD *)(v8 + 116) = v55;
        if (v55 >= *(_DWORD *)(v8 + 112))
        {
          if (*(unsigned char *)(v8 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
          }
          *(_DWORD *)(v8 + 116) = 0;
        }
      }
      *(void *)(v8 + 56) = v9;
      goto LABEL_6;
    }
  }
LABEL_42:
  uint64_t v35 = 0;
LABEL_45:
  *a3 = v35;
  if (v58)
  {
    uint64_t result = v57;
    unint64_t v57 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v5[2] == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  }
  --v5[2];
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteCommandEncoderProxy::setLabelInternal(WebKit::WebGPU::RemoteCommandEncoderProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  uint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)uint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 776;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 776;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteCompositorIntegrationProxy::~RemoteCompositorIntegrationProxy(WebKit::WebGPU::RemoteCompositorIntegrationProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v3 = *((void *)this + 3);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_89;
    }
    *BOOL v10 = 778;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_89:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 778;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44 && atomic_fetch_add((atomic_uint *volatile)v44 + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v44 + 7);
    (*(void (**)(unsigned int *))(*(void *)v44 + 8))(v44);
  }
  unint64_t v45 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
    }
    else {
      --v45[2];
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteCompositorIntegrationProxy::~RemoteCompositorIntegrationProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteCompositorIntegrationProxy::recreateRenderBuffers@<X0>(WTF::ApproximateTime *a1@<X0>, int a2@<W1>, int a3@<W2>, CFTypeRef *a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  int v78 = a3;
  int v79 = a2;
  uint64_t v77 = *(void *)(a7 + 48);
  uint64_t v12 = *(void *)(*((void *)a1 + 5) + 80);
  unint64_t v13 = (IPC::Encoder *)*((void *)a1 + 3);
  double v14 = *(double *)(v12 + 120);
  double v15 = INFINITY;
  if (fabs(v14) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v15 = v14 + v16;
  }
  if (*(IPC::Encoder **)(v12 + 56) != v13)
  {
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v81, v15);
    if (!v83)
    {
      char v76 = 15;
      goto LABEL_136;
    }
    unint64_t v61 = v81;
    unint64_t v60 = v82;
    unint64_t v62 = ((unint64_t)v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - (void)v81;
    if (v62 >= (unint64_t)v81)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v82)
      {
        *(_WORD *)((char *)v81 + v63) = 2871;
        goto LABEL_104;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_104:
    unint64_t v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v66 >= (char *)v61 + v64)
    {
      unint64_t v64 = v66 - (char *)v61 + 8;
      if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      {
LABEL_135:
        char v76 = 17;
LABEL_136:
        LOBYTE(v95) = v76;
        int v55 = 1;
        int v98 = 1;
        goto LABEL_92;
      }
      *(void *)unint64_t v66 = v13;
    }
    if (v60)
    {
      uint64_t v68 = *(void *)(v12 + 72);
      unint64_t v69 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v70 = *(void *)(v12 + 64);
      if (v69 + 16 >= v70) {
        unint64_t v69 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v71 = v69 + v64;
      if (v70 <= v71) {
        unint64_t v71 = 0;
      }
      *(void *)(v12 + 80) = v71;
      unint64_t v72 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v68 + 16) + 128), v71);
      int v73 = *(_DWORD *)(v12 + 116);
      if (v72 == 0x80000000 || v73 != 0)
      {
        unsigned int v75 = v73 + 1;
        *(_DWORD *)(v12 + 116) = v75;
        if (v75 >= *(_DWORD *)(v12 + 112))
        {
          if (*(unsigned char *)(v12 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
          }
          *(_DWORD *)(v12 + 116) = 0;
        }
      }
      *(void *)(v12 + 56) = v13;
      goto LABEL_4;
    }
    goto LABEL_135;
  }
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v86, v15);
  if (!v88)
  {
    LOBYTE(v95) = 15;
    int v98 = 1;
    goto LABEL_91;
  }
  unint64_t v19 = v86;
  unint64_t v20 = v87;
  unint64_t v21 = (uint64_t **)(v12 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v99, (uint64_t **)(v12 + 8));
  uint64_t v22 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99[0], v22))
  {
    LOBYTE(v95) = 11;
    uint64_t v22 = 1;
    int v98 = 1;
    LOBYTE(v81) = 0;
    int v84 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v81, (uint64_t)&v95);
    char v85 = 1;
    if (v98 != -1) {
      ((void (*)(IPC::Decoder **, unint64_t *))off_1EE9EA8A8[v98])(&v92, &v95);
    }
    goto LABEL_64;
  }
  unint64_t v95 = v19;
  unint64_t v96 = v20;
  unint64_t v97 = 0;
  unint64_t v23 = (v19 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v19;
  if (v23 < v19)
  {
    unint64_t v25 = 0;
  }
  else
  {
    if (v24 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_128;
    }
    unint64_t v25 = v24 + 2;
    if (v24 + 2 > v20) {
      goto LABEL_128;
    }
    *(_WORD *)(v19 + v24) = 3634;
    unint64_t v97 = v24 + 2;
  }
  while (1)
  {
    unint64_t v26 = (v19 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = v26 - (v19 + v25);
    if (v26 >= v19 + v25)
    {
      unint64_t v28 = v26 - v19;
      unint64_t v29 = v27 + v25 + 8;
      if (v28 > 0xFFFFFFFFFFFFFFF7 || v29 > v20)
      {
        unint64_t v20 = 0;
        unint64_t v96 = 0;
      }
      else
      {
        *(void *)(v19 + v28) = v22;
        unint64_t v97 = v29;
        unint64_t v25 = v29;
      }
    }
    unint64_t v31 = (_DWORD *)((v19 + v25 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v31 >= v19 + v25)
    {
      unsigned int v32 = (char *)v31 - v19;
      if ((unint64_t)v31 - v19 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v20)
      {
        unint64_t v20 = 0;
        unint64_t v96 = 0;
      }
      else
      {
        *unint64_t v31 = v79;
        unint64_t v97 = (unint64_t)(v32 + 4);
        unint64_t v25 = (unint64_t)(v32 + 4);
      }
    }
    unint64_t v33 = (_DWORD *)((v19 + v25 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v33 >= v19 + v25)
    {
      BOOL v34 = (char *)v33 - v19;
      if ((unint64_t)v33 - v19 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v20)
      {
        unint64_t v96 = 0;
      }
      else
      {
        *unint64_t v33 = v78;
        unint64_t v97 = (unint64_t)(v34 + 4);
      }
    }
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)&v95, a4);
    unint64_t v35 = v97;
    if (v97 < v96)
    {
      unint64_t v36 = v97 + 1;
      *(unsigned char *)(v95 + v97) = a5;
      unint64_t v97 = v35 + 1;
      if (v35 + 1 < v96)
      {
        v35 += 2;
        *(unsigned char *)(v95 + v36) = a6;
        unint64_t v97 = v35;
        unint64_t v37 = v96;
        goto LABEL_27;
      }
      ++v35;
    }
    unint64_t v37 = 0;
    unint64_t v96 = 0;
LABEL_27:
    unint64_t v38 = (void *)((v95 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v38 >= v95 + v35)
    {
      unint64_t v39 = (char *)v38 - v95;
      if ((unint64_t)v38 - v95 > 0xFFFFFFFFFFFFFFF7
        || (unint64_t v35 = (unint64_t)(v39 + 8), (unint64_t)(v39 + 8) > v37))
      {
LABEL_48:
        LOBYTE(v92) = 0;
        char v94 = 0;
        goto LABEL_49;
      }
      void *v38 = v77;
      unint64_t v97 = (unint64_t)(v39 + 8);
      unint64_t v37 = v96;
    }
    if (!v37) {
      goto LABEL_48;
    }
    unint64_t v40 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = *(void *)(v12 + 64);
    if (v40 + 16 >= v41) {
      unint64_t v40 = 0;
    }
    if (v35 <= 0x10) {
      unint64_t v35 = 16;
    }
    unint64_t v42 = v40 + v35;
    if (v41 <= v42) {
      unint64_t v42 = 0;
    }
    *(void *)(v12 + 80) = v42;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v42) == 0x80000000
      || *(_DWORD *)(v12 + 116))
    {
      if (*(unsigned char *)(v12 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
      }
      *(_DWORD *)(v12 + 116) = 0;
    }
    *(void *)(v12 + 80) = 0;
    IPC::Connection::waitForSyncReply((uint64_t)v99[0], v22, 0xE32u, (uint64_t)&v89, v15);
    LOBYTE(v92) = 0;
    int v93 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v92, (uint64_t)&v89);
    char v94 = 1;
    if (v90 != -1) {
      ((void (*)(uint64_t ***, WTF **))off_1EE9EA948[v90])(&v80, &v89);
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v99[0]);
    if (!v94)
    {
      LOBYTE(v81) = 0;
      char v85 = 0;
      goto LABEL_64;
    }
    if (v93 == 1)
    {
      LOBYTE(v81) = (_BYTE)v92;
      int v44 = 1;
      int v84 = 1;
      char v85 = 1;
      goto LABEL_63;
    }
    if (v93) {
      goto LABEL_133;
    }
    LOBYTE(v89) = 0;
    char v91 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v92, &v89);
    if (!v91)
    {
      LOBYTE(v81) = 13;
      int v84 = 1;
      char v85 = 1;
      goto LABEL_61;
    }
    if (v94) {
      break;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    unint64_t v20 = 0;
    unint64_t v25 = 0;
    unint64_t v96 = 0;
  }
  if (v93) {
    goto LABEL_133;
  }
  IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ConnectionSendSyncResult((uint64_t)&v95, (uint64_t *)&v92, (uint64_t *)&v89);
  LOBYTE(v81) = 0;
  int v84 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v81, (uint64_t)&v95);
  char v85 = 1;
  if (v98 != -1) {
    ((void (*)(uint64_t ***, unint64_t *))off_1EE9EA8A8[v98])(&v80, &v95);
  }
  if (v91) {
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v43);
  }
LABEL_61:
  if (v94)
  {
    int v44 = v93;
    if (v93 != -1) {
LABEL_63:
    }
      ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9EA948[v44])(&v95, &v92);
  }
LABEL_64:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v99);
  if (v85)
  {
    LOBYTE(v95) = 0;
    int v98 = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v95, (uint64_t)&v81);
    if (v85 && v84 != -1) {
      uint64_t result = ((uint64_t (*)(IPC::Decoder **, WTF **))off_1EE9EA8A8[v84])(&v92, &v81);
    }
    goto LABEL_91;
  }
  if (!v88) {
    goto LABEL_127;
  }
  unint64_t v45 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = v45 - v86;
  if (v45 < v86)
  {
    unint64_t v47 = 0;
  }
  else
  {
    unint64_t v47 = 0;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v87)
    {
      *(_WORD *)(v86 + v46) = 2870;
      unint64_t v47 = v46 + 2;
    }
  }
  unint64_t v48 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = *(void *)(v12 + 64);
  if (v48 + 16 >= v49) {
    goto LABEL_134;
  }
  while (1)
  {
    if (v47 <= 0x10) {
      unint64_t v47 = 16;
    }
    unint64_t v50 = v48 + v47;
    if (v49 <= v50) {
      unint64_t v50 = 0;
    }
    *(void *)(v12 + 80) = v50;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v50);
    *(_DWORD *)(v12 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v80, v21);
    unint64_t v21 = v80;
    unint64_t v89 = 0;
    IPC::Connection::createSyncMessageEncoder(3634, (uint64_t)v13, (uint64_t *)&v89, (IPC::Encoder **)v99);
    unint64_t v51 = (IPC::Encoder *)IPC::Encoder::operator<<<int>((IPC::Encoder *)v99[0], &v79);
    unint64_t v13 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v51, &v78);
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v13, a4);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v13, a5);
    LOBYTE(v81) = a6;
    IPC::Encoder::operator<<<BOOL>(v13, (char *)&v81);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, &v77);
    IPC::Connection::sendSyncMessage((uint64_t)v21, (uint64_t)v89, (uint64_t *)v99, 0, (uint64_t)&v92, v15);
    if (v93)
    {
      if (v93 == 1)
      {
        LOBYTE(v95) = (_BYTE)v92;
        int v52 = 1;
        int v98 = 1;
        goto LABEL_87;
      }
      goto LABEL_133;
    }
    LOBYTE(v81) = 0;
    char v83 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v92, &v81);
    if (!v83)
    {
      LOBYTE(v95) = 13;
      int v98 = 1;
      goto LABEL_86;
    }
    if (!v93) {
      break;
    }
LABEL_133:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_134:
    unint64_t v48 = 0;
  }
  IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ConnectionSendSyncResult((uint64_t)&v95, (uint64_t *)&v92, (uint64_t *)&v81);
  if (v83) {
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v53);
  }
LABEL_86:
  int v52 = v93;
  if (v93 == -1) {
    goto LABEL_88;
  }
LABEL_87:
  ((void (*)(WTF **, IPC::Decoder **))off_1EE9EA948[v52])(&v81, &v92);
LABEL_88:
  int v54 = (IPC::Encoder *)v99[0];
  v99[0] = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v53);
    WTF::fastFree(v58, v59);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
LABEL_91:
  int v55 = v98;
  if (v98)
  {
LABEL_92:
    *a8 = 0;
    a8[1] = 0;
  }
  else
  {
    unint64_t v56 = v96;
    unint64_t v96 = 0;
    unint64_t v81 = 0;
    *a8 = v56;
    unint64_t v82 = 0;
    unint64_t v57 = v97;
    unint64_t v97 = 0;
    a8[1] = v57;
    uint64_t result = WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v18);
    int v55 = v98;
  }
  if (v55 != -1) {
    return ((uint64_t (*)(WTF **, unint64_t *))off_1EE9EA8A8[v55])(&v81, &v95);
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteCompositorIntegrationProxy::prepareForDisplay(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*((void *)a1 + 5) + 80);
  uint64_t v5 = *((void *)a1 + 3);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) != v5)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v59, v7);
    if (!(_BYTE)v61) {
      goto LABEL_97;
    }
    unint64_t v37 = v59;
    unint64_t v36 = v60;
    unint64_t v38 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = v38 - (void)v59;
    if (v38 >= (unint64_t)v59)
    {
      unint64_t v40 = v39 + 2;
      if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v40 <= v60)
      {
        *(_WORD *)((char *)v59 + v39) = 2871;
        goto LABEL_78;
      }
      unint64_t v36 = 0;
    }
    unint64_t v40 = 0;
LABEL_78:
    unint64_t v42 = (char *)(((unint64_t)v37 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v42 >= (char *)v37 + v40)
    {
      unint64_t v40 = v42 - (char *)v37 + 8;
      if ((unint64_t)(v42 - (char *)v37) > 0xFFFFFFFFFFFFFFF7 || v40 > v36) {
        goto LABEL_125;
      }
      *(void *)unint64_t v42 = v5;
    }
    if (v36)
    {
      uint64_t v44 = *(void *)(v4 + 72);
      unint64_t v45 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v46 = *(void *)(v4 + 64);
      if (v45 + 16 >= v46) {
        unint64_t v45 = 0;
      }
      if (v40 <= 0x10) {
        unint64_t v40 = 16;
      }
      unint64_t v47 = v45 + v40;
      if (v46 <= v47) {
        unint64_t v47 = 0;
      }
      *(void *)(v4 + 80) = v47;
      unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v44 + 16) + 128), v47);
      int v49 = *(_DWORD *)(v4 + 116);
      if (v48 == 0x80000000 || v49 != 0)
      {
        unsigned int v56 = v49 + 1;
        *(_DWORD *)(v4 + 116) = v56;
        if (v56 >= *(_DWORD *)(v4 + 112))
        {
          if (*(unsigned char *)(v4 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
          }
          *(_DWORD *)(v4 + 116) = 0;
        }
      }
      *(void *)(v4 + 56) = v5;
      goto LABEL_4;
    }
LABEL_125:
    char v51 = 17;
    goto LABEL_98;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v63, v7);
  if (!v65)
  {
LABEL_97:
    char v51 = 15;
LABEL_98:
    LOBYTE(v69) = v51;
    int v71 = 1;
    goto LABEL_99;
  }
  unint64_t v9 = v63;
  unint64_t v10 = v64;
  unint64_t v11 = (uint64_t **)(v4 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, (uint64_t **)(v4 + 8));
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v73, v12))
  {
    LOBYTE(v69) = 11;
    int v71 = 1;
    LOBYTE(v59) = 0;
    int v61 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)&v69);
    char v62 = 1;
    if (v71 != -1) {
      ((void (*)(uint64_t **, uint64_t **))off_1EE9EA8B8[v71])(&v66, &v69);
    }
    goto LABEL_46;
  }
  unint64_t v13 = (v9 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - v9;
  if (v13 < v9)
  {
    unint64_t v16 = 0;
    unint64_t v15 = v10;
  }
  else
  {
    unint64_t v15 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = 0;
      if (v14 + 2 <= v10)
      {
        *(_WORD *)(v9 + v14) = 3633;
        unint64_t v15 = v10;
        unint64_t v16 = v14 + 2;
      }
    }
  }
  unint64_t v17 = (void *)((v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v17 >= v9 + v16)
  {
    unint64_t v16 = (unint64_t)v17 - v9 + 8;
    if ((unint64_t)v17 - v9 > 0xFFFFFFFFFFFFFFF7 || v16 > v15) {
      goto LABEL_32;
    }
    *unint64_t v17 = v12;
  }
  if (v15)
  {
    unint64_t v19 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v20 = *(void *)(v4 + 64);
    if (v19 + 16 >= v20) {
      unint64_t v19 = 0;
    }
    if (v16 <= 0x10) {
      unint64_t v16 = 16;
    }
    unint64_t v21 = v19 + v16;
    if (v20 <= v21) {
      unint64_t v21 = 0;
    }
    *(void *)(v4 + 80) = v21;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v21) == 0x80000000
      || *(_DWORD *)(v4 + 116))
    {
      if (*(unsigned char *)(v4 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
    *(void *)(v4 + 80) = 0;
    IPC::Connection::waitForSyncReply((uint64_t)v73, v12, 0xE31u, (uint64_t)&v66, v7);
    LOBYTE(v69) = 0;
    int v70 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v69, (uint64_t)&v66);
    LOBYTE(v71) = 1;
    if (v67 != -1) {
      ((void (*)(uint64_t ***, uint64_t **))off_1EE9EA948[v67])(&v58, &v66);
    }
    goto LABEL_33;
  }
LABEL_32:
  LOBYTE(v69) = 0;
  LOBYTE(v71) = 0;
LABEL_33:
  IPC::Connection::popPendingSyncRequestID(v73);
  if (!(_BYTE)v71) {
    goto LABEL_119;
  }
  if (v70 == 1)
  {
    LOBYTE(v59) = (_BYTE)v69;
    int v23 = 1;
    int v61 = 1;
    char v62 = 1;
  }
  else
  {
    if (v70) {
      goto LABEL_121;
    }
    LOWORD(v58) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v69, &v58);
    if (BYTE1(v58))
    {
      if (!(_BYTE)v71) {
        goto LABEL_118;
      }
      if (v70) {
        goto LABEL_121;
      }
      uint64_t v22 = v69;
      unint64_t v69 = 0;
      unint64_t v66 = v22;
      LOBYTE(v67) = (_BYTE)v58;
      int v68 = 0;
      LOBYTE(v59) = 0;
      int v61 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)&v66);
      char v62 = 1;
      if (v68 != -1) {
        ((void (*)(__int16 *, uint64_t **))off_1EE9EA8B8[v68])(&v72, &v66);
      }
    }
    else
    {
      LOBYTE(v59) = 13;
      int v61 = 1;
      char v62 = 1;
    }
    if (!(_BYTE)v71) {
      goto LABEL_46;
    }
    int v23 = v70;
    if (v70 == -1) {
      goto LABEL_46;
    }
  }
  ((void (*)(uint64_t **, uint64_t **))off_1EE9EA948[v23])(&v66, &v69);
  while (1)
  {
LABEL_46:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
    if (v62)
    {
      LOBYTE(v69) = 0;
      int v71 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v69, (uint64_t)&v59);
      if (v62 && v61 != -1) {
        ((void (*)(uint64_t **, uint64_t **))off_1EE9EA8B8[v61])(&v66, &v59);
      }
      goto LABEL_99;
    }
    if (v65) {
      break;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    LOBYTE(v59) = 0;
    char v62 = 0;
  }
  unint64_t v24 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = v24 - v63;
  if (v24 < v63)
  {
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v26 = 0;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v64)
    {
      *(_WORD *)(v63 + v25) = 2870;
      unint64_t v26 = v25 + 2;
    }
  }
  unint64_t v27 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = *(void *)(v4 + 64);
  if (v27 + 16 >= v28) {
    goto LABEL_122;
  }
  while (1)
  {
    if (v26 <= 0x10) {
      unint64_t v26 = 16;
    }
    unint64_t v29 = v27 + v26;
    if (v28 <= v29) {
      unint64_t v29 = 0;
    }
    *(void *)(v4 + 80) = v29;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v29);
    *(_DWORD *)(v4 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v58, v11);
    unint64_t v11 = v58;
    unint64_t v66 = 0;
    IPC::Connection::createSyncMessageEncoder(3633, v5, (uint64_t *)&v66, (IPC::Encoder **)&v73);
    IPC::Connection::sendSyncMessage((uint64_t)v11, (uint64_t)v66, (uint64_t *)&v73, 0, (uint64_t)&v59, v7);
    if (v60)
    {
      if (v60 == 1)
      {
        LOBYTE(v69) = (_BYTE)v59;
        int v30 = 1;
        int v71 = 1;
        goto LABEL_67;
      }
      goto LABEL_121;
    }
    __int16 v72 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v59, &v72);
    if (!HIBYTE(v72)) {
      break;
    }
    int v30 = v60;
    if (!v60)
    {
      unsigned int v32 = v59;
      unint64_t v59 = 0;
      unint64_t v69 = v32;
      LOBYTE(v70) = v72;
      int v71 = 0;
      goto LABEL_67;
    }
LABEL_121:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_122:
    unint64_t v27 = 0;
  }
  LOBYTE(v69) = 13;
  int v71 = 1;
  int v30 = v60;
  if (v60 == -1) {
    goto LABEL_68;
  }
LABEL_67:
  ((void (*)(__int16 *, uint64_t **))off_1EE9EA948[v30])(&v72, &v59);
LABEL_68:
  unint64_t v33 = (IPC::Encoder *)v73;
  int v73 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
LABEL_99:
  uint64_t v52 = *((void *)a1 + 6);
  if (v52)
  {
    ++*(_DWORD *)(v52 + 8);
    unsigned __int8 v53 = *(_DWORD **)(v52 + 48);
    *(void *)(v52 + 48) = 0;
    if (v53)
    {
      if (v53[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v53 + 8))(v53);
      }
      else {
        --v53[2];
      }
    }
    if (*(_DWORD *)(v52 + 8) == 1) {
      (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
    }
    else {
      --*(_DWORD *)(v52 + 8);
    }
  }
  else
  {
    unint64_t v57 = (_DWORD *)MEMORY[0x30];
    MEMORY[0x30] = 0;
    if (v57)
    {
      if (v57[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v57 + 8))(v57);
      }
      else {
        --v57[2];
      }
    }
  }
  uint64_t v54 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 8))(v54);
  if (v71 != -1) {
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1EE9EA8B8[v71])(&v59, &v69);
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteCompositorIntegrationProxy::paintCompositedResultsToCanvas(WebKit::WebGPU::RemoteCompositorIntegrationProxy *this, WebCore::ImageBuffer *a2, int a3)
{
  double v6 = (WTF::ApproximateTime *)(*(uint64_t (**)(WebCore::ImageBuffer *))(*(void *)a2 + 24))(a2);
  uint64_t v82 = *((void *)a2 + 15);
  uint64_t v7 = *(void *)(*((void *)this + 5) + 80);
  double v8 = (IPC::Encoder *)*((void *)this + 3);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v10 = v9 + v11;
  }
  if (*(IPC::Encoder **)(v7 + 56) == v8) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v84, v10);
  if (!(_BYTE)v86)
  {
    char v81 = 15;
    goto LABEL_130;
  }
  unint64_t v66 = (char *)v84;
  unint64_t v65 = v85;
  unint64_t v67 = ((unint64_t)v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v68 = v67 - (void)v84;
  if (v67 >= (unint64_t)v84)
  {
    unint64_t v69 = v68 + 2;
    if (v68 <= 0xFFFFFFFFFFFFFFFDLL && v69 <= v85)
    {
      *(_WORD *)((char *)v84 + v68) = 2871;
      goto LABEL_99;
    }
    unint64_t v65 = 0;
  }
  unint64_t v69 = 0;
LABEL_99:
  int v71 = (char *)((unint64_t)&v66[v69 + 7] & 0xFFFFFFFFFFFFFFF8);
  if (v71 >= &v66[v69])
  {
    unint64_t v69 = v71 - v66 + 8;
    if ((unint64_t)(v71 - v66) > 0xFFFFFFFFFFFFFFF7 || v69 > v65) {
      goto LABEL_129;
    }
    *(void *)int v71 = v8;
  }
  if (!v65)
  {
LABEL_129:
    char v81 = 17;
LABEL_130:
    LOBYTE(v94) = v81;
    int v62 = 1;
    int v96 = 1;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9EA8C8[v62])(&v84, &v94);
  }
  uint64_t v73 = *(void *)(v7 + 72);
  unint64_t v74 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v75 = *(void *)(v7 + 64);
  if (v74 + 16 >= v75) {
    unint64_t v74 = 0;
  }
  if (v69 <= 0x10) {
    unint64_t v69 = 16;
  }
  unint64_t v76 = v74 + v69;
  if (v75 <= v76) {
    unint64_t v76 = 0;
  }
  *(void *)(v7 + 80) = v76;
  unint64_t v77 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v73 + 16) + 128), v76);
  int v78 = *(_DWORD *)(v7 + 116);
  if (v77 == 0x80000000 || v78 != 0)
  {
    unsigned int v80 = v78 + 1;
    *(_DWORD *)(v7 + 116) = v80;
    if (v80 >= *(_DWORD *)(v7 + 112))
    {
      if (*(unsigned char *)(v7 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
      }
      *(_DWORD *)(v7 + 116) = 0;
    }
  }
  *(void *)(v7 + 56) = v8;
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v88, v10);
  if (!v90)
  {
    LOBYTE(v94) = 15;
    int v96 = 1;
    goto LABEL_89;
  }
  unint64_t v13 = v88;
  unint64_t v14 = v89;
  unint64_t v15 = (uint64_t **)(v7 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v97, (uint64_t **)(v7 + 8));
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v97, v16))
  {
    LOBYTE(v94) = 11;
    uint64_t v16 = 1;
    int v96 = 1;
    LOBYTE(v84) = 0;
    int v86 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)&v94);
    char v87 = 1;
    if (v96 != -1) {
      ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9EA8C8[v96])(&v91, &v94);
    }
    goto LABEL_66;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3632;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19)
    {
      unint64_t v19 = 0;
    }
    else
    {
      *(void *)(v13 + v23) = v16;
      unint64_t v20 = v24;
    }
  }
  unint64_t v26 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v27 = v26 >= v13 + v20;
  unint64_t v28 = v26 - (v13 + v20);
  if (v27)
  {
    unint64_t v29 = 0;
    unint64_t v30 = v28 + v20;
    if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= v19)
    {
      *(void *)(v13 + v30) = v82;
      unint64_t v29 = v19;
      unint64_t v20 = v30 + 8;
    }
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v29 = v19;
LABEL_21:
    unint64_t v31 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v31 >= v13 + v20)
    {
      unsigned int v32 = (char *)v31 - v13;
      if ((unint64_t)v31 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v32 + 4), (unint64_t)(v32 + 4) > v29))
      {
LABEL_53:
        LOBYTE(v94) = 0;
        LOBYTE(v96) = 0;
        goto LABEL_56;
      }
      *unint64_t v31 = a3;
    }
    if (!v29) {
      goto LABEL_53;
    }
    unint64_t v33 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = *(void *)(v7 + 64);
    if (v33 + 16 >= v34) {
      unint64_t v33 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v35 = v33 + v20;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    *(void *)(v7 + 80) = v35;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v35) == 0x80000000
      || *(_DWORD *)(v7 + 116))
    {
      if (*(unsigned char *)(v7 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
      }
      *(_DWORD *)(v7 + 116) = 0;
    }
    unint64_t v13 = v7 + 96;
    while (1)
    {
      unint64_t v36 = atomic_exchange(*(atomic_ullong *volatile *)(*(void *)(v7 + 72) + 16), 0x80000000uLL);
      if (!(v36 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
      if (*(unsigned char *)(v7 + 104))
      }
      {
        BOOL v37 = IPC::Semaphore::waitFor((semaphore_t *)(v7 + 96), v10);
        if (v37)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v37);
          if (v38 < v10) {
            continue;
          }
        }
      }
      LOBYTE(v94) = 16;
      int v95 = 1;
      goto LABEL_55;
    }
    atomic_store(0, *(unint64_t **)(*(void *)(v7 + 72) + 16));
    *(void *)(v7 + 80) = 0;
    uint64_t v39 = *(void *)(v7 + 72);
    unint64_t v40 = *(void *)(v39 + 8);
    if (v40 <= 0xFF
      || (v41 = *(void *)(v7 + 64), v42 = *(void *)(v39 + 16), unint64_t v13 = v40 - 256, v41)
      && (v43 = v41 - 1, v27 = v13 >= v43, unint64_t v13 = v43, !v27))
    {
LABEL_122:
      __break(1u);
LABEL_123:
      __break(0xC471u);
      JUMPOUT(0x1990C5C00);
    }
    uint64_t v44 = v42 + 256;
    uint64_t v45 = WTF::fastMalloc((WTF *)0x50);
    unint64_t v46 = (IPC::Decoder *)IPC::Decoder::Decoder(v45, v44, v13, *(void *)(v7 + 56));
    if (*((_WORD *)v46 + 25) == 2870)
    {
      IPC::Decoder::~Decoder(v46);
      WTF::fastFree(v47, v48);
      IPC::Connection::waitForSyncReply((uint64_t)v97, v16, 0xE30u, (uint64_t)&v91, v10);
      LOBYTE(v94) = 0;
      int v95 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v94, (uint64_t)&v91);
      LOBYTE(v96) = 1;
      if (v92 != -1) {
        ((void (*)(uint64_t ***, uint64_t *))off_1EE9EA948[v92])(&v83, &v91);
      }
    }
    else
    {
      char v94 = v46;
      int v95 = 0;
LABEL_55:
      LOBYTE(v96) = 1;
    }
LABEL_56:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v97);
    if ((_BYTE)v96)
    {
      if (v95 == 1)
      {
        LOBYTE(v84) = (_BYTE)v94;
        int v50 = 1;
        int v86 = 1;
        char v87 = 1;
LABEL_65:
        ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9EA948[v50])(&v91, &v94);
        goto LABEL_66;
      }
      if (v95) {
        goto LABEL_131;
      }
      uint64_t v49 = (uint64_t)v94;
      char v94 = 0;
      uint64_t v91 = v49;
      int v93 = 0;
      LOBYTE(v84) = 0;
      int v86 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)&v91);
      char v87 = 1;
      if (v93 != -1) {
        ((void (*)(uint64_t ***, uint64_t *))off_1EE9EA8C8[v93])(&v83, &v91);
      }
      if ((_BYTE)v96)
      {
        int v50 = v95;
        if (v95 != -1) {
          goto LABEL_65;
        }
      }
    }
    else
    {
      LOBYTE(v84) = 0;
      char v87 = 0;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v97);
    if (v87)
    {
      LOBYTE(v94) = 0;
      int v96 = -1;
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v94, (uint64_t)&v84);
      if (v87)
      {
        if (v86 != -1) {
          uint64_t result = ((uint64_t (*)(uint64_t *, IPC::Decoder **))off_1EE9EA8C8[v86])(&v91, &v84);
        }
      }
      goto LABEL_89;
    }
    if (!v90) {
      goto LABEL_122;
    }
    unint64_t v51 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v52 = v51 - v88;
    if (v51 < v88)
    {
      unint64_t v53 = 0;
    }
    else
    {
      unint64_t v53 = 0;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v89)
      {
        *(_WORD *)(v88 + v52) = 2870;
        unint64_t v53 = v52 + 2;
      }
    }
    unint64_t v54 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v55 = *(void *)(v7 + 64);
    if (v54 + 16 >= v55) {
      unint64_t v54 = 0;
    }
    if (v53 <= 0x10) {
      unint64_t v53 = 16;
    }
    unint64_t v56 = v54 + v53;
    if (v55 <= v56) {
      unint64_t v56 = 0;
    }
    *(void *)(v7 + 80) = v56;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v56);
    *(_DWORD *)(v7 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v83, v15);
    unint64_t v15 = v83;
    uint64_t v91 = 0;
    IPC::Connection::createSyncMessageEncoder(3632, (uint64_t)v8, &v91, (IPC::Encoder **)&v97);
    double v8 = (IPC::Encoder *)v97;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode((IPC::Encoder *)v97, &v82);
    unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v8, 4uLL, 4);
    if (v58 <= 3) {
      goto LABEL_123;
    }
    *unint64_t v57 = a3;
    IPC::Connection::sendSyncMessage((uint64_t)v15, v91, (uint64_t *)&v97, 0, (uint64_t)&v84, v10);
    if (!v85) {
      break;
    }
    if (v85 == 1)
    {
      LOBYTE(v94) = (_BYTE)v84;
      goto LABEL_86;
    }
LABEL_131:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  unint64_t v59 = v84;
  int v84 = 0;
  char v94 = v59;
LABEL_86:
  int v96 = v85;
  ((void (*)(char *, IPC::Decoder **))off_1EE9EA948[v85])(&v98, &v84);
  int v61 = (IPC::Encoder *)v97;
  unint64_t v97 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v63, v64);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v83);
LABEL_89:
  int v62 = v96;
  if (v96 != -1) {
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9EA8C8[v62])(&v84, &v94);
  }
  return result;
}

void WebKit::WebGPU::RemoteCompositorIntegrationProxy::withDisplayBufferAsNativeImage()
{
}

void WebKit::WebGPU::RemoteComputePassEncoderProxy::~RemoteComputePassEncoderProxy(WebKit::WebGPU::RemoteComputePassEncoderProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  double v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *double v10 = 779;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    double v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  uint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 779;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  uint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  uint64_t v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EA8E8;
  uint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteComputePassEncoderProxy::~RemoteComputePassEncoderProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::setPipeline(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(void, const WebCore::WebGPU::ComputePipeline *))(**((void **)this + 5) + 88))(*((void *)this + 5), a2);
  unint64_t v47 = result;
  if (!result) {
    return result;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v5 = *((void *)this + 4);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5) {
    goto LABEL_5;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v49, v7);
  if (!v51) {
    return result;
  }
  unint64_t v33 = v49;
  unint64_t v32 = v50;
  unint64_t v34 = (v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v34 - v49;
  if (v34 < v49) {
    goto LABEL_79;
  }
  unint64_t v36 = v35 + 2;
  if (v35 > 0xFFFFFFFFFFFFFFFDLL || v36 > v50)
  {
    unint64_t v32 = 0;
LABEL_79:
    unint64_t v36 = 0;
    goto LABEL_51;
  }
  *(_WORD *)(v49 + v35) = 2871;
LABEL_51:
  unint64_t v38 = (void *)((v33 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v38 >= v33 + v36)
  {
    unint64_t v36 = (unint64_t)v38 - v33 + 8;
    if ((unint64_t)v38 - v33 > 0xFFFFFFFFFFFFFFF7 || v36 > v32) {
      return result;
    }
    void *v38 = v5;
  }
  if (!v32) {
    return result;
  }
  unint64_t v40 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *(void *)(v4 + 64);
  if (v40 + 16 >= v41) {
    unint64_t v40 = 0;
  }
  if (v36 <= 0x10) {
    unint64_t v36 = 16;
  }
  unint64_t v42 = v40 + v36;
  if (v41 <= v42) {
    unint64_t v42 = 0;
  }
  *(void *)(v4 + 80) = v42;
  unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v42);
  int v44 = *(_DWORD *)(v4 + 116);
  if (v43 == 0x80000000 || v44 != 0)
  {
    unsigned int v46 = v44 + 1;
    *(_DWORD *)(v4 + 116) = v46;
    if (v46 >= *(_DWORD *)(v4 + 112))
    {
      if (*(unsigned char *)(v4 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
  }
  *(void *)(v4 + 56) = v5;
LABEL_5:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v49, v7);
  if (!v51) {
    return result;
  }
  unint64_t v10 = v49;
  unint64_t v9 = v50;
  unint64_t v11 = (v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v49;
  if (v11 >= v49)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v50)
    {
      *(_WORD *)(v49 + v12) = 788;
      goto LABEL_12;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_12:
  unint64_t v15 = (void *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 8;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9) {
      goto LABEL_30;
    }
    *unint64_t v15 = v47;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(v4 + 72);
    unint64_t v18 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v4 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(v4 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000
      || *(_DWORD *)(v4 + 116))
    {
      if (*(unsigned char *)(v4 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
    return result;
  }
LABEL_30:
  unint64_t v21 = v51;
  if (v51)
  {
    unint64_t v22 = (v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v49;
    if (v22 < v49)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v50)
      {
        *(_WORD *)(v49 + v23) = 2870;
        unint64_t v21 = v23 + 2;
      }
    }
    unint64_t v24 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(v4 + 64);
    if (v24 + 16 < v9) {
      goto LABEL_36;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v24 = 0;
LABEL_36:
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v25 = v24 + v21;
  if (v9 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v4 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v25);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v48, (uint64_t **)(v4 + 8));
  unint64_t v26 = v48;
  unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v27 = 788;
  *((void *)v27 + 1) = v5;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unint64_t v52 = v27;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v27, (uint64_t *)&v47);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v52, 1, 0);
  unint64_t v29 = v52;
  unint64_t v52 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v30, v31);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v48);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::dispatch(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, int a2, int a3, int a4)
{
  int v62 = a3;
  int v63 = a2;
  int v61 = a4;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v5 = *((void *)this + 4);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v65, v7);
  if (!v67) {
    return result;
  }
  unint64_t v47 = v65;
  unint64_t v46 = v66;
  unint64_t v48 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = v48 - v65;
  if (v48 < v65) {
    goto LABEL_90;
  }
  unint64_t v50 = v49 + 2;
  if (v49 > 0xFFFFFFFFFFFFFFFDLL || v50 > v66)
  {
    unint64_t v46 = 0;
LABEL_90:
    unint64_t v50 = 0;
    goto LABEL_60;
  }
  *(_WORD *)(v65 + v49) = 2871;
LABEL_60:
  unint64_t v52 = (void *)((v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v52 >= v47 + v50)
  {
    unint64_t v50 = (unint64_t)v52 - v47 + 8;
    if ((unint64_t)v52 - v47 > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
      return result;
    }
    *unint64_t v52 = v5;
  }
  if (!v46) {
    return result;
  }
  unint64_t v54 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *(void *)(v4 + 64);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v50 <= 0x10) {
    unint64_t v50 = 16;
  }
  unint64_t v56 = v54 + v50;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *(void *)(v4 + 80) = v56;
  unint64_t v57 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v56);
  int v58 = *(_DWORD *)(v4 + 116);
  if (v57 == 0x80000000 || v58 != 0)
  {
    unsigned int v60 = v58 + 1;
    *(_DWORD *)(v4 + 116) = v60;
    if (v60 >= *(_DWORD *)(v4 + 112))
    {
      if (*(unsigned char *)(v4 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
  }
  *(void *)(v4 + 56) = v5;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v65, v7);
  if (!v67) {
    return result;
  }
  unint64_t v10 = v65;
  unint64_t v11 = v66;
  unint64_t v12 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v13 = v12 - v65;
  if (v12 >= v65)
  {
    unint64_t v14 = v13 + 2;
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v14 <= v66)
    {
      *(_WORD *)(v65 + v13) = 780;
      goto LABEL_11;
    }
    unint64_t v11 = 0;
  }
  unint64_t v14 = 0;
LABEL_11:
  unint64_t v16 = (v10 + v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v10 + v14);
  if (v16 >= v10 + v14)
  {
    unint64_t v18 = v16 - v10;
    unint64_t v19 = v17 + v14 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > v11)
    {
      unint64_t v11 = 0;
    }
    else
    {
      *(_DWORD *)(v10 + v18) = v63;
      unint64_t v14 = v19;
    }
  }
  unint64_t v21 = (v10 + v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v10 + v14);
  if (v21 >= v10 + v14)
  {
    unint64_t v23 = v21 - v10;
    unint64_t v24 = v22 + v14 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > v11)
    {
      unint64_t v11 = 0;
    }
    else
    {
      *(_DWORD *)(v10 + v23) = v62;
      unint64_t v14 = v24;
    }
  }
  unint64_t v26 = (_DWORD *)((v10 + v14 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v10 + v14)
  {
    unint64_t v27 = (char *)v26 - v10;
    if ((unint64_t)v26 - v10 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_39;
    }
    unint64_t v14 = (unint64_t)(v27 + 4);
    if ((unint64_t)(v27 + 4) > v11) {
      goto LABEL_39;
    }
    _DWORD *v26 = v61;
  }
  if (v11)
  {
    uint64_t v28 = *(void *)(v4 + 72);
    unint64_t v29 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = *(void *)(v4 + 64);
    if (v29 + 16 >= v30) {
      unint64_t v29 = 0;
    }
    uint64_t v31 = 16;
    if (v14 > 0x10) {
      uint64_t v31 = v14;
    }
    unint64_t v32 = v29 + v31;
    if (v30 <= v32) {
      unint64_t v32 = 0;
    }
    *(void *)(v4 + 80) = v32;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v28 + 16) + 128), v32) == 0x80000000
      || *(_DWORD *)(v4 + 116))
    {
      if (*(unsigned char *)(v4 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
    return result;
  }
LABEL_39:
  unint64_t v33 = v67;
  if (v67)
  {
    unint64_t v34 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 - v65;
    if (v34 < v65)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v33 = 0;
      if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v66)
      {
        *(_WORD *)(v65 + v35) = 2870;
        unint64_t v33 = v35 + 2;
      }
    }
    unint64_t v36 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = *(void *)(v4 + 64);
    if (v36 + 16 < v11) {
      goto LABEL_45;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v36 = 0;
LABEL_45:
  if (v33 <= 0x10) {
    unint64_t v33 = 16;
  }
  unint64_t v37 = v36 + v33;
  if (v11 <= v37) {
    unint64_t v37 = 0;
  }
  *(void *)(v4 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v37);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v4 + 8));
  unint64_t v38 = v64;
  uint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v39 = 780;
  *((void *)v39 + 1) = v5;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v68 = v39;
  unint64_t v40 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v39, &v63);
  unint64_t v41 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v40, &v62);
  IPC::Encoder::operator<<<int>(v41, &v61);
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v68, 1, 0);
  unint64_t v43 = v68;
  unint64_t v68 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::dispatchIndirect(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(void, const WebCore::WebGPU::Buffer *))(**((void **)this + 5) + 40))(*((void *)this + 5), a2);
  unsigned __int8 v53 = result;
  if (!result) {
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v6 = *((void *)this + 4);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) == v6) {
    goto LABEL_5;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v56, v8);
  if (!v58) {
    return result;
  }
  unint64_t v39 = v56;
  unint64_t v38 = v57;
  unint64_t v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = v40 - v56;
  if (v40 < v56) {
    goto LABEL_86;
  }
  unint64_t v42 = v41 + 2;
  if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
  {
    unint64_t v38 = 0;
LABEL_86:
    unint64_t v42 = 0;
    goto LABEL_57;
  }
  *(_WORD *)(v56 + v41) = 2871;
LABEL_57:
  int v44 = (void *)((v39 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v39 + v42)
  {
    unint64_t v42 = (unint64_t)v44 - v39 + 8;
    if ((unint64_t)v44 - v39 > 0xFFFFFFFFFFFFFFF7 || v42 > v38) {
      return result;
    }
    void *v44 = v6;
  }
  if (!v38) {
    return result;
  }
  unint64_t v46 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v47 = *(void *)(v5 + 64);
  if (v46 + 16 >= v47) {
    unint64_t v46 = 0;
  }
  if (v42 <= 0x10) {
    unint64_t v42 = 16;
  }
  unint64_t v48 = v46 + v42;
  if (v47 <= v48) {
    unint64_t v48 = 0;
  }
  *(void *)(v5 + 80) = v48;
  unint64_t v49 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v48);
  int v50 = *(_DWORD *)(v5 + 116);
  if (v49 == 0x80000000 || v50 != 0)
  {
    unsigned int v52 = v50 + 1;
    *(_DWORD *)(v5 + 116) = v52;
    if (v52 >= *(_DWORD *)(v5 + 112))
    {
      if (*(unsigned char *)(v5 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  *(void *)(v5 + 56) = v6;
LABEL_5:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v56, v8);
  if (!v58) {
    return result;
  }
  unint64_t v10 = v56;
  unint64_t v11 = v57;
  unint64_t v12 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v13 = v12 - v56;
  if (v12 >= v56)
  {
    unint64_t v14 = v13 + 2;
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v14 <= v57)
    {
      *(_WORD *)(v56 + v13) = 781;
      goto LABEL_12;
    }
    unint64_t v11 = 0;
  }
  unint64_t v14 = 0;
LABEL_12:
  unint64_t v16 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = v16 - (v10 + v14);
  if (v16 >= v10 + v14)
  {
    unint64_t v18 = v16 - v10;
    unint64_t v19 = v17 + v14 + 8;
    if (v18 > 0xFFFFFFFFFFFFFFF7 || v19 > v11)
    {
      unint64_t v11 = 0;
    }
    else
    {
      *(void *)(v10 + v18) = v53;
      unint64_t v14 = v19;
    }
  }
  unint64_t v21 = (void *)((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v21 >= v10 + v14)
  {
    unint64_t v14 = (unint64_t)v21 - v10 + 8;
    if ((unint64_t)v21 - v10 > 0xFFFFFFFFFFFFFFF7 || v14 > v11) {
      goto LABEL_36;
    }
    *unint64_t v21 = v54;
  }
  if (v11)
  {
    uint64_t v23 = *(void *)(v5 + 72);
    unint64_t v24 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = *(void *)(v5 + 64);
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (v14 <= 0x10) {
      unint64_t v14 = 16;
    }
    unint64_t v26 = v24 + v14;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    *(void *)(v5 + 80) = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
      || *(_DWORD *)(v5 + 116))
    {
      if (*(unsigned char *)(v5 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
    return result;
  }
LABEL_36:
  unint64_t v27 = v58;
  if (v58)
  {
    unint64_t v28 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v28 - v56;
    if (v28 < v56)
    {
      unint64_t v27 = 0;
    }
    else
    {
      unint64_t v27 = 0;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v57)
      {
        *(_WORD *)(v56 + v29) = 2870;
        unint64_t v27 = v29 + 2;
      }
    }
    unint64_t v30 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = *(void *)(v5 + 64);
    if (v30 + 16 < v10) {
      goto LABEL_42;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v30 = 0;
LABEL_42:
  if (v27 <= 0x10) {
    unint64_t v27 = 16;
  }
  unint64_t v31 = v30 + v27;
  if (v10 <= v31) {
    unint64_t v31 = 0;
  }
  *(void *)(v5 + 80) = v31;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v31);
  *(_DWORD *)(v5 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(v5 + 8));
  unint64_t v32 = v55;
  unint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v33 = 781;
  *((void *)v33 + 1) = v6;
  *((void *)v33 + 66) = (char *)v33 + 16;
  *((void *)v33 + 67) = 512;
  *((void *)v33 + 68) = 0;
  *((void *)v33 + 70) = 0;
  *((void *)v33 + 69) = 0;
  IPC::Encoder::encodeHeader(v33);
  unint64_t v59 = v33;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v33, (uint64_t *)&v53);
  IPC::Encoder::operator<<<unsigned long long const&>(v33, &v54);
  IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
  unint64_t v35 = v59;
  unint64_t v59 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v34);
    WTF::fastFree(v36, v37);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v55);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::end(WebKit::WebGPU::RemoteComputePassEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  uint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *uint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  double v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *double v9 = 782;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    double v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 782;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::setBindGroup(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v9 = a2;
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a3);
  unint64_t v8 = result;
  if (result)
  {
    v7[0] = &v9;
    v7[1] = &v8;
    v7[2] = a4;
    return IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 48) + 72) + 72) + 80), (uint64_t)v7, *(void *)(a1 + 32));
  }
  return result;
}

WTF *WebKit::WebGPU::RemoteComputePassEncoderProxy::setBindGroup(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  int v22 = a2;
  uint64_t result = (WTF *)(*(uint64_t (**)(void, const WebCore::WebGPU::BindGroup *))(**((void **)this + 5) + 24))(*((void *)this + 5), a3);
  unint64_t v21 = result;
  if (result)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, (int *)&a4[a6], a7);
    unint64_t v17 = v15;
    uint64_t v12 = v16;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v18 = v12;
    char v19 = 1;
    v20[0] = &v22;
    v20[1] = &v21;
    v20[2] = &v17;
    IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80), (uint64_t)v20, *((void *)this + 4));
    if (v19)
    {
      unint64_t v14 = v17;
      if (v17)
      {
        unint64_t v17 = 0;
        LODWORD(v18) = 0;
        WTF::fastFree(v14, v13);
      }
    }
    uint64_t result = v15;
    if (v15)
    {
      unint64_t v15 = 0;
      LODWORD(v16) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 785;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 785;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteComputePassEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 784;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 784;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unsigned __int8 v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 783;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 783;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePassEncoderProxy::setLabelInternal(WebKit::WebGPU::RemoteComputePassEncoderProxy *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)a2;
  return IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80), &v3, *((void *)this + 4));
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages13RemoteAdapter13RequestDeviceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12RemoteBuffer14GetMappedRangeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *(WTF **)(a2 + 8);
    if (v4)
    {
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t IPC::Decoder::operator>><std::tuple<WebKit::WebGPU::SupportedFeatures,WebKit::WebGPU::SupportedLimits>>(IPC::Decoder *a1, WTF::StringImpl **a2)
{
  IPC::Decoder::decode<WebKit::WebGPU::SupportedFeatures>(a1, a2, (uint64_t)&v37);
  if (!v39)
  {
    LOBYTE(v25) = 0;
    char v36 = 0;
LABEL_8:
    unint64_t v9 = *(void **)a1;
    uint64_t v11 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v12 = *((void *)a1 + 3);
    if (v12 && v11) {
      (*(void (**)(uint64_t, void *))(*(void *)v12 + 16))(v12, v9);
    }
    int v8 = 0;
    char v10 = 1;
LABEL_10:
    if (*((unsigned __int8 *)a2 + 160) == v8)
    {
      if (!*((unsigned char *)a2 + 160)) {
        return (uint64_t)a1;
      }
      uint64_t v13 = *((unsigned int *)a2 + 3);
      if (v13) {
        WTF::VectorDestructor<true,WTF::String>::destruct(*a2, (WTF::StringImpl *)((char *)*a2 + 8 * v13));
      }
      uint64_t v14 = *a2;
      if (*a2)
      {
        *a2 = 0;
        *((_DWORD *)a2 + 2) = 0;
        WTF::fastFree(v14, v9);
      }
      uint64_t v15 = v25;
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v3;
      *((_DWORD *)a2 + 3) = v2;
      long long v16 = v34;
      *((_OWORD *)a2 + 7) = v33;
      *((_OWORD *)a2 + 8) = v16;
      *((_OWORD *)a2 + 9) = v35;
      long long v17 = v30;
      *((_OWORD *)a2 + 3) = v29;
      *((_OWORD *)a2 + 4) = v17;
      long long v18 = v32;
      *((_OWORD *)a2 + 5) = v31;
      *((_OWORD *)a2 + 6) = v18;
      long long v19 = v28;
      *((_OWORD *)a2 + 1) = v27;
      *((_OWORD *)a2 + 2) = v19;
      if (v10) {
        return (uint64_t)a1;
      }
    }
    else if (*((unsigned char *)a2 + 160))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v9);
      *((unsigned char *)a2 + 160) = 0;
      if (v10) {
        return (uint64_t)a1;
      }
    }
    else
    {
      unint64_t v20 = v25;
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      *a2 = v20;
      *((_DWORD *)a2 + 2) = v3;
      *((_DWORD *)a2 + 3) = v2;
      long long v21 = v34;
      *((_OWORD *)a2 + 7) = v33;
      *((_OWORD *)a2 + 8) = v21;
      *((_OWORD *)a2 + 9) = v35;
      long long v22 = v30;
      *((_OWORD *)a2 + 3) = v29;
      *((_OWORD *)a2 + 4) = v22;
      long long v23 = v32;
      *((_OWORD *)a2 + 5) = v31;
      *((_OWORD *)a2 + 6) = v23;
      long long v24 = v28;
      *((_OWORD *)a2 + 1) = v27;
      *((_OWORD *)a2 + 2) = v24;
      *((unsigned char *)a2 + 160) = 1;
      if (v10) {
        return (uint64_t)a1;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v9);
    return (uint64_t)a1;
  }
  uint64_t result = IPC::Decoder::decode<WebKit::WebGPU::SupportedLimits>(a1, (uint64_t)v40);
  if (!v41)
  {
    LOBYTE(v25) = 0;
    char v36 = 0;
    if (v39) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
    }
    goto LABEL_8;
  }
  if (v39)
  {
    unint64_t v25 = v37;
    unsigned int v3 = v38;
    unsigned int v2 = HIDWORD(v38);
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    unint64_t v26 = __PAIR64__(v2, v3);
    long long v33 = v40[6];
    long long v34 = v40[7];
    long long v35 = v40[8];
    long long v29 = v40[2];
    long long v30 = v40[3];
    long long v32 = v40[5];
    long long v31 = v40[4];
    long long v28 = v40[1];
    long long v27 = v40[0];
    int v8 = 1;
    char v36 = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
    char v10 = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ConnectionSendSyncResult(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  long long v7 = *((_OWORD *)a3 + 5);
  long long v19 = *((_OWORD *)a3 + 6);
  long long v6 = v19;
  long long v8 = *((_OWORD *)a3 + 8);
  long long v20 = *((_OWORD *)a3 + 7);
  long long v21 = v8;
  long long v22 = *((_OWORD *)a3 + 9);
  long long v9 = *((_OWORD *)a3 + 4);
  long long v16 = *((_OWORD *)a3 + 3);
  long long v17 = v9;
  long long v11 = *((_OWORD *)a3 + 1);
  long long v15 = *((_OWORD *)a3 + 2);
  long long v10 = v15;
  long long v18 = v7;
  long long v14 = v11;
  v13[0] = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  v13[1] = 0;
  *(void *)&long long v11 = a3[1];
  a3[1] = 0;
  *(void *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 120) = v20;
  *(_OWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 152) = v22;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v16;
  *(_OWORD *)(a1 + 72) = v17;
  *(_OWORD *)(a1 + 88) = v18;
  *(_OWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 168) = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 168);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EA700[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 168) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 168);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA958[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 168) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages13RemoteAdapter13RequestDeviceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 3);
  long long v5 = *(_OWORD *)(a3 + 5);
  long long v6 = *(_OWORD *)(a3 + 7);
  long long v7 = *(_OWORD *)(a3 + 9);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 11);
  *(_OWORD *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 40) = v5;
  __n128 result = *(__n128 *)(a3 + 13);
  long long v9 = *(_OWORD *)(a3 + 15);
  long long v10 = *(_OWORD *)(a3 + 17);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 19);
  *(_OWORD *)(a2 + 136) = v10;
  *(_OWORD *)(a2 + 120) = v9;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages13RemoteAdapter13RequestDeviceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EA978;
  unsigned int v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EA978;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 <= 0xFFu)
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v8 = a2[3];
      if (v8 && v7) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
      }
    }
    else if ((_BYTE)v4)
    {
      *(unsigned char *)(*(void *)(a1 + 24) + 56) = *(unsigned char *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_8:
  long long v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBuffer::MapAsync &&,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EA9A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBuffer::MapAsync &&,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EA9A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::MapAsync,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBuffer::MapAsync &&,WebKit::WebGPU::RemoteBufferProxy::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t *IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(a1, (uint64_t)&v8);
  std::__optional_storage_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>>(a2, (uint64_t *)&v8);
  if (v11) {
    BOOL v5 = v10 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = v8;
    if (v8)
    {
      uint64_t v8 = 0;
      int v9 = 0;
      WTF::fastFree(v7, v4);
    }
  }
  return a1;
}

void *IPC::Decoder::decode<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = IPC::ArgumentCoder<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    __n128 result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)v5);
  char v4 = v7;
  if (v7)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    char v4 = 1;
    if (v6)
    {
      *(void *)a2 = v5[0];
      *(void *)(a2 + 8) = v5[1];
      *(unsigned char *)(a2 + 16) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

uint64_t std::__optional_storage_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24)) {
      return std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    return (uint64_t)std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::reset[abi:sn180100]((WTF *)a1, a2);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (*((unsigned char *)a2 + 16))
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v2 = *a2;
      *a2 = 0;
      *(void *)a1 = v2;
      LODWORD(v2) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(a1 + 8) = v2;
      LODWORD(v2) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(a1 + 12) = v2;
      *(unsigned char *)(a1 + 16) = 1;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

WTF *std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::reset[abi:sn180100](WTF *result, void *a2)
{
  if (*((unsigned char *)result + 24))
  {
    uint64_t v2 = result;
    if (*((unsigned char *)result + 16))
    {
      __n128 result = *(WTF **)result;
      if (*(void *)v2)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
        __n128 result = (WTF *)WTF::fastFree(result, a2);
      }
    }
    *((unsigned char *)v2 + 24) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteBuffer::GetMappedRange>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EA7C0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 32) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA9B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12RemoteBuffer14GetMappedRangeEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (*((unsigned char *)a3 + 24))
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v4 = a3[1];
    a3[1] = 0;
    *(void *)(a2 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    *(_DWORD *)(a2 + 16) = v4;
    LODWORD(v4) = *((_DWORD *)a3 + 5);
    *((_DWORD *)a3 + 5) = 0;
    *(_DWORD *)(a2 + 20) = v4;
    *(unsigned char *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12RemoteBuffer14GetMappedRangeEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9EA9D8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EA9D8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &>(WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (a2 && *a2)
  {
    __n128 result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if ((unsigned __int16)result <= 0xFFu)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      __n128 result = a2[3];
      if (result && v6) {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
      }
      if (!*(void *)(v2 + 8) && *(unsigned char *)(v2 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x1990C8B8CLL);
      }
    }
    else if (!*(void *)(v2 + 8) && *(unsigned char *)(v2 + 16))
    {
      __break(0xC471u);
      JUMPOUT(0x1990C8B2CLL);
    }
  }
  else
  {
    if (*(void *)(result + 8)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(unsigned char *)(result + 16) == 0;
    }
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1990C8BACLL);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBuffer::Copy &&,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EAA00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBuffer::Copy &&,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EAA00;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBuffer::Copy,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteBuffer::Copy &&,WebKit::WebGPU::RemoteBufferProxy::copy(std::span<unsigned char const,18446744073709551615ul>,unsigned long)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteCommandBuffer::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  long long v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  unint64_t v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 762;
      unint64_t v52 = v12 + 2;
    }
  }
  __n128 result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v50, *a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        __n128 result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  unint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 762;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v50 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  long long v28 = v50;
  unint64_t v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

void IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *this, WTF **a2)
{
  unint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(void *)this;
  unint64_t v8 = ((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)this;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v21 = *((void *)this + 3);
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v7, v6);
        uint64_t v20 = *(void *)this;
        unint64_t v19 = *((void *)this + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_38;
  }
  unint64_t v10 = (WTF **)(v7 + v8);
  *((void *)this + 2) = v10 + 1;
  if (!v7)
  {
    unint64_t v19 = v6;
    uint64_t v20 = 0;
LABEL_38:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v22 = *((void *)this + 3);
    if (v22 && v19) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
    }
    goto LABEL_28;
  }
  BOOL v11 = *v10;
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  if ((unint64_t)v11 >= 0x40000)
  {
    do
    {
      IPC::Decoder::takeLastAttachment(this, v39);
      if (!v40) {
        goto LABEL_27;
      }
      if (HIDWORD(v35) == v35)
      {
        WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>((uint64_t)&v34, (unint64_t)v39);
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        ++HIDWORD(v35);
      }
      if (v40) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v39);
      }
      BOOL v11 = (WTF *)((char *)v11 - 1);
    }
    while (v11);
    uint64_t v23 = HIDWORD(v35);
    BOOL v11 = v34;
    if (v35 > HIDWORD(v35))
    {
      unint64_t v24 = v34;
      if (HIDWORD(v35))
      {
        if (HIDWORD(v35) >> 30)
        {
          __break(0xC471u);
          return;
        }
        unint64_t v25 = (WTF *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v35)));
        LODWORD(v35) = v23;
        unint64_t v34 = v25;
        unint64_t v24 = v11;
        if (v25 != v11)
        {
          WTF::VectorMover<false,WTF::MachSendRight>::move(v11, (WTF *)((char *)v11 + 4 * v23), (uint64_t)v25);
          unint64_t v24 = v34;
        }
      }
      if (v11)
      {
        if (v24 == v11)
        {
          unint64_t v34 = 0;
          LODWORD(v35) = 0;
        }
        WTF::fastFree(v11, a2);
LABEL_53:
        BOOL v11 = v34;
      }
      else
      {
        BOOL v11 = v24;
      }
    }
    unsigned int v3 = v35;
    unsigned int v2 = HIDWORD(v35);
    goto LABEL_55;
  }
  if (v11)
  {
    LODWORD(v35) = v11;
    unint64_t v34 = (WTF *)WTF::fastMalloc((WTF *)(4 * (void)v11));
    while (1)
    {
      IPC::Decoder::takeLastAttachment(this, v39);
      if (!v40) {
        break;
      }
      if (HIDWORD(v35) == v35)
      {
        WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>((uint64_t)&v34, (unint64_t)v39);
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        ++HIDWORD(v35);
      }
      if (v40) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v39);
      }
      BOOL v11 = (WTF *)((char *)v11 - 1);
      if (!v11) {
        goto LABEL_53;
      }
    }
LABEL_27:
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v12);
LABEL_28:
    uint64_t v13 = *(void *)this;
    uint64_t v14 = *((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v15 = *((void *)this + 3);
    if (v15)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        uint64_t v16 = *(void **)this;
        uint64_t v14 = *((void *)this + 1);
        uint64_t v15 = *((void *)this + 3);
LABEL_31:
        LOBYTE(v34) = 0;
        char v36 = 0;
        *(void *)this = 0;
        *((void *)this + 1) = 0;
        if (v15 && v14) {
          (*(void (**)(uint64_t, void *))(*(void *)v15 + 16))(v15, v16);
        }
        int v17 = 0;
        char v18 = 1;
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v16 = 0;
    goto LABEL_31;
  }
  unsigned int v2 = 0;
  unsigned int v3 = 0;
LABEL_55:
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  int v17 = 1;
  char v38 = 1;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
  v37[0] = 0;
  v37[1] = 0;
  unint64_t v34 = v11;
  unint64_t v35 = __PAIR64__(v2, v3);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v26);
  char v18 = 0;
  char v36 = 1;
LABEL_56:
  if (*((unsigned __int8 *)a2 + 16) != v17)
  {
    if (*((unsigned char *)a2 + 16))
    {
      WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v16);
      *((unsigned char *)a2 + 16) = 0;
      if (v18) {
        return;
      }
    }
    else
    {
      long long v30 = v34;
      unint64_t v34 = 0;
      unint64_t v35 = 0;
      *a2 = v30;
      *((_DWORD *)a2 + 2) = v3;
      *((_DWORD *)a2 + 3) = v2;
      *((unsigned char *)a2 + 16) = 1;
      if (v18) {
        return;
      }
    }
LABEL_62:
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v16);
    return;
  }
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v27 = *((unsigned int *)a2 + 3);
    if (v27)
    {
      unint64_t v31 = *a2;
      uint64_t v32 = 4 * v27;
      do
      {
        WTF::MachSendRight::~MachSendRight(v31);
        unint64_t v31 = (WTF::MachSendRight *)(v33 + 4);
        v32 -= 4;
      }
      while (v32);
    }
    long long v28 = *a2;
    if (*a2)
    {
      *a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      WTF::fastFree(v28, v16);
    }
    long long v29 = v34;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    *a2 = v29;
    *((_DWORD *)a2 + 2) = v3;
    *((_DWORD *)a2 + 3) = v2;
    if ((v18 & 1) == 0) {
      goto LABEL_62;
    }
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ConnectionSendSyncResult(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  v8[0] = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  v8[1] = 0;
  uint64_t v6 = a3[1];
  a3[1] = 0;
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::RecreateRenderBuffers>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EA8A8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EAA18[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PrepareForDisplay>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EA8B8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EAA28[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteCompositorIntegration::PaintCompositedResultsToCanvas>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EA8C8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EAA38[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  uint64_t v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  unint64_t v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 786;
      unint64_t v52 = v12 + 2;
    }
  }
  __n128 result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(&v50, a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        __n128 result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  unint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 786;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v50 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v26, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  long long v28 = v50;
  unint64_t v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

void *IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, *(void **)(a2 + 8));
  uint64_t v12 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, v12);
}

void *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 16))
      {
        uint64_t v6 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v6);
      }
    }
    uint64_t v4 = *(unsigned int *)(a2 + 12);
    unint64_t v5 = *(const void **)a2;
    return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, v5, v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

atomic_uchar *volatile **IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(a1, *(int **)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v3, v4);
}

atomic_uchar *volatile **IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  __n128 result = (atomic_uchar *volatile **)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1990C9D20);
    }
    *(unsigned char *)__n128 result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      BOOL v7 = *(const void **)a2;
      uint64_t v8 = *(unsigned int *)(a2 + 12);
      return (atomic_uchar *volatile **)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v7, v8);
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v9, v10, v11);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1990C9D40);
    }
    *(unsigned char *)__n128 result = 0;
  }
  return result;
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteComputePassEncoder::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  uint64_t v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  unint64_t v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 787;
      unint64_t v52 = v12 + 2;
    }
  }
  __n128 result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v50, *a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        __n128 result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  unint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 787;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v50 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  long long v28 = v50;
  unint64_t v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

void WebKit::WebGPU::RemoteComputePipelineProxy::~RemoteComputePipelineProxy(WebKit::WebGPU::RemoteComputePipelineProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  unint64_t v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *unint64_t v10 = 789;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    unint64_t v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 789;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  uint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  uint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  int v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EAE78;
  unsigned int v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteComputePipelineProxy::~RemoteComputePipelineProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteComputePipelineProxy::getBindGroupLayout@<X0>(WebKit::WebGPU::RemoteComputePipelineProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  double v6 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v52 = a2;
  unsigned __int8 v53 = &v54;
  uint64_t v54 = v6;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) == v8) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v59, v10);
  if (!(_BYTE)v61) {
    goto LABEL_37;
  }
  unint64_t v38 = v59;
  unint64_t v37 = v60;
  unint64_t v39 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - (void)v59;
  if (v39 < (unint64_t)v59) {
    goto LABEL_72;
  }
  unint64_t v41 = v40 + 2;
  if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v60)
  {
    unint64_t v37 = 0;
LABEL_72:
    unint64_t v41 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v59 + v40) = 2871;
LABEL_45:
  int v43 = (char *)(((unint64_t)v38 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v43 >= (char *)v38 + v41)
  {
    unint64_t v41 = v43 - (char *)v38 + 8;
    if ((unint64_t)(v43 - (char *)v38) > 0xFFFFFFFFFFFFFFF7 || v41 > v37) {
      goto LABEL_37;
    }
    *(void *)int v43 = v8;
  }
  if (!v37) {
    goto LABEL_37;
  }
  unint64_t v45 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(v7 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v47 = v45 + v41;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(v7 + 80) = v47;
  unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v47);
  int v49 = *(_DWORD *)(v7 + 116);
  if (v48 == 0x80000000 || v49 != 0)
  {
    unsigned int v51 = v49 + 1;
    *(_DWORD *)(v7 + 116) = v51;
    if (v51 >= *(_DWORD *)(v7 + 112))
    {
      if (*(unsigned char *)(v7 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
      }
      *(_DWORD *)(v7 + 116) = 0;
    }
  }
  *(void *)(v7 + 56) = v8;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v56, v10);
  if (!v58) {
    goto LABEL_37;
  }
  unint64_t v59 = v56;
  unint64_t v60 = v57;
  unint64_t v61 = 0;
  unint64_t v12 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v56;
  unint64_t v14 = v12 - (void)v56;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v57)
    {
      unint64_t v60 = 0;
    }
    else
    {
      *(_WORD *)((char *)v56 + v14) = 790;
      unint64_t v61 = v14 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul>(&v59, (uint64_t)&v52);
  if (v60)
  {
    unint64_t v17 = v61;
    unint64_t v18 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v16 = *(void *)(v7 + 64);
    if (v18 + 16 < v16)
    {
LABEL_14:
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v19 = v18 + v17;
      if (v16 <= v19) {
        unint64_t v19 = 0;
      }
      *(void *)(v7 + 80) = v19;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v19) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      goto LABEL_37;
    }
LABEL_70:
    unint64_t v18 = 0;
    goto LABEL_14;
  }
  unint64_t v17 = v58;
  if (!v58)
  {
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v20 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - (void)v56;
  if (v20 < (unint64_t)v56)
  {
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v22 = 0;
    if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v57)
    {
      *(_WORD *)((char *)v56 + v21) = 2870;
      unint64_t v22 = v21 + 2;
    }
  }
  unint64_t v23 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = *(void *)(v7 + 64);
  if (v23 + 16 >= v24) {
    unint64_t v23 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v25 = v23 + v22;
  if (v24 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v7 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v25);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(v7 + 8));
  unint64_t v26 = v55;
  unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v27 = 790;
  *((void *)v27 + 1) = v8;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unint64_t v59 = v27;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul>(v27, &v52);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v59, 1, 0);
  unint64_t v29 = v59;
  unint64_t v59 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v35, v36);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v55);
LABEL_37:
  unsigned int v32 = (char *)this + 40;
  uint64_t v30 = *((void *)this + 5);
  uint64_t v31 = *((void *)v32 + 1);
  unint64_t v33 = v54;
  uint64_t result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)uint64_t result = &unk_1EE9EA4C8;
  *(void *)(result + 32) = v33;
  ++*(_DWORD *)(v30 + 8);
  *(void *)(result + 40) = v30;
  ++*(_DWORD *)(v31 + 8);
  *(void *)(result + 48) = v31;
  *a3 = result;
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteComputePipelineProxy::setLabelInternal(WebKit::WebGPU::RemoteComputePipelineProxy *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)a2;
  return IPC::StreamClientConnection::send<Messages::RemoteComputePipeline::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80), &v3, *((void *)this + 4));
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::RemoteDeviceProxy(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 32) = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = a6;
  *(void *)a1 = &unk_1EE9EAA88;
  *(void *)(a1 + 56) = 0;
  ++*(_DWORD *)(a5 + 8);
  ++*(_DWORD *)(a4 + 8);
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = a4;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)uint64_t v13 = &unk_1EE9EAE18;
  *(void *)(v13 + 32) = a7;
  ++*(_DWORD *)(a5 + 8);
  *(void *)(v13 + 40) = a5;
  ++*(_DWORD *)(a4 + 8);
  *(void *)(v13 + 48) = a4;
  *(void *)(a1 + 80) = v13;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 88));
  return a1;
}

void WebKit::WebGPU::RemoteDeviceProxy::~RemoteDeviceProxy(WebKit::WebGPU::RemoteDeviceProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 9) + 72) + 80);
  uint64_t v3 = *((void *)this + 6);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v55, v5);
  if (!v57) {
    goto LABEL_72;
  }
  unint64_t v18 = v55;
  unint64_t v17 = v56;
  unint64_t v19 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v55;
  if (v19 < v55) {
    goto LABEL_54;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v56)
  {
    unint64_t v17 = 0;
LABEL_54:
    unint64_t v21 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v20) = 2871;
LABEL_30:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      goto LABEL_72;
    }
    *unint64_t v23 = v3;
  }
  if (!v17) {
    goto LABEL_72;
  }
  unint64_t v25 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v2 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v2 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v2 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v2 + 116) = v31;
    if (v31 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v55, v5);
  if (!v57) {
    goto LABEL_72;
  }
  unint64_t v7 = v55;
  unint64_t v8 = v56;
  double v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    unint64_t v11 = 0;
    if (v56) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
    {
LABEL_58:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v56)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v2 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_64;
      }
      goto LABEL_103;
    }
    *double v9 = 808;
    if (v8)
    {
LABEL_11:
      unint64_t v13 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v14 = *(void *)(v2 + 64);
      if (v13 + 16 >= v14) {
        unint64_t v13 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v15 = v13 + v11;
      if (v14 <= v15) {
        unint64_t v16 = 0;
      }
      else {
        unint64_t v16 = v15;
      }
      *(void *)(v2 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_72;
    }
  }
  unint64_t v32 = v57;
  if (v57)
  {
    unint64_t v7 = v55;
    double v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_58;
  }
  __break(1u);
LABEL_103:
  unint64_t v35 = 0;
LABEL_64:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v2 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v37);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v2 + 8));
  unint64_t v38 = v54;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 808;
  *((void *)v39 + 1) = v3;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v58 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v58, 1, 0);
  unint64_t v41 = v58;
  unsigned __int8 v58 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
LABEL_72:
  unint64_t v42 = (unsigned int *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v42) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v42);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 11, 0);
  unsigned int v44 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  unint64_t v45 = (_DWORD *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
    }
    else {
      --v45[2];
    }
  }
  unint64_t v46 = (_DWORD *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v46)
  {
    if (v46[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v46 + 8))(v46);
    }
    else {
      --v46[2];
    }
  }
  *(void *)this = &unk_1EE9EAEA8;
  unint64_t v47 = (WTF *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1) {
      WTF::fastFree(v47, v43);
    }
    else {
      --*(_DWORD *)v47;
    }
  }
  unint64_t v48 = (WTF *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v48) {
    WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v48, v43);
  }
  int v49 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
  uint64_t v50 = *((void *)this + 2);
  if (v50)
  {
    *(void *)(v50 + 8) = 0;
    unsigned int v51 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v51)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v51, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v43);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteDeviceProxy::~RemoteDeviceProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::queue@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 80);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteDeviceProxy::destroy(WebKit::WebGPU::RemoteDeviceProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*((void *)this + 9) + 72) + 80);
  uint64_t v2 = *((void *)this + 6);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  double v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *double v9 = 807;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    double v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 807;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createXRBinding@<X0>(WebKit::WebGPU::RemoteDeviceProxy *this@<X0>, void *a2@<X8>)
{
  double v4 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v52 = v4;
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 9) + 72) + 80);
  uint64_t v6 = *((void *)this + 6);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(v4);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) == v6)
  {
LABEL_4:
    IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v54, v8);
    if (!v56) {
      goto LABEL_42;
    }
    unint64_t v11 = v54;
    unint64_t v10 = v55;
    unint64_t v12 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = v12 - v54;
    if (v12 >= v54)
    {
      unint64_t v14 = v13 + 2;
      if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v14 <= v55)
      {
        *(_WORD *)(v54 + v13) = 806;
        goto LABEL_11;
      }
      unint64_t v10 = 0;
    }
    unint64_t v14 = 0;
LABEL_11:
    unint64_t v16 = (void *)((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v11 + v14)
    {
      unint64_t v14 = (unint64_t)v16 - v11 + 8;
      if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7 || v14 > v10) {
        goto LABEL_29;
      }
      *unint64_t v16 = v52;
    }
    if (v10)
    {
      uint64_t v18 = *(void *)(v5 + 72);
      unint64_t v19 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v5 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v14 <= 0x10) {
        unint64_t v14 = 16;
      }
      unint64_t v21 = v19 + v14;
      if (v20 <= v21) {
        unint64_t v21 = 0;
      }
      *(void *)(v5 + 80) = v21;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v18 + 16) + 128), v21) == 0x80000000
        || *(_DWORD *)(v5 + 116))
      {
        if (*(unsigned char *)(v5 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
        }
        *(_DWORD *)(v5 + 116) = 0;
      }
LABEL_43:
      uint64_t v33 = *((void *)this + 8);
      uint64_t v34 = (uint64_t)v52;
      uint64_t result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = v34;
      *(void *)uint64_t result = &unk_1EE9EBAC8;
      ++*(_DWORD *)(v33 + 8);
      *(void *)(result + 32) = v33;
      ++*((_DWORD *)this + 2);
      *(void *)(result + 40) = this;
      goto LABEL_44;
    }
LABEL_29:
    unint64_t v22 = v56;
    if (v56)
    {
      unint64_t v23 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v24 = v23 - v54;
      if (v23 < v54)
      {
        unint64_t v22 = 0;
      }
      else
      {
        unint64_t v22 = 0;
        if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v55)
        {
          *(_WORD *)(v54 + v24) = 2870;
          unint64_t v22 = v24 + 2;
        }
      }
      unint64_t v25 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v10 = *(void *)(v5 + 64);
      if (v25 + 16 < v10)
      {
LABEL_35:
        if (v22 <= 0x10) {
          unint64_t v22 = 16;
        }
        unint64_t v26 = v25 + v22;
        if (v10 <= v26) {
          unint64_t v26 = 0;
        }
        *(void *)(v5 + 80) = v26;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v26);
        *(_DWORD *)(v5 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(v5 + 8));
        unint64_t v27 = v53;
        unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v28 = 806;
        *((void *)v28 + 1) = v6;
        *((void *)v28 + 66) = (char *)v28 + 16;
        *((void *)v28 + 67) = 512;
        *((void *)v28 + 68) = 0;
        *((void *)v28 + 70) = 0;
        *((void *)v28 + 69) = 0;
        IPC::Encoder::encodeHeader(v28);
        unsigned __int8 v57 = v28;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v52);
        int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v57, 1, 0);
        unsigned int v31 = v57;
        unsigned __int8 v57 = 0;
        if (v31)
        {
          IPC::Encoder::~Encoder(v31, v29);
          WTF::fastFree(v35, v36);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53);
        if (!v30) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v25 = 0;
    goto LABEL_35;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v54, v8);
  if (!v56) {
    goto LABEL_42;
  }
  unint64_t v38 = v54;
  unint64_t v37 = v55;
  unint64_t v39 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v54;
  if (v39 >= v54)
  {
    unint64_t v41 = v40 + 2;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v41 <= v55)
    {
      *(_WORD *)(v54 + v40) = 2871;
      goto LABEL_52;
    }
    unint64_t v37 = 0;
  }
  unint64_t v41 = 0;
LABEL_52:
  int v43 = (void *)((v38 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v43 >= v38 + v41)
  {
    unint64_t v41 = (unint64_t)v43 - v38 + 8;
    if ((unint64_t)v43 - v38 > 0xFFFFFFFFFFFFFFF7 || v41 > v37) {
      goto LABEL_42;
    }
    void *v43 = v6;
  }
  if (v37)
  {
    unint64_t v45 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = *(void *)(v5 + 64);
    if (v45 + 16 >= v46) {
      unint64_t v45 = 0;
    }
    if (v41 <= 0x10) {
      unint64_t v41 = 16;
    }
    unint64_t v47 = v45 + v41;
    if (v46 <= v47) {
      unint64_t v47 = 0;
    }
    *(void *)(v5 + 80) = v47;
    unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v47);
    int v49 = *(_DWORD *)(v5 + 116);
    if (v48 == 0x80000000 || v49 != 0)
    {
      unsigned int v51 = v49 + 1;
      *(_DWORD *)(v5 + 116) = v51;
      if (v51 >= *(_DWORD *)(v5 + 112))
      {
        if (*(unsigned char *)(v5 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
        }
        *(_DWORD *)(v5 + 116) = 0;
      }
    }
    *(void *)(v5 + 56) = v6;
    goto LABEL_4;
  }
LABEL_42:
  uint64_t result = 0;
LABEL_44:
  *a2 = result;
  return result;
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 8);
  __int16 v7 = *(_WORD *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 18);
  v60[0] = v5;
  v60[1] = v6;
  __int16 v61 = v7;
  char v62 = v8;
  char v63 = 1;
  double v9 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v59 = v9;
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v11 = *(void *)(a1 + 48);
  double v12 = *(double *)(v10 + 120);
  double v13 = INFINITY;
  if (fabs(v12) != INFINITY)
  {
    WTF::ApproximateTime::now(v9);
    double v13 = v12 + v14;
  }
  if (*(void *)(v10 + 56) == v11)
  {
LABEL_6:
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 64, &v65, v13);
    if (v67)
    {
      unint64_t v68 = v65;
      unint64_t v69 = v66;
      unint64_t v70 = 0;
      unint64_t v17 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v18 = v17 >= (unint64_t)v65;
      unint64_t v19 = v17 - (void)v65;
      if (v18)
      {
        if (v19 > 0xFFFFFFFFFFFFFFFDLL || v19 + 2 > v66) {
          goto LABEL_82;
        }
        *(_WORD *)((char *)v65 + v19) = 794;
        unint64_t v70 = v19 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(&v68, (uint64_t)v60);
        unint64_t v20 = v70;
        unint64_t v21 = (char *)(((unint64_t)v68 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= (char *)v68 + v70)
        {
          int64_t v22 = v21 - (char *)v68;
          if ((unint64_t)(v21 - (char *)v68) > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_28;
          }
          unint64_t v20 = v22 + 8;
          if (v22 + 8 > v69) {
            goto LABEL_28;
          }
          *(void *)unint64_t v21 = v59;
          unint64_t v70 = v22 + 8;
        }
        if (v69)
        {
          unint64_t v23 = (*(void *)(v10 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v24 = *(void *)(v10 + 64);
          if (v23 + 16 >= v24) {
            unint64_t v23 = 0;
          }
          if (v20 <= 0x10) {
            unint64_t v20 = 16;
          }
          unint64_t v25 = v23 + v20;
          if (v24 <= v25) {
            unint64_t v25 = 0;
          }
          *(void *)(v10 + 80) = v25;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v10 + 72) + 16) + 128), v25) == 0x80000000
            || *(_DWORD *)(v10 + 116))
          {
            if (*(unsigned char *)(v10 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v10 + 92));
            }
            *(_DWORD *)(v10 + 116) = 0;
          }
          goto LABEL_43;
        }
LABEL_28:
        if (!v67) {
          goto LABEL_81;
        }
        unint64_t v26 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v27 = v26 - (void)v65;
        if (v26 < (unint64_t)v65)
        {
          unint64_t v28 = 0;
        }
        else
        {
          unint64_t v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v66)
          {
            *(_WORD *)((char *)v65 + v27) = 2870;
            unint64_t v28 = v27 + 2;
          }
        }
        unint64_t v29 = (*(void *)(v10 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v30 = *(void *)(v10 + 64);
        if (v29 + 16 >= v30) {
          unint64_t v29 = 0;
        }
        if (v28 <= 0x10) {
          unint64_t v28 = 16;
        }
        unint64_t v31 = v29 + v28;
        if (v30 <= v31) {
          unint64_t v31 = 0;
        }
        *(void *)(v10 + 80) = v31;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v10 + 72) + 16) + 128), v31);
        *(_DWORD *)(v10 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v10 + 8));
        unint64_t v32 = v64;
        uint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v33 = 794;
        *((void *)v33 + 1) = v11;
        *((void *)v33 + 66) = (char *)v33 + 16;
        *((void *)v33 + 67) = 512;
        *((void *)v33 + 68) = 0;
        *((void *)v33 + 70) = 0;
        *((void *)v33 + 69) = 0;
        IPC::Encoder::encodeHeader(v33);
        unint64_t v68 = v33;
        IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(v33, (uint64_t)v60);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v33, (uint64_t *)&v59);
        uint64_t v10 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v68, 1, 0);
        unint64_t v35 = v68;
        unint64_t v68 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v41, v42);
        }
        uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
        if (v10) {
          goto LABEL_42;
        }
LABEL_43:
        if (v63)
        {
          uint64_t v37 = (uint64_t)v59;
          uint64_t v11 = *(void *)(a1 + 64);
          char v38 = v62;
          uint64_t v39 = WTF::fastMalloc((WTF *)0x40);
          *(_DWORD *)(v39 + 8) = 1;
          *(void *)(v39 + 16) = 0;
          *(void *)(v39 + 24) = 0;
          *(void *)uint64_t v39 = &unk_1EE9EA520;
          *(void *)(v39 + 32) = v37;
          ++*(_DWORD *)(v11 + 8);
          *(void *)(v39 + 40) = v11;
          ++*(_DWORD *)(a1 + 8);
          *(void *)(v39 + 48) = a1;
          *(unsigned char *)(v39 + 56) = 2 * v38;
          if (v63)
          {
            uint64_t v36 = v39;
            unint64_t v40 = v60[0];
            v60[0] = 0;
            *(void *)(v39 + 24) = v40;
            uint64_t result = (WTF::StringImpl *)off_1EE9EA560((WebKit::WebGPU::RemoteBufferProxy *)v39, (const WTF::String *)(v39 + 24));
            goto LABEL_46;
          }
        }
LABEL_81:
        __break(1u);
LABEL_82:
        unint64_t v69 = 0;
      }
    }
    goto LABEL_42;
  }
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 64, &v68, v13);
  if ((_BYTE)v70)
  {
    int v43 = v68;
    unint64_t v44 = v69;
    unint64_t v45 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v68;
    if (v45 < (unint64_t)v68)
    {
      unint64_t v48 = 0;
      unint64_t v47 = v69;
    }
    else
    {
      unint64_t v47 = 0;
      if (v46 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v48 = 0;
        if (v46 + 2 <= v69)
        {
          *(_WORD *)((char *)v68 + v46) = 2871;
          unint64_t v47 = v44;
          unint64_t v48 = v46 + 2;
        }
      }
    }
    int v49 = (char *)(((unint64_t)v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v43 + v48)
    {
      unint64_t v48 = v49 - (char *)v43 + 8;
      if ((unint64_t)(v49 - (char *)v43) > 0xFFFFFFFFFFFFFFF7 || v48 > v47) {
        goto LABEL_42;
      }
      *(void *)int v49 = v11;
    }
    if (v47)
    {
      unint64_t v51 = (*(void *)(v10 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v52 = *(void *)(v10 + 64);
      if (v51 + 16 >= v52) {
        unint64_t v51 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v53 = v51 + v48;
      if (v52 <= v53) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = v53;
      }
      *(void *)(v10 + 80) = v54;
      unint64_t v55 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v10 + 72) + 16) + 128), v54);
      int v56 = *(_DWORD *)(v10 + 116);
      if (v55 == 0x80000000 || v56 != 0)
      {
        unsigned int v58 = v56 + 1;
        *(_DWORD *)(v10 + 116) = v58;
        if (v58 >= *(_DWORD *)(v10 + 112))
        {
          if (*(unsigned char *)(v10 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v10 + 92));
          }
          *(_DWORD *)(v10 + 116) = 0;
        }
      }
      *(void *)(v10 + 56) = v11;
      goto LABEL_6;
    }
  }
LABEL_42:
  uint64_t v36 = 0;
LABEL_46:
  *a3 = v36;
  if (v63)
  {
    uint64_t result = v60[0];
    v60[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createTexture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, v58);
  if (v59)
  {
    double v9 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    unsigned __int8 v57 = v9;
    if (!v59) {
      goto LABEL_80;
    }
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
    uint64_t v5 = *(void *)(a1 + 48);
    double v10 = *(double *)(v3 + 120);
    double v11 = INFINITY;
    if (fabs(v10) != INFINITY)
    {
      WTF::ApproximateTime::now(v9);
      double v11 = v10 + v12;
    }
    if (*(void *)(v3 + 56) != v5)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v64, v11);
      if (!(_BYTE)v66) {
        goto LABEL_43;
      }
      unint64_t v41 = v64;
      unint64_t v42 = v65;
      unint64_t v43 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v44 = v43 - v64;
      if (v43 < v64)
      {
        unint64_t v46 = 0;
        unint64_t v45 = v65;
      }
      else
      {
        unint64_t v45 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v46 = 0;
        }
        else
        {
          unint64_t v46 = 0;
          if (v44 + 2 <= v65)
          {
            *(_WORD *)(v64 + v44) = 2871;
            unint64_t v45 = v42;
            unint64_t v46 = v44 + 2;
          }
        }
      }
      unint64_t v47 = (void *)((v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v47 >= v41 + v46)
      {
        unint64_t v48 = (char *)v47 - v41;
        if ((unint64_t)v47 - v41 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_43;
        }
        unint64_t v46 = (unint64_t)(v48 + 8);
        if ((unint64_t)(v48 + 8) > v45) {
          goto LABEL_43;
        }
        void *v47 = v5;
      }
      if (!v45)
      {
LABEL_43:
        a1 = 0;
LABEL_51:
        *a3 = a1;
        return std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v8);
      }
      unint64_t v49 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v50 = *(void *)(v3 + 64);
      if (v49 + 16 >= v50) {
        unint64_t v49 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v51 = v49 + v46;
      if (v50 <= v51) {
        unint64_t v52 = 0;
      }
      else {
        unint64_t v52 = v51;
      }
      *(void *)(v3 + 80) = v52;
      unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v52);
      int v54 = *(_DWORD *)(v3 + 116);
      if (v53 == 0x80000000 || v54 != 0)
      {
        unsigned int v56 = v54 + 1;
        *(_DWORD *)(v3 + 116) = v56;
        if (v56 >= *(_DWORD *)(v3 + 112))
        {
          if (*(unsigned char *)(v3 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
          }
          *(_DWORD *)(v3 + 116) = 0;
        }
      }
      *(void *)(v3 + 56) = v5;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v61, v11);
    if (!v63) {
      goto LABEL_43;
    }
    unint64_t v64 = v61;
    unint64_t v65 = v62;
    unint64_t v66 = 0;
    unint64_t v13 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v14 = v13 >= v61;
    unint64_t v15 = v13 - v61;
    if (v14)
    {
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v62)
      {
        unint64_t v65 = 0;
      }
      else
      {
        *(_WORD *)(v61 + v15) = 805;
        unint64_t v66 = v15 + 2;
      }
    }
    IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::encode((uint64_t *)&v64, (uint64_t)v58);
    unint64_t v16 = v66;
    unint64_t v17 = (void *)((v64 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v64 + v66)
    {
      BOOL v18 = (char *)v17 - v64;
      if ((unint64_t)v17 - v64 > 0xFFFFFFFFFFFFFFF7
        || (unint64_t v16 = (unint64_t)(v18 + 8), (unint64_t)(v18 + 8) > v65))
      {
LABEL_29:
        if (!v63) {
          goto LABEL_80;
        }
        unint64_t v22 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v23 = v22 - v61;
        if (v22 < v61)
        {
          unint64_t v24 = 0;
        }
        else
        {
          unint64_t v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v62)
          {
            *(_WORD *)(v61 + v23) = 2870;
            unint64_t v24 = v23 + 2;
          }
        }
        unint64_t v25 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v26 = *(void *)(v3 + 64);
        if (v25 + 16 >= v26) {
          unint64_t v25 = 0;
        }
        if (v24 <= 0x10) {
          unint64_t v24 = 16;
        }
        unint64_t v27 = v25 + v24;
        if (v26 <= v27) {
          unint64_t v27 = 0;
        }
        *(void *)(v3 + 80) = v27;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v27);
        *(_DWORD *)(v3 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(v3 + 8));
        unint64_t v28 = v60;
        unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v29 = 805;
        *((void *)v29 + 1) = v5;
        *((void *)v29 + 66) = (char *)v29 + 16;
        *((void *)v29 + 67) = 512;
        *((void *)v29 + 68) = 0;
        *((void *)v29 + 70) = 0;
        *((void *)v29 + 69) = 0;
        IPC::Encoder::encodeHeader(v29);
        unint64_t v64 = (unint64_t)v29;
        IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::encode(v29, (uint64_t)v58);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, (uint64_t *)&v57);
        int v31 = IPC::Connection::sendMessageImpl((uint64_t)v28, (uint64_t *)&v64, 1, 0);
        unint64_t v32 = (IPC::Encoder *)v64;
        unint64_t v64 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v30);
          WTF::fastFree(v39, v40);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
        if (!v31)
        {
LABEL_44:
          uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 72);
          double v4 = (unsigned int *)(v3 + 28);
          LODWORD(v5) = 1;
          atomic_fetch_add((atomic_uint *volatile)(v3 + 28), 1u);
          uint64_t v33 = *(void *)(a1 + 64);
          uint64_t v34 = (uint64_t)v57;
          a1 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(a1 + 8) = 1;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          *(void *)a1 = &unk_1EE9EB7A0;
          *(void *)(a1 + 32) = v34;
          ++*(_DWORD *)(v33 + 8);
          *(void *)(a1 + 40) = v33;
          atomic_fetch_add((atomic_uint *volatile)(v3 + 28), 1u);
          *(void *)(a1 + 48) = v3;
          if (atomic_fetch_add((atomic_uint *volatile)(v3 + 28), 0xFFFFFFFF) == 1) {
            goto LABEL_81;
          }
          while (!v59)
          {
LABEL_80:
            __break(1u);
LABEL_81:
            atomic_store(v5, v4);
            (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
          }
          uint64_t v36 = *(WTF::StringImpl **)(a1 + 24);
          uint64_t v37 = v58[0];
          v58[0] = 0;
          *(void *)(a1 + 24) = v37;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v35);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a1 + 24);
          goto LABEL_51;
        }
        goto LABEL_43;
      }
      *unint64_t v17 = v57;
      unint64_t v66 = (unint64_t)(v18 + 8);
    }
    if (v65)
    {
      unint64_t v19 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v3 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v21 = 0;
      }
      *(void *)(v3 + 80) = v21;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v21) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
    goto LABEL_29;
  }
  *a3 = 0;
  return std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v8);
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createSampler@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v5 += 2;
  }
  __int16 v6 = *(_WORD *)(a2 + 12);
  int v7 = *(_DWORD *)(a2 + 24);
  unsigned int v58 = v5;
  int v59 = *(_DWORD *)(a2 + 8);
  __int16 v60 = v6;
  uint64_t v61 = *(void *)(a2 + 16);
  int v62 = v7;
  char v63 = 1;
  char v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned __int8 v57 = v8;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v10 = *(void *)(a1 + 48);
  double v11 = *(double *)(v9 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v12 = v11 + v13;
  }
  if (*(void *)(v9 + 56) == v10)
  {
LABEL_6:
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v65, v12);
    if (v67)
    {
      unint64_t v68 = v65;
      unint64_t v69 = v66;
      unint64_t v70 = 0;
      unint64_t v16 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v17 = v16 >= (unint64_t)v65;
      unint64_t v18 = v16 - (void)v65;
      if (v17)
      {
        if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v66) {
          goto LABEL_79;
        }
        *(_WORD *)((char *)v65 + v18) = 803;
        unint64_t v70 = v18 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(&v68, (uint64_t)&v58);
        unint64_t v19 = v70;
        unint64_t v20 = (char *)(((unint64_t)v68 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v20 >= (char *)v68 + v70)
        {
          int64_t v21 = v20 - (char *)v68;
          if ((unint64_t)(v20 - (char *)v68) > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_28;
          }
          unint64_t v19 = v21 + 8;
          if (v21 + 8 > v69) {
            goto LABEL_28;
          }
          *(void *)unint64_t v20 = v57;
          unint64_t v70 = v21 + 8;
        }
        if (v69)
        {
          unint64_t v22 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v23 = *(void *)(v9 + 64);
          if (v22 + 16 >= v23) {
            unint64_t v22 = 0;
          }
          if (v19 <= 0x10) {
            unint64_t v19 = 16;
          }
          unint64_t v24 = v22 + v19;
          if (v23 <= v24) {
            unint64_t v24 = 0;
          }
          *(void *)(v9 + 80) = v24;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v24) == 0x80000000
            || *(_DWORD *)(v9 + 116))
          {
            if (*(unsigned char *)(v9 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
            }
            *(_DWORD *)(v9 + 116) = 0;
          }
          goto LABEL_43;
        }
LABEL_28:
        if (!v67) {
          goto LABEL_78;
        }
        unint64_t v25 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v26 = v25 - (void)v65;
        if (v25 < (unint64_t)v65)
        {
          unint64_t v27 = 0;
        }
        else
        {
          unint64_t v27 = 0;
          if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v66)
          {
            *(_WORD *)((char *)v65 + v26) = 2870;
            unint64_t v27 = v26 + 2;
          }
        }
        unint64_t v28 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v29 = *(void *)(v9 + 64);
        if (v28 + 16 >= v29) {
          unint64_t v28 = 0;
        }
        if (v27 <= 0x10) {
          unint64_t v27 = 16;
        }
        unint64_t v30 = v28 + v27;
        if (v29 <= v30) {
          unint64_t v30 = 0;
        }
        *(void *)(v9 + 80) = v30;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v30);
        *(_DWORD *)(v9 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(v9 + 8));
        int v31 = v64;
        unint64_t v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v32 = 803;
        *((void *)v32 + 1) = v10;
        *((void *)v32 + 66) = (char *)v32 + 16;
        *((void *)v32 + 67) = 512;
        *((void *)v32 + 68) = 0;
        *((void *)v32 + 70) = 0;
        *((void *)v32 + 69) = 0;
        IPC::Encoder::encodeHeader(v32);
        unint64_t v68 = v32;
        IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(v32, (uint64_t)&v58);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v32, (uint64_t *)&v57);
        uint64_t v9 = IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v68, 1, 0);
        uint64_t v34 = v68;
        unint64_t v68 = 0;
        if (v34)
        {
          IPC::Encoder::~Encoder(v34, v33);
          WTF::fastFree(v39, v40);
        }
        uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
        if (v9) {
          goto LABEL_42;
        }
LABEL_43:
        uint64_t v36 = *(void *)(a1 + 64);
        uint64_t v10 = (uint64_t)v57;
        uint64_t v37 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v37 + 8) = 1;
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        *(void *)uint64_t v37 = &unk_1EE9EB748;
        *(void *)(v37 + 32) = v10;
        ++*(_DWORD *)(v36 + 8);
        *(void *)(v37 + 40) = v36;
        ++*(_DWORD *)(a1 + 8);
        *(void *)(v37 + 48) = a1;
        if (v63)
        {
          uint64_t v35 = v37;
          char v38 = v58;
          unsigned int v58 = 0;
          *(void *)(v37 + 24) = v38;
          uint64_t result = (WTF::StringImpl *)off_1EE9EB758((WebKit::WebGPU::RemoteSamplerProxy *)v37, (const WTF::String *)(v37 + 24));
          goto LABEL_45;
        }
LABEL_78:
        __break(1u);
LABEL_79:
        unint64_t v69 = 0;
      }
    }
    goto LABEL_42;
  }
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v68, v12);
  if ((_BYTE)v70)
  {
    unint64_t v41 = v68;
    unint64_t v42 = v69;
    unint64_t v43 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = v43 - (void)v68;
    if (v43 < (unint64_t)v68)
    {
      unint64_t v46 = 0;
      unint64_t v45 = v69;
    }
    else
    {
      unint64_t v45 = 0;
      if (v44 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v46 = 0;
        if (v44 + 2 <= v69)
        {
          *(_WORD *)((char *)v68 + v44) = 2871;
          unint64_t v45 = v42;
          unint64_t v46 = v44 + 2;
        }
      }
    }
    unint64_t v47 = (char *)(((unint64_t)v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v47 >= (char *)v41 + v46)
    {
      int64_t v48 = v47 - (char *)v41;
      if ((unint64_t)(v47 - (char *)v41) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_42;
      }
      unint64_t v46 = v48 + 8;
      if (v48 + 8 > v45) {
        goto LABEL_42;
      }
      *(void *)unint64_t v47 = v10;
    }
    if (v45)
    {
      unint64_t v49 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v50 = *(void *)(v9 + 64);
      if (v49 + 16 >= v50) {
        unint64_t v49 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v51 = v49 + v46;
      if (v50 <= v51) {
        unint64_t v52 = 0;
      }
      else {
        unint64_t v52 = v51;
      }
      *(void *)(v9 + 80) = v52;
      unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v52);
      int v54 = *(_DWORD *)(v9 + 116);
      if (v53 == 0x80000000 || v54 != 0)
      {
        unsigned int v56 = v54 + 1;
        *(_DWORD *)(v9 + 116) = v56;
        if (v56 >= *(_DWORD *)(v9 + 112))
        {
          if (*(unsigned char *)(v9 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
          }
          *(_DWORD *)(v9 + 116) = 0;
        }
      }
      *(void *)(v9 + 56) = v10;
      goto LABEL_6;
    }
  }
LABEL_42:
  uint64_t v35 = 0;
LABEL_45:
  *a3 = v35;
  if (v63)
  {
    uint64_t result = v58;
    unsigned int v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::importExternalTexture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v60 = WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  __int16 v6 = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v52);
  if (!v59) {
    goto LABEL_38;
  }
  if (v53) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(_DWORD *)(a2 + 32) == 1;
  }
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v10 = &unk_1EE9EB228;
      *(void *)(v10 + 8) = a1;
      char v63 = (IPC::Encoder *)v10;
      double v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *double v11 = (uint64_t)&unk_1EE9EB250;
      v11[1] = a1;
      int v62 = v11;
      WebKit::SharedVideoFrameWriter::write((void *)(a1 + 88), v9, (uint64_t *)&v63, &v62, (uint64_t)&v47);
      unint64_t v13 = v59;
      if (!v59) {
        goto LABEL_69;
      }
      if (v58 == v51)
      {
        if (!v58) {
          goto LABEL_21;
        }
        *(void *)&long long v54 = v47;
        *(void *)((char *)&v54 + 5) = *(void *)((char *)&v47 + 5);
        int v55 = v48;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v56, (uint64_t)v49);
      }
      else if (v58)
      {
        if (v57 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9EAF88[v57])(&v61, v56);
        }
        int v57 = -1;
        char v58 = 0;
      }
      else
      {
        long long v54 = v47;
        int v55 = v48;
        v56[0] = 0;
        int v57 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v56, (uint64_t)v49);
        char v58 = 1;
      }
      if (v51)
      {
        if (v50 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9EAF88[v50])(&v61, v49);
        }
        int v50 = -1;
      }
LABEL_21:
      (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      __int16 v6 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
      unint64_t v13 = v59;
      if (!v59) {
        goto LABEL_69;
      }
    }
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v9 = *(void *)(a1 + 48);
  double v14 = *(double *)(v10 + 120);
  double v15 = INFINITY;
  if (fabs(v14) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v15 = v14 + v16;
  }
  if (*(void *)(v10 + 56) == v9)
  {
LABEL_25:
    IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 64, &v47, v15);
    if ((_BYTE)v48)
    {
      unint64_t v17 = (v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = v17 - v47;
      if (v17 < (unint64_t)v47)
      {
        unint64_t v13 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        if (v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= *((void *)&v47 + 1))
        {
          *(_WORD *)(v47 + v18) = 2870;
          unint64_t v13 = v18 + 2;
        }
      }
      unint64_t v19 = (*(void *)(v10 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v12 = *(void *)(v10 + 64);
      if (v19 + 16 >= v12) {
        goto LABEL_70;
      }
      while (1)
      {
        if (v13 <= 0x10) {
          unint64_t v13 = 16;
        }
        unint64_t v20 = v19 + v13;
        if (v12 <= v20) {
          unint64_t v20 = 0;
        }
        *(void *)(v10 + 80) = v20;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v10 + 72) + 16) + 128), v20);
        *(_DWORD *)(v10 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)(v10 + 8));
        int64_t v21 = v62;
        unint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v22 = 809;
        *((void *)v22 + 1) = v9;
        *((void *)v22 + 66) = (char *)v22 + 16;
        *((void *)v22 + 67) = 512;
        *((void *)v22 + 68) = 0;
        *((void *)v22 + 70) = 0;
        *((void *)v22 + 69) = 0;
        IPC::Encoder::encodeHeader(v22);
        char v63 = v22;
        IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::encode(v22, (uint64_t)v52);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v22, &v60);
        int v24 = IPC::Connection::sendMessageImpl((uint64_t)v21, (uint64_t *)&v63, 1, 0);
        unint64_t v25 = v63;
        char v63 = 0;
        if (v25)
        {
          IPC::Encoder::~Encoder(v25, v23);
          WTF::fastFree(v30, v31);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v62);
        if (v24) {
          break;
        }
        uint64_t v27 = *(void *)(a1 + 64);
        uint64_t v9 = v60;
        uint64_t v10 = WTF::fastMalloc((WTF *)0x30);
        uint64_t v28 = WTF::fastMalloc((WTF *)0x20);
        *(unsigned char *)uint64_t v28 = 0;
        *(_OWORD *)(v28 + 8) = xmmword_1994F5F10;
        *(void *)(v28 + 24) = v10;
        *(void *)(v10 + 16) = 0;
        *(void *)uint64_t v10 = &unk_1EE9EAB68;
        *(void *)(v10 + 8) = v28;
        *(void *)(v10 + 24) = v9;
        ++*(_DWORD *)(v27 + 8);
        *(void *)(v10 + 32) = v27;
        ++*(_DWORD *)(a1 + 8);
        *(void *)(v10 + 40) = a1;
        unint64_t v13 = v59;
        if (v59)
        {
          uint64_t v29 = v52[0];
          v52[0] = 0;
          *(void *)(v10 + 16) = v29;
          WebKit::WebGPU::RemoteExternalTextureProxy::setLabelInternal((WebKit::WebGPU::RemoteExternalTextureProxy *)v10, (const WTF::String *)(v10 + 16));
          goto LABEL_39;
        }
LABEL_69:
        __break(1u);
LABEL_70:
        unint64_t v19 = 0;
      }
    }
    goto LABEL_38;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 64, &v47, v15);
  if ((_BYTE)v48)
  {
    long long v32 = v47;
    unint64_t v33 = (v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - v47;
    if (v33 < (unint64_t)v47)
    {
      unint64_t v36 = 0;
      unint64_t v35 = *((void *)&v47 + 1);
    }
    else
    {
      unint64_t v35 = 0;
      if (v34 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v36 = 0;
      }
      else
      {
        unint64_t v36 = 0;
        if (v34 + 2 <= *((void *)&v47 + 1))
        {
          *(_WORD *)(v47 + v34) = 2871;
          unint64_t v35 = *((void *)&v32 + 1);
          unint64_t v36 = v34 + 2;
        }
      }
    }
    uint64_t v37 = (void *)((v32 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v37 >= (unint64_t)v32 + v36)
    {
      char v38 = (char *)v37 - v32;
      if ((unint64_t)((unint64_t)v37 - v32) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_38;
      }
      unint64_t v36 = (unint64_t)(v38 + 8);
      if ((unint64_t)(v38 + 8) > v35) {
        goto LABEL_38;
      }
      void *v37 = v9;
    }
    if (v35)
    {
      unint64_t v39 = (*(void *)(v10 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(v10 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v36 <= 0x10) {
        unint64_t v36 = 16;
      }
      unint64_t v41 = v39 + v36;
      if (v40 <= v41) {
        unint64_t v42 = 0;
      }
      else {
        unint64_t v42 = v41;
      }
      *(void *)(v10 + 80) = v42;
      unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v10 + 72) + 16) + 128), v42);
      int v44 = *(_DWORD *)(v10 + 116);
      if (v43 == 0x80000000 || v44 != 0)
      {
        unsigned int v46 = v44 + 1;
        *(_DWORD *)(v10 + 116) = v46;
        if (v46 >= *(_DWORD *)(v10 + 112))
        {
          if (*(unsigned char *)(v10 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v10 + 92));
          }
          *(_DWORD *)(v10 + 116) = 0;
        }
      }
      *(void *)(v10 + 56) = v9;
      goto LABEL_25;
    }
  }
LABEL_38:
  uint64_t v10 = 0;
LABEL_39:
  *a3 = v10;
  return std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, v7);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteDeviceProxy::updateExternalTexture(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (WTF::ApproximateTime *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 104))(*(void *)(a1 + 64));
  int v55 = v5;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v7 = *(void *)(a1 + 48);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v5);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) == v7) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v57, v9);
  if (!v59) {
    return result;
  }
  unint64_t v41 = v57;
  unint64_t v40 = v58;
  unint64_t v42 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - v57;
  if (v42 < v57) {
    goto LABEL_85;
  }
  unint64_t v44 = v43 + 2;
  if (v43 > 0xFFFFFFFFFFFFFFFDLL || v44 > v58)
  {
    unint64_t v40 = 0;
LABEL_85:
    unint64_t v44 = 0;
    goto LABEL_56;
  }
  *(_WORD *)(v57 + v43) = 2871;
LABEL_56:
  unsigned int v46 = (void *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v46 >= v41 + v44)
  {
    unint64_t v44 = (unint64_t)v46 - v41 + 8;
    if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
      return result;
    }
    *unsigned int v46 = v7;
  }
  if (!v40) {
    return result;
  }
  unint64_t v48 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = *(void *)(v6 + 64);
  if (v48 + 16 >= v49) {
    unint64_t v48 = 0;
  }
  if (v44 <= 0x10) {
    unint64_t v44 = 16;
  }
  unint64_t v50 = v48 + v44;
  if (v49 <= v50) {
    unint64_t v50 = 0;
  }
  *(void *)(v6 + 80) = v50;
  unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v50);
  int v52 = *(_DWORD *)(v6 + 116);
  if (v51 == 0x80000000 || v52 != 0)
  {
    unsigned int v54 = v52 + 1;
    *(_DWORD *)(v6 + 116) = v54;
    if (v54 >= *(_DWORD *)(v6 + 112))
    {
      if (*(unsigned char *)(v6 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
      }
      *(_DWORD *)(v6 + 116) = 0;
    }
  }
  *(void *)(v6 + 56) = v7;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v57, v9);
  if (!v59) {
    return result;
  }
  unint64_t v12 = v57;
  unint64_t v13 = v58;
  unint64_t v14 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v57;
  if (v14 >= v57)
  {
    unint64_t v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v58)
    {
      *(_WORD *)(v57 + v15) = 817;
      goto LABEL_11;
    }
    unint64_t v13 = 0;
  }
  unint64_t v16 = 0;
LABEL_11:
  unint64_t v18 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = v18 - (v12 + v16);
  if (v18 >= v12 + v16)
  {
    unint64_t v20 = v18 - v12;
    unint64_t v21 = v19 + v16 + 8;
    if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v13)
    {
      unint64_t v13 = 0;
    }
    else
    {
      *(void *)(v12 + v20) = v55;
      unint64_t v16 = v21;
    }
  }
  unint64_t v23 = (void *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v12 + v16)
  {
    unint64_t v16 = (unint64_t)v23 - v12 + 8;
    if ((unint64_t)v23 - v12 > 0xFFFFFFFFFFFFFFF7 || v16 > v13) {
      goto LABEL_35;
    }
    *unint64_t v23 = *a3;
  }
  if (v13)
  {
    uint64_t v25 = *(void *)(v6 + 72);
    unint64_t v26 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v27 = *(void *)(v6 + 64);
    if (v26 + 16 >= v27) {
      unint64_t v26 = 0;
    }
    if (v16 <= 0x10) {
      unint64_t v16 = 16;
    }
    unint64_t v28 = v26 + v16;
    if (v27 <= v28) {
      unint64_t v28 = 0;
    }
    *(void *)(v6 + 80) = v28;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v25 + 16) + 128), v28) == 0x80000000
      || *(_DWORD *)(v6 + 116))
    {
      if (*(unsigned char *)(v6 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
      }
      *(_DWORD *)(v6 + 116) = 0;
    }
    return result;
  }
LABEL_35:
  unint64_t v29 = v59;
  if (v59)
  {
    unint64_t v30 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v31 = v30 - v57;
    if (v30 < v57)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v29 = 0;
      if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v58)
      {
        *(_WORD *)(v57 + v31) = 2870;
        unint64_t v29 = v31 + 2;
      }
    }
    unint64_t v32 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void *)(v6 + 64);
    if (v32 + 16 < v12) {
      goto LABEL_41;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v32 = 0;
LABEL_41:
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v33 = v32 + v29;
  if (v12 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v6 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v33);
  *(_DWORD *)(v6 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(v6 + 8));
  unint64_t v34 = v56;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 817;
  *((void *)v35 + 1) = v7;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  uint64_t v60 = v35;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v35, (uint64_t *)&v55);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v35, a3);
  IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v60, 1, 0);
  uint64_t v37 = v60;
  uint64_t v60 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v38, v39);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createBindGroupLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)&v56);
  if (!v58)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v7);
  }
  double v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v55 = v8;
  if (!v58) {
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v63, v10);
    if (!(_BYTE)v65) {
      goto LABEL_43;
    }
    unint64_t v39 = v63;
    unint64_t v40 = v64;
    unint64_t v41 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - (void)v63;
    if (v41 < (unint64_t)v63)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v64;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v64)
        {
          *(_WORD *)((char *)v63 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    unint64_t v45 = (char *)(((unint64_t)v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v45 >= (char *)v39 + v44)
    {
      int64_t v46 = v45 - (char *)v39;
      if ((unint64_t)(v45 - (char *)v39) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v44 = v46 + 8;
      if (v46 + 8 > v43) {
        goto LABEL_43;
      }
      *(void *)unint64_t v45 = v4;
    }
    if (!v43)
    {
LABEL_43:
      uint64_t v32 = 0;
      goto LABEL_46;
    }
    unint64_t v47 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = *(void *)(v3 + 64);
    if (v47 + 16 >= v48) {
      unint64_t v47 = 0;
    }
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v49 = v47 + v44;
    if (v48 <= v49) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = v49;
    }
    *(void *)(v3 + 80) = v50;
    unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v50);
    int v52 = *(_DWORD *)(v3 + 116);
    if (v51 == 0x80000000 || v52 != 0)
    {
      unsigned int v54 = v52 + 1;
      *(_DWORD *)(v3 + 116) = v54;
      if (v54 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v60, v10);
  if (!v62) {
    goto LABEL_43;
  }
  char v63 = v60;
  unint64_t v64 = v61;
  unint64_t v65 = 0;
  unint64_t v12 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v60;
  unint64_t v14 = v12 - (void)v60;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v61) {
      goto LABEL_76;
    }
    *(_WORD *)((char *)v60 + v14) = 793;
    unint64_t v65 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v63, &v56);
    IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v63, (uint64_t)v57);
    unint64_t v15 = v65;
    unint64_t v16 = (char *)(((unint64_t)v63 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v63 + v65)
    {
      int64_t v17 = v16 - (char *)v63;
      if ((unint64_t)(v16 - (char *)v63) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v15 = v17 + 8;
      if (v17 + 8 > v64) {
        goto LABEL_29;
      }
      *(void *)unint64_t v16 = v55;
      unint64_t v65 = v17 + 8;
    }
    if (v64)
    {
      unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v3 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v3 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v62) {
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    unint64_t v64 = 0;
  }
  unint64_t v21 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - (void)v60;
  if (v21 < (unint64_t)v60)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v61)
    {
      *(_WORD *)((char *)v60 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v3 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v3 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v26);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v3 + 8));
  unint64_t v27 = v59;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 793;
  *((void *)v28 + 1) = v4;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  char v63 = v28;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, &v56);
  IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v28, (uint64_t)v57);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v55);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v63, 1, 0);
  unint64_t v31 = v63;
  char v63 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v37, v38);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
  if (v30) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v33 = (uint64_t)v55;
  uint64_t v34 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v34 + 8) = 1;
  *(void *)(v34 + 16) = 0;
  *(void *)(v34 + 24) = 0;
  *(void *)uint64_t v34 = &unk_1EE9EA4C8;
  *(void *)(v34 + 32) = v33;
  ++*(_DWORD *)(v3 + 8);
  *(void *)(v34 + 40) = v3;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v34 + 48) = a1;
  if (!v58) {
    goto LABEL_75;
  }
  uint64_t v32 = v34;
  uint64_t v35 = v56;
  uint64_t v56 = 0;
  *(void *)(v34 + 24) = v35;
  off_1EE9EA4D8((WebKit::WebGPU::RemoteBindGroupLayoutProxy *)v34, (const WTF::String *)(v34 + 24));
LABEL_46:
  *a3 = v32;
  return std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createPipelineLayout@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(WTF **)(a1 + 64), a2, (uint64_t)&v55);
  if (!v57)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v7);
  }
  double v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v54 = v8;
  if (!v57) {
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v10);
    if (!(_BYTE)v64) {
      goto LABEL_43;
    }
    char v38 = v62;
    unint64_t v39 = v63;
    unint64_t v40 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - (void)v62;
    if (v40 < (unint64_t)v62)
    {
      unint64_t v43 = 0;
      unint64_t v42 = v63;
    }
    else
    {
      unint64_t v42 = 0;
      if (v41 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v43 = 0;
      }
      else
      {
        unint64_t v43 = 0;
        if (v41 + 2 <= v63)
        {
          *(_WORD *)((char *)v62 + v41) = 2871;
          unint64_t v42 = v39;
          unint64_t v43 = v41 + 2;
        }
      }
    }
    unint64_t v44 = (char *)(((unint64_t)v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v44 >= (char *)v38 + v43)
    {
      int64_t v45 = v44 - (char *)v38;
      if ((unint64_t)(v44 - (char *)v38) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v43 = v45 + 8;
      if (v45 + 8 > v42) {
        goto LABEL_43;
      }
      *(void *)unint64_t v44 = v4;
    }
    if (!v42)
    {
LABEL_43:
      uint64_t v32 = 0;
      goto LABEL_46;
    }
    unint64_t v46 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(v3 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v48 = v46 + v43;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(v3 + 80) = v49;
    unint64_t v50 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v49);
    int v51 = *(_DWORD *)(v3 + 116);
    if (v50 == 0x80000000 || v51 != 0)
    {
      unsigned int v53 = v51 + 1;
      *(_DWORD *)(v3 + 116) = v53;
      if (v53 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v59, v10);
  if (!v61) {
    goto LABEL_43;
  }
  char v62 = v59;
  unint64_t v63 = v60;
  unint64_t v64 = 0;
  unint64_t v12 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v59;
  unint64_t v14 = v12 - (void)v59;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v60) {
      goto LABEL_76;
    }
    *(_WORD *)((char *)v59 + v14) = 798;
    unint64_t v64 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v62, &v55);
    IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(&v62, (uint64_t)v56);
    unint64_t v15 = v64;
    unint64_t v16 = (char *)(((unint64_t)v62 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v62 + v64)
    {
      int64_t v17 = v16 - (char *)v62;
      if ((unint64_t)(v16 - (char *)v62) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v15 = v17 + 8;
      if (v17 + 8 > v63) {
        goto LABEL_29;
      }
      *(void *)unint64_t v16 = v54;
      unint64_t v64 = v17 + 8;
    }
    if (v63)
    {
      unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v3 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v3 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v61) {
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    unint64_t v63 = 0;
  }
  unint64_t v21 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - (void)v59;
  if (v21 < (unint64_t)v59)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v60)
    {
      *(_WORD *)((char *)v59 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v3 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v3 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v26);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v3 + 8));
  unint64_t v27 = v58;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 798;
  *((void *)v28 + 1) = v4;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  char v62 = v28;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, &v55);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v28, (uint64_t)v56);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v54);
  int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v62, 1, 0);
  unint64_t v31 = v62;
  char v62 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v29);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  if (v30) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v33 = (uint64_t)v54;
  uint64_t v34 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v34 + 8) = 1;
  *(void *)(v34 + 16) = 0;
  *(void *)(v34 + 24) = 0;
  *(void *)uint64_t v34 = &unk_1EE9EAD78;
  *(void *)(v34 + 32) = v33;
  ++*(_DWORD *)(v3 + 8);
  *(void *)(v34 + 40) = v3;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v34 + 48) = a1;
  if (!v57) {
    goto LABEL_75;
  }
  uint64_t v32 = v34;
  *(void *)(v34 + 24) = v55;
  uint64_t v55 = 0;
  char v62 = (IPC::Encoder *)(v34 + 24);
  IPC::StreamClientConnection::send<Messages::RemotePipelineLayout::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80), (uint64_t **)&v62, *(void *)(v34 + 32));
LABEL_46:
  *a3 = v32;
  return std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createBindGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(void *)(a1 + 64), a2, (uint64_t)v55);
  if (!v56)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
  }
  double v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v54 = v8;
  if (!v56) {
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v61, v10);
    if (!(_BYTE)v63) {
      goto LABEL_43;
    }
    char v38 = v61;
    unint64_t v39 = v62;
    unint64_t v40 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - (void)v61;
    if (v40 < (unint64_t)v61)
    {
      unint64_t v43 = 0;
      unint64_t v42 = v62;
    }
    else
    {
      unint64_t v42 = 0;
      if (v41 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v43 = 0;
      }
      else
      {
        unint64_t v43 = 0;
        if (v41 + 2 <= v62)
        {
          *(_WORD *)((char *)v61 + v41) = 2871;
          unint64_t v42 = v39;
          unint64_t v43 = v41 + 2;
        }
      }
    }
    unint64_t v44 = (char *)(((unint64_t)v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v44 >= (char *)v38 + v43)
    {
      int64_t v45 = v44 - (char *)v38;
      if ((unint64_t)(v44 - (char *)v38) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v43 = v45 + 8;
      if (v45 + 8 > v42) {
        goto LABEL_43;
      }
      *(void *)unint64_t v44 = v4;
    }
    if (!v42)
    {
LABEL_43:
      uint64_t v31 = 0;
      goto LABEL_46;
    }
    unint64_t v46 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(v3 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v48 = v46 + v43;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(v3 + 80) = v49;
    unint64_t v50 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v49);
    int v51 = *(_DWORD *)(v3 + 116);
    if (v50 == 0x80000000 || v51 != 0)
    {
      unsigned int v53 = v51 + 1;
      *(_DWORD *)(v3 + 116) = v53;
      if (v53 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v58, v10);
  if (!v60) {
    goto LABEL_43;
  }
  char v61 = v58;
  unint64_t v62 = v59;
  unint64_t v63 = 0;
  unint64_t v12 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v58;
  unint64_t v14 = v12 - (void)v58;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v59) {
      goto LABEL_76;
    }
    *(_WORD *)((char *)v58 + v14) = 792;
    unint64_t v63 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(&v61, v55);
    unint64_t v15 = v63;
    unint64_t v16 = (char *)(((unint64_t)v61 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v61 + v63)
    {
      int64_t v17 = v16 - (char *)v61;
      if ((unint64_t)(v16 - (char *)v61) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v15 = v17 + 8;
      if (v17 + 8 > v62) {
        goto LABEL_29;
      }
      *(void *)unint64_t v16 = v54;
      unint64_t v63 = v17 + 8;
    }
    if (v62)
    {
      unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v3 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v3 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v60) {
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    unint64_t v62 = 0;
  }
  unint64_t v21 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - (void)v58;
  if (v21 < (unint64_t)v58)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v59)
    {
      *(_WORD *)((char *)v58 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v3 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v3 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v26);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v3 + 8));
  unint64_t v27 = v57;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 792;
  *((void *)v28 + 1) = v4;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  char v61 = v28;
  IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(v28, v55);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v54);
  uint64_t v3 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v61, 1, 0);
  int v30 = v61;
  char v61 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  if (v3) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v4 = (uint64_t)v54;
  uint64_t v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  *(void *)uint64_t v33 = &unk_1EE9EA4F0;
  *(void *)(v33 + 32) = v4;
  ++*(_DWORD *)(v32 + 8);
  *(void *)(v33 + 40) = v32;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v33 + 48) = a1;
  if (!v56) {
    goto LABEL_75;
  }
  uint64_t v31 = v33;
  uint64_t v34 = v55[0];
  v55[0] = 0;
  *(void *)(v33 + 24) = v34;
  off_1EE9EA508((WebKit::WebGPU::RemoteBindGroupProxy *)v33, (const WTF::String *)(v33 + 24));
LABEL_46:
  *a3 = v31;
  return std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createShaderModule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(void *)(a1 + 64), a2, (uint64_t)v55);
  if (!v56)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
  }
  double v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v54 = v8;
  if (!v56) {
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v61, v10);
    if (!(_BYTE)v63) {
      goto LABEL_43;
    }
    char v38 = v61;
    unint64_t v39 = v62;
    unint64_t v40 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - (void)v61;
    if (v40 < (unint64_t)v61)
    {
      unint64_t v43 = 0;
      unint64_t v42 = v62;
    }
    else
    {
      unint64_t v42 = 0;
      if (v41 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v43 = 0;
      }
      else
      {
        unint64_t v43 = 0;
        if (v41 + 2 <= v62)
        {
          *(_WORD *)((char *)v61 + v41) = 2871;
          unint64_t v42 = v39;
          unint64_t v43 = v41 + 2;
        }
      }
    }
    unint64_t v44 = (char *)(((unint64_t)v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v44 >= (char *)v38 + v43)
    {
      int64_t v45 = v44 - (char *)v38;
      if ((unint64_t)(v44 - (char *)v38) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v43 = v45 + 8;
      if (v45 + 8 > v42) {
        goto LABEL_43;
      }
      *(void *)unint64_t v44 = v4;
    }
    if (!v42)
    {
LABEL_43:
      uint64_t v31 = 0;
      goto LABEL_46;
    }
    unint64_t v46 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(v3 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v48 = v46 + v43;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(v3 + 80) = v49;
    unint64_t v50 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v49);
    int v51 = *(_DWORD *)(v3 + 116);
    if (v50 == 0x80000000 || v51 != 0)
    {
      unsigned int v53 = v51 + 1;
      *(_DWORD *)(v3 + 116) = v53;
      if (v53 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v58, v10);
  if (!v60) {
    goto LABEL_43;
  }
  char v61 = v58;
  unint64_t v62 = v59;
  unint64_t v63 = 0;
  unint64_t v12 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v58;
  unint64_t v14 = v12 - (void)v58;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v59) {
      goto LABEL_76;
    }
    *(_WORD *)((char *)v58 + v14) = 804;
    unint64_t v63 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::encode(&v61, v55);
    unint64_t v15 = v63;
    unint64_t v16 = (char *)(((unint64_t)v61 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v61 + v63)
    {
      int64_t v17 = v16 - (char *)v61;
      if ((unint64_t)(v16 - (char *)v61) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v15 = v17 + 8;
      if (v17 + 8 > v62) {
        goto LABEL_29;
      }
      *(void *)unint64_t v16 = v54;
      unint64_t v63 = v17 + 8;
    }
    if (v62)
    {
      unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v3 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v3 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v60) {
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    unint64_t v62 = 0;
  }
  unint64_t v21 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - (void)v58;
  if (v21 < (unint64_t)v58)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v59)
    {
      *(_WORD *)((char *)v58 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v3 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v3 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v26);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v3 + 8));
  unint64_t v27 = v57;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 804;
  *((void *)v28 + 1) = v4;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  char v61 = v28;
  IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::encode(v28, v55);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v54);
  uint64_t v3 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v61, 1, 0);
  int v30 = v61;
  char v61 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  if (v3) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v4 = (uint64_t)v54;
  uint64_t v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  *(void *)uint64_t v33 = &unk_1EE9EB770;
  *(void *)(v33 + 32) = v4;
  ++*(_DWORD *)(v32 + 8);
  *(void *)(v33 + 40) = v32;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v33 + 48) = a1;
  if (!v56) {
    goto LABEL_75;
  }
  uint64_t v31 = v33;
  uint64_t v34 = v55[0];
  v55[0] = 0;
  *(void *)(v33 + 24) = v34;
  off_1EE9EB788((WebKit::WebGPU::RemoteShaderModuleProxy *)v33, (const WTF::String *)(v33 + 24));
LABEL_46:
  *a3 = v31;
  return std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createComputePipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(void *)(a1 + 64), a2, (uint64_t)v54);
  if (!v55)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, v7);
  }
  double v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v53 = v8;
  if (!v55) {
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v60, v10);
    if (!(_BYTE)v62) {
      goto LABEL_43;
    }
    uint64_t v37 = v60;
    unint64_t v38 = v61;
    unint64_t v39 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v40 = v39 - (void)v60;
    if (v39 < (unint64_t)v60)
    {
      unint64_t v42 = 0;
      unint64_t v41 = v61;
    }
    else
    {
      unint64_t v41 = 0;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v42 = 0;
      }
      else
      {
        unint64_t v42 = 0;
        if (v40 + 2 <= v61)
        {
          *(_WORD *)((char *)v60 + v40) = 2871;
          unint64_t v41 = v38;
          unint64_t v42 = v40 + 2;
        }
      }
    }
    unint64_t v43 = (char *)(((unint64_t)v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v43 >= (char *)v37 + v42)
    {
      int64_t v44 = v43 - (char *)v37;
      if ((unint64_t)(v43 - (char *)v37) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v42 = v44 + 8;
      if (v44 + 8 > v41) {
        goto LABEL_43;
      }
      *(void *)unint64_t v43 = v4;
    }
    if (!v41)
    {
LABEL_43:
      uint64_t v31 = 0;
      goto LABEL_46;
    }
    unint64_t v45 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = *(void *)(v3 + 64);
    if (v45 + 16 >= v46) {
      unint64_t v45 = 0;
    }
    if (v42 <= 0x10) {
      unint64_t v42 = 16;
    }
    unint64_t v47 = v45 + v42;
    if (v46 <= v47) {
      unint64_t v48 = 0;
    }
    else {
      unint64_t v48 = v47;
    }
    *(void *)(v3 + 80) = v48;
    unint64_t v49 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v48);
    int v50 = *(_DWORD *)(v3 + 116);
    if (v49 == 0x80000000 || v50 != 0)
    {
      unsigned int v52 = v50 + 1;
      *(_DWORD *)(v3 + 116) = v52;
      if (v52 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v57, v10);
  if (!v59) {
    goto LABEL_43;
  }
  char v60 = v57;
  unint64_t v61 = v58;
  unint64_t v62 = 0;
  unint64_t v12 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v57;
  unint64_t v14 = v12 - (void)v57;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v58) {
      goto LABEL_76;
    }
    *(_WORD *)((char *)v57 + v14) = 796;
    unint64_t v62 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(&v60, v54);
    unint64_t v15 = v62;
    unint64_t v16 = (char *)(((unint64_t)v60 + v62 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v60 + v62)
    {
      int64_t v17 = v16 - (char *)v60;
      if ((unint64_t)(v16 - (char *)v60) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v15 = v17 + 8;
      if (v17 + 8 > v61) {
        goto LABEL_29;
      }
      *(void *)unint64_t v16 = v53;
      unint64_t v62 = v17 + 8;
    }
    if (v61)
    {
      unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v3 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v3 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v59) {
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    unint64_t v61 = 0;
  }
  unint64_t v21 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - (void)v57;
  if (v21 < (unint64_t)v57)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v58)
    {
      *(_WORD *)((char *)v57 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v3 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v3 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v26);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(v3 + 8));
  unint64_t v27 = v56;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 796;
  *((void *)v28 + 1) = v4;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  char v60 = (uint64_t *)v28;
  IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(v28, v54);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v53);
  uint64_t v3 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v60, 1, 0);
  int v30 = (IPC::Encoder *)v60;
  char v60 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v35, v36);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
  if (v3) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v4 = (uint64_t)v53;
  uint64_t v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  *(void *)uint64_t v33 = &unk_1EE9EAA58;
  *(void *)(v33 + 32) = v4;
  ++*(_DWORD *)(v32 + 8);
  *(void *)(v33 + 40) = v32;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v33 + 48) = a1;
  if (!v55) {
    goto LABEL_75;
  }
  uint64_t v31 = v33;
  *(void *)(v33 + 24) = v54[0];
  v54[0] = 0;
  char v60 = (uint64_t *)(v33 + 24);
  IPC::StreamClientConnection::send<Messages::RemoteComputePipeline::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80), &v60, *(void *)(v33 + 32));
LABEL_46:
  *a3 = v31;
  return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createRenderPipeline@<X0>(WebKit::WebGPU::ConvertToBackingContext **this@<X0>, const WebCore::WebGPU::RenderPipelineDescriptor *a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(this[8], a2, (uint64_t)v55);
  if (!v56)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
  }
  double v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v54 = v8;
  if (!v56) {
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(*((void *)this[9] + 9) + 80);
  uint64_t v4 = (uint64_t)this[6];
  double v9 = *(double *)(v3 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v10 = v9 + v11;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v61, v10);
    if (!(_BYTE)v63) {
      goto LABEL_43;
    }
    unint64_t v38 = v61;
    unint64_t v39 = v62;
    unint64_t v40 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - v61;
    if (v40 < v61)
    {
      unint64_t v43 = 0;
      unint64_t v42 = v62;
    }
    else
    {
      unint64_t v42 = 0;
      if (v41 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v43 = 0;
      }
      else
      {
        unint64_t v43 = 0;
        if (v41 + 2 <= v62)
        {
          *(_WORD *)(v61 + v41) = 2871;
          unint64_t v42 = v39;
          unint64_t v43 = v41 + 2;
        }
      }
    }
    int64_t v44 = (void *)((v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v44 >= v38 + v43)
    {
      unint64_t v45 = (char *)v44 - v38;
      if ((unint64_t)v44 - v38 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_43;
      }
      unint64_t v43 = (unint64_t)(v45 + 8);
      if ((unint64_t)(v45 + 8) > v42) {
        goto LABEL_43;
      }
      void *v44 = v4;
    }
    if (!v42)
    {
LABEL_43:
      uint64_t v31 = 0;
      goto LABEL_46;
    }
    unint64_t v46 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(v3 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v48 = v46 + v43;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(v3 + 80) = v49;
    unint64_t v50 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v49);
    int v51 = *(_DWORD *)(v3 + 116);
    if (v50 == 0x80000000 || v51 != 0)
    {
      unsigned int v53 = v51 + 1;
      *(_DWORD *)(v3 + 116) = v53;
      if (v53 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v58, v10);
  if (!v60) {
    goto LABEL_43;
  }
  unint64_t v61 = v58;
  unint64_t v62 = v59;
  unint64_t v63 = 0;
  unint64_t v12 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= v58;
  unint64_t v14 = v12 - v58;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v59) {
      goto LABEL_76;
    }
    *(_WORD *)(v58 + v14) = 801;
    unint64_t v63 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode((WTF *)&v61, (uint64_t)v55);
    unint64_t v15 = v63;
    unint64_t v16 = (void *)((v61 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v61 + v63)
    {
      int64_t v17 = (char *)v16 - v61;
      if ((unint64_t)v16 - v61 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v15 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v62) {
        goto LABEL_29;
      }
      *unint64_t v16 = v54;
      unint64_t v63 = (unint64_t)(v17 + 8);
    }
    if (v62)
    {
      unint64_t v18 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v3 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v3 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_44;
    }
LABEL_29:
    if (v60) {
      break;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    unint64_t v62 = 0;
  }
  unint64_t v21 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v58;
  if (v21 < v58)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v59)
    {
      *(_WORD *)(v58 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v3 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v3 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v26);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v3 + 8));
  unint64_t v27 = v57;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 801;
  *((void *)v28 + 1) = v4;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v61 = (unint64_t)v28;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode(v28, (uint64_t)v55);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v54);
  uint64_t v3 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v61, 1, 0);
  int v30 = (IPC::Encoder *)v61;
  unint64_t v61 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  if (v3) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v32 = this[8];
  uint64_t v4 = (uint64_t)v54;
  uint64_t v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  *(void *)uint64_t v33 = &unk_1EE9EB718;
  *(void *)(v33 + 32) = v4;
  ++*((_DWORD *)v32 + 2);
  *(void *)(v33 + 40) = v32;
  ++*((_DWORD *)this + 2);
  *(void *)(v33 + 48) = this;
  if (!v56) {
    goto LABEL_75;
  }
  uint64_t v31 = v33;
  uint64_t v34 = v55[0];
  v55[0] = 0;
  *(void *)(v33 + 24) = v34;
  off_1EE9EB730((WebKit::WebGPU::RemoteRenderPipelineProxy *)v33, (const WTF::String *)(v33 + 24));
LABEL_46:
  *a3 = v31;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v7);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(void *)(a1 + 64), a2, (uint64_t)v69);
  if (!v70)
  {
    int v79 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v30 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v30 + 16))(v30, &v79, &v76);
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    uint64_t v31 = v76;
    unint64_t v76 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v14);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    unint64_t v48 = v79;
    int v79 = 0;
    if (v48)
    {
      if (*((_DWORD *)v48 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v48 + 8))(v48);
      }
      else {
        --*((_DWORD *)v48 + 2);
      }
    }
    return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
  }
  uint64_t v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v68 = v7;
  if (!v70) {
    goto LABEL_103;
  }
  double v8 = v7;
  uint64_t v9 = *a3;
  *a3 = 0;
  ++*(_DWORD *)(v6 + 8);
  double v10 = (WTF::StringImpl *)v69[0];
  v69[0] = 0;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(v6 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(v6 + 48);
  double v11 = *(double *)(v3 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v12 = v11 + v13;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v79, v12);
    if (!(_BYTE)v81) {
      goto LABEL_58;
    }
    unsigned int v52 = v79;
    unint64_t v53 = v80;
    unint64_t v54 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v55 = v54 - (void)v79;
    if (v54 < (unint64_t)v79)
    {
      unint64_t v57 = 0;
      unint64_t v56 = v80;
    }
    else
    {
      unint64_t v56 = 0;
      if (v55 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v57 = 0;
      }
      else
      {
        unint64_t v57 = 0;
        if (v55 + 2 <= v80)
        {
          *(_WORD *)((char *)v79 + v55) = 2871;
          unint64_t v56 = v53;
          unint64_t v57 = v55 + 2;
        }
      }
    }
    unint64_t v58 = (char *)(((unint64_t)v52 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v58 >= (char *)v52 + v57)
    {
      int64_t v59 = v58 - (char *)v52;
      if ((unint64_t)(v58 - (char *)v52) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_58;
      }
      unint64_t v57 = v59 + 8;
      if (v59 + 8 > v56) {
        goto LABEL_58;
      }
      *(void *)unint64_t v58 = v4;
    }
    if (!v56) {
      goto LABEL_58;
    }
    unint64_t v60 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v61 = *(void *)(v3 + 64);
    if (v60 + 16 >= v61) {
      unint64_t v60 = 0;
    }
    if (v57 <= 0x10) {
      unint64_t v57 = 16;
    }
    unint64_t v62 = v60 + v57;
    if (v61 <= v62) {
      unint64_t v63 = 0;
    }
    else {
      unint64_t v63 = v62;
    }
    *(void *)(v3 + 80) = v63;
    unint64_t v64 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v63);
    int v65 = *(_DWORD *)(v3 + 116);
    if (v64 == 0x80000000 || v65 != 0)
    {
      unsigned int v67 = v65 + 1;
      *(_DWORD *)(v3 + 116) = v67;
      if (v67 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v76, v12);
  if (!v78) {
    goto LABEL_58;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v75, (uint64_t **)(v3 + 8));
  unint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x28);
  *unint64_t v15 = &unk_1EE9EB278;
  v15[1] = v8;
  v15[2] = v9;
  v15[3] = v6;
  v15[4] = v10;
  v74[0] = (uint64_t)v15;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v74[1] = v6;
  uint64_t v73 = v6;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v75, v74);
  if (!v78) {
    goto LABEL_103;
  }
  int v79 = v76;
  unint64_t v80 = v77;
  unint64_t v81 = 0;
  unint64_t v16 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v17 = v16 >= (unint64_t)v76;
  unint64_t v18 = v16 - (void)v76;
  if (v17)
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v77) {
      goto LABEL_104;
    }
    *(_WORD *)((char *)v76 + v18) = 797;
    unint64_t v81 = v18 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(&v79, v69);
    unint64_t v20 = v80;
    unint64_t v19 = v81;
    unint64_t v21 = v79;
    unint64_t v22 = ((unint64_t)v79 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = v22 - ((void)v79 + v81);
    if (v22 >= (unint64_t)v79 + v81)
    {
      unint64_t v24 = v22 - (void)v79;
      if (v23 + v81 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > v80)
      {
        unint64_t v20 = 0;
        unint64_t v80 = 0;
      }
      else
      {
        *(void *)((char *)v79 + v24) = v68;
        unint64_t v81 = v24 + 8;
        unint64_t v21 = v79;
        unint64_t v20 = v80;
        unint64_t v19 = v24 + 8;
      }
    }
    unint64_t v25 = (char *)(((unint64_t)v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v25 >= (char *)v21 + v19)
    {
      int64_t v26 = v25 - (char *)v21;
      if ((unint64_t)(v25 - (char *)v21) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_36;
      }
      unint64_t v19 = v26 + 8;
      if (v26 + 8 > v20) {
        goto LABEL_36;
      }
      *(void *)unint64_t v25 = v6;
      unint64_t v81 = v26 + 8;
      unint64_t v20 = v80;
    }
    if (v20)
    {
      unint64_t v27 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v28 = *(void *)(v3 + 64);
      if (v27 + 16 >= v28) {
        unint64_t v27 = 0;
      }
      if (v19 <= 0x10) {
        unint64_t v19 = 16;
      }
      unint64_t v29 = v27 + v19;
      if (v28 <= v29) {
        unint64_t v29 = 0;
      }
      *(void *)(v3 + 80) = v29;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v29) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_55;
    }
LABEL_36:
    if (v78) {
      break;
    }
LABEL_103:
    __break(1u);
LABEL_104:
    unint64_t v80 = 0;
  }
  unint64_t v32 = ((unint64_t)v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v76;
  if (v32 < (unint64_t)v76)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v77)
    {
      *(_WORD *)((char *)v76 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = *(void *)(v3 + 64);
  if (v35 + 16 >= v36) {
    unint64_t v35 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v37 = v35 + v34;
  if (v36 <= v37) {
    unint64_t v37 = 0;
  }
  *(void *)(v3 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v37);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v38 = 797;
  *((void *)v38 + 1) = v4;
  *((void *)v38 + 66) = (char *)v38 + 16;
  *((void *)v38 + 67) = 512;
  *((void *)v38 + 68) = 0;
  *((void *)v38 + 70) = 0;
  *((void *)v38 + 69) = 0;
  IPC::Encoder::encodeHeader(v38);
  int v79 = v38;
  IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(v38, v69);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, (uint64_t *)&v68);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, &v73);
  if (IPC::Connection::sendMessageImpl((uint64_t)v75, (uint64_t *)&v79, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v75, v73, &v72);
    if (v72)
    {
      unint64_t v41 = (atomic_uint *)(WTF::RunLoop::main(v40) + 8);
      atomic_fetch_add(v41, 1u);
      uint64_t v42 = v72;
      uint64_t v72 = 0;
      unint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v43 = &unk_1EE9EB2A0;
      v43[1] = v42;
      int v71 = v43;
      WTF::RunLoop::dispatch();
      int64_t v44 = v71;
      int v71 = 0;
      if (v44) {
        (*(void (**)(void *))(*v44 + 8))(v44);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v41);
      uint64_t v45 = v72;
      uint64_t v72 = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
    }
  }
  unint64_t v46 = v79;
  int v79 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v39);
    WTF::fastFree(v50, v51);
  }
LABEL_55:
  uint64_t v47 = v74[0];
  v74[0] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v75);
  uint64_t v6 = 0;
  uint64_t v9 = 0;
  double v10 = 0;
LABEL_58:
  if (!v10)
  {
LABEL_61:
    if (v6) {
      goto LABEL_64;
    }
LABEL_66:
    if (!v9) {
      return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
    }
LABEL_67:
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_61;
  }
  WTF::StringImpl::destroy(v10, v14);
  if (!v6) {
    goto LABEL_66;
  }
LABEL_64:
  if (*(_DWORD *)(v6 + 8) != 1)
  {
    --*(_DWORD *)(v6 + 8);
    goto LABEL_66;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v9) {
    goto LABEL_67;
  }
  return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(uint64_t a1, const WebCore::WebGPU::RenderPipelineDescriptor *a2, uint64_t *a3)
{
  uint64_t v6 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(WebKit::WebGPU::ConvertToBackingContext **)(a1 + 64), a2, (uint64_t)v69);
  if (!v70)
  {
    unint64_t v79 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v30 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(void *)v30 + 16))(v30, &v79, &v76);
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    uint64_t v31 = (WTF::StringImpl *)v76;
    unint64_t v76 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v14);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    unint64_t v48 = (_DWORD *)v79;
    unint64_t v79 = 0;
    if (v48)
    {
      if (v48[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v48 + 8))(v48);
      }
      else {
        --v48[2];
      }
    }
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
  }
  uint64_t v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v68 = v7;
  if (!v70) {
    goto LABEL_103;
  }
  double v8 = v7;
  uint64_t v9 = *a3;
  *a3 = 0;
  ++*(_DWORD *)(v6 + 8);
  double v10 = (WTF::StringImpl *)v69[0];
  v69[0] = 0;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(v6 + 72) + 72) + 80);
  uint64_t v4 = *(void *)(v6 + 48);
  double v11 = *(double *)(v3 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v12 = v11 + v13;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v79, v12);
    if (!(_BYTE)v81) {
      goto LABEL_58;
    }
    unint64_t v52 = v79;
    unint64_t v53 = v80;
    unint64_t v54 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v55 = v54 - v79;
    if (v54 < v79)
    {
      unint64_t v57 = 0;
      unint64_t v56 = v80;
    }
    else
    {
      unint64_t v56 = 0;
      if (v55 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v57 = 0;
      }
      else
      {
        unint64_t v57 = 0;
        if (v55 + 2 <= v80)
        {
          *(_WORD *)(v79 + v55) = 2871;
          unint64_t v56 = v53;
          unint64_t v57 = v55 + 2;
        }
      }
    }
    unint64_t v58 = (void *)((v52 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v58 >= v52 + v57)
    {
      int64_t v59 = (char *)v58 - v52;
      if ((unint64_t)v58 - v52 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_58;
      }
      unint64_t v57 = (unint64_t)(v59 + 8);
      if ((unint64_t)(v59 + 8) > v56) {
        goto LABEL_58;
      }
      *unint64_t v58 = v4;
    }
    if (!v56) {
      goto LABEL_58;
    }
    unint64_t v60 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v61 = *(void *)(v3 + 64);
    if (v60 + 16 >= v61) {
      unint64_t v60 = 0;
    }
    if (v57 <= 0x10) {
      unint64_t v57 = 16;
    }
    unint64_t v62 = v60 + v57;
    if (v61 <= v62) {
      unint64_t v63 = 0;
    }
    else {
      unint64_t v63 = v62;
    }
    *(void *)(v3 + 80) = v63;
    unint64_t v64 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v63);
    int v65 = *(_DWORD *)(v3 + 116);
    if (v64 == 0x80000000 || v65 != 0)
    {
      unsigned int v67 = v65 + 1;
      *(_DWORD *)(v3 + 116) = v67;
      if (v67 >= *(_DWORD *)(v3 + 112))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
    }
    *(void *)(v3 + 56) = v4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v76, v12);
  if (!v78) {
    goto LABEL_58;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v75, (uint64_t **)(v3 + 8));
  unint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x28);
  *unint64_t v15 = &unk_1EE9EB2C8;
  v15[1] = v8;
  v15[2] = v9;
  v15[3] = v6;
  v15[4] = v10;
  v74[0] = (uint64_t)v15;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v74[1] = v6;
  uint64_t v73 = v6;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v75, v74);
  if (!v78) {
    goto LABEL_103;
  }
  unint64_t v79 = v76;
  unint64_t v80 = v77;
  unint64_t v81 = 0;
  unint64_t v16 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v17 = v16 >= v76;
  unint64_t v18 = v16 - v76;
  if (v17)
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v77) {
      goto LABEL_104;
    }
    *(_WORD *)(v76 + v18) = 802;
    unint64_t v81 = v18 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode((WTF *)&v79, (uint64_t)v69);
    unint64_t v20 = v80;
    unint64_t v19 = v81;
    unint64_t v21 = v79;
    unint64_t v22 = (v79 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = v22 - (v79 + v81);
    if (v22 >= v79 + v81)
    {
      unint64_t v24 = v22 - v79;
      if (v23 + v81 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > v80)
      {
        unint64_t v20 = 0;
        unint64_t v80 = 0;
      }
      else
      {
        *(void *)(v79 + v24) = v68;
        unint64_t v81 = v24 + 8;
        unint64_t v21 = v79;
        unint64_t v20 = v80;
        unint64_t v19 = v24 + 8;
      }
    }
    unint64_t v25 = (void *)((v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v25 >= v21 + v19)
    {
      int64_t v26 = (char *)v25 - v21;
      if ((unint64_t)v25 - v21 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_36;
      }
      unint64_t v19 = (unint64_t)(v26 + 8);
      if ((unint64_t)(v26 + 8) > v20) {
        goto LABEL_36;
      }
      void *v25 = v6;
      unint64_t v81 = (unint64_t)(v26 + 8);
      unint64_t v20 = v80;
    }
    if (v20)
    {
      unint64_t v27 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v28 = *(void *)(v3 + 64);
      if (v27 + 16 >= v28) {
        unint64_t v27 = 0;
      }
      if (v19 <= 0x10) {
        unint64_t v19 = 16;
      }
      unint64_t v29 = v27 + v19;
      if (v28 <= v29) {
        unint64_t v29 = 0;
      }
      *(void *)(v3 + 80) = v29;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v29) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_55;
    }
LABEL_36:
    if (v78) {
      break;
    }
LABEL_103:
    __break(1u);
LABEL_104:
    unint64_t v80 = 0;
  }
  unint64_t v32 = (v76 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v76;
  if (v32 < v76)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v77)
    {
      *(_WORD *)(v76 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = *(void *)(v3 + 64);
  if (v35 + 16 >= v36) {
    unint64_t v35 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v37 = v35 + v34;
  if (v36 <= v37) {
    unint64_t v37 = 0;
  }
  *(void *)(v3 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v37);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v38 = 802;
  *((void *)v38 + 1) = v4;
  *((void *)v38 + 66) = (char *)v38 + 16;
  *((void *)v38 + 67) = 512;
  *((void *)v38 + 68) = 0;
  *((void *)v38 + 70) = 0;
  *((void *)v38 + 69) = 0;
  IPC::Encoder::encodeHeader(v38);
  unint64_t v79 = (unint64_t)v38;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode(v38, (uint64_t)v69);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, (uint64_t *)&v68);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, &v73);
  if (IPC::Connection::sendMessageImpl((uint64_t)v75, (uint64_t *)&v79, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v75, v73, &v72);
    if (v72)
    {
      unint64_t v41 = (atomic_uint *)(WTF::RunLoop::main(v40) + 8);
      atomic_fetch_add(v41, 1u);
      uint64_t v42 = v72;
      uint64_t v72 = 0;
      unint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v43 = &unk_1EE9EB2F0;
      v43[1] = v42;
      int v71 = v43;
      WTF::RunLoop::dispatch();
      int64_t v44 = v71;
      int v71 = 0;
      if (v44) {
        (*(void (**)(void *))(*v44 + 8))(v44);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v41);
      uint64_t v45 = v72;
      uint64_t v72 = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
    }
  }
  unint64_t v46 = (IPC::Encoder *)v79;
  unint64_t v79 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v39);
    WTF::fastFree(v50, v51);
  }
LABEL_55:
  uint64_t v47 = v74[0];
  v74[0] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v75);
  uint64_t v6 = 0;
  uint64_t v9 = 0;
  double v10 = 0;
LABEL_58:
  if (!v10)
  {
LABEL_61:
    if (v6) {
      goto LABEL_64;
    }
LABEL_66:
    if (!v9) {
      return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
    }
LABEL_67:
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_61;
  }
  WTF::StringImpl::destroy(v10, v14);
  if (!v6) {
    goto LABEL_66;
  }
LABEL_64:
  if (*(_DWORD *)(v6 + 8) != 1)
  {
    --*(_DWORD *)(v6 + 8);
    goto LABEL_66;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v9) {
    goto LABEL_67;
  }
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v14);
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createCommandEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  LOBYTE(v58) = 0;
  unsigned __int8 v59 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v5 += 2;
    }
    unint64_t v58 = v5;
    unsigned __int8 v59 = 1;
  }
  uint64_t v6 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v57 = v6;
  uint64_t v7 = *(uint64_t **)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v8 = *(void *)(a1 + 48);
  double v9 = *((double *)v7 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v10 = v9 + v11;
  }
  if (v7[7] == v8)
  {
LABEL_8:
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 8), &v61, v10);
    if (v63)
    {
      unint64_t v14 = v61;
      unint64_t v15 = v62;
      unint64_t v64 = v61;
      unint64_t v65 = v62;
      unint64_t v66 = 0;
      unint64_t v16 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = v16 - (void)v61;
      if (v16 < (unint64_t)v61) {
        goto LABEL_105;
      }
      unint64_t v18 = v17 + 2;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL || v18 > v62) {
        goto LABEL_97;
      }
      *(_WORD *)((char *)v61 + v17) = 795;
      unint64_t v66 = v17 + 2;
      while (1)
      {
        if (v59)
        {
          if (v18 >= v15)
          {
            unint64_t v65 = 0;
          }
          else
          {
            *((unsigned char *)v14 + v18) = 1;
            unint64_t v66 = v18 + 1;
            if (!v59) {
              goto LABEL_104;
            }
          }
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v64, (uint64_t *)&v58);
          unint64_t v15 = v65;
          unint64_t v18 = v66;
          unint64_t v14 = v64;
        }
        else if (v18 >= v15)
        {
          unint64_t v15 = 0;
          unint64_t v65 = 0;
        }
        else
        {
          *((unsigned char *)v14 + v18++) = 0;
          unint64_t v66 = v18;
        }
        unint64_t v20 = (char *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v20 < (char *)v14 + v18) {
          goto LABEL_25;
        }
        int64_t v21 = v20 - (char *)v14;
        if ((unint64_t)(v20 - (char *)v14) <= 0xFFFFFFFFFFFFFFF7)
        {
          unint64_t v18 = v21 + 8;
          if (v21 + 8 <= v15) {
            break;
          }
        }
LABEL_37:
        if (!v63) {
          goto LABEL_96;
        }
        unint64_t v25 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v26 = v25 - (void)v61;
        if (v25 < (unint64_t)v61)
        {
          unint64_t v27 = 0;
        }
        else
        {
          unint64_t v27 = 0;
          if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v62)
          {
            *(_WORD *)((char *)v61 + v26) = 2870;
            unint64_t v27 = v26 + 2;
          }
        }
        unint64_t v28 = (v7[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v29 = v7[8];
        if (v28 + 16 >= v29) {
          unint64_t v28 = 0;
        }
        if (v27 <= 0x10) {
          unint64_t v27 = 16;
        }
        unint64_t v30 = v28 + v27;
        if (v29 <= v30) {
          unint64_t v30 = 0;
        }
        v7[10] = v30;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(v7[9] + 16) + 128), v30);
        *((_DWORD *)v7 + 29) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)v7 + 1);
        uint64_t v7 = v60;
        uint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v31 = 795;
        *((void *)v31 + 1) = v8;
        *((void *)v31 + 66) = (char *)v31 + 16;
        *((void *)v31 + 67) = 512;
        *((void *)v31 + 68) = 0;
        *((void *)v31 + 70) = 0;
        *((void *)v31 + 69) = 0;
        IPC::Encoder::encodeHeader(v31);
        unint64_t v64 = v31;
        uint64_t v8 = v59;
        unint64_t v32 = (unsigned char *)IPC::Encoder::grow(v31, 1uLL, 1);
        if (v8)
        {
          if (!v33)
          {
            __break(0xC471u);
            JUMPOUT(0x1990D0430);
          }
          unsigned char *v32 = 1;
          if (v59)
          {
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, (uint64_t *)&v58);
            goto LABEL_54;
          }
LABEL_104:
          std::__throw_bad_optional_access[abi:sn180100]();
LABEL_105:
          unint64_t v18 = 0;
        }
        else
        {
          if (!v33)
          {
            __break(0xC471u);
            JUMPOUT(0x1990D045CLL);
          }
          unsigned char *v32 = 0;
LABEL_54:
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v31, (uint64_t *)&v57);
          uint64_t v7 = (uint64_t *)IPC::Connection::sendMessageImpl((uint64_t)v7, (uint64_t *)&v64, 1, 0);
          unint64_t v35 = v64;
          unint64_t v64 = 0;
          if (v35)
          {
            IPC::Encoder::~Encoder(v35, v34);
            WTF::fastFree(v40, v41);
          }
          uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
          if (v7) {
            goto LABEL_57;
          }
LABEL_58:
          uint64_t v37 = *(void *)(a1 + 64);
          uint64_t v8 = (uint64_t)v57;
          uint64_t v38 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v38 + 8) = 1;
          *(void *)(v38 + 16) = 0;
          *(void *)(v38 + 24) = 0;
          *(void *)uint64_t v38 = &unk_1EE9EA5A0;
          *(void *)(v38 + 32) = v8;
          ++*(_DWORD *)(v37 + 8);
          *(void *)(v38 + 40) = v37;
          ++*(_DWORD *)(a1 + 8);
          *(void *)(v38 + 48) = a1;
          if (v59)
          {
            uint64_t v36 = v38;
            unint64_t v39 = v58;
            unint64_t v58 = 0;
            *(void *)(v38 + 24) = v39;
            uint64_t result = (WTF::StringImpl *)off_1EE9EA618((WebKit::WebGPU::RemoteCommandEncoderProxy *)v38, (const WTF::String *)(v38 + 24));
            goto LABEL_60;
          }
LABEL_96:
          __break(1u);
LABEL_97:
          unint64_t v15 = 0;
          unint64_t v18 = 0;
          unint64_t v65 = 0;
        }
      }
      *(void *)unint64_t v20 = v57;
      unint64_t v66 = v21 + 8;
      unint64_t v15 = v65;
LABEL_25:
      if (v15)
      {
        unint64_t v22 = (v7[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v23 = v7[8];
        if (v22 + 16 >= v23) {
          unint64_t v22 = 0;
        }
        if (v18 <= 0x10) {
          unint64_t v18 = 16;
        }
        unint64_t v24 = v22 + v18;
        if (v23 <= v24) {
          unint64_t v24 = 0;
        }
        v7[10] = v24;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v7[9] + 16) + 128), v24) == 0x80000000
          || *((_DWORD *)v7 + 29))
        {
          if (*((unsigned char *)v7 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
          }
          *((_DWORD *)v7 + 29) = 0;
        }
        goto LABEL_58;
      }
      goto LABEL_37;
    }
    goto LABEL_57;
  }
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 8), &v64, v10);
  if (!(_BYTE)v66) {
    goto LABEL_57;
  }
  unint64_t v43 = v64;
  unint64_t v42 = v65;
  unint64_t v44 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = v44 - (void)v64;
  if (v44 >= (unint64_t)v64)
  {
    unint64_t v46 = v45 + 2;
    if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= v65)
    {
      *(_WORD *)((char *)v64 + v45) = 2871;
      goto LABEL_73;
    }
    unint64_t v42 = 0;
  }
  unint64_t v46 = 0;
LABEL_73:
  unint64_t v48 = (char *)(((unint64_t)v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v48 >= (char *)v43 + v46)
  {
    unint64_t v46 = v48 - (char *)v43 + 8;
    if ((unint64_t)(v48 - (char *)v43) > 0xFFFFFFFFFFFFFFF7 || v46 > v42) {
      goto LABEL_57;
    }
    *(void *)unint64_t v48 = v8;
  }
  if (v42)
  {
    unint64_t v50 = (v7[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v7[8];
    if (v50 + 16 >= v51) {
      unint64_t v50 = 0;
    }
    if (v46 <= 0x10) {
      unint64_t v46 = 16;
    }
    unint64_t v52 = v50 + v46;
    if (v51 <= v52) {
      unint64_t v52 = 0;
    }
    v7[10] = v52;
    unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v7[9] + 16) + 128), v52);
    int v54 = *((_DWORD *)v7 + 29);
    if (v53 == 0x80000000 || v54 != 0)
    {
      unsigned int v56 = v54 + 1;
      *((_DWORD *)v7 + 29) = v56;
      if (v56 >= *((_DWORD *)v7 + 28))
      {
        if (*((unsigned char *)v7 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
        }
        *((_DWORD *)v7 + 29) = 0;
      }
    }
    v7[7] = v8;
    goto LABEL_8;
  }
LABEL_57:
  uint64_t v36 = 0;
LABEL_60:
  *a3 = v36;
  if (v59)
  {
    uint64_t result = v58;
    unint64_t v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::createRenderBundleEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v55);
  if (!v56)
  {
    *a3 = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v5);
  }
  uint64_t v6 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v54 = v6;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v8 = *(void *)(a1 + 48);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v61, v10);
    if (!(_BYTE)v63) {
      goto LABEL_42;
    }
    uint64_t v38 = v61;
    unint64_t v39 = v62;
    unint64_t v40 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - (void)v61;
    if (v40 < (unint64_t)v61)
    {
      unint64_t v43 = 0;
      unint64_t v42 = v62;
    }
    else
    {
      unint64_t v42 = 0;
      if (v41 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v43 = 0;
      }
      else
      {
        unint64_t v43 = 0;
        if (v41 + 2 <= v62)
        {
          *(_WORD *)((char *)v61 + v41) = 2871;
          unint64_t v42 = v39;
          unint64_t v43 = v41 + 2;
        }
      }
    }
    unint64_t v44 = (char *)(((unint64_t)v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v44 >= (char *)v38 + v43)
    {
      unint64_t v43 = v44 - (char *)v38 + 8;
      if ((unint64_t)(v44 - (char *)v38) > 0xFFFFFFFFFFFFFFF7 || v43 > v42) {
        goto LABEL_42;
      }
      *(void *)unint64_t v44 = v8;
    }
    if (!v42)
    {
LABEL_42:
      uint64_t v31 = 0;
      goto LABEL_45;
    }
    unint64_t v46 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(v7 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v48 = v46 + v43;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(v7 + 80) = v49;
    unint64_t v50 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v49);
    int v51 = *(_DWORD *)(v7 + 116);
    if (v50 == 0x80000000 || v51 != 0)
    {
      unsigned int v53 = v51 + 1;
      *(_DWORD *)(v7 + 116) = v53;
      if (v53 >= *(_DWORD *)(v7 + 112))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
    }
    *(void *)(v7 + 56) = v8;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v58, v10);
  if (!v60) {
    goto LABEL_42;
  }
  unint64_t v61 = v58;
  unint64_t v62 = v59;
  unint64_t v63 = 0;
  unint64_t v12 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v58;
  unint64_t v14 = v12 - (void)v58;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v59) {
      goto LABEL_77;
    }
    *(_WORD *)((char *)v58 + v14) = 800;
    unint64_t v63 = v14 + 2;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(&v61, (uint64_t)v55);
    unint64_t v15 = v63;
    unint64_t v16 = (char *)(((unint64_t)v61 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= (char *)v61 + v63)
    {
      int64_t v17 = v16 - (char *)v61;
      if ((unint64_t)(v16 - (char *)v61) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_28;
      }
      unint64_t v15 = v17 + 8;
      if (v17 + 8 > v62) {
        goto LABEL_28;
      }
      *(void *)unint64_t v16 = v54;
      unint64_t v63 = v17 + 8;
    }
    if (v62)
    {
      unint64_t v18 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v19 = *(void *)(v7 + 64);
      if (v18 + 16 >= v19) {
        unint64_t v18 = 0;
      }
      if (v15 <= 0x10) {
        unint64_t v15 = 16;
      }
      unint64_t v20 = v18 + v15;
      if (v19 <= v20) {
        unint64_t v20 = 0;
      }
      *(void *)(v7 + 80) = v20;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v20) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      goto LABEL_43;
    }
LABEL_28:
    if (v60) {
      break;
    }
LABEL_76:
    __break(1u);
LABEL_77:
    unint64_t v62 = 0;
  }
  unint64_t v21 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - (void)v58;
  if (v21 < (unint64_t)v58)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v59)
    {
      *(_WORD *)((char *)v58 + v22) = 2870;
      unint64_t v23 = v22 + 2;
    }
  }
  unint64_t v24 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v25 = *(void *)(v7 + 64);
  if (v24 + 16 >= v25) {
    unint64_t v24 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v26 = v24 + v23;
  if (v25 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(v7 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v26);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v7 + 8));
  unint64_t v27 = v57;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 800;
  *((void *)v28 + 1) = v8;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v61 = v28;
  IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(v28, (uint64_t)v55);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v54);
  uint64_t v7 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v61, 1, 0);
  unint64_t v30 = v61;
  unint64_t v61 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  if (v7) {
    goto LABEL_42;
  }
LABEL_43:
  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v8 = (uint64_t)v54;
  uint64_t v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  *(void *)uint64_t v33 = &unk_1EE9EB598;
  *(void *)(v33 + 32) = v8;
  ++*(_DWORD *)(v32 + 8);
  *(void *)(v33 + 40) = v32;
  ++*(_DWORD *)(a1 + 8);
  *(void *)(v33 + 48) = a1;
  if (!v56) {
    goto LABEL_76;
  }
  uint64_t v31 = v33;
  uint64_t v34 = v55[0];
  v55[0] = 0;
  *(void *)(v33 + 24) = v34;
  off_1EE9EB610((WebKit::WebGPU::RemoteRenderBundleEncoderProxy *)v33, (const WTF::String *)(v33 + 24));
LABEL_45:
  *a3 = v31;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v5);
}

WTF::StringImpl *WebKit::WebGPU::RemoteDeviceProxy::createQuerySet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v6 = (WTF::StringImpl *)(*(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32));
  v55[0] = v5;
  v55[1] = v6;
  char v56 = 1;
  uint64_t v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v54 = v7;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80);
  uint64_t v9 = *(void *)(a1 + 48);
  double v10 = *(double *)(v8 + 120);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v11 = v10 + v12;
  }
  if (*(void *)(v8 + 56) == v9)
  {
LABEL_6:
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v58, v11);
    if (v60)
    {
      unint64_t v61 = v58;
      unint64_t v62 = v59;
      unint64_t v63 = 0;
      unint64_t v15 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v16 = v15 >= (unint64_t)v58;
      unint64_t v17 = v15 - (void)v58;
      if (v16)
      {
        if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v59) {
          goto LABEL_82;
        }
        *(_WORD *)((char *)v58 + v17) = 799;
        unint64_t v63 = v17 + 2;
      }
      while (1)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(&v61, (uint64_t)v55);
        unint64_t v18 = v63;
        unint64_t v19 = (char *)(((unint64_t)v61 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= (char *)v61 + v63)
        {
          int64_t v20 = v19 - (char *)v61;
          if ((unint64_t)(v19 - (char *)v61) > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_28;
          }
          unint64_t v18 = v20 + 8;
          if (v20 + 8 > v62) {
            goto LABEL_28;
          }
          *(void *)unint64_t v19 = v54;
          unint64_t v63 = v20 + 8;
        }
        if (v62)
        {
          unint64_t v21 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v22 = *(void *)(v8 + 64);
          if (v21 + 16 >= v22) {
            unint64_t v21 = 0;
          }
          if (v18 <= 0x10) {
            unint64_t v18 = 16;
          }
          unint64_t v23 = v21 + v18;
          if (v22 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(v8 + 80) = v23;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v23) == 0x80000000
            || *(_DWORD *)(v8 + 116))
          {
            if (*(unsigned char *)(v8 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
            }
            *(_DWORD *)(v8 + 116) = 0;
          }
          goto LABEL_43;
        }
LABEL_28:
        if (!v60) {
          goto LABEL_81;
        }
        unint64_t v24 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v25 = v24 - (void)v58;
        if (v24 < (unint64_t)v58)
        {
          unint64_t v26 = 0;
        }
        else
        {
          unint64_t v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v59)
          {
            *(_WORD *)((char *)v58 + v25) = 2870;
            unint64_t v26 = v25 + 2;
          }
        }
        unint64_t v27 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v28 = *(void *)(v8 + 64);
        if (v27 + 16 >= v28) {
          unint64_t v27 = 0;
        }
        if (v26 <= 0x10) {
          unint64_t v26 = 16;
        }
        unint64_t v29 = v27 + v26;
        if (v28 <= v29) {
          unint64_t v29 = 0;
        }
        *(void *)(v8 + 80) = v29;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v29);
        *(_DWORD *)(v8 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v8 + 8));
        unint64_t v30 = v57;
        uint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v31 = 799;
        *((void *)v31 + 1) = v9;
        *((void *)v31 + 66) = (char *)v31 + 16;
        *((void *)v31 + 67) = 512;
        *((void *)v31 + 68) = 0;
        *((void *)v31 + 70) = 0;
        *((void *)v31 + 69) = 0;
        IPC::Encoder::encodeHeader(v31);
        unint64_t v61 = v31;
        IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(v31, (uint64_t)v55);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v31, (uint64_t *)&v54);
        uint64_t v8 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v61, 1, 0);
        uint64_t v33 = v61;
        unint64_t v61 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v37, v38);
        }
        uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
        if (v8) {
          goto LABEL_42;
        }
LABEL_43:
        uint64_t v35 = *(void *)(a1 + 64);
        uint64_t v9 = (uint64_t)v54;
        uint64_t v36 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v36 + 8) = 1;
        *(void *)(v36 + 16) = 0;
        *(void *)(v36 + 24) = 0;
        *(void *)uint64_t v36 = &unk_1EE9EADE8;
        *(void *)(v36 + 32) = v9;
        ++*(_DWORD *)(v35 + 8);
        *(void *)(v36 + 40) = v35;
        ++*(_DWORD *)(a1 + 8);
        *(void *)(v36 + 48) = a1;
        if (v56)
        {
          uint64_t v34 = v36;
          *(WTF::StringImpl **)(v36 + 24) = v55[0];
          v55[0] = 0;
          unint64_t v61 = (IPC::Encoder *)(v36 + 24);
          uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnection::send<Messages::RemoteQuerySet::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(a1 + 72) + 72) + 80), (uint64_t **)&v61, *(void *)(v36 + 32));
          goto LABEL_45;
        }
LABEL_81:
        __break(1u);
LABEL_82:
        unint64_t v62 = 0;
      }
    }
    goto LABEL_42;
  }
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v61, v11);
  if (!(_BYTE)v63) {
    goto LABEL_42;
  }
  unint64_t v40 = v61;
  unint64_t v39 = v62;
  unint64_t v41 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v41 - (void)v61;
  if (v41 >= (unint64_t)v61)
  {
    unint64_t v43 = v42 + 2;
    if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v43 <= v62)
    {
      *(_WORD *)((char *)v61 + v42) = 2871;
      goto LABEL_58;
    }
    unint64_t v39 = 0;
  }
  unint64_t v43 = 0;
LABEL_58:
  unint64_t v45 = (char *)(((unint64_t)v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v45 >= (char *)v40 + v43)
  {
    unint64_t v43 = v45 - (char *)v40 + 8;
    if ((unint64_t)(v45 - (char *)v40) > 0xFFFFFFFFFFFFFFF7 || v43 > v39) {
      goto LABEL_42;
    }
    *(void *)unint64_t v45 = v9;
  }
  if (v39)
  {
    unint64_t v47 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = *(void *)(v8 + 64);
    if (v47 + 16 >= v48) {
      unint64_t v47 = 0;
    }
    if (v43 <= 0x10) {
      unint64_t v43 = 16;
    }
    unint64_t v49 = v47 + v43;
    if (v48 <= v49) {
      unint64_t v49 = 0;
    }
    *(void *)(v8 + 80) = v49;
    unint64_t v50 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v49);
    int v51 = *(_DWORD *)(v8 + 116);
    if (v50 == 0x80000000 || v51 != 0)
    {
      unsigned int v53 = v51 + 1;
      *(_DWORD *)(v8 + 116) = v53;
      if (v53 >= *(_DWORD *)(v8 + 112))
      {
        if (*(unsigned char *)(v8 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
        }
        *(_DWORD *)(v8 + 116) = 0;
      }
    }
    *(void *)(v8 + 56) = v9;
    goto LABEL_6;
  }
LABEL_42:
  uint64_t v34 = 0;
LABEL_45:
  *a3 = v34;
  if (v56)
  {
    uint64_t result = v55[0];
    v55[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteDeviceProxy::pushErrorScope(WTF::ApproximateTime *a1, char a2)
{
  uint64_t v3 = *(void *)(*(void *)(*((void *)a1 + 9) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 6);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v51, v6);
  if (!v53) {
    return result;
  }
  unint64_t v21 = v51;
  unint64_t v20 = v52;
  unint64_t v22 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v23 = v22 - v51;
  if (v22 < v51) {
    goto LABEL_73;
  }
  unint64_t v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v52)
  {
    unint64_t v20 = 0;
LABEL_73:
    unint64_t v24 = 0;
    goto LABEL_32;
  }
  *(_WORD *)(v51 + v23) = 2871;
LABEL_32:
  unint64_t v26 = (void *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    unint64_t v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20) {
      return result;
    }
    void *v26 = v4;
  }
  if (!v20) {
    return result;
  }
  unint64_t v28 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = *(void *)(v3 + 64);
  if (v28 + 16 >= v29) {
    unint64_t v28 = 0;
  }
  if (v24 <= 0x10) {
    unint64_t v24 = 16;
  }
  unint64_t v30 = v28 + v24;
  if (v29 <= v30) {
    unint64_t v30 = 0;
  }
  *(void *)(v3 + 80) = v30;
  unint64_t v31 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v30);
  int v32 = *(_DWORD *)(v3 + 116);
  if (v31 == 0x80000000 || v32 != 0)
  {
    unsigned int v34 = v32 + 1;
    *(_DWORD *)(v3 + 116) = v34;
    if (v34 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v51, v6);
  if (!v53) {
    return result;
  }
  unint64_t v9 = v51;
  unint64_t v10 = v52;
  unint64_t v11 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v51;
  if (v11 < v51)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v52) {
      goto LABEL_57;
    }
    *(_WORD *)(v51 + v12) = 811;
  }
  if (v13 < v10)
  {
    *(unsigned char *)(v9 + v13) = a2;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v13 <= 0xF) {
      unint64_t v13 = 15;
    }
    unint64_t v18 = v13 + v16;
    if (v17 > v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = 0;
    }
    *(void *)(v3 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  if (!v53)
  {
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v9 = v51;
LABEL_57:
  unint64_t v35 = (v9 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v9;
  if (v35 < v9)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v52)
    {
      *(_WORD *)(v9 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v37 <= 0x10) {
    unint64_t v37 = 16;
  }
  unint64_t v40 = v38 + v37;
  if (v39 <= v40) {
    unint64_t v41 = 0;
  }
  else {
    unint64_t v41 = v40;
  }
  *(void *)(v3 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v41);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
  unint64_t v42 = v50;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 811;
  *((void *)v43 + 1) = v4;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  int v54 = v43;
  unint64_t v44 = (unsigned char *)IPC::Encoder::grow(v43, 1uLL, 1);
  if (!v45)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x1990D120CLL);
  }
  unsigned char *v44 = a2;
  IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v54, 1, 0);
  unint64_t v47 = v54;
  int v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(*(void *)(*((void *)a1 + 9) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 6);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
    if (!v64) {
      goto LABEL_49;
    }
    unint64_t v41 = v62;
    unint64_t v40 = v63;
    unint64_t v42 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - v62;
    if (v42 >= v62)
    {
      unint64_t v44 = v43 + 2;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v63)
      {
        *(_WORD *)(v62 + v43) = 2871;
LABEL_59:
        unint64_t v46 = (void *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v46 >= v41 + v44)
        {
          unint64_t v44 = (unint64_t)v46 - v41 + 8;
          if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
            goto LABEL_49;
          }
          *unint64_t v46 = v4;
        }
        if (!v40) {
          goto LABEL_49;
        }
        uint64_t v48 = *(void *)(v3 + 72);
        unint64_t v49 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v50 = *(void *)(v3 + 64);
        if (v49 + 16 >= v50) {
          unint64_t v49 = 0;
        }
        if (v44 <= 0x10) {
          unint64_t v44 = 16;
        }
        unint64_t v51 = v49 + v44;
        if (v50 <= v51) {
          unint64_t v51 = 0;
        }
        *(void *)(v3 + 80) = v51;
        unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v48 + 16) + 128), v51);
        int v53 = *(_DWORD *)(v3 + 116);
        if (v52 == 0x80000000 || v53 != 0)
        {
          unsigned int v55 = v53 + 1;
          *(_DWORD *)(v3 + 116) = v55;
          if (v55 >= *(_DWORD *)(v3 + 112))
          {
            if (*(unsigned char *)(v3 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
            }
            *(_DWORD *)(v3 + 116) = 0;
          }
        }
        *(void *)(v3 + 56) = v4;
        goto LABEL_4;
      }
      unint64_t v40 = 0;
    }
    unint64_t v44 = 0;
    goto LABEL_59;
  }
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
  if (!v64) {
    goto LABEL_49;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v61, (uint64_t **)(v3 + 8));
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v9 = &unk_1EE9EB318;
  v9[1] = v2;
  v60[0] = (uint64_t)v9;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v60[1] = v10;
  uint64_t v59 = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v61, v60);
  unint64_t v12 = v64;
  if (!v64) {
    goto LABEL_82;
  }
  unint64_t v12 = v62;
  unint64_t v13 = v63;
  unint64_t v14 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v62;
  if (v14 < v62)
  {
    unint64_t v16 = 0;
    unint64_t v11 = v63;
  }
  else
  {
    unint64_t v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_83;
    }
    unint64_t v16 = 0;
    if (v15 + 2 <= v63)
    {
      *(_WORD *)(v62 + v15) = 810;
      unint64_t v11 = v13;
      unint64_t v16 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v17 = (void *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v12 + v16)
    {
      unint64_t v18 = (char *)v17 - v12;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_27;
      }
      unint64_t v16 = (unint64_t)(v18 + 8);
      if ((unint64_t)(v18 + 8) > v11) {
        goto LABEL_27;
      }
      *unint64_t v17 = v10;
    }
    if (v11)
    {
      unint64_t v19 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v3 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      *(void *)(v3 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_46;
    }
LABEL_27:
    unint64_t v12 = v64;
    if (v64) {
      break;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    unint64_t v16 = v11;
  }
  unint64_t v23 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v62;
  if (v23 < v62)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v63)
    {
      *(_WORD *)(v62 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v3 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v3 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v28);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 810;
  *((void *)v29 + 1) = v4;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  unint64_t v58 = v29;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v59);
  if (IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v58, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v61, v59, &v57);
    if (v57)
    {
      int v32 = (atomic_uint *)(WTF::RunLoop::main(v31) + 8);
      atomic_fetch_add(v32, 1u);
      uint64_t v33 = v57;
      uint64_t v57 = 0;
      unsigned int v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unsigned int v34 = &unk_1EE9EB370;
      v34[1] = v33;
      char v56 = v34;
      WTF::RunLoop::dispatch();
      if (v56) {
        (*(void (**)(void *))(*v56 + 8))(v56);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v32);
      uint64_t v35 = v57;
      uint64_t v57 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
  }
  unint64_t v36 = v58;
  unint64_t v58 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v30);
    WTF::fastFree(v38, v39);
  }
LABEL_46:
  uint64_t v37 = v60[0];
  v60[0] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v61);
  uint64_t v2 = 0;
LABEL_49:
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(*(void *)(*((void *)a1 + 9) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 6);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
    if (!v64) {
      goto LABEL_49;
    }
    unint64_t v41 = v62;
    unint64_t v40 = v63;
    unint64_t v42 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - v62;
    if (v42 >= v62)
    {
      unint64_t v44 = v43 + 2;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v63)
      {
        *(_WORD *)(v62 + v43) = 2871;
LABEL_59:
        unint64_t v46 = (void *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v46 >= v41 + v44)
        {
          unint64_t v44 = (unint64_t)v46 - v41 + 8;
          if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
            goto LABEL_49;
          }
          *unint64_t v46 = v4;
        }
        if (!v40) {
          goto LABEL_49;
        }
        uint64_t v48 = *(void *)(v3 + 72);
        unint64_t v49 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v50 = *(void *)(v3 + 64);
        if (v49 + 16 >= v50) {
          unint64_t v49 = 0;
        }
        if (v44 <= 0x10) {
          unint64_t v44 = 16;
        }
        unint64_t v51 = v49 + v44;
        if (v50 <= v51) {
          unint64_t v51 = 0;
        }
        *(void *)(v3 + 80) = v51;
        unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v48 + 16) + 128), v51);
        int v53 = *(_DWORD *)(v3 + 116);
        if (v52 == 0x80000000 || v53 != 0)
        {
          unsigned int v55 = v53 + 1;
          *(_DWORD *)(v3 + 116) = v55;
          if (v55 >= *(_DWORD *)(v3 + 112))
          {
            if (*(unsigned char *)(v3 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
            }
            *(_DWORD *)(v3 + 116) = 0;
          }
        }
        *(void *)(v3 + 56) = v4;
        goto LABEL_4;
      }
      unint64_t v40 = 0;
    }
    unint64_t v44 = 0;
    goto LABEL_59;
  }
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
  if (!v64) {
    goto LABEL_49;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v61, (uint64_t **)(v3 + 8));
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v9 = &unk_1EE9EB398;
  v9[1] = v2;
  v60[0] = (uint64_t)v9;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v60[1] = v10;
  uint64_t v59 = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v61, v60);
  unint64_t v12 = v64;
  if (!v64) {
    goto LABEL_82;
  }
  unint64_t v12 = v62;
  unint64_t v13 = v63;
  unint64_t v14 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v62;
  if (v14 < v62)
  {
    unint64_t v16 = 0;
    unint64_t v11 = v63;
  }
  else
  {
    unint64_t v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_83;
    }
    unint64_t v16 = 0;
    if (v15 + 2 <= v63)
    {
      *(_WORD *)(v62 + v15) = 813;
      unint64_t v11 = v13;
      unint64_t v16 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v17 = (void *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v12 + v16)
    {
      unint64_t v18 = (char *)v17 - v12;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_27;
      }
      unint64_t v16 = (unint64_t)(v18 + 8);
      if ((unint64_t)(v18 + 8) > v11) {
        goto LABEL_27;
      }
      *unint64_t v17 = v10;
    }
    if (v11)
    {
      unint64_t v19 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v3 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      *(void *)(v3 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_46;
    }
LABEL_27:
    unint64_t v12 = v64;
    if (v64) {
      break;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    unint64_t v16 = v11;
  }
  unint64_t v23 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v62;
  if (v23 < v62)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v63)
    {
      *(_WORD *)(v62 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v3 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v3 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v28);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 813;
  *((void *)v29 + 1) = v4;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  unint64_t v58 = v29;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v59);
  if (IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v58, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v61, v59, &v57);
    if (v57)
    {
      int v32 = (atomic_uint *)(WTF::RunLoop::main(v31) + 8);
      atomic_fetch_add(v32, 1u);
      uint64_t v33 = v57;
      uint64_t v57 = 0;
      unsigned int v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unsigned int v34 = &unk_1EE9EB3C0;
      v34[1] = v33;
      char v56 = v34;
      WTF::RunLoop::dispatch();
      if (v56) {
        (*(void (**)(void *))(*v56 + 8))(v56);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v32);
      uint64_t v35 = v57;
      uint64_t v57 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
  }
  unint64_t v36 = v58;
  unint64_t v58 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v30);
    WTF::fastFree(v38, v39);
  }
LABEL_46:
  uint64_t v37 = v60[0];
  v60[0] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v61);
  uint64_t v2 = 0;
LABEL_49:
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteDeviceProxy::setLabelInternal(WebKit::WebGPU::RemoteDeviceProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 9) + 72) + 80);
  uint64_t v4 = *((void *)this + 6);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 814;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 814;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(*(void *)(*((void *)a1 + 9) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 6);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
    if (!v64) {
      goto LABEL_49;
    }
    unint64_t v41 = v62;
    unint64_t v40 = v63;
    unint64_t v42 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - v62;
    if (v42 >= v62)
    {
      unint64_t v44 = v43 + 2;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v63)
      {
        *(_WORD *)(v62 + v43) = 2871;
LABEL_59:
        unint64_t v46 = (void *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v46 >= v41 + v44)
        {
          unint64_t v44 = (unint64_t)v46 - v41 + 8;
          if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
            goto LABEL_49;
          }
          *unint64_t v46 = v4;
        }
        if (!v40) {
          goto LABEL_49;
        }
        uint64_t v48 = *(void *)(v3 + 72);
        unint64_t v49 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v50 = *(void *)(v3 + 64);
        if (v49 + 16 >= v50) {
          unint64_t v49 = 0;
        }
        if (v44 <= 0x10) {
          unint64_t v44 = 16;
        }
        unint64_t v51 = v49 + v44;
        if (v50 <= v51) {
          unint64_t v51 = 0;
        }
        *(void *)(v3 + 80) = v51;
        unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v48 + 16) + 128), v51);
        int v53 = *(_DWORD *)(v3 + 116);
        if (v52 == 0x80000000 || v53 != 0)
        {
          unsigned int v55 = v53 + 1;
          *(_DWORD *)(v3 + 116) = v55;
          if (v55 >= *(_DWORD *)(v3 + 112))
          {
            if (*(unsigned char *)(v3 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
            }
            *(_DWORD *)(v3 + 116) = 0;
          }
        }
        *(void *)(v3 + 56) = v4;
        goto LABEL_4;
      }
      unint64_t v40 = 0;
    }
    unint64_t v44 = 0;
    goto LABEL_59;
  }
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
  if (!v64) {
    goto LABEL_49;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v61, (uint64_t **)(v3 + 8));
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v9 = &unk_1EE9EB3E8;
  v9[1] = v2;
  v60[0] = (uint64_t)v9;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v60[1] = v10;
  uint64_t v59 = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v61, v60);
  unint64_t v12 = v64;
  if (!v64) {
    goto LABEL_82;
  }
  unint64_t v12 = v62;
  unint64_t v13 = v63;
  unint64_t v14 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v62;
  if (v14 < v62)
  {
    unint64_t v16 = 0;
    unint64_t v11 = v63;
  }
  else
  {
    unint64_t v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_83;
    }
    unint64_t v16 = 0;
    if (v15 + 2 <= v63)
    {
      *(_WORD *)(v62 + v15) = 812;
      unint64_t v11 = v13;
      unint64_t v16 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v17 = (void *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v12 + v16)
    {
      unint64_t v18 = (char *)v17 - v12;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_27;
      }
      unint64_t v16 = (unint64_t)(v18 + 8);
      if ((unint64_t)(v18 + 8) > v11) {
        goto LABEL_27;
      }
      *unint64_t v17 = v10;
    }
    if (v11)
    {
      unint64_t v19 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v3 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      *(void *)(v3 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_46;
    }
LABEL_27:
    unint64_t v12 = v64;
    if (v64) {
      break;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    unint64_t v16 = v11;
  }
  unint64_t v23 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v62;
  if (v23 < v62)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v63)
    {
      *(_WORD *)(v62 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v3 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v3 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v28);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 812;
  *((void *)v29 + 1) = v4;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  unint64_t v58 = v29;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v59);
  if (IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v58, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v61, v59, &v57);
    if (v57)
    {
      unint64_t v32 = (atomic_uint *)(WTF::RunLoop::main(v31) + 8);
      atomic_fetch_add(v32, 1u);
      uint64_t v33 = v57;
      uint64_t v57 = 0;
      unint64_t v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v34 = &unk_1EE9EB410;
      v34[1] = v33;
      char v56 = v34;
      WTF::RunLoop::dispatch();
      if (v56) {
        (*(void (**)(void *))(*v56 + 8))(v56);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v32);
      uint64_t v35 = v57;
      uint64_t v57 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
  }
  unint64_t v36 = v58;
  unint64_t v58 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v30);
    WTF::fastFree(v38, v39);
  }
LABEL_46:
  uint64_t v37 = v60[0];
  v60[0] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v61);
  uint64_t v2 = 0;
LABEL_49:
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

void WebKit::WebGPU::RemoteExternalTextureProxy::~RemoteExternalTextureProxy(WebKit::WebGPU::RemoteExternalTextureProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 3);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v49, v5);
  if (!v51) {
    goto LABEL_71;
  }
  unint64_t v19 = v49;
  unint64_t v18 = v50;
  unint64_t v20 = (v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v49;
  if (v20 < v49) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v50)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v49 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v49, v5);
  if (!v51) {
    goto LABEL_71;
  }
  unint64_t v8 = v49;
  unint64_t v9 = v50;
  uint64_t v10 = (_WORD *)((v49 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v49;
  if ((unint64_t)v10 < v49)
  {
    unint64_t v12 = 0;
    if (v50) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v50)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v50)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_85;
    }
    *uint64_t v10 = 894;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v51;
  if (v51)
  {
    unint64_t v8 = v49;
    uint64_t v10 = (_WORD *)((v49 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_85:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v48, (uint64_t **)(v2 + 8));
  unint64_t v39 = v48;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 894;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v52 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v52, 1, 0);
  unint64_t v42 = v52;
  unint64_t v52 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v46, v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v48);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unint64_t v44 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EAFB8;
  uint64_t v45 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteExternalTextureProxy::~RemoteExternalTextureProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteExternalTextureProxy::setLabelInternal(WebKit::WebGPU::RemoteExternalTextureProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 3);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 895;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 895;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteExternalTextureProxy::destroy(WebKit::WebGPU::RemoteExternalTextureProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 3);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 893;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 893;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unsigned __int8 v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteExternalTextureProxy::undestroy(WebKit::WebGPU::RemoteExternalTextureProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 3);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 896;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 896;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unsigned __int8 v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

void WebKit::WebGPU::RemoteExternalTextureProxy::updateExternalTexture(WebKit::WebGPU::RemoteExternalTextureProxy *this, __CVBuffer *a2)
{
}

unsigned int **WebKit::RemoteGPUProxy::create@<X0>(WebKit::RemoteGPUProxy *this@<X0>, WebKit::WebGPU::ConvertToBackingContext *a2@<X1>, atomic_uchar *volatile ***a3@<X8>)
{
  double v6 = (WTF::RunLoop *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(a2);
  uint64_t v7 = WTF::RunLoop::main(v6);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  v9[0] = v7;
  int v10 = 0;
  v11[0] = 0;
  int v12 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v9);
  uint64_t result = WebKit::RemoteGPUProxy::create((uint64_t)this, (uint64_t *)v6, (uint64_t)v11, a3);
  if (v12 != -1) {
    uint64_t result = (unsigned int **)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v12])(&v13, v11);
  }
  int v12 = -1;
  if (v10 != -1) {
    return (unsigned int **)((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v10])(&v13, v9);
  }
  return result;
}

unsigned int **WebKit::RemoteGPUProxy::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, atomic_uchar *volatile ***a4@<X8>)
{
  {
    unint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  double v8 = INFINITY;
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 760)) {
    double v8 = 15.0;
  }
  uint64_t result = (unsigned int **)IPC::StreamClientConnection::create(21, &v18, v8);
  if (v21)
  {
    int v10 = v18;
    unint64_t v18 = 0;
    unint64_t v15 = v10;
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    v17[1] = v20[1];
    unint64_t v11 = (atomic_uchar *volatile **)WTF::fastMalloc((WTF *)0x68);
    WebKit::RemoteGPUProxy::RemoteGPUProxy((uint64_t)v11, a1, a3);
    WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection((WebKit::WebProcess *)a2);
    WebKit::RemoteGPUProxy::initializeIPC((uint64_t)v11, (atomic_uint **)&v15, a2[8], (uint64_t)&v16);
    WebKit::RemoteGPUProxy::waitUntilInitialized(v11);
    *a4 = v11;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v17);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v16);
    uint64_t result = WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v15, v12);
    if (v21)
    {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v19);
      return WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(&v18, v13);
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

unsigned int **WebKit::RemoteGPUProxy::create@<X0>(WebKit::RemoteGPUProxy *this@<X0>, WebKit::WebGPU::ConvertToBackingContext *a2@<X1>, WebKit::RemoteRenderingBackendProxy *a3@<X2>, atomic_uchar *volatile ***a4@<X8>)
{
  unint64_t v9 = (atomic_uchar *)*((void *)a3 + 1);
  if (v9) {
    unint64_t v9 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
  }
  v11[0] = v9;
  v11[1] = a3;
  int v12 = 1;
  v13[0] = 0;
  int v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v11);
  uint64_t result = WebKit::RemoteGPUProxy::create((uint64_t)this, (uint64_t *)a2, (uint64_t)v13, a4);
  if (v14 != -1) {
    uint64_t result = (unsigned int **)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v14])(&v15, v13);
  }
  int v14 = -1;
  if (v12 != -1) {
    return (unsigned int **)((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v12])(&v15, v11);
  }
  return result;
}

uint64_t WebKit::RemoteGPUProxy::initializeIPC(uint64_t a1, atomic_uint **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a3;
  double v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(unsigned int **)(a1 + 80);
  *(void *)(a1 + 80) = v6;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7, a2);
      WTF::fastFree(v11, v12);
    }
    double v6 = *(atomic_uint **)(a1 + 80);
  }
  if (v6)
  {
    atomic_fetch_add(v6, 1u);
    IPC::StreamClientConnection::open((uint64_t)v6, (void *)(a1 + 8), (_OWORD *)(a1 + 32));
    if (atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v6);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6, v8);
      WTF::fastFree(v13, v14);
    }
  }
  else
  {
    IPC::StreamClientConnection::open(0, (void *)(a1 + 8), (_OWORD *)(a1 + 32));
  }
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *unint64_t v9 = &unk_1EE9EB438;
  v9[1] = a1;
  void v9[2] = &v16;
  v9[3] = a4;
  char v15 = v9;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = (uint64_t)v15;
  if (v15) {
    return (*(uint64_t (**)(void *))(*v15 + 8))(v15);
  }
  return result;
}

atomic_uchar *volatile **WebKit::RemoteGPUProxy::waitUntilInitialized(atomic_uchar *volatile **this)
{
  if (!*((unsigned char *)this + 96))
  {
    uint64_t v1 = (WebKit::RemoteGPUProxy *)this;
    uint64_t v2 = (atomic_uint *)this[10];
    if (v2)
    {
      atomic_fetch_add(v2, 1u);
      this = (atomic_uchar *volatile **)IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)v2, (uint64_t)this[11], 0);
      int v4 = (int)this;
      if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v2);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v2, v3);
        this = (atomic_uchar *volatile **)WTF::fastFree(v5, v6);
        if (!v4) {
          return this;
        }
      }
      else if (!this)
      {
        return this;
      }
    }
    else
    {
      this = (atomic_uchar *volatile **)IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(0, (uint64_t)this[11], 0);
      if (!this) {
        return this;
      }
    }
    return WebKit::RemoteGPUProxy::abandonGPUProcess(v1);
  }
  return this;
}

uint64_t WebKit::RemoteGPUProxy::RemoteGPUProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9EB008;
  *(void *)(a1 + 8) = &unk_1EE9E98D8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x100000000;
  WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)(a1 + 32));
  *(void *)a1 = &unk_1EE9EABA8;
  *(void *)(a1 + 8) = &unk_1EE9EACF8;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 32) = &unk_1EE9EAD48;
  *(void *)(a1 + 40) = a2;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>,(std::__variant_detail::_Trait)1>>(a1 + 48, a3);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void WebKit::RemoteGPUProxy::~RemoteGPUProxy(WebKit::RemoteGPUProxy *this, void *a2)
{
  if (!*((unsigned char *)this + 97))
  {
    double v3 = (atomic_uint *)*((void *)this + 10);
    if (v3)
    {
      atomic_fetch_add(v3, 1u);
      IPC::StreamClientConnection::invalidate((uint64_t **)v3);
      if (atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v3);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v3, v4);
        WTF::fastFree(v16, v17);
      }
    }
    else
    {
      IPC::StreamClientConnection::invalidate(0);
    }
    uint64_t v5 = *((void *)this + 11);
    uint64_t v6 = *((void *)this + 9);
    *((void *)this + 9) = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9EB460;
    v7[1] = v5;
    v7[2] = v6;
    uint64_t v19 = v7;
    WTF::ensureOnMainRunLoop();
    double v8 = v19;
    uint64_t v19 = 0;
    if (v8) {
      (*(void (**)(void *))(*v8 + 8))(v8);
    }
  }
  unint64_t v9 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v9, a2);
    WTF::fastFree(v14, v15);
  }
  int v10 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, a2);
  }
  uint64_t v11 = *((unsigned int *)this + 16);
  if (v11 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v11])(&v18, (char *)this + 48);
  }
  *((_DWORD *)this + 16) = -1;
  int v12 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12)
  {
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    }
    else {
      --v12[2];
    }
  }
  WTF::FunctionDispatcher::~FunctionDispatcher((WebKit::RemoteGPUProxy *)((char *)this + 32));
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v13);
}

void non-virtual thunk to'WebKit::RemoteGPUProxy::~RemoteGPUProxy(WebKit::RemoteGPUProxy *this, void *a2)
{
}

{
  WebKit::RemoteGPUProxy::~RemoteGPUProxy((WebKit::RemoteGPUProxy *)((char *)this - 32), a2);
}

{
  WebKit::RemoteGPUProxy::operator delete((WebKit::RemoteGPUProxy *)((char *)this - 8), a2);
}

{
  WebKit::RemoteGPUProxy::operator delete((WebKit::RemoteGPUProxy *)((char *)this - 32), a2);
}

double WebKit::RemoteGPUProxy::operator delete(WebKit::RemoteGPUProxy *a1, void *a2)
{
  WebKit::RemoteGPUProxy::~RemoteGPUProxy(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 24)))
  {
    *(void *)(v2 + 96) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

atomic_uchar *volatile **WebKit::RemoteGPUProxy::abandonGPUProcess(WebKit::RemoteGPUProxy *this)
{
  uint64_t v2 = (atomic_uint *)*((void *)this + 10);
  if (v2)
  {
    atomic_fetch_add(v2, 1u);
    double result = IPC::StreamClientConnection::invalidate((uint64_t **)v2);
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v2, v4);
      double result = (atomic_uchar *volatile **)WTF::fastFree(v5, v6);
    }
  }
  else
  {
    double result = IPC::StreamClientConnection::invalidate(0);
  }
  *((unsigned char *)this + 97) = 1;
  return result;
}

atomic_uchar *volatile **non-virtual thunk to'WebKit::RemoteGPUProxy::didClose(WebKit::RemoteGPUProxy *this, IPC::Connection *a2)
{
  return WebKit::RemoteGPUProxy::abandonGPUProcess((WebKit::RemoteGPUProxy *)((char *)this - 8));
}

void WebKit::RemoteGPUProxy::wasCreated(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 96) = 1;
  if (a2)
  {
    int v4 = *(atomic_uint **)(a1 + 80);
    if (v4)
    {
      atomic_fetch_add(v4, 1u);
      IPC::StreamClientConnectionBuffer::setSemaphores((uint64_t)(v4 + 16), a3, a4);
      if (atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v4);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v4, v5);
        WTF::fastFree(v6, v7);
      }
    }
    else
    {
      IPC::StreamClientConnectionBuffer::setSemaphores(64, a3, a4);
    }
  }
  else
  {
    WebKit::RemoteGPUProxy::abandonGPUProcess((WebKit::RemoteGPUProxy *)a1);
  }
}

IPC::Decoder *IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, int a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, (uint64_t **)(a1 + 8));
  unint64_t v9 = IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated>((uint64_t)v11, a2, a3, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v11);
  return v9;
}

_DWORD *WebKit::RemoteGPUProxy::requestAdapter(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 97))
  {
    *(void *)&long long v104 = 0;
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v4 + 16))(v4, &v104);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    double result = (_DWORD *)v104;
    *(void *)&long long v104 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
    return result;
  }
  double v6 = a2;
  double v8 = *(_DWORD **)(a1 + 40);
  ++v8[2];
  int v9 = *a2;
  __int16 v102 = 1;
  int v101 = v9;
  int v10 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v100 = v10;
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(uint64_t **)(a1 + 88);
  double v13 = *(double *)(v12 + 120);
  double v14 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now(v10);
    double v14 = v13 + v15;
  }
  if (*(uint64_t **)(v12 + 56) == v11) {
    goto LABEL_8;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v104, v14);
  if (!(_BYTE)v105)
  {
    char v92 = 15;
LABEL_161:
    LOBYTE(v129) = v92;
    int v144 = 1;
LABEL_97:
    WebKit::RemoteGPUProxy::abandonGPUProcess((WebKit::RemoteGPUProxy *)a1);
    *(void *)&long long v104 = 0;
    uint64_t v56 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v56 + 16))(v56, &v104);
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
    double result = (_DWORD *)v104;
    *(void *)&long long v104 = 0;
    if (result)
    {
      if (result[2] == 1) {
        double result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
    goto LABEL_115;
  }
  unint64_t v77 = *((void *)&v104 + 1);
  uint64_t v78 = v104;
  unint64_t v79 = (v104 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v80 = v79 - v104;
  if (v79 >= (unint64_t)v104)
  {
    unint64_t v81 = v80 + 2;
    if (v80 <= 0xFFFFFFFFFFFFFFFDLL && v81 <= *((void *)&v104 + 1))
    {
      *(_WORD *)(v104 + v80) = 2871;
      goto LABEL_129;
    }
    unint64_t v77 = 0;
  }
  unint64_t v81 = 0;
LABEL_129:
  char v83 = (void *)((v78 + v81 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v83 >= v78 + v81)
  {
    unint64_t v81 = (unint64_t)v83 - v78 + 8;
    if ((unint64_t)v83 - v78 > 0xFFFFFFFFFFFFFFF7 || v81 > v77) {
      goto LABEL_160;
    }
    *char v83 = v11;
  }
  if (!v77)
  {
LABEL_160:
    char v92 = 17;
    goto LABEL_161;
  }
  unint64_t v85 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v86 = *(void *)(v12 + 64);
  if (v85 + 16 >= v86) {
    unint64_t v85 = 0;
  }
  if (v81 <= 0x10) {
    unint64_t v81 = 16;
  }
  unint64_t v87 = v85 + v81;
  if (v86 <= v87) {
    unint64_t v87 = 0;
  }
  *(void *)(v12 + 80) = v87;
  unint64_t v88 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v87);
  int v89 = *(_DWORD *)(v12 + 116);
  if (v88 == 0x80000000 || v89 != 0)
  {
    unsigned int v91 = v89 + 1;
    *(_DWORD *)(v12 + 116) = v91;
    if (v91 >= *(_DWORD *)(v12 + 112))
    {
      if (*(unsigned char *)(v12 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
      }
      *(_DWORD *)(v12 + 116) = 0;
    }
  }
  *(void *)(v12 + 56) = v11;
LABEL_8:
  IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v121, v14);
  if (!v123)
  {
    LOBYTE(v129) = 15;
    int v144 = 1;
    goto LABEL_96;
  }
  unint64_t v16 = v121;
  unint64_t v17 = v122;
  char v18 = (uint64_t **)(v12 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v145, (uint64_t **)(v12 + 8));
  uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v145[0], v19))
  {
    unint64_t v129 = v16;
    unint64_t v130 = v17;
    unint64_t v131 = 0;
    unint64_t v20 = (v16 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v16;
    if (v20 < v16)
    {
      unint64_t v22 = 0;
      goto LABEL_14;
    }
    if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v22 = v21 + 2;
      if (v21 + 2 <= v17)
      {
        *(_WORD *)(v16 + v21) = 3636;
        unint64_t v131 = v21 + 2;
        goto LABEL_14;
      }
    }
    goto LABEL_153;
  }
  LOBYTE(v129) = 11;
  uint64_t v19 = 1;
  int v144 = 1;
  LOBYTE(v104) = 0;
  int v119 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v104, (uint64_t)&v129);
  char v120 = 1;
  if (v144 != -1) {
    ((void (*)(long long *, unint64_t *))off_1EE9EB120[v144])(v124, &v129);
  }
  while (1)
  {
LABEL_69:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v145);
    if (v120)
    {
      LOBYTE(v129) = 0;
      int v144 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v129, (uint64_t)&v104);
      if (v120 && v119 != -1) {
        ((void (*)(long long *, long long *))off_1EE9EB120[v119])(v124, &v104);
      }
      goto LABEL_96;
    }
    if (!v123) {
      goto LABEL_152;
    }
    unint64_t v47 = (v121 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v121;
    if (v47 < v121)
    {
      unint64_t v49 = 0;
    }
    else
    {
      unint64_t v49 = 0;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v122)
      {
        *(_WORD *)(v121 + v48) = 2870;
        unint64_t v49 = v48 + 2;
      }
    }
    unint64_t v50 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = *(void *)(v12 + 64);
    if (v50 + 16 >= v51) {
LABEL_157:
    }
      unint64_t v50 = 0;
    if (v49 <= 0x10) {
      unint64_t v49 = 16;
    }
    unint64_t v52 = v50 + v49;
    if (v51 <= v52) {
      unint64_t v52 = 0;
    }
    *(void *)(v12 + 80) = v52;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v52);
    *(_DWORD *)(v12 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v103, v18);
    char v18 = v103;
    v126 = 0;
    IPC::Connection::createSyncMessageEncoder(3636, (uint64_t)v11, (uint64_t *)&v126, (IPC::Encoder **)v145);
    uint64_t v11 = v145[0];
    IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode((IPC::Encoder *)v145[0], (char *)&v101);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode((IPC::Encoder *)v11, (uint64_t *)&v100);
    IPC::Connection::sendSyncMessage((uint64_t)v18, (uint64_t)v126, (uint64_t *)v145, 0, (uint64_t)v124, v14);
    if (DWORD2(v124[0]))
    {
      if (DWORD2(v124[0]) == 1)
      {
        LOBYTE(v129) = v124[0];
        int v53 = 1;
        int v144 = 1;
LABEL_92:
        ((void (*)(long long *, long long *))off_1EE9EB478[v53])(&v104, v124);
        goto LABEL_93;
      }
LABEL_156:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_157;
    }
    LOBYTE(v104) = 0;
    char v118 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(*(IPC::Decoder **)&v124[0], (uint64_t)&v104);
    if (v118)
    {
      if (DWORD2(v124[0])) {
        goto LABEL_156;
      }
      IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ConnectionSendSyncResult((uint64_t)&v129, (uint64_t *)v124, &v104);
      if (v118) {
        std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v104, v54);
      }
    }
    else
    {
      LOBYTE(v129) = 13;
      int v144 = 1;
    }
    int v53 = DWORD2(v124[0]);
    if (DWORD2(v124[0]) != -1) {
      goto LABEL_92;
    }
LABEL_93:
    unsigned int v55 = (IPC::Encoder *)v145[0];
    v145[0] = 0;
    if (v55)
    {
      IPC::Encoder::~Encoder(v55, v54);
      WTF::fastFree(v75, v76);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v103);
LABEL_96:
    if (v144) {
      goto LABEL_97;
    }
    LOBYTE(v104) = 0;
    char v117 = 0;
    if (!v143) {
      break;
    }
    int v93 = v6;
    char v18 = (uint64_t **)&v104;
    long long v113 = v139;
    long long v114 = v140;
    long long v115 = v141;
    long long v109 = v135;
    long long v110 = v136;
    long long v111 = v137;
    long long v112 = v138;
    long long v107 = v133;
    long long v108 = v134;
    uint64_t v57 = v131;
    *(void *)&long long v104 = v130;
    unint64_t v131 = 0;
    unint64_t v130 = 0;
    int v58 = v132;
    int v59 = HIDWORD(v132);
    uint64_t v132 = 0;
    char v116 = v142;
    uint64_t v19 = 1;
    char v117 = 1;
    uint64_t v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v11 = 1;
    *((void *)&v104 + 1) = 0;
    v11[1] = v57;
    int v105 = 0;
    *((_DWORD *)v11 + 4) = v58;
    int v106 = 0;
    *((_DWORD *)v11 + 5) = v59;
    unint64_t v16 = *((void *)&v110 + 1);
    uint64_t v60 = v111;
    uint64_t v12 = v112;
    double v6 = (_DWORD *)*((void *)&v112 + 1);
    long long v95 = v108;
    long long v96 = v107;
    long long v94 = v109;
    double v14 = *(double *)&v110;
    uint64_t v61 = *((void *)&v111 + 1);
    long long v98 = v114;
    long long v99 = v113;
    long long v97 = v115;
    uint64_t v62 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)uint64_t v62 = 1;
    *(_OWORD *)(v62 + 4) = v96;
    *(_OWORD *)(v62 + 20) = v95;
    *(_OWORD *)(v62 + 36) = v94;
    *(double *)(v62 + 52) = v14;
    *(void *)(v62 + 64) = v16;
    *(void *)(v62 + 72) = v60;
    *(void *)(v62 + 80) = v61;
    *(_DWORD *)(v62 + 88) = v12;
    *(void *)(v62 + 96) = v6;
    *(_OWORD *)(v62 + 104) = v99;
    *(_OWORD *)(v62 + 120) = v98;
    *(_OWORD *)(v62 + 136) = v97;
    if (v117)
    {
      unint64_t v63 = (WTF *)v62;
      char v64 = v116;
      char v65 = *((unsigned char *)v93 + 3);
      uint64_t v66 = (uint64_t)v100;
      uint64_t v67 = WTF::fastMalloc((WTF *)0x58);
      *(_DWORD *)(v67 + 8) = 1;
      uint64_t v68 = v104;
      *(void *)&long long v104 = 0;
      *(void *)(v67 + 16) = 0;
      *(void *)(v67 + 24) = v68;
      ++*(_DWORD *)v11;
      *(void *)(v67 + 32) = v11;
      ++*(_DWORD *)v63;
      *(void *)(v67 + 40) = v63;
      *(unsigned char *)(v67 + 48) = v64;
      *(void *)uint64_t v67 = &unk_1EE9EA498;
      *(void *)(v67 + 56) = v66;
      ++v8[2];
      *(void *)(v67 + 64) = v8;
      atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 1u);
      *(void *)(v67 + 72) = a1;
      *(unsigned char *)(v67 + 80) = v65;
      *(void *)&v124[0] = v67;
      uint64_t v69 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v69 + 16))(v69, v124);
      (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
      int v71 = *(_DWORD **)&v124[0];
      *(void *)&v124[0] = 0;
      if (v71)
      {
        if (v71[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v71 + 8))(v71);
        }
        else {
          --v71[2];
        }
      }
      if (*(_DWORD *)v63 == 1) {
        WTF::fastFree(v63, v70);
      }
      else {
        --*(_DWORD *)v63;
      }
      WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref((WTF *)v11, v70);
      goto LABEL_114;
    }
    while (1)
    {
LABEL_152:
      __break(1u);
LABEL_153:
      unint64_t v17 = 0;
      unint64_t v22 = 0;
      unint64_t v130 = 0;
LABEL_14:
      unint64_t v23 = (void *)((v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v23 >= v16 + v22)
      {
        unint64_t v24 = (char *)v23 - v16;
        if ((unint64_t)v23 - v16 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v24 + 8) > v17)
        {
          unint64_t v130 = 0;
        }
        else
        {
          *unint64_t v23 = v19;
          unint64_t v131 = (unint64_t)(v24 + 8);
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(&v129, &v101);
      unint64_t v25 = v131;
      unint64_t v26 = (void *)((v129 + v131 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v26 >= v129 + v131)
      {
        unint64_t v27 = (char *)v26 - v129;
        if ((unint64_t)v26 - v129 > 0xFFFFFFFFFFFFFFF7
          || (unint64_t v25 = (unint64_t)(v27 + 8), (unint64_t)(v27 + 8) > v130))
        {
LABEL_51:
          LOBYTE(v126) = 0;
          char v128 = 0;
          goto LABEL_54;
        }
        void *v26 = v100;
        unint64_t v131 = (unint64_t)(v27 + 8);
      }
      if (!v130) {
        goto LABEL_51;
      }
      unint64_t v28 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v29 = *(void *)(v12 + 64);
      if (v28 + 16 >= v29) {
        unint64_t v28 = 0;
      }
      if (v25 <= 0x10) {
        unint64_t v25 = 16;
      }
      unint64_t v30 = v28 + v25;
      if (v29 <= v30) {
        unint64_t v30 = 0;
      }
      *(void *)(v12 + 80) = v30;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v30) == 0x80000000
        || *(_DWORD *)(v12 + 116))
      {
        if (*(unsigned char *)(v12 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
        }
        *(_DWORD *)(v12 + 116) = 0;
      }
      unint64_t v16 = v12 + 96;
      while (1)
      {
        unint64_t v31 = atomic_exchange(*(atomic_ullong *volatile *)(*(void *)(v12 + 72) + 16), 0x80000000uLL);
        if (!(v31 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
        if (*(unsigned char *)(v12 + 104))
        }
        {
          BOOL v32 = IPC::Semaphore::waitFor((semaphore_t *)(v12 + 96), v14);
          if (v32)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
            if (v33 < v14) {
              continue;
            }
          }
        }
        LOBYTE(v126) = 16;
        int v127 = 1;
LABEL_53:
        char v128 = 1;
        goto LABEL_54;
      }
      atomic_store(0, *(unint64_t **)(*(void *)(v12 + 72) + 16));
      *(void *)(v12 + 80) = 0;
      uint64_t v34 = *(void *)(v12 + 72);
      unint64_t v35 = *(void *)(v34 + 8);
      if (v35 > 0xFF)
      {
        uint64_t v36 = *(void *)(v12 + 64);
        uint64_t v37 = *(void *)(v34 + 16);
        unint64_t v16 = v35 - 256;
        if (!v36 || (v38 = v36 - 1, v39 = v16 >= v38, unint64_t v16 = v38, v39))
        {
          uint64_t v40 = v37 + 256;
          uint64_t v41 = WTF::fastMalloc((WTF *)0x50);
          int v42 = (IPC::Decoder *)IPC::Decoder::Decoder(v41, v40, v16, *(void *)(v12 + 56));
          if (*((_WORD *)v42 + 25) != 2870)
          {
            v126 = v42;
            int v127 = 0;
            goto LABEL_53;
          }
          IPC::Decoder::~Decoder(v42);
          WTF::fastFree(v43, v44);
          IPC::Connection::waitForSyncReply((uint64_t)v145[0], v19, 0xE34u, (uint64_t)v124, v14);
          LOBYTE(v126) = 0;
          int v127 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v126, (uint64_t)v124);
          char v128 = 1;
          if (DWORD2(v124[0]) != -1) {
            ((void (*)(uint64_t ***, long long *))off_1EE9EB478[DWORD2(v124[0])])(&v103, v124);
          }
LABEL_54:
          IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v145[0]);
          if (!v128)
          {
            LOBYTE(v104) = 0;
            char v120 = 0;
            goto LABEL_69;
          }
          if (v127 == 1)
          {
            LOBYTE(v104) = (_BYTE)v126;
            int v46 = 1;
            int v119 = 1;
            char v120 = 1;
            goto LABEL_68;
          }
          if (v127) {
            goto LABEL_156;
          }
          LOBYTE(v124[0]) = 0;
          char v125 = 0;
          IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(v126, (uint64_t)v124);
          if (!v125)
          {
            LOBYTE(v104) = 13;
            int v119 = 1;
            char v120 = 1;
            goto LABEL_66;
          }
          if (v128) {
            break;
          }
        }
      }
    }
    if (v127) {
      goto LABEL_156;
    }
    IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ConnectionSendSyncResult((uint64_t)&v129, (uint64_t *)&v126, v124);
    LOBYTE(v104) = 0;
    int v119 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v104, (uint64_t)&v129);
    char v120 = 1;
    if (v144 != -1) {
      ((void (*)(uint64_t ***, unint64_t *))off_1EE9EB120[v144])(&v103, &v129);
    }
    if (v125) {
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v124, v45);
    }
LABEL_66:
    if (v128)
    {
      int v46 = v127;
      if (v127 != -1)
      {
LABEL_68:
        ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9EB478[v46])(&v129, &v126);
        continue;
      }
    }
  }
  *(void *)&v124[0] = 0;
  uint64_t v72 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v72 + 16))(v72, v124);
  (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  unint64_t v74 = *(_DWORD **)&v124[0];
  *(void *)&v124[0] = 0;
  if (v74)
  {
    if (v74[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v74 + 8))(v74);
    }
    else {
      --v74[2];
    }
  }
LABEL_114:
  double result = (_DWORD *)std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v104, v73);
LABEL_115:
  if (v144 != -1) {
    double result = (_DWORD *)((uint64_t (*)(long long *, unint64_t *))off_1EE9EB120[v144])(&v104, &v129);
  }
  if (v8[2] == 1) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  --v8[2];
  return result;
}

_DWORD *WebKit::RemoteGPUProxy::createPresentationContext@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  double v6 = *(_DWORD **)(a1 + 40);
  ++v6[2];
  double v7 = (_DWORD *)*a2;
  v7[2] = *(_DWORD *)(*a2 + 8) + 1;
  uint64_t v8 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v6 + 64))(v6, v7);
  ++*(_DWORD *)(v8 + 8);
  if (v7[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  else {
    --v7[2];
  }
  double result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void))(*(void *)v6 + 72))(v6, *a2);
  v64[0] = (uint64_t)result;
  v64[1] = result != 0;
  if (!result)
  {
    *a3 = 0;
    goto LABEL_56;
  }
  int v10 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v63 = v10;
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  double v13 = *(double *)(v11 + 120);
  double v14 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now(v10);
    double v14 = v13 + v15;
  }
  if (*(void *)(v11 + 56) == v12) {
    goto LABEL_8;
  }
  double result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v66, v14);
  if (v68)
  {
    unint64_t v46 = v66;
    unint64_t v47 = v67;
    unint64_t v48 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - v66;
    if (v48 < v66)
    {
      unint64_t v51 = 0;
      unint64_t v50 = v67;
    }
    else
    {
      unint64_t v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v51 = 0;
      }
      else
      {
        unint64_t v51 = 0;
        if (v49 + 2 <= v67)
        {
          *(_WORD *)(v66 + v49) = 2871;
          unint64_t v50 = v47;
          unint64_t v51 = v49 + 2;
        }
      }
    }
    unint64_t v52 = (void *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v52 >= v46 + v51)
    {
      int v53 = (char *)v52 - v46;
      if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_50;
      }
      unint64_t v51 = (unint64_t)(v53 + 8);
      if ((unint64_t)(v53 + 8) > v50) {
        goto LABEL_50;
      }
      *unint64_t v52 = v12;
    }
    if (v50)
    {
      unint64_t v54 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *(void *)(v11 + 64);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v51 <= 0x10) {
        unint64_t v51 = 16;
      }
      unint64_t v56 = v54 + v51;
      if (v55 <= v56) {
        unint64_t v57 = 0;
      }
      else {
        unint64_t v57 = v56;
      }
      *(void *)(v11 + 80) = v57;
      unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v57);
      int v59 = *(_DWORD *)(v11 + 116);
      if (v58 == 0x80000000 || v59 != 0)
      {
        unsigned int v61 = v59 + 1;
        *(_DWORD *)(v11 + 116) = v61;
        if (v61 >= *(_DWORD *)(v11 + 112))
        {
          if (*(unsigned char *)(v11 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
          }
          *(_DWORD *)(v11 + 116) = 0;
        }
      }
      *(void *)(v11 + 56) = v12;
LABEL_8:
      double result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v66, v14);
      if (v68)
      {
        unint64_t v16 = v66;
        unint64_t v17 = v67;
        unint64_t v18 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v19 = v18 - v66;
        if (v18 < v66)
        {
          unint64_t v21 = 0;
          unint64_t v20 = v67;
        }
        else
        {
          unint64_t v20 = 0;
          if (v19 > 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_90;
          }
          unint64_t v21 = 0;
          if (v19 + 2 <= v67)
          {
            *(_WORD *)(v66 + v19) = 900;
            unint64_t v20 = v17;
            unint64_t v21 = v19 + 2;
          }
        }
        while (1)
        {
          unint64_t v22 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
          BOOL v23 = v22 >= v16 + v21;
          unint64_t v24 = v22 - (v16 + v21);
          if (v23)
          {
            unint64_t v62 = 0;
            unint64_t v25 = v24 + v21;
            if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= v20)
            {
              *(void *)(v16 + v25) = v64[0];
              unint64_t v62 = v20;
              unint64_t v21 = v25 + 8;
            }
          }
          else
          {
            unint64_t v62 = v20;
          }
          unint64_t v26 = (void *)((v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v20 = (unint64_t)v26 - v16 - v21;
          if ((unint64_t)v26 >= v16 + v21)
          {
            unint64_t v20 = (unint64_t)v26 - v16;
            if ((unint64_t)v26 - v16 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_36;
            }
            unint64_t v21 = v20 + 8;
            if (v20 + 8 > v62) {
              goto LABEL_36;
            }
            void *v26 = v63;
          }
          if (v62)
          {
            unint64_t v27 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v28 = *(void *)(v11 + 64);
            if (v27 + 16 >= v28) {
              unint64_t v27 = 0;
            }
            if (v21 <= 0x10) {
              unint64_t v21 = 16;
            }
            unint64_t v29 = v27 + v21;
            if (v28 <= v29) {
              unint64_t v30 = 0;
            }
            else {
              unint64_t v30 = v29;
            }
            *(void *)(v11 + 80) = v30;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v30) == 0x80000000
              || *(_DWORD *)(v11 + 116))
            {
              if (*(unsigned char *)(v11 + 104)) {
                MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
              }
              *(_DWORD *)(v11 + 116) = 0;
            }
            goto LABEL_51;
          }
LABEL_36:
          unint64_t v16 = v68;
          if (v68)
          {
            unint64_t v31 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v32 = v31 - v66;
            if (v31 < v66)
            {
              unint64_t v33 = 0;
            }
            else
            {
              unint64_t v33 = 0;
              if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v67)
              {
                *(_WORD *)(v66 + v32) = 2870;
                unint64_t v33 = v32 + 2;
              }
            }
            unint64_t v34 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *(void *)(v11 + 64);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v33 <= 0x10) {
              unint64_t v33 = 16;
            }
            unint64_t v36 = v34 + v33;
            if (v35 <= v36) {
              unint64_t v36 = 0;
            }
            *(void *)(v11 + 80) = v36;
            atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v36);
            *(_DWORD *)(v11 + 116) = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v11 + 8));
            uint64_t v37 = v65;
            unint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)unint64_t v38 = 900;
            *((void *)v38 + 1) = v12;
            *((void *)v38 + 66) = (char *)v38 + 16;
            *((void *)v38 + 67) = 512;
            *((void *)v38 + 68) = 0;
            *((void *)v38 + 70) = 0;
            *((void *)v38 + 69) = 0;
            IPC::Encoder::encodeHeader(v38);
            uint64_t v69 = v38;
            IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, v64);
            IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, (uint64_t *)&v63);
            int v40 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v69, 1, 0);
            uint64_t v41 = v69;
            uint64_t v69 = 0;
            if (v41)
            {
              IPC::Encoder::~Encoder(v41, v39);
              WTF::fastFree(v44, v45);
            }
            double result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65);
            if (v40) {
              break;
            }
LABEL_51:
            uint64_t v43 = (uint64_t)v63;
            uint64_t v42 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v42 + 8) = 1;
            *(void *)(v42 + 16) = 0;
            *(void *)(v42 + 24) = v43;
            *(void *)uint64_t v42 = &unk_1EE9EADA0;
            ++v6[2];
            *(void *)(v42 + 32) = v6;
            atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 1u);
            *(void *)(v42 + 40) = a1;
            *(void *)(v42 + 48) = 0;
            ++*(_DWORD *)(v42 + 8);
            double result = *(_DWORD **)(v8 + 48);
            *(void *)(v8 + 48) = v42;
            if (result)
            {
              if (result[2] == 1) {
                double result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
              }
              else {
                --result[2];
              }
            }
            goto LABEL_55;
          }
          __break(1u);
LABEL_90:
          unint64_t v21 = v20;
        }
      }
    }
  }
LABEL_50:
  uint64_t v42 = 0;
LABEL_55:
  *a3 = v42;
LABEL_56:
  if (*(_DWORD *)(v8 + 8) == 1) {
    double result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  else {
    --*(_DWORD *)(v8 + 8);
  }
  if (v6[2] == 1) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  --v6[2];
  return result;
}

uint64_t WebKit::RemoteGPUProxy::createCompositorIntegration@<X0>(WebKit::RemoteGPUProxy *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v52 = v4;
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)this + 11);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(v4);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) == v6) {
    goto LABEL_4;
  }
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v54, v8);
  if (!v56) {
    goto LABEL_42;
  }
  unint64_t v38 = v54;
  unint64_t v37 = v55;
  unint64_t v39 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v54;
  if (v39 < v54) {
    goto LABEL_81;
  }
  unint64_t v41 = v40 + 2;
  if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v55)
  {
    unint64_t v37 = 0;
LABEL_81:
    unint64_t v41 = 0;
    goto LABEL_53;
  }
  *(_WORD *)(v54 + v40) = 2871;
LABEL_53:
  uint64_t v43 = (void *)((v38 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v43 >= v38 + v41)
  {
    unint64_t v41 = (unint64_t)v43 - v38 + 8;
    if ((unint64_t)v43 - v38 > 0xFFFFFFFFFFFFFFF7 || v41 > v37) {
      goto LABEL_42;
    }
    void *v43 = v6;
  }
  if (!v37)
  {
LABEL_42:
    *a2 = 0;
    return result;
  }
  unint64_t v45 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(v5 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v47 = v45 + v41;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(v5 + 80) = v47;
  unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v47);
  int v49 = *(_DWORD *)(v5 + 116);
  if (v48 == 0x80000000 || v49 != 0)
  {
    unsigned int v51 = v49 + 1;
    *(_DWORD *)(v5 + 116) = v51;
    if (v51 >= *(_DWORD *)(v5 + 112))
    {
      if (*(unsigned char *)(v5 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  *(void *)(v5 + 56) = v6;
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v54, v8);
  if (!v56) {
    goto LABEL_42;
  }
  unint64_t v12 = v54;
  unint64_t v11 = v55;
  unint64_t v13 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - v54;
  if (v13 >= v54)
  {
    unint64_t v15 = v14 + 2;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= v55)
    {
      *(_WORD *)(v54 + v14) = 899;
      goto LABEL_11;
    }
    unint64_t v11 = 0;
  }
  unint64_t v15 = 0;
LABEL_11:
  unint64_t v17 = (void *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v17 >= v12 + v15)
  {
    unint64_t v15 = (unint64_t)v17 - v12 + 8;
    if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7 || v15 > v11)
    {
LABEL_29:
      unint64_t v23 = v56;
      if (v56)
      {
        unint64_t v24 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v25 = v24 - v54;
        if (v24 < v54)
        {
          unint64_t v23 = 0;
        }
        else
        {
          unint64_t v23 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v55)
          {
            *(_WORD *)(v54 + v25) = 2870;
            unint64_t v23 = v25 + 2;
          }
        }
        unint64_t v26 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v11 = *(void *)(v5 + 64);
        if (v26 + 16 < v11)
        {
LABEL_35:
          if (v23 <= 0x10) {
            unint64_t v23 = 16;
          }
          unint64_t v27 = v26 + v23;
          if (v11 <= v27) {
            unint64_t v27 = 0;
          }
          *(void *)(v5 + 80) = v27;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v27);
          *(_DWORD *)(v5 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(v5 + 8));
          unint64_t v28 = v53;
          unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v29 = 899;
          *((void *)v29 + 1) = v6;
          *((void *)v29 + 66) = (char *)v29 + 16;
          *((void *)v29 + 67) = 512;
          *((void *)v29 + 68) = 0;
          *((void *)v29 + 70) = 0;
          *((void *)v29 + 69) = 0;
          IPC::Encoder::encodeHeader(v29);
          unint64_t v57 = v29;
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, (uint64_t *)&v52);
          int v31 = IPC::Connection::sendMessageImpl((uint64_t)v28, (uint64_t *)&v57, 1, 0);
          unint64_t v32 = v57;
          unint64_t v57 = 0;
          if (v32)
          {
            IPC::Encoder::~Encoder(v32, v30);
            WTF::fastFree(v35, v36);
          }
          uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53);
          if (!v31) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
      }
      else
      {
        __break(1u);
      }
      unint64_t v26 = 0;
      goto LABEL_35;
    }
    *unint64_t v17 = v52;
  }
  if (!v11) {
    goto LABEL_29;
  }
  uint64_t v19 = *(void *)(v5 + 72);
  unint64_t v20 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = *(void *)(v5 + 64);
  if (v20 + 16 >= v21) {
    unint64_t v20 = 0;
  }
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
  unint64_t v22 = v20 + v15;
  if (v21 <= v22) {
    unint64_t v22 = 0;
  }
  *(void *)(v5 + 80) = v22;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v19 + 16) + 128), v22) == 0x80000000
    || *(_DWORD *)(v5 + 116))
  {
    if (*(unsigned char *)(v5 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
    }
    *(_DWORD *)(v5 + 116) = 0;
  }
LABEL_43:
  unint64_t v33 = (_DWORD *)*((void *)this + 5);
  ++v33[2];
  uint64_t v34 = (uint64_t)v52;
  uint64_t result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v34;
  *(void *)uint64_t result = &unk_1EE9EA630;
  ++v33[2];
  *(void *)(result + 32) = v33;
  atomic_fetch_add((atomic_uint *volatile)this + 7, 1u);
  *(void *)(result + 40) = this;
  *(void *)(result + 48) = 0;
  *a2 = result;
  if (v33[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v33 + 8))(v33);
  }
  --v33[2];
  return result;
}

void WebKit::RemoteGPUProxy::isValid()
{
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::Buffer *a2)
{
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::Adapter *a2)
{
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::BindGroup *a2)
{
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::BindGroupLayout *a2)
{
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::CommandBuffer *a2)
{
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::CommandEncoder *a2)
{
}

void WebKit::RemoteGPUProxy::isValid(WebKit::RemoteGPUProxy *this, const WebCore::WebGPU::ComputePassEncoder *a2)
{
}

atomic_uchar *WebKit::RemoteGPUProxy::Dispatcher::dispatch(atomic_uchar *result)
{
  int v1 = *((_DWORD *)result + 4);
  if (v1 == 1)
  {
    if (*(void *)result)
    {
      uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v6, *(atomic_uchar **)result, *((void *)result + 1));
      uint64_t v2 = v6;
      if (v6)
      {
        WebCore::WorkerOrWorkletThread::dispatch();
        uint64_t v4 = *(atomic_uchar **)(v2 + 8);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>(v4, v3);
      }
    }
  }
  else if (v1)
  {
    uint64_t v5 = (WebKit::RemoteGPUProxy::Dispatcher *)std::__throw_bad_variant_access[abi:sn180100]();
    return (atomic_uchar *)WebKit::RemoteGPUProxy::Dispatcher::isCurrent(v5);
  }
  else
  {
    return (atomic_uchar *)WTF::RunLoop::dispatch();
  }
  return result;
}

void WebKit::RemoteGPUProxy::Dispatcher::isCurrent(WebKit::RemoteGPUProxy::Dispatcher *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1 == 1)
  {
    if (*(void *)this)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v6, *(atomic_uchar **)this, *((void *)this + 1));
      double v3 = v6;
      if (v6)
      {
        WebCore::WorkerOrWorkletThread::isCurrent(v6);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>(*((atomic_uchar **)v3 + 1), v4);
      }
    }
  }
  else if (v1)
  {
    uint64_t v5 = (WebKit::WebGPU::RemotePipelineLayoutProxy *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::WebGPU::RemotePipelineLayoutProxy::~RemotePipelineLayoutProxy(v5);
  }
  else
  {
    uint64_t v2 = *(WTF::RunLoop **)this;
    WTF::RunLoop::isCurrent(v2);
  }
}

void WebKit::WebGPU::RemotePipelineLayoutProxy::~RemotePipelineLayoutProxy(WebKit::WebGPU::RemotePipelineLayoutProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  int v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *int v10 = 1258;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    int v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1258;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  uint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  uint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB150;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemotePipelineLayoutProxy::~RemotePipelineLayoutProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemotePipelineLayoutProxy::setLabelInternal(WebKit::WebGPU::RemotePipelineLayoutProxy *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)a2;
  return IPC::StreamClientConnection::send<Messages::RemotePipelineLayout::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80), &v3, *((void *)this + 4));
}

void WebKit::WebGPU::RemotePresentationContextProxy::~RemotePresentationContextProxy(WebKit::WebGPU::RemotePresentationContextProxy *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  double v4 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 7);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  double v5 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    double v7 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebGPU::RemotePresentationContextProxy::~RemotePresentationContextProxy(this, a2);

  WTF::fastFree(v2, v3);
}

BOOL WebKit::WebGPU::RemotePresentationContextProxy::configure(void *a1, uint64_t a2)
{
  uint64_t v3 = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a2, (uint64_t)v50);
  if (!v53) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1[5] + 80);
  uint64_t v5 = a1[3];
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(v3);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5)
  {
LABEL_5:
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v55, v7);
    if (!v57)
    {
      BOOL v20 = 0;
      goto LABEL_41;
    }
    unint64_t v58 = v55;
    unint64_t v59 = v56;
    unint64_t v60 = 0;
    unint64_t v10 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v11 = v10 >= v55;
    unint64_t v12 = v10 - v55;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v56)
      {
        unint64_t v59 = 0;
      }
      else
      {
        *(_WORD *)(v55 + v12) = 1260;
        unint64_t v60 = v12 + 2;
      }
    }
    IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::encode(&v58, (uint64_t)v50);
    if (v59)
    {
      uint64_t v15 = v60;
      uint64_t v16 = *(void *)(v4 + 72);
      unint64_t v17 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v18 = *(void *)(v4 + 64);
      if (v17 + 16 >= v18) {
        unint64_t v17 = 0;
      }
      if (v60 <= 0x10) {
        uint64_t v15 = 16;
      }
      unint64_t v19 = v17 + v15;
      if (v18 <= v19) {
        unint64_t v19 = 0;
      }
      *(void *)(v4 + 80) = v19;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
        || *(_DWORD *)(v4 + 116))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
      BOOL v20 = 1;
      goto LABEL_41;
    }
    unint64_t v21 = v57;
    if (v57)
    {
      unint64_t v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v23 = v22 - v55;
      if (v22 < v55)
      {
        unint64_t v21 = 0;
      }
      else
      {
        unint64_t v21 = 0;
        if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
        {
          *(_WORD *)(v55 + v23) = 2870;
          unint64_t v21 = v23 + 2;
        }
      }
      unint64_t v24 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v14 = *(void *)(v4 + 64);
      if (v24 + 16 < v14) {
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v24 = 0;
LABEL_34:
    if (v21 <= 0x10) {
      unint64_t v21 = 16;
    }
    unint64_t v25 = v24 + v21;
    if (v14 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(v4 + 80) = v25;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v25);
    *(_DWORD *)(v4 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v4 + 8));
    unint64_t v26 = v54;
    unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v27 = 1260;
    *((void *)v27 + 1) = v5;
    *((void *)v27 + 66) = (char *)v27 + 16;
    *((void *)v27 + 67) = 512;
    *((void *)v27 + 68) = 0;
    *((void *)v27 + 70) = 0;
    *((void *)v27 + 69) = 0;
    IPC::Encoder::encodeHeader(v27);
    unint64_t v58 = (unint64_t)v27;
    IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::encode(v27, (uint64_t)v50);
    int v29 = IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v58, 1, 0);
    int v30 = (IPC::Encoder *)v58;
    unint64_t v58 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v28);
      WTF::fastFree(v33, v34);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
    BOOL v20 = v29 == 0;
LABEL_41:
    if (!v53) {
      return v20;
    }
    goto LABEL_42;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v58, v7);
  if (!(_BYTE)v60) {
    goto LABEL_78;
  }
  unint64_t v36 = v58;
  unint64_t v35 = v59;
  unint64_t v37 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = v37 - v58;
  if (v37 < v58) {
    goto LABEL_80;
  }
  unint64_t v39 = v38 + 2;
  if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v59)
  {
    unint64_t v35 = 0;
LABEL_80:
    unint64_t v39 = 0;
    goto LABEL_52;
  }
  *(_WORD *)(v58 + v38) = 2871;
LABEL_52:
  unint64_t v41 = (void *)((v36 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v41 >= v36 + v39)
  {
    unint64_t v39 = (unint64_t)v41 - v36 + 8;
    if ((unint64_t)v41 - v36 > 0xFFFFFFFFFFFFFFF7 || v39 > v35) {
      goto LABEL_78;
    }
    *unint64_t v41 = v5;
  }
  if (v35)
  {
    unint64_t v43 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *(void *)(v4 + 64);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v39 <= 0x10) {
      unint64_t v39 = 16;
    }
    unint64_t v45 = v43 + v39;
    if (v44 <= v45) {
      unint64_t v45 = 0;
    }
    *(void *)(v4 + 80) = v45;
    unint64_t v46 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v45);
    int v47 = *(_DWORD *)(v4 + 116);
    if (v46 == 0x80000000 || v47 != 0)
    {
      unsigned int v49 = v47 + 1;
      *(_DWORD *)(v4 + 116) = v49;
      if (v49 >= *(_DWORD *)(v4 + 112))
      {
        if (*(unsigned char *)(v4 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
        }
        *(_DWORD *)(v4 + 116) = 0;
      }
    }
    *(void *)(v4 + 56) = v5;
    goto LABEL_5;
  }
LABEL_78:
  BOOL v20 = 0;
LABEL_42:
  int v31 = v51;
  if (v51)
  {
    unint64_t v51 = 0;
    int v52 = 0;
    WTF::fastFree(v31, v9);
  }
  return v20;
}

atomic_uchar *volatile **WebKit::WebGPU::RemotePresentationContextProxy::unconfigure(WebKit::WebGPU::RemotePresentationContextProxy *this)
{
  uint64_t v2 = (WTF::ApproximateTime *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1) {
      uint64_t v2 = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(void *)v2 + 8))(v2);
    }
    else {
      --*((_DWORD *)v2 + 2);
    }
  }
  uint64_t v3 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v4 = *((void *)this + 3);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(v2);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_8;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v47, v6);
  if (!v49) {
    return result;
  }
  unint64_t v20 = v47;
  unint64_t v19 = v48;
  unint64_t v21 = (v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v47;
  if (v21 < v47) {
    goto LABEL_57;
  }
  unint64_t v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v48)
  {
    unint64_t v19 = 0;
LABEL_57:
    unint64_t v23 = 0;
    goto LABEL_33;
  }
  *(_WORD *)(v47 + v22) = 2871;
LABEL_33:
  unint64_t v25 = (void *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    unint64_t v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19) {
      return result;
    }
    void *v25 = v4;
  }
  if (!v19) {
    return result;
  }
  unint64_t v27 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = *(void *)(v3 + 64);
  if (v27 + 16 >= v28) {
    unint64_t v27 = 0;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v29 = v27 + v23;
  if (v28 <= v29) {
    unint64_t v29 = 0;
  }
  *(void *)(v3 + 80) = v29;
  unint64_t v30 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v29);
  int v31 = *(_DWORD *)(v3 + 116);
  if (v30 == 0x80000000 || v31 != 0)
  {
    unsigned int v33 = v31 + 1;
    *(_DWORD *)(v3 + 116) = v33;
    if (v33 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_8:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v47, v6);
  if (!v49) {
    return result;
  }
  unint64_t v9 = v47;
  unint64_t v10 = v48;
  BOOL v11 = (_WORD *)((v47 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v12 = (unint64_t)v11 - v47;
  if ((unint64_t)v11 < v47)
  {
    unint64_t v13 = 0;
    if (v48) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v48)
    {
LABEL_61:
      unint64_t v13 = 0;
      BOOL v35 = (unint64_t)v11 >= v9;
      unint64_t v36 = (unint64_t)v11 - v9;
      if (v35 && v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v48)
      {
        *(_WORD *)(v9 + v36) = 2870;
        unint64_t v13 = v36 + 2;
      }
      unint64_t v37 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = *(void *)(v3 + 64);
      if (v37 + 16 < v34) {
        goto LABEL_67;
      }
      goto LABEL_77;
    }
    *BOOL v11 = 1263;
    if (v10)
    {
LABEL_15:
      uint64_t v15 = *(void *)(v3 + 72);
      unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = *(void *)(v3 + 64);
      if (v16 + 16 >= v17) {
        unint64_t v16 = 0;
      }
      if (v13 <= 0x10) {
        unint64_t v13 = 16;
      }
      unint64_t v18 = v16 + v13;
      if (v17 <= v18) {
        unint64_t v18 = 0;
      }
      *(void *)(v3 + 80) = v18;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v34 = v49;
  if (v49)
  {
    unint64_t v9 = v47;
    BOOL v11 = (_WORD *)((v47 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_61;
  }
  __break(1u);
LABEL_77:
  unint64_t v37 = 0;
LABEL_67:
  if (v13 <= 0x10) {
    unint64_t v13 = 16;
  }
  unint64_t v38 = v37 + v13;
  if (v34 <= v38) {
    unint64_t v39 = 0;
  }
  else {
    unint64_t v39 = v38;
  }
  *(void *)(v3 + 80) = v39;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v39);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(v3 + 8));
  unint64_t v40 = v46;
  unint64_t v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v41 = 1263;
  *((void *)v41 + 1) = v4;
  *((void *)v41 + 66) = (char *)v41 + 16;
  *((void *)v41 + 67) = 512;
  *((void *)v41 + 68) = 0;
  *((void *)v41 + 70) = 0;
  *((void *)v41 + 69) = 0;
  IPC::Encoder::encodeHeader(v41);
  unint64_t v50 = v41;
  IPC::Connection::sendMessageImpl((uint64_t)v40, (uint64_t *)&v50, 1, 0);
  unint64_t v43 = v50;
  unint64_t v50 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

uint64_t WebKit::WebGPU::RemotePresentationContextProxy::getCurrentTexture@<X0>(WebKit::WebGPU::RemotePresentationContextProxy *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    goto LABEL_2;
  }
  double v5 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v53 = v5;
  uint64_t v6 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v7 = *((void *)this + 3);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v5);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) == v7)
  {
LABEL_7:
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v55, v9);
    if (!v57) {
      goto LABEL_45;
    }
    unint64_t v12 = v55;
    unint64_t v11 = v56;
    unint64_t v13 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = v13 - v55;
    if (v13 >= v55)
    {
      unint64_t v15 = v14 + 2;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= v56)
      {
        *(_WORD *)(v55 + v14) = 1261;
        goto LABEL_14;
      }
      unint64_t v11 = 0;
    }
    unint64_t v15 = 0;
LABEL_14:
    unint64_t v17 = (void *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v12 + v15)
    {
      unint64_t v15 = (unint64_t)v17 - v12 + 8;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7 || v15 > v11)
      {
LABEL_31:
        unint64_t v15 = v57;
        if (!v57)
        {
          __break(1u);
          goto LABEL_84;
        }
        unint64_t v21 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v22 = v21 - v55;
        if (v21 < v55)
        {
          unint64_t v23 = 0;
        }
        else
        {
          unint64_t v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v56)
          {
            *(_WORD *)(v55 + v22) = 2870;
            unint64_t v23 = v22 + 2;
          }
        }
        unint64_t v24 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v25 = *(void *)(v6 + 64);
        if (v24 + 16 >= v25) {
          unint64_t v24 = 0;
        }
        if (v23 <= 0x10) {
          unint64_t v23 = 16;
        }
        unint64_t v26 = v24 + v23;
        if (v25 <= v26) {
          unint64_t v26 = 0;
        }
        *(void *)(v6 + 80) = v26;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v26);
        *(_DWORD *)(v6 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v6 + 8));
        unint64_t v27 = v54;
        unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v28 = 1261;
        *((void *)v28 + 1) = v7;
        *((void *)v28 + 66) = (char *)v28 + 16;
        *((void *)v28 + 67) = 512;
        *((void *)v28 + 68) = 0;
        *((void *)v28 + 70) = 0;
        *((void *)v28 + 69) = 0;
        IPC::Encoder::encodeHeader(v28);
        unint64_t v58 = v28;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v53);
        int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v58, 1, 0);
        int v31 = v58;
        unint64_t v58 = 0;
        if (v31)
        {
          IPC::Encoder::~Encoder(v31, v29);
          WTF::fastFree(v36, v37);
        }
        uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
        if (!v30)
        {
LABEL_46:
          uint64_t v33 = *((void *)this + 4);
          uint64_t v32 = *((void *)this + 5);
          uint64_t v34 = (uint64_t)v53;
          uint64_t result = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(result + 8) = 1;
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = 0;
          *(void *)uint64_t result = &unk_1EE9EB7A0;
          *(void *)(result + 32) = v34;
          ++*(_DWORD *)(v33 + 8);
          *(void *)(result + 40) = v33;
          atomic_fetch_add((atomic_uint *volatile)(v32 + 28), 1u);
          *(void *)(result + 48) = v32;
          BOOL v35 = (_DWORD *)*((void *)this + 6);
          *((void *)this + 6) = result;
          if (v35)
          {
            if (v35[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
              uint64_t result = *((void *)this + 6);
              if (!result) {
                goto LABEL_3;
              }
            }
            else
            {
              --v35[2];
            }
          }
LABEL_2:
          ++*(_DWORD *)(result + 8);
LABEL_3:
          *a2 = result;
          return result;
        }
        goto LABEL_45;
      }
      *unint64_t v17 = v53;
    }
    if (v11)
    {
      unint64_t v19 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v11 = *(void *)(v6 + 64);
      if (v19 + 16 < v11)
      {
LABEL_22:
        if (v15 <= 0x10) {
          unint64_t v15 = 16;
        }
        unint64_t v20 = v19 + v15;
        if (v11 <= v20) {
          unint64_t v20 = 0;
        }
        *(void *)(v6 + 80) = v20;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v20) == 0x80000000
          || *(_DWORD *)(v6 + 116))
        {
          if (*(unsigned char *)(v6 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
          }
          *(_DWORD *)(v6 + 116) = 0;
        }
        goto LABEL_46;
      }
LABEL_84:
      unint64_t v19 = 0;
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v55, v9);
  if (!v57) {
    goto LABEL_45;
  }
  unint64_t v39 = v55;
  unint64_t v38 = v56;
  unint64_t v40 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = v40 - v55;
  if (v40 >= v55)
  {
    unint64_t v42 = v41 + 2;
    if (v41 <= 0xFFFFFFFFFFFFFFFDLL && v42 <= v56)
    {
      *(_WORD *)(v55 + v41) = 2871;
      goto LABEL_58;
    }
    unint64_t v38 = 0;
  }
  unint64_t v42 = 0;
LABEL_58:
  unint64_t v44 = (void *)((v39 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v39 + v42)
  {
    unint64_t v42 = (unint64_t)v44 - v39 + 8;
    if ((unint64_t)v44 - v39 > 0xFFFFFFFFFFFFFFF7 || v42 > v38) {
      goto LABEL_45;
    }
    void *v44 = v7;
  }
  if (v38)
  {
    unint64_t v46 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(v6 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v42 <= 0x10) {
      unint64_t v42 = 16;
    }
    unint64_t v48 = v46 + v42;
    if (v47 <= v48) {
      unint64_t v48 = 0;
    }
    *(void *)(v6 + 80) = v48;
    unint64_t v49 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v48);
    int v50 = *(_DWORD *)(v6 + 116);
    if (v49 == 0x80000000 || v50 != 0)
    {
      unsigned int v52 = v50 + 1;
      *(_DWORD *)(v6 + 116) = v52;
      if (v52 >= *(_DWORD *)(v6 + 112))
      {
        if (*(unsigned char *)(v6 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
    }
    *(void *)(v6 + 56) = v7;
    goto LABEL_7;
  }
LABEL_45:
  *a2 = 0;
  return result;
}

_DWORD *WebKit::WebGPU::RemotePresentationContextProxy::present(WebKit::WebGPU::RemotePresentationContextProxy *this, int a2)
{
  uint64_t result = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!result)
  {
LABEL_4:
    if (!a2) {
      return result;
    }
    goto LABEL_5;
  }
  if (result[2] != 1)
  {
    --result[2];
    goto LABEL_4;
  }
  uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
  if (!a2) {
    return result;
  }
LABEL_5:
  char v5 = 0;
  return (_DWORD *)IPC::StreamClientConnection::send<Messages::RemotePresentationContext::Present,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*((void *)this + 5) + 80), (uint64_t)&v5, *((void *)this + 3));
}

void WebKit::WebGPU::RemotePresentationContextProxy::getMetalTextureAsNativeImage(WebKit::WebGPU::RemotePresentationContextProxy *this, unsigned int a2, BOOL *a3)
{
}

void WebKit::WebGPU::RemoteQuerySetProxy::~RemoteQuerySetProxy(WebKit::WebGPU::RemoteQuerySetProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  double v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *double v10 = 1265;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    double v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1265;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unint64_t v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB178;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteQuerySetProxy::~RemoteQuerySetProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteQuerySetProxy::destroy(WebKit::WebGPU::RemoteQuerySetProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1264;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1264;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteQuerySetProxy::setLabelInternal(WebKit::WebGPU::RemoteQuerySetProxy *this, const WTF::String *a2)
{
  double v3 = (uint64_t *)a2;
  return IPC::StreamClientConnection::send<Messages::RemoteQuerySet::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80), &v3, *((void *)this + 4));
}

void WebKit::WebGPU::RemoteQueueProxy::~RemoteQueueProxy(WebKit::WebGPU::RemoteQueueProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 6) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  unint64_t v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *unint64_t v10 = 1268;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    unint64_t v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1268;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unint64_t v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB1A8;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unsigned __int8 v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteQueueProxy::~RemoteQueueProxy(this);

  WTF::fastFree(v1, v2);
}

WTF *WebKit::WebGPU::RemoteQueueProxy::submit(WTF *result, uint64_t a2)
{
  uint64_t v2 = result;
  unint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      goto LABEL_91;
    }
    LODWORD(v57) = *(_DWORD *)(a2 + 12);
    unint64_t v56 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v5)
    {
      double v6 = *(void **)a2;
      uint64_t v7 = 8 * v5;
      while (1)
      {
        unint64_t v8 = (_DWORD *)*((void *)v2 + 5);
        ++v8[2];
        uint64_t v9 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v8 + 48))(v8, *v6);
        unint64_t v10 = (IPC::Encoder *)v9;
        if (v8[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          if (v10)
          {
LABEL_9:
            unint64_t v62 = v10;
            if (HIDWORD(v57) == v57)
            {
              unint64_t v11 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)&v62);
              *((void *)v56 + HIDWORD(v57)) = *v11;
            }
            else
            {
              *((void *)v56 + HIDWORD(v57)) = v10;
            }
            ++HIDWORD(v57);
          }
        }
        else
        {
          --v8[2];
          if (v9) {
            goto LABEL_9;
          }
        }
        ++v6;
        v7 -= 8;
        if (!v7)
        {
          unint64_t v12 = HIDWORD(v57);
          goto LABEL_16;
        }
      }
    }
  }
  unint64_t v12 = 0;
LABEL_16:
  uint64_t v13 = (WTF::ApproximateTime *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v56, v12);
  uint64_t v14 = *(void *)(*(void *)(*((void *)v2 + 6) + 72) + 80);
  uint64_t v15 = *((void *)v2 + 4);
  double v16 = *(double *)(v14 + 120);
  double v17 = INFINITY;
  if (fabs(v16) != INFINITY)
  {
    WTF::ApproximateTime::now(v13);
    double v17 = v16 + v18;
  }
  if (*(void *)(v14 + 56) == v15) {
    goto LABEL_19;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v14 + 64, &v62, v17);
  if (!(_BYTE)v64) {
    goto LABEL_53;
  }
  unint64_t v42 = v62;
  unint64_t v41 = v63;
  unint64_t v43 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v44 = v43 - (void)v62;
  if (v43 >= (unint64_t)v62)
  {
    unint64_t v45 = v44 + 2;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v45 <= v63)
    {
      *(_WORD *)((char *)v62 + v44) = 2871;
      goto LABEL_63;
    }
    unint64_t v41 = 0;
  }
  unint64_t v45 = 0;
LABEL_63:
  unsigned __int8 v47 = (char *)(((unint64_t)v42 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v47 >= (char *)v42 + v45)
  {
    unint64_t v45 = v47 - (char *)v42 + 8;
    if ((unint64_t)(v47 - (char *)v42) > 0xFFFFFFFFFFFFFFF7 || v45 > v41) {
      goto LABEL_53;
    }
    *(void *)unsigned __int8 v47 = v15;
  }
  if (v41)
  {
    unint64_t v49 = (*(void *)(v14 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = *(void *)(v14 + 64);
    if (v49 + 16 >= v50) {
      unint64_t v49 = 0;
    }
    if (v45 <= 0x10) {
      unint64_t v45 = 16;
    }
    unint64_t v51 = v49 + v45;
    if (v50 <= v51) {
      unint64_t v51 = 0;
    }
    *(void *)(v14 + 80) = v51;
    unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v14 + 72) + 16) + 128), v51);
    int v53 = *(_DWORD *)(v14 + 116);
    if (v52 == 0x80000000 || v53 != 0)
    {
      unsigned int v55 = v53 + 1;
      *(_DWORD *)(v14 + 116) = v55;
      if (v55 >= *(_DWORD *)(v14 + 112))
      {
        if (*(unsigned char *)(v14 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v14 + 92));
        }
        *(_DWORD *)(v14 + 116) = 0;
      }
    }
    *(void *)(v14 + 56) = v15;
LABEL_19:
    IPC::StreamClientConnectionBuffer::tryAcquire(v14 + 64, &v59, v17);
    if (v61)
    {
      unint64_t v62 = v59;
      unint64_t v63 = v60;
      unint64_t v64 = 0;
      unint64_t v20 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v21 = v20 >= (unint64_t)v59;
      unint64_t v22 = v20 - (void)v59;
      if (v21)
      {
        if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v60)
        {
          unint64_t v63 = 0;
        }
        else
        {
          *(_WORD *)((char *)v59 + v22) = 1271;
          unint64_t v64 = v22 + 2;
        }
      }
      uint64_t result = (WTF *)IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v62, (uint64_t)&v56);
      if (v63)
      {
        uint64_t v24 = v64;
        uint64_t v25 = *(void *)(v14 + 72);
        unint64_t v26 = (*(void *)(v14 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v27 = *(void *)(v14 + 64);
        if (v26 + 16 >= v27) {
          unint64_t v26 = 0;
        }
        if (v64 <= 0x10) {
          uint64_t v24 = 16;
        }
        unint64_t v28 = v26 + v24;
        if (v27 <= v28) {
          unint64_t v28 = 0;
        }
        *(void *)(v14 + 80) = v28;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v25 + 16) + 128), v28) == 0x80000000
          || *(_DWORD *)(v14 + 116))
        {
          if (*(unsigned char *)(v14 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v14 + 92));
          }
          *(_DWORD *)(v14 + 116) = 0;
        }
        goto LABEL_53;
      }
      if (v61)
      {
        unint64_t v29 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v30 = v29 - (void)v59;
        if (v29 < (unint64_t)v59)
        {
          unint64_t v31 = 0;
        }
        else
        {
          unint64_t v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v60)
          {
            *(_WORD *)((char *)v59 + v30) = 2870;
            unint64_t v31 = v30 + 2;
          }
        }
        unint64_t v32 = (*(void *)(v14 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v33 = *(void *)(v14 + 64);
        if (v32 + 16 >= v33) {
          unint64_t v32 = 0;
        }
        if (v31 <= 0x10) {
          unint64_t v31 = 16;
        }
        unint64_t v34 = v32 + v31;
        if (v33 <= v34) {
          unint64_t v34 = 0;
        }
        *(void *)(v14 + 80) = v34;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v14 + 72) + 16) + 128), v34);
        *(_DWORD *)(v14 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v14 + 8));
        unint64_t v35 = v58;
        unint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v36 = 1271;
        *((void *)v36 + 1) = v15;
        *((void *)v36 + 66) = (char *)v36 + 16;
        *((void *)v36 + 67) = 512;
        *((void *)v36 + 68) = 0;
        *((void *)v36 + 70) = 0;
        *((void *)v36 + 69) = 0;
        IPC::Encoder::encodeHeader(v36);
        unint64_t v62 = v36;
        IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v36, (uint64_t)&v56);
        IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v62, 1, 0);
        unint64_t v38 = v62;
        unint64_t v62 = 0;
        if (v38)
        {
          IPC::Encoder::~Encoder(v38, v37);
          WTF::fastFree(v39, v40);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
        goto LABEL_53;
      }
LABEL_91:
      __break(1u);
      return result;
    }
  }
LABEL_53:
  uint64_t result = v56;
  if (v56)
  {
    unint64_t v56 = 0;
    LODWORD(v57) = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(*(void *)(*((void *)a1 + 6) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
    if (!v64) {
      goto LABEL_49;
    }
    unint64_t v41 = v62;
    unint64_t v40 = v63;
    unint64_t v42 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - v62;
    if (v42 >= v62)
    {
      unint64_t v44 = v43 + 2;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v63)
      {
        *(_WORD *)(v62 + v43) = 2871;
LABEL_59:
        uint64_t v46 = (void *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v46 >= v41 + v44)
        {
          unint64_t v44 = (unint64_t)v46 - v41 + 8;
          if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
            goto LABEL_49;
          }
          *uint64_t v46 = v4;
        }
        if (!v40) {
          goto LABEL_49;
        }
        uint64_t v48 = *(void *)(v3 + 72);
        unint64_t v49 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v50 = *(void *)(v3 + 64);
        if (v49 + 16 >= v50) {
          unint64_t v49 = 0;
        }
        if (v44 <= 0x10) {
          unint64_t v44 = 16;
        }
        unint64_t v51 = v49 + v44;
        if (v50 <= v51) {
          unint64_t v51 = 0;
        }
        *(void *)(v3 + 80) = v51;
        unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v48 + 16) + 128), v51);
        int v53 = *(_DWORD *)(v3 + 116);
        if (v52 == 0x80000000 || v53 != 0)
        {
          unsigned int v55 = v53 + 1;
          *(_DWORD *)(v3 + 116) = v55;
          if (v55 >= *(_DWORD *)(v3 + 112))
          {
            if (*(unsigned char *)(v3 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
            }
            *(_DWORD *)(v3 + 116) = 0;
          }
        }
        *(void *)(v3 + 56) = v4;
        goto LABEL_4;
      }
      unint64_t v40 = 0;
    }
    unint64_t v44 = 0;
    goto LABEL_59;
  }
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
  if (!v64) {
    goto LABEL_49;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v61, (uint64_t **)(v3 + 8));
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9EB4A8;
  v9[1] = v2;
  v60[0] = (uint64_t)v9;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v60[1] = v10;
  uint64_t v59 = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v61, v60);
  unint64_t v12 = v64;
  if (!v64) {
    goto LABEL_82;
  }
  unint64_t v12 = v62;
  unint64_t v13 = v63;
  unint64_t v14 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v62;
  if (v14 < v62)
  {
    unint64_t v16 = 0;
    unint64_t v11 = v63;
  }
  else
  {
    unint64_t v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_83;
    }
    unint64_t v16 = 0;
    if (v15 + 2 <= v63)
    {
      *(_WORD *)(v62 + v15) = 1269;
      unint64_t v11 = v13;
      unint64_t v16 = v15 + 2;
    }
  }
  while (1)
  {
    double v17 = (void *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v12 + v16)
    {
      double v18 = (char *)v17 - v12;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_27;
      }
      unint64_t v16 = (unint64_t)(v18 + 8);
      if ((unint64_t)(v18 + 8) > v11) {
        goto LABEL_27;
      }
      *double v17 = v10;
    }
    if (v11)
    {
      unint64_t v19 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v3 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      *(void *)(v3 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_46;
    }
LABEL_27:
    unint64_t v12 = v64;
    if (v64) {
      break;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    unint64_t v16 = v11;
  }
  unint64_t v23 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v62;
  if (v23 < v62)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v63)
    {
      *(_WORD *)(v62 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v3 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v3 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v28);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 1269;
  *((void *)v29 + 1) = v4;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  unint64_t v58 = v29;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v59);
  if (IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v58, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v61, v59, &v57);
    if (v57)
    {
      unint64_t v32 = (atomic_uint *)(WTF::RunLoop::main(v31) + 8);
      atomic_fetch_add(v32, 1u);
      uint64_t v33 = v57;
      uint64_t v57 = 0;
      unint64_t v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v34 = &unk_1EE9EB4D0;
      v34[1] = v33;
      unint64_t v56 = v34;
      WTF::RunLoop::dispatch();
      if (v56) {
        (*(void (**)(void *))(*v56 + 8))(v56);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v32);
      uint64_t v35 = v57;
      uint64_t v57 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
  }
  unint64_t v36 = v58;
  unint64_t v58 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v30);
    WTF::fastFree(v38, v39);
  }
LABEL_46:
  uint64_t v37 = v60[0];
  v60[0] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v61);
  uint64_t v2 = 0;
LABEL_49:
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

unsigned int *WebKit::WebGPU::RemoteQueueProxy::writeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, char a8)
{
  uint64_t v12 = a1;
  uint64_t v64 = a3;
  unint64_t v13 = *(_DWORD **)(a1 + 40);
  ++v13[2];
  uint64_t result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(void *)v13 + 40))(v13);
  unint64_t v15 = result;
  unint64_t v63 = result;
  if (v13[2] == 1)
  {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(void *)v13 + 8))(v13);
    if (!v15) {
      return result;
    }
  }
  else
  {
    --v13[2];
    if (!result) {
      return result;
    }
  }
  if (a8) {
    unint64_t v16 = a7;
  }
  else {
    unint64_t v16 = a5 - a6;
  }
  if (a5 < a6 || v16 != -1 && a5 - a6 < v16) {
    goto LABEL_77;
  }
  while (1)
  {
    WebCore::SharedMemory::copySpan();
    v60[0] = 0;
    char v61 = 0;
    double v17 = v62;
    if (v62)
    {
      WebCore::SharedMemory::createHandle();
      std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v60, (uint64_t)&v72);
      if (v74) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v72);
      }
      double v18 = (unsigned int *)v62;
      if (v62) {
        atomic_fetch_add((atomic_uint *volatile)v62, 1u);
      }
    }
    else
    {
      double v18 = 0;
    }
    char v19 = v61;
    uint64_t v20 = *(void *)(*(void *)(*(void *)(v12 + 48) + 72) + 80);
    uint64_t v12 = *(void *)(v12 + 32);
    double v21 = *(double *)(v20 + 120);
    double v22 = INFINITY;
    if (fabs(v21) != INFINITY)
    {
      WTF::ApproximateTime::now(v17);
      double v22 = v21 + v23;
    }
    if (*(void *)(v20 + 56) != v12)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v20 + 64, &v72, v22);
      if (!v74) {
        goto LABEL_43;
      }
      unint64_t v44 = v72;
      unint64_t v45 = v73;
      unint64_t v46 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v47 = v46 - v72;
      if (v46 < v72)
      {
        unint64_t v49 = 0;
        unint64_t v48 = v73;
      }
      else
      {
        unint64_t v48 = 0;
        if (v47 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v49 = 0;
        }
        else
        {
          unint64_t v49 = 0;
          if (v47 + 2 <= v73)
          {
            *(_WORD *)(v72 + v47) = 2871;
            unint64_t v48 = v45;
            unint64_t v49 = v47 + 2;
          }
        }
      }
      unint64_t v50 = (void *)((v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v50 >= v44 + v49)
      {
        unint64_t v51 = (char *)v50 - v44;
        if ((unint64_t)v50 - v44 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_43;
        }
        unint64_t v49 = (unint64_t)(v51 + 8);
        if ((unint64_t)(v51 + 8) > v48) {
          goto LABEL_43;
        }
        void *v50 = v12;
      }
      if (!v48) {
        goto LABEL_43;
      }
      unint64_t v52 = (*(void *)(v20 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = *(void *)(v20 + 64);
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v54 = v52 + v49;
      if (v53 <= v54) {
        unint64_t v55 = 0;
      }
      else {
        unint64_t v55 = v54;
      }
      *(void *)(v20 + 80) = v55;
      unint64_t v56 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v20 + 72) + 16) + 128), v55);
      int v57 = *(_DWORD *)(v20 + 116);
      if (v56 == 0x80000000 || v57 != 0)
      {
        unsigned int v59 = v57 + 1;
        *(_DWORD *)(v20 + 116) = v59;
        if (v59 >= *(_DWORD *)(v20 + 112))
        {
          if (*(unsigned char *)(v20 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v20 + 92));
          }
          *(_DWORD *)(v20 + 116) = 0;
        }
      }
      *(void *)(v20 + 56) = v12;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v20 + 64, &v72, v22);
    if (!v74) {
      goto LABEL_43;
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)(v20 + 8));
    uint64_t v24 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v24 = &unk_1EE9EB4F8;
    *(void *)(v24 + 8) = v18;
    *(unsigned char *)(v24 + 16) = v19;
    uint64_t v69 = v24;
    uint64_t v70 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v68 = v70;
    IPC::Connection::addAsyncReplyHandler((uint64_t)v71, &v69);
    if (v74) {
      break;
    }
LABEL_77:
    __break(1u);
  }
  unint64_t v25 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = v25 - v72;
  if (v25 < v72)
  {
    unint64_t v27 = 0;
  }
  else
  {
    unint64_t v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v73)
    {
      *(_WORD *)(v72 + v26) = 2870;
      unint64_t v27 = v26 + 2;
    }
  }
  unint64_t v28 = (*(void *)(v20 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = *(void *)(v20 + 64);
  if (v28 + 16 >= v29) {
    unint64_t v28 = 0;
  }
  if (v27 <= 0x10) {
    unint64_t v27 = 16;
  }
  unint64_t v30 = v28 + v27;
  if (v29 <= v30) {
    unint64_t v30 = 0;
  }
  *(void *)(v20 + 80) = v30;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v20 + 72) + 16) + 128), v30);
  *(_DWORD *)(v20 + 116) = 0;
  unint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v31 = 1272;
  *((void *)v31 + 1) = v12;
  *((void *)v31 + 66) = (char *)v31 + 16;
  *((void *)v31 + 67) = 512;
  *((void *)v31 + 68) = 0;
  *((void *)v31 + 70) = 0;
  *((void *)v31 + 69) = 0;
  IPC::Encoder::encodeHeader(v31);
  unint64_t v67 = v31;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v31, (uint64_t *)&v63);
  unint64_t v32 = (IPC::Encoder *)IPC::Encoder::operator<<<unsigned long long const&>(v31, &v64);
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(v32, (unint64_t)v60);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v31, &v68);
  if (IPC::Connection::sendMessageImpl((uint64_t)v71, (uint64_t *)&v67, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v71, v68, &v66);
    if (v66)
    {
      uint64_t v35 = (atomic_uint *)(WTF::RunLoop::main(v34) + 8);
      atomic_fetch_add(v35, 1u);
      uint64_t v36 = v66;
      uint64_t v66 = 0;
      uint64_t v37 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v37 = &unk_1EE9EB520;
      v37[1] = v36;
      char v65 = v37;
      WTF::RunLoop::dispatch();
      unint64_t v38 = v65;
      char v65 = 0;
      if (v38) {
        (*(void (**)(void *))(*v38 + 8))(v38);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v35);
      uint64_t v39 = v66;
      uint64_t v66 = 0;
      if (v39) {
        (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
      }
    }
  }
  unint64_t v40 = v67;
  unint64_t v67 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v33);
    WTF::fastFree(v42, v43);
  }
  uint64_t v41 = v69;
  uint64_t v69 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  double v18 = 0;
LABEL_43:
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v18);
  }
  if (v61) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v60);
  }
  uint64_t result = (unsigned int *)v62;
  unint64_t v62 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

unsigned int *WebKit::WebGPU::RemoteQueueProxy::writeTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a1;
  uint64_t v10 = *(_DWORD **)(a1 + 40);
  ++v10[2];
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v10, a2, (uint64_t)v66);
  uint64_t v11 = *(void *)a5;
  int v62 = *(_DWORD *)(a5 + 8);
  char v63 = *(unsigned char *)(a5 + 12);
  unint64_t v12 = ((unint64_t)*(unsigned int *)(a5 + 16) << 24) | ((unint64_t)*(unsigned __int8 *)(a5 + 20) << 56);
  uint64_t v61 = v11;
  unint64_t v64 = v12;
  char v65 = 1;
  uint64_t result = (unsigned int *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a6, (uint64_t)v58);
  if (!v70 || !v60) {
    goto LABEL_41;
  }
  WebCore::SharedMemory::copySpan();
  v55[0] = 0;
  char v56 = 0;
  unint64_t v15 = (WTF::ApproximateTime *)v57;
  if (v57)
  {
    WebCore::SharedMemory::createHandle();
    std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v55, (uint64_t)&v78);
    if (v80) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v78);
    }
  }
  unint64_t v16 = v70;
  if (!v70) {
    goto LABEL_78;
  }
  unint64_t v16 = v60;
  if (!v60) {
    goto LABEL_78;
  }
  double v17 = (unsigned int *)v57;
  if (v57) {
    atomic_fetch_add(v57, 1u);
  }
  char v18 = v56;
  a3 = *(void *)(*(void *)(*(void *)(v9 + 48) + 72) + 80);
  uint64_t v9 = *(void *)(v9 + 32);
  double v19 = *(double *)(a3 + 120);
  double v20 = INFINITY;
  if (fabs(v19) != INFINITY)
  {
    WTF::ApproximateTime::now(v15);
    double v20 = v19 + v21;
  }
  if (*(void *)(a3 + 56) == v9) {
    goto LABEL_13;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a3 + 64, &v78, v20);
  if (v80)
  {
    unint64_t v39 = v78;
    unint64_t v40 = v79;
    unint64_t v41 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - v78;
    if (v41 < v78)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v79;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v79)
        {
          *(_WORD *)(v78 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    unint64_t v45 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v45 >= v39 + v44)
    {
      unint64_t v46 = (char *)v45 - v39;
      if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_35;
      }
      unint64_t v44 = (unint64_t)(v46 + 8);
      if ((unint64_t)(v46 + 8) > v43) {
        goto LABEL_35;
      }
      *unint64_t v45 = v9;
    }
    if (v43)
    {
      unint64_t v47 = (*(void *)(a3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v48 = *(void *)(a3 + 64);
      if (v47 + 16 >= v48) {
        unint64_t v47 = 0;
      }
      if (v44 <= 0x10) {
        unint64_t v44 = 16;
      }
      unint64_t v49 = v47 + v44;
      if (v48 <= v49) {
        unint64_t v50 = 0;
      }
      else {
        unint64_t v50 = v49;
      }
      *(void *)(a3 + 80) = v50;
      unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a3 + 72) + 16) + 128), v50);
      int v52 = *(_DWORD *)(a3 + 116);
      if (v51 == 0x80000000 || v52 != 0)
      {
        unsigned int v54 = v52 + 1;
        *(_DWORD *)(a3 + 116) = v54;
        if (v54 >= *(_DWORD *)(a3 + 112))
        {
          if (*(unsigned char *)(a3 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a3 + 92));
          }
          *(_DWORD *)(a3 + 116) = 0;
        }
      }
      *(void *)(a3 + 56) = v9;
LABEL_13:
      IPC::StreamClientConnectionBuffer::tryAcquire(a3 + 64, &v78, v20);
      if (v80)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v77, (uint64_t **)(a3 + 8));
        uint64_t v22 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v22 = &unk_1EE9EB548;
        *(void *)(v22 + 8) = v17;
        *(unsigned char *)(v22 + 16) = v18;
        uint64_t v75 = v22;
        uint64_t v76 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        uint64_t v74 = v76;
        IPC::Connection::addAsyncReplyHandler((uint64_t)v77, &v75);
        unint64_t v16 = v80;
        if (v80)
        {
          unint64_t v23 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v24 = v23 - v78;
          if (v23 < v78)
          {
            unint64_t v16 = 0;
          }
          else
          {
            unint64_t v16 = 0;
            if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v79)
            {
              *(_WORD *)(v78 + v24) = 2870;
              unint64_t v16 = v24 + 2;
            }
          }
          unint64_t v25 = (*(void *)(a3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v14 = *(void *)(a3 + 64);
          if (v25 + 16 < v14) {
            goto LABEL_20;
          }
          goto LABEL_79;
        }
LABEL_78:
        __break(1u);
LABEL_79:
        unint64_t v25 = 0;
LABEL_20:
        if (v16 <= 0x10) {
          unint64_t v16 = 16;
        }
        unint64_t v26 = v25 + v16;
        if (v14 <= v26) {
          unint64_t v26 = 0;
        }
        *(void *)(a3 + 80) = v26;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a3 + 72) + 16) + 128), v26);
        *(_DWORD *)(a3 + 116) = 0;
        unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v27 = 1273;
        *((void *)v27 + 1) = v9;
        *((void *)v27 + 66) = (char *)v27 + 16;
        *((void *)v27 + 67) = 512;
        *((void *)v27 + 68) = 0;
        *((void *)v27 + 70) = 0;
        *((void *)v27 + 69) = 0;
        IPC::Encoder::encodeHeader(v27);
        unint64_t v73 = v27;
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(v27, (uint64_t)v66);
        IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(v27, (unint64_t)v55);
        IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::encode(v27, &v61);
        IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&>(v27, (uint64_t)v58);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v27, &v74);
        if (IPC::Connection::sendMessageImpl((uint64_t)v77, (uint64_t *)&v73, 1, 0))
        {
          IPC::Connection::takeAsyncReplyHandler(v77, v74, &v72);
          if (v72)
          {
            unint64_t v30 = (atomic_uint *)(WTF::RunLoop::main(v29) + 8);
            atomic_fetch_add(v30, 1u);
            uint64_t v31 = v72;
            uint64_t v72 = 0;
            unint64_t v32 = (void *)WTF::fastMalloc((WTF *)0x10);
            void *v32 = &unk_1EE9EB570;
            v32[1] = v31;
            int v71 = v32;
            WTF::RunLoop::dispatch();
            uint64_t v33 = v71;
            int v71 = 0;
            if (v33) {
              (*(void (**)(void *))(*v33 + 8))(v33);
            }
            WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v30);
            uint64_t v34 = v72;
            uint64_t v72 = 0;
            if (v34) {
              (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
            }
          }
        }
        uint64_t v35 = v73;
        unint64_t v73 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v28);
          WTF::fastFree(v37, v38);
        }
        uint64_t v36 = v75;
        uint64_t v75 = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v77);
        double v17 = 0;
      }
    }
  }
LABEL_35:
  if (v17) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v17);
  }
  if (v56) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v55);
  }
  uint64_t result = (unsigned int *)v57;
  int v57 = 0;
  if (result) {
    uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
LABEL_41:
  if (v60 && v59 != -1) {
    uint64_t result = (unsigned int *)((uint64_t (*)(unint64_t *, unsigned char *))off_1EE9EAF78[v59])(&v78, v58);
  }
  if (v70 && v69 && v68 != -1) {
    uint64_t result = (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9EB1F8[v68])(&v61, &v67);
  }
  if (v10[2] == 1) {
    return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  --v10[2];
  return result;
}

void WebKit::WebGPU::RemoteQueueProxy::writeBufferNoCopy()
{
}

void WebKit::WebGPU::RemoteQueueProxy::writeTexture()
{
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteQueueProxy::copyExternalImageToTexture(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (_DWORD *)a1[5];
  ++v7[2];
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, v60);
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)v7, a3, v55);
  uint64_t result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a4, (uint64_t)v52);
  int v9 = v54;
  if (v64) {
    BOOL v10 = v59 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v54 != 0)
  {
    uint64_t v12 = *(void *)(*(void *)(a1[6] + 72) + 80);
    uint64_t v13 = a1[4];
    double v14 = *(double *)(v12 + 120);
    double v15 = INFINITY;
    if (fabs(v14) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      double v15 = v14 + v16;
    }
    if (*(void *)(v12 + 56) != v13)
    {
      uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v69, v15);
      if (!(_BYTE)v71) {
        goto LABEL_42;
      }
      unint64_t v36 = v69;
      unint64_t v37 = v70;
      unint64_t v38 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v39 = v38 - v69;
      if (v38 < v69)
      {
        unint64_t v41 = 0;
        unint64_t v40 = v70;
      }
      else
      {
        unint64_t v40 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v41 = 0;
        }
        else
        {
          unint64_t v41 = 0;
          if (v39 + 2 <= v70)
          {
            *(_WORD *)(v69 + v39) = 2871;
            unint64_t v40 = v37;
            unint64_t v41 = v39 + 2;
          }
        }
      }
      unint64_t v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v42 >= v36 + v41)
      {
        unint64_t v43 = (char *)v42 - v36;
        if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_42;
        }
        unint64_t v41 = (unint64_t)(v43 + 8);
        if ((unint64_t)(v43 + 8) > v40) {
          goto LABEL_42;
        }
        *unint64_t v42 = v13;
      }
      if (!v40)
      {
LABEL_42:
        int v9 = v54;
        goto LABEL_43;
      }
      unint64_t v44 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v45 = *(void *)(v12 + 64);
      if (v44 + 16 >= v45) {
        unint64_t v44 = 0;
      }
      if (v41 <= 0x10) {
        unint64_t v41 = 16;
      }
      unint64_t v46 = v44 + v41;
      if (v45 <= v46) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v46;
      }
      *(void *)(v12 + 80) = v47;
      unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v47);
      int v49 = *(_DWORD *)(v12 + 116);
      if (v48 == 0x80000000 || v49 != 0)
      {
        unsigned int v51 = v49 + 1;
        *(_DWORD *)(v12 + 116) = v51;
        if (v51 >= *(_DWORD *)(v12 + 112))
        {
          if (*(unsigned char *)(v12 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
          }
          *(_DWORD *)(v12 + 116) = 0;
        }
      }
      *(void *)(v12 + 56) = v13;
    }
    uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 64, &v66, v15);
    if (v68)
    {
      unint64_t v69 = v66;
      unint64_t v70 = v67;
      unint64_t v71 = 0;
      unint64_t v17 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v18 = v17 >= v66;
      unint64_t v19 = v17 - v66;
      if (v18)
      {
        if (v19 > 0xFFFFFFFFFFFFFFFDLL || v19 + 2 > v67)
        {
          unint64_t v70 = 0;
        }
        else
        {
          *(_WORD *)(v66 + v19) = 1267;
          unint64_t v71 = v19 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::encode((uint64_t *)&v69, (uint64_t)v60);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode((uint64_t *)&v69, (uint64_t)v55);
      uint64_t result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v69, (uint64_t)v52);
      if (v70)
      {
        unint64_t v21 = v71;
        unint64_t v22 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v20 = *(void *)(v12 + 64);
        if (v22 + 16 < v20)
        {
LABEL_19:
          if (v21 <= 0x10) {
            unint64_t v21 = 16;
          }
          unint64_t v23 = v22 + v21;
          if (v20 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(v12 + 80) = v23;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v23) == 0x80000000
            || *(_DWORD *)(v12 + 116))
          {
            if (*(unsigned char *)(v12 + 104)) {
              uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v12 + 92));
            }
            *(_DWORD *)(v12 + 116) = 0;
          }
          goto LABEL_42;
        }
      }
      else
      {
        unint64_t v21 = v68;
        if (v68)
        {
          unint64_t v24 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v25 = v24 - v66;
          if (v24 < v66)
          {
            unint64_t v26 = 0;
          }
          else
          {
            unint64_t v26 = 0;
            if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v67)
            {
              *(_WORD *)(v66 + v25) = 2870;
              unint64_t v26 = v25 + 2;
            }
          }
          unint64_t v27 = (*(void *)(v12 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v28 = *(void *)(v12 + 64);
          if (v27 + 16 >= v28) {
            unint64_t v27 = 0;
          }
          if (v26 <= 0x10) {
            unint64_t v26 = 16;
          }
          unint64_t v29 = v27 + v26;
          if (v28 <= v29) {
            unint64_t v29 = 0;
          }
          *(void *)(v12 + 80) = v29;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v12 + 72) + 16) + 128), v29);
          *(_DWORD *)(v12 + 116) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v12 + 8));
          unint64_t v30 = v65;
          uint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v31 = 1267;
          *((void *)v31 + 1) = v13;
          *((void *)v31 + 66) = (char *)v31 + 16;
          *((void *)v31 + 67) = 512;
          *((void *)v31 + 68) = 0;
          *((void *)v31 + 70) = 0;
          *((void *)v31 + 69) = 0;
          IPC::Encoder::encodeHeader(v31);
          unint64_t v69 = (unint64_t)v31;
          IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(v31, (uint64_t)v60);
          IPC::Encoder::operator<<<BOOL>(v31, v63);
          IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode(v31, (uint64_t)v55);
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&>(v31, (uint64_t)v52);
          IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v69, 1, 0);
          uint64_t v33 = (IPC::Encoder *)v69;
          unint64_t v69 = 0;
          if (v33)
          {
            IPC::Encoder::~Encoder(v33, v32);
            WTF::fastFree(v34, v35);
          }
          uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65);
          goto LABEL_42;
        }
        __break(1u);
      }
      unint64_t v22 = 0;
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_43:
  if (v9 && v53 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, unsigned char *))off_1EE9EAF78[v53])(&v69, v52);
  }
  if (v59 && v58 && v57 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9EB1F8[v57])(v52, &v56);
  }
  if (v64 && v62 && v61 != -1) {
    uint64_t result = (WTF::ApproximateTime *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9EB208[v61])(v55, v60);
  }
  if (v7[2] == 1) {
    return (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  --v7[2];
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteQueueProxy::setLabelInternal(WebKit::WebGPU::RemoteQueueProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 6) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  uint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  int v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1270;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1270;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  int v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  int v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

uint64_t WebKit::RemoteGPUProxy::ref(uint64_t this)
{
  return this;
}

unsigned int *WebKit::RemoteGPUProxy::deref(unsigned int *this)
{
  if (atomic_fetch_add((atomic_uint *volatile)this + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, this + 7);
    return (unsigned int *)(*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

atomic_uchar *WebKit::RemoteGPUProxy::dispatch(uint64_t a1)
{
  return WebKit::RemoteGPUProxy::Dispatcher::dispatch((atomic_uchar *)(a1 + 48));
}

void WebKit::RemoteGPUProxy::isCurrent(WebKit::RemoteGPUProxy *this)
{
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteGPUProxy::dispatch(uint64_t a1)
{
  return WebKit::RemoteGPUProxy::Dispatcher::dispatch((atomic_uchar *)(a1 + 16));
}

void non-virtual thunk to'WebKit::RemoteGPUProxy::isCurrent(WebKit::RemoteGPUProxy *this)
{
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_7RunLoopENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEENS8_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSF_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    return WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_7RunLoopENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEENS8_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSF_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, atomic_uchar **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages9RemoteGPU14RequestAdapterEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WTF::RunLoop,WTF::RawPtrTraits<WTF::RunLoop>,WTF::DefaultRefDerefTraits<WTF::RunLoop>>,WTF::ThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefINS6_7RunLoopENS6_12RawPtrTraitsIS8_EENS6_21DefaultRefDerefTraitsIS8_EEEENS6_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefINS8_7RunLoopENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEENS8_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSF_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefINS8_7RunLoopENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEENS8_17ThreadSafeWeakPtrIN7WebCore21WorkerOrWorkletThreadEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSF_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  uint64_t v3 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  a2[1] = v3;
}

void *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = *a1 + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (v5)
  {
    unint64_t v7 = v6 + v2;
    unint64_t v8 = v7 + 4;
    if (v7 > 0xFFFFFFFFFFFFFFFBLL || v8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v7) = *(_DWORD *)a2;
      a1[2] = v8;
    }
  }
  return IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, *(void **)(a2 + 8));
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  BOOL v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *BOOL v5 = v4;
    unint64_t v7 = (uint64_t *)*((void *)a2 + 1);
    return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v7);
  }
  return result;
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteComputePipeline::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  unint64_t v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  unint64_t v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 791;
      unint64_t v52 = v12 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v50, *a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  unint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 791;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v50 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  unint64_t v28 = v50;
  unint64_t v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::WebGPU::RemoteDeviceProxy::importExternalTexture(WebCore::WebGPU::ExternalTextureDescriptor const&)::$_0,void,IPC::Semaphore &>::call(WTF::ApproximateTime *a1, IPC::Semaphore *a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(v3 + 72) + 72) + 80);
  uint64_t v5 = *(void *)(v3 + 48);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v39, v7);
  if (!v41) {
    return result;
  }
  unint64_t v24 = v39;
  unint64_t v23 = v40;
  unint64_t v25 = (v39 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = v25 - v39;
  if (v25 < v39) {
    goto LABEL_53;
  }
  unint64_t v27 = v26 + 2;
  if (v26 > 0xFFFFFFFFFFFFFFFDLL || v27 > v40)
  {
    unint64_t v23 = 0;
LABEL_53:
    unint64_t v27 = 0;
    goto LABEL_28;
  }
  *(_WORD *)(v39 + v26) = 2871;
LABEL_28:
  unint64_t v29 = (void *)((v24 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v29 >= v24 + v27)
  {
    unint64_t v27 = (unint64_t)v29 - v24 + 8;
    if ((unint64_t)v29 - v24 > 0xFFFFFFFFFFFFFFF7 || v27 > v23) {
      return result;
    }
    void *v29 = v5;
  }
  if (!v23) {
    return result;
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v27 <= 0x10) {
    unint64_t v27 = 16;
  }
  unint64_t v33 = v31 + v27;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  unint64_t v34 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  int v35 = *(_DWORD *)(v4 + 116);
  if (v34 == 0x80000000 || v35 != 0)
  {
    unsigned int v37 = v35 + 1;
    *(_DWORD *)(v4 + 116) = v37;
    if (v37 >= *(_DWORD *)(v4 + 112))
    {
      if (*(unsigned char *)(v4 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
  }
  *(void *)(v4 + 56) = v5;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v39, v7);
  if (v41)
  {
    unint64_t v10 = (v39 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = v10 - v39;
    if (v10 < v39 || ((v12 = v11 + 2, v11 <= 0xFFFFFFFFFFFFFFFDLL) ? (BOOL v13 = v12 > v40) : (BOOL v13 = 1), v13)) {
      unint64_t v12 = 0;
    }
    else {
      *(_WORD *)(v39 + v11) = 2870;
    }
    unint64_t v14 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = *(void *)(v4 + 64);
    if (v14 + 16 >= v15) {
      unint64_t v14 = 0;
    }
    if (v12 <= 0x10) {
      unint64_t v12 = 16;
    }
    unint64_t v16 = v14 + v12;
    if (v15 <= v16) {
      unint64_t v16 = 0;
    }
    *(void *)(v4 + 80) = v16;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v16);
    *(_DWORD *)(v4 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v38, (uint64_t **)(v4 + 8));
    unint64_t v17 = v38;
    unint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v18 = 816;
    *((void *)v18 + 1) = v5;
    *((void *)v18 + 66) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 68) = 0;
    *((void *)v18 + 70) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    unint64_t v42 = v18;
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v18, a2);
    IPC::Connection::sendMessageImpl((uint64_t)v17, (uint64_t *)&v42, 1, 0);
    unint64_t v20 = v42;
    unint64_t v42 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v21, v22);
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v38);
  }
  return result;
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::WebGPU::RemoteDeviceProxy::importExternalTexture(WebCore::WebGPU::ExternalTextureDescriptor const&)::$_1,void,WebCore::SharedMemoryHandle &&>::call(WTF::ApproximateTime *a1, unint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(v3 + 72) + 72) + 80);
  uint64_t v5 = *(void *)(v3 + 48);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v39, v7);
  if (!v41) {
    return result;
  }
  unint64_t v24 = v39;
  unint64_t v23 = v40;
  unint64_t v25 = (v39 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = v25 - v39;
  if (v25 < v39) {
    goto LABEL_53;
  }
  unint64_t v27 = v26 + 2;
  if (v26 > 0xFFFFFFFFFFFFFFFDLL || v27 > v40)
  {
    unint64_t v23 = 0;
LABEL_53:
    unint64_t v27 = 0;
    goto LABEL_28;
  }
  *(_WORD *)(v39 + v26) = 2871;
LABEL_28:
  unint64_t v29 = (void *)((v24 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v29 >= v24 + v27)
  {
    unint64_t v27 = (unint64_t)v29 - v24 + 8;
    if ((unint64_t)v29 - v24 > 0xFFFFFFFFFFFFFFF7 || v27 > v23) {
      return result;
    }
    void *v29 = v5;
  }
  if (!v23) {
    return result;
  }
  unint64_t v31 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(v4 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v27 <= 0x10) {
    unint64_t v27 = 16;
  }
  unint64_t v33 = v31 + v27;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(v4 + 80) = v33;
  unint64_t v34 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v33);
  int v35 = *(_DWORD *)(v4 + 116);
  if (v34 == 0x80000000 || v35 != 0)
  {
    unsigned int v37 = v35 + 1;
    *(_DWORD *)(v4 + 116) = v37;
    if (v37 >= *(_DWORD *)(v4 + 112))
    {
      if (*(unsigned char *)(v4 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v4 + 92));
      }
      *(_DWORD *)(v4 + 116) = 0;
    }
  }
  *(void *)(v4 + 56) = v5;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v39, v7);
  if (v41)
  {
    unint64_t v10 = (v39 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = v10 - v39;
    if (v10 < v39 || ((v12 = v11 + 2, v11 <= 0xFFFFFFFFFFFFFFFDLL) ? (BOOL v13 = v12 > v40) : (BOOL v13 = 1), v13)) {
      unint64_t v12 = 0;
    }
    else {
      *(_WORD *)(v39 + v11) = 2870;
    }
    unint64_t v14 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = *(void *)(v4 + 64);
    if (v14 + 16 >= v15) {
      unint64_t v14 = 0;
    }
    if (v12 <= 0x10) {
      unint64_t v12 = 16;
    }
    unint64_t v16 = v14 + v12;
    if (v15 <= v16) {
      unint64_t v16 = 0;
    }
    *(void *)(v4 + 80) = v16;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v16);
    *(_DWORD *)(v4 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v38, (uint64_t **)(v4 + 8));
    unint64_t v17 = v38;
    unint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v18 = 815;
    *((void *)v18 + 1) = v5;
    *((void *)v18 + 66) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 68) = 0;
    *((void *)v18 + 70) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    unint64_t v42 = v18;
    IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v18, a2);
    IPC::Connection::sendMessageImpl((uint64_t)v17, (uint64_t *)&v42, 1, 0);
    unint64_t v20 = v42;
    unint64_t v42 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v21, v22);
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v38);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9EB278;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9EB278;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>::call(void *a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  if (a2 && *(void *)a2 && (IPC::Decoder::decode<std::tuple<BOOL,WTF::String>>((uint64_t)v15, a2), v17))
  {
    if (v15[0])
    {
      uint64_t v4 = a1[3];
      uint64_t v5 = *(void *)(v4 + 64);
      uint64_t v6 = a1[1];
      uint64_t v7 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v7 + 8) = 1;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)uint64_t v7 = &unk_1EE9EAA58;
      *(void *)(v7 + 32) = v6;
      ++*(_DWORD *)(v5 + 8);
      *(void *)(v7 + 40) = v5;
      ++*(_DWORD *)(v4 + 8);
      *(void *)(v7 + 48) = v4;
      WTF::String::operator=((uint64_t *)(v7 + 24), a1 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v7 + 24);
      unint64_t v19 = (_DWORD *)v7;
      double v8 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
      unint64_t v18 = v8;
      uint64_t v9 = a1[2];
      a1[2] = 0;
      (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(void *)v9 + 16))(v9, &v19, &v18);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      unint64_t v11 = v18;
      unint64_t v18 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      unint64_t v14 = v19;
      unint64_t v19 = 0;
      if (v14)
      {
        if (v14[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
        }
        else {
          --v14[2];
        }
      }
LABEL_21:
      uint64_t result = v16;
      unint64_t v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
    unint64_t v19 = 0;
    uint64_t v13 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(void *)v13 + 16))(v13, &v19, &v16);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t result = (WTF::StringImpl *)v19;
    unint64_t v19 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    if (v17) {
      goto LABEL_21;
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v6, &v5);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<BOOL,WTF::String>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_7;
  }
  double v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_7:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_8:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_9;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v18);
  if (v19)
  {
    *(void *)(a1 + 8) = v18;
    *(unsigned char *)a1 = v9 != 0;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
LABEL_9:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result && v16)
  {
    char v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (IPC::Decoder *)v17();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long,(WebKit::WebGPUIdentifierType)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::CreateComputePipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB2A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long,(WebKit::WebGPUIdentifierType)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::CreateComputePipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB2A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long,(WebKit::WebGPUIdentifierType)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::CreateComputePipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9EB2C8;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9EB2C8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>::call(void *a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  if (a2 && *(void *)a2 && (IPC::Decoder::decode<std::tuple<BOOL,WTF::String>>((uint64_t)v15, a2), v17))
  {
    if (v15[0])
    {
      uint64_t v4 = a1[3];
      uint64_t v5 = *(void *)(v4 + 64);
      uint64_t v6 = a1[1];
      uint64_t v7 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v7 + 8) = 1;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)uint64_t v7 = &unk_1EE9EB718;
      *(void *)(v7 + 32) = v6;
      ++*(_DWORD *)(v5 + 8);
      *(void *)(v7 + 40) = v5;
      ++*(_DWORD *)(v4 + 8);
      *(void *)(v7 + 48) = v4;
      WTF::String::operator=((uint64_t *)(v7 + 24), a1 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v7 + 24);
      char v19 = (_DWORD *)v7;
      double v8 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
      uint64_t v18 = v8;
      uint64_t v9 = a1[2];
      a1[2] = 0;
      (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(void *)v9 + 16))(v9, &v19, &v18);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      unint64_t v11 = v18;
      uint64_t v18 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v14 = v19;
      char v19 = 0;
      if (v14)
      {
        if (v14[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
        }
        else {
          --v14[2];
        }
      }
LABEL_21:
      uint64_t result = v16;
      uint64_t v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
    char v19 = 0;
    uint64_t v13 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(void *)v13 + 16))(v13, &v19, &v16);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t result = (WTF::StringImpl *)v19;
    char v19 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    if (v17) {
      goto LABEL_21;
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v6, &v5);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long,(WebKit::WebGPUIdentifierType)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::CreateRenderPipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB2F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long,(WebKit::WebGPUIdentifierType)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::CreateRenderPipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB2F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long,(WebKit::WebGPUIdentifierType)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::CreateRenderPipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB318;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB318;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>>((uint64_t)v6, a2);
    if (v10)
    {
      int v3 = v6[0];
      LOBYTE(v11) = 0;
      char v13 = 0;
      if (v9)
      {
        int v12 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>((uint64_t)&v11, (uint64_t)&v7);
        char v13 = 1;
      }
      uint64_t result = WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0::operator()<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(v2, v3 != 0, &v11);
      if (v13 && v12 != -1) {
        uint64_t result = off_1EE9EB330[v12](&v14, &v11);
      }
      if (v10 && v9 && v8 != -1) {
        return ((uint64_t (**)(uint64_t *, uint64_t *))off_1EE9EB330)[v8](&v11, &v7);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(uint64_t *a1)
{
  LOBYTE(v2) = 0;
  char v4 = 0;
  uint64_t result = WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0::operator()<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(a1, 0, &v2);
  if (v4)
  {
    if (v3 != -1) {
      return off_1EE9EB330[v3](&v5, &v2);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *(void *)a2;
        unint64_t v23 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_44;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v23 = v6;
    uint64_t v24 = 0;
LABEL_44:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_45;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_45:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v27 = *((void *)a2 + 3);
    if (v27 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v5);
    }
    goto LABEL_12;
  }
  BOOL v10 = v9 != 0;
  if (v6 <= (unint64_t)&v8[-v5 + 1])
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v30 = *((void *)a2 + 3);
    if (v30)
    {
      (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      unint64_t v28 = 0;
      uint64_t v39 = *(void *)a2;
      uint64_t v40 = *((void *)a2 + 1);
      uint64_t v41 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v29 = 0;
      if (v41)
      {
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39);
          uint64_t v29 = *(void *)a2;
          unint64_t v28 = *((void *)a2 + 1);
        }
      }
    }
    goto LABEL_49;
  }
  *((void *)a2 + 2) = v8 + 2;
  if (v8[1] >= 2u)
  {
    unint64_t v28 = v6;
    uint64_t v29 = v5;
LABEL_49:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v31 = *((void *)a2 + 3);
    if (v31 && v28) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
    }
    goto LABEL_10;
  }
  if (!v8[1])
  {
    LOBYTE(v42) = 0;
    unsigned __int8 v44 = 0;
    char v45 = 1;
    goto LABEL_30;
  }
  if (v6 <= (unint64_t)&v8[-v5 + 2])
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v32 = *((void *)a2 + 3);
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      uint64_t v33 = *(void *)a2;
      uint64_t v34 = *((void *)a2 + 1);
      uint64_t v35 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v35)
      {
        if (v34) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33);
        }
      }
    }
    goto LABEL_9;
  }
  *((void *)a2 + 2) = v8 + 3;
  unsigned int v11 = v8[2];
  if (v11 <= 2)
  {
    if (!v11)
    {
      int v47 = 0;
      char v48 = 1;
      goto LABEL_27;
    }
    if (v11 == 1)
    {
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a2, (uint64_t)&v49);
      if (v50)
      {
        uint64_t v46 = v49;
        int v21 = 1;
        int v47 = 1;
        goto LABEL_26;
      }
    }
    else
    {
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a2, (uint64_t)&v49);
      if (v50)
      {
        uint64_t v46 = v49;
        int v47 = 2;
        int v21 = 1;
        goto LABEL_26;
      }
    }
    uint64_t v36 = *(void *)a2;
    uint64_t v37 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v38 = *((void *)a2 + 3);
    if (v38 && v37) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
    }
    int v21 = 0;
    LOBYTE(v46) = 0;
LABEL_26:
    char v48 = v21;
    if (!v21) {
      goto LABEL_9;
    }
LABEL_27:
    LOBYTE(v42) = 0;
    int v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>((uint64_t)&v42, (uint64_t)&v46);
    unsigned __int8 v44 = 1;
    char v45 = 1;
    if (!v48) {
      goto LABEL_30;
    }
    if (v47 == -1) {
      goto LABEL_30;
    }
    ((uint64_t (**)(uint64_t *, uint64_t *))off_1EE9EB330)[v47](&v49, &v46);
    if (v45) {
      goto LABEL_30;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v14 = *((void *)a2 + 3);
  if (v14 && v13) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
  }
LABEL_10:
  LOBYTE(v42) = 0;
  char v45 = 0;
LABEL_11:
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v17 = *((void *)a2 + 3);
  if (!v17 || !v16 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15), !v45))
  {
LABEL_12:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
LABEL_13:
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v18)
    {
      unint64_t v20 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v20();
    }
    return result;
  }
LABEL_30:
  *(unsigned char *)a1 = v10;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t result = a1 + 8;
  *(unsigned char *)(a1 + 24) = 0;
  if (!v44)
  {
    *(unsigned char *)(a1 + 32) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>(result, (uint64_t)&v42);
  *(unsigned char *)(a1 + 24) = 1;
  int v22 = v44;
  *(unsigned char *)(a1 + 32) = 1;
  if (v45)
  {
    if (v22)
    {
      if (v43 != -1)
      {
        uint64_t result = ((uint64_t (**)(uint64_t *, uint64_t *))off_1EE9EB330)[v43](&v46, &v42);
        if (!*(unsigned char *)(a1 + 32)) {
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0::operator()<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  if (!*((unsigned char *)a3 + 16))
  {
    LOBYTE(v16) = 0;
    char v18 = 0;
    goto LABEL_15;
  }
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == -1) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = *((unsigned int *)a3 + 2);
  }
  if (v7 == 2)
  {
    if (v6 == 2)
    {
      uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v10 = 1;
      uint64_t v11 = *a3;
      *a3 = 0;
      *(void *)(v10 + 8) = v11;
      uint64_t v16 = (_DWORD *)v10;
      int v17 = 2;
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(v15);
  }
  if (v7 != 1)
  {
    if (!v6)
    {
      uint64_t v12 = (_DWORD *)WTF::fastMalloc((WTF *)4);
      *uint64_t v12 = 1;
      uint64_t v16 = v12;
      int v17 = 0;
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  if (v6 != 1) {
    goto LABEL_19;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v8 = 1;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(v8 + 8) = v9;
  uint64_t v16 = (_DWORD *)v8;
  int v17 = 1;
LABEL_14:
  char v18 = 1;
LABEL_15:
  uint64_t v13 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v13 + 16))(v13, a2, &v16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  if (v18)
  {
    if (v17 != -1) {
      return ((uint64_t (*)(char *, _DWORD **))off_1EE9EB348[v17])(&v19, &v16);
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return (WTF *)WTF::fastFree(result, a2);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl ***)a2;
  *(void *)a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(result, a2);
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl ***)a2;
  *(void *)a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(result, a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::PopErrorScope &&,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB370;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::PopErrorScope &&,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB370;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::PopErrorScope &&,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB398;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB398;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>>((uint64_t)v6, a2);
    if (v10)
    {
      int v3 = v6[0];
      LOBYTE(v11) = 0;
      char v13 = 0;
      if (v9)
      {
        int v12 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>((uint64_t)&v11, (uint64_t)&v7);
        char v13 = 1;
      }
      uint64_t result = WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0::operator()<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(v2, v3 != 0, &v11);
      if (v13 && v12 != -1) {
        uint64_t result = off_1EE9EB330[v12](&v14, &v11);
      }
      if (v10 && v9 && v8 != -1) {
        return ((uint64_t (**)(uint64_t *, uint64_t *))off_1EE9EB330)[v8](&v11, &v7);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::ResolveUncapturedErrorEvent &&,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB3C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::ResolveUncapturedErrorEvent &&,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB3C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::ResolveUncapturedErrorEvent &&,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB3E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB3E8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (v4)
    {
      unint64_t v5 = a2[1];
      if (v5 <= a2[2] - v4)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t v9 = a2[3];
        if (v9)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
            uint64_t v18 = *a2;
            uint64_t v19 = a2[1];
            uint64_t v20 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v20)
            {
              if (v19) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
              }
            }
          }
        }
      }
      else
      {
        int v6 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v6 + 1);
        uint64_t v7 = *v6;
        if (v7 < 2)
        {
          uint64_t v8 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
          goto LABEL_9;
        }
      }
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
          uint64_t v15 = *a2;
          uint64_t v16 = a2[1];
          uint64_t v17 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v17)
          {
            if (v16) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
            }
          }
        }
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
LABEL_9:
  char v13 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v13(v8);
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::ResolveDeviceLostPromise &&,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB410;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::ResolveDeviceLostPromise &&,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB410;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteDevice::ResolveDeviceLostPromise &&,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::initializeIPC(WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v3 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::GPUProcessConnection::createGPU(v3, *(void *)(v2 + 88), **(void **)(a1 + 16), *(void *)(a1 + 24));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
  unint64_t v5 = *(atomic_uint **)(v3 + 8);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t result = *(unsigned int **)(v2 + 72);
  *(void *)(v2 + 72) = v5;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EB460;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EB460;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      char v4 = 0;
      uint64_t v5 = *(void *)(v2 + 24);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x19972E8D0](v5);
      }
      ++*(void *)(v5 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
      }
      WebKit::GPUProcessConnection::releaseGPU(v2, *((void *)v3 + 1));
      uint64_t v8 = *(atomic_uchar **)(v2 + 24);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(v8, v7);
    }
  }
  return result;
}

IPC::Decoder *IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  IPC::Connection::waitForMessage((atomic_uchar *volatile **)a1, 0x382u, a2, a3, (uint64_t)&v11, a4);
  int v5 = v12;
  if (!v12)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 33));
    int v5 = v12;
    if (v7)
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1, v11);
      uint64_t v6 = 0;
      int v5 = v12;
    }
    else
    {
      uint64_t v6 = 1;
    }
    if (v5 == -1) {
      return (IPC::Decoder *)v6;
    }
    goto LABEL_8;
  }
  if (v12 == 1)
  {
    uint64_t v6 = v11;
LABEL_8:
    ((void (*)(char *, uint64_t *))off_1EE9EB478[v5])(&v13, &v11);
    return (IPC::Decoder *)v6;
  }
  uint64_t v9 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(v9, v10);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(IPC::Decoder *a1, uint64_t a2)
{
  unint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = *((void *)a1 + 2) - *(void *)a1;
  if (v7 <= v9)
  {
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (v29)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        unint64_t v28 = *(char **)a1;
        unint64_t v27 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
      }
    }
    goto LABEL_42;
  }
  uint64_t v10 = &v8[v9];
  *((void *)a1 + 2) = v10 + 1;
  if (!v8)
  {
    unint64_t v27 = v7;
    unint64_t v28 = 0;
LABEL_42:
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v30 = *((void *)a1 + 3);
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
        uint64_t v8 = *(char **)a1;
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_43;
  }
  unsigned int v11 = *v10;
  if (v11 < 2)
  {
    if (v11)
    {
      IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::decode(a1, (uint64_t)&v37);
      if (!v49)
      {
        int v12 = *(char **)a1;
        uint64_t v32 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v33 = *((void *)a1 + 3);
        if (!v33 || !v32 || ((*(void (**)(uint64_t, char *))(*(void *)v33 + 16))(v33, v12), !v49))
        {
          std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v12);
          goto LABEL_48;
        }
      }
      unint64_t v4 = *((void *)&v37 + 1);
      unint64_t v13 = v37;
      unsigned long long v37 = 0u;
      unsigned int v3 = v38;
      unsigned int v2 = HIDWORD(v38);
      unint64_t v38 = 0;
      long long v59 = v45;
      long long v60 = v46;
      long long v61 = v47;
      char v62 = v48;
      long long v55 = v41;
      long long v56 = v42;
      long long v57 = v43;
      long long v58 = v44;
      long long v53 = v39;
      long long v54 = v40;
      int v14 = 1;
      char v63 = 1;
      char v64 = 1;
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v12);
      long long v51 = 0u;
      unsigned long long v37 = __PAIR128__(v4, v13);
      uint64_t v52 = 0;
      unint64_t v38 = __PAIR64__(v2, v3);
      long long v45 = v59;
      long long v46 = v60;
      long long v47 = v61;
      char v48 = v62;
      long long v41 = v55;
      long long v42 = v56;
      long long v43 = v57;
      long long v44 = v58;
      long long v39 = v53;
      long long v40 = v54;
      char v49 = 1;
    }
    else
    {
      LOBYTE(v37) = 0;
      char v49 = 0;
      LOBYTE(v51) = 0;
      char v63 = 0;
      char v64 = 1;
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v8);
      int v14 = 0;
      LOBYTE(v37) = 0;
      char v49 = 0;
    }
    int v16 = 1;
    char v50 = 1;
    std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v15);
    char v18 = 0;
    goto LABEL_9;
  }
LABEL_43:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v31 = *((void *)a1 + 3);
  if (v31 && v7) {
    (*(void (**)(uint64_t, char *))(*(void *)v31 + 16))(v31, v8);
  }
LABEL_48:
  uint64_t v34 = *(char **)a1;
  uint64_t v35 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v36 = *((void *)a1 + 3);
  if (!v36)
  {
    uint64_t v35 = 0;
LABEL_50:
    uint64_t v17 = 0;
    goto LABEL_51;
  }
  if (!v35) {
    goto LABEL_50;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v36 + 16))(v36, v34);
  uint64_t v17 = *(char **)a1;
  uint64_t v35 = *((void *)a1 + 1);
  uint64_t v36 = *((void *)a1 + 3);
LABEL_51:
  LOBYTE(v37) = 0;
  char v50 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if (v36 && v35) {
    (*(void (**)(uint64_t, char *))(*(void *)v36 + 16))(v36, v17);
  }
  int v14 = 0;
  int v16 = 0;
  char v18 = 1;
LABEL_9:
  if (*(unsigned __int8 *)(a2 + 184) != v16)
  {
    if (*(unsigned char *)(a2 + 184))
    {
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100](a2, v17);
      *(unsigned char *)(a2 + 184) = 0;
      if (v18) {
        return a1;
      }
      goto LABEL_36;
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 176) = 0;
    if (v14)
    {
      uint64_t v21 = v37;
      unsigned long long v37 = 0uLL;
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v4;
      unint64_t v38 = 0;
      *(_DWORD *)(a2 + 16) = v3;
      *(_DWORD *)(a2 + 20) = v2;
      *(_OWORD *)(a2 + 120) = v45;
      *(_OWORD *)(a2 + 136) = v46;
      *(_OWORD *)(a2 + 152) = v47;
      *(unsigned char *)(a2 + 168) = v48;
      *(_OWORD *)(a2 + 56) = v41;
      *(_OWORD *)(a2 + 72) = v42;
      *(_OWORD *)(a2 + 88) = v43;
      *(_OWORD *)(a2 + 104) = v44;
      *(_OWORD *)(a2 + 24) = v39;
      *(_OWORD *)(a2 + 40) = v40;
      *(unsigned char *)(a2 + 176) = 1;
    }
    *(unsigned char *)(a2 + 184) = 1;
    if (v18) {
      return a1;
    }
    goto LABEL_36;
  }
  if (!*(unsigned char *)(a2 + 184)) {
    return a1;
  }
  if (*(unsigned __int8 *)(a2 + 176) != v14)
  {
    if (!*(unsigned char *)(a2 + 176))
    {
      uint64_t v23 = v37;
      unsigned long long v37 = 0uLL;
      *(void *)a2 = v23;
      *(void *)(a2 + 8) = v4;
      unint64_t v38 = 0;
      *(_DWORD *)(a2 + 16) = v3;
      *(_DWORD *)(a2 + 20) = v2;
      *(_OWORD *)(a2 + 120) = v45;
      *(_OWORD *)(a2 + 136) = v46;
      *(_OWORD *)(a2 + 152) = v47;
      *(unsigned char *)(a2 + 168) = v48;
      *(_OWORD *)(a2 + 56) = v41;
      *(_OWORD *)(a2 + 72) = v42;
      *(_OWORD *)(a2 + 88) = v43;
      *(_OWORD *)(a2 + 104) = v44;
      *(_OWORD *)(a2 + 24) = v39;
      *(_OWORD *)(a2 + 40) = v40;
      *(unsigned char *)(a2 + 176) = 1;
      if (v18) {
        return a1;
      }
      goto LABEL_36;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 8, v17);
    int v22 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    *(unsigned char *)(a2 + 176) = 0;
    if (v18) {
      return a1;
    }
LABEL_36:
    std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v17);
    return a1;
  }
  if (*(unsigned char *)(a2 + 176))
  {
    uint64_t v19 = v37;
    *(void *)&unsigned long long v37 = 0;
    uint64_t v20 = *(WTF::StringImpl **)a2;
    *(void *)a2 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v24 = *(unsigned int *)(a2 + 20);
    if (v24) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)(*(void *)(a2 + 8) + 8 * v24));
    }
    uint64_t v25 = *(WTF **)(a2 + 8);
    if (v25)
    {
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v25, v17);
    }
    *((void *)&v37 + 1) = 0;
    unint64_t v38 = 0;
    *(void *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 16) = v3;
    *(_DWORD *)(a2 + 20) = v2;
    *(_OWORD *)(a2 + 120) = v45;
    *(_OWORD *)(a2 + 136) = v46;
    *(_OWORD *)(a2 + 152) = v47;
    *(unsigned char *)(a2 + 168) = v48;
    *(_OWORD *)(a2 + 56) = v41;
    *(_OWORD *)(a2 + 72) = v42;
    *(_OWORD *)(a2 + 88) = v43;
    *(_OWORD *)(a2 + 104) = v44;
    *(_OWORD *)(a2 + 24) = v39;
    *(_OWORD *)(a2 + 40) = v40;
  }
  if ((v18 & 1) == 0) {
    goto LABEL_36;
  }
  return a1;
}

__n128 std::__optional_copy_assign_base<WebKit::RemoteGPURequestAdapterResponse,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*((unsigned char *)a2 + 176))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = v2;
    uint64_t v3 = a2[1];
    a2[1] = 0;
    *(void *)(a1 + 8) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(a1 + 16) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(a1 + 20) = v3;
    long long v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 24) = v4;
    long long v5 = *(_OWORD *)(a2 + 7);
    long long v6 = *(_OWORD *)(a2 + 9);
    long long v7 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(_OWORD *)(a1 + 56) = v5;
    __n128 result = *(__n128 *)(a2 + 15);
    long long v9 = *(_OWORD *)(a2 + 17);
    long long v10 = *(_OWORD *)(a2 + 19);
    *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
    *(_OWORD *)(a1 + 152) = v10;
    *(_OWORD *)(a1 + 136) = v9;
    *(__n128 *)(a1 + 120) = result;
    *(unsigned char *)(a1 + 176) = 1;
  }
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ConnectionSendSyncResult(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  LOBYTE(v19) = 0;
  char v31 = 0;
  char v5 = *((unsigned char *)a3 + 176);
  if (v5)
  {
    long long v7 = *(long long *)((char *)a3 + 136);
    long long v27 = *(long long *)((char *)a3 + 120);
    long long v6 = v27;
    long long v28 = v7;
    long long v29 = *(long long *)((char *)a3 + 152);
    char v30 = *((unsigned char *)a3 + 168);
    long long v9 = *(long long *)((char *)a3 + 72);
    long long v23 = *(long long *)((char *)a3 + 56);
    long long v8 = v23;
    long long v24 = v9;
    long long v10 = *(long long *)((char *)a3 + 104);
    long long v25 = *(long long *)((char *)a3 + 88);
    long long v26 = v10;
    long long v11 = *(long long *)((char *)a3 + 40);
    long long v21 = *(long long *)((char *)a3 + 24);
    long long v22 = v11;
    char v5 = 1;
    char v31 = 1;
    long long v19 = 0u;
    long long v12 = *a3;
    *a3 = 0u;
    *(_OWORD *)(a1 + 8) = v12;
    uint64_t v20 = 0;
    *(void *)&long long v12 = *((void *)a3 + 2);
    *((void *)a3 + 2) = 0;
    *(void *)(a1 + 24) = v12;
    long long v13 = v28;
    *(_OWORD *)(a1 + 128) = v6;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = v29;
    *(unsigned char *)(a1 + 176) = v30;
    long long v14 = v24;
    long long v15 = v25;
    long long v16 = v26;
    *(_OWORD *)(a1 + 64) = v8;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    *(_OWORD *)(a1 + 112) = v16;
    long long v17 = v22;
    *(_OWORD *)(a1 + 32) = v21;
    *(_OWORD *)(a1 + 48) = v17;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 184) = v5;
  *(_DWORD *)(a1 + 192) = 0;
  std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 192);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EB120[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 192) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 192);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EB488[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 192) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages9RemoteGPU14RequestAdapterEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  *(void *)&double result = std::__optional_copy_assign_base<WebKit::RemoteGPURequestAdapterResponse,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(a2 + 1), a3 + 1).n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages9RemoteGPU14RequestAdapterEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemotePipelineLayout::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  double result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  uint64_t v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unsigned long long v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unsigned long long v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  double result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  char v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 1259;
      unint64_t v52 = v12 + 2;
    }
  }
  double result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v50, *a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        double result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  long long v25 = v46;
  long long v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v26 = 1259;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  char v50 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  long long v28 = v50;
  char v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

uint64_t IPC::StreamClientConnection::send<Messages::RemotePresentationContext::Present,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v6);
    if (!v48) {
      return 15;
    }
    unint64_t v19 = v46;
    unint64_t v18 = v47;
    unint64_t v20 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v46;
    if (v20 >= v46)
    {
      unint64_t v22 = v21 + 2;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v47)
      {
        *(_WORD *)(v46 + v21) = 2871;
        goto LABEL_30;
      }
      unint64_t v18 = 0;
    }
    unint64_t v22 = 0;
LABEL_30:
    unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v19 + v22)
    {
      unint64_t v22 = (unint64_t)v24 - v19 + 8;
      if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
        return 17;
      }
      *unint64_t v24 = a3;
    }
    if (v18)
    {
      unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(a1 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v22 <= 0x10) {
        unint64_t v22 = 16;
      }
      unint64_t v28 = v26 + v22;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(a1 + 80) = v28;
      unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28);
      int v30 = *(_DWORD *)(a1 + 116);
      if (v29 == 0x80000000 || v30 != 0)
      {
        unsigned int v32 = v30 + 1;
        *(_DWORD *)(a1 + 116) = v32;
        if (v32 >= *(_DWORD *)(a1 + 112))
        {
          if (*(unsigned char *)(a1 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
          }
          *(_DWORD *)(a1 + 116) = 0;
        }
      }
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v6);
  if (!v48) {
    return 15;
  }
  unint64_t v8 = v47;
  unint64_t v9 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v46;
  if (v9 < v46)
  {
    unint64_t v11 = 0;
    if (v47) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v47)
    {
LABEL_59:
      unint64_t v34 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v35 = v34 - v46;
      if (v34 < v46)
      {
        unint64_t v33 = 0;
      }
      else
      {
        unint64_t v33 = 0;
        if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v47)
        {
          *(_WORD *)(v46 + v35) = 2870;
          unint64_t v33 = v35 + 2;
        }
      }
      unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = *(void *)(a1 + 64);
      if (v36 + 16 < v8) {
        goto LABEL_64;
      }
      goto LABEL_73;
    }
    *(_WORD *)(v46 + v10) = 1262;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(a1 + 72);
      unint64_t v14 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(a1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(a1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) != 0x80000000
        && !*(_DWORD *)(a1 + 116))
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 116) = 0;
      return v17;
    }
  }
  unint64_t v33 = v48;
  if (v48) {
    goto LABEL_59;
  }
  __break(1u);
LABEL_73:
  unint64_t v36 = 0;
LABEL_64:
  if (v33 <= 0x10) {
    unint64_t v33 = 16;
  }
  unint64_t v37 = v36 + v33;
  if (v8 <= v37) {
    unint64_t v37 = 0;
  }
  *(void *)(a1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v38 = v45;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1262;
  *((void *)v39 + 1) = a3;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v49 = v39;
  uint64_t v17 = IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v49, 1, 0);
  unint64_t v41 = v49;
  unsigned __int8 v49 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v17;
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteQuerySet::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  double result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  unsigned int v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  double result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  char v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 1266;
      unint64_t v52 = v12 + 2;
    }
  }
  double result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v50, *a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        double result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  long long v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1266;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  char v50 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  unint64_t v28 = v50;
  char v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB4A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB4A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::OnSubmittedWorkDone &&,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB4D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::OnSubmittedWorkDone &&,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB4D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::OnSubmittedWorkDone &&,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::SupportsObjectIdentifierNullState<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9EB4F8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EB4F8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (a2 && *a2)
  {
    double result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if ((unsigned __int16)result <= 0xFFu)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      double result = a2[3];
      if (result && v6) {
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
      }
      if (!*(void *)(v2 + 8) && *(unsigned char *)(v2 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x1990DE4A8);
      }
    }
    else if (!*(void *)(v2 + 8) && *(unsigned char *)(v2 + 16))
    {
      __break(0xC471u);
      JUMPOUT(0x1990DE448);
    }
  }
  else
  {
    if (*(void *)(result + 8)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(unsigned char *)(result + 16) == 0;
    }
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1990DE4C8);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::WriteBuffer &&,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB520;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::WriteBuffer &&,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB520;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::WriteBuffer &&,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9EB548;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EB548;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (a2 && *a2)
  {
    double result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if ((unsigned __int16)result <= 0xFFu)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      double result = a2[3];
      if (result && v6) {
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
      }
      if (!*(void *)(v2 + 8) && *(unsigned char *)(v2 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x1990DE7D8);
      }
    }
    else if (!*(void *)(v2 + 8) && *(unsigned char *)(v2 + 16))
    {
      __break(0xC471u);
      JUMPOUT(0x1990DE778);
    }
  }
  else
  {
    if (*(void *)(result + 8)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(unsigned char *)(result + 16) == 0;
    }
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1990DE7F8);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    return (uint64_t)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(a1, (int *)a2, v4);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::WriteTexture &&,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EB570;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::WriteTexture &&,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EB570;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteQueue::WriteTexture &&,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void WebKit::WebGPU::RemoteRenderBundleEncoderProxy::~RemoteRenderBundleEncoderProxy(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  unint64_t v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *unint64_t v10 = 1276;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    unint64_t v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1276;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  long long v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  unint64_t v42 = v54;
  long long v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  int v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  long long v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB800;
  unsigned int v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteRenderBundleEncoderProxy::~RemoteRenderBundleEncoderProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setPipeline(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  ++v3[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::RenderPipeline *))(*(void *)v3 + 176))(v3, a2);
  double v5 = result;
  unint64_t v51 = result;
  if (v3[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    if (!v5) {
      return result;
    }
  }
  else
  {
    --v3[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v7 = *((void *)this + 4);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) != v7)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v53, v9);
    if (!v55) {
      return result;
    }
    unint64_t v35 = v53;
    unint64_t v36 = v54;
    unint64_t v37 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = v37 - v53;
    if (v37 < v53)
    {
      unint64_t v40 = 0;
      unint64_t v39 = v54;
    }
    else
    {
      unint64_t v39 = 0;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v40 = 0;
      }
      else
      {
        unint64_t v40 = 0;
        if (v38 + 2 <= v54)
        {
          *(_WORD *)(v53 + v38) = 2871;
          unint64_t v39 = v36;
          unint64_t v40 = v38 + 2;
        }
      }
    }
    unint64_t v41 = (void *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v41 >= v35 + v40)
    {
      unint64_t v40 = (unint64_t)v41 - v35 + 8;
      if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7 || v40 > v39) {
        return result;
      }
      *unint64_t v41 = v7;
    }
    if (!v39) {
      return result;
    }
    unint64_t v43 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *(void *)(v6 + 64);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v45 = v43 + v40;
    if (v44 <= v45) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = v45;
    }
    *(void *)(v6 + 80) = v46;
    unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v46);
    int v48 = *(_DWORD *)(v6 + 116);
    if (v47 == 0x80000000 || v48 != 0)
    {
      unsigned int v50 = v48 + 1;
      *(_DWORD *)(v6 + 116) = v50;
      if (v50 >= *(_DWORD *)(v6 + 112))
      {
        if (*(unsigned char *)(v6 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
    }
    *(void *)(v6 + 56) = v7;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v53, v9);
  if (!v55) {
    return result;
  }
  unint64_t v11 = v53;
  unint64_t v12 = v54;
  unint64_t v13 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - v53;
  if (v13 < v53)
  {
    unint64_t v16 = 0;
    unint64_t v15 = v54;
  }
  else
  {
    unint64_t v15 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_76;
    }
    unint64_t v16 = 0;
    if (v14 + 2 <= v54)
    {
      *(_WORD *)(v53 + v14) = 1288;
      unint64_t v15 = v12;
      unint64_t v16 = v14 + 2;
    }
  }
  while (1)
  {
    unint64_t v17 = (void *)((v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v11 + v16)
    {
      unint64_t v16 = (unint64_t)v17 - v11 + 8;
      if ((unint64_t)v17 - v11 > 0xFFFFFFFFFFFFFFF7 || v16 > v15) {
        goto LABEL_31;
      }
      *unint64_t v17 = v51;
    }
    if (v15)
    {
      uint64_t v19 = *(void *)(v6 + 72);
      unint64_t v20 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v21 = *(void *)(v6 + 64);
      if (v20 + 16 >= v21) {
        unint64_t v20 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v22 = v20 + v16;
      if (v21 <= v22) {
        unint64_t v22 = 0;
      }
      *(void *)(v6 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v19 + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v6 + 116))
      {
        if (*(unsigned char *)(v6 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
      return result;
    }
LABEL_31:
    if (v55) {
      break;
    }
    __break(1u);
LABEL_76:
    unint64_t v16 = v15;
  }
  unint64_t v23 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v53;
  if (v23 < v53)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v54)
    {
      *(_WORD *)(v53 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v6 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v6 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v28);
  *(_DWORD *)(v6 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(v6 + 8));
  unint64_t v29 = v52;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 1288;
  *((void *)v30 + 1) = v7;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  long long v56 = v30;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v30, (uint64_t *)&v51);
  IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v56, 1, 0);
  unsigned int v32 = v56;
  long long v56 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setIndexBuffer(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v55[0] = a4;
  v55[1] = a5;
  v54[0] = a6;
  v54[1] = a7;
  char v53 = a3;
  double v8 = (_DWORD *)a1[5];
  ++v8[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 40))(v8);
  double v10 = result;
  unint64_t v52 = result;
  if (v8[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    if (!v10) {
      return result;
    }
  }
  else
  {
    --v8[2];
    if (!result) {
      return result;
    }
  }
  v51[0] = &v52;
  v51[1] = &v53;
  v51[2] = v55;
  v51[3] = v54;
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
  uint64_t v12 = a1[4];
  double v13 = *(double *)(v11 + 120);
  double v14 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v14 = v13 + v15;
  }
  if (*(void *)(v11 + 56) != v12)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v60, v14);
    if (!(_BYTE)v62) {
      return result;
    }
    unint64_t v35 = v60;
    unint64_t v36 = v61;
    unint64_t v37 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = v37 - v60;
    if (v37 < v60)
    {
      unint64_t v40 = 0;
      unint64_t v39 = v61;
    }
    else
    {
      unint64_t v39 = 0;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v40 = 0;
      }
      else
      {
        unint64_t v40 = 0;
        if (v38 + 2 <= v61)
        {
          *(_WORD *)(v60 + v38) = 2871;
          unint64_t v39 = v36;
          unint64_t v40 = v38 + 2;
        }
      }
    }
    unint64_t v41 = (void *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v41 >= v35 + v40)
    {
      unint64_t v42 = (char *)v41 - v35;
      if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7) {
        return result;
      }
      unint64_t v40 = (unint64_t)(v42 + 8);
      if ((unint64_t)(v42 + 8) > v39) {
        return result;
      }
      *unint64_t v41 = v12;
    }
    if (!v39) {
      return result;
    }
    unint64_t v43 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *(void *)(v11 + 64);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v45 = v43 + v40;
    if (v44 <= v45) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = v45;
    }
    *(void *)(v11 + 80) = v46;
    unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v46);
    int v48 = *(_DWORD *)(v11 + 116);
    if (v47 == 0x80000000 || v48 != 0)
    {
      unsigned int v50 = v48 + 1;
      *(_DWORD *)(v11 + 116) = v50;
      if (v50 >= *(_DWORD *)(v11 + 112))
      {
        if (*(unsigned char *)(v11 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
        }
        *(_DWORD *)(v11 + 116) = 0;
      }
    }
    *(void *)(v11 + 56) = v12;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v57, v14);
  if (!v59) {
    return result;
  }
  unint64_t v60 = v57;
  unint64_t v61 = v58;
  unint64_t v62 = 0;
  unint64_t v16 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v17 = v16 >= v57;
  unint64_t v18 = v16 - v57;
  if (v17)
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v58)
    {
      unint64_t v61 = 0;
    }
    else
    {
      *(_WORD *)(v57 + v18) = 1286;
      unint64_t v62 = v18 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v60, (uint64_t)v51);
  if (v61)
  {
    unint64_t v20 = v62;
    unint64_t v21 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v11 + 64);
    if (v21 + 16 < v19)
    {
LABEL_16:
      if (v20 <= 0x10) {
        unint64_t v20 = 16;
      }
      unint64_t v22 = v21 + v20;
      if (v19 <= v22) {
        unint64_t v22 = 0;
      }
      *(void *)(v11 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v11 + 116))
      {
        if (*(unsigned char *)(v11 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
        }
        *(_DWORD *)(v11 + 116) = 0;
      }
      return result;
    }
LABEL_69:
    unint64_t v21 = 0;
    goto LABEL_16;
  }
  unint64_t v20 = v59;
  if (!v59)
  {
    __break(1u);
    goto LABEL_69;
  }
  unint64_t v23 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v57;
  if (v23 < v57)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v58)
    {
      *(_WORD *)(v57 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v11 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v11 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v28);
  *(_DWORD *)(v11 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(v11 + 8));
  unint64_t v29 = v56;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 1286;
  *((void *)v30 + 1) = v12;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  unint64_t v60 = (unint64_t)v30;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v30, (uint64_t)v51);
  IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v60, 1, 0);
  unsigned int v32 = (IPC::Encoder *)v60;
  unint64_t v60 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setVertexBuffer(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v92[0] = a4;
  v92[1] = a5;
  v91[0] = a6;
  v91[1] = a7;
  int v90 = a2;
  if (a3)
  {
    double v8 = (_DWORD *)*((void *)a1 + 5);
    ++v8[2];
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v8 + 40))(v8, a3);
    double v10 = result;
    int v89 = result;
    if (v8[2] == 1)
    {
      uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      if (!v10) {
        return result;
      }
    }
    else
    {
      --v8[2];
      if (!result) {
        return result;
      }
    }
    unint64_t v85 = (IPC::Encoder *)&v90;
    unint64_t v86 = &v89;
    unint64_t v87 = v92;
    unint64_t v88 = v91;
    uint64_t v11 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
    uint64_t v12 = *((void *)a1 + 4);
    double v25 = *(double *)(v11 + 120);
    double v26 = INFINITY;
    if (fabs(v25) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
      double v26 = v25 + v27;
    }
    if (*(void *)(v11 + 56) == v12)
    {
LABEL_26:
      uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v94, v26);
      if (!(_BYTE)v96) {
        return result;
      }
      long long v97 = v94;
      unint64_t v98 = (unint64_t)v95;
      unint64_t v99 = 0;
      unint64_t v28 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v17 = v28 >= (unint64_t)v94;
      unint64_t v29 = v28 - (void)v94;
      if (v17)
      {
        if (v29 > 0xFFFFFFFFFFFFFFFDLL || v29 + 2 > (unint64_t)v95) {
          goto LABEL_129;
        }
        *(_WORD *)((char *)v94 + v29) = 1289;
        unint64_t v99 = v29 + 2;
      }
      while (1)
      {
        uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v97, (uint64_t)&v85);
        if (v98)
        {
          uint64_t v30 = v99;
          unint64_t v31 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v32 = *(void *)(v11 + 64);
          if (v31 + 16 >= v32) {
            unint64_t v31 = 0;
          }
          if (v99 <= 0x10) {
            uint64_t v30 = 16;
          }
          unint64_t v23 = v31 + v30;
          if (v32 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(v11 + 80) = v23;
          uint64_t v24 = *(void *)(*(void *)(v11 + 72) + 16);
          goto LABEL_40;
        }
        if ((_BYTE)v96) {
          break;
        }
LABEL_128:
        __break(1u);
LABEL_129:
        unint64_t v98 = 0;
      }
      unint64_t v33 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = v33 - (void)v94;
      if (v33 < (unint64_t)v94)
      {
        unint64_t v35 = 0;
      }
      else
      {
        unint64_t v35 = 0;
        if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= (unint64_t)v95)
        {
          *(_WORD *)((char *)v94 + v34) = 2870;
          unint64_t v35 = v34 + 2;
        }
      }
      unint64_t v36 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v37 = *(void *)(v11 + 64);
      if (v36 + 16 >= v37) {
        unint64_t v36 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v38 = v36 + v35;
      if (v37 <= v38) {
        unint64_t v38 = 0;
      }
      *(void *)(v11 + 80) = v38;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v38);
      *(_DWORD *)(v11 + 116) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v93, (uint64_t **)(v11 + 8));
      unint64_t v39 = v93;
      unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v40 = 1289;
      *((void *)v40 + 1) = v12;
      *((void *)v40 + 66) = (char *)v40 + 16;
      *((void *)v40 + 67) = 512;
      *((void *)v40 + 68) = 0;
      *((void *)v40 + 70) = 0;
      *((void *)v40 + 69) = 0;
      IPC::Encoder::encodeHeader(v40);
      long long v97 = v40;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v40, (uint64_t)&v85);
      IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v97, 1, 0);
      unint64_t v42 = v97;
      long long v97 = 0;
      if (!v42) {
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
      }
LABEL_71:
      IPC::Encoder::~Encoder(v42, v41);
      WTF::fastFree(v51, v52);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
    }
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v97, v26);
    if ((_BYTE)v99)
    {
      char v53 = v97;
      unint64_t v54 = v98;
      unint64_t v55 = ((unint64_t)v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v56 = v55 - (void)v97;
      if (v55 < (unint64_t)v97)
      {
        unint64_t v58 = 0;
        unint64_t v57 = v98;
      }
      else
      {
        unint64_t v57 = 0;
        if (v56 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v58 = 0;
        }
        else
        {
          unint64_t v58 = 0;
          if (v56 + 2 <= v98)
          {
            *(_WORD *)((char *)v97 + v56) = 2871;
            unint64_t v57 = v54;
            unint64_t v58 = v56 + 2;
          }
        }
      }
      unsigned __int8 v59 = (char *)(((unint64_t)v53 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v59 >= (char *)v53 + v58)
      {
        int64_t v60 = v59 - (char *)v53;
        if ((unint64_t)(v59 - (char *)v53) > 0xFFFFFFFFFFFFFFF7) {
          return result;
        }
        unint64_t v58 = v60 + 8;
        if (v60 + 8 > v57) {
          return result;
        }
        *(void *)unsigned __int8 v59 = v12;
      }
      if (v57)
      {
        unint64_t v61 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v62 = *(void *)(v11 + 64);
        if (v61 + 16 >= v62) {
          unint64_t v61 = 0;
        }
        if (v58 <= 0x10) {
          unint64_t v58 = 16;
        }
        unint64_t v63 = v61 + v58;
        if (v62 <= v63) {
          unint64_t v64 = 0;
        }
        else {
          unint64_t v64 = v63;
        }
        *(void *)(v11 + 80) = v64;
        unint64_t v65 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v64);
        int v66 = *(_DWORD *)(v11 + 116);
        if (v65 == 0x80000000 || v66 != 0)
        {
          unsigned int v83 = v66 + 1;
          *(_DWORD *)(v11 + 116) = v83;
          if (v83 >= *(_DWORD *)(v11 + 112))
          {
            if (*(unsigned char *)(v11 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
            }
            *(_DWORD *)(v11 + 116) = 0;
          }
        }
        *(void *)(v11 + 56) = v12;
        goto LABEL_26;
      }
    }
  }
  else
  {
    long long v94 = (IPC::Encoder *)&v90;
    long long v95 = v92;
    long long v96 = v91;
    uint64_t v11 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
    uint64_t v12 = *((void *)a1 + 4);
    double v13 = *(double *)(v11 + 120);
    double v14 = INFINITY;
    if (fabs(v13) != INFINITY)
    {
      WTF::ApproximateTime::now(a1);
      double v14 = v13 + v15;
    }
    if (*(void *)(v11 + 56) != v12)
    {
      uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v85, v14);
      if (!(_BYTE)v87) {
        return result;
      }
      unsigned __int8 v68 = v85;
      unint64_t v69 = v86;
      unint64_t v70 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v71 = v70 - (void)v85;
      if (v70 < (unint64_t)v85)
      {
        unint64_t v73 = 0;
        uint64_t v72 = v86;
      }
      else
      {
        uint64_t v72 = 0;
        if (v71 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v73 = 0;
        }
        else
        {
          unint64_t v73 = 0;
          if (v71 + 2 <= (unint64_t)v86)
          {
            *(_WORD *)((char *)v85 + v71) = 2871;
            uint64_t v72 = v69;
            unint64_t v73 = v71 + 2;
          }
        }
      }
      uint64_t v74 = (char *)(((unint64_t)v68 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v74 >= (char *)v68 + v73)
      {
        unint64_t v73 = v74 - (char *)v68 + 8;
        if ((unint64_t)(v74 - (char *)v68) > 0xFFFFFFFFFFFFFFF7 || v73 > (unint64_t)v72) {
          return result;
        }
        *(void *)uint64_t v74 = v12;
      }
      if (!v72) {
        return result;
      }
      unint64_t v76 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v77 = *(void *)(v11 + 64);
      if (v76 + 16 >= v77) {
        unint64_t v76 = 0;
      }
      if (v73 <= 0x10) {
        unint64_t v73 = 16;
      }
      unint64_t v78 = v76 + v73;
      if (v77 <= v78) {
        unint64_t v79 = 0;
      }
      else {
        unint64_t v79 = v78;
      }
      *(void *)(v11 + 80) = v79;
      unint64_t v80 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v79);
      int v81 = *(_DWORD *)(v11 + 116);
      if (v80 == 0x80000000 || v81 != 0)
      {
        unsigned int v84 = v81 + 1;
        *(_DWORD *)(v11 + 116) = v84;
        if (v84 >= *(_DWORD *)(v11 + 112))
        {
          if (*(unsigned char *)(v11 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
          }
          *(_DWORD *)(v11 + 116) = 0;
        }
      }
      *(void *)(v11 + 56) = v12;
    }
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v97, v14);
    if (!(_BYTE)v99) {
      return result;
    }
    unint64_t v85 = v97;
    unint64_t v86 = (void *)v98;
    unint64_t v87 = 0;
    unint64_t v16 = ((unint64_t)v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v17 = v16 >= (unint64_t)v97;
    unint64_t v18 = v16 - (void)v97;
    if (v17)
    {
      if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v98)
      {
        unint64_t v86 = 0;
      }
      else
      {
        *(_WORD *)((char *)v97 + v18) = 1290;
        unint64_t v87 = (void *)(v18 + 2);
      }
    }
    uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(&v85, (uint64_t)&v94);
    if (!v86)
    {
      if (!(_BYTE)v99) {
        goto LABEL_128;
      }
      unint64_t v43 = ((unint64_t)v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v44 = v43 - (void)v97;
      if (v43 < (unint64_t)v97)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v45 = 0;
        if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v98)
        {
          *(_WORD *)((char *)v97 + v44) = 2870;
          unint64_t v45 = v44 + 2;
        }
      }
      unint64_t v46 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v47 = *(void *)(v11 + 64);
      if (v46 + 16 >= v47) {
        unint64_t v46 = 0;
      }
      if (v45 <= 0x10) {
        unint64_t v45 = 16;
      }
      unint64_t v48 = v46 + v45;
      if (v47 <= v48) {
        unint64_t v48 = 0;
      }
      *(void *)(v11 + 80) = v48;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v48);
      *(_DWORD *)(v11 + 116) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v93, (uint64_t **)(v11 + 8));
      unsigned __int8 v49 = v93;
      unsigned int v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v50 = 1290;
      *((void *)v50 + 1) = v12;
      *((void *)v50 + 66) = (char *)v50 + 16;
      *((void *)v50 + 67) = 512;
      *((void *)v50 + 68) = 0;
      *((void *)v50 + 70) = 0;
      *((void *)v50 + 69) = 0;
      IPC::Encoder::encodeHeader(v50);
      unint64_t v85 = v50;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(v50, (uint64_t)&v94);
      IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v85, 1, 0);
      unint64_t v42 = v85;
      unint64_t v85 = 0;
      if (!v42) {
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
      }
      goto LABEL_71;
    }
    uint64_t v19 = (uint64_t)v87;
    uint64_t v20 = *(void *)(v11 + 72);
    unint64_t v21 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = *(void *)(v11 + 64);
    if (v21 + 16 >= v22) {
      unint64_t v21 = 0;
    }
    if ((unint64_t)v87 <= 0x10) {
      uint64_t v19 = 16;
    }
    unint64_t v23 = v21 + v19;
    if (v22 <= v23) {
      unint64_t v23 = 0;
    }
    *(void *)(v11 + 80) = v23;
    uint64_t v24 = *(void *)(v20 + 16);
LABEL_40:
    if (atomic_exchange((atomic_ullong *volatile)(v24 + 128), v23) == 0x80000000 || *(_DWORD *)(v11 + 116))
    {
      if (*(unsigned char *)(v11 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
      }
      *(_DWORD *)(v11 + 116) = 0;
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::draw(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a4;
  uint64_t v51 = a3;
  uint64_t v49 = a5;
  int v48 = a2;
  v47[0] = &v48;
  v47[1] = &v51;
  v47[2] = &v50;
  v47[3] = &v49;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v6 = *((void *)a1 + 4);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) != v6)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v56, v8);
    if (!(_BYTE)v58) {
      return result;
    }
    unint64_t v31 = v56;
    unint64_t v32 = v57;
    unint64_t v33 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - v56;
    if (v33 < v56)
    {
      unint64_t v36 = 0;
      unint64_t v35 = v57;
    }
    else
    {
      unint64_t v35 = 0;
      if (v34 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v36 = 0;
      }
      else
      {
        unint64_t v36 = 0;
        if (v34 + 2 <= v57)
        {
          *(_WORD *)(v56 + v34) = 2871;
          unint64_t v35 = v32;
          unint64_t v36 = v34 + 2;
        }
      }
    }
    unint64_t v37 = (void *)((v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v37 >= v31 + v36)
    {
      unint64_t v36 = (unint64_t)v37 - v31 + 8;
      if ((unint64_t)v37 - v31 > 0xFFFFFFFFFFFFFFF7 || v36 > v35) {
        return result;
      }
      void *v37 = v6;
    }
    if (!v35) {
      return result;
    }
    unint64_t v39 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v40 = *(void *)(v5 + 64);
    if (v39 + 16 >= v40) {
      unint64_t v39 = 0;
    }
    if (v36 <= 0x10) {
      unint64_t v36 = 16;
    }
    unint64_t v41 = v39 + v36;
    if (v40 <= v41) {
      unint64_t v42 = 0;
    }
    else {
      unint64_t v42 = v41;
    }
    *(void *)(v5 + 80) = v42;
    unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v42);
    int v44 = *(_DWORD *)(v5 + 116);
    if (v43 == 0x80000000 || v44 != 0)
    {
      unsigned int v46 = v44 + 1;
      *(_DWORD *)(v5 + 116) = v46;
      if (v46 >= *(_DWORD *)(v5 + 112))
      {
        if (*(unsigned char *)(v5 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
        }
        *(_DWORD *)(v5 + 116) = 0;
      }
    }
    *(void *)(v5 + 56) = v6;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v53, v8);
  if (!v55) {
    return result;
  }
  unint64_t v56 = v53;
  unint64_t v57 = v54;
  unint64_t v58 = 0;
  unint64_t v11 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v12 = v11 >= v53;
  unint64_t v13 = v11 - v53;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v54)
    {
      unint64_t v57 = 0;
    }
    else
    {
      *(_WORD *)(v53 + v13) = 1277;
      unint64_t v58 = v13 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(&v56, (uint64_t)v47);
  if (v57)
  {
    uint64_t v15 = v58;
    uint64_t v16 = *(void *)(v5 + 72);
    unint64_t v17 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(v5 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v58 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(v5 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(v5 + 116))
    {
      if (*(unsigned char *)(v5 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v55;
  if (v55)
  {
    unint64_t v21 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - v53;
    if (v21 < v53)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v54)
      {
        *(_WORD *)(v53 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(v5 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_28;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_28:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(v5 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v24);
  *(_DWORD *)(v5 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(v5 + 8));
  double v25 = v52;
  double v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v26 = 1277;
  *((void *)v26 + 1) = v6;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v56 = (unint64_t)v26;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(v26, (uint64_t)v47);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v56, 1, 0);
  unint64_t v28 = (IPC::Encoder *)v56;
  unint64_t v56 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::drawIndexed(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a4;
  uint64_t v53 = a3;
  uint64_t v50 = a6;
  uint64_t v51 = a5;
  int v49 = a2;
  v48[0] = &v49;
  v48[1] = &v53;
  v48[2] = &v52;
  v48[3] = &v51;
  v48[4] = &v50;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v7 = *((void *)a1 + 4);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) != v7)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v58, v9);
    if (!(_BYTE)v60) {
      return result;
    }
    unint64_t v32 = v58;
    unint64_t v33 = v59;
    unint64_t v34 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 - v58;
    if (v34 < v58)
    {
      unint64_t v37 = 0;
      unint64_t v36 = v59;
    }
    else
    {
      unint64_t v36 = 0;
      if (v35 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v37 = 0;
      }
      else
      {
        unint64_t v37 = 0;
        if (v35 + 2 <= v59)
        {
          *(_WORD *)(v58 + v35) = 2871;
          unint64_t v36 = v33;
          unint64_t v37 = v35 + 2;
        }
      }
    }
    unint64_t v38 = (void *)((v32 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v38 >= v32 + v37)
    {
      unint64_t v37 = (unint64_t)v38 - v32 + 8;
      if ((unint64_t)v38 - v32 > 0xFFFFFFFFFFFFFFF7 || v37 > v36) {
        return result;
      }
      void *v38 = v7;
    }
    if (!v36) {
      return result;
    }
    unint64_t v40 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = *(void *)(v6 + 64);
    if (v40 + 16 >= v41) {
      unint64_t v40 = 0;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v42 = v40 + v37;
    if (v41 <= v42) {
      unint64_t v43 = 0;
    }
    else {
      unint64_t v43 = v42;
    }
    *(void *)(v6 + 80) = v43;
    unint64_t v44 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v43);
    int v45 = *(_DWORD *)(v6 + 116);
    if (v44 == 0x80000000 || v45 != 0)
    {
      unsigned int v47 = v45 + 1;
      *(_DWORD *)(v6 + 116) = v47;
      if (v47 >= *(_DWORD *)(v6 + 112))
      {
        if (*(unsigned char *)(v6 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
    }
    *(void *)(v6 + 56) = v7;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v55, v9);
  if (!v57) {
    return result;
  }
  unint64_t v58 = v55;
  unint64_t v59 = v56;
  unint64_t v60 = 0;
  unint64_t v12 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= v55;
  unint64_t v14 = v12 - v55;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v56)
    {
      unint64_t v59 = 0;
    }
    else
    {
      *(_WORD *)(v55 + v14) = 1278;
      unint64_t v60 = v14 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(&v58, (uint64_t)v48);
  if (v59)
  {
    uint64_t v16 = v60;
    uint64_t v17 = *(void *)(v6 + 72);
    unint64_t v18 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v6 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v60 <= 0x10) {
      uint64_t v16 = 16;
    }
    unint64_t v20 = v18 + v16;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(v6 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000
      || *(_DWORD *)(v6 + 116))
    {
      if (*(unsigned char *)(v6 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
      }
      *(_DWORD *)(v6 + 116) = 0;
    }
    return result;
  }
  unint64_t v21 = v57;
  if (v57)
  {
    unint64_t v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v55;
    if (v22 < v55)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
      {
        *(_WORD *)(v55 + v23) = 2870;
        unint64_t v21 = v23 + 2;
      }
    }
    unint64_t v24 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = *(void *)(v6 + 64);
    if (v24 + 16 < v15) {
      goto LABEL_28;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v24 = 0;
LABEL_28:
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v25 = v24 + v21;
  if (v15 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v6 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v25);
  *(_DWORD *)(v6 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v6 + 8));
  double v26 = v54;
  double v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v27 = 1278;
  *((void *)v27 + 1) = v7;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unint64_t v58 = (unint64_t)v27;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(v27, (uint64_t)v48);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v58, 1, 0);
  unint64_t v29 = (IPC::Encoder *)v58;
  unint64_t v58 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v30, v31);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::drawIndirect(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v58 = a3;
  double v4 = (_DWORD *)*((void *)this + 5);
  ++v4[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v4 + 40))(v4, a2);
  uint64_t v6 = result;
  unsigned __int8 v57 = result;
  if (v4[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    if (!v6) {
      return result;
    }
  }
  else
  {
    --v4[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) != v8)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v60, v10);
    if (!v62) {
      return result;
    }
    unint64_t v41 = v60;
    unint64_t v42 = v61;
    unint64_t v43 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = v43 - v60;
    if (v43 < v60)
    {
      unint64_t v46 = 0;
      unint64_t v45 = v61;
    }
    else
    {
      unint64_t v45 = 0;
      if (v44 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v46 = 0;
        if (v44 + 2 <= v61)
        {
          *(_WORD *)(v60 + v44) = 2871;
          unint64_t v45 = v42;
          unint64_t v46 = v44 + 2;
        }
      }
    }
    unsigned int v47 = (void *)((v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v47 >= v41 + v46)
    {
      unint64_t v46 = (unint64_t)v47 - v41 + 8;
      if ((unint64_t)v47 - v41 > 0xFFFFFFFFFFFFFFF7 || v46 > v45) {
        return result;
      }
      void *v47 = v8;
    }
    if (!v45) {
      return result;
    }
    unint64_t v49 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = *(void *)(v7 + 64);
    if (v49 + 16 >= v50) {
      unint64_t v49 = 0;
    }
    if (v46 <= 0x10) {
      unint64_t v46 = 16;
    }
    unint64_t v51 = v49 + v46;
    if (v50 <= v51) {
      unint64_t v52 = 0;
    }
    else {
      unint64_t v52 = v51;
    }
    *(void *)(v7 + 80) = v52;
    unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v52);
    int v54 = *(_DWORD *)(v7 + 116);
    if (v53 == 0x80000000 || v54 != 0)
    {
      unsigned int v56 = v54 + 1;
      *(_DWORD *)(v7 + 116) = v56;
      if (v56 >= *(_DWORD *)(v7 + 112))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
    }
    *(void *)(v7 + 56) = v8;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v60, v10);
  if (!v62) {
    return result;
  }
  unint64_t v12 = v60;
  unint64_t v13 = v61;
  unint64_t v14 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v60;
  if (v14 < v60)
  {
    unint64_t v17 = 0;
    unint64_t v16 = v61;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_81;
    }
    unint64_t v17 = 0;
    if (v15 + 2 <= v61)
    {
      *(_WORD *)(v60 + v15) = 1280;
      unint64_t v16 = v13;
      unint64_t v17 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = v18 - (v12 + v17);
    if (v18 >= v12 + v17)
    {
      unint64_t v20 = v18 - v12;
      unint64_t v21 = v19 + v17 + 8;
      if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v16)
      {
        unint64_t v16 = 0;
      }
      else
      {
        *(void *)(v12 + v20) = v57;
        unint64_t v17 = v21;
      }
    }
    unint64_t v23 = (void *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v23 >= v12 + v17)
    {
      unint64_t v24 = (char *)v23 - v12;
      if ((unint64_t)v23 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_35;
      }
      unint64_t v17 = (unint64_t)(v24 + 8);
      if ((unint64_t)(v24 + 8) > v16) {
        goto LABEL_35;
      }
      *unint64_t v23 = v58;
    }
    if (v16)
    {
      uint64_t v25 = *(void *)(v7 + 72);
      unint64_t v26 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(v7 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v28 = v26 + v17;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(v7 + 80) = v28;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v25 + 16) + 128), v28) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      return result;
    }
LABEL_35:
    unint64_t v12 = v62;
    if (v62) {
      break;
    }
    __break(1u);
LABEL_81:
    unint64_t v17 = v16;
  }
  unint64_t v29 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = v29 - v60;
  if (v29 < v60)
  {
    unint64_t v31 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v61)
    {
      *(_WORD *)(v60 + v30) = 2870;
      unint64_t v31 = v30 + 2;
    }
  }
  unint64_t v32 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = *(void *)(v7 + 64);
  if (v32 + 16 >= v33) {
    unint64_t v32 = 0;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v34 = v32 + v31;
  if (v33 <= v34) {
    unint64_t v34 = 0;
  }
  *(void *)(v7 + 80) = v34;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v34);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v7 + 8));
  unint64_t v35 = v59;
  unint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v36 = 1280;
  *((void *)v36 + 1) = v8;
  *((void *)v36 + 66) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  unint64_t v63 = v36;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v36, (uint64_t *)&v57);
  IPC::Encoder::operator<<<unsigned long long const&>(v36, &v58);
  IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v63, 1, 0);
  unint64_t v38 = v63;
  unint64_t v63 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v39, v40);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::drawIndexedIndirect(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v58 = a3;
  double v4 = (_DWORD *)*((void *)this + 5);
  ++v4[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v4 + 40))(v4, a2);
  uint64_t v6 = result;
  unsigned __int8 v57 = result;
  if (v4[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    if (!v6) {
      return result;
    }
  }
  else
  {
    --v4[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) != v8)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v60, v10);
    if (!v62) {
      return result;
    }
    unint64_t v41 = v60;
    unint64_t v42 = v61;
    unint64_t v43 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = v43 - v60;
    if (v43 < v60)
    {
      unint64_t v46 = 0;
      unint64_t v45 = v61;
    }
    else
    {
      unint64_t v45 = 0;
      if (v44 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v46 = 0;
        if (v44 + 2 <= v61)
        {
          *(_WORD *)(v60 + v44) = 2871;
          unint64_t v45 = v42;
          unint64_t v46 = v44 + 2;
        }
      }
    }
    unsigned int v47 = (void *)((v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v47 >= v41 + v46)
    {
      unint64_t v46 = (unint64_t)v47 - v41 + 8;
      if ((unint64_t)v47 - v41 > 0xFFFFFFFFFFFFFFF7 || v46 > v45) {
        return result;
      }
      void *v47 = v8;
    }
    if (!v45) {
      return result;
    }
    unint64_t v49 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = *(void *)(v7 + 64);
    if (v49 + 16 >= v50) {
      unint64_t v49 = 0;
    }
    if (v46 <= 0x10) {
      unint64_t v46 = 16;
    }
    unint64_t v51 = v49 + v46;
    if (v50 <= v51) {
      unint64_t v52 = 0;
    }
    else {
      unint64_t v52 = v51;
    }
    *(void *)(v7 + 80) = v52;
    unint64_t v53 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v52);
    int v54 = *(_DWORD *)(v7 + 116);
    if (v53 == 0x80000000 || v54 != 0)
    {
      unsigned int v56 = v54 + 1;
      *(_DWORD *)(v7 + 116) = v56;
      if (v56 >= *(_DWORD *)(v7 + 112))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
    }
    *(void *)(v7 + 56) = v8;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v60, v10);
  if (!v62) {
    return result;
  }
  unint64_t v12 = v60;
  unint64_t v13 = v61;
  unint64_t v14 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v60;
  if (v14 < v60)
  {
    unint64_t v17 = 0;
    unint64_t v16 = v61;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_81;
    }
    unint64_t v17 = 0;
    if (v15 + 2 <= v61)
    {
      *(_WORD *)(v60 + v15) = 1279;
      unint64_t v16 = v13;
      unint64_t v17 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = v18 - (v12 + v17);
    if (v18 >= v12 + v17)
    {
      unint64_t v20 = v18 - v12;
      unint64_t v21 = v19 + v17 + 8;
      if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v16)
      {
        unint64_t v16 = 0;
      }
      else
      {
        *(void *)(v12 + v20) = v57;
        unint64_t v17 = v21;
      }
    }
    unint64_t v23 = (void *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v23 >= v12 + v17)
    {
      unint64_t v24 = (char *)v23 - v12;
      if ((unint64_t)v23 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_35;
      }
      unint64_t v17 = (unint64_t)(v24 + 8);
      if ((unint64_t)(v24 + 8) > v16) {
        goto LABEL_35;
      }
      *unint64_t v23 = v58;
    }
    if (v16)
    {
      uint64_t v25 = *(void *)(v7 + 72);
      unint64_t v26 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(v7 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v28 = v26 + v17;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(v7 + 80) = v28;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v25 + 16) + 128), v28) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      return result;
    }
LABEL_35:
    unint64_t v12 = v62;
    if (v62) {
      break;
    }
    __break(1u);
LABEL_81:
    unint64_t v17 = v16;
  }
  unint64_t v29 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = v29 - v60;
  if (v29 < v60)
  {
    unint64_t v31 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v61)
    {
      *(_WORD *)(v60 + v30) = 2870;
      unint64_t v31 = v30 + 2;
    }
  }
  unint64_t v32 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = *(void *)(v7 + 64);
  if (v32 + 16 >= v33) {
    unint64_t v32 = 0;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v34 = v32 + v31;
  if (v33 <= v34) {
    unint64_t v34 = 0;
  }
  *(void *)(v7 + 80) = v34;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v34);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v7 + 8));
  unint64_t v35 = v59;
  unint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v36 = 1279;
  *((void *)v36 + 1) = v8;
  *((void *)v36 + 66) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  unint64_t v63 = v36;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v36, (uint64_t *)&v57);
  IPC::Encoder::operator<<<unsigned long long const&>(v36, &v58);
  IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v63, 1, 0);
  unint64_t v38 = v63;
  unint64_t v63 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v39, v40);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v59);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setBindGroup(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v6 = (_DWORD *)a1[5];
  ++v6[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v6 + 24))(v6, a3);
  uint64_t v8 = result;
  double v10 = result;
  if (v6[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    if (!v8) {
      return result;
    }
  }
  else
  {
    --v6[2];
    if (!result) {
      return result;
    }
  }
  v9[0] = &v11;
  v9[1] = &v10;
  void v9[2] = a4;
  return IPC::StreamClientConnection::send<Messages::RemoteRenderBundleEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80), (uint64_t)v9, a1[4]);
}

WTF *WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setBindGroup(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  int v24 = a2;
  int v11 = (_DWORD *)*((void *)this + 5);
  ++v11[2];
  uint64_t result = (WTF *)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::BindGroup *))(*(void *)v11 + 24))(v11, a3);
  unint64_t v13 = result;
  unint64_t v23 = result;
  if (v11[2] == 1)
  {
    uint64_t result = (WTF *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    if (!v13) {
      return result;
    }
  }
  else
  {
    --v11[2];
    if (!result) {
      return result;
    }
  }
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v17, (int *)&a4[a6], a7);
  unint64_t v19 = v17;
  uint64_t v14 = v18;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v20 = v14;
  char v21 = 1;
  v22[0] = &v24;
  v22[1] = &v23;
  v22[2] = &v19;
  IPC::StreamClientConnection::send<Messages::RemoteRenderBundleEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80), (uint64_t)v22, *((void *)this + 4));
  if (v21)
  {
    unint64_t v16 = v19;
    if (v19)
    {
      unint64_t v19 = 0;
      LODWORD(v20) = 0;
      WTF::fastFree(v16, v15);
    }
  }
  uint64_t result = v17;
  if (v17)
  {
    unint64_t v17 = 0;
    LODWORD(v18) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1284;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  int v24 = v45;
  uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v25 = 1284;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1283;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1283;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unsigned __int8 v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1282;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  int v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1282;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

uint64_t WebKit::WebGPU::RemoteRenderBundleEncoderProxy::finish@<X0>(void *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = (_DWORD *)a1[5];
  ++v5[2];
  double v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  unsigned int v56 = v6;
  char v57 = 1;
  double v7 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v55 = v7;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1[6] + 72) + 72) + 80);
  uint64_t v9 = a1[4];
  double v10 = *(double *)(v8 + 120);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v11 = v10 + v12;
  }
  if (*(void *)(v8 + 56) == v9)
  {
LABEL_6:
    IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v59, v11);
    if (!v61) {
      goto LABEL_41;
    }
    unsigned __int8 v62 = v59;
    unint64_t v63 = v60;
    unint64_t v64 = 0;
    unint64_t v14 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v15 = v14 >= (unint64_t)v59;
    unint64_t v16 = v14 - (void)v59;
    if (v15)
    {
      if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v60)
      {
        unint64_t v63 = 0;
      }
      else
      {
        *(_WORD *)((char *)v59 + v16) = 1281;
        unint64_t v64 = v16 + 2;
      }
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v62, (uint64_t *)&v56);
    unint64_t v17 = v62;
    unint64_t v18 = v64;
    unint64_t v19 = (char *)(((unint64_t)v62 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= (char *)v62 + v64)
    {
      int64_t v20 = v19 - (char *)v62;
      if ((unint64_t)(v19 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || (unint64_t v18 = v20 + 8, v20 + 8 > v63))
      {
LABEL_27:
        unint64_t v18 = v61;
        if (!v61)
        {
          __break(1u);
          goto LABEL_82;
        }
        unint64_t v23 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v24 = v23 - (void)v59;
        if (v23 < (unint64_t)v59)
        {
          unint64_t v25 = 0;
        }
        else
        {
          unint64_t v25 = 0;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v60)
          {
            *(_WORD *)((char *)v59 + v24) = 2870;
            unint64_t v25 = v24 + 2;
          }
        }
        unint64_t v26 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v27 = *(void *)(v8 + 64);
        if (v26 + 16 >= v27) {
          unint64_t v26 = 0;
        }
        if (v25 <= 0x10) {
          unint64_t v25 = 16;
        }
        unint64_t v28 = v26 + v25;
        if (v27 <= v28) {
          unint64_t v28 = 0;
        }
        *(void *)(v8 + 80) = v28;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v28);
        *(_DWORD *)(v8 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v8 + 8));
        int v29 = v58;
        unint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v30 = 1281;
        *((void *)v30 + 1) = v9;
        *((void *)v30 + 66) = (char *)v30 + 16;
        *((void *)v30 + 67) = 512;
        *((void *)v30 + 68) = 0;
        *((void *)v30 + 70) = 0;
        *((void *)v30 + 69) = 0;
        IPC::Encoder::encodeHeader(v30);
        unsigned __int8 v62 = v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)&v56);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v30, (uint64_t *)&v55);
        int v32 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v62, 1, 0);
        unint64_t v33 = v62;
        unsigned __int8 v62 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v31);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
        if (!v32) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      *(void *)unint64_t v19 = v55;
      unint64_t v64 = v20 + 8;
    }
    unint64_t v17 = (IPC::Encoder *)v63;
    if (v63)
    {
      unint64_t v21 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = *(IPC::Encoder **)(v8 + 64);
      if (v21 + 16 < (unint64_t)v17)
      {
LABEL_18:
        if (v18 <= 0x10) {
          unint64_t v18 = 16;
        }
        unint64_t v22 = v21 + v18;
        if ((unint64_t)v17 <= v22) {
          unint64_t v22 = 0;
        }
        *(void *)(v8 + 80) = v22;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v22) == 0x80000000
          || *(_DWORD *)(v8 + 116))
        {
          if (*(unsigned char *)(v8 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
          }
          *(_DWORD *)(v8 + 116) = 0;
        }
LABEL_42:
        uint64_t v35 = a1[6];
        uint64_t v36 = (uint64_t)v55;
        uint64_t result = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(result + 8) = 1;
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
        *(void *)uint64_t result = &unk_1EE9EB628;
        *(void *)(result + 32) = v36;
        ++v5[2];
        *(void *)(result + 40) = v5;
        ++*(_DWORD *)(v35 + 8);
        *(void *)(result + 48) = v35;
        goto LABEL_43;
      }
LABEL_82:
      unint64_t v21 = 0;
      goto LABEL_18;
    }
    goto LABEL_27;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v62, v11);
  if ((_BYTE)v64)
  {
    unint64_t v39 = v62;
    unint64_t v40 = v63;
    unint64_t v41 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - (void)v62;
    if (v41 < (unint64_t)v62)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v63;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v63)
        {
          *(_WORD *)((char *)v62 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    unint64_t v45 = (char *)(((unint64_t)v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v45 >= (char *)v39 + v44)
    {
      unint64_t v44 = v45 - (char *)v39 + 8;
      if ((unint64_t)(v45 - (char *)v39) > 0xFFFFFFFFFFFFFFF7 || v44 > v43) {
        goto LABEL_41;
      }
      *(void *)unint64_t v45 = v9;
    }
    if (v43)
    {
      unint64_t v47 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v48 = *(void *)(v8 + 64);
      if (v47 + 16 >= v48) {
        unint64_t v47 = 0;
      }
      if (v44 <= 0x10) {
        unint64_t v44 = 16;
      }
      unint64_t v49 = v47 + v44;
      if (v48 <= v49) {
        unint64_t v50 = 0;
      }
      else {
        unint64_t v50 = v49;
      }
      *(void *)(v8 + 80) = v50;
      unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v50);
      int v52 = *(_DWORD *)(v8 + 116);
      if (v51 == 0x80000000 || v52 != 0)
      {
        unsigned int v54 = v52 + 1;
        *(_DWORD *)(v8 + 116) = v54;
        if (v54 >= *(_DWORD *)(v8 + 112))
        {
          if (*(unsigned char *)(v8 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
          }
          *(_DWORD *)(v8 + 116) = 0;
        }
      }
      *(void *)(v8 + 56) = v9;
      goto LABEL_6;
    }
  }
LABEL_41:
  uint64_t result = 0;
LABEL_43:
  *a3 = result;
  if (v57)
  {
    uint64_t result = (uint64_t)v56;
    unsigned int v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v5[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  }
  --v5[2];
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  uint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)uint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1287;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1287;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteRenderBundleProxy::~RemoteRenderBundleProxy(WebKit::WebGPU::RemoteRenderBundleProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 1291;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1291;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unsigned int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB890;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteRenderBundleProxy::~RemoteRenderBundleProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderBundleProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderBundleProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1292;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1292;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteRenderPassEncoderProxy::~RemoteRenderPassEncoderProxy(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 1294;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1294;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unsigned int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB8B8;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteRenderPassEncoderProxy::~RemoteRenderPassEncoderProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setPipeline(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  ++v3[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::RenderPipeline *))(*(void *)v3 + 176))(v3, a2);
  double v5 = result;
  unint64_t v51 = result;
  if (v3[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    if (!v5) {
      return result;
    }
  }
  else
  {
    --v3[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v7 = *((void *)this + 4);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) != v7)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v53, v9);
    if (!v55) {
      return result;
    }
    unint64_t v35 = v53;
    unint64_t v36 = v54;
    unint64_t v37 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = v37 - v53;
    if (v37 < v53)
    {
      unint64_t v40 = 0;
      unint64_t v39 = v54;
    }
    else
    {
      unint64_t v39 = 0;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v40 = 0;
      }
      else
      {
        unint64_t v40 = 0;
        if (v38 + 2 <= v54)
        {
          *(_WORD *)(v53 + v38) = 2871;
          unint64_t v39 = v36;
          unint64_t v40 = v38 + 2;
        }
      }
    }
    unint64_t v41 = (void *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v41 >= v35 + v40)
    {
      unint64_t v40 = (unint64_t)v41 - v35 + 8;
      if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7 || v40 > v39) {
        return result;
      }
      *unint64_t v41 = v7;
    }
    if (!v39) {
      return result;
    }
    unint64_t v43 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *(void *)(v6 + 64);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v45 = v43 + v40;
    if (v44 <= v45) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = v45;
    }
    *(void *)(v6 + 80) = v46;
    unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v46);
    int v48 = *(_DWORD *)(v6 + 116);
    if (v47 == 0x80000000 || v48 != 0)
    {
      unsigned int v50 = v48 + 1;
      *(_DWORD *)(v6 + 116) = v50;
      if (v50 >= *(_DWORD *)(v6 + 112))
      {
        if (*(unsigned char *)(v6 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
    }
    *(void *)(v6 + 56) = v7;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v53, v9);
  if (!v55) {
    return result;
  }
  unint64_t v11 = v53;
  unint64_t v12 = v54;
  unint64_t v13 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - v53;
  if (v13 < v53)
  {
    unint64_t v16 = 0;
    unint64_t v15 = v54;
  }
  else
  {
    unint64_t v15 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_76;
    }
    unint64_t v16 = 0;
    if (v14 + 2 <= v54)
    {
      *(_WORD *)(v53 + v14) = 1309;
      unint64_t v15 = v12;
      unint64_t v16 = v14 + 2;
    }
  }
  while (1)
  {
    unint64_t v17 = (void *)((v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v11 + v16)
    {
      unint64_t v16 = (unint64_t)v17 - v11 + 8;
      if ((unint64_t)v17 - v11 > 0xFFFFFFFFFFFFFFF7 || v16 > v15) {
        goto LABEL_31;
      }
      *unint64_t v17 = v51;
    }
    if (v15)
    {
      uint64_t v19 = *(void *)(v6 + 72);
      unint64_t v20 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v21 = *(void *)(v6 + 64);
      if (v20 + 16 >= v21) {
        unint64_t v20 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v22 = v20 + v16;
      if (v21 <= v22) {
        unint64_t v22 = 0;
      }
      *(void *)(v6 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v19 + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v6 + 116))
      {
        if (*(unsigned char *)(v6 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
      return result;
    }
LABEL_31:
    if (v55) {
      break;
    }
    __break(1u);
LABEL_76:
    unint64_t v16 = v15;
  }
  unint64_t v23 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v53;
  if (v23 < v53)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v54)
    {
      *(_WORD *)(v53 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v6 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v6 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v28);
  *(_DWORD *)(v6 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(v6 + 8));
  unint64_t v29 = v52;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 1309;
  *((void *)v30 + 1) = v7;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  unsigned int v56 = v30;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v30, (uint64_t *)&v51);
  IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v56, 1, 0);
  unsigned int v32 = v56;
  unsigned int v56 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setIndexBuffer(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v55[0] = a4;
  v55[1] = a5;
  v54[0] = a6;
  v54[1] = a7;
  char v53 = a3;
  double v8 = (_DWORD *)a1[5];
  ++v8[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 40))(v8);
  double v10 = result;
  unint64_t v52 = result;
  if (v8[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    if (!v10) {
      return result;
    }
  }
  else
  {
    --v8[2];
    if (!result) {
      return result;
    }
  }
  v51[0] = &v52;
  v51[1] = &v53;
  v51[2] = v55;
  v51[3] = v54;
  uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)(a1[6] + 48) + 72) + 72) + 80);
  uint64_t v12 = a1[4];
  double v13 = *(double *)(v11 + 120);
  double v14 = INFINITY;
  if (fabs(v13) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v14 = v13 + v15;
  }
  if (*(void *)(v11 + 56) != v12)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v60, v14);
    if (!(_BYTE)v62) {
      return result;
    }
    unint64_t v35 = v60;
    unint64_t v36 = v61;
    unint64_t v37 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = v37 - v60;
    if (v37 < v60)
    {
      unint64_t v40 = 0;
      unint64_t v39 = v61;
    }
    else
    {
      unint64_t v39 = 0;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v40 = 0;
      }
      else
      {
        unint64_t v40 = 0;
        if (v38 + 2 <= v61)
        {
          *(_WORD *)(v60 + v38) = 2871;
          unint64_t v39 = v36;
          unint64_t v40 = v38 + 2;
        }
      }
    }
    unint64_t v41 = (void *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v41 >= v35 + v40)
    {
      int v42 = (char *)v41 - v35;
      if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7) {
        return result;
      }
      unint64_t v40 = (unint64_t)(v42 + 8);
      if ((unint64_t)(v42 + 8) > v39) {
        return result;
      }
      *unint64_t v41 = v12;
    }
    if (!v39) {
      return result;
    }
    unint64_t v43 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *(void *)(v11 + 64);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v45 = v43 + v40;
    if (v44 <= v45) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = v45;
    }
    *(void *)(v11 + 80) = v46;
    unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v46);
    int v48 = *(_DWORD *)(v11 + 116);
    if (v47 == 0x80000000 || v48 != 0)
    {
      unsigned int v50 = v48 + 1;
      *(_DWORD *)(v11 + 116) = v50;
      if (v50 >= *(_DWORD *)(v11 + 112))
      {
        if (*(unsigned char *)(v11 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
        }
        *(_DWORD *)(v11 + 116) = 0;
      }
    }
    *(void *)(v11 + 56) = v12;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v57, v14);
  if (!v59) {
    return result;
  }
  unint64_t v60 = v57;
  unint64_t v61 = v58;
  unint64_t v62 = 0;
  unint64_t v16 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v17 = v16 >= v57;
  unint64_t v18 = v16 - v57;
  if (v17)
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v58)
    {
      unint64_t v61 = 0;
    }
    else
    {
      *(_WORD *)(v57 + v18) = 1307;
      unint64_t v62 = v18 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v60, (uint64_t)v51);
  if (v61)
  {
    unint64_t v20 = v62;
    unint64_t v21 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v11 + 64);
    if (v21 + 16 < v19)
    {
LABEL_16:
      if (v20 <= 0x10) {
        unint64_t v20 = 16;
      }
      unint64_t v22 = v21 + v20;
      if (v19 <= v22) {
        unint64_t v22 = 0;
      }
      *(void *)(v11 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v11 + 116))
      {
        if (*(unsigned char *)(v11 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
        }
        *(_DWORD *)(v11 + 116) = 0;
      }
      return result;
    }
LABEL_69:
    unint64_t v21 = 0;
    goto LABEL_16;
  }
  unint64_t v20 = v59;
  if (!v59)
  {
    __break(1u);
    goto LABEL_69;
  }
  unint64_t v23 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v57;
  if (v23 < v57)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v58)
    {
      *(_WORD *)(v57 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v11 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v11 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v28);
  *(_DWORD *)(v11 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(v11 + 8));
  unint64_t v29 = v56;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 1307;
  *((void *)v30 + 1) = v12;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  unint64_t v60 = (unint64_t)v30;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v30, (uint64_t)v51);
  IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v60, 1, 0);
  unsigned int v32 = (IPC::Encoder *)v60;
  unint64_t v60 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setVertexBuffer(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v92[0] = a4;
  v92[1] = a5;
  v91[0] = a6;
  v91[1] = a7;
  int v90 = a2;
  if (a3)
  {
    double v8 = (_DWORD *)*((void *)a1 + 5);
    ++v8[2];
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v8 + 40))(v8, a3);
    double v10 = result;
    int v89 = result;
    if (v8[2] == 1)
    {
      uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      if (!v10) {
        return result;
      }
    }
    else
    {
      --v8[2];
      if (!result) {
        return result;
      }
    }
    unint64_t v85 = (IPC::Encoder *)&v90;
    unint64_t v86 = &v89;
    unint64_t v87 = v92;
    unint64_t v88 = v91;
    uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
    uint64_t v12 = *((void *)a1 + 4);
    double v25 = *(double *)(v11 + 120);
    double v26 = INFINITY;
    if (fabs(v25) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
      double v26 = v25 + v27;
    }
    if (*(void *)(v11 + 56) == v12)
    {
LABEL_26:
      uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v94, v26);
      if (!(_BYTE)v96) {
        return result;
      }
      long long v97 = v94;
      unint64_t v98 = (unint64_t)v95;
      unint64_t v99 = 0;
      unint64_t v28 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v17 = v28 >= (unint64_t)v94;
      unint64_t v29 = v28 - (void)v94;
      if (v17)
      {
        if (v29 > 0xFFFFFFFFFFFFFFFDLL || v29 + 2 > (unint64_t)v95) {
          goto LABEL_129;
        }
        *(_WORD *)((char *)v94 + v29) = 1312;
        unint64_t v99 = v29 + 2;
      }
      while (1)
      {
        uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v97, (uint64_t)&v85);
        if (v98)
        {
          uint64_t v30 = v99;
          unint64_t v31 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v32 = *(void *)(v11 + 64);
          if (v31 + 16 >= v32) {
            unint64_t v31 = 0;
          }
          if (v99 <= 0x10) {
            uint64_t v30 = 16;
          }
          unint64_t v23 = v31 + v30;
          if (v32 <= v23) {
            unint64_t v23 = 0;
          }
          *(void *)(v11 + 80) = v23;
          uint64_t v24 = *(void *)(*(void *)(v11 + 72) + 16);
          goto LABEL_40;
        }
        if ((_BYTE)v96) {
          break;
        }
LABEL_128:
        __break(1u);
LABEL_129:
        unint64_t v98 = 0;
      }
      unint64_t v33 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = v33 - (void)v94;
      if (v33 < (unint64_t)v94)
      {
        unint64_t v35 = 0;
      }
      else
      {
        unint64_t v35 = 0;
        if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= (unint64_t)v95)
        {
          *(_WORD *)((char *)v94 + v34) = 2870;
          unint64_t v35 = v34 + 2;
        }
      }
      unint64_t v36 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v37 = *(void *)(v11 + 64);
      if (v36 + 16 >= v37) {
        unint64_t v36 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v38 = v36 + v35;
      if (v37 <= v38) {
        unint64_t v38 = 0;
      }
      *(void *)(v11 + 80) = v38;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v38);
      *(_DWORD *)(v11 + 116) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v93, (uint64_t **)(v11 + 8));
      unint64_t v39 = v93;
      unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v40 = 1312;
      *((void *)v40 + 1) = v12;
      *((void *)v40 + 66) = (char *)v40 + 16;
      *((void *)v40 + 67) = 512;
      *((void *)v40 + 68) = 0;
      *((void *)v40 + 70) = 0;
      *((void *)v40 + 69) = 0;
      IPC::Encoder::encodeHeader(v40);
      long long v97 = v40;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v40, (uint64_t)&v85);
      IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v97, 1, 0);
      int v42 = v97;
      long long v97 = 0;
      if (!v42) {
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
      }
LABEL_71:
      IPC::Encoder::~Encoder(v42, v41);
      WTF::fastFree(v51, v52);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
    }
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v97, v26);
    if ((_BYTE)v99)
    {
      char v53 = v97;
      unint64_t v54 = v98;
      unint64_t v55 = ((unint64_t)v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v56 = v55 - (void)v97;
      if (v55 < (unint64_t)v97)
      {
        unint64_t v58 = 0;
        unint64_t v57 = v98;
      }
      else
      {
        unint64_t v57 = 0;
        if (v56 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v58 = 0;
        }
        else
        {
          unint64_t v58 = 0;
          if (v56 + 2 <= v98)
          {
            *(_WORD *)((char *)v97 + v56) = 2871;
            unint64_t v57 = v54;
            unint64_t v58 = v56 + 2;
          }
        }
      }
      unsigned __int8 v59 = (char *)(((unint64_t)v53 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v59 >= (char *)v53 + v58)
      {
        int64_t v60 = v59 - (char *)v53;
        if ((unint64_t)(v59 - (char *)v53) > 0xFFFFFFFFFFFFFFF7) {
          return result;
        }
        unint64_t v58 = v60 + 8;
        if (v60 + 8 > v57) {
          return result;
        }
        *(void *)unsigned __int8 v59 = v12;
      }
      if (v57)
      {
        unint64_t v61 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v62 = *(void *)(v11 + 64);
        if (v61 + 16 >= v62) {
          unint64_t v61 = 0;
        }
        if (v58 <= 0x10) {
          unint64_t v58 = 16;
        }
        unint64_t v63 = v61 + v58;
        if (v62 <= v63) {
          unint64_t v64 = 0;
        }
        else {
          unint64_t v64 = v63;
        }
        *(void *)(v11 + 80) = v64;
        unint64_t v65 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v64);
        int v66 = *(_DWORD *)(v11 + 116);
        if (v65 == 0x80000000 || v66 != 0)
        {
          unsigned int v83 = v66 + 1;
          *(_DWORD *)(v11 + 116) = v83;
          if (v83 >= *(_DWORD *)(v11 + 112))
          {
            if (*(unsigned char *)(v11 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
            }
            *(_DWORD *)(v11 + 116) = 0;
          }
        }
        *(void *)(v11 + 56) = v12;
        goto LABEL_26;
      }
    }
  }
  else
  {
    long long v94 = (IPC::Encoder *)&v90;
    long long v95 = v92;
    long long v96 = v91;
    uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
    uint64_t v12 = *((void *)a1 + 4);
    double v13 = *(double *)(v11 + 120);
    double v14 = INFINITY;
    if (fabs(v13) != INFINITY)
    {
      WTF::ApproximateTime::now(a1);
      double v14 = v13 + v15;
    }
    if (*(void *)(v11 + 56) != v12)
    {
      uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v85, v14);
      if (!(_BYTE)v87) {
        return result;
      }
      unsigned __int8 v68 = v85;
      unint64_t v69 = v86;
      unint64_t v70 = ((unint64_t)v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v71 = v70 - (void)v85;
      if (v70 < (unint64_t)v85)
      {
        unint64_t v73 = 0;
        uint64_t v72 = v86;
      }
      else
      {
        uint64_t v72 = 0;
        if (v71 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v73 = 0;
        }
        else
        {
          unint64_t v73 = 0;
          if (v71 + 2 <= (unint64_t)v86)
          {
            *(_WORD *)((char *)v85 + v71) = 2871;
            uint64_t v72 = v69;
            unint64_t v73 = v71 + 2;
          }
        }
      }
      uint64_t v74 = (char *)(((unint64_t)v68 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v74 >= (char *)v68 + v73)
      {
        unint64_t v73 = v74 - (char *)v68 + 8;
        if ((unint64_t)(v74 - (char *)v68) > 0xFFFFFFFFFFFFFFF7 || v73 > (unint64_t)v72) {
          return result;
        }
        *(void *)uint64_t v74 = v12;
      }
      if (!v72) {
        return result;
      }
      unint64_t v76 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v77 = *(void *)(v11 + 64);
      if (v76 + 16 >= v77) {
        unint64_t v76 = 0;
      }
      if (v73 <= 0x10) {
        unint64_t v73 = 16;
      }
      unint64_t v78 = v76 + v73;
      if (v77 <= v78) {
        unint64_t v79 = 0;
      }
      else {
        unint64_t v79 = v78;
      }
      *(void *)(v11 + 80) = v79;
      unint64_t v80 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v79);
      int v81 = *(_DWORD *)(v11 + 116);
      if (v80 == 0x80000000 || v81 != 0)
      {
        unsigned int v84 = v81 + 1;
        *(_DWORD *)(v11 + 116) = v84;
        if (v84 >= *(_DWORD *)(v11 + 112))
        {
          if (*(unsigned char *)(v11 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
          }
          *(_DWORD *)(v11 + 116) = 0;
        }
      }
      *(void *)(v11 + 56) = v12;
    }
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v11 + 64, &v97, v14);
    if (!(_BYTE)v99) {
      return result;
    }
    unint64_t v85 = v97;
    unint64_t v86 = (void *)v98;
    unint64_t v87 = 0;
    unint64_t v16 = ((unint64_t)v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v17 = v16 >= (unint64_t)v97;
    unint64_t v18 = v16 - (void)v97;
    if (v17)
    {
      if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v98)
      {
        unint64_t v86 = 0;
      }
      else
      {
        *(_WORD *)((char *)v97 + v18) = 1314;
        unint64_t v87 = (void *)(v18 + 2);
      }
    }
    uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(&v85, (uint64_t)&v94);
    if (!v86)
    {
      if (!(_BYTE)v99) {
        goto LABEL_128;
      }
      unint64_t v43 = ((unint64_t)v97 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v44 = v43 - (void)v97;
      if (v43 < (unint64_t)v97)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v45 = 0;
        if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v98)
        {
          *(_WORD *)((char *)v97 + v44) = 2870;
          unint64_t v45 = v44 + 2;
        }
      }
      unint64_t v46 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v47 = *(void *)(v11 + 64);
      if (v46 + 16 >= v47) {
        unint64_t v46 = 0;
      }
      if (v45 <= 0x10) {
        unint64_t v45 = 16;
      }
      unint64_t v48 = v46 + v45;
      if (v47 <= v48) {
        unint64_t v48 = 0;
      }
      *(void *)(v11 + 80) = v48;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v11 + 72) + 16) + 128), v48);
      *(_DWORD *)(v11 + 116) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v93, (uint64_t **)(v11 + 8));
      unint64_t v49 = v93;
      unsigned int v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v50 = 1314;
      *((void *)v50 + 1) = v12;
      *((void *)v50 + 66) = (char *)v50 + 16;
      *((void *)v50 + 67) = 512;
      *((void *)v50 + 68) = 0;
      *((void *)v50 + 70) = 0;
      *((void *)v50 + 69) = 0;
      IPC::Encoder::encodeHeader(v50);
      unint64_t v85 = v50;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(v50, (uint64_t)&v94);
      IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v85, 1, 0);
      int v42 = v85;
      unint64_t v85 = 0;
      if (!v42) {
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
      }
      goto LABEL_71;
    }
    uint64_t v19 = (uint64_t)v87;
    uint64_t v20 = *(void *)(v11 + 72);
    unint64_t v21 = (*(void *)(v11 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = *(void *)(v11 + 64);
    if (v21 + 16 >= v22) {
      unint64_t v21 = 0;
    }
    if ((unint64_t)v87 <= 0x10) {
      uint64_t v19 = 16;
    }
    unint64_t v23 = v21 + v19;
    if (v22 <= v23) {
      unint64_t v23 = 0;
    }
    *(void *)(v11 + 80) = v23;
    uint64_t v24 = *(void *)(v20 + 16);
LABEL_40:
    if (atomic_exchange((atomic_ullong *volatile)(v24 + 128), v23) == 0x80000000 || *(_DWORD *)(v11 + 116))
    {
      if (*(unsigned char *)(v11 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v11 + 92));
      }
      *(_DWORD *)(v11 + 116) = 0;
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::draw(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a4;
  uint64_t v51 = a3;
  uint64_t v49 = a5;
  int v48 = a2;
  v47[0] = &v48;
  v47[1] = &v51;
  v47[2] = &v50;
  v47[3] = &v49;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
  uint64_t v6 = *((void *)a1 + 4);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) != v6)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v56, v8);
    if (!(_BYTE)v58) {
      return result;
    }
    unint64_t v31 = v56;
    unint64_t v32 = v57;
    unint64_t v33 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - v56;
    if (v33 < v56)
    {
      unint64_t v36 = 0;
      unint64_t v35 = v57;
    }
    else
    {
      unint64_t v35 = 0;
      if (v34 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v36 = 0;
      }
      else
      {
        unint64_t v36 = 0;
        if (v34 + 2 <= v57)
        {
          *(_WORD *)(v56 + v34) = 2871;
          unint64_t v35 = v32;
          unint64_t v36 = v34 + 2;
        }
      }
    }
    unint64_t v37 = (void *)((v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v37 >= v31 + v36)
    {
      unint64_t v36 = (unint64_t)v37 - v31 + 8;
      if ((unint64_t)v37 - v31 > 0xFFFFFFFFFFFFFFF7 || v36 > v35) {
        return result;
      }
      void *v37 = v6;
    }
    if (!v35) {
      return result;
    }
    unint64_t v39 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v40 = *(void *)(v5 + 64);
    if (v39 + 16 >= v40) {
      unint64_t v39 = 0;
    }
    if (v36 <= 0x10) {
      unint64_t v36 = 16;
    }
    unint64_t v41 = v39 + v36;
    if (v40 <= v41) {
      unint64_t v42 = 0;
    }
    else {
      unint64_t v42 = v41;
    }
    *(void *)(v5 + 80) = v42;
    unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v42);
    int v44 = *(_DWORD *)(v5 + 116);
    if (v43 == 0x80000000 || v44 != 0)
    {
      unsigned int v46 = v44 + 1;
      *(_DWORD *)(v5 + 116) = v46;
      if (v46 >= *(_DWORD *)(v5 + 112))
      {
        if (*(unsigned char *)(v5 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
        }
        *(_DWORD *)(v5 + 116) = 0;
      }
    }
    *(void *)(v5 + 56) = v6;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v53, v8);
  if (!v55) {
    return result;
  }
  unint64_t v56 = v53;
  unint64_t v57 = v54;
  unint64_t v58 = 0;
  unint64_t v11 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v12 = v11 >= v53;
  unint64_t v13 = v11 - v53;
  if (v12)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v54)
    {
      unint64_t v57 = 0;
    }
    else
    {
      *(_WORD *)(v53 + v13) = 1295;
      unint64_t v58 = v13 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(&v56, (uint64_t)v47);
  if (v57)
  {
    uint64_t v15 = v58;
    uint64_t v16 = *(void *)(v5 + 72);
    unint64_t v17 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(v5 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v58 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(v5 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(v5 + 116))
    {
      if (*(unsigned char *)(v5 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v55;
  if (v55)
  {
    unint64_t v21 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - v53;
    if (v21 < v53)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v54)
      {
        *(_WORD *)(v53 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(v5 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_28;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_28:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(v5 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v24);
  *(_DWORD *)(v5 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(v5 + 8));
  double v25 = v52;
  double v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v26 = 1295;
  *((void *)v26 + 1) = v6;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v56 = (unint64_t)v26;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(v26, (uint64_t)v47);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v56, 1, 0);
  unint64_t v28 = (IPC::Encoder *)v56;
  unint64_t v56 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::drawIndexed(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a4;
  uint64_t v53 = a3;
  uint64_t v50 = a6;
  uint64_t v51 = a5;
  int v49 = a2;
  v48[0] = &v49;
  v48[1] = &v53;
  v48[2] = &v52;
  v48[3] = &v51;
  v48[4] = &v50;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
  uint64_t v7 = *((void *)a1 + 4);
  double v8 = *(double *)(v6 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v9 = v8 + v10;
  }
  if (*(void *)(v6 + 56) != v7)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v58, v9);
    if (!(_BYTE)v60) {
      return result;
    }
    unint64_t v32 = v58;
    unint64_t v33 = v59;
    unint64_t v34 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 - v58;
    if (v34 < v58)
    {
      unint64_t v37 = 0;
      unint64_t v36 = v59;
    }
    else
    {
      unint64_t v36 = 0;
      if (v35 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v37 = 0;
      }
      else
      {
        unint64_t v37 = 0;
        if (v35 + 2 <= v59)
        {
          *(_WORD *)(v58 + v35) = 2871;
          unint64_t v36 = v33;
          unint64_t v37 = v35 + 2;
        }
      }
    }
    unint64_t v38 = (void *)((v32 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v38 >= v32 + v37)
    {
      unint64_t v39 = (char *)v38 - v32;
      if ((unint64_t)v38 - v32 > 0xFFFFFFFFFFFFFFF7) {
        return result;
      }
      unint64_t v37 = (unint64_t)(v39 + 8);
      if ((unint64_t)(v39 + 8) > v36) {
        return result;
      }
      void *v38 = v7;
    }
    if (!v36) {
      return result;
    }
    unint64_t v40 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = *(void *)(v6 + 64);
    if (v40 + 16 >= v41) {
      unint64_t v40 = 0;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v42 = v40 + v37;
    if (v41 <= v42) {
      unint64_t v43 = 0;
    }
    else {
      unint64_t v43 = v42;
    }
    *(void *)(v6 + 80) = v43;
    unint64_t v44 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v43);
    int v45 = *(_DWORD *)(v6 + 116);
    if (v44 == 0x80000000 || v45 != 0)
    {
      unsigned int v47 = v45 + 1;
      *(_DWORD *)(v6 + 116) = v47;
      if (v47 >= *(_DWORD *)(v6 + 112))
      {
        if (*(unsigned char *)(v6 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
        }
        *(_DWORD *)(v6 + 116) = 0;
      }
    }
    *(void *)(v6 + 56) = v7;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 64, &v55, v9);
  if (!v57) {
    return result;
  }
  unint64_t v58 = v55;
  unint64_t v59 = v56;
  unint64_t v60 = 0;
  unint64_t v12 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= v55;
  unint64_t v14 = v12 - v55;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v56)
    {
      unint64_t v59 = 0;
    }
    else
    {
      *(_WORD *)(v55 + v14) = 1296;
      unint64_t v60 = v14 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(&v58, (uint64_t)v48);
  if (v59)
  {
    uint64_t v16 = v60;
    uint64_t v17 = *(void *)(v6 + 72);
    unint64_t v18 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(v6 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v60 <= 0x10) {
      uint64_t v16 = 16;
    }
    unint64_t v20 = v18 + v16;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(v6 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000
      || *(_DWORD *)(v6 + 116))
    {
      if (*(unsigned char *)(v6 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v6 + 92));
      }
      *(_DWORD *)(v6 + 116) = 0;
    }
    return result;
  }
  unint64_t v21 = v57;
  if (v57)
  {
    unint64_t v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v55;
    if (v22 < v55)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
      {
        *(_WORD *)(v55 + v23) = 2870;
        unint64_t v21 = v23 + 2;
      }
    }
    unint64_t v24 = (*(void *)(v6 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = *(void *)(v6 + 64);
    if (v24 + 16 < v15) {
      goto LABEL_28;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v24 = 0;
LABEL_28:
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v25 = v24 + v21;
  if (v15 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v6 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v6 + 72) + 16) + 128), v25);
  *(_DWORD *)(v6 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v6 + 8));
  double v26 = v54;
  double v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v27 = 1296;
  *((void *)v27 + 1) = v7;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unint64_t v58 = (unint64_t)v27;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(v27, (uint64_t)v48);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v58, 1, 0);
  unint64_t v29 = (IPC::Encoder *)v58;
  unint64_t v58 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v30, v31);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::drawIndirect(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v57 = a3;
  double v4 = (_DWORD *)*((void *)this + 5);
  ++v4[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v4 + 40))(v4, a2);
  uint64_t v6 = result;
  unint64_t v56 = result;
  if (v4[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    if (!v6) {
      return result;
    }
  }
  else
  {
    --v4[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) != v8)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v59, v10);
    if (!v61) {
      return result;
    }
    unint64_t v39 = v59;
    unint64_t v40 = v60;
    unint64_t v41 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - v59;
    if (v41 < v59)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v60;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v60)
        {
          *(_WORD *)(v59 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    int v45 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v45 >= v39 + v44)
    {
      unint64_t v44 = (unint64_t)v45 - v39 + 8;
      if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7 || v44 > v43) {
        return result;
      }
      *int v45 = v8;
    }
    if (!v43) {
      return result;
    }
    unint64_t v47 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = *(void *)(v7 + 64);
    if (v47 + 16 >= v48) {
      unint64_t v47 = 0;
    }
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v49 = v47 + v44;
    if (v48 <= v49) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = v49;
    }
    *(void *)(v7 + 80) = v50;
    unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v50);
    int v52 = *(_DWORD *)(v7 + 116);
    if (v51 == 0x80000000 || v52 != 0)
    {
      unsigned int v54 = v52 + 1;
      *(_DWORD *)(v7 + 116) = v54;
      if (v54 >= *(_DWORD *)(v7 + 112))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
    }
    *(void *)(v7 + 56) = v8;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v59, v10);
  if (!v61) {
    return result;
  }
  unint64_t v12 = v59;
  unint64_t v13 = v60;
  unint64_t v14 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v59;
  if (v14 < v59)
  {
    unint64_t v17 = 0;
    unint64_t v16 = v60;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_79;
    }
    unint64_t v17 = 0;
    if (v15 + 2 <= v60)
    {
      *(_WORD *)(v59 + v15) = 1298;
      unint64_t v16 = v13;
      unint64_t v17 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v19 = v18 >= v12 + v17;
    unint64_t v20 = v18 - (v12 + v17);
    if (v19)
    {
      unint64_t v55 = 0;
      unint64_t v21 = v20 + v17;
      if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= v16)
      {
        *(void *)(v12 + v21) = v56;
        unint64_t v55 = v16;
        unint64_t v17 = v21 + 8;
      }
    }
    else
    {
      unint64_t v55 = v16;
    }
    unint64_t v22 = (void *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v16 = (unint64_t)v22 - v12 - v17;
    if ((unint64_t)v22 >= v12 + v17)
    {
      unint64_t v16 = (unint64_t)v22 - v12;
      if ((unint64_t)v22 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_34;
      }
      unint64_t v17 = v16 + 8;
      if (v16 + 8 > v55) {
        goto LABEL_34;
      }
      *unint64_t v22 = v57;
    }
    if (v55)
    {
      uint64_t v23 = *(void *)(v7 + 72);
      unint64_t v24 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(v7 + 64);
      if (v24 + 16 >= v25) {
        unint64_t v24 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v26 = v24 + v17;
      if (v25 <= v26) {
        unint64_t v26 = 0;
      }
      *(void *)(v7 + 80) = v26;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      return result;
    }
LABEL_34:
    unint64_t v12 = v61;
    if (v61) {
      break;
    }
    __break(1u);
LABEL_79:
    unint64_t v17 = v16;
  }
  unint64_t v27 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v59;
  if (v27 < v59)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v60)
    {
      *(_WORD *)(v59 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(v7 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(v7 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v32);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v7 + 8));
  unint64_t v33 = v58;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1298;
  *((void *)v34 + 1) = v8;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v62 = v34;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, (uint64_t *)&v56);
  IPC::Encoder::operator<<<unsigned long long const&>(v34, &v57);
  IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v62, 1, 0);
  unint64_t v36 = v62;
  unint64_t v62 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v35);
    WTF::fastFree(v37, v38);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::drawIndexedIndirect(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v57 = a3;
  double v4 = (_DWORD *)*((void *)this + 5);
  ++v4[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::Buffer *))(*(void *)v4 + 40))(v4, a2);
  uint64_t v6 = result;
  unint64_t v56 = result;
  if (v4[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    if (!v6) {
      return result;
    }
  }
  else
  {
    --v4[2];
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) != v8)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v59, v10);
    if (!v61) {
      return result;
    }
    unint64_t v39 = v59;
    unint64_t v40 = v60;
    unint64_t v41 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v42 = v41 - v59;
    if (v41 < v59)
    {
      unint64_t v44 = 0;
      unint64_t v43 = v60;
    }
    else
    {
      unint64_t v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v44 = 0;
        if (v42 + 2 <= v60)
        {
          *(_WORD *)(v59 + v42) = 2871;
          unint64_t v43 = v40;
          unint64_t v44 = v42 + 2;
        }
      }
    }
    int v45 = (void *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v45 >= v39 + v44)
    {
      unint64_t v44 = (unint64_t)v45 - v39 + 8;
      if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7 || v44 > v43) {
        return result;
      }
      *int v45 = v8;
    }
    if (!v43) {
      return result;
    }
    unint64_t v47 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = *(void *)(v7 + 64);
    if (v47 + 16 >= v48) {
      unint64_t v47 = 0;
    }
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v49 = v47 + v44;
    if (v48 <= v49) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = v49;
    }
    *(void *)(v7 + 80) = v50;
    unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v50);
    int v52 = *(_DWORD *)(v7 + 116);
    if (v51 == 0x80000000 || v52 != 0)
    {
      unsigned int v54 = v52 + 1;
      *(_DWORD *)(v7 + 116) = v54;
      if (v54 >= *(_DWORD *)(v7 + 112))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
    }
    *(void *)(v7 + 56) = v8;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v59, v10);
  if (!v61) {
    return result;
  }
  unint64_t v12 = v59;
  unint64_t v13 = v60;
  unint64_t v14 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v59;
  if (v14 < v59)
  {
    unint64_t v17 = 0;
    unint64_t v16 = v60;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_79;
    }
    unint64_t v17 = 0;
    if (v15 + 2 <= v60)
    {
      *(_WORD *)(v59 + v15) = 1297;
      unint64_t v16 = v13;
      unint64_t v17 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v19 = v18 >= v12 + v17;
    unint64_t v20 = v18 - (v12 + v17);
    if (v19)
    {
      unint64_t v55 = 0;
      unint64_t v21 = v20 + v17;
      if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= v16)
      {
        *(void *)(v12 + v21) = v56;
        unint64_t v55 = v16;
        unint64_t v17 = v21 + 8;
      }
    }
    else
    {
      unint64_t v55 = v16;
    }
    unint64_t v22 = (void *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v16 = (unint64_t)v22 - v12 - v17;
    if ((unint64_t)v22 >= v12 + v17)
    {
      unint64_t v16 = (unint64_t)v22 - v12;
      if ((unint64_t)v22 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_34;
      }
      unint64_t v17 = v16 + 8;
      if (v16 + 8 > v55) {
        goto LABEL_34;
      }
      *unint64_t v22 = v57;
    }
    if (v55)
    {
      uint64_t v23 = *(void *)(v7 + 72);
      unint64_t v24 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = *(void *)(v7 + 64);
      if (v24 + 16 >= v25) {
        unint64_t v24 = 0;
      }
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v26 = v24 + v17;
      if (v25 <= v26) {
        unint64_t v26 = 0;
      }
      *(void *)(v7 + 80) = v26;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      return result;
    }
LABEL_34:
    unint64_t v12 = v61;
    if (v61) {
      break;
    }
    __break(1u);
LABEL_79:
    unint64_t v17 = v16;
  }
  unint64_t v27 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v59;
  if (v27 < v59)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v60)
    {
      *(_WORD *)(v59 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(v7 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(v7 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v32);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v7 + 8));
  unint64_t v33 = v58;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1297;
  *((void *)v34 + 1) = v8;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v62 = v34;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v34, (uint64_t *)&v56);
  IPC::Encoder::operator<<<unsigned long long const&>(v34, &v57);
  IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v62, 1, 0);
  unint64_t v36 = v62;
  unint64_t v62 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v35);
    WTF::fastFree(v37, v38);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setBindGroup(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = a2;
  uint64_t v6 = (_DWORD *)a1[5];
  ++v6[2];
  uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v6 + 24))(v6, a3);
  uint64_t v8 = result;
  double v10 = result;
  if (v6[2] == 1)
  {
    uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    if (!v8) {
      return result;
    }
  }
  else
  {
    --v6[2];
    if (!result) {
      return result;
    }
  }
  v9[0] = &v11;
  v9[1] = &v10;
  void v9[2] = a4;
  return IPC::StreamClientConnection::send<Messages::RemoteRenderPassEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*(void *)(a1[6] + 48) + 72) + 72) + 80), (uint64_t)v9, a1[4]);
}

WTF *WebKit::WebGPU::RemoteRenderPassEncoderProxy::setBindGroup(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  int v24 = a2;
  int v11 = (_DWORD *)*((void *)this + 5);
  ++v11[2];
  uint64_t result = (WTF *)(*(uint64_t (**)(_DWORD *, const WebCore::WebGPU::BindGroup *))(*(void *)v11 + 24))(v11, a3);
  unint64_t v13 = result;
  uint64_t v23 = result;
  if (v11[2] == 1)
  {
    uint64_t result = (WTF *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    if (!v13) {
      return result;
    }
  }
  else
  {
    --v11[2];
    if (!result) {
      return result;
    }
  }
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v17, (int *)&a4[a6], a7);
  BOOL v19 = v17;
  uint64_t v14 = v18;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v20 = v14;
  char v21 = 1;
  v22[0] = &v24;
  v22[1] = &v23;
  v22[2] = &v19;
  IPC::StreamClientConnection::send<Messages::RemoteRenderPassEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80), (uint64_t)v22, *((void *)this + 4));
  if (v21)
  {
    unint64_t v16 = v19;
    if (v19)
    {
      BOOL v19 = 0;
      LODWORD(v20) = 0;
      WTF::fastFree(v16, v15);
    }
  }
  uint64_t result = v17;
  if (v17)
  {
    unint64_t v17 = 0;
    LODWORD(v18) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1304;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  int v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1304;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1303;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1303;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unsigned __int8 v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unsigned __int8 v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 48) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1302;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  int v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1302;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setViewport(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v14 = *((void *)this + 4);
  double v15 = *(double *)(v13 + 120);
  double v16 = INFINITY;
  if (fabs(v15) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v16 = v15 + v17;
  }
  if (*(void *)(v13 + 56) == v14) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v13 + 64, &v82, v16);
  if (!v84) {
    return result;
  }
  unint64_t v65 = v82;
  unint64_t v64 = v83;
  unint64_t v66 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v67 = v66 - v82;
  if (v66 < v82) {
    goto LABEL_105;
  }
  unint64_t v68 = v67 + 2;
  if (v67 > 0xFFFFFFFFFFFFFFFDLL || v68 > v83)
  {
    unint64_t v64 = 0;
LABEL_105:
    unint64_t v68 = 0;
    goto LABEL_75;
  }
  *(_WORD *)(v82 + v67) = 2871;
LABEL_75:
  unint64_t v70 = (void *)((v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v70 >= v65 + v68)
  {
    unint64_t v68 = (unint64_t)v70 - v65 + 8;
    if ((unint64_t)v70 - v65 > 0xFFFFFFFFFFFFFFF7 || v68 > v64) {
      return result;
    }
    *unint64_t v70 = v14;
  }
  if (!v64) {
    return result;
  }
  unint64_t v72 = (*(void *)(v13 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v73 = *(void *)(v13 + 64);
  if (v72 + 16 >= v73) {
    unint64_t v72 = 0;
  }
  if (v68 <= 0x10) {
    unint64_t v68 = 16;
  }
  unint64_t v74 = v72 + v68;
  if (v73 <= v74) {
    unint64_t v74 = 0;
  }
  *(void *)(v13 + 80) = v74;
  unint64_t v75 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v13 + 72) + 16) + 128), v74);
  int v76 = *(_DWORD *)(v13 + 116);
  if (v75 == 0x80000000 || v76 != 0)
  {
    unsigned int v78 = v76 + 1;
    *(_DWORD *)(v13 + 116) = v78;
    if (v78 >= *(_DWORD *)(v13 + 112))
    {
      if (*(unsigned char *)(v13 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v13 + 92));
      }
      *(_DWORD *)(v13 + 116) = 0;
    }
  }
  *(void *)(v13 + 56) = v14;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v13 + 64, &v82, v16);
  if (!v84) {
    return result;
  }
  unint64_t v19 = v82;
  unint64_t v20 = v83;
  unint64_t v21 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v22 = v21 - v82;
  if (v21 >= v82)
  {
    unint64_t v23 = v22 + 2;
    if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v23 <= v83)
    {
      *(_WORD *)(v82 + v22) = 1313;
      goto LABEL_11;
    }
    unint64_t v20 = 0;
  }
  unint64_t v23 = 0;
LABEL_11:
  unint64_t v25 = (v19 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = v25 - (v19 + v23);
  if (v25 >= v19 + v23)
  {
    unint64_t v27 = v25 - v19;
    unint64_t v28 = v26 + v23 + 4;
    if (v27 > 0xFFFFFFFFFFFFFFFBLL || v28 > v20)
    {
      unint64_t v20 = 0;
    }
    else
    {
      *(float *)(v19 + v27) = a2;
      unint64_t v23 = v28;
    }
  }
  unint64_t v30 = (v19 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v31 = v30 - (v19 + v23);
  if (v30 >= v19 + v23)
  {
    unint64_t v32 = v30 - v19;
    unint64_t v33 = v31 + v23 + 4;
    if (v32 > 0xFFFFFFFFFFFFFFFBLL || v33 > v20)
    {
      unint64_t v20 = 0;
    }
    else
    {
      *(float *)(v19 + v32) = a3;
      unint64_t v23 = v33;
    }
  }
  unint64_t v35 = (v19 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v36 = v35 >= v19 + v23;
  unint64_t v37 = v35 - (v19 + v23);
  if (v36)
  {
    unint64_t v79 = 0;
    unint64_t v38 = v37 + v23;
    if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= v20)
    {
      *(float *)(v19 + v38) = a4;
      unint64_t v79 = v20;
      unint64_t v23 = v38 + 4;
    }
  }
  else
  {
    unint64_t v79 = v20;
  }
  unint64_t v39 = (v19 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v40 = v39 - (v19 + v23);
  if (v39 < v19 + v23)
  {
    unint64_t v41 = v79;
  }
  else
  {
    unint64_t v41 = 0;
    unint64_t v42 = v40 + v23;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v79)
    {
      *(float *)(v19 + v42) = a5;
      unint64_t v41 = v79;
      unint64_t v23 = v42 + 4;
    }
  }
  unint64_t v43 = (v19 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v36 = v43 >= v19 + v23;
  unint64_t v44 = v43 - (v19 + v23);
  if (v36)
  {
    unint64_t v80 = 0;
    unint64_t v45 = v44 + v23;
    if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= v41)
    {
      *(float *)(v19 + v45) = a6;
      unint64_t v80 = v41;
      unint64_t v23 = v45 + 4;
    }
  }
  else
  {
    unint64_t v80 = v41;
  }
  unint64_t v46 = (float *)((v19 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v46 >= v19 + v23)
  {
    unint64_t v47 = (char *)v46 - v19;
    if ((unint64_t)v46 - v19 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_53;
    }
    unint64_t v23 = (unint64_t)(v47 + 4);
    if ((unint64_t)(v47 + 4) > v80) {
      goto LABEL_53;
    }
    *unint64_t v46 = a7;
  }
  if (v80)
  {
    unint64_t v48 = (*(void *)(v13 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = *(void *)(v13 + 64);
    if (v48 + 16 < v49)
    {
LABEL_43:
      if (v23 <= 0x10) {
        unint64_t v23 = 16;
      }
      unint64_t v50 = v48 + v23;
      if (v49 <= v50) {
        unint64_t v51 = 0;
      }
      else {
        unint64_t v51 = v50;
      }
      *(void *)(v13 + 80) = v51;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v13 + 72) + 16) + 128), v51) == 0x80000000
        || *(_DWORD *)(v13 + 116))
      {
        if (*(unsigned char *)(v13 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v13 + 92));
        }
        *(_DWORD *)(v13 + 116) = 0;
      }
      return result;
    }
LABEL_103:
    unint64_t v48 = 0;
    goto LABEL_43;
  }
LABEL_53:
  unint64_t v49 = v84;
  if (!v84)
  {
    __break(1u);
    goto LABEL_103;
  }
  unint64_t v52 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = v52 - v82;
  if (v52 < v82)
  {
    unint64_t v54 = 0;
  }
  else
  {
    unint64_t v54 = 0;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v83)
    {
      *(_WORD *)(v82 + v53) = 2870;
      unint64_t v54 = v53 + 2;
    }
  }
  unint64_t v55 = (*(void *)(v13 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v56 = *(void *)(v13 + 64);
  if (v55 + 16 >= v56) {
    unint64_t v55 = 0;
  }
  if (v54 <= 0x10) {
    unint64_t v54 = 16;
  }
  unint64_t v57 = v55 + v54;
  if (v56 <= v57) {
    unint64_t v57 = 0;
  }
  *(void *)(v13 + 80) = v57;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v13 + 72) + 16) + 128), v57);
  *(_DWORD *)(v13 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)(v13 + 8));
  unint64_t v58 = v81;
  unint64_t v59 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v59 = 1313;
  *((void *)v59 + 1) = v14;
  *((void *)v59 + 66) = (char *)v59 + 16;
  *((void *)v59 + 67) = 512;
  *((void *)v59 + 68) = 0;
  *((void *)v59 + 70) = 0;
  *((void *)v59 + 69) = 0;
  IPC::Encoder::encodeHeader(v59);
  unint64_t v85 = v59;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v59, a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v59, a3);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v59, a4);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v59, a5);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v59, a6);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v59, a7);
  IPC::Connection::sendMessageImpl((uint64_t)v58, (uint64_t *)&v85, 1, 0);
  unsigned __int8 v61 = v85;
  unint64_t v85 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v81);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setScissorRect(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2, int a3, int a4, int a5)
{
  int v69 = a3;
  int v70 = a2;
  int v67 = a5;
  int v68 = a4;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v6 = *((void *)this + 4);
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) == v6) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v72, v8);
  if (!v74) {
    return result;
  }
  unint64_t v52 = v72;
  unint64_t v51 = v73;
  unint64_t v53 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v54 = v53 - v72;
  if (v53 < v72) {
    goto LABEL_95;
  }
  unint64_t v55 = v54 + 2;
  if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v73)
  {
    unint64_t v51 = 0;
LABEL_95:
    unint64_t v55 = 0;
    goto LABEL_65;
  }
  *(_WORD *)(v72 + v54) = 2871;
LABEL_65:
  unint64_t v57 = (void *)((v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v57 >= v52 + v55)
  {
    unint64_t v55 = (unint64_t)v57 - v52 + 8;
    if ((unint64_t)v57 - v52 > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
      return result;
    }
    *unint64_t v57 = v6;
  }
  if (!v51) {
    return result;
  }
  unint64_t v59 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v60 = *(void *)(v5 + 64);
  if (v59 + 16 >= v60) {
    unint64_t v59 = 0;
  }
  if (v55 <= 0x10) {
    unint64_t v55 = 16;
  }
  unint64_t v61 = v59 + v55;
  if (v60 <= v61) {
    unint64_t v61 = 0;
  }
  *(void *)(v5 + 80) = v61;
  unint64_t v62 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v61);
  int v63 = *(_DWORD *)(v5 + 116);
  if (v62 == 0x80000000 || v63 != 0)
  {
    unsigned int v65 = v63 + 1;
    *(_DWORD *)(v5 + 116) = v65;
    if (v65 >= *(_DWORD *)(v5 + 112))
    {
      if (*(unsigned char *)(v5 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  *(void *)(v5 + 56) = v6;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v72, v8);
  if (!v74) {
    return result;
  }
  unint64_t v11 = v72;
  unint64_t v12 = v73;
  unint64_t v13 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - v72;
  if (v13 >= v72)
  {
    unint64_t v15 = v14 + 2;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= v73)
    {
      *(_WORD *)(v72 + v14) = 1310;
      goto LABEL_11;
    }
    unint64_t v12 = 0;
  }
  unint64_t v15 = 0;
LABEL_11:
  unint64_t v17 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v18 = v17 - (v11 + v15);
  if (v17 >= v11 + v15)
  {
    unint64_t v19 = v17 - v11;
    unint64_t v20 = v18 + v15 + 4;
    if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > v12)
    {
      unint64_t v12 = 0;
    }
    else
    {
      *(_DWORD *)(v11 + v19) = v70;
      unint64_t v15 = v20;
    }
  }
  unint64_t v22 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v23 = v22 - (v11 + v15);
  if (v22 >= v11 + v15)
  {
    unint64_t v24 = v22 - v11;
    unint64_t v25 = v23 + v15 + 4;
    if (v24 > 0xFFFFFFFFFFFFFFFBLL || v25 > v12)
    {
      unint64_t v12 = 0;
    }
    else
    {
      *(_DWORD *)(v11 + v24) = v69;
      unint64_t v15 = v25;
    }
  }
  unint64_t v27 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v28 = v27 >= v11 + v15;
  unint64_t v29 = v27 - (v11 + v15);
  if (v28)
  {
    unint64_t v66 = 0;
    unint64_t v30 = v29 + v15;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v12)
    {
      *(_DWORD *)(v11 + v30) = v68;
      unint64_t v66 = v12;
      unint64_t v15 = v30 + 4;
    }
  }
  else
  {
    unint64_t v66 = v12;
  }
  unint64_t v31 = (_DWORD *)((v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v11 + v15)
  {
    unint64_t v32 = (char *)v31 - v11;
    if ((unint64_t)v31 - v11 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_44;
    }
    unint64_t v15 = (unint64_t)(v32 + 4);
    if ((unint64_t)(v32 + 4) > v66) {
      goto LABEL_44;
    }
    *unint64_t v31 = v67;
  }
  if (v66)
  {
    uint64_t v33 = *(void *)(v5 + 72);
    unint64_t v34 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(v5 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v15 <= 0x10) {
      unint64_t v15 = 16;
    }
    unint64_t v36 = v34 + v15;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    *(void *)(v5 + 80) = v36;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v33 + 16) + 128), v36) == 0x80000000
      || *(_DWORD *)(v5 + 116))
    {
      if (*(unsigned char *)(v5 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
      }
      *(_DWORD *)(v5 + 116) = 0;
    }
    return result;
  }
LABEL_44:
  unint64_t v37 = v74;
  if (v74)
  {
    unint64_t v38 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = v38 - v72;
    if (v38 < v72)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v37 = 0;
      if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v73)
      {
        *(_WORD *)(v72 + v39) = 2870;
        unint64_t v37 = v39 + 2;
      }
    }
    unint64_t v40 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v15 = *(void *)(v5 + 64);
    if (v40 + 16 < v15) {
      goto LABEL_50;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v40 = 0;
LABEL_50:
  if (v37 <= 0x10) {
    unint64_t v37 = 16;
  }
  unint64_t v41 = v40 + v37;
  if (v15 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(v5 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v41);
  *(_DWORD *)(v5 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v71, (uint64_t **)(v5 + 8));
  unint64_t v42 = v71;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 1310;
  *((void *)v43 + 1) = v6;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  unint64_t v75 = v43;
  unint64_t v44 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v43, &v70);
  unint64_t v45 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v44, &v69);
  unint64_t v46 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v45, &v68);
  IPC::Encoder::operator<<<int>(v46, &v67);
  IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v75, 1, 0);
  unint64_t v48 = v75;
  unint64_t v75 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteRenderPassEncoderProxy::setBlendConstant(void *a1, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)a1[5];
  ++v3[2];
  uint64_t result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v46);
  if (v3[2] == 1) {
    uint64_t result = (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  else {
    --v3[2];
  }
  if (!v48) {
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(a1[6] + 48) + 72) + 72) + 80);
  uint64_t v6 = a1[4];
  double v7 = *(double *)(v5 + 120);
  double v8 = INFINITY;
  if (fabs(v7) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v8 = v7 + v9;
  }
  if (*(void *)(v5 + 56) != v6)
  {
    uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v53, v8);
    if (!(_BYTE)v55) {
      goto LABEL_39;
    }
    unint64_t v30 = v53;
    unint64_t v31 = v54;
    unint64_t v32 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = v32 - (void)v53;
    if (v32 < (unint64_t)v53)
    {
      unint64_t v35 = 0;
      unint64_t v34 = v54;
    }
    else
    {
      unint64_t v34 = 0;
      if (v33 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v35 = 0;
      }
      else
      {
        unint64_t v35 = 0;
        if (v33 + 2 <= v54)
        {
          *(_WORD *)((char *)v53 + v33) = 2871;
          unint64_t v34 = v31;
          unint64_t v35 = v33 + 2;
        }
      }
    }
    unint64_t v36 = (char *)(((unint64_t)v30 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v36 >= (char *)v30 + v35)
    {
      int64_t v37 = v36 - (char *)v30;
      if ((unint64_t)(v36 - (char *)v30) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_39;
      }
      unint64_t v35 = v37 + 8;
      if (v37 + 8 > v34) {
        goto LABEL_39;
      }
      *(void *)unint64_t v36 = v6;
    }
    if (!v34) {
      goto LABEL_39;
    }
    unint64_t v38 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(v5 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v35 <= 0x10) {
      unint64_t v35 = 16;
    }
    unint64_t v40 = v38 + v35;
    if (v39 <= v40) {
      unint64_t v41 = 0;
    }
    else {
      unint64_t v41 = v40;
    }
    *(void *)(v5 + 80) = v41;
    unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v41);
    int v43 = *(_DWORD *)(v5 + 116);
    if (v42 == 0x80000000 || v43 != 0)
    {
      unsigned int v45 = v43 + 1;
      *(_DWORD *)(v5 + 116) = v45;
      if (v45 >= *(_DWORD *)(v5 + 112))
      {
        if (*(unsigned char *)(v5 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
        }
        *(_DWORD *)(v5 + 116) = 0;
      }
    }
    *(void *)(v5 + 56) = v6;
  }
  uint64_t result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 64, &v50, v8);
  if (v52)
  {
    unint64_t v53 = v50;
    unint64_t v54 = v51;
    unint64_t v55 = 0;
    unint64_t v10 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v11 = v10 >= (unint64_t)v50;
    unint64_t v12 = v10 - (void)v50;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v51)
      {
        unint64_t v54 = 0;
      }
      else
      {
        *(_WORD *)((char *)v50 + v12) = 1306;
        unint64_t v55 = v12 + 2;
      }
    }
    uint64_t result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>((uint64_t *)&v53, (uint64_t)v46);
    if (v54)
    {
      uint64_t v14 = v55;
      uint64_t v15 = *(void *)(v5 + 72);
      unint64_t v16 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = *(void *)(v5 + 64);
      if (v16 + 16 >= v17) {
        unint64_t v16 = 0;
      }
      if (v55 <= 0x10) {
        uint64_t v14 = 16;
      }
      unint64_t v18 = v16 + v14;
      if (v17 <= v18) {
        unint64_t v18 = 0;
      }
      *(void *)(v5 + 80) = v18;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
        || *(_DWORD *)(v5 + 116))
      {
        if (*(unsigned char *)(v5 + 104)) {
          uint64_t result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](*(unsigned int *)(v5 + 92));
        }
        *(_DWORD *)(v5 + 116) = 0;
      }
      goto LABEL_39;
    }
    unint64_t v19 = v52;
    if (v52)
    {
      unint64_t v20 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v21 = v20 - (void)v50;
      if (v20 < (unint64_t)v50)
      {
        unint64_t v19 = 0;
      }
      else
      {
        unint64_t v19 = 0;
        if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v51)
        {
          *(_WORD *)((char *)v50 + v21) = 2870;
          unint64_t v19 = v21 + 2;
        }
      }
      unint64_t v22 = (*(void *)(v5 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v13 = *(void *)(v5 + 64);
      if (v22 + 16 < v13) {
        goto LABEL_32;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v22 = 0;
LABEL_32:
    if (v19 <= 0x10) {
      unint64_t v19 = 16;
    }
    unint64_t v23 = v22 + v19;
    if (v13 <= v23) {
      unint64_t v23 = 0;
    }
    *(void *)(v5 + 80) = v23;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v5 + 72) + 16) + 128), v23);
    *(_DWORD *)(v5 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)(v5 + 8));
    unint64_t v24 = v49;
    unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v25 = 1306;
    *((void *)v25 + 1) = v6;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    unint64_t v53 = v25;
    unsigned __int8 v56 = v47;
    IPC::Encoder::operator<<<BOOL>(v25, (char *)&v56);
    IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(v25, (uint64_t)v46, v56);
    IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v53, 1, 0);
    unint64_t v27 = v53;
    unint64_t v53 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v26);
      WTF::fastFree(v28, v29);
    }
    uint64_t result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
  }
LABEL_39:
  if (v48)
  {
    if (v47 != -1) {
      return (WTF::ApproximateTime *)((uint64_t (*)(IPC::Encoder **, unsigned char *))off_1EE9EB970[v47])(&v53, v46);
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setStencilReference(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2)
{
  int v46 = a2;
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v48, v5);
  if (!v50) {
    return result;
  }
  unint64_t v32 = v48;
  unint64_t v31 = v49;
  unint64_t v33 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v48;
  if (v33 < v48) {
    goto LABEL_78;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v49)
  {
    unint64_t v31 = 0;
LABEL_78:
    unint64_t v35 = 0;
    goto LABEL_50;
  }
  *(_WORD *)(v48 + v34) = 2871;
LABEL_50:
  int64_t v37 = (void *)((v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v37 >= v32 + v35)
  {
    unint64_t v35 = (unint64_t)v37 - v32 + 8;
    if ((unint64_t)v37 - v32 > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    void *v37 = v3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(v2 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(v2 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(v2 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(v2 + 116) = v45;
    if (v45 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v48, v5);
  if (!v50) {
    return result;
  }
  unint64_t v9 = v48;
  unint64_t v8 = v49;
  unint64_t v10 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v11 = v10 - v48;
  if (v10 >= v48)
  {
    unint64_t v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v49)
    {
      *(_WORD *)(v48 + v11) = 1311;
      goto LABEL_11;
    }
    unint64_t v8 = 0;
  }
  unint64_t v12 = 0;
LABEL_11:
  uint64_t v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v14 >= v9 + v12)
  {
    unint64_t v12 = (unint64_t)v14 - v9 + 4;
    if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8) {
      goto LABEL_29;
    }
    *uint64_t v14 = v46;
  }
  if (v8)
  {
    uint64_t v16 = *(void *)(v2 + 72);
    unint64_t v17 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(v2 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v12 <= 0x10) {
      unint64_t v12 = 16;
    }
    unint64_t v19 = v17 + v12;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(v2 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(v2 + 116))
    {
      if (*(unsigned char *)(v2 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
    return result;
  }
LABEL_29:
  unint64_t v20 = v50;
  if (v50)
  {
    unint64_t v21 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - v48;
    if (v21 < v48)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v49)
      {
        *(_WORD *)(v48 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = *(void *)(v2 + 64);
    if (v23 + 16 < v8) {
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_35:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v8 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(v2 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v24);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v2 + 8));
  unint64_t v25 = v47;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1311;
  *((void *)v26 + 1) = v3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v51 = v26;
  IPC::Encoder::operator<<<int>(v26, &v46);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v51, 1, 0);
  BOOL v28 = v51;
  unint64_t v51 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::beginOcclusionQuery(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2)
{
  int v46 = a2;
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v48, v5);
  if (!v50) {
    return result;
  }
  unint64_t v32 = v48;
  unint64_t v31 = v49;
  unint64_t v33 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v48;
  if (v33 < v48) {
    goto LABEL_78;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v49)
  {
    unint64_t v31 = 0;
LABEL_78:
    unint64_t v35 = 0;
    goto LABEL_50;
  }
  *(_WORD *)(v48 + v34) = 2871;
LABEL_50:
  int64_t v37 = (void *)((v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v37 >= v32 + v35)
  {
    unint64_t v35 = (unint64_t)v37 - v32 + 8;
    if ((unint64_t)v37 - v32 > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    void *v37 = v3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(v2 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(v2 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(v2 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(v2 + 116) = v45;
    if (v45 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v48, v5);
  if (!v50) {
    return result;
  }
  unint64_t v9 = v48;
  unint64_t v8 = v49;
  unint64_t v10 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v11 = v10 - v48;
  if (v10 >= v48)
  {
    unint64_t v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v49)
    {
      *(_WORD *)(v48 + v11) = 1293;
      goto LABEL_11;
    }
    unint64_t v8 = 0;
  }
  unint64_t v12 = 0;
LABEL_11:
  uint64_t v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v14 >= v9 + v12)
  {
    unint64_t v12 = (unint64_t)v14 - v9 + 4;
    if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8) {
      goto LABEL_29;
    }
    *uint64_t v14 = v46;
  }
  if (v8)
  {
    uint64_t v16 = *(void *)(v2 + 72);
    unint64_t v17 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(v2 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v12 <= 0x10) {
      unint64_t v12 = 16;
    }
    unint64_t v19 = v17 + v12;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(v2 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(v2 + 116))
    {
      if (*(unsigned char *)(v2 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
    return result;
  }
LABEL_29:
  unint64_t v20 = v50;
  if (v50)
  {
    unint64_t v21 = (v48 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - v48;
    if (v21 < v48)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v49)
      {
        *(_WORD *)(v48 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = *(void *)(v2 + 64);
    if (v23 + 16 < v8) {
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_35:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v8 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(v2 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v24);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (uint64_t **)(v2 + 8));
  unint64_t v25 = v47;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1293;
  *((void *)v26 + 1) = v3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v51 = v26;
  IPC::Encoder::operator<<<int>(v26, &v46);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v51, 1, 0);
  BOOL v28 = v51;
  unint64_t v51 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v47);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::endOcclusionQuery(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1300;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1300;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

WTF *WebKit::WebGPU::RemoteRenderPassEncoderProxy::executeBundles(WTF *result, uint64_t a2)
{
  uint64_t v2 = result;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      goto LABEL_89;
    }
    LODWORD(v56) = *(_DWORD *)(a2 + 12);
    unint64_t v55 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v5)
    {
      double v6 = *(void **)a2;
      uint64_t v7 = 8 * v5;
      while (1)
      {
        unint64_t v8 = (_DWORD *)*((void *)v2 + 5);
        ++v8[2];
        uint64_t v9 = (*(uint64_t (**)(_DWORD *, void))(*(void *)v8 + 160))(v8, *v6);
        unint64_t v10 = (IPC::Encoder *)v9;
        if (v8[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          if (v10)
          {
LABEL_9:
            unint64_t v61 = v10;
            if (HIDWORD(v56) == v56)
            {
              unint64_t v11 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, HIDWORD(v56) + 1, (unint64_t)&v61);
              *((void *)v55 + HIDWORD(v56)) = *v11;
            }
            else
            {
              *((void *)v55 + HIDWORD(v56)) = v10;
            }
            ++HIDWORD(v56);
          }
        }
        else
        {
          --v8[2];
          if (v9) {
            goto LABEL_9;
          }
        }
        ++v6;
        v7 -= 8;
        if (!v7)
        {
          unint64_t v12 = HIDWORD(v56);
          goto LABEL_16;
        }
      }
    }
  }
  unint64_t v12 = 0;
LABEL_16:
  uint64_t v13 = (WTF::ApproximateTime *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v55, v12);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)v2 + 6) + 48) + 72) + 72) + 80);
  uint64_t v15 = *((void *)v2 + 4);
  double v16 = *(double *)(v14 + 120);
  double v17 = INFINITY;
  if (fabs(v16) != INFINITY)
  {
    WTF::ApproximateTime::now(v13);
    double v17 = v16 + v18;
  }
  if (*(void *)(v14 + 56) == v15) {
    goto LABEL_19;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v14 + 64, &v61, v17);
  if (!(_BYTE)v63) {
    goto LABEL_51;
  }
  unint64_t v41 = v61;
  unint64_t v40 = v62;
  unint64_t v42 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - (void)v61;
  if (v42 >= (unint64_t)v61)
  {
    unint64_t v44 = v43 + 2;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v62)
    {
      *(_WORD *)((char *)v61 + v43) = 2871;
      goto LABEL_61;
    }
    unint64_t v40 = 0;
  }
  unint64_t v44 = 0;
LABEL_61:
  unint64_t v46 = (char *)(((unint64_t)v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v46 >= (char *)v41 + v44)
  {
    unint64_t v44 = v46 - (char *)v41 + 8;
    if ((unint64_t)(v46 - (char *)v41) > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
      goto LABEL_51;
    }
    *(void *)unint64_t v46 = v15;
  }
  if (v40)
  {
    unint64_t v48 = (*(void *)(v14 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = *(void *)(v14 + 64);
    if (v48 + 16 >= v49) {
      unint64_t v48 = 0;
    }
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v50 = v48 + v44;
    if (v49 <= v50) {
      unint64_t v50 = 0;
    }
    *(void *)(v14 + 80) = v50;
    unint64_t v51 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v14 + 72) + 16) + 128), v50);
    int v52 = *(_DWORD *)(v14 + 116);
    if (v51 == 0x80000000 || v52 != 0)
    {
      unsigned int v54 = v52 + 1;
      *(_DWORD *)(v14 + 116) = v54;
      if (v54 >= *(_DWORD *)(v14 + 112))
      {
        if (*(unsigned char *)(v14 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v14 + 92));
        }
        *(_DWORD *)(v14 + 116) = 0;
      }
    }
    *(void *)(v14 + 56) = v15;
LABEL_19:
    IPC::StreamClientConnectionBuffer::tryAcquire(v14 + 64, &v58, v17);
    if (v60)
    {
      unint64_t v61 = v58;
      unint64_t v62 = v59;
      unint64_t v63 = 0;
      unint64_t v20 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v21 = v20 >= (unint64_t)v58;
      unint64_t v22 = v20 - (void)v58;
      if (v21)
      {
        if (v22 > 0xFFFFFFFFFFFFFFFDLL || v22 + 2 > v59)
        {
          unint64_t v62 = 0;
        }
        else
        {
          *(_WORD *)((char *)v58 + v22) = 1301;
          unint64_t v63 = v22 + 2;
        }
      }
      uint64_t result = (WTF *)IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v61, (uint64_t)&v55);
      if (v62)
      {
        uint64_t v23 = v63;
        uint64_t v24 = *(void *)(v14 + 72);
        unint64_t v25 = (*(void *)(v14 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v26 = *(void *)(v14 + 64);
        if (v25 + 16 >= v26) {
          unint64_t v25 = 0;
        }
        if (v63 <= 0x10) {
          uint64_t v23 = 16;
        }
        unint64_t v27 = v25 + v23;
        if (v26 <= v27) {
          unint64_t v27 = 0;
        }
        *(void *)(v14 + 80) = v27;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v24 + 16) + 128), v27) == 0x80000000
          || *(_DWORD *)(v14 + 116))
        {
          if (*(unsigned char *)(v14 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(v14 + 92));
          }
          *(_DWORD *)(v14 + 116) = 0;
        }
        goto LABEL_51;
      }
      if (v60)
      {
        unint64_t v28 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v29 = v28 - (void)v58;
        if (v28 < (unint64_t)v58)
        {
          unint64_t v30 = 0;
        }
        else
        {
          unint64_t v30 = 0;
          if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v59)
          {
            *(_WORD *)((char *)v58 + v29) = 2870;
            unint64_t v30 = v29 + 2;
          }
        }
        unint64_t v31 = (*(void *)(v14 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v32 = *(void *)(v14 + 64);
        if (v31 + 16 >= v32) {
          unint64_t v31 = 0;
        }
        if (v30 <= 0x10) {
          unint64_t v30 = 16;
        }
        unint64_t v33 = v31 + v30;
        if (v32 <= v33) {
          unint64_t v33 = 0;
        }
        *(void *)(v14 + 80) = v33;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v14 + 72) + 16) + 128), v33);
        *(_DWORD *)(v14 + 116) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v14 + 8));
        unint64_t v34 = v57;
        unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v35 = 1301;
        *((void *)v35 + 1) = v15;
        *((void *)v35 + 66) = (char *)v35 + 16;
        *((void *)v35 + 67) = 512;
        *((void *)v35 + 68) = 0;
        *((void *)v35 + 70) = 0;
        *((void *)v35 + 69) = 0;
        IPC::Encoder::encodeHeader(v35);
        unint64_t v61 = v35;
        IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v35, (uint64_t)&v55);
        IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v61, 1, 0);
        unint64_t v37 = v61;
        unint64_t v61 = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v36);
          WTF::fastFree(v38, v39);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
        goto LABEL_51;
      }
LABEL_89:
      __break(1u);
      return result;
    }
  }
LABEL_51:
  uint64_t result = v55;
  if (v55)
  {
    unint64_t v55 = 0;
    LODWORD(v56) = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::end(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  uint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *uint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  uint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *uint64_t v9 = 1299;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    uint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1299;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPassEncoderProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 48) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1308;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  uint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1308;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteRenderPipelineProxy::~RemoteRenderPipelineProxy(WebKit::WebGPU::RemoteRenderPipelineProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  uint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *uint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 1315;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1315;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unsigned int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB990;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteRenderPipelineProxy::~RemoteRenderPipelineProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteRenderPipelineProxy::getBindGroupLayout@<X0>(WebKit::WebGPU::RemoteRenderPipelineProxy *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  double v6 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v52 = a2;
  unsigned __int8 v53 = &v54;
  unsigned int v54 = v6;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v8 = *((void *)this + 4);
  double v9 = *(double *)(v7 + 120);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v10 = v9 + v11;
  }
  if (*(void *)(v7 + 56) == v8) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v59, v10);
  if (!(_BYTE)v61) {
    goto LABEL_37;
  }
  unint64_t v38 = v59;
  unint64_t v37 = v60;
  unint64_t v39 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - (void)v59;
  if (v39 < (unint64_t)v59) {
    goto LABEL_72;
  }
  unint64_t v41 = v40 + 2;
  if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v60)
  {
    unint64_t v37 = 0;
LABEL_72:
    unint64_t v41 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v59 + v40) = 2871;
LABEL_45:
  unint64_t v43 = (char *)(((unint64_t)v38 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v43 >= (char *)v38 + v41)
  {
    unint64_t v41 = v43 - (char *)v38 + 8;
    if ((unint64_t)(v43 - (char *)v38) > 0xFFFFFFFFFFFFFFF7 || v41 > v37) {
      goto LABEL_37;
    }
    *(void *)unint64_t v43 = v8;
  }
  if (!v37) {
    goto LABEL_37;
  }
  unint64_t v45 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(v7 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v47 = v45 + v41;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(v7 + 80) = v47;
  unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v47);
  int v49 = *(_DWORD *)(v7 + 116);
  if (v48 == 0x80000000 || v49 != 0)
  {
    unsigned int v51 = v49 + 1;
    *(_DWORD *)(v7 + 116) = v51;
    if (v51 >= *(_DWORD *)(v7 + 112))
    {
      if (*(unsigned char *)(v7 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
      }
      *(_DWORD *)(v7 + 116) = 0;
    }
  }
  *(void *)(v7 + 56) = v8;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 64, &v56, v10);
  if (!v58) {
    goto LABEL_37;
  }
  unint64_t v59 = v56;
  unint64_t v60 = v57;
  unint64_t v61 = 0;
  unint64_t v12 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v13 = v12 >= (unint64_t)v56;
  unint64_t v14 = v12 - (void)v56;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v57)
    {
      unint64_t v60 = 0;
    }
    else
    {
      *(_WORD *)((char *)v56 + v14) = 1316;
      unint64_t v61 = v14 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul>(&v59, (uint64_t)&v52);
  if (v60)
  {
    unint64_t v17 = v61;
    unint64_t v18 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v16 = *(void *)(v7 + 64);
    if (v18 + 16 < v16)
    {
LABEL_14:
      if (v17 <= 0x10) {
        unint64_t v17 = 16;
      }
      unint64_t v19 = v18 + v17;
      if (v16 <= v19) {
        unint64_t v19 = 0;
      }
      *(void *)(v7 + 80) = v19;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v19) == 0x80000000
        || *(_DWORD *)(v7 + 116))
      {
        if (*(unsigned char *)(v7 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v7 + 92));
        }
        *(_DWORD *)(v7 + 116) = 0;
      }
      goto LABEL_37;
    }
LABEL_70:
    unint64_t v18 = 0;
    goto LABEL_14;
  }
  unint64_t v17 = v58;
  if (!v58)
  {
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v20 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - (void)v56;
  if (v20 < (unint64_t)v56)
  {
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v22 = 0;
    if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v57)
    {
      *(_WORD *)((char *)v56 + v21) = 2870;
      unint64_t v22 = v21 + 2;
    }
  }
  unint64_t v23 = (*(void *)(v7 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = *(void *)(v7 + 64);
  if (v23 + 16 >= v24) {
    unint64_t v23 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v25 = v23 + v22;
  if (v24 <= v25) {
    unint64_t v25 = 0;
  }
  *(void *)(v7 + 80) = v25;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v7 + 72) + 16) + 128), v25);
  *(_DWORD *)(v7 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(v7 + 8));
  unint64_t v26 = v55;
  unint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v27 = 1316;
  *((void *)v27 + 1) = v8;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  unint64_t v59 = v27;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul>(v27, &v52);
  IPC::Connection::sendMessageImpl((uint64_t)v26, (uint64_t *)&v59, 1, 0);
  unint64_t v29 = v59;
  unint64_t v59 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v28);
    WTF::fastFree(v35, v36);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v55);
LABEL_37:
  unsigned int v32 = (char *)this + 40;
  uint64_t v30 = *((void *)this + 5);
  uint64_t v31 = *((void *)v32 + 1);
  unint64_t v33 = v54;
  uint64_t result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)uint64_t result = &unk_1EE9EA4C8;
  *(void *)(result + 32) = v33;
  ++*(_DWORD *)(v30 + 8);
  *(void *)(result + 40) = v30;
  ++*(_DWORD *)(v31 + 8);
  *(void *)(result + 48) = v31;
  *a3 = result;
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteRenderPipelineProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderPipelineProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  uint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  int v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1317;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1317;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  int v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  int v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteSamplerProxy::~RemoteSamplerProxy(WebKit::WebGPU::RemoteSamplerProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 1361;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1361;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unsigned int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB9C0;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteSamplerProxy::~RemoteSamplerProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteSamplerProxy::setLabelInternal(WebKit::WebGPU::RemoteSamplerProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  uint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  int v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1362;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1362;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  int v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  int v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteShaderModuleProxy::~RemoteShaderModuleProxy(WebKit::WebGPU::RemoteShaderModuleProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 1373;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1373;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unsigned int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EB9E8;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteShaderModuleProxy::~RemoteShaderModuleProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)a1 + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) != v4)
  {
    uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
    if (!v64) {
      goto LABEL_49;
    }
    unint64_t v41 = v62;
    unint64_t v40 = v63;
    unint64_t v42 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = v42 - v62;
    if (v42 >= v62)
    {
      unint64_t v44 = v43 + 2;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v63)
      {
        *(_WORD *)(v62 + v43) = 2871;
LABEL_59:
        uint64_t v46 = (void *)((v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v46 >= v41 + v44)
        {
          unint64_t v44 = (unint64_t)v46 - v41 + 8;
          if ((unint64_t)v46 - v41 > 0xFFFFFFFFFFFFFFF7 || v44 > v40) {
            goto LABEL_49;
          }
          *uint64_t v46 = v4;
        }
        if (!v40) {
          goto LABEL_49;
        }
        uint64_t v48 = *(void *)(v3 + 72);
        unint64_t v49 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v50 = *(void *)(v3 + 64);
        if (v49 + 16 >= v50) {
          unint64_t v49 = 0;
        }
        if (v44 <= 0x10) {
          unint64_t v44 = 16;
        }
        unint64_t v51 = v49 + v44;
        if (v50 <= v51) {
          unint64_t v51 = 0;
        }
        *(void *)(v3 + 80) = v51;
        unint64_t v52 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v48 + 16) + 128), v51);
        int v53 = *(_DWORD *)(v3 + 116);
        if (v52 == 0x80000000 || v53 != 0)
        {
          unsigned int v55 = v53 + 1;
          *(_DWORD *)(v3 + 116) = v55;
          if (v55 >= *(_DWORD *)(v3 + 112))
          {
            if (*(unsigned char *)(v3 + 104)) {
              MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
            }
            *(_DWORD *)(v3 + 116) = 0;
          }
        }
        *(void *)(v3 + 56) = v4;
        goto LABEL_4;
      }
      unint64_t v40 = 0;
    }
    unint64_t v44 = 0;
    goto LABEL_59;
  }
LABEL_4:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v62, v6);
  if (!v64) {
    goto LABEL_49;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v61, (uint64_t **)(v3 + 8));
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v9 = &unk_1EE9EBA78;
  v9[1] = v2;
  v60[0] = (uint64_t)v9;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v60[1] = v10;
  uint64_t v59 = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v61, v60);
  unint64_t v12 = v64;
  if (!v64) {
    goto LABEL_82;
  }
  unint64_t v12 = v62;
  unint64_t v13 = v63;
  unint64_t v14 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v15 = v14 - v62;
  if (v14 < v62)
  {
    unint64_t v16 = 0;
    unint64_t v11 = v63;
  }
  else
  {
    unint64_t v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_83;
    }
    unint64_t v16 = 0;
    if (v15 + 2 <= v63)
    {
      *(_WORD *)(v62 + v15) = 1372;
      unint64_t v11 = v13;
      unint64_t v16 = v15 + 2;
    }
  }
  while (1)
  {
    unint64_t v17 = (void *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v12 + v16)
    {
      unint64_t v18 = (char *)v17 - v12;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_27;
      }
      unint64_t v16 = (unint64_t)(v18 + 8);
      if ((unint64_t)(v18 + 8) > v11) {
        goto LABEL_27;
      }
      *unint64_t v17 = v10;
    }
    if (v11)
    {
      unint64_t v19 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v20 = *(void *)(v3 + 64);
      if (v19 + 16 >= v20) {
        unint64_t v19 = 0;
      }
      if (v16 <= 0x10) {
        unint64_t v16 = 16;
      }
      unint64_t v21 = v19 + v16;
      if (v20 <= v21) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      *(void *)(v3 + 80) = v22;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v22) == 0x80000000
        || *(_DWORD *)(v3 + 116))
      {
        if (*(unsigned char *)(v3 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
        }
        *(_DWORD *)(v3 + 116) = 0;
      }
      goto LABEL_46;
    }
LABEL_27:
    unint64_t v12 = v64;
    if (v64) {
      break;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    unint64_t v16 = v11;
  }
  unint64_t v23 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - v62;
  if (v23 < v62)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v63)
    {
      *(_WORD *)(v62 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v3 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v3 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v28);
  *(_DWORD *)(v3 + 116) = 0;
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 1372;
  *((void *)v29 + 1) = v4;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  unsigned __int8 v58 = v29;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v59);
  if (IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v58, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v61, v59, &v57);
    if (v57)
    {
      unsigned int v32 = (atomic_uint *)(WTF::RunLoop::main(v31) + 8);
      atomic_fetch_add(v32, 1u);
      uint64_t v33 = v57;
      uint64_t v57 = 0;
      BOOL v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      *BOOL v34 = &unk_1EE9EBAA0;
      v34[1] = v33;
      uint64_t v56 = v34;
      WTF::RunLoop::dispatch();
      if (v56) {
        (*(void (**)(void *))(*v56 + 8))(v56);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v32);
      uint64_t v35 = v57;
      uint64_t v57 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
  }
  unint64_t v36 = v58;
  unsigned __int8 v58 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v30);
    WTF::fastFree(v38, v39);
  }
LABEL_46:
  uint64_t v37 = v60[0];
  v60[0] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v61);
  uint64_t v2 = 0;
LABEL_49:
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteShaderModuleProxy::setLabelInternal(WebKit::WebGPU::RemoteShaderModuleProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 6) + 72) + 72) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  uint64_t v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1374;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1374;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteTextureProxy::~RemoteTextureProxy(WebKit::WebGPU::RemoteTextureProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 6) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_89;
    }
    *BOOL v10 = 1411;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_89:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1411;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned int v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unsigned int v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  unint64_t v43 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43 && atomic_fetch_add((atomic_uint *volatile)v43 + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v43 + 7);
    (*(void (**)(unsigned int *))(*(void *)v43 + 8))(v43);
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EBA18;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteTextureProxy::~RemoteTextureProxy(this);

  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebKit::WebGPU::RemoteTextureProxy::createView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v9 = *(_DWORD **)(a1 + 40);
  ++v9[2];
  if (!*(unsigned char *)(a2 + 40))
  {
    WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    __break(1u);
    goto LABEL_106;
  }
  uint64_t v4 = a1;
  uint64_t v3 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v3 += 2;
  }
  __int16 v10 = *(_WORD *)(a2 + 8);
  __int16 v11 = *(_WORD *)(a2 + 10);
  char v12 = *(unsigned char *)(a2 + 12);
  int v13 = *(_DWORD *)(a2 + 16);
  int v75 = *(_DWORD *)(a2 + 20);
  char v76 = *(unsigned char *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 28);
  int v73 = *(_DWORD *)(a2 + 32);
  char v74 = *(unsigned char *)(a2 + 36);
  unint64_t v15 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unint64_t v72 = v15;
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  unint64_t v61 = v3;
  __int16 v62 = v10;
  __int16 v63 = v11;
  char v64 = v12;
  int v65 = v13;
  int v66 = v75;
  char v67 = v76;
  int v68 = v14;
  int v69 = v73;
  char v70 = v74;
  unsigned __int8 v71 = 1;
  double v5 = *(uint64_t **)(*(void *)(v4 + 48) + 80);
  uint64_t v6 = *(void *)(v4 + 32);
  double v16 = *((double *)v5 + 15);
  double v7 = INFINITY;
  if (fabs(v16) != INFINITY)
  {
    WTF::ApproximateTime::now(v15);
    double v7 = v16 + v17;
  }
  if (v5[7] != v6)
  {
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v81, v7);
    if ((_BYTE)v83)
    {
      uint64_t v46 = v81;
      unint64_t v47 = v82;
      unint64_t v48 = ((unint64_t)v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v49 = v48 - (void)v81;
      if (v48 < (unint64_t)v81)
      {
        unint64_t v51 = 0;
        unint64_t v50 = v82;
      }
      else
      {
        unint64_t v50 = 0;
        if (v49 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v51 = 0;
        }
        else
        {
          unint64_t v51 = 0;
          if (v49 + 2 <= v82)
          {
            *(_WORD *)((char *)v81 + v49) = 2871;
            unint64_t v50 = v47;
            unint64_t v51 = v49 + 2;
          }
        }
      }
      unint64_t v52 = (char *)(((unint64_t)v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v52 < (char *)v46 + v51)
      {
LABEL_83:
        if (v50)
        {
          unint64_t v54 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v55 = v5[8];
          if (v54 + 16 < v55) {
            goto LABEL_85;
          }
          goto LABEL_107;
        }
        goto LABEL_103;
      }
      int64_t v53 = v52 - (char *)v46;
      if ((unint64_t)(v52 - (char *)v46) <= 0xFFFFFFFFFFFFFFF7)
      {
        unint64_t v51 = v53 + 8;
        if (v53 + 8 <= v50)
        {
          *(void *)unint64_t v52 = v6;
          goto LABEL_83;
        }
      }
    }
LABEL_103:
    int v25 = 1;
    goto LABEL_58;
  }
  while (2)
  {
    uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 8), &v78, v7);
    if (!v80)
    {
      int v25 = 15;
      goto LABEL_58;
    }
    unint64_t v20 = v78;
    unint64_t v21 = v79;
    int v81 = v78;
    unint64_t v82 = v79;
    unint64_t v83 = 0;
    unint64_t v22 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - (void)v78;
    if (v22 < (unint64_t)v78)
    {
      unint64_t v24 = 0;
    }
    else if (v23 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v24 = v23 + 2, v23 + 2 > v79))
    {
      unint64_t v21 = 0;
      unint64_t v24 = 0;
      unint64_t v82 = 0;
    }
    else
    {
      *(_WORD *)((char *)v78 + v23) = 1409;
      unint64_t v83 = v23 + 2;
    }
    if (v71)
    {
      if (v24 < v21)
      {
        *((unsigned char *)v20 + v24) = 1;
        unint64_t v83 = v24 + 1;
        if (!v71) {
          goto LABEL_106;
        }
        goto LABEL_17;
      }
      goto LABEL_99;
    }
    if (v24 >= v21)
    {
      unint64_t v21 = 0;
      unint64_t v82 = 0;
    }
    else
    {
      *((unsigned char *)v20 + v24++) = 0;
      unint64_t v83 = v24;
    }
    while (1)
    {
      unint64_t v26 = (char *)(((unint64_t)v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v26 >= (char *)v20 + v24)
      {
        int64_t v27 = v26 - (char *)v20;
        if ((unint64_t)(v26 - (char *)v20) > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_38;
        }
        unint64_t v24 = v27 + 8;
        if (v27 + 8 > v21) {
          goto LABEL_38;
        }
        *(void *)unint64_t v26 = v72;
        unint64_t v83 = v27 + 8;
        unint64_t v21 = v82;
      }
      if (v21)
      {
        unint64_t v28 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v29 = v5[8];
        if (v28 + 16 >= v29) {
          unint64_t v28 = 0;
        }
        if (v24 <= 0x10) {
          unint64_t v24 = 16;
        }
        unint64_t v30 = v28 + v24;
        if (v29 <= v30) {
          unint64_t v30 = 0;
        }
        v5[10] = v30;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v30) == 0x80000000
          || *((_DWORD *)v5 + 29))
        {
          if (*((unsigned char *)v5 + 104)) {
            uint64_t result = (WTF::StringImpl *)MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
        int v25 = 0;
        goto LABEL_58;
      }
LABEL_38:
      if (v80) {
        break;
      }
      __break(1u);
LABEL_99:
      unint64_t v82 = 0;
LABEL_17:
      uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::encode(&v81, (uint64_t)&v61);
      unint64_t v21 = v82;
      unint64_t v24 = v83;
      unint64_t v20 = v81;
    }
    unint64_t v31 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v32 = v31 - (void)v78;
    if (v31 < (unint64_t)v78)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v33 = 0;
      if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v79)
      {
        *(_WORD *)((char *)v78 + v32) = 2870;
        unint64_t v33 = v32 + 2;
      }
    }
    unint64_t v34 = (v5[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v5[8];
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v5[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v36);
    *((_DWORD *)v5 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v77, (uint64_t **)v5 + 1);
    double v5 = v77;
    unint64_t v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v37 = 1409;
    *((void *)v37 + 1) = v6;
    *((void *)v37 + 66) = (char *)v37 + 16;
    *((void *)v37 + 67) = 512;
    *((void *)v37 + 68) = 0;
    *((void *)v37 + 70) = 0;
    *((void *)v37 + 69) = 0;
    IPC::Encoder::encodeHeader(v37);
    int v81 = v37;
    uint64_t v6 = v71;
    unint64_t v38 = (unsigned char *)IPC::Encoder::grow(v37, 1uLL, 1);
    if (v6)
    {
      if (!v39)
      {
        __break(0xC471u);
        JUMPOUT(0x1990EB3D8);
      }
      unsigned char *v38 = 1;
      if (v71)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::encode(v37, (uint64_t)&v61);
        goto LABEL_55;
      }
LABEL_106:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_107:
      unint64_t v54 = 0;
LABEL_85:
      if (v51 <= 0x10) {
        unint64_t v51 = 16;
      }
      unint64_t v56 = v54 + v51;
      if (v55 <= v56) {
        unint64_t v57 = 0;
      }
      else {
        unint64_t v57 = v56;
      }
      v5[10] = v57;
      unint64_t v58 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v5[9] + 16) + 128), v57);
      int v59 = *((_DWORD *)v5 + 29);
      if (v58 == 0x80000000 || v59)
      {
        unsigned int v60 = v59 + 1;
        *((_DWORD *)v5 + 29) = v60;
        if (v60 >= *((_DWORD *)v5 + 28))
        {
          if (*((unsigned char *)v5 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
          }
          *((_DWORD *)v5 + 29) = 0;
        }
      }
      v5[7] = v6;
      continue;
    }
    break;
  }
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x1990EB404);
  }
  unsigned char *v38 = 0;
LABEL_55:
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v37, (uint64_t *)&v72);
  int v25 = IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v81, 1, 0);
  unint64_t v41 = v81;
  int v81 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v44, v45);
  }
  uint64_t result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v77);
LABEL_58:
  if (!v71 || (result = v61, unint64_t v61 = 0, !result))
  {
LABEL_62:
    if (!v25) {
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_62;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
  if (v25)
  {
LABEL_63:
    uint64_t v42 = 0;
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v43 = (uint64_t)v72;
  uint64_t v42 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v42 + 8) = 1;
  *(void *)(v42 + 16) = 0;
  *(void *)(v42 + 24) = 0;
  *(void *)uint64_t v42 = &unk_1EE9EB7D8;
  *(void *)(v42 + 32) = v43;
  ++v9[2];
  *(void *)(v42 + 40) = v9;
  ++*(_DWORD *)(v4 + 8);
  *(void *)(v42 + 48) = v4;
  *(void *)(v42 + 24) = v3;
  unint64_t v61 = (WTF::StringImpl *)(v42 + 24);
  uint64_t result = (WTF::StringImpl *)IPC::StreamClientConnection::send<Messages::RemoteTextureView::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(v4 + 48) + 80), (uint64_t **)&v61, *(void *)(v42 + 32));
  uint64_t v3 = 0;
LABEL_66:
  *a3 = v42;
  if (v9[2] == 1)
  {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    if (v3) {
      goto LABEL_70;
    }
  }
  else
  {
    --v9[2];
    if (!v3) {
      return result;
    }
LABEL_70:
    if (*(_DWORD *)v3 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v19);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteTextureProxy::destroy(WebKit::WebGPU::RemoteTextureProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 6) + 80);
  uint64_t v2 = *((void *)this + 4);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1410;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  uint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v39 = 1410;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  unint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteTextureProxy::setLabelInternal(WebKit::WebGPU::RemoteTextureProxy *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 6) + 80);
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v6 = v5 + v7;
  }
  if (*(void *)(v3 + 56) == v4) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v49, v6);
  if (!(_BYTE)v51) {
    return result;
  }
  unsigned int v31 = v49;
  unint64_t v30 = v50;
  unint64_t v32 = ((unint64_t)v49 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - (void)v49;
  if (v32 < (unint64_t)v49) {
    goto LABEL_72;
  }
  unint64_t v34 = v33 + 2;
  if (v33 > 0xFFFFFFFFFFFFFFFDLL || v34 > v50)
  {
    unint64_t v30 = 0;
LABEL_72:
    unint64_t v34 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v49 + v33) = 2871;
LABEL_45:
  unint64_t v36 = (char *)(((unint64_t)v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= (char *)v31 + v34)
  {
    unint64_t v34 = v36 - (char *)v31 + 8;
    if ((unint64_t)(v36 - (char *)v31) > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      return result;
    }
    *(void *)unint64_t v36 = v4;
  }
  if (!v30) {
    return result;
  }
  unint64_t v38 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(v3 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v40 = v38 + v34;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(v3 + 80) = v40;
  unint64_t v41 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v40);
  int v42 = *(_DWORD *)(v3 + 116);
  if (v41 == 0x80000000 || v42 != 0)
  {
    unsigned int v44 = v42 + 1;
    *(_DWORD *)(v3 + 116) = v44;
    if (v44 >= *(_DWORD *)(v3 + 112))
    {
      if (*(unsigned char *)(v3 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
  }
  *(void *)(v3 + 56) = v4;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 64, &v46, v6);
  if (!v48) {
    return result;
  }
  unint64_t v49 = v46;
  unint64_t v50 = v47;
  unint64_t v51 = 0;
  unint64_t v9 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v46;
  unint64_t v11 = v9 - (void)v46;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v47)
    {
      unint64_t v50 = 0;
    }
    else
    {
      *(_WORD *)((char *)v46 + v11) = 1412;
      unint64_t v51 = v11 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v49, (uint64_t *)a2);
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(v3 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v51 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(v3 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(v3 + 116))
    {
      if (*(unsigned char *)(v3 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v3 + 92));
      }
      *(_DWORD *)(v3 + 116) = 0;
    }
    return result;
  }
  unint64_t v19 = v48;
  if (v48)
  {
    unint64_t v20 = ((unint64_t)v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - (void)v46;
    if (v20 < (unint64_t)v46)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v47)
      {
        *(_WORD *)((char *)v46 + v21) = 2870;
        unint64_t v19 = v21 + 2;
      }
    }
    unint64_t v22 = (*(void *)(v3 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(v3 + 64);
    if (v22 + 16 < v13) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v22 = 0;
LABEL_30:
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unint64_t v23 = v22 + v19;
  if (v13 <= v23) {
    unint64_t v23 = 0;
  }
  *(void *)(v3 + 80) = v23;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v3 + 72) + 16) + 128), v23);
  *(_DWORD *)(v3 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(v3 + 8));
  unint64_t v24 = v45;
  unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v25 = 1412;
  *((void *)v25 + 1) = v4;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  unint64_t v49 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v24, (uint64_t *)&v49, 1, 0);
  unint64_t v27 = v49;
  unint64_t v49 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
}

void WebKit::WebGPU::RemoteTextureViewProxy::~RemoteTextureViewProxy(WebKit::WebGPU::RemoteTextureViewProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 6) + 48) + 80);
  uint64_t v3 = *((void *)this + 4);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v19 = v51;
  unint64_t v18 = v52;
  unint64_t v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v51;
  if (v20 < v51) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v52)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v51 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v51, v5);
  if (!v53) {
    goto LABEL_71;
  }
  unint64_t v8 = v51;
  unint64_t v9 = v52;
  BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v51;
  if ((unint64_t)v10 < v51)
  {
    unint64_t v12 = 0;
    if (v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v52)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v52)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
    *BOOL v10 = 1407;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v53;
  if (v53)
  {
    unint64_t v8 = v51;
    BOOL v10 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_90:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  unint64_t v39 = v50;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1407;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v54 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v54, 1, 0);
  int v42 = v54;
  unint64_t v54 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
LABEL_71:
  uint64_t v43 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  *(void *)this = &unk_1EE9EBA50;
  unint64_t v45 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v7);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = *((void *)this + 2);
  if (v46)
  {
    *(void *)(v46 + 8) = 0;
    unint64_t v47 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v47)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteTextureViewProxy::~RemoteTextureViewProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteTextureViewProxy::setLabelInternal(WebKit::WebGPU::RemoteTextureViewProxy *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)a2;
  return IPC::StreamClientConnection::send<Messages::RemoteTextureView::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(*(void *)(*(void *)(*((void *)this + 6) + 48) + 80), &v3, *((void *)this + 4));
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(void *a1, uint64_t a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, *(void **)a2);
  unint64_t v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v4) = **(unsigned char **)(a2 + 8);
    a1[2] = v4 + 1;
  }
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, *(void *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, v5);
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  char v4 = **(unsigned char **)(a2 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, *(void *)(a2 + 16));
    uint64_t v7 = *(void *)(a2 + 24);
    return (uint64_t)IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, v7);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, *(void *)(a2 + 8));
  uint64_t v12 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, v12);
}

unsigned char *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(a1, *(int **)a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v3, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v3, v4);
}

void *IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, *(void **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, *(void *)(a2 + 16));
  uint64_t v12 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, v12);
}

unsigned char *IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(a1, *(int **)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v3, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v3, v4);
}

void *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, *(void *)(a2 + 16));
  uint64_t v12 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, v12);
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(a1, *(int **)a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v3, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v3, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v3, v4);
}

void *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, *(void *)(a2 + 16));
  uint64_t v12 = *(void *)(a2 + 24);
  unint64_t v14 = a1[1];
  unint64_t v13 = a1[2];
  if (*(unsigned char *)(v12 + 4))
  {
    if (v13 >= v14)
    {
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v13) = 1;
      a1[2] = v13 + 1;
      if (!*(unsigned char *)(v12 + 4))
      {
        uint64_t v17 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(v17);
      }
    }
    IPC::StreamConnectionEncoder::operator<<<int const&>(a1, (_DWORD *)v12);
  }
  else if (v13 >= v14)
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v13) = 0;
    a1[2] = v13 + 1;
  }
  uint64_t v15 = *(void *)(a2 + 32);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, v15);
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(a1, *(int **)a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v3, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v3, *(void *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(v3, *(void *)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 32);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v3, v4);
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteRenderBundleEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  unsigned int v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  unint64_t v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 1285;
      unint64_t v52 = v12 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(&v50, a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  unint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1285;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v50 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v26, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  unint64_t v28 = v50;
  unint64_t v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteRenderPassEncoder::SetBindGroup,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  unsigned int v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)unint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  unint64_t v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 1305;
      unint64_t v52 = v12 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(&v50, a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  unint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1305;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v50 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v26, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  unint64_t v28 = v50;
  unint64_t v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EBA78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EBA78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (!a2 || (uint64_t v4 = *(void **)a2) == 0)
  {
LABEL_53:
    uint64_t v46 = 0;
    *(void *)&long long v47 = 0;
    WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0::operator()<WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, (uint64_t *)&v46);
    unint64_t v24 = &v46;
    return WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v23);
  }
  unint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        unint64_t v26 = *(void **)a2;
        uint64_t v27 = *((void *)a2 + 1);
        uint64_t v28 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v28)
        {
          if (v27) {
            (*(void (**)(uint64_t, void *))(*(void *)v28 + 16))(v28, v26);
          }
        }
      }
    }
    goto LABEL_49;
  }
  double v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  *((void *)a2 + 2) = v8 + 1;
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v9 < 0x5555)
  {
    if (!v9)
    {
      LODWORD(v11) = 0;
      unsigned int v20 = 0;
      unint64_t v10 = 0;
LABEL_23:
      unint64_t v51 = 0;
      uint64_t v52 = 0;
      char v45 = 1;
      WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v4);
      v44[0] = 0;
      v44[1] = 0;
      WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v21);
      char v43 = 1;
      v42[0] = 0;
      uint64_t v46 = v10;
      v42[1] = 0;
      *(void *)&long long v47 = __PAIR64__(v11, v20);
      WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0::operator()<WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, (uint64_t *)&v46);
      WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v22);
      unint64_t v24 = (WTF::StringImpl **)v42;
      return WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v23);
    }
    unint64_t v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * v9));
    LODWORD(v11) = 0;
    LODWORD(v52) = 48 * (int)v9 / 0x30u;
    unint64_t v51 = v10;
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebGPU::CompilationMessage>((uint64_t)&v46, a2);
      if (!v50) {
        break;
      }
      if (v11 == v52)
      {
        unint64_t v12 = WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, v11 + 1, (unint64_t)&v46);
        LODWORD(v11) = HIDWORD(v52);
        unint64_t v10 = v51;
        unint64_t v13 = (char *)v51 + 48 * HIDWORD(v52);
        uint64_t v14 = *(void *)v12;
        *(void *)unint64_t v12 = 0;
        *(void *)unint64_t v13 = v14;
        long long v15 = *(_OWORD *)(v12 + 8);
        long long v16 = *(_OWORD *)(v12 + 24);
        uint64_t v17 = *(void *)(v12 + 40);
      }
      else
      {
        unint64_t v13 = (char *)v10 + 48 * v11;
        unint64_t v18 = v46;
        uint64_t v46 = 0;
        *(void *)unint64_t v13 = v18;
        long long v15 = v47;
        long long v16 = v48;
        uint64_t v17 = v49;
      }
      *((void *)v13 + 5) = v17;
      *(_OWORD *)(v13 + 24) = v16;
      *(_OWORD *)(v13 + 8) = v15;
      LODWORD(v11) = v11 + 1;
      HIDWORD(v52) = v11;
      if (v50)
      {
        unint64_t v19 = v46;
        uint64_t v46 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v4);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      if (!--v9)
      {
        unsigned int v20 = v52;
        goto LABEL_23;
      }
    }
LABEL_48:
    WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v4);
LABEL_49:
    unint64_t v38 = *(void **)a2;
    uint64_t v39 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v40 = *((void *)a2 + 3);
    if (v40)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v40 + 16))(v40, v38);
        unint64_t v41 = *(void **)a2;
        uint64_t v39 = *((void *)a2 + 1);
        uint64_t v40 = *((void *)a2 + 3);
LABEL_52:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v40)
        {
          if (v39) {
            (*(void (**)(uint64_t, void *))(*(void *)v40 + 16))(v40, v41);
          }
        }
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v39 = 0;
    }
    unint64_t v41 = 0;
    goto LABEL_52;
  }
  unint64_t v29 = 0;
  LODWORD(v11) = 0;
  do
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebKit::WebGPU::CompilationMessage>((uint64_t)&v46, a2);
    if (!v50) {
      goto LABEL_48;
    }
    if (v11 == v52)
    {
      uint64_t result = WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, v11 + 1, (unint64_t)&v46);
      LODWORD(v11) = HIDWORD(v52);
      unint64_t v29 = v51;
      unint64_t v31 = (char *)v51 + 48 * HIDWORD(v52);
      uint64_t v32 = *(void *)result;
      *(void *)uint64_t result = 0;
      *(void *)unint64_t v31 = v32;
      long long v33 = *(_OWORD *)(result + 8);
      long long v34 = *(_OWORD *)(result + 24);
      uint64_t v35 = *(void *)(result + 40);
    }
    else
    {
      unint64_t v31 = (char *)v29 + 48 * v11;
      unint64_t v36 = v46;
      uint64_t v46 = 0;
      *(void *)unint64_t v31 = v36;
      long long v33 = v47;
      long long v34 = v48;
      uint64_t v35 = v49;
    }
    *((void *)v31 + 5) = v35;
    *(_OWORD *)(v31 + 24) = v34;
    *(_OWORD *)(v31 + 8) = v33;
    uint64_t v11 = (v11 + 1);
    HIDWORD(v52) = v11;
    if (v50)
    {
      uint64_t result = (uint64_t)v46;
      uint64_t v46 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    --v9;
  }
  while (v9);
  unsigned int v20 = v52;
  if (v52 <= v11)
  {
LABEL_47:
    unint64_t v10 = v51;
    goto LABEL_23;
  }
  if (!v11)
  {
LABEL_45:
    unint64_t v51 = 0;
    LODWORD(v52) = 0;
LABEL_46:
    WTF::fastFree(v29, v4);
    unsigned int v20 = v52;
    LODWORD(v11) = HIDWORD(v52);
    goto LABEL_47;
  }
  if (v11 < 0x5555556)
  {
    uint64_t v37 = WTF::fastMalloc((WTF *)(48 * v11));
    LODWORD(v52) = 48 * (int)v11 / 0x30u;
    unint64_t v51 = (WTF::StringImpl *)v37;
    if ((WTF *)v37 != v29)
    {
      WTF::VectorMover<false,WebKit::WebGPU::CompilationMessage>::move(v29, (WTF *)((char *)v29 + 48 * v11), v37);
      if (v51 != v29) {
        goto LABEL_46;
      }
    }
    goto LABEL_45;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebGPU::CompilationMessage>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      double v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1990ED410);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 48 * *((unsigned int *)result + 3));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,WebKit::WebGPU::CompilationMessage>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebGPU::CompilationMessage>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      long long v7 = *(_OWORD *)((char *)v5 + 8);
      long long v8 = *(_OWORD *)((char *)v5 + 24);
      *(void *)(a3 + 40) = *((void *)v5 + 5);
      *(_OWORD *)(a3 + 24) = v8;
      *(_OWORD *)(a3 + 8) = v7;
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0::operator()<WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v3));
    if (*((_DWORD *)a2 + 3))
    {
      unint64_t v21 = v2;
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *a2;
        unint64_t v9 = *(_DWORD **)(*a2 + v6);
        if (v9) {
          *v9 += 2;
        }
        uint64_t v10 = v8 + v6;
        char v11 = *(unsigned char *)(v10 + 8);
        long long v22 = *(_OWORD *)(v10 + 16);
        uint64_t v13 = *(void *)(v10 + 32);
        uint64_t v12 = *(void *)(v10 + 40);
        uint64_t v14 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)uint64_t v14 = 1;
        *(void *)(v14 + 8) = v9;
        *(unsigned char *)(v14 + 16) = v11;
        *(_OWORD *)(v14 + 24) = v22;
        *(void *)(v14 + 40) = v13;
        *(void *)(v14 + 48) = v12;
        unint64_t v15 = v7 + 1;
        *(void *)(v5 + 8 * v7) = v14;
        v6 += 48;
        unint64_t v7 = v15;
      }
      while (v15 < *((unsigned int *)a2 + 3));
      uint64_t v2 = v21;
    }
    else
    {
      LODWORD(v15) = 0;
    }
  }
  else
  {
    LODWORD(v15) = 0;
    uint64_t v5 = 0;
  }
  uint64_t v16 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)(v16 + 8) = v5;
  v24[0] = 0;
  v24[1] = 0;
  *(_DWORD *)(v16 + 16) = v3;
  *(_DWORD *)(v16 + 20) = v15;
  unint64_t v23 = (WTF *)v16;
  uint64_t v17 = *v2;
  *uint64_t v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v17 + 16))(v17, &v23);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  unint64_t v19 = v23;
  unint64_t v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WTF::Vector<WTF::Ref<WebCore::WebGPU::CompilationMessage,WTF::RawPtrTraits<WebCore::WebGPU::CompilationMessage>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationMessage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19 + 8, v18);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  return WTF::Vector<WTF::Ref<WebCore::WebGPU::CompilationMessage,WTF::RawPtrTraits<WebCore::WebGPU::CompilationMessage>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationMessage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v18);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WebGPU::CompilationMessage,WTF::RawPtrTraits<WebCore::WebGPU::CompilationMessage>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationMessage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(WTF **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          unint64_t v7 = (WTF::StringImpl *)*((void *)v6 + 1);
          *((void *)v6 + 1) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v8 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteShaderModule::CompilationInfo &&,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EBAA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteShaderModule::CompilationInfo &&,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EBAA0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteShaderModule::CompilationInfo &&,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

atomic_uchar *volatile **IPC::StreamClientConnection::send<Messages::RemoteTextureView::SetLabel,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) == a3) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v50, v7);
  if (!(_BYTE)v52) {
    return result;
  }
  uint64_t v32 = v50;
  unint64_t v31 = v51;
  unint64_t v33 = ((unint64_t)v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - (void)v50;
  if (v33 < (unint64_t)v50) {
    goto LABEL_72;
  }
  unint64_t v35 = v34 + 2;
  if (v34 > 0xFFFFFFFFFFFFFFFDLL || v35 > v51)
  {
    unint64_t v31 = 0;
LABEL_72:
    unint64_t v35 = 0;
    goto LABEL_45;
  }
  *(_WORD *)((char *)v50 + v34) = 2871;
LABEL_45:
  uint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= (char *)v32 + v35)
  {
    unint64_t v35 = v37 - (char *)v32 + 8;
    if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
      return result;
    }
    *(void *)uint64_t v37 = a3;
  }
  if (!v31) {
    return result;
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v41 = v39 + v35;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  unint64_t v42 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  int v43 = *(_DWORD *)(a1 + 116);
  if (v42 == 0x80000000 || v43 != 0)
  {
    unsigned int v45 = v43 + 1;
    *(_DWORD *)(a1 + 116) = v45;
    if (v45 >= *(_DWORD *)(a1 + 112))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  *(void *)(a1 + 56) = a3;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
  if (!v49) {
    return result;
  }
  char v50 = v47;
  unint64_t v51 = v48;
  unint64_t v52 = 0;
  unint64_t v10 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v10 >= (unint64_t)v47;
  unint64_t v12 = v10 - (void)v47;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v48)
    {
      unint64_t v51 = 0;
    }
    else
    {
      *(_WORD *)((char *)v47 + v12) = 1408;
      unint64_t v52 = v12 + 2;
    }
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v50, *a2);
  if (v51)
  {
    uint64_t v15 = v52;
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v17 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v18 = *(void *)(a1 + 64);
    if (v17 + 16 >= v18) {
      unint64_t v17 = 0;
    }
    if (v52 <= 0x10) {
      uint64_t v15 = 16;
    }
    unint64_t v19 = v17 + v15;
    if (v18 <= v19) {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return result;
  }
  unint64_t v20 = v49;
  if (v49)
  {
    unint64_t v21 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v47;
    if (v21 < (unint64_t)v47)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v48)
      {
        *(_WORD *)((char *)v47 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v23 + 16 < v14) {
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_30:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v14 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)(a1 + 8));
  uint64_t v25 = v46;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1408;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  char v50 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v50, 1, 0);
  uint64_t v28 = v50;
  char v50 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
}

void WebKit::WebGPU::RemoteXRBindingProxy::~RemoteXRBindingProxy(WebKit::WebGPU::RemoteXRBindingProxy *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 72) + 72) + 80);
  uint64_t v3 = *((void *)this + 3);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v50, v5);
  if (!v52) {
    goto LABEL_71;
  }
  unint64_t v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v50;
  if (v20 < v50) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v51)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v50 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v50, v5);
  if (!v52) {
    goto LABEL_71;
  }
  unint64_t v8 = v50;
  unint64_t v9 = v51;
  unint64_t v10 = (_WORD *)((v50 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v50;
  if ((unint64_t)v10 < v50)
  {
    unint64_t v12 = 0;
    if (v51) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v51)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v51)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_86;
    }
    *unint64_t v10 = 1446;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v52;
  if (v52)
  {
    unint64_t v8 = v50;
    unint64_t v10 = (_WORD *)((v50 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_86:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)(v2 + 8));
  unint64_t v39 = v49;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1446;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned __int8 v53 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v53, 1, 0);
  unint64_t v42 = v53;
  unsigned __int8 v53 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v47, v48);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
LABEL_71:
  int v43 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  uint64_t v45 = *((void *)this + 2);
  if (v45)
  {
    *(void *)(v45 + 8) = 0;
    uint64_t v46 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v46)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v46, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteXRBindingProxy::~RemoteXRBindingProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteXRBindingProxy::createProjectionLayer@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v6 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v66 = v6;
  double v7 = *(double *)(a2 + 8);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1[5] + 72) + 72) + 80);
  uint64_t v9 = a1[3];
  double v10 = *(double *)(v8 + 120);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v11 = v10 + v12;
  }
  if (*(void *)(v8 + 56) == v9)
  {
LABEL_4:
    IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v68, v11);
    if (!v70) {
      goto LABEL_50;
    }
    uint64_t v13 = v68;
    unint64_t v14 = v69;
    unsigned __int8 v71 = v68;
    unint64_t v72 = v69;
    unint64_t v73 = 0;
    unint64_t v15 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v16 = v15 - (void)v68;
    if (v15 < (unint64_t)v68)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = v16 + 2;
      if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v69)
      {
        unint64_t v14 = 0;
        unint64_t v17 = 0;
        unint64_t v72 = 0;
      }
      else
      {
        *(_WORD *)((char *)v68 + v16) = 1445;
        unint64_t v73 = v16 + 2;
      }
    }
    if (v17 >= v14)
    {
      unint64_t v72 = 0;
    }
    else
    {
      *((unsigned char *)v13 + v17) = *(unsigned char *)a2;
      unint64_t v73 = v17 + 1;
    }
    IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(&v71, (unsigned char *)(a2 + 1));
    unint64_t v19 = v73;
    if (v73 >= v72)
    {
      unint64_t v20 = 0;
      unint64_t v72 = 0;
    }
    else
    {
      *((unsigned char *)v71 + v73) = *(unsigned char *)(a2 + 3);
      unint64_t v73 = ++v19;
      unint64_t v20 = v72;
    }
    unint64_t v21 = v71;
    unint64_t v22 = ((unint64_t)v71 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = v22 - ((void)v71 + v19);
    if (v22 >= (unint64_t)v71 + v19)
    {
      unint64_t v24 = v22 - (void)v71;
      if (v23 + v19 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > v20)
      {
        unint64_t v20 = 0;
        unint64_t v72 = 0;
      }
      else
      {
        *(double *)((char *)v71 + v24) = v7;
        unint64_t v73 = v24 + 8;
        unint64_t v21 = v71;
        unint64_t v20 = v72;
        unint64_t v19 = v24 + 8;
      }
    }
    uint64_t v25 = (char *)(((unint64_t)v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v25 >= (char *)v21 + v19)
    {
      int64_t v26 = v25 - (char *)v21;
      if ((unint64_t)(v25 - (char *)v21) > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_35;
      }
      unint64_t v19 = v26 + 8;
      if (v26 + 8 > v20) {
        goto LABEL_35;
      }
      *(void *)uint64_t v25 = v66;
      unint64_t v73 = v26 + 8;
      unint64_t v20 = v72;
    }
    if (v20)
    {
      unint64_t v27 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v28 = *(void *)(v8 + 64);
      if (v27 + 16 >= v28) {
        unint64_t v27 = 0;
      }
      if (v19 <= 0x10) {
        unint64_t v19 = 16;
      }
      unint64_t v29 = v27 + v19;
      if (v28 <= v29) {
        unint64_t v29 = 0;
      }
      *(void *)(v8 + 80) = v29;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v29) == 0x80000000
        || *(_DWORD *)(v8 + 116))
      {
        if (*(unsigned char *)(v8 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
        }
        *(_DWORD *)(v8 + 116) = 0;
      }
LABEL_51:
      uint64_t v46 = a1 + 4;
      uint64_t v45 = a1[4];
      uint64_t v47 = *(void *)(*(void *)(v46[1] + 72) + 72);
      uint64_t v48 = (uint64_t)v66;
      uint64_t result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = v48;
      *(void *)uint64_t result = &unk_1EE9EBB08;
      ++*(_DWORD *)(v45 + 8);
      *(void *)(result + 32) = v45;
      atomic_fetch_add((atomic_uint *volatile)(v47 + 28), 1u);
      *(void *)(result + 40) = v47;
      goto LABEL_52;
    }
LABEL_35:
    if (v70)
    {
      unint64_t v30 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - (void)v68;
      if (v30 < (unint64_t)v68)
      {
        unint64_t v32 = 0;
      }
      else
      {
        unint64_t v32 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v69)
        {
          *(_WORD *)((char *)v68 + v31) = 2870;
          unint64_t v32 = v31 + 2;
        }
      }
      unint64_t v33 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v34 = *(void *)(v8 + 64);
      if (v33 + 16 >= v34) {
        unint64_t v33 = 0;
      }
      if (v32 <= 0x10) {
        unint64_t v32 = 16;
      }
      unint64_t v35 = v33 + v32;
      if (v34 <= v35) {
        unint64_t v35 = 0;
      }
      *(void *)(v8 + 80) = v35;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v35);
      *(_DWORD *)(v8 + 116) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)(v8 + 8));
      unint64_t v36 = v67;
      unint64_t v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v37 = 1445;
      *((void *)v37 + 1) = v9;
      *((void *)v37 + 66) = (char *)v37 + 16;
      *((void *)v37 + 67) = 512;
      *((void *)v37 + 68) = 0;
      *((void *)v37 + 70) = 0;
      *((void *)v37 + 69) = 0;
      IPC::Encoder::encodeHeader(v37);
      unsigned __int8 v71 = v37;
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v37, *(unsigned char *)a2);
      IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(v37, (char *)(a2 + 1));
      char v38 = *(unsigned char *)(a2 + 3);
      unint64_t v39 = (unsigned char *)IPC::Encoder::grow(v37, 1uLL, 1);
      if (v40)
      {
        *unint64_t v39 = v38;
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v37, v7);
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v37, (uint64_t *)&v66);
        int v42 = IPC::Connection::sendMessageImpl((uint64_t)v36, (uint64_t *)&v71, 1, 0);
        int v43 = v71;
        unsigned __int8 v71 = 0;
        if (v43)
        {
          IPC::Encoder::~Encoder(v43, v41);
          WTF::fastFree(v49, v50);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
        if (!v42) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
    JUMPOUT(0x1990EE5B4);
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v8 + 64, &v71, v11);
  if (!(_BYTE)v73) {
    goto LABEL_50;
  }
  unsigned __int8 v52 = v71;
  unint64_t v51 = v72;
  unint64_t v53 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v54 = v53 - (void)v71;
  if (v53 >= (unint64_t)v71)
  {
    unint64_t v55 = v54 + 2;
    if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v72)
    {
      *(_WORD *)((char *)v71 + v54) = 2871;
      goto LABEL_60;
    }
    unint64_t v51 = 0;
  }
  unint64_t v55 = 0;
LABEL_60:
  unint64_t v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v57 >= (char *)v52 + v55)
  {
    unint64_t v55 = v57 - (char *)v52 + 8;
    if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
      goto LABEL_50;
    }
    *(void *)unint64_t v57 = v9;
  }
  if (v51)
  {
    unint64_t v59 = (*(void *)(v8 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v60 = *(void *)(v8 + 64);
    if (v59 + 16 >= v60) {
      unint64_t v59 = 0;
    }
    if (v55 <= 0x10) {
      unint64_t v55 = 16;
    }
    unint64_t v61 = v59 + v55;
    if (v60 <= v61) {
      unint64_t v61 = 0;
    }
    *(void *)(v8 + 80) = v61;
    unint64_t v62 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v8 + 72) + 16) + 128), v61);
    int v63 = *(_DWORD *)(v8 + 116);
    if (v62 == 0x80000000 || v63 != 0)
    {
      unsigned int v65 = v63 + 1;
      *(_DWORD *)(v8 + 116) = v65;
      if (v65 >= *(_DWORD *)(v8 + 112))
      {
        if (*(unsigned char *)(v8 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v8 + 92));
        }
        *(_DWORD *)(v8 + 116) = 0;
      }
    }
    *(void *)(v8 + 56) = v9;
    goto LABEL_4;
  }
LABEL_50:
  uint64_t result = 0;
LABEL_52:
  *a3 = result;
  return result;
}

void WebKit::WebGPU::RemoteXRBindingProxy::getSubImage()
{
}

uint64_t WebKit::WebGPU::RemoteXRBindingProxy::getViewSubImage@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v66 = *(void *)(a2 + 24);
  char v67 = v8;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1[5] + 72) + 72) + 80);
  uint64_t v10 = a1[3];
  double v11 = *(double *)(v9 + 120);
  double v12 = INFINITY;
  if (fabs(v11) != INFINITY)
  {
    WTF::ApproximateTime::now(v8);
    double v12 = v11 + v13;
  }
  if (*(void *)(v9 + 56) == v10)
  {
LABEL_4:
    IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v69, v12);
    if (!v71) {
      goto LABEL_51;
    }
    unint64_t v14 = v69;
    unint64_t v15 = v70;
    unint64_t v16 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = v16 - v69;
    if (v16 >= v69)
    {
      unint64_t v18 = v17 + 2;
      if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v70)
      {
        *(_WORD *)(v69 + v17) = 1447;
        goto LABEL_11;
      }
      unint64_t v15 = 0;
    }
    unint64_t v18 = 0;
LABEL_11:
    unint64_t v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = v20 - (v14 + v18);
    if (v20 >= v14 + v18)
    {
      unint64_t v22 = v20 - v14;
      unint64_t v23 = v21 + v18 + 8;
      if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
      {
        unint64_t v15 = 0;
      }
      else
      {
        *(void *)(v14 + v22) = v66;
        unint64_t v18 = v23;
      }
    }
    if (v18 >= v15) {
      unint64_t v15 = 0;
    }
    else {
      *(unsigned char *)(v14 + v18++) = a3;
    }
    uint64_t v25 = (void *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v25 >= v14 + v18)
    {
      int64_t v26 = (char *)v25 - v14;
      if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_36;
      }
      unint64_t v18 = (unint64_t)(v26 + 8);
      if ((unint64_t)(v26 + 8) > v15) {
        goto LABEL_36;
      }
      void *v25 = v67;
    }
    if (v15)
    {
      unint64_t v27 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v28 = *(void *)(v9 + 64);
      if (v27 + 16 >= v28) {
        unint64_t v27 = 0;
      }
      if (v18 <= 0x10) {
        unint64_t v18 = 16;
      }
      unint64_t v29 = v27 + v18;
      if (v28 <= v29) {
        unint64_t v30 = 0;
      }
      else {
        unint64_t v30 = v29;
      }
      *(void *)(v9 + 80) = v30;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v30) == 0x80000000
        || *(_DWORD *)(v9 + 116))
      {
        if (*(unsigned char *)(v9 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
        }
        *(_DWORD *)(v9 + 116) = 0;
      }
LABEL_52:
      uint64_t v46 = a1 + 4;
      uint64_t v45 = a1[4];
      uint64_t v47 = *(void *)(*(void *)(v46[1] + 72) + 72);
      uint64_t v48 = (uint64_t)v67;
      uint64_t result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = v48;
      *(void *)uint64_t result = &unk_1EE9EBB78;
      ++*(_DWORD *)(v45 + 8);
      *(void *)(result + 32) = v45;
      atomic_fetch_add((atomic_uint *volatile)(v47 + 28), 1u);
      *(void *)(result + 40) = v47;
      goto LABEL_53;
    }
LABEL_36:
    if (v71)
    {
      unint64_t v31 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = v31 - v69;
      if (v31 < v69)
      {
        unint64_t v33 = 0;
      }
      else
      {
        unint64_t v33 = 0;
        if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v70)
        {
          *(_WORD *)(v69 + v32) = 2870;
          unint64_t v33 = v32 + 2;
        }
      }
      unint64_t v34 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v35 = *(void *)(v9 + 64);
      if (v34 + 16 >= v35) {
        unint64_t v34 = 0;
      }
      if (v33 <= 0x10) {
        unint64_t v33 = 16;
      }
      unint64_t v36 = v34 + v33;
      if (v35 <= v36) {
        unint64_t v36 = 0;
      }
      *(void *)(v9 + 80) = v36;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v36);
      *(_DWORD *)(v9 + 116) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(v9 + 8));
      unint64_t v37 = v68;
      char v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v38 = 1447;
      *((void *)v38 + 1) = v10;
      *((void *)v38 + 66) = (char *)v38 + 16;
      *((void *)v38 + 67) = 512;
      *((void *)v38 + 68) = 0;
      *((void *)v38 + 70) = 0;
      *((void *)v38 + 69) = 0;
      IPC::Encoder::encodeHeader(v38);
      unint64_t v72 = v38;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, &v66);
      unint64_t v39 = (unsigned char *)IPC::Encoder::grow(v38, 1uLL, 1);
      if (v40)
      {
        *unint64_t v39 = a3;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, (uint64_t *)&v67);
        int v42 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v72, 1, 0);
        int v43 = v72;
        unint64_t v72 = 0;
        if (v43)
        {
          IPC::Encoder::~Encoder(v43, v41);
          WTF::fastFree(v49, v50);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
        if (!v42) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
    JUMPOUT(0x1990EEAC0);
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 64, &v69, v12);
  if (!v71) {
    goto LABEL_51;
  }
  unint64_t v52 = v69;
  unint64_t v51 = v70;
  unint64_t v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v54 = v53 - v69;
  if (v53 >= v69)
  {
    unint64_t v55 = v54 + 2;
    if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v70)
    {
      *(_WORD *)(v69 + v54) = 2871;
      goto LABEL_61;
    }
    unint64_t v51 = 0;
  }
  unint64_t v55 = 0;
LABEL_61:
  unint64_t v57 = (void *)((v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v57 >= v52 + v55)
  {
    unint64_t v55 = (unint64_t)v57 - v52 + 8;
    if ((unint64_t)v57 - v52 > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
      goto LABEL_51;
    }
    *unint64_t v57 = v10;
  }
  if (v51)
  {
    unint64_t v59 = (*(void *)(v9 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v60 = *(void *)(v9 + 64);
    if (v59 + 16 >= v60) {
      unint64_t v59 = 0;
    }
    if (v55 <= 0x10) {
      unint64_t v55 = 16;
    }
    unint64_t v61 = v59 + v55;
    if (v60 <= v61) {
      unint64_t v61 = 0;
    }
    *(void *)(v9 + 80) = v61;
    unint64_t v62 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v9 + 72) + 16) + 128), v61);
    int v63 = *(_DWORD *)(v9 + 116);
    if (v62 == 0x80000000 || v63 != 0)
    {
      unsigned int v65 = v63 + 1;
      *(_DWORD *)(v9 + 116) = v65;
      if (v65 >= *(_DWORD *)(v9 + 112))
      {
        if (*(unsigned char *)(v9 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v9 + 92));
        }
        *(_DWORD *)(v9 + 116) = 0;
      }
    }
    *(void *)(v9 + 56) = v10;
    goto LABEL_4;
  }
LABEL_51:
  uint64_t result = 0;
LABEL_53:
  *a4 = result;
  return result;
}

uint64_t WebKit::WebGPU::RemoteXRBindingProxy::getPreferredColorFormat(WebKit::WebGPU::RemoteXRBindingProxy *this)
{
  return 22;
}

void WebKit::WebGPU::RemoteXRProjectionLayerProxy::~RemoteXRProjectionLayerProxy(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v3 = *((void *)this + 3);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v50, v5);
  if (!v52) {
    goto LABEL_71;
  }
  unint64_t v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v50;
  if (v20 < v50) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v51)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v50 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v50, v5);
  if (!v52) {
    goto LABEL_71;
  }
  unint64_t v8 = v50;
  unint64_t v9 = v51;
  uint64_t v10 = (_WORD *)((v50 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v50;
  if ((unint64_t)v10 < v50)
  {
    unint64_t v12 = 0;
    if (v51) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v51)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v51)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_85;
    }
    *uint64_t v10 = 1448;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v52;
  if (v52)
  {
    unint64_t v8 = v50;
    uint64_t v10 = (_WORD *)((v50 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_85:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)(v2 + 8));
  unint64_t v39 = v49;
  uint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v40 = 1448;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v53 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v53, 1, 0);
  int v42 = v53;
  unint64_t v53 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v47, v48);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
LABEL_71:
  int v43 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v43 && atomic_fetch_add((atomic_uint *volatile)v43 + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v43 + 7);
    (*(void (**)(unsigned int *))(*(void *)v43 + 8))(v43);
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  uint64_t v45 = *((void *)this + 2);
  if (v45)
  {
    *(void *)(v45 + 8) = 0;
    uint64_t v46 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v46)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v46, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteXRProjectionLayerProxy::~RemoteXRProjectionLayerProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteXRProjectionLayerProxy::startFrame(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v2 = *((void *)this + 3);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1450;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1450;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  uint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  uint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

atomic_uchar *volatile **WebKit::WebGPU::RemoteXRProjectionLayerProxy::endFrame(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v2 = *((void *)this + 3);
  double v3 = *(double *)(v1 + 120);
  double v4 = INFINITY;
  if (fabs(v3) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v4 = v3 + v5;
  }
  if (*(void *)(v1 + 56) == v2) {
    goto LABEL_4;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v18 = v45;
  unint64_t v17 = v46;
  unint64_t v19 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v20 = v19 - v45;
  if (v19 < v45) {
    goto LABEL_53;
  }
  unint64_t v21 = v20 + 2;
  if (v20 > 0xFFFFFFFFFFFFFFFDLL || v21 > v46)
  {
    unint64_t v17 = 0;
LABEL_53:
    unint64_t v21 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v45 + v20) = 2871;
LABEL_29:
  unint64_t v23 = (void *)((v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v23 >= v18 + v21)
  {
    unint64_t v21 = (unint64_t)v23 - v18 + 8;
    if ((unint64_t)v23 - v18 > 0xFFFFFFFFFFFFFFF7 || v21 > v17) {
      return result;
    }
    *unint64_t v23 = v2;
  }
  if (!v17) {
    return result;
  }
  unint64_t v25 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = *(void *)(v1 + 64);
  if (v25 + 16 >= v26) {
    unint64_t v25 = 0;
  }
  if (v21 <= 0x10) {
    unint64_t v21 = 16;
  }
  unint64_t v27 = v25 + v21;
  if (v26 <= v27) {
    unint64_t v27 = 0;
  }
  *(void *)(v1 + 80) = v27;
  unint64_t v28 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v27);
  int v29 = *(_DWORD *)(v1 + 116);
  if (v28 == 0x80000000 || v29 != 0)
  {
    unsigned int v31 = v29 + 1;
    *(_DWORD *)(v1 + 116) = v31;
    if (v31 >= *(_DWORD *)(v1 + 112))
    {
      if (*(unsigned char *)(v1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
      }
      *(_DWORD *)(v1 + 116) = 0;
    }
  }
  *(void *)(v1 + 56) = v2;
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 64, &v45, v4);
  if (!v47) {
    return result;
  }
  unint64_t v7 = v45;
  unint64_t v8 = v46;
  unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)v9 - v45;
  if ((unint64_t)v9 < v45)
  {
    unint64_t v11 = 0;
    if (v46) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v46)
    {
LABEL_57:
      unint64_t v11 = 0;
      BOOL v33 = (unint64_t)v9 >= v7;
      unint64_t v34 = (unint64_t)v9 - v7;
      if (v33 && v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v46)
      {
        *(_WORD *)(v7 + v34) = 2870;
        unint64_t v11 = v34 + 2;
      }
      unint64_t v35 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(v1 + 64);
      if (v35 + 16 < v32) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    *unint64_t v9 = 1449;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(v1 + 72);
      unint64_t v14 = (*(void *)(v1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(v1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(v1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) == 0x80000000
        || *(_DWORD *)(v1 + 116))
      {
        if (*(unsigned char *)(v1 + 104)) {
          uint64_t result = (atomic_uchar *volatile **)MEMORY[0x1997420B0](*(unsigned int *)(v1 + 92));
        }
        *(_DWORD *)(v1 + 116) = 0;
      }
      return result;
    }
  }
  unint64_t v32 = v47;
  if (v47)
  {
    unint64_t v7 = v45;
    unint64_t v9 = (_WORD *)((v45 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_73:
  unint64_t v35 = 0;
LABEL_63:
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v36 = v35 + v11;
  if (v32 <= v36) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v36;
  }
  *(void *)(v1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v1 + 72) + 16) + 128), v37);
  *(_DWORD *)(v1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v1 + 8));
  unint64_t v38 = v44;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 1449;
  *((void *)v39 + 1) = v2;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  uint64_t v48 = v39;
  IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v48, 1, 0);
  unint64_t v41 = v48;
  uint64_t v48 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
}

uint64_t WebKit::WebGPU::RemoteXRProjectionLayerProxy::textureWidth(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  return 0;
}

uint64_t WebKit::WebGPU::RemoteXRProjectionLayerProxy::textureHeight(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  return 0;
}

uint64_t WebKit::WebGPU::RemoteXRProjectionLayerProxy::textureArrayLength(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  return 0;
}

uint64_t WebKit::WebGPU::RemoteXRProjectionLayerProxy::ignoreDepthValues(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  return 0;
}

uint64_t WebKit::WebGPU::RemoteXRProjectionLayerProxy::fixedFoveation(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  return 0x100000000;
}

uint64_t WebKit::WebGPU::RemoteXRProjectionLayerProxy::deltaPose(WebKit::WebGPU::RemoteXRProjectionLayerProxy *this)
{
  return 0;
}

void WebKit::WebGPU::RemoteXRSubImageProxy::~RemoteXRSubImageProxy(WebKit::WebGPU::RemoteXRSubImageProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 80);
  uint64_t v3 = *((void *)this + 3);
  double v4 = *(double *)(v2 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    double v5 = v4 + v6;
  }
  if (*(void *)(v2 + 56) == v3) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v50, v5);
  if (!v52) {
    goto LABEL_71;
  }
  unint64_t v19 = v50;
  unint64_t v18 = v51;
  unint64_t v20 = (v50 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - v50;
  if (v20 < v50) {
    goto LABEL_53;
  }
  unint64_t v22 = v21 + 2;
  if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v51)
  {
    unint64_t v18 = 0;
LABEL_53:
    unint64_t v22 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v50 + v21) = 2871;
LABEL_29:
  unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v24 >= v19 + v22)
  {
    unint64_t v22 = (unint64_t)v24 - v19 + 8;
    if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
      goto LABEL_71;
    }
    *unint64_t v24 = v3;
  }
  if (!v18) {
    goto LABEL_71;
  }
  unint64_t v26 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(v2 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v28 = v26 + v22;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(v2 + 80) = v28;
  unint64_t v29 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v28);
  int v30 = *(_DWORD *)(v2 + 116);
  if (v29 == 0x80000000 || v30 != 0)
  {
    unsigned int v32 = v30 + 1;
    *(_DWORD *)(v2 + 116) = v32;
    if (v32 >= *(_DWORD *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  *(void *)(v2 + 56) = v3;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 64, &v50, v5);
  if (!v52) {
    goto LABEL_71;
  }
  unint64_t v8 = v50;
  unint64_t v9 = v51;
  unint64_t v10 = (_WORD *)((v50 + 1) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (unint64_t)v10 - v50;
  if ((unint64_t)v10 < v50)
  {
    unint64_t v12 = 0;
    if (v51) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v51)
    {
LABEL_57:
      unint64_t v12 = 0;
      BOOL v34 = (unint64_t)v10 >= v8;
      unint64_t v35 = (unint64_t)v10 - v8;
      if (v34 && v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v51)
      {
        *(_WORD *)(v8 + v35) = 2870;
        unint64_t v12 = v35 + 2;
      }
      unint64_t v36 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *(void *)(v2 + 64);
      if (v36 + 16 < v33) {
        goto LABEL_63;
      }
      goto LABEL_85;
    }
    *unint64_t v10 = 1451;
    if (v9)
    {
LABEL_11:
      uint64_t v14 = *(void *)(v2 + 72);
      unint64_t v15 = (*(void *)(v2 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v16 = *(void *)(v2 + 64);
      if (v15 + 16 >= v16) {
        unint64_t v15 = 0;
      }
      if (v12 <= 0x10) {
        unint64_t v12 = 16;
      }
      unint64_t v17 = v15 + v12;
      if (v16 <= v17) {
        unint64_t v17 = 0;
      }
      *(void *)(v2 + 80) = v17;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000
        || *(_DWORD *)(v2 + 116))
      {
        if (*(unsigned char *)(v2 + 104)) {
          MEMORY[0x1997420B0](*(unsigned int *)(v2 + 92));
        }
        *(_DWORD *)(v2 + 116) = 0;
      }
      goto LABEL_71;
    }
  }
  unint64_t v33 = v52;
  if (v52)
  {
    unint64_t v8 = v50;
    unint64_t v10 = (_WORD *)((v50 + 1) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_57;
  }
  __break(1u);
LABEL_85:
  unint64_t v36 = 0;
LABEL_63:
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unint64_t v37 = v36 + v12;
  if (v33 <= v37) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  *(void *)(v2 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v2 + 72) + 16) + 128), v38);
  *(_DWORD *)(v2 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)(v2 + 8));
  unint64_t v39 = v49;
  uint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v40 = 1451;
  *((void *)v40 + 1) = v3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v53 = v40;
  IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v53, 1, 0);
  int v42 = v53;
  unint64_t v53 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v47, v48);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
LABEL_71:
  int v43 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v43 && atomic_fetch_add((atomic_uint *volatile)v43 + 7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v43 + 7);
    (*(void (**)(unsigned int *))(*(void *)v43 + 8))(v43);
  }
  unsigned int v44 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
    }
    else {
      --v44[2];
    }
  }
  uint64_t v45 = *((void *)this + 2);
  if (v45)
  {
    *(void *)(v45 + 8) = 0;
    unint64_t v46 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v46)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v46, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v7);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebGPU::RemoteXRSubImageProxy::~RemoteXRSubImageProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Adapter *a2)
{
  return *((void *)a2 + 7);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::BindGroup *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::BindGroupLayout *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Buffer *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::CommandBuffer *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::CommandEncoder *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToRawBacking(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

{
  return *(void *)(a2 + 24);
}

{
  return *(void *)(a2 + 24);
}

{
  return *(void *)(a2 + 24);
}

{
  return *(void *)(a2 + 24);
}

{
  return *(void *)(a2 + 24);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ComputePassEncoder *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Device *a2)
{
  return *((void *)a2 + 6);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ExternalTexture *a2)
{
  return *((void *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::GPU *a2)
{
  return *((void *)a2 + 11);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::PipelineLayout *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::QuerySet *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Queue *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::RenderBundleEncoder *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::RenderBundle *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::RenderPassEncoder *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Sampler *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ShaderModule *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Texture *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::TextureView *a2)
{
  return *((void *)a2 + 4);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::create@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    uint64_t v3 = bmalloc::api::isoAllocate();
    double v4 = (void *)WebCore::ImageBufferBackend::ImageBufferBackend();
    *double v4 = &unk_1EE9EBDD0;
    v4[5] = &unk_1EE9EBEC8;
    uint64_t result = WTF::MachSendRight::MachSendRight();
    *(unsigned char *)(v3 + 52) = 0;
    *a2 = v3;
  }
  else
  {
    uint64_t result = 57;
    __break(0xC471u);
  }
  return result;
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v3, (const WTF::MachSendRight *)(a1 + 48));
  WTF::MachSendRight::MachSendRight();
  *(_DWORD *)(a2 + 64) = 1;
  *(unsigned char *)(a2 + 72) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
}

void non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::takeBackendHandle(uint64_t a1@<X8>)
{
  int v2 = 0;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::MachSendRight();
  *(_DWORD *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 72) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v2);
}

void non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::takeBackendHandle(uint64_t a1@<X8>)
{
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::setBackendHandle(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 64) == 1) {
    return WTF::MachSendRight::operator=();
  }
  uint64_t result = 77;
  __break(0xC471u);
  return result;
}

uint64_t non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::setBackendHandle(uint64_t a1, uint64_t a2)
{
  return WebKit::ImageBufferRemoteIOSurfaceBackend::setBackendHandle(a1 - 40, a2);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::clearBackendHandle(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  int v1 = 0;
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1);
}

void non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::clearBackendHandle(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  int v1 = 0;
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::canMapBackingStore(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return 0;
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::context(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::bytesPerRow(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return MEMORY[0x1F4171858]((char *)this + 8);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::copyNativeImage(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::createNativeImageReference(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::getPixelBuffer(WebKit::ImageBufferRemoteIOSurfaceBackend *this, const IntRect *a2, WebCore::PixelBuffer *a3)
{
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::putPixelBuffer()
{
}

WTF::StringImpl *WebKit::ImageBufferRemoteIOSurfaceBackend::debugDescription@<X0>(uint64_t *a1@<X8>)
{
  double v6 = 0;
  unint64_t v7 = 0;
  int v8 = 0;
  char v9 = 1;
  int v10 = 0;
  __int16 v11 = 256;
  int v12 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::operator<<();
  WTF::TextStream::release(a1, (WTF::TextStream *)&v6);
  double v4 = v7;
  unint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v6;
  double v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBackend::create(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 64) == 1 && (WebCore::IOSurface::createFromSendRight(), v11))
  {
    WebCore::IOSurface::createPlatformContext(v11);
    if (cf)
    {
      bmalloc::api::isoAllocate();
      uint64_t v3 = v11;
      __int16 v11 = 0;
      char v9 = v3;
      double v4 = (void *)WebCore::ImageBufferIOSurfaceBackend::ImageBufferIOSurfaceBackend();
      *double v4 = &unk_1EE9EBF18;
      v4[11] = &unk_1EE9EBFF8;
      *a2 = v4;
      CFRelease(cf);
      WebCore::IOSurface::~IOSurface(v9);
      WTF::fastFree(v7, v8);
    }
    else
    {
      *a2 = 0;
    }
    if (v11)
    {
      WebCore::IOSurface::~IOSurface(v11);
      WTF::fastFree(v5, v6);
    }
  }
  else
  {
    *a2 = 0;
  }
}

WTF::StringImpl *WebKit::ImageBufferShareableMappedIOSurfaceBackend::debugDescription@<X0>(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  char v10 = 1;
  int v11 = 0;
  __int16 v12 = 256;
  int v13 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*((void *)this + 6)) {
    WebCore::operator<<();
  }
  else {
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::release(a2, (WTF::TextStream *)&v7);
  double v5 = v8;
  int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  unint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::create(uint64_t a1@<X0>, atomic_uint **a2@<X1>, WebCore::ImageBufferCGBackend **a3@<X8>)
{
  uint64_t v6 = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize();
  if ((int)v6 < 1 || v6 <= 0) {
    goto LABEL_17;
  }
  if ((unint64_t)*(char *)(a1 + 24) >= 4)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  WebCore::IOSurface::create();
  if (!v20)
  {
LABEL_17:
    *a3 = 0;
    return;
  }
  if (WebCore::ProcessIdentity::operator BOOL()) {
    WebCore::IOSurface::setOwnershipIdentity();
  }
  WebCore::IOSurface::createBitmapPlatformContext(v18, v20);
  if (v19)
  {
    unint64_t v7 = (CGContext *)v18[1];
    WebCore::FloatRect::operator CGRect();
    CGContextClearRect(v7, v21);
    if (v19)
    {
      int v8 = (WebCore::ImageBufferCGBackend *)bmalloc::api::isoAllocate();
      int v9 = v20;
      unint64_t v20 = 0;
      char v10 = *a2;
      uint64_t v11 = WebCore::ImageBufferBackend::ImageBufferBackend();
      *(void *)uint64_t v11 = &unk_1EE9EBB98;
      *(void *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = &unk_1EE9EBC78;
      uint64_t v12 = v18[0];
      *(void *)(v11 + 56) = v9;
      *(void *)(v11 + 64) = v12;
      v18[0] = 0;
      *(unsigned char *)(v11 + 72) = 1;
      *(unsigned char *)(v11 + 80) = 0;
      if (v10) {
        atomic_fetch_add(v10, 1u);
      }
      *((void *)v8 + 11) = v10;
      int v13 = (WebCore::GraphicsContextCG *)WTF::fastMalloc((WTF *)0x2F0);
      WebCore::GraphicsContextCG::GraphicsContextCG();
      uint64_t v14 = *((void *)v8 + 5);
      *((void *)v8 + 5) = v13;
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        int v13 = (WebCore::GraphicsContextCG *)*((void *)v8 + 5);
      }
      WebCore::ImageBufferCGBackend::applyBaseTransform(v8, v13);
      goto LABEL_14;
    }
LABEL_20:
    __break(1u);
    return;
  }
  int v8 = 0;
LABEL_14:
  *a3 = v8;
  std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  unint64_t v15 = v20;
  unint64_t v20 = 0;
  if (v15)
  {
    WebCore::IOSurface::~IOSurface(v15);
    WTF::fastFree(v16, v17);
  }
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(WebCore::IOSurface **this)
{
  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::releaseGraphicsContext((WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *)this);
  WebCore::IOSurface::moveToPool();
  int v2 = (unsigned int *)this[11];
  this[11] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(v2);
  }
  if (*((unsigned char *)this + 72)) {
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(this + 8);
  }
  std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](this + 7, 0);

  MEMORY[0x1F416FA58](this);
}

{
  bmalloc::api *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this);

  bmalloc::api::isoDeallocate(v1, v2);
}

__IOSurface **WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::releaseGraphicsContext(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  uint64_t result = (__IOSurface **)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (result) {
    uint64_t result = (__IOSurface **)(*((uint64_t (**)(__IOSurface **))*result + 1))(result);
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t result = WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker((__IOSurface **)this + 8);
    *((unsigned char *)this + 72) = 0;
  }
  return result;
}

void non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(WebCore::IOSurface **this)
{
}

{
  bmalloc::api *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6);

  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::canMapBackingStore(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  return 1;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::IOSurface::createSendRight(v3, *(WebCore::IOSurface **)(a1 + 56));
  WTF::MachSendRight::MachSendRight();
  int v4 = 1;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a2, (uint64_t)v3 + 4);
  *(unsigned char *)(a2 + 72) = 1;
  if (v4 != -1) {
    off_1EE9EC038[v4]((int)&v5, (WTF::MachSendRight *)((char *)v3 + 4));
  }
  int v4 = -1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
}

void non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::context(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  int v2 = (WebCore::GraphicsContextCG *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = WebCore::GraphicsContextCG::platformContext(v2);
    if (*((unsigned char *)this + 72)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v3 == 0;
    }
    if (v4) {
      return *((void *)this + 5);
    }
    unint64_t v7 = (CGContext *)v3;
    uint64_t v8 = *((void *)this + 7);
    if (IOSurfaceLock(*(IOSurfaceRef *)(v8 + 48), 0, 0)) {
      goto LABEL_23;
    }
    int v9 = *(void **)(v8 + 48);
    if (v9) {
      CFRetain(v9);
    }
    IOSurfaceRef buffer = (IOSurfaceRef)v9;
    unint64_t v23 = 0;
    LOBYTE(v21) = 1;
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(&v23);
    BaseAddress = IOSurfaceGetBaseAddress((IOSurfaceRef)v9);
    if (BaseAddress == CGBitmapContextGetData(v7))
    {
      if (*((unsigned char *)this + 72))
      {
        IOSurfaceRef buffer = 0;
        unint64_t v17 = (const void *)*((void *)this + 8);
        *((void *)this + 8) = v9;
        if (v17) {
          CFRelease(v17);
        }
      }
      else
      {
        *((void *)this + 8) = v9;
        IOSurfaceRef buffer = 0;
        *((unsigned char *)this + 72) = 1;
      }
      uint64_t v5 = *((void *)this + 5);
      if ((_BYTE)v21) {
        WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(&buffer);
      }
      return v5;
    }
LABEL_22:
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(&buffer);
LABEL_23:
    uint64_t v13 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    goto LABEL_25;
  }
  WebCore::IOSurface::createBitmapPlatformContext((uint64_t *)&buffer, *((WebCore::IOSurface **)this + 7));
  if (!v22)
  {
    std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buffer);
LABEL_25:
    uint64_t v14 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buffer) = 0;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "ImageBufferShareableMappedIOSurfaceBitmapBackend::context() - failed to create or update the context", (uint8_t *)&buffer, 2u);
    }
    unint64_t v15 = (WebCore::GraphicsContextCG *)WTF::fastMalloc((WTF *)0x2F0);
    WebCore::GraphicsContextCG::GraphicsContextCG();
    uint64_t v16 = *((void *)this + 5);
    *((void *)this + 5) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      unint64_t v15 = (WebCore::GraphicsContextCG *)*((void *)this + 5);
    }
    WebCore::ImageBufferCGBackend::applyBaseTransform(this, v15);
    return *((void *)this + 5);
  }
  if (*((unsigned char *)this + 72))
  {
    IOSurfaceRef v11 = buffer;
    IOSurfaceRef buffer = 0;
    uint64_t v12 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = v11;
    if (v12)
    {
      CFRelease(v12);
      if (!v22)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }
  else
  {
    *((void *)this + 8) = buffer;
    IOSurfaceRef buffer = 0;
    *((unsigned char *)this + 72) = 1;
  }
  std::make_unique[abi:sn180100]<WebCore::GraphicsContextCG,CGContext *>((uint64_t *)&v23);
  unint64_t v18 = v23;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = v23;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    unint64_t v18 = (WebCore::GraphicsContextCG *)*((void *)this + 5);
  }
  WebCore::ImageBufferCGBackend::applyBaseTransform(this, v18);
  uint64_t v5 = *((void *)this + 5);
  std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buffer);
  return v5;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::bytesPerRow(WebCore::IOSurface **this)
{
  return WebCore::IOSurface::bytesPerRow(this[7]);
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::copyNativeImage(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createNativeImageReference(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::sinkIntoNativeImage(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::isInUse(WebCore::IOSurface **this)
{
  return WebCore::IOSurface::isInUse(this[7]);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::setVolatile(WebCore::IOSurface **this)
{
  int v2 = WebCore::IOSurface::isInUse(this[7]);
  if ((v2 & 1) == 0)
  {
    *((unsigned char *)this + 80) = 1;
    WebCore::IOSurface::setVolatile(this[7]);
  }
  return v2 ^ 1u;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::setVolatilityState(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = a2;
  return result;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::setNonVolatile(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  *((unsigned char *)this + 80) = 0;
  return WebCore::IOSurface::setVolatile(*((WebCore::IOSurface **)this + 7));
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::volatilityState(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  return *((unsigned __int8 *)this + 80);
}

__IOSurface **WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::flushContext(__IOSurface **this)
{
  if (*((unsigned char *)this + 72))
  {
    int v1 = this;
    this = WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(this + 8);
    *((unsigned char *)v1 + 72) = 0;
  }
  return this;
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::~ImageBufferRemoteIOSurfaceBackend(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 48));

  WebCore::ImageBufferBackend::~ImageBufferBackend(this);
}

{
  bmalloc::api *v2;
  void *v3;
  uint64_t vars8;

  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 48));
  WebCore::ImageBufferBackend::~ImageBufferBackend(this);

  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::volatilityState(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::setVolatilityState(uint64_t result, char a2)
{
  *(unsigned char *)(result + 52) = a2;
  return result;
}

void WebCore::ImageBufferBackend::createFlusher(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::toBackendSharing(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return (uint64_t)this + 40;
}

void non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::~ImageBufferRemoteIOSurfaceBackend(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  int v1 = (WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this - 40);
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 8));

  WebCore::ImageBufferBackend::~ImageBufferBackend(v1);
}

{
  WebCore::ImageBufferBackend *v1;
  bmalloc::api *v2;
  void *v3;
  uint64_t vars8;

  int v1 = (WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this - 40);
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 8));
  WebCore::ImageBufferBackend::~ImageBufferBackend(v1);

  bmalloc::api::isoDeallocate(v2, v3);
}

void WebKit::ImageBufferBackendHandleSharing::bitmap(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBackend::~ImageBufferShareableMappedIOSurfaceBackend(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(this);

  bmalloc::api::isoDeallocate(v1, v2);
}

void non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBackend::~ImageBufferShareableMappedIOSurfaceBackend(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
}

{
  bmalloc::api *v1;
  void *v2;
  uint64_t vars8;

  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend((WebKit::ImageBufferShareableMappedIOSurfaceBackend *)((char *)this - 88));

  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::toBackendSharing(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  return (uint64_t)this + 48;
}

uint64_t std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    int v2 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker((__IOSurface **)a1);
  }
  return a1;
}

__IOSurface **WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(__IOSurface **a1)
{
  int v2 = *a1;
  if (v2)
  {
    IOSurfaceUnlock(v2, 0, 0);
    BOOL v4 = *a1;
    *a1 = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::GraphicsContextCG,CGContext *>(uint64_t *a1)
{
  WTF::fastMalloc((WTF *)0x2F0);
  uint64_t result = WebCore::GraphicsContextCG::GraphicsContextCG();
  *a1 = result;
  return result;
}

unsigned char *WebKit::AudioTrackPrivateRemote::updateConfiguration(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (WTF::StringImpl *)*a2;
  if (*a2 != *(void *)(a1 + 112))
  {
    *(void *)(a1 + 112) = v5;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9ECDE8;
    v6[1] = v5;
    uint64_t v19 = v6;
    WebCore::TrackPrivateBase::notifyClients();
    if (v19) {
      (*(void (**)(void *))(*v19 + 8))(v19);
    }
  }
  uint64_t v7 = a1 + 120;
  if ((WTF::equal((WTF *)a2[1], *(const WTF::StringImpl **)(a1 + 120), a3) & 1) == 0)
  {
    if (*(void *)v7)
    {
      int v9 = *(_DWORD *)(*(void *)v7 + 4);
      WTF::String::operator=((uint64_t *)(a1 + 120), (WTF::StringImpl **)a2 + 1);
      if (v9)
      {
        WTF::String::isolatedCopy();
        char v10 = (void *)WTF::fastMalloc((WTF *)0x10);
        *char v10 = &unk_1EE9ECE10;
        v10[1] = v23;
        unint64_t v20 = v10;
        WebCore::TrackPrivateBase::notifyClients();
        if (v20) {
          (*(void (**)(void *))(*v20 + 8))(v20);
        }
        unint64_t v23 = 0;
      }
    }
    else
    {
      WTF::String::operator=((uint64_t *)(a1 + 120), (WTF::StringImpl **)a2 + 1);
    }
  }
  uint64_t v11 = a1 + 128;
  if ((WTF::equal((WTF *)a2[2], *(const WTF::StringImpl **)(a1 + 128), v8) & 1) == 0)
  {
    if (*(void *)v11)
    {
      int v13 = *(_DWORD *)(*(void *)v11 + 4);
      WTF::String::operator=((uint64_t *)(a1 + 128), (WTF::StringImpl **)a2 + 2);
      if (v13)
      {
        WTF::String::isolatedCopy();
        uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v14 = &unk_1EE9ECE38;
        v14[1] = v23;
        uint64_t v21 = v14;
        WebCore::TrackPrivateBase::notifyClients();
        if (v21) {
          (*(void (**)(void *))(*v21 + 8))(v21);
        }
      }
    }
    else
    {
      WTF::String::operator=((uint64_t *)(a1 + 128), (WTF::StringImpl **)a2 + 2);
    }
  }
  *(_DWORD *)(a1 + 13WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *((_DWORD *)a2 + 10);
  uint64_t v15 = a2[3];
  *(void *)(a1 + 149) = *(uint64_t *)((char *)a2 + 29);
  *(void *)(a1 + 144) = v15;
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 45);
  if ((WebCore::operator==((uint64_t)(a2 + 6), a1 + 56, v12) & 1) == 0)
  {
    WTF::String::operator=((uint64_t *)(a1 + 56), a2 + 6);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 7);
    uint64_t v16 = *(_DWORD **)(a1 + 56);
    if (v16) {
      *v16 += 2;
    }
    long long v22 = *(_OWORD *)(a1 + 64);
    uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v17 = &unk_1EE9ECCE8;
    *(void *)(v17 + 8) = v16;
    *(_OWORD *)(v17 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v22;
    unint64_t v24 = (WTF::StringImpl *)v17;
    WebCore::TrackPrivateBase::notifyClients();
    if (v24) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v24 + 8))(v24);
    }
  }
  return WebCore::AudioTrackPrivate::setEnabled((unsigned char *)a1, *((unsigned __int8 *)a2 + 44));
}

atomic_uchar *WebKit::AudioTrackPrivateRemote::setEnabled(WebKit::AudioTrackPrivateRemote *this, int a2)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 11);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 12), &v16);
    if (v16)
    {
      if ((*((unsigned char *)this + 48) != 0) != a2)
      {
        uint64_t v5 = *(void *)(v16 + 32);
        uint64_t v14 = *((void *)this + 14);
        char v15 = a2;
        uint64_t v6 = *((void *)this + 20);
        uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v7 = 1147;
        *((void *)v7 + 1) = v6;
        *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
        *((void *)v7 + 67) = 512;
        *((void *)v7 + 68) = 0;
        *((void *)v7 + 70) = 0;
        *((void *)v7 + 69) = 0;
        IPC::Encoder::encodeHeader(v7);
        uint64_t v17 = v7;
        IPC::ArgumentCoder<std::tuple<unsigned long long,BOOL>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,BOOL>,0ul,1ul>(v7, &v14);
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v17, 0, 0);
        int v9 = v17;
        uint64_t v17 = 0;
        if (v9)
        {
          IPC::Encoder::~Encoder(v9, v8);
          WTF::fastFree(v12, v13);
        }
      }
      uint64_t result = WebCore::AudioTrackPrivate::setEnabled(this, a2);
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      if (v11) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v10);
      }
    }
  }
  return result;
}

unsigned char *WebCore::AudioTrackPrivate::setEnabled(unsigned char *this, int a2)
{
  if (this[48] != a2)
  {
    char v2 = a2;
    uint64_t v3 = this;
    this[48] = a2;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v4 = &unk_1EE9ECCC0;
    *(unsigned char *)(v4 + 8) = v2;
    uint64_t v5 = v4;
    WebCore::TrackPrivateBase::notifyClients();
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    this = (unsigned char *)*((void *)v3 + 10);
    if (this) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *, unsigned char *, void))(*(void *)this + 16))(this, v3, v3[48]);
    }
  }
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::currentTimeWithLockHeld(WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator *this)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 1);
  if ((v2 & 1) == 0) {
    return *((void *)this + 1);
  }
  double v4 = *((double *)this + 4);
  uint64_t v5 = (WTF::MediaTime *)WTF::MonotonicTime::now(this);
  uint64_t v16 = WTF::MediaTime::createWithDouble(v5, v4 * (v6 - *((double *)this + 3)));
  uint64_t v17 = v7;
  v18[0] = (WTF::MediaTime *)WTF::MediaTime::operator+();
  v18[1] = v8;
  int v9 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v18[0]);
  char v10 = (const WTF::MediaTime *)v18;
  if (WTF::MediaTime::compare((WTF::MediaTime *)v18, v9) == -1) {
    char v10 = v9;
  }
  uint64_t v11 = (void *)*((void *)this + 5);
  uint64_t v12 = (WebCore::MediaSourcePrivate *)v11[59];
  if (v12)
  {
    uint64_t v13 = WebCore::MediaSourcePrivate::duration(v12);
  }
  else
  {
    uint64_t v13 = v11[27];
    uint64_t v14 = v11[28];
  }
  uint64_t v16 = v13;
  uint64_t v17 = v14;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v16, v10) == -1) {
    char v15 = &v16;
  }
  else {
    char v15 = (uint64_t *)v10;
  }
  return *v15;
}

uint64_t WebKit::MediaPlayerPrivateRemote::duration(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 v2 = (WebCore::MediaSourcePrivate *)*((void *)this + 59);
  if (v2) {
    return WebCore::MediaSourcePrivate::duration(v2);
  }
  else {
    return *((void *)this + 27);
  }
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime(atomic_uchar *this, uint64_t *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v6 = *a2;
  *(void *)(v3 + 13) = *(uint64_t *)((char *)a2 + 5);
  *((void *)v3 + 1) = v6;
  *((void *)v3 + 3) = a2[3];
  atomic_store(*((unsigned char *)a2 + 16), (unsigned __int8 *)v3 + 1);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return this;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setRate(atomic_uchar *this, double a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  *((double *)v3 + 4) = a2;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::MediaPlayerPrivateRemote(uint64_t a1, WebCore::MediaPlayer *a2, char a3, uint64_t a4, uint64_t a5)
{
  WebCore::MediaPlayerPrivateInterface::MediaPlayerPrivateInterface((WebCore::MediaPlayerPrivateInterface *)a1);
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1994F5F10;
  *(void *)(v10 + 24) = a1;
  *(void *)a1 = &unk_1EE9EC100;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = &unk_1EE9EC638;
  *(_WORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 10000000;
  *(unsigned char *)(a1 + 84) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_1994F5D90;
  *(void *)(a1 + 104) = a1;
  uint64_t v11 = WebCore::MediaPlayer::mediaPlayerLogger(a2);
  atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 120) = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 664))();
  uint64_t v12 = *(atomic_uchar **)a2;
  if (*(void *)a2) {
    uint64_t v12 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v12);
  }
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 13WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a2;
  WebCore::MediaPlayer::createResourceLoader(a2);
  uint64_t v13 = *(const WTF::Logger **)(a1 + 112);
  uint64_t v14 = *(const void **)(a1 + 120);
  char v15 = (WebCore::VideoLayerManagerObjC *)WTF::fastMalloc((WTF *)0x50);
  *(void *)(a1 + 152) = WebCore::VideoLayerManagerObjC::VideoLayerManagerObjC(v15, v13, v14);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a5;
  *(unsigned char *)(a1 + 17WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a3;
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 10000000;
  *(unsigned char *)(a1 + 228) = 1;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 10000000;
  *(unsigned char *)(a1 + 244) = 1;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 25WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 10000000;
  *(unsigned char *)(a1 + 260) = 1;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 10000000;
  *(unsigned char *)(a1 + 27WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 10000000;
  *(unsigned char *)(a1 + 292) = 1;
  *(unsigned char *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 33WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(unsigned char *)(a1 + 338) = 0;
  *(void *)(a1 + 340) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 29WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
  *(_OWORD *)(a1 + 377) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 432) = 257;
  *(unsigned char *)(a1 + 434) = 1;
  *(_DWORD *)(a1 + 435) = 0;
  *(_DWORD *)(a1 + 438) = 0;
  WebCore::PlatformTimeRanges::PlatformTimeRanges((WebCore::PlatformTimeRanges *)(a1 + 448));
  *(unsigned char *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 1065353216;
  *(_OWORD *)(a1 + 53WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 1065353216;
  *(_OWORD *)(a1 + 57WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 1065353216;
  WebCore::MediaPlayer::documentSecurityOrigin(a2);
  *(void *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 65WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
  *(_OWORD *)(a1 + 664) = 0u;
  *(unsigned char *)(a1 + 680) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(unsigned char *)(a1 + 760) = 0;
  *(unsigned char *)(a1 + 85WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(unsigned char *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 688) = _Q0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 73WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  uint64_t v21 = *(void *)(a1 + 112);
  uint64_t v22 = *(void *)(a1 + 120);
  v24[0] = "MediaPlayerPrivateRemote";
  v24[1] = 25;
  void v24[2] = "MediaPlayerPrivateRemote";
  v24[3] = v22;
  if (*(unsigned char *)(v21 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  }
  return a1;
}

uint64_t WebKit::MediaPlayerPrivateRemote::logger(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 14);
}

uint64_t WebKit::MediaPlayerPrivateRemote::logIdentifier(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 15);
}

char *WebKit::MediaPlayerPrivateRemote::logChannel(WebKit::MediaPlayerPrivateRemote *this)
{
  return &WebKit2LogMedia;
}

const char *WebKit::MediaPlayerPrivateRemote::logClassName(WebKit::MediaPlayerPrivateRemote *this)
{
  return "MediaPlayerPrivateRemote";
}

void WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = *((void *)this + 15);
  unint64_t v53 = "MediaPlayerPrivateRemote";
  uint64_t v54 = 25;
  unint64_t v55 = "~MediaPlayerPrivateRemote";
  uint64_t v56 = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v53);
  }
  (*(void (**)(void))(**((void **)this + 19) + 32))(*((void *)this + 19));
  WebKit::RemoteMediaPlayerManager::deleteRemoteMediaPlayer(*((uint64_t **)this + 21), *((void *)this + 23));
  int v5 = (WebKit::RemoteAudioSourceProvider *)*((void *)this + 58);
  if (v5) {
    WebKit::RemoteAudioSourceProvider::close(v5);
  }
  unint64_t v53 = (const char *)*((void *)this + 92);
  uint64_t v54 = *((void *)this + 93);
  v52[0] = 0;
  *((void *)this + 92) = 0;
  v52[1] = 0;
  *((void *)this + 93) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v4);
  if (HIDWORD(v54))
  {
    uint64_t v7 = v53;
    uint64_t v8 = 8 * HIDWORD(v54);
    do
    {
      uint64_t v9 = *(void *)v7;
      *(void *)uint64_t v7 = 0;
      v7 += 8;
      (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      v8 -= 8;
    }
    while (v8);
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v6);
  uint64_t v10 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  uint64_t v11 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v11 = &unk_1EE9ECE88;
  *((void *)v11 + 1) = v10;
  unint64_t v53 = v11;
  WTF::ensureOnMainThread();
  uint64_t v13 = v53;
  unint64_t v53 = 0;
  if (v13) {
    (*(void (**)(const char *))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 110);
  *((void *)this + 110) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  char v15 = (WTF::StringImpl *)*((void *)this + 109);
  *((void *)this + 109) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 736, v12);
  uint64_t v17 = (unsigned int *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17 + 2);
    (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
  }
  unint64_t v18 = (unsigned int *)*((void *)this + 90);
  *((void *)this + 90) = 0;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18 + 2);
    (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 81);
  if (!v19) {
    goto LABEL_35;
  }
  uint64_t v20 = *(unsigned int *)(v19 - 4);
  if (!v20) {
    goto LABEL_34;
  }
  uint64_t v21 = *((void *)this + 81);
  while (1)
  {
    uint64_t v22 = *(unsigned int *)(v21 + 24);
    if (v22) {
      break;
    }
    if (*(void *)v21 != -1) {
      goto LABEL_29;
    }
LABEL_30:
    v21 += 40;
    if (!--v20) {
      goto LABEL_34;
    }
  }
  if (v22 == 1)
  {
LABEL_29:
    ((void (*)(const char **, uint64_t))off_1EE9ECD00[v22])(&v53, v21);
    *(_DWORD *)(v21 + 24) = -1;
    goto LABEL_30;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_34:
  WTF::fastFree((WTF *)(v19 - 16), v16);
LABEL_35:
  uint64_t v23 = *((unsigned int *)this + 160);
  if (v23 != -1) {
    ((void (*)(const char **, char *))off_1EE9ECD00[v23])(&v53, (char *)this + 616);
  }
  *((_DWORD *)this + 160) = -1;
  unint64_t v24 = (WTF *)*((void *)this + 74);
  while (v24)
  {
    unint64_t v25 = v24;
    unint64_t v24 = *(WTF **)v24;
    unint64_t v26 = (unsigned int *)*((void *)v25 + 3);
    *((void *)v25 + 3) = 0;
    if (v26 && atomic_fetch_add((atomic_uint *volatile)v26 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v26 + 2);
      (*(void (**)(unsigned int *))(*(void *)v26 + 8))(v26);
    }
    WTF::fastFree(v25, v16);
  }
  unint64_t v27 = (WTF *)*((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v27) {
    WTF::fastFree(v27, v16);
  }
  unint64_t v28 = (WTF *)*((void *)this + 69);
  while (v28)
  {
    unint64_t v29 = v28;
    unint64_t v28 = *(WTF **)v28;
    int v30 = (unsigned int *)*((void *)v29 + 3);
    *((void *)v29 + 3) = 0;
    if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
    }
    WTF::fastFree(v29, v16);
  }
  unsigned int v31 = (WTF *)*((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v31) {
    WTF::fastFree(v31, v16);
  }
  unsigned int v32 = (WTF *)*((void *)this + 64);
  while (v32)
  {
    unint64_t v33 = v32;
    unsigned int v32 = *(WTF **)v32;
    BOOL v34 = (unsigned int *)*((void *)v33 + 3);
    *((void *)v33 + 3) = 0;
    if (v34 && atomic_fetch_add((atomic_uint *volatile)v34 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(void *)v34 + 8))(v34);
    }
    WTF::fastFree(v33, v16);
  }
  unint64_t v35 = (WTF *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v35) {
    WTF::fastFree(v35, v16);
  }
  uint64_t v36 = *((void *)this + 61);
  if (v36) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v36, v16);
  }
  uint64_t v37 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v37) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v37 + 8), v16);
  }
  uint64_t v38 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v38) {
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v38 + 8));
  }
  unint64_t v39 = (WTF *)*((void *)this + 56);
  if (v39)
  {
    *((void *)this + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v39, v16);
  }
  if (*((unsigned char *)this + 328))
  {
    uint64_t v40 = (WTF *)*((void *)this + 39);
    if (v40)
    {
      *((void *)this + 39) = 0;
      *((_DWORD *)this + 80) = 0;
      WTF::fastFree(v40, v16);
    }
  }
  unint64_t v41 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  int v42 = (WTF::StringImpl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  int v43 = (WTF::StringImpl *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v16);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  unsigned int v44 = (const void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v44) {
    CFRelease(v44);
  }
  uint64_t v45 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v46)
  {
    unsigned __int8 v47 = (unsigned int *)(v46 + 8);
    if (atomic_fetch_add((atomic_uint *volatile)(v46 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v47);
      unint64_t v50 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(void *)unint64_t v50 = &unk_1EE9ECE60;
      *((void *)v50 + 1) = v47;
      unint64_t v53 = v50;
      WTF::ensureOnMainThread();
      unint64_t v51 = v53;
      unint64_t v53 = 0;
      if (v51) {
        (*(void (**)(const char *))(*(void *)v51 + 8))(v51);
      }
    }
  }
  uint64_t v48 = (atomic_uchar *)*((void *)this + 16);
  *((void *)this + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v48) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v48, v16);
  }
  unsigned __int8 v49 = (unsigned int *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v49 && atomic_fetch_add((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v49 + 2);
    (*(void (**)(unsigned int *))(*(void *)v49 + 8))(v49);
  }
  WebCore::MediaPlayerPrivateInterface::~MediaPlayerPrivateInterface(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(WebKit::MediaPlayerPrivateRemote *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote((WebKit::MediaPlayerPrivateRemote *)((char *)this - 56));

  WTF::fastFree(v1, v2);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::prepareForPlayback(uint64_t a1, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v32);
    if (v32)
    {
      float v13 = (*(float (**)(void))(**(void **)(*(void *)(v32 + 8) + 8) + 280))(*(void *)(*(void *)(v32 + 8) + 8));
      char v14 = *(unsigned char *)(v32 + 233);
      uint64_t v31 = *(void *)(v32 + 200);
      char v15 = *(unsigned char *)(v32 + 234);
      uint64_t v16 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                      + 32);
      uint64_t v17 = *(void *)(a1 + 184);
      unint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v18 = 1167;
      *((void *)v18 + 1) = v17;
      *((void *)v18 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v18 + 16;
      *((void *)v18 + 67) = 512;
      *((void *)v18 + 68) = 0;
      *((void *)v18 + 70) = 0;
      *((void *)v18 + 69) = 0;
      IPC::Encoder::encodeHeader(v18);
      unint64_t v33 = v18;
      uint64_t v19 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
      if (!v20) {
        goto LABEL_15;
      }
      *uint64_t v19 = a2;
      IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(v18, a3);
      uint64_t v21 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1990F1F1CLL);
      }
      *uint64_t v21 = a4;
      IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(v18, v15);
      uint64_t v23 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1990F1F3CLL);
      }
      *uint64_t v23 = a5;
      unint64_t v25 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
      if (!v26)
      {
LABEL_15:
        __break(0xC471u);
        JUMPOUT(0x1990F1EFCLL);
      }
      unsigned char *v25 = a6;
      IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v18, (int *)&v31);
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v18, v13);
      IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(v18, v14);
      IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v33, 0, 0);
      uint64_t result = (atomic_uchar *)v33;
      unint64_t v33 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v27);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v29, v30);
      }
      unint64_t v28 = (atomic_uchar **)v32;
      uint64_t v32 = 0;
      if (v28) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v28);
      }
    }
  }
  return result;
}

void WebKit::MediaPlayerPrivateRemote::load(WebKit::MediaPlayerPrivateRemote *this, const WTF::URL *a2, const WebCore::ContentType *a3, const WTF::String *a4)
{
  LOBYTE(v38) = 0;
  char v39 = 0;
  if (!WTF::URL::protocolIs()) {
    goto LABEL_24;
  }
  uint64_t v37 = 0;
  WTF::URL::fileSystemPath((uint64_t *)&v36, a2);
  uint64_t v8 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this + 21));
  if (WebKit::GPUProcessConnection::waitForDidInitialize((WebKit::GPUProcessConnection *)v8)
    && *(unsigned char *)(v8 + 112))
  {
    if (v36)
    {
      uint64_t v9 = (WebKit::SandboxExtensionImpl *)*((void *)v36 + 1);
      unint64_t v10 = *((unsigned int *)v36 + 1) | ((unint64_t)((*((_DWORD *)v36 + 4) >> 2) & 1) << 32);
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0x100000000;
    }
    v40[0] = *(unsigned char *)(v8 + 80);
    *(_OWORD *)&v40[1] = *(_OWORD *)(v8 + 81);
    *(_OWORD *)&v40[16] = *(_OWORD *)(v8 + 96);
    WebKit::SandboxExtension::createHandleForReadByAuditToken(v9, (WebKit::SandboxExtensionImpl *)v10, v40, (uint64_t)&v41);
  }
  else
  {
    WebKit::SandboxExtension::createHandle(0, (uint64_t)&v41);
  }
  if (v42)
  {
    uint64_t v11 = v41;
    unint64_t v41 = 0;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v41);
    uint64_t v37 = 0;
    if (v39)
    {
      float v13 = (const char **)v38;
      uint64_t v38 = v11;
      if (v13)
      {
        WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v13);
        WTF::fastFree(v34, v35);
      }
      int v14 = 1;
    }
    else
    {
      uint64_t v38 = v11;
      int v14 = 1;
      char v39 = 1;
    }
  }
  else
  {
    WTFLogAlways();
    *((unsigned char *)this + 33WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 4;
    char v15 = (atomic_uchar *)*((void *)this + 16);
    if (v15)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v15, *((void *)this + 17), v40);
      if (*(void *)v40)
      {
        WebCore::MediaPlayer::networkStateChanged(*(WebCore::MediaPlayer **)v40);
        uint64_t v16 = *(atomic_uchar ***)v40;
        *(void *)uint64_t v40 = 0;
        if (v16) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v16);
        }
      }
    }
    int v14 = 0;
  }
  uint64_t v17 = v36;
  uint64_t v36 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v37);
  if (v14)
  {
LABEL_24:
    unint64_t v18 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                                        + 21))
                               + 32);
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*((atomic_uchar **)this + 16), *((void *)this + 17), &v37);
    char v19 = *((unsigned char *)v37 + 266);
    uint64_t v20 = (atomic_uchar *)*((void *)this + 6);
    if (v20) {
      uint64_t v21 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *((void *)this + 23);
    uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v23 = &unk_1EE9ECEB0;
    v23[1] = v21;
    v23[2] = this;
    v23[3] = this;
    uint64_t v24 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    unint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v25 = 1157;
    *((void *)v25 + 1) = v22;
    *((void *)v25 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    unint64_t v41 = v25;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
    IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(v25, (uint64_t)&v38);
    IPC::ArgumentCoder<WebCore::ContentType,void>::encode(v25, (uint64_t)a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a4);
    uint64_t v26 = (unsigned char *)IPC::Encoder::grow(v25, 1uLL, 1);
    if (!v27)
    {
      __break(0xC471u);
      return;
    }
    unsigned char *v26 = v19;
    *(void *)uint64_t v40 = v23;
    *(void *)&v40[8] = v24;
    IPC::Connection::sendMessageWithAsyncReply(v18, &v41, (uint64_t *)v40, 0, 0);
    uint64_t v29 = *(void *)v40;
    *(void *)uint64_t v40 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    int v30 = v41;
    unint64_t v41 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v28);
      WTF::fastFree(v32, v33);
    }
    uint64_t v31 = (atomic_uchar **)v37;
    uint64_t v37 = 0;
    if (v31) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v31);
    }
  }
  if (v39) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v38);
  }
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::cancelLoad(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 1149;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::prepareToPlay(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 1169;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::play(WebKit::MediaPlayerPrivateRemote *this)
{
  *((unsigned char *)this + 434) = 0;
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 32);
  uint64_t v3 = *((void *)this + 23);
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 1164;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::pause(atomic_uchar *this)
{
  int v1 = (WebKit::MediaPlayerPrivateRemote *)this;
  char v2 = 0;
  this[434] = 1;
  uint64_t v3 = this + 64;
  atomic_compare_exchange_strong_explicit(this + 64, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this + 64);
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)v1 + 65);
  if (v4)
  {
    int v5 = (WTF::MediaTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    double v7 = v6;
    v19[0] = (IPC::Encoder *)WTF::MediaTime::createWithDouble(v5, *((double *)v1 + 12) * (v6 - *((double *)v1 + 11)));
    v19[1] = v8;
    *((void *)v1 + 9) = WTF::MediaTime::operator+();
    *((_DWORD *)v1 + 20) = v9;
    *((unsigned char *)v1 + 84) = v10;
    *((double *)v1 + 11) = v7;
    atomic_store(0, (unsigned __int8 *)v1 + 65);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  uint64_t v12 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v1 + 21))
                  + 32);
  uint64_t v13 = *((void *)v1 + 23);
  int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v14 = 1161;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  v19[0] = v14;
  IPC::Connection::sendMessageImpl(v12, (uint64_t *)v19, 0, 0);
  uint64_t result = v19[0];
  v19[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPreservesPitch(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  int v5 = this[23];
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1180;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPitchCorrectionAlgorithm(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v5 = *(void *)(a1 + 184);
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1176;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setVolumeDouble(WebKit::RemoteMediaPlayerManager **this, double a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v5 = this[23];
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1194;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setMuted(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  uint64_t v5 = this[23];
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1174;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPreload(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v5 = *(void *)(a1 + 184);
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1178;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPrivateBrowsingMode(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  uint64_t v5 = this[23];
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1181;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::currentTime(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 64;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 64, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 64);
  }
  WebKit::MediaPlayerPrivateRemote::currentTimeWithLockHeld((WebKit::MediaPlayerPrivateRemote *)this);
  uint64_t v6 = v5;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v6;
}

double WebKit::MediaPlayerPrivateRemote::currentTimeWithLockHeld(WebKit::MediaPlayerPrivateRemote *this)
{
  if (!*((void *)this + 59) || (unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 65), (v2 & 1) == 0))
  {
    WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::currentTimeWithLockHeld((WebKit::MediaPlayerPrivateRemote *)((char *)this + 64));
    return result;
  }
  if (WebCore::MediaSourcePrivate::hasBufferedData(*((WebCore::MediaSourcePrivate **)this + 59)))
  {
    v34[0] = WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::currentTimeWithLockHeld((WebKit::MediaPlayerPrivateRemote *)((char *)this + 64));
    v34[1] = v4;
    uint64_t v5 = (WebCore::MediaSourcePrivate *)*((void *)this + 59);
    if (v5)
    {
      uint64_t v6 = WebCore::MediaSourcePrivate::duration(v5);
    }
    else
    {
      uint64_t v6 = *((void *)this + 27);
      uint64_t v7 = *((void *)this + 28);
    }
    uint64_t v32 = (WTF *)v6;
    uint64_t v33 = v7;
    if ((WTF::MediaTime::compare((WTF::MediaTime *)v34, (const WTF::MediaTime *)&v32) & 0x80000000) == 0)
    {
      uint64_t v8 = (WebCore::MediaSourcePrivate *)*((void *)this + 59);
      if (v8) {
        WebCore::MediaSourcePrivate::duration(v8);
      }
      return result;
    }
    WebCore::MediaSourcePrivate::buffered((uint64_t *)&v32, *((WebCore::MediaSourcePrivate **)this + 59));
    v31.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
    v31.i64[1] = v9;
    if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)v34) < 1)
    {
      v31.i64[0] = WebCore::PlatformTimeRanges::maximumBufferedTime((WebCore::PlatformTimeRanges *)&v32);
      v31.i64[1] = v19;
      if ((int)WTF::MediaTime::compare((WTF::MediaTime *)v34, (const WTF::MediaTime *)&v31) <= 0)
      {
LABEL_28:
        double result = *(double *)v34;
LABEL_29:
        uint64_t v24 = v32;
        if (v32)
        {
          uint64_t v32 = 0;
          LODWORD(v33) = 0;
          double v25 = result;
          WTF::fastFree(v24, v13);
          return v25;
        }
        return result;
      }
      uint64_t v20 = WebCore::PlatformTimeRanges::maximumBufferedTime((WebCore::PlatformTimeRanges *)&v32);
    }
    else
    {
      if (HIDWORD(v33))
      {
        unsigned int v10 = 0;
        while (1)
        {
          v31.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
          v31.i64[1] = v11;
          if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)v34) <= 0)
          {
            v30.i64[0] = WebCore::PlatformTimeRanges::end((WebCore::PlatformTimeRanges *)&v32);
            v30.i64[1] = v12;
            if ((int)WTF::MediaTime::compare((WTF::MediaTime *)v34, (const WTF::MediaTime *)&v30) <= 0) {
              goto LABEL_28;
            }
          }
          if (v10 < HIDWORD(v33) - 1)
          {
            v30.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
            v30.i64[1] = v14;
            uint64_t v28 = WebCore::PlatformTimeRanges::end((WebCore::PlatformTimeRanges *)&v32);
            uint64_t v29 = v15;
            v31.i64[0] = WTF::MediaTime::operator-();
            v31.i64[1] = v16;
            long long v27 = *(_OWORD *)(*((void *)this + 59) + 128);
            if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v27) <= 0)
            {
              v26[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
              v26[1] = v17;
              if ((WTF::MediaTime::compare((WTF::MediaTime *)v26, (const WTF::MediaTime *)v34) & 0x80000000) == 0) {
                goto LABEL_28;
              }
            }
          }
          v31.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
          v31.i64[1] = v18;
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)v34) != 1
            && ++v10 < HIDWORD(v33))
          {
            continue;
          }
          break;
        }
      }
      uint64_t v20 = WebCore::PlatformTimeRanges::end((WebCore::PlatformTimeRanges *)&v32);
    }
    v31.i64[0] = v20;
    v31.i32[2] = v21;
    v31.i8[12] = BYTE4(v21);
    int8x16_t v30 = *(int8x16_t *)((char *)this + 72);
    int32x2_t v22 = vdup_n_s32(WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30) == -1);
    v23.i64[0] = v22.u32[0];
    v23.i64[1] = v22.u32[1];
    *(void *)&double result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v23, 0x3FuLL)), v30, v31).u64[0];
    goto LABEL_29;
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::timeIsProgressing(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 65);
  return v1 & 1;
}

uint64_t WebKit::MediaPlayerPrivateRemote::willSeekToTarget(uint64_t this, const WTF::MediaTime *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(this + 64);
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 64), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = MEMORY[0x19972E8D0](this + 64);
  }
  uint64_t v7 = *(void *)a2;
  *(void *)(v3 + 37) = *(void *)((char *)a2 + 5);
  *(void *)(v3 + 32) = v7;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::pendingSeekTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *(void *)WTF::MediaTime::invalidTime(this);
}

uint64_t WebKit::MediaPlayerPrivateRemote::currentOrPendingSeekTime(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 64;
  atomic_compare_exchange_strong_explicit(this + 64, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 64);
  }
  if ((*((void *)this + 5) & 0x100000000) != 0)
  {
    uint64_t v5 = *((void *)this + 4);
  }
  else
  {
    WebKit::MediaPlayerPrivateRemote::currentTimeWithLockHeld((WebKit::MediaPlayerPrivateRemote *)this);
    uint64_t v5 = v4;
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::seekToTarget(WebKit::MediaPlayerPrivateRemote *this, const WebCore::SeekTarget *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 14);
  uint64_t v5 = *((void *)this + 15);
  *(void *)&long long v14 = "MediaPlayerPrivateRemote";
  *((void *)&v14 + 1) = 25;
  uint64_t v15 = "seekToTarget";
  uint64_t v16 = v5;
  if (*(unsigned char *)(v4 + 12)) {
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v14, a2);
  }
  atomic_store(1u, (unsigned __int8 *)v3 + 713);
  *(void *)&long long v14 = *(void *)a2;
  *(void *)((char *)&v14 + 5) = *(void *)((char *)a2 + 5);
  LOBYTE(v15) = 0;
  WTF::MonotonicTime::now(this);
  uint64_t v16 = v6;
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((atomic_uchar *)v3 + 64, (uint64_t *)&v14);
  uint64_t v7 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v3 + 21))
                 + 32);
  uint64_t v8 = *((void *)v3 + 23);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1171;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  *(void *)&long long v14 = v9;
  IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode(v9, (uint64_t)a2);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
  double result = (IPC::Encoder *)v14;
  *(void *)&long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::didLoadingProgress(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::didLoadingProgressAsync(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                            + 32);
  uint64_t v5 = *(void *)(a1 + 184);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9ECED8;
  v7[1] = v6;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1153;
  *((void *)v9 + 1) = v5;
  *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  v15[1] = v8;
  uint64_t v16 = v9;
  v15[0] = (uint64_t)v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v16, v15, 0, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  double result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasVideo(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 437);
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasAudio(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 436);
}

uint64_t WebKit::MediaPlayerPrivateRemote::buffered(WebKit::MediaPlayerPrivateRemote *this)
{
  return (uint64_t)this + 448;
}

uint64_t WebKit::MediaPlayerPrivateRemote::movieLoadType(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 337);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::networkStateChanged(uint64_t a1, uint64_t *a2)
{
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  double result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v5);
    double result = (atomic_uchar *)v5;
    if (v5)
    {
      double result = (atomic_uchar *)WebCore::MediaPlayer::networkStateChanged(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WebKit::MediaPlayerPrivateRemote::updateCachedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 221) = *(uint64_t *)((char *)a2 + 5);
  *(void *)(a1 + 21WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v4;
  uint64_t v5 = a2[2];
  *(void *)(a1 + 237) = *(uint64_t *)((char *)a2 + 21);
  *(void *)(a1 + 232) = v5;
  uint64_t v6 = a2[4];
  *(void *)(a1 + 253) = *(uint64_t *)((char *)a2 + 37);
  *(void *)(a1 + 248) = v6;
  *(unsigned char *)(a1 + 33WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *((unsigned char *)a2 + 120);
  *(unsigned char *)(a1 + 434) = *((unsigned char *)a2 + 218);
  float v7 = *((float *)a2 + 31);
  float v8 = *((float *)a2 + 32);
  if (*(float *)(a1 + 340) != v7 || *(float *)(a1 + 344) != v8) {
    WebKit::MediaPlayerPrivateRemote::sizeChanged(a1, v7, v8);
  }
  *(_WORD *)(a1 + 337) = *(_WORD *)((char *)a2 + 121);
  WTF::String::operator=((uint64_t *)(a1 + 304), (WTF::StringImpl **)a2 + 11);
  uint64_t v9 = a2[6];
  *(void *)(a1 + 269) = *(uint64_t *)((char *)a2 + 53);
  *(void *)(a1 + 264) = v9;
  uint64_t v10 = *(uint64_t *)((char *)a2 + 69);
  *(void *)(a1 + 280) = a2[8];
  *(void *)(a1 + 285) = v10;
  double result = (WTF::MonotonicTime *)WTF::String::operator=((uint64_t *)(a1 + 296), (WTF::StringImpl **)a2 + 10);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 19);
  *(unsigned char *)(a1 + 435) = *((unsigned char *)a2 + 219);
  *(_WORD *)(a1 + 43WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *((_WORD *)a2 + 110);
  if (*((unsigned char *)a2 + 208))
  {
    long long v12 = *((_OWORD *)a2 + 11);
    long long v13 = *((_OWORD *)a2 + 12);
    *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 208);
    *(_OWORD *)(a1 + 392) = v12;
    *(_OWORD *)(a1 + 408) = v13;
  }
  if (*(double *)(a1 + 672) != 0.0)
  {
    double result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
    if (v14 - *(double *)(a1 + 664) > 30.0) {
      double result = WebKit::MediaPlayerPrivateRemote::updateVideoPlaybackMetricsUpdateInterval((WebKit::MediaPlayerPrivateRemote *)a1, 0);
    }
  }
  *(_DWORD *)(a1 + 438) = *(_DWORD *)((char *)a2 + 222);
  *(_WORD *)(a1 + 432) = *((_WORD *)a2 + 108);
  if (*((unsigned char *)a2 + 112))
  {
    return (WTF::MonotonicTime *)WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 448, (uint64_t)(a2 + 12));
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::readyStateChanged(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  long long v13 = "MediaPlayerPrivateRemote";
  uint64_t v14 = 25;
  uint64_t v15 = "readyStateChanged";
  uint64_t v16 = v6;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
  }
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  char v17 = a3;
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  long long v13 = "MediaPlayerPrivateRemote";
  uint64_t v14 = 25;
  uint64_t v15 = "setReadyState";
  uint64_t v16 = v8;
  if (*(unsigned char *)(v7 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 48));
  char v9 = v17;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v10 = &unk_1EE9ECF00;
  *(void *)(v10 + 8) = a1;
  *(void *)(v10 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a1;
  *(unsigned char *)(v10 + 24) = v9;
  long long v13 = (const char *)v10;
  WTF::ensureOnMainRunLoop();
  uint64_t result = (uint64_t)v13;
  long long v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::volumeChanged(WebKit::MediaPlayerPrivateRemote *this, double a2)
{
  *((double *)this + 8WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a2;
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v6);
    uint64_t result = (atomic_uchar *)v6;
    if (v6)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::volumeChanged(v6, a2);
      uint64_t v5 = (atomic_uchar **)v6;
      uint64_t v6 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::muteChanged(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  *((unsigned char *)this + 712) = a2;
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v5);
    uint64_t result = (atomic_uchar *)v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::muteChanged(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::seeked(uint64_t a1, WTF::MediaTime *a2)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(WebCore::MediaPlayer **)(a1 + 120);
  v8[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v8[1] = (WebCore::MediaPlayer *)25;
  v8[2] = (WebCore::MediaPlayer *)"seeked";
  void v8[3] = v5;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8, a2);
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 713));
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((atomic_uchar *)(a1 + 64), (uint64_t *)a2);
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v8);
    uint64_t result = (atomic_uchar *)v8[0];
    if (v8[0])
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::seeked(v8[0], a2);
      uint64_t v7 = (atomic_uchar **)v8[0];
      v8[0] = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v7);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::timeChanged(uint64_t a1, uint64_t *a2, WTF::MediaTime *a3)
{
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(WebCore::MediaPlayer **)(a1 + 120);
  v10[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v10[1] = (WebCore::MediaPlayer *)25;
  v10[2] = (WebCore::MediaPlayer *)"timeChanged";
  v10[3] = v7;
  if (*(unsigned char *)(v6 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v10, a3);
  }
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((atomic_uchar *)(a1 + 64), (uint64_t *)a3);
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v10);
    uint64_t result = (atomic_uchar *)v10[0];
    if (v10[0])
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::timeChanged(v10[0]);
      char v9 = (atomic_uchar **)v10[0];
      v10[0] = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v9);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::durationChanged(uint64_t a1, uint64_t *a2)
{
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v5);
    uint64_t result = (atomic_uchar *)v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::durationChanged(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::seeking(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 713);
  return v1 & 1;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::rateChanged(uint64_t a1, WTF::MediaTime *a2, double a3)
{
  double v11 = a3;
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(WebCore::MediaPlayer **)(a1 + 120);
  v10[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v10[1] = (WebCore::MediaPlayer *)25;
  v10[2] = (WebCore::MediaPlayer *)"rateChanged";
  v10[3] = v6;
  if (*(unsigned char *)(v5 + 12))
  {
    if (WebKit2LogMedia && byte_1EB358068 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [6],double,char [14],WTF::MediaTime,char [20],BOOL>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v10, "rate:", &v11, " currentTime:", a2, " timeIsProgressing:", (uint64_t)a2 + 16);
      a3 = v11;
    }
  }
  *(double *)(a1 + 69WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a3;
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setRate((atomic_uchar *)(a1 + 64), a3);
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((atomic_uchar *)(a1 + 64), (uint64_t *)a2);
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v10);
    uint64_t result = (atomic_uchar *)v10[0];
    if (v10[0])
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::rateChanged(v10[0]);
      char v9 = (atomic_uchar **)v10[0];
      v10[0] = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v9);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::playbackStateChanged(uint64_t a1, char a2, WTF::MediaTime *a3)
{
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(WebCore::MediaPlayer **)(a1 + 120);
  v11[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v11[1] = (WebCore::MediaPlayer *)25;
  void v11[2] = (WebCore::MediaPlayer *)"playbackStateChanged";
  v11[3] = v7;
  if (*(unsigned char *)(v6 + 12))
  {
    if (WebKit2LogMedia && byte_1EB358068 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v11, a3);
    }
  }
  *(unsigned char *)(a1 + 434) = a2;
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((atomic_uchar *)(a1 + 64), (uint64_t *)a3);
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v11);
    uint64_t result = (atomic_uchar *)v11[0];
    if (v11[0])
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::playbackStateChanged(v11[0]);
      uint64_t v10 = (atomic_uchar **)v11[0];
      v11[0] = 0;
      if (v10) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::engineFailedToLoad(WebKit::MediaPlayerPrivateRemote *this, uint64_t a2)
{
  *((void *)this + 88) = a2;
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v5);
    uint64_t result = (atomic_uchar *)v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::remoteEngineFailedToLoad(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::characteristicChanged(uint64_t a1, uint64_t *a2)
{
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v5);
    uint64_t result = (atomic_uchar *)v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::characteristicChanged(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::sizeChanged(uint64_t a1, float a2, float a3)
{
  *(float *)(a1 + 340) = a2;
  *(float *)(a1 + 344) = a3;
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v6);
    uint64_t result = (atomic_uchar *)v6;
    if (v6)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::sizeChanged(v6);
      uint64_t v5 = (atomic_uchar **)v6;
      uint64_t v6 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::currentTimeChanged(atomic_uchar *result, WTF::MediaTime *this)
{
  uint64_t v3 = result;
  v86[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)result + 14);
  uint64_t v5 = *((void *)result + 15);
  char v64 = "MediaPlayerPrivateRemote";
  uint64_t v65 = 25;
  uint64_t v66 = "currentTimeChanged";
  uint64_t v67 = v5;
  uint64_t v6 = (unsigned __int8 *)(result + 713);
  atomic_load((unsigned __int8 *)result + 713);
  if (*(unsigned char *)(v4 + 12))
  {
    if (WebKit2LogMedia && byte_1EB358068 >= 3u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v77, (WTF::Logger::LogSiteIdentifier *)&v64);
      WTF::MediaTime::toJSONString((uint64_t *)&v76, this);
      WTF::String::String((WTF::String *)&v75, " seeking:");
      WTF::LogArgument<BOOL>::toString<BOOL>(&v74);
      WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, v63);
      char v9 = v74;
      char v74 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = v75;
      int v75 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v8);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      double v11 = v76;
      char v76 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v8);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      long long v12 = v77;
      unint64_t v77 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v8);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      long long v13 = qword_1EB358078;
      uint64_t v14 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        WTF::String::utf8();
        uint64_t v16 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v16;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v14 = v68[0];
        v68[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            uint64_t v14 = (WTF *)WTF::fastFree(v14, v15);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
      }
      if (WebKit2LogMedia && byte_1EB358068 >= 3u)
      {
        char v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v18 = *v17;
          if (v18) {
            break;
          }
          int v19 = *v17;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
          if (v19 == v18)
          {
            unint64_t v60 = v6;
            uint64_t v20 = WTF::Logger::observers(v14);
            uint64_t v21 = *(unsigned int *)(v20 + 12);
            if (v21)
            {
              int32x2_t v22 = *(uint64_t **)v20;
              uint64_t v23 = *(void *)v20 + 8 * v21;
              do
              {
                uint64_t v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v64);
                int v79 = 1;
                WTF::MediaTime::toJSONString(&v80, this);
                int v81 = 0;
                WTF::String::String((WTF::String *)&v82, " seeking:");
                int v83 = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v84);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 4uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, &WebKit2LogMedia, 3, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v25);
                for (uint64_t i = 56; i != -8; i -= 16)
                {
                  long long v27 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            int v28 = 1;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
            uint64_t v6 = v60;
            if (v28 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t result = (atomic_uchar *)v63[0];
      v63[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (atomic_uchar *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  unsigned __int8 v29 = atomic_load(v6);
  if ((v29 & 1) == 0)
  {
    char v30 = 0;
    int8x16_t v31 = v3 + 64;
    int v32 = 1;
    atomic_compare_exchange_strong_explicit(v3 + 64, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
    if (v30) {
      MEMORY[0x19972E8D0](v3 + 64);
    }
    long long v33 = *(_OWORD *)(v3 + 72);
    atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
    if (v32 != 1)
    {
      long long v62 = v33;
      WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 64));
      long long v33 = v62;
    }
    *(_OWORD *)int v63 = v33;
    unsigned __int8 v34 = atomic_load((unsigned __int8 *)v3 + 65);
    if (WTF::MediaTime::compare(this, (const WTF::MediaTime *)v63) == -1)
    {
      uint64_t v35 = *((void *)v3 + 14);
      uint64_t v36 = *((void *)v3 + 15);
      char v64 = "MediaPlayerPrivateRemote";
      uint64_t v65 = 25;
      uint64_t v66 = "currentTimeChanged";
      uint64_t v67 = v36;
      if (*(unsigned char *)(v35 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, (WTF::Logger::LogSiteIdentifier *)&v64);
        WTF::String::String((WTF::String *)&v72, "time jumped backwards, was ");
        WTF::MediaTime::toJSONString((uint64_t *)&v71, (WTF::MediaTime *)v63);
        WTF::String::String((WTF::String *)&v70, ", is now ");
        WTF::MediaTime::toJSONString((uint64_t *)&v69, this);
        v68[0] = v72;
        unint64_t v77 = v71;
        *(void *)buf = v73;
        int v75 = v69;
        char v76 = v70;
        uint64_t result = (atomic_uchar *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v68, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, &v74);
        if (!v74)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v38 = v69;
        unint64_t v69 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, v37);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
        char v39 = v70;
        unint64_t v70 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, v37);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
        uint64_t v40 = v71;
        char v71 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, v37);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
        unint64_t v41 = v72;
        unint64_t v72 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v37);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        char v42 = v73;
        unint64_t v73 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, v37);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
        int v43 = qword_1EB358078;
        unsigned int v44 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
        if (v44)
        {
          WTF::String::utf8();
          uint64_t v46 = v68[0] ? (char *)v68[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = v46;
          _os_log_impl(&dword_1985F2000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          unsigned int v44 = v68[0];
          v68[0] = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 1) {
              unsigned int v44 = (WTF *)WTF::fastFree(v44, v45);
            }
            else {
              --*(_DWORD *)v44;
            }
          }
        }
        if (WebKit2LogMedia)
        {
          unsigned __int8 v47 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v48 = *v47;
            if (v48) {
              break;
            }
            int v49 = *v47;
            atomic_compare_exchange_strong_explicit(v47, (unsigned __int8 *)&v49, v48 | 1, memory_order_acquire, memory_order_acquire);
            if (v49 == v48)
            {
              uint64_t v50 = WTF::Logger::observers(v44);
              uint64_t v51 = *(unsigned int *)(v50 + 12);
              if (v51)
              {
                unsigned __int8 v52 = *(uint64_t **)v50;
                uint64_t v61 = *(void *)v50 + 8 * v51;
                do
                {
                  uint64_t v53 = *v52;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v64);
                  int v79 = 0;
                  WTF::String::String((WTF::String *)&v80, "time jumped backwards, was ");
                  int v81 = 1;
                  WTF::MediaTime::toJSONString(&v82, (WTF::MediaTime *)v63);
                  int v83 = 0;
                  WTF::String::String((WTF::String *)&v84, ", is now ");
                  int v85 = 1;
                  WTF::MediaTime::toJSONString(v86, this);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 5uLL);
                  (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v53 + 16))(v53, &WebKit2LogMedia, 0, v68);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v54);
                  for (uint64_t j = 72; j != -8; j -= 16)
                  {
                    uint64_t v56 = *(WTF::StringImpl **)&buf[j];
                    *(void *)&buf[j] = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 2) {
                        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v45);
                      }
                      else {
                        *(_DWORD *)v56 -= 2;
                      }
                    }
                  }
                  ++v52;
                }
                while (v52 != (uint64_t *)v61);
              }
              int v57 = 1;
              atomic_compare_exchange_strong_explicit(v47, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
              int8x16_t v31 = v3 + 64;
              if (v57 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        unint64_t v58 = v74;
        char v74 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2) {
            WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v45);
          }
          else {
            *(_DWORD *)v58 -= 2;
          }
        }
      }
      WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime(v31, (uint64_t *)this);
    }
    else
    {
      uint64_t result = WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime(v3 + 64, (uint64_t *)this);
      if (*((unsigned char *)this + 16) == (v34 & 1)) {
        return result;
      }
      uint64_t result = (atomic_uchar *)WTF::MediaTime::compare(this, (const WTF::MediaTime *)v63);
      if (!result || v3[434]) {
        return result;
      }
    }
    uint64_t result = (atomic_uchar *)*((void *)v3 + 16);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)v3 + 17), buf);
      uint64_t result = *(atomic_uchar **)buf;
      if (*(void *)buf)
      {
        uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::timeChanged(*(WebCore::MediaPlayer **)buf);
        unint64_t v59 = *(atomic_uchar ***)buf;
        *(void *)buf = 0;
        if (v59) {
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v59);
        }
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::firstVideoFrameAvailable(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = (WebCore::MediaPlayer *)*((void *)this + 15);
  v6[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v6[1] = (WebCore::MediaPlayer *)25;
  v6[2] = (WebCore::MediaPlayer *)"firstVideoFrameAvailable";
  v6[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  }
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), v6);
    uint64_t result = (atomic_uchar *)v6[0];
    if (v6[0])
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::firstVideoFrameAvailable(v6[0]);
      uint64_t v5 = (atomic_uchar **)v6[0];
      v6[0] = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::renderingModeChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = *((void *)this + 15);
  v6[0] = "MediaPlayerPrivateRemote";
  v6[1] = 25;
  v6[2] = "renderingModeChanged";
  v6[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  }
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), v6);
    if (v6[0])
    {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v6[0] + 8) + 8) + 144))(*(void *)(*(void *)(v6[0] + 8) + 8));
      uint64_t v5 = (atomic_uchar **)v6[0];
      v6[0] = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::engineDescription@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 192);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsScanning(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsFullscreen(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 209);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsPictureInPicture(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 210);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsAcceleratedRendering(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 211);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::acceleratedRenderingStateChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v11);
    if (v11)
    {
      uint64_t v3 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                              + 21))
                     + 32);
      char v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v11 + 8) + 8) + 136))(*(void *)(*(void *)(v11 + 8) + 8));
      uint64_t v4 = *((void *)this + 23);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 1143;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      long long v12 = v5;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, &v10);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
      uint64_t result = (atomic_uchar *)v12;
      long long v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v8, v9);
      }
      uint64_t v7 = (atomic_uchar **)v11;
      uint64_t v11 = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v7);
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::canPlayToWirelessPlaybackTarget(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 214);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::updateVideoPlaybackMetricsUpdateInterval(WebKit::MediaPlayerPrivateRemote *this, const WTF::Seconds *a2)
{
  *((void *)this + 84) = a2;
  uint64_t v3 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 32);
  double v4 = *((double *)this + 84);
  uint64_t v5 = *((void *)this + 23);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1193;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v6, v4);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::shouldIgnoreIntrinsicSize(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 215);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::prepareForRendering(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  double v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v4 = 1168;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  char v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPageIsVisible(IPC::Encoder *this, int a2)
{
  unsigned __int8 v14 = a2;
  if (*((unsigned char *)this + 719)) {
    BOOL v2 = *((unsigned __int8 *)this + 718) == a2;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 14);
    uint64_t v5 = (IPC::Encoder *)*((void *)this + 15);
    v13[0] = (IPC::Encoder *)"MediaPlayerPrivateRemote";
    v13[1] = (IPC::Encoder *)25;
    void v13[2] = (IPC::Encoder *)"setPageIsVisible";
    v13[3] = v5;
    if (*(unsigned char *)(v4 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v13);
      LOWORD(a2) = v14;
    }
    *((_WORD *)v3 + 359) = a2 | 0x100;
    uint64_t v6 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v3
                                                                            + 21))
                   + 32);
    unsigned __int8 v12 = v14;
    uint64_t v7 = *((void *)v3 + 23);
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 1175;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    v13[0] = v8;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, (char *)&v12);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)v13, 0, 0);
    this = v13[0];
    v13[0] = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return this;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setShouldMaintainAspectRatio(IPC::Encoder *this, int a2)
{
  if (*((unsigned char *)this + 717)) {
    BOOL v2 = *((unsigned __int8 *)this + 716) == a2;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    char v3 = a2;
    uint64_t v4 = this;
    *((_WORD *)this + 358) = a2 | 0x100;
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                            + 21))
                   + 32);
    char v11 = v3;
    uint64_t v6 = *((void *)v4 + 23);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 1188;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    unsigned __int8 v12 = v7;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v7, &v11);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
    this = v12;
    unsigned __int8 v12 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setShouldDisableSleep(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  uint64_t v5 = this[23];
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1186;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unsigned __int8 v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  unsigned __int8 v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

float WebKit::MediaPlayerPrivateRemote::naturalSize(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((float *)this + 85);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::addRemoteAudioTrack(uint64_t a1, unint64_t *a2)
{
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t v7 = (void *)(a1 + 496);
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((void *)(a1 + 496), a2);
  uint64_t v8 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v10 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v10 + 8) = 1;
  *(unsigned char *)(v10 + 12) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(unsigned char *)(v10 + 48) = 0;
  *(_OWORD *)(v10 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(void *)uint64_t v10 = &unk_1EE9EC058;
  char v11 = *(atomic_uchar **)(v8 + 24);
  if (v11) {
    char v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  }
  *(void *)(v10 + 88) = v11;
  *(void *)(v10 + 9WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v8;
  *(unsigned char *)(v10 + 104) = 6;
  *(void *)(v10 + 112) = *a2;
  *(void *)(v10 + 120) = 0;
  *(void *)(v10 + 128) = 0;
  *(_DWORD *)(v10 + 13WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = -1;
  *(_OWORD *)(v10 + 144) = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v11);
  *(void *)(v10 + 160) = v9;
  uint64_t result = WebKit::AudioTrackPrivateRemote::updateConfiguration(v10, (uint64_t *)a2, v12);
  unint64_t v14 = *a2;
  unint64_t v15 = *(void *)(a1 + 504);
  if (!v15) {
    goto LABEL_22;
  }
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v2 = *a2;
    if (v15 <= v14) {
      unint64_t v2 = v14 % v15;
    }
  }
  else
  {
    unint64_t v2 = (v15 - 1) & v14;
  }
  char v17 = *(uint64_t **)(*v7 + 8 * v2);
  if (!v17 || (uint64_t v18 = *v17) == 0)
  {
LABEL_22:
    uint64_t v20 = (uint64_t *)(a1 + 512);
    uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
    v31[1] = (WebCore::MediaPlayer *)(a1 + 512);
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = v14;
    *(void *)(v18 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *a2;
    *(void *)(v18 + 24) = v10;
    char v32 = 1;
    float v21 = (float)(unint64_t)(*(void *)(a1 + 520) + 1);
    float v22 = *(float *)(a1 + 528);
    if (!v15 || (float)(v22 * (float)v15) < v21)
    {
      BOOL v23 = 1;
      if (v15 >= 3) {
        BOOL v23 = (v15 & (v15 - 1)) != 0;
      }
      unint64_t v24 = v23 | (2 * v15);
      unint64_t v25 = vcvtps_u32_f32(v21 / v22);
      if (v24 <= v25) {
        size_t v26 = v25;
      }
      else {
        size_t v26 = v24;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)(a1 + 496), v26);
      unint64_t v15 = *(void *)(a1 + 504);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v15 <= v14) {
          unint64_t v2 = v14 % v15;
        }
        else {
          unint64_t v2 = v14;
        }
      }
      else
      {
        unint64_t v2 = (v15 - 1) & v14;
      }
    }
    long long v27 = *(uint64_t **)(*v7 + 8 * v2);
    if (v27)
    {
      *(void *)uint64_t v18 = *v27;
    }
    else
    {
      *(void *)uint64_t v18 = *v20;
      *uint64_t v20 = v18;
      *(void *)(*v7 + 8 * v2) = v20;
      if (!*(void *)v18)
      {
LABEL_43:
        v31[0] = 0;
        ++*(void *)(a1 + 520);
        uint64_t result = (atomic_uchar *)std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v31, 0);
        goto LABEL_44;
      }
      unint64_t v28 = *(void *)(*(void *)v18 + 8);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v28 >= v15) {
          v28 %= v15;
        }
      }
      else
      {
        v28 &= v15 - 1;
      }
      long long v27 = (uint64_t *)(*v7 + 8 * v28);
    }
    uint64_t *v27 = v18;
    goto LABEL_43;
  }
  while (1)
  {
    unint64_t v19 = *(void *)(v18 + 8);
    if (v19 == v14) {
      break;
    }
    if (v16.u32[0] > 1uLL)
    {
      if (v19 >= v15) {
        v19 %= v15;
      }
    }
    else
    {
      v19 &= v15 - 1;
    }
    if (v19 != v2) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v18 = *(void *)v18;
    if (!v18) {
      goto LABEL_22;
    }
  }
  if (*(void *)(v18 + 16) != v14) {
    goto LABEL_21;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v10 + 8));
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
LABEL_44:
  if (!*(void *)(a1 + 472))
  {
    uint64_t result = *(atomic_uchar **)(a1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v31);
      uint64_t result = (atomic_uchar *)v31[0];
      if (v31[0])
      {
        uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::addAudioTrack(v31[0], *(WebCore::AudioTrackPrivate **)(v18 + 24));
        char v30 = (atomic_uchar **)v31[0];
        v31[0] = 0;
        if (v30) {
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v30);
        }
      }
    }
  }
  int v29 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
  if (v29 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::removeRemoteAudioTrack(WebKit::MediaPlayerPrivateRemote *this, unint64_t a2)
{
  char v3 = 0;
  unint64_t v11 = a2;
  uint64_t v4 = (char *)this + 480;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 480, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 480);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)this + 62, &v11);
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    uint64_t v7 = (atomic_uchar *)*((void *)this + 16);
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v7, *((void *)this + 17), &v10);
      if (v10)
      {
        WebCore::MediaPlayer::removeAudioTrack(v10, *(WebCore::AudioTrackPrivate **)(v6 + 24));
        uint64_t v8 = (atomic_uchar **)v10;
        uint64_t v10 = 0;
        if (v8) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
        }
      }
    }
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((void *)this + 62, &v11);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::remoteAudioTrackConfigurationChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  unint64_t v39 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t v7 = (void *)(a1 + 496);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 496), &v39);
  if (!result) {
    goto LABEL_47;
  }
  uint64_t v10 = (void *)result;
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v12 = *(void *)(v11 + 112);
  uint64_t v13 = *a3;
  uint64_t result = (uint64_t)WebKit::AudioTrackPrivateRemote::updateConfiguration(v11, a3, v9);
  if (v12 == v13) {
    goto LABEL_47;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove((void *)(a1 + 496), v10, (uint64_t)v40);
  unint64_t v14 = (void *)v40[0];
  v40[0] = 0;
  HIBYTE(v38) = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v40, 0);
  unint64_t v16 = *(void *)(v11 + 112);
  v14[1] = v16;
  v14[2] = v16;
  unint64_t v17 = *(void *)(a1 + 504);
  if (v17)
  {
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v19 = v16;
      if (v17 <= v16) {
        unint64_t v19 = v16 % v17;
      }
    }
    else
    {
      unint64_t v19 = (v17 - 1) & v16;
    }
    uint64_t v20 = *(void **)(*v7 + 8 * v19);
    if (v20)
    {
      for (uint64_t i = (void *)*v20; i; uint64_t i = (void *)*i)
      {
        unint64_t v22 = i[1];
        if (v22 == v16)
        {
          if (i[2] == v16) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v18.u32[0] > 1uLL)
          {
            if (v22 >= v17) {
              v22 %= v17;
            }
          }
          else
          {
            v22 &= v17 - 1;
          }
          if (v22 != v19) {
            break;
          }
        }
      }
    }
  }
  float v23 = (float)(unint64_t)(*(void *)(a1 + 520) + 1);
  float v24 = *(float *)(a1 + 528);
  if (!v17 || (float)(v24 * (float)v17) < v23)
  {
    uint64_t v25 = 2 * v17;
    BOOL v26 = v17 < 3 || (v17 & (v17 - 1)) != 0;
    size_t v27 = v26 | v25;
    unint64_t v28 = vcvtps_u32_f32(v23 / v24);
    if (v27 <= v28) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v27;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)(a1 + 496), v29);
    unint64_t v17 = *(void *)(a1 + 504);
    unint64_t v16 = v14[1];
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    if (v16 >= v17) {
      v16 %= v17;
    }
  }
  else
  {
    v16 &= v17 - 1;
  }
  int8x16_t v31 = *(void **)(*v7 + 8 * v16);
  if (v31)
  {
    *unint64_t v14 = *v31;
  }
  else
  {
    *unint64_t v14 = *(void *)(a1 + 512);
    *(void *)(a1 + 512) = v14;
    *(void *)(*(void *)(a1 + 496) + 8 * v1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a1 + 512;
    if (!*v14) {
      goto LABEL_43;
    }
    unint64_t v32 = *(void *)(*v14 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v32 >= v17) {
        v32 %= v17;
      }
    }
    else
    {
      v32 &= v17 - 1;
    }
    int8x16_t v31 = (void *)(*v7 + 8 * v32);
  }
  *int8x16_t v31 = v14;
LABEL_43:
  ++*(void *)(a1 + 520);
  HIBYTE(v38) = 0;
  unint64_t v14 = 0;
LABEL_44:
  uint64_t v35 = v14;
  unsigned __int16 v36 = v38;
  uint64_t v37 = 0;
  if (v38 >= 0x100u) {
    HIBYTE(v38) = 0;
  }
  std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v35, v15);
  uint64_t result = std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v37, v33);
LABEL_47:
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

uint64_t WebKit::AudioTrackPrivateRemote::id(WebKit::AudioTrackPrivateRemote *this)
{
  return *((void *)this + 14);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::addRemoteTextTrack(uint64_t a1, unint64_t *a2)
{
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t v7 = (void *)(a1 + 576);
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((void *)(a1 + 576), a2);
  uint64_t v8 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x90);
  uint64_t result = (atomic_uchar *)WebKit::TextTrackPrivateRemote::TextTrackPrivateRemote((uint64_t)v10, v8, v9, (uint64_t)a2);
  unint64_t v12 = *a2;
  unint64_t v13 = *(void *)(a1 + 584);
  if (!v13) {
    goto LABEL_20;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v2 = *a2;
    if (v13 <= v12) {
      unint64_t v2 = v12 % v13;
    }
  }
  else
  {
    unint64_t v2 = (v13 - 1) & v12;
  }
  unint64_t v15 = *(uint64_t **)(*v7 + 8 * v2);
  if (!v15 || (uint64_t v16 = *v15) == 0)
  {
LABEL_20:
    uint8x8_t v18 = (uint64_t *)(a1 + 592);
    uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
    v29[1] = (WebCore::MediaPlayer *)(a1 + 592);
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 8) = v12;
    *(void *)(v16 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *a2;
    *(void *)(v16 + 24) = v10;
    char v30 = 1;
    float v19 = (float)(unint64_t)(*(void *)(a1 + 600) + 1);
    float v20 = *(float *)(a1 + 608);
    if (!v13 || (float)(v20 * (float)v13) < v19)
    {
      BOOL v21 = 1;
      if (v13 >= 3) {
        BOOL v21 = (v13 & (v13 - 1)) != 0;
      }
      unint64_t v22 = v21 | (2 * v13);
      unint64_t v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23) {
        size_t v24 = v23;
      }
      else {
        size_t v24 = v22;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)(a1 + 576), v24);
      unint64_t v13 = *(void *)(a1 + 584);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v13 <= v12) {
          unint64_t v2 = v12 % v13;
        }
        else {
          unint64_t v2 = v12;
        }
      }
      else
      {
        unint64_t v2 = (v13 - 1) & v12;
      }
    }
    uint64_t v25 = *(uint64_t **)(*v7 + 8 * v2);
    if (v25)
    {
      *(void *)uint64_t v16 = *v25;
    }
    else
    {
      *(void *)uint64_t v16 = *v18;
      *uint8x8_t v18 = v16;
      *(void *)(*v7 + 8 * v2) = v18;
      if (!*(void *)v16)
      {
LABEL_41:
        v29[0] = 0;
        ++*(void *)(a1 + 600);
        uint64_t result = (atomic_uchar *)std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v29, 0);
        goto LABEL_42;
      }
      unint64_t v26 = *(void *)(*(void *)v16 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13) {
          v26 %= v13;
        }
      }
      else
      {
        v26 &= v13 - 1;
      }
      uint64_t v25 = (uint64_t *)(*v7 + 8 * v26);
    }
    uint64_t *v25 = v16;
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v17 = *(void *)(v16 + 8);
    if (v17 == v12) {
      break;
    }
    if (v14.u32[0] > 1uLL)
    {
      if (v17 >= v13) {
        v17 %= v13;
      }
    }
    else
    {
      v17 &= v13 - 1;
    }
    if (v17 != v2) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      goto LABEL_20;
    }
  }
  if (*(void *)(v16 + 16) != v12) {
    goto LABEL_19;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
LABEL_42:
  if (!*(void *)(a1 + 472))
  {
    uint64_t result = *(atomic_uchar **)(a1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v29);
      uint64_t result = (atomic_uchar *)v29[0];
      if (v29[0])
      {
        uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::addTextTrack(v29[0], *(WebCore::InbandTextTrackPrivate **)(v16 + 24));
        unint64_t v28 = (atomic_uchar **)v29[0];
        v29[0] = 0;
        if (v28) {
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v28);
        }
      }
    }
  }
  int v27 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::removeRemoteTextTrack(WebKit::MediaPlayerPrivateRemote *this, unint64_t a2)
{
  char v3 = 0;
  unint64_t v11 = a2;
  uint64_t v4 = (char *)this + 480;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 480, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 480);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)this + 72, &v11);
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    uint64_t v7 = (atomic_uchar *)*((void *)this + 16);
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v7, *((void *)this + 17), &v10);
      if (v10)
      {
        WebCore::MediaPlayer::removeTextTrack(v10, *(WebCore::InbandTextTrackPrivate **)(v6 + 24));
        uint64_t v8 = (atomic_uchar **)v10;
        uint64_t v10 = 0;
        if (v8) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
        }
      }
    }
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((void *)this + 72, &v11);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::remoteTextTrackConfigurationChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  unint64_t v39 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t v7 = (void *)(a1 + 576);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v39);
  if (!result) {
    goto LABEL_47;
  }
  uint64_t v10 = (void *)result;
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v12 = *(void *)(v11 + 120);
  uint64_t v13 = *a3;
  uint64_t result = (uint64_t)WebKit::TextTrackPrivateRemote::updateConfiguration(v11, a3, v9);
  if (v12 == v13) {
    goto LABEL_47;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove((void *)(a1 + 576), v10, (uint64_t)v40);
  uint8x8_t v14 = (void *)v40[0];
  v40[0] = 0;
  HIBYTE(v38) = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v40, 0);
  unint64_t v16 = *(void *)(v11 + 120);
  v14[1] = v16;
  v14[2] = v16;
  unint64_t v17 = *(void *)(a1 + 584);
  if (v17)
  {
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v19 = v16;
      if (v17 <= v16) {
        unint64_t v19 = v16 % v17;
      }
    }
    else
    {
      unint64_t v19 = (v17 - 1) & v16;
    }
    float v20 = *(void **)(*v7 + 8 * v19);
    if (v20)
    {
      for (uint64_t i = (void *)*v20; i; uint64_t i = (void *)*i)
      {
        unint64_t v22 = i[1];
        if (v22 == v16)
        {
          if (i[2] == v16) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v18.u32[0] > 1uLL)
          {
            if (v22 >= v17) {
              v22 %= v17;
            }
          }
          else
          {
            v22 &= v17 - 1;
          }
          if (v22 != v19) {
            break;
          }
        }
      }
    }
  }
  float v23 = (float)(unint64_t)(*(void *)(a1 + 600) + 1);
  float v24 = *(float *)(a1 + 608);
  if (!v17 || (float)(v24 * (float)v17) < v23)
  {
    uint64_t v25 = 2 * v17;
    BOOL v26 = v17 < 3 || (v17 & (v17 - 1)) != 0;
    size_t v27 = v26 | v25;
    unint64_t v28 = vcvtps_u32_f32(v23 / v24);
    if (v27 <= v28) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v27;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)(a1 + 576), v29);
    unint64_t v17 = *(void *)(a1 + 584);
    unint64_t v16 = v14[1];
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    if (v16 >= v17) {
      v16 %= v17;
    }
  }
  else
  {
    v16 &= v17 - 1;
  }
  int8x16_t v31 = *(void **)(*v7 + 8 * v16);
  if (v31)
  {
    *uint8x8_t v14 = *v31;
  }
  else
  {
    *uint8x8_t v14 = *(void *)(a1 + 592);
    *(void *)(a1 + 592) = v14;
    *(void *)(*(void *)(a1 + 576) + 8 * v1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a1 + 592;
    if (!*v14) {
      goto LABEL_43;
    }
    unint64_t v32 = *(void *)(*v14 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v32 >= v17) {
        v32 %= v17;
      }
    }
    else
    {
      v32 &= v17 - 1;
    }
    int8x16_t v31 = (void *)(*v7 + 8 * v32);
  }
  *int8x16_t v31 = v14;
LABEL_43:
  ++*(void *)(a1 + 600);
  HIBYTE(v38) = 0;
  uint8x8_t v14 = 0;
LABEL_44:
  uint64_t v35 = v14;
  unsigned __int16 v36 = v38;
  uint64_t v37 = 0;
  if (v38 >= 0x100u) {
    HIBYTE(v38) = 0;
  }
  std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v35, v15);
  uint64_t result = std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v37, v33);
LABEL_47:
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::parseWebVTTFileHeader(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v5 = 0;
  unint64_t v9 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v9);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::parseWebVTTFileHeader(*(void *)(result + 24), a3);
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::parseWebVTTCueData(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = 0;
  unint64_t v11 = a2;
  int v8 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v11);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::parseWebVTTCueData(*(void *)(result + 24), a3, a4);
  }
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::parseWebVTTCueDataStruct(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v5 = 0;
  unint64_t v9 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v9);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::parseWebVTTCueDataStruct(*(void *)(result + 24), a3);
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::addDataCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11 = 0;
  unint64_t v15 = a2;
  uint64_t v12 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v15);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::addDataCue(*(void *)(result + 24), a3, a4, a5, a6);
  }
  int v14 = 1;
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::addDataCueWithType(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11 = 0;
  unint64_t v15 = a2;
  uint64_t v12 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v15);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::addDataCueWithType(*(void *)(result + 24), a3, a4, a5, a6);
  }
  int v14 = 1;
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::updateDataCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9 = 0;
  unint64_t v13 = a2;
  int v10 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v13);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::updateDataCue(*(void *)(result + 24), a3, a4, a5);
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::removeDataCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9 = 0;
  unint64_t v13 = a2;
  int v10 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v13);
  if (result) {
    uint64_t result = WebKit::TextTrackPrivateRemote::removeDataCue(*(void *)(result + 24), a3, a4, a5);
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::addGenericCue(uint64_t a1, unint64_t a2, long long *a3)
{
  char v5 = 0;
  unint64_t v13 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v13);
  if (result)
  {
    uint64_t v8 = result[3];
    char v9 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
    uint64_t v12 = WebCore::InbandGenericCue::InbandGenericCue((uint64_t)v9, a3);
    WebKit::TextTrackPrivateRemote::addGenericCue(v8, &v12);
    uint64_t v12 = 0;
    uint64_t result = WTF::RefCounted<WebCore::InbandGenericCue>::deref(v9, v10);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::updateGenericCue(uint64_t a1, unint64_t a2, long long *a3)
{
  char v5 = 0;
  unint64_t v13 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v13);
  if (result)
  {
    uint64_t v8 = result[3];
    char v9 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
    uint64_t v12 = WebCore::InbandGenericCue::InbandGenericCue((uint64_t)v9, a3);
    WebKit::TextTrackPrivateRemote::updateGenericCue(v8, &v12);
    uint64_t v12 = 0;
    uint64_t result = WTF::RefCounted<WebCore::InbandGenericCue>::deref(v9, v10);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::removeGenericCue(uint64_t a1, unint64_t a2, long long *a3)
{
  char v5 = 0;
  unint64_t v13 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 576), &v13);
  if (result)
  {
    uint64_t v8 = result[3];
    char v9 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
    uint64_t v12 = WebCore::InbandGenericCue::InbandGenericCue((uint64_t)v9, a3);
    WebKit::TextTrackPrivateRemote::removeGenericCue(v8, &v12);
    uint64_t v12 = 0;
    uint64_t result = WTF::RefCounted<WebCore::InbandGenericCue>::deref(v9, v10);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::addRemoteVideoTrack(uint64_t a1, unint64_t *a2)
{
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  char v7 = (void *)(a1 + 536);
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((void *)(a1 + 536), a2);
  uint64_t v8 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  uint64_t v9 = *(void *)(a1 + 184);
  int v10 = (unsigned int *)WTF::fastMalloc((WTF *)0xD0);
  uint64_t result = (atomic_uchar *)WebKit::VideoTrackPrivateRemote::VideoTrackPrivateRemote((uint64_t)v10, v8, v9, (uint64_t *)a2);
  unint64_t v12 = *a2;
  unint64_t v13 = *(void *)(a1 + 544);
  if (!v13) {
    goto LABEL_20;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v2 = *a2;
    if (v13 <= v12) {
      unint64_t v2 = v12 % v13;
    }
  }
  else
  {
    unint64_t v2 = (v13 - 1) & v12;
  }
  unint64_t v15 = *(uint64_t **)(*v7 + 8 * v2);
  if (!v15 || (uint64_t v16 = *v15) == 0)
  {
LABEL_20:
    uint8x8_t v18 = (uint64_t *)(a1 + 552);
    uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
    v29[1] = (WebCore::MediaPlayer *)(a1 + 552);
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 8) = v12;
    *(void *)(v16 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *a2;
    *(void *)(v16 + 24) = v10;
    char v30 = 1;
    float v19 = (float)(unint64_t)(*(void *)(a1 + 560) + 1);
    float v20 = *(float *)(a1 + 568);
    if (!v13 || (float)(v20 * (float)v13) < v19)
    {
      BOOL v21 = 1;
      if (v13 >= 3) {
        BOOL v21 = (v13 & (v13 - 1)) != 0;
      }
      unint64_t v22 = v21 | (2 * v13);
      unint64_t v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23) {
        size_t v24 = v23;
      }
      else {
        size_t v24 = v22;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)(a1 + 536), v24);
      unint64_t v13 = *(void *)(a1 + 544);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v13 <= v12) {
          unint64_t v2 = v12 % v13;
        }
        else {
          unint64_t v2 = v12;
        }
      }
      else
      {
        unint64_t v2 = (v13 - 1) & v12;
      }
    }
    uint64_t v25 = *(uint64_t **)(*v7 + 8 * v2);
    if (v25)
    {
      *(void *)uint64_t v16 = *v25;
    }
    else
    {
      *(void *)uint64_t v16 = *v18;
      *uint8x8_t v18 = v16;
      *(void *)(*v7 + 8 * v2) = v18;
      if (!*(void *)v16)
      {
LABEL_41:
        v29[0] = 0;
        ++*(void *)(a1 + 560);
        uint64_t result = (atomic_uchar *)std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v29, 0);
        goto LABEL_42;
      }
      unint64_t v26 = *(void *)(*(void *)v16 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13) {
          v26 %= v13;
        }
      }
      else
      {
        v26 &= v13 - 1;
      }
      uint64_t v25 = (uint64_t *)(*v7 + 8 * v26);
    }
    uint64_t *v25 = v16;
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v17 = *(void *)(v16 + 8);
    if (v17 == v12) {
      break;
    }
    if (v14.u32[0] > 1uLL)
    {
      if (v17 >= v13) {
        v17 %= v13;
      }
    }
    else
    {
      v17 &= v13 - 1;
    }
    if (v17 != v2) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      goto LABEL_20;
    }
  }
  if (*(void *)(v16 + 16) != v12) {
    goto LABEL_19;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
LABEL_42:
  if (!*(void *)(a1 + 472))
  {
    uint64_t result = *(atomic_uchar **)(a1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v29);
      uint64_t result = (atomic_uchar *)v29[0];
      if (v29[0])
      {
        uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::addVideoTrack(v29[0], *(WebCore::VideoTrackPrivate **)(v16 + 24));
        unint64_t v28 = (atomic_uchar **)v29[0];
        v29[0] = 0;
        if (v28) {
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v28);
        }
      }
    }
  }
  int v27 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::removeRemoteVideoTrack(WebKit::MediaPlayerPrivateRemote *this, unint64_t a2)
{
  char v3 = 0;
  unint64_t v11 = a2;
  uint64_t v4 = (char *)this + 480;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 480, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 480);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)this + 67, &v11);
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    char v7 = (atomic_uchar *)*((void *)this + 16);
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v7, *((void *)this + 17), &v10);
      if (v10)
      {
        WebCore::MediaPlayer::removeVideoTrack(v10, *(WebCore::VideoTrackPrivate **)(v6 + 24));
        uint64_t v8 = (atomic_uchar **)v10;
        int v10 = 0;
        if (v8) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
        }
      }
    }
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((void *)this + 67, &v11);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::remoteVideoTrackConfigurationChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  unint64_t v39 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 480);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 480), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 480);
  }
  char v7 = (void *)(a1 + 536);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)(a1 + 536), &v39);
  if (!result) {
    goto LABEL_47;
  }
  int v10 = (void *)result;
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v12 = *(void *)(v11 + 192);
  uint64_t v13 = *a3;
  uint64_t result = (uint64_t)WebKit::VideoTrackPrivateRemote::updateConfiguration(v11, a3, v9);
  if (v12 == v13) {
    goto LABEL_47;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove((void *)(a1 + 536), v10, (uint64_t)v40);
  uint8x8_t v14 = (void *)v40[0];
  v40[0] = 0;
  HIBYTE(v38) = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v40, 0);
  unint64_t v16 = *(void *)(v11 + 192);
  v14[1] = v16;
  v14[2] = v16;
  unint64_t v17 = *(void *)(a1 + 544);
  if (v17)
  {
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v19 = v16;
      if (v17 <= v16) {
        unint64_t v19 = v16 % v17;
      }
    }
    else
    {
      unint64_t v19 = (v17 - 1) & v16;
    }
    float v20 = *(void **)(*v7 + 8 * v19);
    if (v20)
    {
      for (uint64_t i = (void *)*v20; i; uint64_t i = (void *)*i)
      {
        unint64_t v22 = i[1];
        if (v22 == v16)
        {
          if (i[2] == v16) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v18.u32[0] > 1uLL)
          {
            if (v22 >= v17) {
              v22 %= v17;
            }
          }
          else
          {
            v22 &= v17 - 1;
          }
          if (v22 != v19) {
            break;
          }
        }
      }
    }
  }
  float v23 = (float)(unint64_t)(*(void *)(a1 + 560) + 1);
  float v24 = *(float *)(a1 + 568);
  if (!v17 || (float)(v24 * (float)v17) < v23)
  {
    uint64_t v25 = 2 * v17;
    BOOL v26 = v17 < 3 || (v17 & (v17 - 1)) != 0;
    size_t v27 = v26 | v25;
    unint64_t v28 = vcvtps_u32_f32(v23 / v24);
    if (v27 <= v28) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v27;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)(a1 + 536), v29);
    unint64_t v17 = *(void *)(a1 + 544);
    unint64_t v16 = v14[1];
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    if (v16 >= v17) {
      v16 %= v17;
    }
  }
  else
  {
    v16 &= v17 - 1;
  }
  int8x16_t v31 = *(void **)(*v7 + 8 * v16);
  if (v31)
  {
    *uint8x8_t v14 = *v31;
  }
  else
  {
    *uint8x8_t v14 = *(void *)(a1 + 552);
    *(void *)(a1 + 552) = v14;
    *(void *)(*(void *)(a1 + 536) + 8 * v1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a1 + 552;
    if (!*v14) {
      goto LABEL_43;
    }
    unint64_t v32 = *(void *)(*v14 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v32 >= v17) {
        v32 %= v17;
      }
    }
    else
    {
      v32 &= v17 - 1;
    }
    int8x16_t v31 = (void *)(*v7 + 8 * v32);
  }
  *int8x16_t v31 = v14;
LABEL_43:
  ++*(void *)(a1 + 560);
  HIBYTE(v38) = 0;
  uint8x8_t v14 = 0;
LABEL_44:
  uint64_t v35 = v14;
  unsigned __int16 v36 = v38;
  uint64_t v37 = 0;
  if (v38 >= 0x100u) {
    HIBYTE(v38) = 0;
  }
  std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v35, v15);
  uint64_t result = std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v37, v33);
LABEL_47:
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

const char *WebKit::MediaPlayerPrivateRemote::load(WebKit::MediaPlayerPrivateRemote *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  if (*((unsigned char *)this + 176) == 1
    || (uint64_t v8 = (WebCore::PlatformStrategies *)WebCore::platformStrategies(this),
        int v9 = (WebCore::MediaStrategy *)WebCore::PlatformStrategies::mediaStrategy(v8),
        WebCore::MediaStrategy::mockMediaSourceEnabled(v9))
    && *((unsigned char *)this + 176) == 8)
  {
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    int v10 = (WebCore::DeprecatedGlobalSettings *)WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this + 21));
    uint64_t v11 = (os_unfair_lock_s *)*((void *)v10 + 4);
    char v12 = *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(v10) + 29);
    uint64_t v13 = (atomic_uchar *)*((void *)this + 6);
    if (v13) {
      uint8x8_t v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v13);
    }
    else {
      uint8x8_t v14 = 0;
    }
    uint64_t v15 = *((void *)this + 23);
    unint64_t v16 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(void *)unint64_t v16 = &unk_1EE9ECF28;
    *((void *)v16 + 1) = v14;
    *((void *)v16 + 2) = this;
    *((void *)v16 + 3) = this;
    uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint8x8_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint8x8_t v18 = 1158;
    *((void *)v18 + 1) = v15;
    *((void *)v18 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 68) = 0;
    *((void *)v18 + 70) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    unsigned __int8 v47 = v18;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)a2);
    IPC::ArgumentCoder<WebCore::ContentType,void>::encode(v18, (uint64_t)a3);
    unint64_t v19 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1990F6A8CLL);
    }
    *unint64_t v19 = v12;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &IdentifierInternal);
    int v48 = v16;
    uint64_t v49 = v17;
    IPC::Connection::sendMessageWithAsyncReply(v11, &v47, (uint64_t *)&v48, 0, 0);
    unint64_t v22 = v48;
    int v48 = 0;
    if (v22) {
      (*(void (**)(const char *))(*(void *)v22 + 8))(v22);
    }
    float v23 = v47;
    unsigned __int8 v47 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v44, v45);
    }
    uint64_t v24 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this + 21));
    uint64_t v25 = IdentifierInternal;
    BOOL v26 = WebKit::RemoteMediaPlayerManager::typeCache(*((void *)this + 21), *((unsigned char *)this + 176));
    size_t v27 = (char *)WTF::fastMalloc((WTF *)0x100);
    WebKit::MediaSourcePrivateRemote::queue((WebKit::MediaSourcePrivateRemote *)v27);
    WebCore::MediaSourcePrivate::MediaSourcePrivate();
    *(void *)size_t v27 = &unk_1EE9EC678;
    *((void *)v27 + 20) = &unk_1EE9EC730;
    unint64_t v28 = *(atomic_uchar **)(v24 + 24);
    if (v28) {
      unint64_t v28 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v28);
    }
    *((void *)v27 + 21) = v28;
    *((void *)v27 + 22) = v24;
    size_t v29 = (void *)WTF::fastMalloc((WTF *)0x28);
    void *v29 = &unk_1EE9B71B0;
    v29[1] = 0;
    uint64_t v30 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v30 = 0;
    *(_OWORD *)(v30 + 8) = xmmword_1994F5F10;
    *(void *)(v30 + 24) = v29;
    v29[2] = v30;
    void *v29 = &unk_1EE9B7280;
    int8x16_t v31 = (atomic_uchar *)*((void *)v27 + 1);
    if (v31) {
      int8x16_t v31 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v31);
    }
    v29[3] = v31;
    v29[4] = v27;
    *((void *)v27 + 23) = v29;
    *((void *)v27 + 24) = v25;
    *((void *)v27 + 25) = v26;
    unint64_t v32 = (atomic_uchar *)*((void *)this + 6);
    if (v32) {
      unint64_t v32 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v32);
    }
    *((void *)v27 + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v32;
    *((void *)v27 + 27) = this;
    *((_WORD *)v27 + 112) = 0;
    if ((*(uint64_t (**)(WebCore::MediaSourcePrivateClient *))(*(void *)a4 + 48))(a4)) {
      long long v33 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSourcePrivateClient *))(*(void *)a4 + 48))(a4);
    }
    else {
      long long v33 = (WTF::StringImpl *)*((void *)this + 14);
    }
    atomic_fetch_add((atomic_uint *volatile)v33 + 2, 1u);
    *((void *)v27 + 29) = v33;
    uint64_t v38 = *((void *)this + 15);
    *((void *)v27 + 30) = v38;
    *((void *)v27 + 31) = 0;
    int v48 = "MediaSourcePrivateRemote";
    uint64_t v49 = 25;
    uint64_t v50 = "MediaSourcePrivateRemote";
    uint64_t v51 = v38;
    if (*((unsigned char *)v33 + 12)) {
      long long v33 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v48);
    }
    uint64_t v39 = *(void *)(v24 + 32);
    uint64_t v40 = WebKit::MediaSourcePrivateRemote::queue(v33);
    IPC::Connection::addWorkQueueMessageReceiver(v39, 0x18u, v40, *((void *)v27 + 23), *((void *)v27 + 24));
    (*(void (**)(WebCore::MediaSourcePrivateClient *, void))(*(void *)a4 + 40))(a4, *((void *)v27 + 30));
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*((atomic_uchar **)v27 + 1));
    int v48 = v27;
    uint64_t result = (const char *)(*(uint64_t (**)(WebCore::MediaSourcePrivateClient *, const char **))(*(void *)a4 + 16))(a4, &v48);
    char v42 = v48;
    int v48 = 0;
    if (v42) {
      uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*((atomic_uchar **)v42 + 1), v41);
    }
    uint64_t v43 = *((void *)this + 59);
    *((void *)this + 59) = v27;
    if (v43) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v43 + 8), v41);
    }
  }
  else
  {
    int v34 = (atomic_uchar *)*((void *)this + 6);
    if (v34) {
      uint64_t v35 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v34);
    }
    else {
      uint64_t v35 = 0;
    }
    unsigned __int16 v36 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(void *)unsigned __int16 v36 = &unk_1EE9ECF50;
    *((void *)v36 + 1) = v35;
    *((void *)v36 + 2) = this;
    *((void *)v36 + 3) = this;
    int v48 = v36;
    WTF::callOnMainRunLoop();
    uint64_t result = v48;
    int v48 = 0;
    if (result) {
      return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::load(WebKit::MediaPlayerPrivateRemote *this, WebCore::MediaStreamPrivate *a2)
{
  char v3 = (atomic_uchar *)*((void *)this + 6);
  if (v3) {
    uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  char v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *char v5 = &unk_1EE9ECF78;
  v5[1] = v4;
  void v5[2] = this;
  v5[3] = this;
  uint64_t v7 = (uint64_t)v5;
  WTF::callOnMainRunLoop();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::platformLayer(WebKit::MediaPlayerPrivateRemote *this)
{
  if (!*((void *)this + 20) && *((_DWORD *)this + 188))
  {
    float v2 = ceilf(WebKit::MediaPlayerPrivateRemote::videoLayerSize(this));
    if (v2 >= 2147500000.0)
    {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else if (v2 <= -2147500000.0)
    {
      uint64_t v4 = 0x80000000;
    }
    else
    {
      uint64_t v4 = (int)v2;
    }
    float v5 = ceilf(v3);
    if (v5 >= 2147500000.0)
    {
      unint64_t v6 = 0x7FFFFFFF00000000;
    }
    else if (v5 <= -2147500000.0)
    {
      unint64_t v6 = 0x8000000000000000;
    }
    else
    {
      unint64_t v6 = (unint64_t)(int)v5 << 32;
    }
    unint64_t v7 = HIDWORD(v6);
    WebKit::createVideoLayerRemote((uint64_t)this, (WebKit::LayerHostingContext *)*((unsigned int *)this + 188), *((unsigned __int8 *)this + 656), v6 | v4, (WKVideoLayerRemote **)&cf);
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    int v9 = (const void *)*((void *)this + 20);
    *((void *)this + 20) = v8;
    if (v9)
    {
      CFRelease(v9);
      CFTypeRef v10 = cf;
      CFTypeRef cf = 0;
      if (v10) {
        CFRelease(v10);
      }
    }
    (*(void (**)(void, void, float, float))(**((void **)this + 19) + 24))(*((void *)this + 19), *((void *)this + 20), (float)(int)v4, (float)(int)v7);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 19) + 16))(*((void *)this + 19));
}

void WebKit::MediaPlayerPrivateRemote::setVideoFullscreenLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 152);
  CFTypeRef cf = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(void *)v3 + 48))(v3, a2, a3, &cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::updateVideoFullscreenInlineImage(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  CFTypeRef v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v4 = 1201;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  int v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setVideoFullscreenFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  v57[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 120);
  v40[0] = "MediaPlayerPrivateRemote";
  v40[1] = 25;
  v40[2] = "setVideoFullscreenFrame";
  void v40[3] = v11;
  if (!*(unsigned char *)(v10 + 12)) {
    return (*(uint64_t (**)(void, float, float, float, float))(**(void **)(a1 + 152) + 64))(*(void *)(a1 + 152), a2, a3, a4, a5);
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v46, (WTF::Logger::LogSiteIdentifier *)v40);
  char v12 = (WTF::String *)WTF::String::String((WTF::String *)&v45, "width = ");
  WTF::String::number((uint64_t *)&v44, v12, a4);
  uint64_t v13 = (WTF::String *)WTF::String::String((WTF::String *)&v43, ", height = ");
  WTF::String::number((uint64_t *)&v42, v13, a5);
  v41[0] = v45;
  uint64_t v50 = v44;
  *(void *)buf = v46;
  int v48 = v42;
  uint64_t v49 = v43;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v41, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, &v47);
  if (v47)
  {
    unint64_t v16 = v42;
    char v42 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v43;
    uint64_t v43 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint8x8_t v18 = v44;
    unsigned int v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    unint64_t v19 = v45;
    uint64_t v45 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v15);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v46;
    uint64_t v46 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v15);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    BOOL v21 = qword_1EB358078;
    unint64_t v22 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      WTF::String::utf8();
      uint64_t v24 = v41[0] ? (char *)v41[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v24;
      _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      unint64_t v22 = v41[0];
      v41[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          unint64_t v22 = (WTF *)WTF::fastFree(v22, v23);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
    }
    if (WebKit2LogMedia)
    {
      uint64_t v25 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v26 = *v25;
        if (v26) {
          break;
        }
        int v27 = *v25;
        atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v27, v26 | 1, memory_order_acquire, memory_order_acquire);
        if (v27 == v26)
        {
          uint64_t v28 = WTF::Logger::observers(v22);
          uint64_t v29 = *(unsigned int *)(v28 + 12);
          if (v29)
          {
            uint64_t v30 = *(uint64_t **)v28;
            uint64_t v31 = *(void *)v28 + 8 * v29;
            do
            {
              uint64_t v32 = *v30;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v40);
              int v52 = 0;
              long long v33 = (WTF::String *)WTF::String::String((WTF::String *)v53, "width = ");
              v53[2] = 0;
              WTF::String::number(&v54, v33, a4);
              int v55 = 0;
              int v34 = (WTF::String *)WTF::String::String((WTF::String *)v56, ", height = ");
              v56[2] = 0;
              WTF::String::number(v57, v34, a5);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v41, (uint64_t)buf, 5uLL);
              (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v32 + 16))(v32, &WebKit2LogMedia, 0, v41);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v35);
              for (uint64_t i = 72; i != -8; i -= 16)
              {
                uint64_t v37 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2) {
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v23);
                  }
                  else {
                    *(_DWORD *)v37 -= 2;
                  }
                }
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          int v38 = 1;
          atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
          if (v38 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v39 = v47;
    unsigned __int8 v47 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v23);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    return (*(uint64_t (**)(void, float, float, float, float))(**(void **)(a1 + 152) + 64))(*(void *)(a1 + 152), a2, a3, a4, a5);
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setVideoFullscreenGravity(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 65WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a2;
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v5 = *(void *)(a1 + 184);
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 1190;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  unint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v8)
  {
    *unint64_t v7 = a2;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
    uint64_t result = (uint64_t)v13;
    uint64_t v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
      return WTF::fastFree(v11, v12);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setVideoFullscreenMode(WebKit::RemoteMediaPlayerManager **this, int a2)
{
  int v10 = a2;
  uint64_t v3 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v4 = this[23];
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1191;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v11 = v5;
  IPC::Encoder::operator<<<int>(v5, &v10);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::videoFullscreenStandbyChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v11);
    if (v11)
    {
      uint64_t v3 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                              + 21))
                     + 32);
      char isVideoFullscreenStandby = WebCore::MediaPlayer::isVideoFullscreenStandby(v11);
      uint64_t v4 = *((void *)this + 23);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 1202;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      char v12 = v5;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, &isVideoFullscreenStandby);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
      uint64_t result = (atomic_uchar *)v12;
      char v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v8, v9);
      }
      unint64_t v7 = (atomic_uchar **)v11;
      uint64_t v11 = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v7);
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::timedMetadata(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::accessLog@<X0>(WebKit::RemoteMediaPlayerManager **this@<X0>, WebKit::RemoteMediaPlayerManager ***a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v5 = (uint64_t)v2[23];
  uint64_t v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3724, v5, &v25, &v24);
  IPC::Connection::sendSyncMessage(v4, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, INFINITY);
  if (!v23)
  {
    LOBYTE(v20) = 0;
    char v21 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, (uint64_t *)&v20);
    if (!v21)
    {
      LOBYTE(v17) = 13;
      int v6 = 1;
      int v19 = 1;
      int v7 = v23;
      if (v23 == -1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v7 = v23;
    if (!v23)
    {
      int v6 = 0;
      int v9 = v22;
      unint64_t v22 = 0;
      uint64_t v2 = v20;
      uint64_t v17 = v9;
      uint64_t v18 = (uint64_t)v20;
      int v19 = 0;
      goto LABEL_8;
    }
LABEL_22:
    unint64_t v16 = (WebKit::MediaPlayerPrivateRemote *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::MediaPlayerPrivateRemote::errorLog(v16);
  }
  if (v23 != 1) {
    goto LABEL_22;
  }
  LOBYTE(v17) = (_BYTE)v22;
  int v6 = 1;
  int v19 = 1;
  int v7 = 1;
LABEL_8:
  ((void (*)(WebKit::RemoteMediaPlayerManager ***, IPC::Decoder **))off_1EE9ECF90[v7])(&v20, &v22);
LABEL_9:
  int v10 = v24;
  uint64_t v24 = 0;
  if (!v10)
  {
    if (v6) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v18 = 0;
    if (v2)
    {
      int v12 = *(_DWORD *)v2;
      *(_DWORD *)v2 += 2;
      goto LABEL_16;
    }
LABEL_21:
    *a2 = 0;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ECD10[v6])(&v22, &v17);
  }
  IPC::Encoder::~Encoder(v10, v8);
  WTF::fastFree(v13, v14);
  if (!v6) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v2 = (WebKit::RemoteMediaPlayerManager **)*MEMORY[0x1E4F30980];
  if (!*MEMORY[0x1E4F30980]) {
    goto LABEL_21;
  }
  int v11 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 4;
  int v12 = v11 + 2;
LABEL_16:
  *a2 = v2;
  if (v12)
  {
    *(_DWORD *)uint64_t v2 = v12;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ECD10[v6])(&v22, &v17);
  }
  uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)v2, (WTF::StringImpl *)v8);
  int v6 = v19;
  if (v19 != -1) {
    return ((uint64_t (*)(void, void))off_1EE9ECD10[v6])(&v22, &v17);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::errorLog@<X0>(WebKit::RemoteMediaPlayerManager **this@<X0>, WebKit::RemoteMediaPlayerManager ***a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v5 = (uint64_t)v2[23];
  uint64_t v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3726, v5, &v25, &v24);
  IPC::Connection::sendSyncMessage(v4, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, INFINITY);
  if (!v23)
  {
    LOBYTE(v20) = 0;
    char v21 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, (uint64_t *)&v20);
    if (!v21)
    {
      LOBYTE(v17) = 13;
      int v6 = 1;
      int v19 = 1;
      int v7 = v23;
      if (v23 == -1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v7 = v23;
    if (!v23)
    {
      int v6 = 0;
      int v9 = v22;
      unint64_t v22 = 0;
      uint64_t v2 = v20;
      uint64_t v17 = v9;
      uint64_t v18 = (uint64_t)v20;
      int v19 = 0;
      goto LABEL_8;
    }
LABEL_22:
    uint64_t v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::MediaPlayerPrivateRemote::setBufferingPolicy(v16);
  }
  if (v23 != 1) {
    goto LABEL_22;
  }
  LOBYTE(v17) = (_BYTE)v22;
  int v6 = 1;
  int v19 = 1;
  int v7 = 1;
LABEL_8:
  ((void (*)(WebKit::RemoteMediaPlayerManager ***, IPC::Decoder **))off_1EE9ECF90[v7])(&v20, &v22);
LABEL_9:
  int v10 = v24;
  uint64_t v24 = 0;
  if (!v10)
  {
    if (v6) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v18 = 0;
    if (v2)
    {
      int v12 = *(_DWORD *)v2;
      *(_DWORD *)v2 += 2;
      goto LABEL_16;
    }
LABEL_21:
    *a2 = 0;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ECD20[v6])(&v22, &v17);
  }
  IPC::Encoder::~Encoder(v10, v8);
  WTF::fastFree(v13, v14);
  if (!v6) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v2 = (WebKit::RemoteMediaPlayerManager **)*MEMORY[0x1E4F30980];
  if (!*MEMORY[0x1E4F30980]) {
    goto LABEL_21;
  }
  int v11 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 4;
  int v12 = v11 + 2;
LABEL_16:
  *a2 = v2;
  if (v12)
  {
    *(_DWORD *)uint64_t v2 = v12;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ECD20[v6])(&v22, &v17);
  }
  uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)v2, (WTF::StringImpl *)v8);
  int v6 = v19;
  if (v19 != -1) {
    return ((uint64_t (*)(void, void))off_1EE9ECD20[v6])(&v22, &v17);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setBufferingPolicy(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v5 = *(void *)(a1 + 184);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1172;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  int v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v8)
  {
    *int v7 = a2;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
    uint64_t result = (uint64_t)v13;
    uint64_t v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
      return WTF::fastFree(v11, v12);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::canSaveMediaData(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 435);
}

uint64_t WebKit::MediaPlayerPrivateRemote::getStartDate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 33);
}

uint64_t WebKit::MediaPlayerPrivateRemote::startTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 35);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setRateDouble(WebKit::RemoteMediaPlayerManager **this, double a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v5 = this[23];
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1182;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v11 = v6;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasClosedCaptions(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 438);
}

double WebKit::MediaPlayerPrivateRemote::maxFastForwardRate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 44);
}

double WebKit::MediaPlayerPrivateRemote::minFastReverseRate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 45);
}

uint64_t WebKit::MediaPlayerPrivateRemote::maxTimeSeekable(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 31);
}

uint64_t WebKit::MediaPlayerPrivateRemote::minTimeSeekable(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 29);
}

double WebKit::MediaPlayerPrivateRemote::seekableTimeRangesLastModifiedTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 46);
}

double WebKit::MediaPlayerPrivateRemote::liveUpdateInterval(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 47);
}

uint64_t WebKit::MediaPlayerPrivateRemote::totalBytes(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPresentationSize(WebKit::RemoteMediaPlayerManager **this, const WebCore::IntSize *a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v5 = this[23];
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1179;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v11 = v6;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v6, (int *)a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::paintCurrentFrameInContext(WebKit::MediaPlayerPrivateRemote *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  uint64_t result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(void *)a2 + 40))(a2);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)WebKit::MediaPlayerPrivateRemote::videoFrameForCurrentTime((unsigned __int8 *)this, &v8);
    int v7 = v8;
    if (v8)
    {
      uint64_t result = (*(uint64_t (**)(WebCore::GraphicsContext *, unsigned int *, const WebCore::FloatRect *, uint64_t, void))(*(void *)a2 + 432))(a2, v8, a3, 1, 0);
      uint64_t v8 = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7 + 2);
        return (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 8))(v7);
      }
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::videoFrameForCurrentTime@<X0>(unsigned __int8 *this@<X0>, void *a2@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (this[680] <= 1u)
  {
    *a2 = 0;
    return this;
  }
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 91);
  if (v4)
  {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    *a2 = v4;
    return this;
  }
  uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 32);
  uint64_t v6 = *((void *)v3 + 23);
  uint64_t v41 = 0;
  IPC::Connection::createSyncMessageEncoder(3729, v6, &v41, &v40);
  IPC::Connection::sendSyncMessage(v5, v41, (uint64_t *)&v40, 0, (uint64_t)&v38, INFINITY);
  if (v39)
  {
    if (v39 == 1)
    {
      v35[0] = (_BYTE)v38;
      int v7 = 1;
      int v37 = 1;
      int v8 = 1;
LABEL_23:
      ((void (*)(long long *, uint64_t **))off_1EE9ECF90[v8])(&v42, &v38);
      goto LABEL_24;
    }
    goto LABEL_42;
  }
  int v9 = v38;
  IPC::Decoder::decode<std::optional<WebKit::RemoteVideoFrameProxyProperties>>(v38, (uint64_t)v35);
  if (v35[64])
  {
    unint64_t v10 = v9[1];
    uint64_t v11 = *v9;
    unint64_t v12 = v9[2] - *v9;
    if (v10 <= v12)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      *int v9 = 0;
      v9[1] = 0;
      uint64_t v18 = v9[3];
      if (v18)
      {
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
          uint64_t v17 = *v9;
          uint64_t v16 = v9[1];
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
        }
      }
    }
    else
    {
      uint64_t v13 = (unsigned __int8 *)(v11 + v12);
      void v9[2] = (uint64_t)(v13 + 1);
      if (v11)
      {
        unsigned int v14 = *v13;
        if (v14 < 2)
        {
          long long v42 = *(_OWORD *)&v35[1];
          long long v43 = *(_OWORD *)&v35[17];
          *(_OWORD *)unsigned int v44 = *(_OWORD *)&v35[33];
          *(_OWORD *)&v44[15] = *(_OWORD *)&v35[48];
          int v8 = v39;
          if (!v39)
          {
            int v7 = 0;
            *(_OWORD *)&v35[9] = v42;
            *(_OWORD *)&v35[25] = v43;
            v35[8] = v35[0];
            LOBYTE(v3WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v14 != 0;
            uint64_t v15 = v38;
            int v38 = 0;
            *(_OWORD *)&v35[41] = *(_OWORD *)v44;
            *(_OWORD *)&v35[56] = *(_OWORD *)&v44[15];
            *(void *)uint64_t v35 = v15;
            int v37 = 0;
            goto LABEL_23;
          }
LABEL_42:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        goto LABEL_16;
      }
      uint64_t v16 = v10;
      uint64_t v17 = 0;
    }
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *int v9 = 0;
    v9[1] = 0;
    uint64_t v19 = v9[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        uint64_t v11 = *v9;
        unint64_t v10 = v9[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
LABEL_16:
    *int v9 = 0;
    v9[1] = 0;
    uint64_t v20 = v9[3];
    if (v20 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v11);
    }
  }
  char v21 = (void *)*v9;
  uint64_t v22 = v9[1];
  *int v9 = 0;
  v9[1] = 0;
  uint64_t v23 = v9[3];
  if (v23) {
    BOOL v24 = v22 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24) {
    (*(void (**)(uint64_t, void *))(*(void *)v23 + 16))(v23, v21);
  }
  v35[0] = 13;
  int v7 = 1;
  int v37 = 1;
  int v8 = v39;
  if (v39 != -1) {
    goto LABEL_23;
  }
LABEL_24:
  this = (unsigned __int8 *)v40;
  uint64_t v40 = 0;
  if (this)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)this, v21);
    this = (unsigned __int8 *)WTF::fastFree(v26, v27);
    if (v7) {
      goto LABEL_26;
    }
  }
  else if (v7)
  {
LABEL_26:
    *a2 = 0;
    int v25 = 1;
    return (unsigned __int8 *)((uint64_t (*)(long long *, unsigned char *))off_1EE9ECD30[v25])(&v42, v35);
  }
  long long v43 = *(_OWORD *)&v35[24];
  *(_OWORD *)unsigned int v44 = *(_OWORD *)&v35[40];
  *(_OWORD *)&v44[16] = *(_OWORD *)&v35[56];
  uint64_t v45 = v36;
  long long v42 = *(_OWORD *)&v35[8];
  if ((_BYTE)v36)
  {
    if (v44[24])
    {
      uint64_t v28 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v3 + 21));
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v38, (uint64_t **)(v28 + 32));
      uint64_t v29 = (atomic_uchar *volatile *)v38;
      uint64_t v30 = (WebKit::GPUProcessConnection *)WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v3 + 21));
      uint64_t v31 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v30);
      uint64_t v32 = WTF::fastMalloc((WTF *)0x88);
      WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v32, v29, v31, (uint64_t)&v42);
      long long v33 = (unsigned int *)*((void *)v3 + 90);
      *((void *)v3 + 90) = v32;
      if (v33 && atomic_fetch_add((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v33 + 2);
        (*(void (**)(unsigned int *))(*(void *)v33 + 8))(v33);
      }
      this = (unsigned __int8 *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v38);
    }
    else
    {
      this = (unsigned __int8 *)*((void *)v3 + 90);
      *((void *)v3 + 90) = 0;
      if (this && atomic_fetch_add((atomic_uint *volatile)this + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this + 2);
        this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)this + 8))(this);
      }
    }
  }
  uint64_t v34 = *((void *)v3 + 90);
  if (v34) {
    atomic_fetch_add((atomic_uint *volatile)(v34 + 8), 1u);
  }
  *a2 = v34;
  int v25 = v37;
  if (v37 != -1) {
    return (unsigned __int8 *)((uint64_t (*)(long long *, unsigned char *))off_1EE9ECD30[v25])(&v42, v35);
  }
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::readyState(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 680);
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasAvailableVideoFrame(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 439);
}

uint64_t WebKit::MediaPlayerPrivateRemote::wirelessPlaybackTargetName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 304);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::wirelessPlaybackTargetType(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 338);
}

uint64_t WebKit::MediaPlayerPrivateRemote::wirelessVideoPlaybackDisabled(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 440);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setWirelessVideoPlaybackDisabled(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  *((unsigned char *)this + 440) = a2;
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 32);
  char v11 = a2;
  uint64_t v5 = *((void *)this + 23);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1196;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::currentPlaybackTargetIsWirelessChanged(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  *((unsigned char *)this + 714) = a2;
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v5);
    uint64_t result = (atomic_uchar *)v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::currentPlaybackTargetIsWirelessChanged(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::isCurrentPlaybackTargetWireless(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 714);
}

WTF::StringImpl *WebKit::MediaPlayerPrivateRemote::setWirelessPlaybackTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v5 = (WebCore::MediaPlaybackTargetContextCocoa *)(*(uint64_t (**)(void))(**(void **)a2 + 24))();
  WebKit::MediaPlaybackTargetContextSerialized::MediaPlaybackTargetContextSerialized((uint64_t)v15, v5);
  uint64_t v6 = *(void *)(a1 + 184);
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 1195;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v19 = v7;
  IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::encode(v7, (uint64_t)v15);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v19, 0, 0);
  int v9 = v19;
  uint64_t v19 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v13, v14);
  }
  unint64_t v10 = v18;
  uint64_t v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  char v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setShouldPlayToPlaybackTarget(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  uint64_t v5 = this[23];
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1189;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::didPassCORSAccessCheck(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 441);
}

uint64_t WebKit::MediaPlayerPrivateRemote::isCrossOrigin(WebKit::MediaPlayerPrivateRemote *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t v3 = (char *)a2 + 8;
  if (WebCore::operator==())
  {
    unsigned int v4 = *((unsigned __int16 *)this + 216);
    unsigned int v5 = v4 >> 8;
    return v4 | (v5 << 8);
  }
  LODWORD(vWebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = -1640531527;
  uint64_t v7 = *((void *)this + 81);
  if (!v7) {
    goto LABEL_5;
  }
  unsigned int v8 = *(_DWORD *)(v7 - 8);
  LODWORD(v38) = -1640531527;
  WORD2(v38) = 0;
  BYTE6(v38) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v38, (uint64_t)v3);
  uint64_t v9 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v38) & v8;
  uint64_t v10 = v7 + 40 * v9;
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10);
  if (v11)
  {
LABEL_5:
    uint64_t v10 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                             + 21))
                    + 32);
    uint64_t v12 = *((void *)this + 23);
    uint64_t v44 = 0;
    IPC::Connection::createSyncMessageEncoder(3727, v12, &v44, &v43);
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v43, (uint64_t)v3);
    IPC::Connection::sendSyncMessage(v10, v44, (uint64_t *)&v43, 0, (uint64_t)&v41, INFINITY);
    int v13 = v42;
    if (v42)
    {
      if (v42 == 1)
      {
        LOBYTE(v38) = (_BYTE)v41;
LABEL_11:
        int v40 = v13;
        int v17 = v13;
        goto LABEL_12;
      }
    }
    else
    {
      int v14 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(v41);
      if ((v14 & 0xFF0000) == 0) {
        goto LABEL_41;
      }
      if (!v42)
      {
        LOWORD(v10) = v14;
        uint64_t v16 = v41;
        uint64_t v41 = 0;
        int v38 = v16;
        __int16 v39 = v14;
        goto LABEL_11;
      }
    }
LABEL_40:
    while (2)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
      LOBYTE(v38) = 13;
      int v13 = 1;
      int v40 = 1;
      int v17 = v42;
      if (v42 == -1)
      {
LABEL_13:
        uint64_t v18 = v43;
        long long v43 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v15);
          WTF::fastFree(v36, v37);
        }
        unsigned int v5 = 0;
        if (v13) {
          LOWORD(v4) = 0;
        }
        else {
          LOWORD(v4) = v10;
        }
        if ((unsigned __int16)v4 < 0x100u) {
          goto LABEL_55;
        }
        this = (WebKit::MediaPlayerPrivateRemote *)((char *)this + 648);
        uint64_t v19 = *(void *)this;
        if (*(void *)this
          || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::optional<BOOL>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::optional<BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)this),
              (uint64_t v19 = *(void *)this) != 0))
        {
          int v20 = *(_DWORD *)(v19 - 8);
        }
        else
        {
          int v20 = 0;
        }
        LODWORD(v41) = v6;
        WORD2(v41) = 0;
        BYTE6(v41) = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v41, (uint64_t)v3);
        unsigned int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41) & v20;
        uint64_t v10 = v19 + 40 * v21;
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10);
        if ((v22 & 1) == 0)
        {
          uint64_t v6 = 0;
          int v23 = 1;
          while (1)
          {
            int v24 = *(_DWORD *)(v10 + 24);
            if (v24) {
              break;
            }
            if (*(void *)v10 != -1) {
              goto LABEL_26;
            }
            uint64_t v6 = v10;
LABEL_29:
            unsigned int v21 = (v21 + v23) & v20;
            uint64_t v10 = v19 + 40 * v21;
            WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10);
            ++v23;
            if (v25)
            {
              if (v6)
              {
                *(_WORD *)(v6 + 32) = 0;
                *(_OWORD *)uint64_t v6 = 0u;
                *(_OWORD *)(v6 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
                --*(_DWORD *)(*(void *)this - 16);
                uint64_t v10 = v6;
              }
              goto LABEL_45;
            }
          }
          if (v24 != 1) {
            continue;
          }
LABEL_26:
          if (WebCore::operator==()) {
            goto LABEL_54;
          }
          goto LABEL_29;
        }
LABEL_45:
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v10, (uint64_t)v3);
        *(_WORD *)(v10 + 32) = v4;
        uint64_t v29 = *(void *)this;
        if (*(void *)this) {
          int v30 = *(_DWORD *)(v29 - 12) + 1;
        }
        else {
          int v30 = 1;
        }
        *(_DWORD *)(v29 - 12) = v30;
        uint64_t v31 = *(void *)this;
        if (*(void *)this) {
          int v32 = *(_DWORD *)(v31 - 12);
        }
        else {
          int v32 = 0;
        }
        uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
        unint64_t v34 = *(unsigned int *)(v31 - 4);
        if (v34 > 0x400)
        {
          if (v34 > 2 * v33)
          {
LABEL_54:
            int v13 = v40;
            unsigned int v5 = BYTE1(v4);
            if (v40 == -1) {
              return v4 | (v5 << 8);
            }
LABEL_55:
            ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ECD40[v13])(&v41, &v38);
            return v4 | (v5 << 8);
          }
        }
        else if (3 * v34 > 4 * v33)
        {
          goto LABEL_54;
        }
        WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::optional<BOOL>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::optional<BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)this);
        goto LABEL_54;
      }
      break;
    }
LABEL_12:
    ((void (*)(char *, IPC::Decoder **))off_1EE9ECF90[v17])(&v45, &v41);
    goto LABEL_13;
  }
  int v26 = 1;
  while (1)
  {
    int v27 = *(_DWORD *)(v10 + 24);
    if (v27) {
      break;
    }
    if (*(void *)v10 != -1) {
      goto LABEL_36;
    }
LABEL_37:
    uint64_t v9 = (v9 + v26) & v8;
    uint64_t v10 = v7 + 40 * v9;
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10);
    ++v26;
    if (v28) {
      goto LABEL_5;
    }
  }
  if (v27 != 1) {
    goto LABEL_40;
  }
LABEL_36:
  if ((WebCore::operator==() & 1) == 0) {
    goto LABEL_37;
  }
  unsigned int v4 = *(unsigned __int16 *)(v7 + 40 * v9 + 32);
  unsigned int v5 = v4 >> 8;
  if (!(v4 >> 8)) {
    goto LABEL_5;
  }
  return v4 | (v5 << 8);
}

uint64_t WebKit::MediaPlayerPrivateRemote::mediaTimeForTimeValue(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

double WebKit::MediaPlayerPrivateRemote::maximumDurationToCacheMediaTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 25);
}

uint64_t WebKit::MediaPlayerPrivateRemote::decodedFrameCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::droppedFrameCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::audioDecodedByteCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::videoDecodedByteCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::audioSourceProvider(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t result = *((void *)this + 58);
  if (!result)
  {
    WebKit::RemoteAudioSourceProvider::create(*((void *)this + 23), (uint64_t)this + 56, &v4);
    uint64_t result = v4;
    uint64_t v3 = *((void *)this + 58);
    *((void *)this + 58) = v4;
    if (v3)
    {
      WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      return *((void *)this + 58);
    }
  }
  return result;
}

void WebKit::MediaPlayerPrivateRemote::createSession(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setCDM(uint64_t this, WebCore::LegacyCDM *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    {
      uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v6);
    }
    uint64_t v4 = WebKit::WebProcess::supplement<WebKit::RemoteLegacyCDMFactory>(WebKit::WebProcess::singleton(void)::process);
    this = WebKit::RemoteLegacyCDMFactory::findCDM((uint64_t)v4, *((void *)a2 + 1));
    if (this)
    {
      uint64_t v5 = *(void *)(v3 + 184);
      return WebKit::RemoteLegacyCDM::setPlayerId(this, v5);
    }
  }
  return this;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setCDMSession(uint64_t a1, void *a2)
{
  if (a2 && (*(unsigned int (**)(void *))(*a2 + 24))(a2) == 4)
  {
    uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                   + 32);
    uint64_t v6 = a2[4];
    char v7 = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                   + 32);
    LOBYTE(vWebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    char v7 = 0;
  }
  unsigned int v8 = &v6;
  return IPC::Connection::send<Messages::RemoteMediaPlayerProxy::SetLegacyCDMSession>(v4, (uint64_t *)&v8, *(void *)(a1 + 184));
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::keyAdded(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1156;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::mediaPlayerKeyNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[1] = a2;
  v8[2] = a3;
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), v8);
    if (v8[0])
    {
      WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v7);
      WebCore::MediaPlayer::keyNeeded();
      uint64_t result = v7;
      char v7 = 0;
      if (result) {
        uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v5);
      }
      uint64_t v6 = (atomic_uchar **)v8[0];
      v8[0] = 0;
      if (v6) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v6);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::cdmInstanceAttached(WebKit::RemoteMediaPlayerManager **this, WebCore::CDMInstance *a2)
{
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(WebCore::CDMInstance *))(*(void *)a2 + 40))(a2);
  if (result == 3)
  {
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
    uint64_t v6 = this[23];
    char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v7 = 1150;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    char v11 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)a2 + 5);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::cdmInstanceDetached(WebKit::RemoteMediaPlayerManager **this, WebCore::CDMInstance *a2)
{
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(WebCore::CDMInstance *))(*(void *)a2 + 40))(a2);
  if (result == 3)
  {
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
    uint64_t v6 = this[23];
    char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v7 = 1151;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    char v11 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)a2 + 5);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::attemptToDecryptWithInstance(WebKit::RemoteMediaPlayerManager **this, WebCore::CDMInstance *a2)
{
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(WebCore::CDMInstance *))(*(void *)a2 + 40))(a2);
  if (result == 3)
  {
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
    uint64_t v6 = this[23];
    char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v7 = 1146;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    char v11 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)a2 + 5);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::waitingForKeyChanged(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  *((unsigned char *)this + 715) = a2;
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v5);
    uint64_t result = (atomic_uchar *)v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::waitingForKeyChanged(v5);
      uint64_t v4 = (atomic_uchar **)v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::MediaPlayerPrivateRemote::initializationDataEncountered(uint64_t a1)
{
  JSC::ArrayBuffer::create();
  uint64_t v2 = *(atomic_uchar **)(a1 + 128);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *(void *)(a1 + 136), &v7);
    if (v7)
    {
      uint64_t v3 = v8;
      unsigned int v8 = 0;
      uint64_t v6 = v3;
      WebCore::MediaPlayer::initializationDataEncountered();
      if (v6) {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
      }
      uint64_t v4 = v7;
      char v7 = 0;
      if (v4) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
      }
    }
  }
  uint64_t result = v8;
  unsigned int v8 = 0;
  if (result) {
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::waitingForKey(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 715);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setShouldContinueAfterKeyNeeded(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  uint64_t v5 = this[23];
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1184;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setTextTrackRepresentation(uint64_t a1, uint64_t a2)
{
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 152) + 80);

  return v3();
}

uint64_t WebKit::MediaPlayerPrivateRemote::syncTextTrackBounds(WebKit::MediaPlayerPrivateRemote *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 19) + 88))();
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::tracksChanged(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1200;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::beginSimulatedHDCPError(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1148;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::endSimulatedHDCPError(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1154;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::languageOfPrimaryAudioTrack@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 296);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::extraMemoryCost(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

__n128 WebKit::MediaPlayerPrivateRemote::videoPlaybackQualityMetrics@<Q0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, uint64_t a2@<X8>)
{
  WTF::MonotonicTime::now(this);
  double v5 = v4;
  double v6 = *((double *)this + 84);
  if (v6 == 0.0)
  {
    double v7 = 1.0;
    goto LABEL_5;
  }
  if (vabdd_f64(v4 - *((double *)this + 83), v6) > 0.25)
  {
    double v7 = v4 - *((double *)this + 83);
LABEL_5:
    WebKit::MediaPlayerPrivateRemote::updateVideoPlaybackMetricsUpdateInterval(this, *(const WTF::Seconds **)&v7);
  }
  *((double *)this + 83) = v5;
  *(void *)(a2 + 32) = *((void *)this + 53);
  __n128 result = *(__n128 *)((char *)this + 392);
  long long v9 = *(_OWORD *)((char *)this + 408);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v9;
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::notifyTrackModeChanged(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  double v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v4 = 1160;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  __n128 result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::notifyActiveSourceBuffersChanged(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  double v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v4 = 1159;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  __n128 result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::applicationWillResignActive(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  double v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v4 = 1145;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  __n128 result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::applicationDidBecomeActive(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v3 = this[23];
  double v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v4 = 1144;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  __n128 result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPreferredDynamicRangeMode(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v5 = *(void *)(a1 + 184);
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1177;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  __n128 result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::performTaskAtTime(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v6 = *(atomic_uchar **)(a1 + 48);
  if (v6) {
    double v7 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  }
  else {
    double v7 = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  long long v9 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                            + 32);
  uint64_t v10 = *(void *)(a1 + 184);
  char v11 = (void *)WTF::fastMalloc((WTF *)0x20);
  *char v11 = &unk_1EE9ECFB0;
  v11[1] = v7;
  void v11[2] = a1;
  v11[3] = v8;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v13 = 1163;
  *((void *)v13 + 1) = v10;
  *((void *)v13 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  unsigned int v21 = v13;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v13, a3);
  v20[0] = (uint64_t)v11;
  v20[1] = v12;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v21, v20, 0, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  unsigned int v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v18, v19);
  }
  return 1;
}

BOOL WebKit::MediaPlayerPrivateRemote::playAtHostTime(WebKit::RemoteMediaPlayerManager **this, const WTF::MonotonicTime *a2)
{
  int v2 = *((unsigned __int8 *)this + 212);
  if (*((unsigned char *)this + 212))
  {
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
    double v6 = this[23];
    double v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)double v7 = 1165;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    int v13 = v7;
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v7, *(double *)a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
    long long v9 = v13;
    int v13 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v11, v12);
    }
  }
  return v2 != 0;
}

BOOL WebKit::MediaPlayerPrivateRemote::pauseAtHostTime(WebKit::RemoteMediaPlayerManager **this, const WTF::MonotonicTime *a2)
{
  int v2 = *((unsigned __int8 *)this + 213);
  if (*((unsigned char *)this + 213))
  {
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
    double v6 = this[23];
    double v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)double v7 = 1162;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    int v13 = v7;
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v7, *(double *)a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
    long long v9 = v13;
    int v13 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v11, v12);
    }
  }
  return v2 != 0;
}

__n128 WebKit::MediaPlayerPrivateRemote::videoFrameMetadata@<Q0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 9WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *((void *)this + 107);
  long long v2 = *(_OWORD *)((char *)this + 840);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 824);
  *(_OWORD *)(a2 + 80) = v2;
  long long v3 = *(_OWORD *)((char *)this + 776);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 760);
  *(_OWORD *)(a2 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v3;
  __n128 result = *(__n128 *)((char *)this + 808);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 792);
  *(__n128 *)(a2 + 48) = result;
  *((unsigned char *)this + 760) = 0;
  *((unsigned char *)this + 85WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::startVideoFrameMetadataGathering(WebKit::MediaPlayerPrivateRemote *this)
{
  *((unsigned char *)this + 864) = 1;
  uint64_t v2 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 32);
  uint64_t v3 = *((void *)this + 23);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1197;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  __n128 result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::stopVideoFrameMetadataGathering(WebKit::MediaPlayerPrivateRemote *this)
{
  *((unsigned char *)this + 864) = 0;
  uint64_t v2 = (unsigned int *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 32);
  uint64_t v4 = *((void *)this + 23);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1198;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  __n128 result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::playerContentBoxRectChanged(WebKit::RemoteMediaPlayerManager **this, const WebCore::LayoutRect *a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  uint64_t v5 = this[23];
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1166;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(v6, (int *)a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  __n128 result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setShouldDisableHDR(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  uint64_t v5 = this[23];
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1185;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  __n128 result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WTF::StringImpl *WebKit::MediaPlayerPrivateRemote::requestResource(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a2;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 144) + 32))(&v44);
  uint64_t v4 = v44;
  if (v44)
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
    double v6 = *(atomic_uchar *volatile **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                                    + 32);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
    uint64_t v7 = v44;
    *(_DWORD *)(v5 + 8) = 1;
    *(void *)uint64_t v5 = &unk_1EE9ED638;
    v43[0] = 0;
    *(void *)(v5 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v6;
    *(void *)(v5 + 24) = v7;
    *(void *)(v5 + 32) = a2;
    uint64_t v36 = (WTF::StringImpl *)v5;
    WebCore::PlatformMediaResource::setClient(v4, (uint64_t *)&v36);
    uint64_t v8 = (unsigned int *)v36;
    uint64_t v36 = 0;
    if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
    }
    __n128 result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v43);
    char v11 = (uint64_t *)(a1 + 488);
    uint64_t v12 = *(void *)(a1 + 488);
    if (v12
      || (result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 488), 0), (uint64_t v12 = *v11) != 0))
    {
      int v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v45;
    unint64_t v15 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
    unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    unsigned int v18 = v13 & ((v17 >> 31) ^ v17);
    uint64_t v19 = (uint64_t *)(v12 + 16 * v18);
    uint64_t v20 = *v19;
    if (!*v19)
    {
LABEL_16:
      *uint64_t v19 = v14;
      uint64_t v23 = v44;
      uint64_t v44 = 0;
      uint64_t v24 = v19[1];
      v19[1] = v23;
      if (v24) {
        __n128 result = (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v24 + 8), v10);
      }
      uint64_t v25 = *v11;
      if (*v11) {
        int v26 = *(_DWORD *)(v25 - 12) + 1;
      }
      else {
        int v26 = 1;
      }
      *(_DWORD *)(v25 - 12) = v26;
      uint64_t v30 = *v11;
      if (*v11) {
        int v31 = *(_DWORD *)(v30 - 12);
      }
      else {
        int v31 = 0;
      }
      uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
      unint64_t v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32) {
          goto LABEL_41;
        }
      }
      else if (3 * v33 > 4 * v32)
      {
        goto LABEL_41;
      }
      __n128 result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v11, v19);
      goto LABEL_41;
    }
    unsigned int v21 = 0;
    int v22 = 1;
    while (v20 != v45)
    {
      if (v20 == -1) {
        unsigned int v21 = v19;
      }
      unsigned int v18 = (v18 + v22) & v13;
      uint64_t v19 = (uint64_t *)(v12 + 16 * v18);
      uint64_t v20 = *v19;
      ++v22;
      if (!*v19)
      {
        if (v21)
        {
          *unsigned int v21 = 0;
          v21[1] = 0;
          --*(_DWORD *)(*v11 - 16);
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                    + 32);
    uint64_t v36 = 0;
    int v37 = 0;
    WTF::URL::invalidate((WTF::URL *)&v37);
    int v38 = 0;
    int v39 = 0;
    __int16 v40 = 3;
    CFTypeRef cf = 0;
    char v42 = 1;
    v43[0] = (atomic_uchar *volatile *)&v45;
    v43[1] = (atomic_uchar *volatile *)&v36;
    IPC::Connection::send<Messages::RemoteMediaResourceManager::LoadFailed>(v27, (uint64_t)v43, 0, 0, 0);
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    if (v28) {
      CFRelease(v28);
    }
    uint64_t v29 = v38;
    int v38 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    unint64_t v34 = v37;
    int v37 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    __n128 result = v36;
    uint64_t v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_41:
  uint64_t v35 = v44;
  uint64_t v44 = 0;
  if (v35) {
    return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v35 + 8), v10);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteMediaResourceManager::LoadFailed>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1218;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  unint64_t v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v10, *(WebCore::ResourceError **)(a2 + 8));
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  int v13 = v17;
  unint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::MediaPlayerPrivateRemote::sendH2Ping(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 16))();
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::removeResource(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 488);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 488), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::take(v2, v3, &v7);
  __n128 result = v7;
  if (v7)
  {
    __n128 result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v7 + 24))(v7);
    double v6 = v7;
    uint64_t v7 = 0;
    if (v6) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((atomic_uchar **)v6 + 1), v5);
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::resourceNotSupported(WebKit::MediaPlayerPrivateRemote *this)
{
  __n128 result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v4);
    if (v4)
    {
      __n128 result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 8) + 8) + 88))(*(void *)(*(void *)(v4 + 8) + 8));
      uint64_t v3 = (atomic_uchar **)v4;
      uint64_t v4 = 0;
      if (v3) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::activeSourceBuffersChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  __n128 result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v4);
    if (v4)
    {
      __n128 result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 8) + 8) + 160))(*(void *)(*(void *)(v4 + 8) + 8));
      uint64_t v3 = (atomic_uchar **)v4;
      uint64_t v4 = 0;
      if (v3) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::getRawCookies(uint64_t a1)
{
  __n128 result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v4);
    __n128 result = v4;
    if (v4)
    {
      __n128 result = (atomic_uchar *)WebCore::MediaPlayer::getRawCookies();
      uint64_t v3 = (atomic_uchar **)v4;
      uint64_t v4 = 0;
      if (v3) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
      }
    }
  }
  return result;
}

char *non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logChannel(WebKit::MediaPlayerPrivateRemote *this)
{
  return &WebKit2LogMedia;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::requestHostingContextID(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  if (*(_DWORD *)(a1 + 752))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (IPC::Encoder *)v4(v3);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 736);
    uint64_t v8 = *(unsigned int *)(a1 + 748);
    if (v8 == *(_DWORD *)(a1 + 744))
    {
      uint64_t v2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)a2);
      uint64_t v8 = *(unsigned int *)(a1 + 748);
      long long v9 = (void *)(*(void *)(a1 + 736) + 8 * v8);
    }
    else
    {
      long long v9 = (void *)(*v7 + 8 * v8);
    }
    uint64_t v10 = *v2;
    *uint64_t v2 = 0;
    *long long v9 = v10;
    *(_DWORD *)(a1 + 748) = v8 + 1;
    char v11 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                               + 32);
    uint64_t v12 = *(atomic_uchar **)(a1 + 48);
    if (v12) {
      int v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = *(void *)(a1 + 184);
    unint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unint64_t v15 = &unk_1EE9ECFD8;
    v15[1] = v13;
    uint64_t v15[2] = a1;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v17 = 1170;
    *((void *)v17 + 1) = v14;
    *((void *)v17 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    v22[1] = v16;
    uint64_t v23 = v17;
    v22[0] = (uint64_t)v15;
    IPC::Connection::sendMessageWithAsyncReply(v11, &v23, v22, 0, 0);
    uint64_t v19 = v22[0];
    v22[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    __n128 result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      return (IPC::Encoder *)WTF::fastFree(v20, v21);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::hostingContextID(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned int *)this + 188);
}

uint64_t WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID(uint64_t this, void *a2)
{
  if (*(_DWORD *)(this + 752) != a2)
  {
    uint64_t v3 = this;
    *(_DWORD *)(this + 752) = a2;
    uint64_t v4 = *(const void **)(this + 160);
    *(void *)(v3 + 160) = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(void **)(v3 + 736);
    char v11 = v5;
    uint64_t v6 = *(unsigned int *)(v3 + 748);
    int v12 = *(_DWORD *)(v3 + 744);
    int v13 = v6;
    v10[0] = 0;
    *(void *)(v3 + 73WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    v10[1] = 0;
    *(void *)(v3 + 744) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, a2);
    if (v6)
    {
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v5;
        *v5++ = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v9 + 16))(v9, a2);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        v8 -= 8;
      }
      while (v8);
    }
    return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
  }
  return this;
}

void *WebKit::MediaPlayerPrivateRemote::audioTrackPrivateRemote@<X0>(atomic_uchar *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = 0;
  unint64_t v10 = a2;
  uint64_t v6 = this + 480;
  atomic_compare_exchange_strong_explicit(this + 480, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](this + 480);
  }
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)this + 62, &v10);
  if (result)
  {
    uint64_t v8 = result[3];
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::videoTrackPrivateRemote@<X0>(atomic_uchar *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = 0;
  unint64_t v10 = a2;
  uint64_t v6 = this + 480;
  atomic_compare_exchange_strong_explicit(this + 480, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](this + 480);
  }
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)this + 67, &v10);
  if (result)
  {
    uint64_t v8 = result[3];
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void *WebKit::MediaPlayerPrivateRemote::textTrackPrivateRemote@<X0>(atomic_uchar *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = 0;
  unint64_t v10 = a2;
  uint64_t v6 = this + 480;
  atomic_compare_exchange_strong_explicit(this + 480, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](this + 480);
  }
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((void *)this + 72, &v10);
  if (result)
  {
    uint64_t v8 = result[3];
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setShouldCheckHardwareSupport(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  char v5 = this[23];
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1183;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  __n128 result = v12;
  int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::isInFullscreenOrPictureInPictureChanged(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
  char v11 = a2;
  char v5 = this[23];
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1155;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  __n128 result = v12;
  int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::queue(WebKit::MediaSourcePrivateRemote *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&_MergedGlobals_108, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&_MergedGlobals_108, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::MediaSourcePrivateRemote::queue(void)::$_0 &&>>);
  }
  return qword_1EB359E58;
}

uint64_t WebKit::MediaSourcePrivateRemote::logger(WebKit::MediaSourcePrivateRemote *this)
{
  return *((void *)this + 29);
}

char *WebKit::MediaSourcePrivateRemote::logChannel(WebKit::MediaSourcePrivateRemote *this)
{
  return &WebKit2LogMedia;
}

const char *WebKit::MediaSourcePrivateRemote::logClassName(WebKit::MediaSourcePrivateRemote *this)
{
  return "MediaSourcePrivateRemote";
}

uint64_t WebKit::MediaSourcePrivateRemote::logIdentifier(WebKit::MediaSourcePrivateRemote *this)
{
  return *((void *)this + 30);
}

void WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote(WebKit::MediaSourcePrivateRemote *this, void *a2)
{
  uint64_t v3 = *((void *)this + 29);
  uint64_t v4 = *((void *)this + 30);
  v11[0] = "MediaSourcePrivateRemote";
  v11[1] = 25;
  void v11[2] = "~MediaSourcePrivateRemote";
  v11[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  char v5 = (atomic_uchar *)*((void *)this + 21);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v5, *((void *)this + 22), v11);
    if (v11[0])
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(v11[0] + 32), 0x18u, *((void *)this + 24));
      uint64_t v6 = v11[0];
      v11[0] = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 24), a2);
      }
    }
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (atomic_uchar *)*((void *)this + 26);
  *((void *)this + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
  }
  uint64_t v9 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), a2);
  }
  unint64_t v10 = (atomic_uchar *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, a2);
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote(WebKit::MediaSourcePrivateRemote *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote((WebKit::MediaSourcePrivateRemote *)((char *)this - 160), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::MediaSourcePrivateRemote::addSourceBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(atomic_uchar **)(a1 + 208);
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v7, *(void *)(a1 + 216), &v59);
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v8 = *(atomic_uchar **)(a1 + 168);
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v8, *(void *)(a1 + 176), &v58);
  }
  else {
    uint64_t v58 = 0;
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 224));
  if (v9)
  {
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v10 = v58;
    if (!v58)
    {
      uint64_t v16 = 1;
      goto LABEL_82;
    }
    if (!v59)
    {
      uint64_t v58 = 0;
      uint64_t v16 = 1;
LABEL_81:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 24), a2);
      goto LABEL_82;
    }
    unsigned __int8 v57 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v11 = *(void *)(a1 + 232);
    uint64_t v12 = *(void *)(a1 + 240);
    v54[0] = "MediaSourcePrivateRemote";
    v54[1] = 25;
    void v54[2] = "addSourceBuffer";
    v54[3] = v12;
    if (*(unsigned char *)(v11 + 12) && WebKit2LogMedia && byte_1EB358068 >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v62, (WTF::Logger::LogSiteIdentifier *)v54);
      WebCore::ContentType::toJSONString((uint64_t *)&v61, (WebCore::ContentType *)a2);
      *(void *)buf = v62;
      v60[0] = v61;
      uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v60, &v63);
      if (!v63)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t v15 = v61;
      uint64_t v61 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      unint64_t v17 = v62;
      long long v62 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v14);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      unsigned int v18 = qword_1EB358078;
      uint64_t v19 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
      if (v19)
      {
        WTF::String::utf8();
        unsigned int v21 = v60[0] ? (char *)v60[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v21;
        _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v19 = v60[0];
        v60[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1) {
            uint64_t v19 = (WTF *)WTF::fastFree(v19, v20);
          }
          else {
            --*(_DWORD *)v19;
          }
        }
      }
      if (WebKit2LogMedia && byte_1EB358068 >= 4u)
      {
        int v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v23 = *v22;
          if (v23) {
            break;
          }
          int v24 = *v22;
          atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
          if (v24 == v23)
          {
            uint64_t v25 = WTF::Logger::observers(v19);
            uint64_t v26 = *(unsigned int *)(v25 + 12);
            if (v26)
            {
              uint64_t v27 = *(uint64_t **)v25;
              uint64_t v28 = *(void *)v25 + 8 * v26;
              do
              {
                uint64_t v29 = *v27;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v54);
                LODWORD(v65) = 1;
                WebCore::ContentType::toJSONString((uint64_t *)v66, (WebCore::ContentType *)a2);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v60, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v29 + 16))(v29, &WebKit2LogMedia, 4, v60);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v30);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  uint64_t v32 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2) {
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v20);
                    }
                    else {
                      *(_DWORD *)v32 -= 2;
                    }
                  }
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v28);
            }
            int v33 = 1;
            atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
            if (v33 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      unint64_t v34 = v63;
      int v63 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v20);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    *(void *)buf = a1;
    *(void *)&buf[8] = &v57;
    uint64_t v65 = &v56;
    WTF::String::isolatedCopy();
    v66[1] = (WTF::StringImpl *)&v55;
    uint64_t v35 = v59;
    if (v59) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v59 + 48));
    }
    uint64_t v67 = v35;
    uint64_t v36 = v58;
    if (v58)
    {
      char v37 = 0;
      uint64_t v38 = *(void *)(v58 + 24);
      int v39 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v38, (unsigned __int8 *)&v37, 1u, memory_order_acquire, memory_order_acquire);
      if (v37) {
        MEMORY[0x19972E8D0](v38);
      }
      ++*(void *)(v38 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v38, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
      if (v39 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v38);
      }
    }
    uint64_t v68 = v36;
    uint64_t v40 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v40 = &unk_1EE9ED000;
    long long v41 = *(_OWORD *)buf;
    *(void *)(v40 + 24) = v65;
    *(_OWORD *)(v40 + 8) = v41;
    *(_OWORD *)(v40 + 32) = *(_OWORD *)v66;
    *(void *)(v40 + 48) = v67;
    uint64_t v42 = v68;
    v66[0] = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    *(void *)(v40 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v42;
    v54[0] = v40;
    WTF::callOnMainRunLoopAndWait();
    uint64_t v43 = v54[0];
    v54[0] = 0;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    uint64_t v44 = v68;
    uint64_t v68 = 0;
    if (v44) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v44 + 24), a2);
    }
    uint64_t v45 = v67;
    uint64_t v67 = 0;
    if (v45) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v45 + 48));
    }
    uint64_t v46 = v66[0];
    v66[0] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    uint64_t v16 = v57;
    if (!v57)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 8));
      uint64_t v47 = v55;
      if (v55) {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v55 + 8));
      }
      int v48 = (void *)WTF::fastMalloc((WTF *)0x20);
      *int v48 = &unk_1EE9ED038;
      v48[1] = a1;
      v48[2] = a1;
      v48[3] = v47;
      *(void *)buf = v48;
      WebCore::MediaSourcePrivate::ensureOnDispatcher();
      uint64_t v49 = *(void *)buf;
      *(void *)buf = 0;
      if (v49) {
        (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
      }
      uint64_t v50 = v55;
      uint64_t v55 = 0;
      uint64_t v51 = *a4;
      *a4 = v50;
      if (v51) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v51 + 8));
      }
      uint64_t v16 = v57;
    }
    uint64_t v52 = v55;
    uint64_t v55 = 0;
    if (v52) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v52 + 8));
    }
  }
  uint64_t v10 = v58;
  uint64_t v58 = 0;
  if (v10) {
    goto LABEL_81;
  }
LABEL_82:
  uint64_t v53 = v59;
  uint64_t v59 = 0;
  if (v53) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v53 + 48));
  }
  return v16;
}

atomic_uchar *WebKit::MediaSourcePrivateRemote::player@<X0>(WebKit::MediaSourcePrivateRemote *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 26);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 27), &v6);
    uint64_t v5 = v6;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::durationChanged(atomic_uchar **this, const WTF::MediaTime *a2)
{
  WebCore::MediaSourcePrivate::durationChanged((WebCore::MediaSourcePrivate *)this, a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v4 = &unk_1EE9ED060;
  v4[1] = this;
  v4[2] = this;
  v4[3] = v6;
  *(void *)((char *)v4 + 29) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = (uint64_t)v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

WTF *WebKit::MediaSourcePrivateRemote::bufferedChanged(atomic_uchar **this, const WebCore::PlatformTimeRanges *a2)
{
  WebCore::MediaSourcePrivate::bufferedChanged();
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
  *(void *)&long long v8 = this;
  *((void *)&v8 + 1) = this;
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v9, (uint64_t)a2);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v4 = &unk_1EE9ED088;
  *(_OWORD *)(v4 + 8) = v8;
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 24, (uint64_t)&v9);
  uint64_t v11 = v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v9;
  if (v9)
  {
    unsigned __int8 v9 = 0;
    int v10 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::markEndOfStream(uint64_t a1, char a2)
{
  atomic_store(1u, (unsigned __int8 *)(a1 + 48));
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 8));
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v4 = &unk_1EE9ED0B0;
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a1;
  *(unsigned char *)(v4 + 24) = a2;
  uint64_t v6 = v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(WebKit::MediaSourcePrivateRemote *this)
{
  atomic_store(0, (unsigned __int8 *)this + 48);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*((atomic_uchar **)this + 1));
  char v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *char v2 = &unk_1EE9ED0D8;
  v2[1] = this;
  v2[2] = this;
  uint64_t v4 = (uint64_t)v2;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::mediaPlayerReadyState(WebKit::MediaSourcePrivateRemote *this)
{
  return atomic_load((unsigned __int8 *)this + 225);
}

uint64_t WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(uint64_t a1, int a2)
{
  unsigned __int8 v2 = a2;
  v68[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned __int8 *)(a1 + 225);
  unsigned int v5 = atomic_load((unsigned __int8 *)(a1 + 225));
  if (a2 == 2 && v5 >= 3)
  {
    uint64_t v6 = *(atomic_uchar **)(a1 + 208);
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v6, *(void *)(a1 + 216), &v44);
      uint64_t v6 = v44;
    }
    else
    {
      uint64_t v44 = 0;
    }
    v43[0] = WebKit::MediaPlayerPrivateRemote::currentTime(v6);
    v43[1] = v7;
    WebCore::MediaSourcePrivate::buffered((uint64_t *)&v41, (WebCore::MediaSourcePrivate *)a1);
    v40[0] = WebCore::MediaSourcePrivate::duration((WebCore::MediaSourcePrivate *)a1);
    v40[1] = v8;
    uint64_t v9 = *(void *)(a1 + 232);
    uint64_t v10 = *(void *)(a1 + 240);
    v39[0] = "MediaSourcePrivateRemote";
    v39[1] = 25;
    v39[2] = "setMediaPlayerReadyState";
    v39[3] = v10;
    if (*(unsigned char *)(v9 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v52, (WTF::Logger::LogSiteIdentifier *)v39);
      WTF::String::String((WTF::String *)&v51, "stall detected at:");
      WTF::MediaTime::toJSONString((uint64_t *)&v50, (WTF::MediaTime *)v43);
      WTF::String::String((WTF::String *)&v49, " duration:");
      WTF::MediaTime::toJSONString((uint64_t *)&v48, (WTF::MediaTime *)v40);
      WTF::String::String((WTF::String *)&v47, " buffered:");
      WebCore::PlatformTimeRanges::toString((uint64_t *)&v46, (WebCore::PlatformTimeRanges *)&v41);
      v45[0] = v51;
      uint64_t v58 = v50;
      *(void *)buf = v52;
      unsigned __int8 v57 = v49;
      uint64_t v55 = v47;
      uint64_t v56 = v48;
      uint64_t v54 = v46;
      uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v45, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, &v53);
      if (!v53)
      {
        __break(0xC471u);
        return result;
      }
      int v13 = v46;
      uint64_t v46 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v47;
      uint64_t v47 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      unint64_t v15 = v48;
      int v48 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v12);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v49;
      uint64_t v49 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v12);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      unint64_t v17 = v50;
      uint64_t v50 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v12);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      unsigned int v18 = v51;
      uint64_t v51 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v12);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      uint64_t v19 = v52;
      uint64_t v52 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v12);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = qword_1EB358078;
      unsigned int v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
      if (v21)
      {
        WTF::String::utf8();
        int v22 = v45[0] ? (char *)v45[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v22;
        _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        unsigned int v21 = v45[0];
        v45[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1) {
            unsigned int v21 = (WTF *)WTF::fastFree(v21, v8);
          }
          else {
            --*(_DWORD *)v21;
          }
        }
      }
      if (WebKit2LogMedia)
      {
        int v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v24 = *v23;
          if (v24) {
            break;
          }
          int v25 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
          if (v25 == v24)
          {
            uint64_t v26 = WTF::Logger::observers(v21);
            uint64_t v27 = *(unsigned int *)(v26 + 12);
            if (v27)
            {
              uint64_t v28 = *(uint64_t **)v26;
              uint64_t v38 = *(void *)v26 + 8 * v27;
              do
              {
                uint64_t v29 = *v28;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v39);
                int v60 = 0;
                WTF::String::String((WTF::String *)v61, "stall detected at:");
                v61[2] = 1;
                WTF::MediaTime::toJSONString(&v62, (WTF::MediaTime *)v43);
                int v63 = 0;
                WTF::String::String((WTF::String *)v64, " duration:");
                uint64_t v64[2] = 1;
                WTF::MediaTime::toJSONString(&v65, (WTF::MediaTime *)v40);
                int v66 = 0;
                WTF::String::String((WTF::String *)v67, " buffered:");
                v67[2] = 0;
                WebCore::PlatformTimeRanges::toString(v68, (WebCore::PlatformTimeRanges *)&v41);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v29 + 16))(v29, &WebKit2LogMedia, 0, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v30);
                for (uint64_t i = 104; i != -8; i -= 16)
                {
                  uint64_t v32 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2) {
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
                    }
                    else {
                      *(_DWORD *)v32 -= 2;
                    }
                  }
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v38);
            }
            int v33 = 1;
            atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
            unsigned __int8 v2 = 2;
            if (v33 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      unint64_t v34 = v53;
      uint64_t v53 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v8);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    uint64_t v35 = v41;
    if (v41)
    {
      long long v41 = 0;
      int v42 = 0;
      WTF::fastFree(v35, v8);
    }
    uint64_t v36 = v44;
    uint64_t v44 = 0;
    if (v36) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((atomic_uchar **)v36 + 6));
    }
  }
  atomic_store(v2, v4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 8));
  uint64_t v37 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v37 = &unk_1EE9ED100;
  *(void *)(v37 + 8) = a1;
  *(void *)(v37 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a1;
  *(unsigned char *)(v37 + 24) = v2;
  *(void *)buf = v37;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  uint64_t result = *(void *)buf;
  *(void *)buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(atomic_uchar **this, const WTF::MediaTime *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v4 = &unk_1EE9ED128;
  v4[1] = this;
  v4[2] = this;
  v4[3] = v6;
  *(void *)((char *)v4 + 29) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = (uint64_t)v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

atomic_uchar *WebKit::MediaSourcePrivateRemote::MessageReceiver::client(atomic_uchar *this, uint64_t a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(atomic_uchar **)(a2 + 24);
  if (v4)
  {
    this = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v7, v4, *(void *)(a2 + 32));
    unsigned int v5 = v7;
    if (v7)
    {
      WebCore::MediaSourcePrivate::client(v7);
      if (*(void *)v3) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 1), v6);
      }
      *(void *)uint64_t v3 = 0;
      this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 1), v6);
    }
  }
  *(void *)uint64_t v3 = 0;
  return this;
}

unsigned int *WebKit::MediaSourcePrivateRemote::MessageReceiver::proxyWaitForTarget(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::MediaSourcePrivateRemote::MessageReceiver::client((atomic_uchar *)&v17, (uint64_t)a1);
  if (v17)
  {
    unsigned int v5 = (WebKit::MediaSourcePrivateRemote *)(*(void *(**)(unsigned int **__return_ptr))(*(void *)v17 + 24))(&v15);
    unint64_t v6 = (unint64_t)v15;
    uint64_t v7 = WebKit::MediaSourcePrivateRemote::queue(v5);
    __n128 v12 = 0uLL;
    int v13 = "proxyWaitForTarget";
    uint64_t v14 = 0;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)>>(v6, v7 + 32, a3, &v12, v16);
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v16);
    uint64_t result = v15;
    unint64_t v15 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10) {
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 8), v8);
    }
  }
  else
  {
    v12.n128_u8[0] = 1;
    LODWORD(v13) = 1;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __n128 *))(*(void *)v11 + 16))(v11, &v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

unsigned int *WebKit::MediaSourcePrivateRemote::MessageReceiver::proxySeekToTime(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::MediaSourcePrivateRemote::MessageReceiver::client((atomic_uchar *)&v17, (uint64_t)a1);
  if (v17)
  {
    unsigned int v5 = (WebKit::MediaSourcePrivateRemote *)(*(void *(**)(unsigned int **__return_ptr))(*(void *)v17 + 32))(&v15);
    unint64_t v6 = (unint64_t)v15;
    uint64_t v7 = WebKit::MediaSourcePrivateRemote::queue(v5);
    __n128 v12 = 0uLL;
    int v13 = "proxySeekToTime";
    uint64_t v14 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)>>(v6, v7 + 32, a3, &v12, v16);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v16);
    uint64_t result = v15;
    unint64_t v15 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10) {
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 8), v8);
    }
  }
  else
  {
    v12.n128_u16[0] = 259;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __n128 *))(*(void *)v11 + 16))(v11, &v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

__n128 WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v11 = &unk_1EE9ED290;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)uint64_t v10 = &unk_1EE9C2290;
  *(void *)(v10 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a2;
  __n128 v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(void *)uint64_t v10 = &unk_1EE9C2260;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 72) = v11;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  __n128 result = *a4;
  __n128 v14 = a4[1];
  a5[1] = *a4;
  a5[2] = v14;
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::MessageReceiver::mediaSourcePrivateShuttingDown(WebKit::MediaSourcePrivateRemote *a1, uint64_t *a2)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  uint64_t v4 = (atomic_uchar *)*((void *)a1 + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v10, v4, *((void *)a1 + 4));
    uint64_t v6 = v10;
    if (v10)
    {
      atomic_store(1u, (unsigned __int8 *)(v10 + 224));
      atomic_store(0, (unsigned __int8 *)(v6 + 225));
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), v5);
    }
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  long long v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

char *non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logChannel(WebKit::MediaSourcePrivateRemote *this)
{
  return &WebKit2LogMedia;
}

uint64_t WebKit::RemoteAudioDestinationProxy::RemoteAudioDestinationProxy(uint64_t a1, uint64_t a2, _DWORD **a3, int a4)
{
  WebCore::AudioDestination::hardwareSampleRate((WebCore::AudioDestination *)a1);
  WebCore::AudioDestinationResampler::AudioDestinationResampler();
  *(void *)(a1 + 144) = &unk_1EE9ED2E0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_1994F5F10;
  *(void *)(v7 + 24) = a1;
  *(void *)a1 = &unk_1EE9EC770;
  *(void *)(a1 + 144) = &unk_1EE9EC7E8;
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 17WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  long long v8 = (WebCore::AudioDestination *)semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)(a1 + 212), 0, 0);
  uint64_t v9 = *a3;
  if (*a3) {
    *v9 += 2;
  }
  *(void *)(a1 + 21WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v9;
  *(_DWORD *)(a1 + 224) = a4;
  WebCore::AudioDestination::hardwareSampleRate(v8);
  *(_DWORD *)(a1 + 228) = v10;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 24WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  return a1;
}

unsigned int *WebKit::RemoteAudioDestinationProxy::stopRenderingThread(unsigned int *this)
{
  if (*((void *)this + 29))
  {
    unsigned __int8 v1 = this;
    atomic_store(1u, (unsigned __int8 *)this + 252);
    MEMORY[0x1997420B0](this[53]);
    WTF::Thread::waitForCompletion(*((WTF::Thread **)v1 + 29));
    this = (unsigned int *)*((void *)v1 + 29);
    *((void *)v1 + 29) = 0;
    if (this) {
      this = WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(this);
    }
    if (*((unsigned char *)v1 + 253))
    {
      --WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount;
      *((unsigned char *)v1 + 253) = 0;
    }
  }
  return this;
}

uint64_t WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>(uint64_t a1, void *a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(atomic_uchar **)(*(void *)a2 + 24);
    if (v4) {
      uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(atomic_uchar **)a1;
  *(void *)a1 = v4;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  *(void *)(a1 + 8) = *(void *)a2;
  return a1;
}

void WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy(WebKit::RemoteAudioDestinationProxy *this)
{
  *(void *)this = &unk_1EE9EC770;
  *((void *)this + 18) = &unk_1EE9EC7E8;
  unsigned __int8 v2 = (atomic_uchar *)*((void *)this + 21);
  if (!v2) {
    goto LABEL_10;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 22), &v16);
  uint64_t v4 = v16;
  if (!v16) {
    goto LABEL_10;
  }
  if (!*((void *)this + 20))
  {
    uint64_t v16 = 0;
LABEL_9:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 24), v3);
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v16 + 32);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 702;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, (uint64_t *)this + 20);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v17, 0, 0);
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v3);
    WTF::fastFree(v14, v15);
  }
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:
  WebKit::RemoteAudioDestinationProxy::stopRenderingThread((unsigned int *)this);
  uint64_t v9 = (unsigned int *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
  }
  int v10 = (unsigned int *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v10);
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  IPC::Semaphore::destroy((WebKit::RemoteAudioDestinationProxy *)((char *)this + 208));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteAudioDestinationProxy *)((char *)this + 208));
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)this + 24, 0);
  __n128 v12 = (WebCore::CARingBuffer *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v12) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 184, v12);
  }
  int v13 = (atomic_uchar *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, v12);
  }
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy(WebKit::RemoteAudioDestinationProxy *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy((WebKit::RemoteAudioDestinationProxy *)((char *)this - 144));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteAudioDestinationProxy::startRendering(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 168;
  uint64_t v4 = *(atomic_uchar **)(a1 + 168);
  if (v4)
  {
    uint64_t v6 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v4, *(void *)(a1 + 176), &v83);
    uint64_t v8 = v83;
    if (v83) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v83 = 0;
  }
  {
    char v74 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v74);
  }
  uint64_t v10 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v11 = 0;
  uint64_t v12 = *(void *)(v10 + 24);
  int v13 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0](v12);
  }
  ++*(void *)(v12 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  uint64_t v14 = v83;
  uint64_t v83 = v10;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 24), v9);
  }
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>(v5, &v83);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v83 + 184, a1 + 144);
  *(void *)(a1 + 160) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_DWORD *)(a1 + 248) = 0;
  v81[0] = 0;
  char v82 = 0;
  WebCore::SharedMemory::allocate((WebCore::SharedMemory *)4);
  unint64_t v15 = v84[0];
  v84[0] = 0;
  uint64_t v16 = *(unsigned int **)(a1 + 240);
  *(void *)(a1 + 240) = v15;
  if (v16
    && (WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v16),
        uint64_t v17 = (unsigned int *)v84[0],
        unint64_t v15 = *(IPC::Encoder **)(a1 + 240),
        v84[0] = 0,
        v17))
  {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v17);
    if (!v15) {
      goto LABEL_17;
    }
  }
  else if (!v15)
  {
    goto LABEL_17;
  }
  WebCore::SharedMemory::createHandle();
  std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v81, (uint64_t)v84);
  if (v85) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v84);
  }
LABEL_17:
  if (!v82)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  uint64_t v18 = *(void *)(v83 + 32);
  int v19 = *(_DWORD *)(a1 + 224);
  int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 28);
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!v82)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  float v22 = v21;
  float v23 = *(float *)(a1 + 228);
  int v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v24 = 701;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v24 + 16;
  *((void *)v24 + 67) = 512;
  *((void *)v24 + 68) = 0;
  *((void *)v24 + 70) = 0;
  *((void *)v24 + 69) = 0;
  IPC::Encoder::encodeHeader(v24);
  v84[0] = v24;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, (uint64_t *)(a1 + 160));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)(a1 + 216));
  int v25 = (_DWORD *)IPC::Encoder::grow(v24, 4uLL, 4);
  if (v26 <= 3)
  {
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x1990FCCA8);
  }
  _DWORD *v25 = v19;
  uint64_t v27 = (_DWORD *)IPC::Encoder::grow(v24, 4uLL, 4);
  if (v28 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990FCCC8);
  }
  _DWORD *v27 = v20;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v24, v22);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v24, v23);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v24, (IPC::Semaphore *)(a1 + 208));
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v24, (unint64_t)v81);
  IPC::Connection::sendMessageImpl(v18, (uint64_t *)v84, 0, 0);
  uint64_t v30 = v84[0];
  v84[0] = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v69, v70);
  }
  *(void *)(a1 + 200) = 0;
  memset(&v80, 0, sizeof(v80));
  WebCore::audioStreamBasicDescriptionForAudioBus();
  int v31 = (const WebCore::CAAudioStreamDescription *)(float)(*(float *)(a1 + 228) + *(float *)(a1 + 228));
  WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v84, &v80);
  WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)v84, v31, (uint64_t)v77);
  WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v84);
  if (!v79)
  {
    __break(0xC471u);
    JUMPOUT(0x1990FCCE8);
  }
  uint64_t v32 = (WebCore::CARingBuffer *)v77[0];
  v77[0] = 0;
  int v75 = v32;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&v76[8] = v78;
  int v33 = *(WebCore::CARingBuffer **)(a1 + 184);
  unint64_t v34 = v75;
  int v75 = 0;
  *(void *)(a1 + 184) = v34;
  if (v33) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 184, v33);
  }
  uint64_t v35 = *(void *)(v83 + 32);
  uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v36 = 700;
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  v84[0] = v36;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v36, (uint64_t *)(a1 + 160));
  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(v36, (unint64_t)v76);
  IPC::Connection::sendMessageImpl(v35, (uint64_t *)v84, 0, 0);
  uint64_t v38 = v84[0];
  v84[0] = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v71, v72);
  }
  int v39 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
  WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v84, &v80);
  MEMORY[0x1997346F0](v39, v84);
  WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v84);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(a1 + 192), v39);
  WebCore::WebAudioBufferList::setSampleCount(*(WebCore::WebAudioBufferList **)(a1 + 192));
  unsigned int v40 = WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount;
  if (WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount <= 2u)
  {
    *(unsigned char *)(a1 + 253) = 1;
    WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount = v40 + 1;
  }
  long long v41 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v41 = &unk_1EE9ED150;
  v41[1] = a1;
  unint64_t v86 = v41;
  WTF::Thread::create();
  int v42 = v84[0];
  v84[0] = 0;
  uint64_t v43 = *(unsigned int **)(a1 + 232);
  *(void *)(a1 + 232) = v42;
  if (v43)
  {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v43);
    uint64_t v44 = (unsigned int *)v84[0];
    v84[0] = 0;
    if (v44) {
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v44);
    }
  }
  uint64_t v45 = v86;
  unint64_t v86 = 0;
  if (v45) {
    (*(void (**)(void *))(*v45 + 8))(v45);
  }
  uint64_t v46 = *(WTF::Thread **)(a1 + 232);
  if (v40 <= 2)
  {
    WTF::Thread::setThreadTimeConstraints();
    uint64_t v46 = *(WTF::Thread **)(a1 + 232);
  }
  WTF::Thread::changePriority(v46);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v76);
  uint64_t v47 = v75;
  int v75 = 0;
  if (v47) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v75, v47);
  }
  uint64_t v6 = (WTF::RunLoop *)std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77);
  if (v82) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v81);
  }
  uint64_t v8 = v83;
LABEL_42:
  int v48 = (uint64_t *)(a1 + 160);
  if (!*(void *)(a1 + 160))
  {
    uint64_t v83 = 0;
    if (v8) {
      uint64_t v6 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v7);
    }
    goto LABEL_57;
  }
  uint64_t v83 = 0;
  uint64_t v49 = *(atomic_uchar *volatile **)(v8 + 32);
  uint64_t v6 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v7);
  if (!v49)
  {
LABEL_57:
    WTF::RunLoop::current(v6);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 152));
    uint64_t v65 = *a2;
    *a2 = 0;
    int v66 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(void *)int v66 = &unk_1EE9ED178;
    *((void *)v66 + 1) = a1;
    *((void *)v66 + 2) = v65;
    v84[0] = v66;
    WTF::RunLoop::dispatch();
    goto LABEL_58;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v49);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 152));
  uint64_t v50 = *a2;
  *a2 = 0;
  uint64_t v51 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v51 = &unk_1EE9ED1A0;
  *((void *)v51 + 1) = a1;
  *((void *)v51 + 2) = v50;
  uint64_t v52 = (IPC::Encoder *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v53 = 703;
  *((void *)v53 + 1) = 0;
  *((void *)v53 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v53 + 16;
  *((void *)v53 + 67) = 512;
  *((void *)v53 + 68) = 0;
  *((void *)v53 + 70) = 0;
  *((void *)v53 + 69) = 0;
  IPC::Encoder::encodeHeader(v53);
  *(void *)&v80.mSampleRate = v53;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v53, v48);
  v84[0] = v51;
  v84[1] = v52;
  IPC::Connection::sendMessageWithAsyncReply((os_unfair_lock_s *)v49, (IPC::Encoder **)&v80, (uint64_t *)v84, 0, 0);
  uint64_t v55 = v84[0];
  v84[0] = 0;
  if (v55) {
    (*(void (**)(IPC::Encoder *))(*(void *)v55 + 8))(v55);
  }
  uint64_t result = *(void *)&v80.mSampleRate;
  v80.mSampleRate = 0.0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v54);
    uint64_t result = WTF::fastFree(v67, v68);
  }
  char v57 = 0;
  atomic_uchar *volatile v58 = *v49;
  atomic_compare_exchange_strong_explicit(*v49, (unsigned __int8 *)&v57, 1u, memory_order_acquire, memory_order_acquire);
  if (v57) {
    uint64_t result = MEMORY[0x19972E8D0](v58);
  }
  uint64_t v59 = *((void *)v58 + 1);
  uint64_t v60 = v59 - 1;
  *((void *)v58 + 1) = v59 - 1;
  if (v59 == 1)
  {
    uint64_t v73 = *((void *)v58 + 2);
    uint64_t v62 = *((void *)v58 + 3);
    *((void *)v58 + 3) = 0;
    BOOL v61 = v73 == 0;
  }
  else
  {
    BOOL v61 = 0;
    uint64_t v62 = 0;
  }
  int v63 = 1;
  atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
  if (v63 == 1)
  {
    if (v60) {
      return result;
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v58);
    if (v60) {
      return result;
    }
  }
  uint64_t v64 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v64 = &unk_1EE9B37E8;
  *(void *)(v64 + 8) = v58;
  *(void *)(v64 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v62;
  *(unsigned char *)(v64 + 24) = v61;
  v84[0] = (IPC::Encoder *)v64;
  WTF::ensureOnMainRunLoop();
LABEL_58:
  uint64_t result = (uint64_t)v84[0];
  v84[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioDestinationProxy::stopRendering(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(WTF::RunLoop **)(a1 + 168);
  if (v4
    && (v4 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v4, *(void *)(a1 + 176), v20), (uint64_t v6 = v20[0]) != 0)&& ((v7 = (uint64_t *)(a1 + 160), !*(void *)(a1 + 160)) ? (v8 = 0) : (v8 = *(os_unfair_lock_s **)(v20[0] + 32)), v20[0] = 0, v4 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 24), v5), v8))
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 152));
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v10 = &unk_1EE9ED1F0;
    v10[1] = a1;
    void v10[2] = v9;
    uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 704;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    float v21 = v12;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, v7);
    v20[0] = (uint64_t)v10;
    v20[1] = v11;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v21, v20, 0, 0);
    uint64_t v14 = v20[0];
    v20[0] = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t result = v21;
    float v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    WTF::RunLoop::current(v4);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 152));
    uint64_t v18 = *a2;
    *a2 = 0;
    int v19 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v19 = &unk_1EE9ED1C8;
    v19[1] = a1;
    v19[2] = v18;
    v20[0] = (uint64_t)v19;
    WTF::RunLoop::dispatch();
    uint64_t result = (IPC::Encoder *)v20[0];
    v20[0] = 0;
    if (result) {
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteAudioDestinationProxy::gpuProcessConnectionDidClose(WebKit::RemoteAudioDestinationProxy *this, WebKit::GPUProcessConnection *a2)
{
  WebKit::RemoteAudioDestinationProxy::stopRenderingThread((unsigned int *)this);
  uint64_t result = (atomic_uchar *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  }
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 136);
  if (v5)
  {
    uint64_t v6 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v6 = &unk_1EE9ED218;
    uint64_t v7 = v6;
    (*(void (**)(WebKit::RemoteAudioDestinationProxy *, atomic_uchar **))(*(void *)this + 72))(this, &v7);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::AudioDestinationResampler::isPlaying(WebCore::AudioDestinationResampler *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 136);
  return v1 & 1;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::gpuProcessConnectionDidClose(WebKit::RemoteAudioDestinationProxy *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteAudioDestinationProxy::gpuProcessConnectionDidClose((WebKit::RemoteAudioDestinationProxy *)((char *)this - 144), a2);
}

void *WebKit::RemoteAudioHardwareListener::RemoteAudioHardwareListener(void *a1)
{
  WebCore::AudioHardwareListener::AudioHardwareListener();
  a1[5] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  a1[6] = &unk_1EE9ED2E0;
  a1[7] = &unk_1EE9B71B0;
  a1[8] = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = a1;
  a1[9] = v2;
  *a1 = &unk_1EE9EC828;
  a1[6] = &unk_1EE9EC870;
  a1[7] = &unk_1EE9EC8B0;
  {
    uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v3 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v4 = *(atomic_uchar **)(v3 + 24);
  if (v4)
  {
    unsigned __int8 v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
    a1[10] = v5;
    a1[11] = v3;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v5, v3, &v17);
      uint64_t v6 = v17;
      goto LABEL_7;
    }
  }
  else
  {
    a1[10] = 0;
    a1[11] = v3;
  }
  uint64_t v6 = 0;
  uint64_t v17 = 0;
LABEL_7:
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v6 + 184, (uint64_t)(a1 + 6));
  uint64_t v7 = a1[5];
  v19[0] = 55;
  v19[1] = v7;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v17 + 48), (unsigned __int8 *)v19, (uint64_t)(a1 + 7), (unsigned __int8 **)v18);
  uint64_t v8 = *(void *)(v17 + 32);
  v19[0] = a1[5];
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 39;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  v18[0] = v9;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v19);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)v18, 0, 0);
  uint64_t v11 = v18[0];
  v18[0] = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v14, v15);
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 24), v10);
  }
  return a1;
}

void WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(WebKit::RemoteAudioHardwareListener *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 10);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v3, *((void *)this + 11), &v9);
    if (v9)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(v9 + 40), (WebKit::RemoteAudioHardwareListener *)((char *)this + 56));
      uint64_t v4 = *(void *)(v9 + 32);
      uint64_t v7 = *((void *)this + 5);
      uint64_t v8 = &v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseAudioHardwareListener>(v4, &v8, 0, 0, 0);
      uint64_t v5 = v9;
      uint64_t v9 = 0;
      if (v5) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), a2);
      }
    }
    uint64_t v6 = (atomic_uchar *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v6) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
    }
  }
  else
  {
    *((void *)this + 10) = 0;
  }
  *((void *)this + 7) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 8, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseAudioHardwareListener>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 48;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  int v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void non-virtual thunk to'WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(WebKit::RemoteAudioHardwareListener *this, void *a2)
{
}

{
  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 48), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 56), a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteAudioHardwareListener::gpuProcessConnectionDidClose(WebKit::RemoteAudioHardwareListener *this, WebKit::GPUProcessConnection *a2)
{
  *((_DWORD *)this + 4) = 2;
  (*(void (**)(void, WebKit::GPUProcessConnection *))(**((void **)this + 1) + 24))(*((void *)this + 1), a2);
  uint64_t result = (atomic_uchar *)*((void *)this + 10);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 11), &v6);
    if (v6)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(v6 + 40), (WebKit::RemoteAudioHardwareListener *)((char *)this + 56));
      uint64_t result = (atomic_uchar *)*((void *)this + 10);
      *((void *)this + 10) = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v4);
      }
      *((void *)this + 11) = 0;
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
      }
    }
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioHardwareListener::gpuProcessConnectionDidClose(WebKit::RemoteAudioHardwareListener *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteAudioHardwareListener::gpuProcessConnectionDidClose((WebKit::RemoteAudioHardwareListener *)((char *)this - 48), a2);
}

void WebKit::RemoteAudioSession::~RemoteAudioSession(WebKit::RemoteAudioSession *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 25);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 26), &v10);
    if (v10)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v10 + 40), 0x39u);
      uint64_t v4 = v10;
      uint64_t v10 = 0;
      if (v4) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 24), v3);
      }
    }
  }
  WebCore::AudioSession::removeInterruptionObserver(this, (WebKit::RemoteAudioSession *)((char *)this + 48));
  uint64_t v6 = (atomic_uchar *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }
  std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 120, (WTF::StringImpl *)v5);
  uint64_t v8 = (unsigned int **)*((void *)this + 12);
  if (v8) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, v7);
  }
  *((void *)this + 9) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v9);
  WebCore::AudioSession::~AudioSession(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioSession::~RemoteAudioSession(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteAudioSession::~RemoteAudioSession(WebKit::RemoteAudioSession *this)
{
}

{
  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 64));
}

{
  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 72));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 48));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 64));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 72));

  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::RemoteAudioSession::gpuProcessConnectionDidClose(WebKit::RemoteAudioSession *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t v4 = (atomic_uchar *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  *((void *)this + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;

  return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)a2 + 5, 0x39u);
}

unsigned int *non-virtual thunk to'WebKit::RemoteAudioSession::gpuProcessConnectionDidClose(WebKit::RemoteAudioSession *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteAudioSession::gpuProcessConnectionDidClose((WebKit::RemoteAudioSession *)((char *)this - 64), a2);
}

uint64_t WebKit::RemoteAudioSession::ensureConnection(WebKit::RemoteAudioSession *this)
{
  uint64_t v3 = (char *)this + 200;
  uint64_t v2 = (atomic_uchar *)*((void *)this + 25);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 26), &v39);
    uint64_t v5 = v39;
    if (v39) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v39 = 0;
  }
  {
LABEL_37:
    int v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v33);
  }
  uint64_t v7 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 24);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  ++*(void *)(v9 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  uint64_t v11 = v39;
  uint64_t v39 = v7;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v6);
  }
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v39);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v39 + 184, (uint64_t)this + 64);
  LOBYTE(v40) = 57;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v39 + 40), &v40, (uint64_t)this + 72, &v34);
  uint64_t v12 = WebKit::RemoteAudioSession::ensureConnection(this);
  uint64_t v48 = 0;
  IPC::Connection::createSyncMessageEncoder(3593, 0, &v48, &v47);
  IPC::Connection::sendSyncMessage(v12, v48, (uint64_t *)&v47, 0, (uint64_t)&v45, INFINITY);
  if (!v46)
  {
    LOBYTE(v40) = 0;
    char v44 = 0;
    IPC::Decoder::decode<std::tuple<WebKit::RemoteAudioSessionConfiguration>>(v45, (uint64_t)&v34);
    if (v37)
    {
      uint64_t v16 = v34;
      v41[0] = *(_OWORD *)v35;
      v41[1] = *(_OWORD *)&v35[16];
      *(_OWORD *)((char *)&v41[1] + 10) = *(_OWORD *)&v35[26];
      uint64_t v17 = *(WTF::StringImpl **)&v35[48];
      unint64_t v34 = 0;
      *(void *)&v35[48] = 0;
      char v18 = (char)v36;
      char v43 = (char)v36;
      char v44 = 1;
      std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v15);
      if (v46) {
        goto LABEL_36;
      }
      int v13 = 0;
      *(_OWORD *)&v35[8] = v41[0];
      *(_OWORD *)&v35[24] = v41[1];
      int v20 = (unsigned int *)v45;
      uint64_t v45 = 0;
      *(_OWORD *)&v35[34] = *(_OWORD *)((char *)&v41[1] + 10);
      unsigned int v40 = 0;
      int v42 = 0;
      unint64_t v34 = v20;
      *(void *)uint64_t v35 = v16;
      uint64_t v36 = v17;
      char v37 = v18;
    }
    else
    {
      std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v15);
      LOBYTE(v34) = 13;
      int v13 = 1;
    }
    int v38 = v13;
    std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v19);
    int v14 = v46;
    if (v46 == -1) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v46 != 1)
  {
LABEL_36:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_37;
  }
  LOBYTE(v34) = (_BYTE)v45;
  int v13 = 1;
  int v38 = 1;
  int v14 = 1;
LABEL_20:
  ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9ECF90[v14])(&v40, &v45);
LABEL_21:
  float v22 = v47;
  uint64_t v47 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v26, v27);
    if (v13) {
      goto LABEL_23;
    }
LABEL_25:
    float v23 = *(WTF::StringImpl **)v35;
    v41[0] = *(_OWORD *)&v35[8];
    v41[1] = *(_OWORD *)&v35[24];
    *(_OWORD *)((char *)&v41[1] + 10) = *(_OWORD *)&v35[34];
    int v24 = v36;
    *(void *)uint64_t v35 = 0;
    uint64_t v36 = 0;
    char v25 = v37;
    goto LABEL_26;
  }
  if (!v13) {
    goto LABEL_25;
  }
LABEL_23:
  float v23 = 0;
  int v24 = 0;
  char v25 = 0;
  LODWORD(v41[0]) = 0;
  memset((char *)v41 + 8, 0, 34);
LABEL_26:
  unsigned int v40 = v23;
  int v42 = v24;
  char v43 = v25;
  std::optional<WebKit::RemoteAudioSessionConfiguration>::operator=[abi:sn180100]<WebKit::RemoteAudioSessionConfiguration,void>((uint64_t)this + 120, (uint64_t)&v40);
  uint64_t v29 = v42;
  int v42 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = v40;
  unsigned int v40 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  ((void (*)(WTF::StringImpl **, unsigned int **))off_1EE9ECD88[v13])(&v40, &v34);
  uint64_t v5 = v39;
LABEL_35:
  uint64_t v39 = 0;
  uint64_t v31 = *(void *)(v5 + 32);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
  return v31;
}

IPC::Encoder *WebKit::RemoteAudioSession::setCategory(IPC::Encoder *result, int a2, int a3, int a4)
{
  char v4 = a4;
  char v5 = a3;
  char v6 = a2;
  if (*((unsigned __int8 *)result + 112) != a2
    || *((unsigned __int8 *)result + 113) != a3
    || *((unsigned __int8 *)result + 114) != a4
    || *((unsigned char *)result + 115))
  {
    *((unsigned char *)result + 112) = a2;
    *((unsigned char *)result + 113) = a3;
    *((_WORD *)result + 57) = a4;
    uint64_t v7 = WebKit::RemoteAudioSession::ensureConnection(result);
    char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v8 = 715;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v16 = v8;
    uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
    if (!v10 || (*uint64_t v9 = v6, v11 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1), !v12))
    {
      __break(0xC471u);
      JUMPOUT(0x1990FDBB0);
    }
    *uint64_t v11 = v5;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, v4);
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v16, 0, 0);
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioSession::setPreferredBufferSize(WebKit::RemoteAudioSession *this, uint64_t a2)
{
  if (*((unsigned char *)this + 192)
    || (uint64_t result = (IPC::Encoder *)WebKit::RemoteAudioSession::ensureConnection(this), *((unsigned char *)this + 192)))
  {
    *((void *)this + 20) = a2;
    uint64_t v5 = WebKit::RemoteAudioSession::ensureConnection(this);
    uint64_t v10 = a2;
    char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v6 = 717;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v11 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v10);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSession::tryToSetActiveInternal(WebKit::RemoteAudioSession *this, int a2)
{
  char v3 = a2;
  if (a2 && *((unsigned char *)this + 216)) {
    return 0;
  }
  uint64_t v6 = WebKit::RemoteAudioSession::ensureConnection(this);
  char v16 = v3;
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3626, 0, &v24, &v23);
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v23, &v16);
  IPC::Connection::sendSyncMessage(v6, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
  if (v22)
  {
    if (v22 != 1) {
      goto LABEL_23;
    }
    LOBYTE(v17) = (_BYTE)v21;
    int v7 = 1;
    int v19 = 1;
    int v8 = 1;
    goto LABEL_11;
  }
  __int16 v20 = 0;
  IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
  if (HIBYTE(v20))
  {
    int v8 = v22;
    if (v22) {
      goto LABEL_23;
    }
    int v7 = 0;
    uint64_t v10 = v21;
    float v21 = 0;
    char v2 = v20;
    uint64_t v17 = v10;
    char v18 = v20;
    int v19 = 0;
    goto LABEL_11;
  }
  LOBYTE(v17) = 13;
  int v7 = 1;
  int v19 = 1;
  int v8 = v22;
  if (v22 != -1) {
LABEL_11:
  }
    ((void (*)(__int16 *, uint64_t **))off_1EE9ECF90[v8])(&v20, &v21);
  uint64_t v11 = v23;
  float v23 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  if (v7) {
    char v2 = 0;
  }
  if (!v2) {
    goto LABEL_20;
  }
  if (*((unsigned char *)this + 192) || (WebKit::RemoteAudioSession::ensureConnection(this), *((unsigned char *)this + 192)))
  {
    *((unsigned char *)this + 169) = v3;
LABEL_20:
    BOOL v5 = v2 != 0;
    ((void (*)(uint64_t **, uint64_t **))off_1EE9ECD98[v7])(&v21, &v17);
    return v5;
  }
  __break(1u);
LABEL_23:
  uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::RemoteAudioSession::addConfigurationChangeObserver(v15);
}

unsigned int *WebKit::RemoteAudioSession::addConfigurationChangeObserver(uint64_t a1, unsigned int *a2)
{
  char v3 = (uint64_t *)(a1 + 96);
  unsigned int v4 = *(_DWORD *)(a1 + 108);
  unsigned int v5 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v5;
  if (v5 > v4)
  {
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v3;
        if (*v3) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 12) = v14 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = *(void *)(a1 + 96);
          *(_DWORD *)(a1 + 104) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 104) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 108) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  int v19 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v19, 1u);
  atomic_fetch_add(v19, 1u);
  float v23 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v23, (uint64_t)&v22);
  uint64_t result = (unsigned int *)v23;
  float v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
  }
  if (v19)
  {
    if (atomic_fetch_add(v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v20);
    }
  }
  return result;
}

uint64_t *WebKit::RemoteAudioSession::removeConfigurationChangeObserver(uint64_t *result, void *a2)
{
  char v3 = result + 12;
  unsigned int v4 = *((_DWORD *)result + 27);
  unsigned int v5 = *((_DWORD *)result + 26) + 1;
  *((_DWORD *)result + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t result = *(uint64_t **)(v7 + 8 * v10);
        if ((unint64_t)result + 1 >= 2 && !result[1])
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v12 = *v3;
        if (*v3) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = v6[12];
          *((_DWORD *)v6 + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
          if (!v7)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)v6 + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v7 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)v6 + 27) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *((_DWORD *)v6 + 2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = a2[1];
  if (v18 && *(void *)(v18 + 8))
  {
    uint64_t v20 = a2[1];
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      uint64_t v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v19 = 0;
    }
    if ((uint64_t *)v19 != result) {
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)result);
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioSession::setIsPlayingToBluetoothOverride(WebKit::RemoteAudioSession *a1, __int16 a2)
{
  __int16 v8 = a2;
  *((unsigned char *)a1 + 115) = 1;
  uint64_t v2 = WebKit::RemoteAudioSession::ensureConnection(a1);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 716;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v9 = v3;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(v3, (char *)&v8);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  int v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSession::category(WebKit::RemoteAudioSession *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebKit::RemoteAudioSession::mode(WebKit::RemoteAudioSession *this)
{
  return *((unsigned __int8 *)this + 113);
}

void *WebKit::RemoteAudioSession::configurationChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 120;
  if (*(unsigned char *)(a1 + 192))
  {
    BOOL v4 = *(unsigned __int8 *)(a2 + 48) != *(unsigned __int8 *)(a1 + 168);
    BOOL v5 = *(void *)(a2 + 16) != *(void *)(a1 + 136);
    BOOL v6 = *(float *)(a2 + 8) != *(float *)(a1 + 128);
    BOOL v7 = *(unsigned __int8 *)(a2 + 49) != *(unsigned __int8 *)(a1 + 169);
  }
  else
  {
    BOOL v4 = 1;
    BOOL v5 = 1;
    BOOL v6 = 1;
    BOOL v7 = 1;
  }
  BOOL v34 = v4;
  BOOL v33 = v5;
  BOOL v32 = v6;
  std::optional<WebKit::RemoteAudioSessionConfiguration>::operator=[abi:sn180100]<WebKit::RemoteAudioSessionConfiguration,void>(v3, a2);
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x28);
  int v9 = result;
  result[1] = &v34;
  result[2] = a1;
  result[3] = &v33;
  result[4] = &v32;
  uint64_t v11 = (uint64_t *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 96);
  *uint64_t result = &unk_1EE9ED240;
  uint64_t v30 = (WebCore::AudioSession *)a1;
  BOOL v31 = v7;
  if (v10 && (uint64_t v12 = *(unsigned int *)(v10 - 12), v12))
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    int v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
  }
  else
  {
    int v13 = 0;
  }
  unsigned int v14 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 96));
  unsigned int v16 = v14;
  int v17 = v15;
  if (*v11) {
    uint64_t v18 = *v11 + 8 * *(unsigned int *)(*v11 - 4);
  }
  else {
    uint64_t v18 = 0;
  }
  if ((void *)v18 != v14)
  {
    unsigned int v19 = 0;
    int v20 = 1;
    do
    {
      unsigned int v21 = v20;
      uint64_t v22 = *(void *)(*v16 + 8);
      if (v22)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v22 + 8), *(void *)(*v16 + 8));
        float v23 = *(atomic_uint **)(v22 + 8);
        if (v23) {
          atomic_fetch_add(v23, 1u);
        }
      }
      else
      {
        float v23 = 0;
      }
      *((void *)v13 + v19) = v23;
      while (++v16 != v17)
      {
        if ((unint64_t)(*v16 + 1) > 1) {
          goto LABEL_23;
        }
      }
      unsigned int v16 = v17;
LABEL_23:
      ++v19;
      int v20 = v21 + 1;
    }
    while (v16 != (void *)v18);
    if (v19)
    {
      uint64_t v24 = 8 * v21;
      char v25 = v13;
      do
      {
        if (*(void *)v25)
        {
          if (*(void *)(*(void *)v25 + 8))
          {
            uint64_t v35 = *(void *)v25;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v11, &v35))
            {
              if (*(void *)v25) {
                uint64_t v26 = *(void *)(*(void *)v25 + 8);
              }
              else {
                uint64_t v26 = 0;
              }
              (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v26);
            }
          }
        }
        char v25 = (WTF *)((char *)v25 + 8);
        v24 -= 8;
      }
      while (v24);
      uint64_t v27 = 8 * v21;
      unint64_t v28 = (unsigned int **)v13;
      do
      {
        uint64_t v29 = *v28;
        WTF::StringImpl *v28 = 0;
        if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v15);
        }
        ++v28;
        v27 -= 8;
      }
      while (v27);
    }
  }
  if (v13) {
    WTF::fastFree(v13, v15);
  }
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*v9 + 8))(v9);
  if (v31) {
    return (void *)WebCore::AudioSession::activeStateChanged(v30);
  }
  return result;
}

uint64_t std::optional<WebKit::RemoteAudioSessionConfiguration>::operator=[abi:sn180100]<WebKit::RemoteAudioSessionConfiguration,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
    long long v4 = *(_OWORD *)(a2 + 34);
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 34) = v4;
    WTF::String::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
    char v6 = *(unsigned char *)(a2 + 64);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v7;
    long long v8 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a2 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v10;
    char v6 = *(unsigned char *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(unsigned char *)(a1 + 64) = v6;
  return a1;
}

uint64_t WebKit::RemoteAudioSession::beginInterruptionRemote(WebKit::RemoteAudioSession *this)
{
  uint64_t v2 = (WebKit::RemoteAudioSession *)((char *)this + 48);
  WebCore::AudioSession::removeInterruptionObserver(this, (WebKit::RemoteAudioSession *)((char *)this + 48));
  WebCore::AudioSession::beginInterruption(this);

  return WebCore::AudioSession::addInterruptionObserver(this, v2);
}

uint64_t WebKit::RemoteAudioSession::endInterruptionRemote(uint64_t a1)
{
  uint64_t v2 = (WebCore::AudioSessionInterruptionObserver *)(a1 + 48);
  WebCore::AudioSession::removeInterruptionObserver((WebCore::AudioSession *)a1, (WebCore::AudioSessionInterruptionObserver *)(a1 + 48));
  WebCore::AudioSession::endInterruption();

  return WebCore::AudioSession::addInterruptionObserver((WebCore::AudioSession *)a1, v2);
}

IPC::Encoder *WebKit::RemoteAudioSession::beginAudioSessionInterruption(WebKit::RemoteAudioSession *this)
{
  uint64_t v1 = WebKit::RemoteAudioSession::ensureConnection(this);

  return IPC::Connection::send<Messages::RemoteAudioSessionProxy::BeginInterruptionRemote>(v1);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteAudioSessionProxy::BeginInterruptionRemote>(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 713;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v7 = v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteAudioSession::beginAudioSessionInterruption(WebKit::RemoteAudioSession *this)
{
  uint64_t v1 = WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)((char *)this - 48));

  return IPC::Connection::send<Messages::RemoteAudioSessionProxy::BeginInterruptionRemote>(v1);
}

IPC::Encoder *WebKit::RemoteAudioSession::endAudioSessionInterruption(WebKit::RemoteAudioSession *a1, char a2)
{
  uint64_t v3 = WebKit::RemoteAudioSession::ensureConnection(a1);
  long long v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v4 = 714;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteAudioSession::endAudioSessionInterruption(uint64_t a1, char a2)
{
  return WebKit::RemoteAudioSession::endAudioSessionInterruption((WebKit::RemoteAudioSession *)(a1 - 48), a2);
}

IPC::Encoder *WebKit::RemoteAudioSession::beginInterruptionForTesting(WebKit::RemoteAudioSession *this)
{
  *((unsigned char *)this + 21WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
  uint64_t v1 = WebKit::RemoteAudioSession::ensureConnection(this);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 720;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioSession::endInterruptionForTesting(IPC::Encoder *this)
{
  if (*((unsigned char *)this + 216))
  {
    *((unsigned char *)this + 21WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    uint64_t v1 = WebKit::RemoteAudioSession::ensureConnection(this);
    uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v2 = 721;
    *((void *)v2 + 1) = 0;
    *((void *)v2 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v2 + 16;
    *((void *)v2 + 67) = 512;
    *((void *)v2 + 68) = 0;
    *((void *)v2 + 70) = 0;
    *((void *)v2 + 69) = 0;
    IPC::Encoder::encodeHeader(v2);
    char v6 = v2;
    IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v6, 0, 0);
    this = v6;
    char v6 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v3);
      return (IPC::Encoder *)WTF::fastFree(v4, v5);
    }
  }
  return this;
}

IPC::Encoder *WebKit::RemoteAudioSession::setSceneIdentifier(WebKit::RemoteAudioSession *this, WTF::StringImpl **a2)
{
  if (*((unsigned char *)this + 192)
    || (uint64_t result = (IPC::Encoder *)WebKit::RemoteAudioSession::ensureConnection(this), *((unsigned char *)this + 192)))
  {
    WTF::String::operator=((uint64_t *)this + 22, a2);
    uint64_t v5 = WebKit::RemoteAudioSession::ensureConnection(this);
    char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v6 = 718;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v10 = v6;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, (uint64_t *)a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v10, 0, 0);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioSession::setSoundStageSize(WebKit::RemoteAudioSession *this, char a2)
{
  if (*((unsigned char *)this + 192)
    || (uint64_t result = (IPC::Encoder *)WebKit::RemoteAudioSession::ensureConnection(this), *((unsigned char *)this + 192)))
  {
    *((unsigned char *)this + 184) = a2;
    uint64_t v5 = WebKit::RemoteAudioSession::ensureConnection(this);
    char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v6 = 719;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v10 = v6;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v6, a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v10, 0, 0);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDM::setLogIdentifier(IPC::Encoder *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    long long v4 = this;
    {
      uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    uint64_t v5 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 32);
    uint64_t v12 = a2;
    uint64_t v6 = *((void *)v4 + 3);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 757;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    int v13 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v12);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
    this = v13;
    int v13 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

uint64_t WebKit::RemoteCDMFactory::gpuProcessConnection(WebKit::RemoteCDMFactory *this)
{
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  uint64_t v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::ensureGPUProcessConnection(v1);
}

IPC::Encoder *WebKit::RemoteCDM::getSupportedConfiguration(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(void *)(v5 + 8))
  {
    {
      float v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v23);
    }
    long long v9 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                              + 32);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *a4;
    *a4 = 0;
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v12 = &unk_1EE9ED268;
    v12[1] = v11;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    unsigned int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v14 = 755;
    *((void *)v14 + 1) = v10;
    *((void *)v14 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    uint64_t v26 = v14;
    IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode(v14, a2);
    unsigned int v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1990FEE90);
    }
    *unsigned int v15 = a3;
    v25[0] = (uint64_t)v12;
    v25[1] = v13;
    IPC::Connection::sendMessageWithAsyncReply(v9, &v26, v25, 0, 0);
    uint64_t v18 = v25[0];
    v25[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v20, v21);
    }
  }
  else
  {
    v24[0] = 0;
    v24[80] = 0;
    WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(a4, (uint64_t)v24);
    return (IPC::Encoder *)std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v22);
  }
  return result;
}

uint64_t WebKit::RemoteCDM::supportsConfiguration()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::supportsConfigurationWithRestrictions()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::supportsSessionTypeWithConfiguration()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::supportsInitData()
{
  return 1;
}

uint64_t WebKit::RemoteCDM::distinctiveIdentifiersRequirement()
{
  return 2;
}

uint64_t WebKit::RemoteCDM::persistentStateRequirement()
{
  return 2;
}

uint64_t WebKit::RemoteCDM::distinctiveIdentifiersAreUniquePerOriginAndClearable()
{
  return 0;
}

WTF::StringImpl *WebKit::RemoteCDM::createInstance@<X0>(WTF::StringImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3 || !*(void *)(v3 + 8))
  {
    *a2 = 0;
    return this;
  }
  long long v4 = this;
  uint64_t v5 = &qword_1EB35A000;
  {
LABEL_49:
    uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v7 = *((void *)v4 + 3);
  uint64_t v35 = 0;
  IPC::Connection::createSyncMessageEncoder(3631, v7, (uint64_t *)&v35, &v34);
  IPC::Connection::sendSyncMessage(v6, (uint64_t)v35, (uint64_t *)&v34, 0, (uint64_t)&v32, INFINITY);
  int v8 = (int)v33;
  if (!v33)
  {
    uint64_t v5 = v32;
    uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v32);
    if (v10)
    {
      uint64_t v6 = v9;
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode((IPC::Decoder *)v5, (uint64_t)&v28);
      if ((_BYTE)v29)
      {
        if (!v33)
        {
          uint64_t v5 = v28;
          uint64_t v11 = v32;
          BOOL v32 = 0;
          unint64_t v28 = v11;
          uint64_t v29 = v6;
          uint64_t v30 = v5;
          goto LABEL_12;
        }
        goto LABEL_48;
      }
      uint64_t v22 = *v5;
      uint64_t v23 = v5[1];
      *uint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v24 = v5[3];
      if (v24 && v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
      }
    }
    uint64_t v13 = (void *)*v5;
    uint64_t v25 = v5[1];
    *uint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v26 = v5[3];
    if (v26 && v25) {
      (*(void (**)(uint64_t, void *))(*(void *)v26 + 16))(v26, v13);
    }
    LOBYTE(v28) = 13;
    int v8 = 1;
    int v31 = 1;
    int v12 = (int)v33;
    if (v33 == -1) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v33 != 1)
  {
LABEL_48:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_49;
  }
  LOBYTE(v28) = (_BYTE)v32;
LABEL_12:
  int v31 = v8;
  int v12 = v8;
LABEL_13:
  ((void (*)(char *, uint64_t **))off_1EE9ECF90[v12])(&v36, &v32);
LABEL_14:
  unsigned int v14 = v34;
  BOOL v34 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v20, v21);
  }
  if (v8) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = (uint64_t *)v6;
  }
  if (v8) {
    this = 0;
  }
  else {
    this = (WTF::StringImpl *)v5;
  }
  if (!v8) {
    uint64_t v30 = 0;
  }
  BOOL v32 = v15;
  BOOL v33 = this;
  if (v15)
  {
    uint64_t v16 = *((void *)v4 + 2);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 8);
      if (v17)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v17 + 16), *(void *)(v16 + 8));
        uint64_t v16 = *(void *)(v17 + 16);
        if (v16) {
          atomic_fetch_add((atomic_uint *volatile)v16, 1u);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
    }
    uint64_t v35 = (WTF *)v16;
    uint64_t v18 = WTF::fastMalloc((WTF *)0x40);
    *a2 = WebKit::RemoteCDMInstance::RemoteCDMInstance(v18, (uint64_t *)&v35, &v32, (uint64_t *)&v33);
    unsigned int v19 = (unsigned int *)v35;
    uint64_t v35 = 0;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v13);
    }
    this = v33;
  }
  else
  {
    *a2 = 0;
  }
  BOOL v33 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  if (v31 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t **, uint64_t **))off_1EE9ECDA8[v31])(&v32, &v28);
  }
  return this;
}

IPC::Encoder *WebKit::RemoteCDM::loadAndInitialize(IPC::Encoder *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = this;
    {
      uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v9);
    }
    uint64_t v3 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 32);
    uint64_t v4 = *((void *)v2 + 3);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 756;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    char v10 = v5;
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
    this = v10;
    char v10 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v6);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return this;
}

uint64_t *WebKit::RemoteCDM::sanitizeResponse@<X0>(const WebCore::SharedBuffer *a1@<X1>, uint64_t *a2@<X8>)
{
  return WebCore::FragmentedSharedBuffer::makeContiguous(a2, a1);
}

void WebKit::RemoteCDM::sanitizeSessionId(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v3 += 2;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 1;
}

void WebKit::RemoteCDMFactory::~RemoteCDMFactory(WebKit::RemoteCDMFactory *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (WebKit::RemoteCDM **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WebKit::RemoteCDM *)-1)
        {
          uint64_t v6 = *v5;
          *uint64_t v5 = 0;
          if (v6)
          {
            WebKit::RemoteCDM::~RemoteCDM(v6, a2);
            MEMORY[0x199740C10]();
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = (unsigned int **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (unsigned int *)-1)
        {
          char v10 = *v9;
          *uint64_t v9 = 0;
          if (v10)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, a2);
            }
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  uint64_t v11 = *((void *)this + 2);
  if (v11)
  {
    *(void *)(v11 + 8) = 0;
    int v12 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v12)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCDMFactory::~RemoteCDMFactory(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteCDMFactory::~RemoteCDMFactory(WebKit::RemoteCDMFactory *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCDMFactory::~RemoteCDMFactory((WebKit::RemoteCDMFactory *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

BOOL WebKit::RemoteCDMFactory::supportsKeySystem(WebKit::RemoteCDMFactory *this, const WTF::String *a2)
{
  {
LABEL_19:
    unsigned int v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v22 = 0;
  IPC::Connection::createSyncMessageEncoder(3629, 0, &v22, &v21);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v3, v22, (uint64_t *)&v21, 0, (uint64_t)&v19, INFINITY);
  if (!v20)
  {
    __int16 v18 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v19, &v18);
    if (!HIBYTE(v18))
    {
      int v4 = 0;
      LOBYTE(v15) = 13;
      int v5 = 1;
      int v17 = 1;
      int v6 = v20;
      if (v20 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v6 = v20;
    if (!v20)
    {
      int v5 = 0;
      uint64_t v8 = v19;
      unsigned int v19 = 0;
      int v4 = v18;
      unsigned int v15 = v8;
      char v16 = v18;
      int v17 = 0;
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  if (v20 != 1)
  {
LABEL_18:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_19;
  }
  int v4 = 0;
  LOBYTE(v15) = (_BYTE)v19;
  int v5 = 1;
  int v17 = 1;
  int v6 = 1;
LABEL_9:
  ((void (*)(__int16 *, uint64_t **))off_1EE9ECF90[v6])(&v18, &v19);
LABEL_10:
  uint64_t v9 = v21;
  unsigned int v21 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v12, v13);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1EE9ECDB8[v5])(&v19, &v15);
  if (v5) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v4 == 0;
  }
  return !v10;
}

uint64_t WebKit::RemoteCDMFactory::createCDM@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v7 = (uint64_t)&qword_1EB35A000;
  {
    uint64_t v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v49);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v67 = 0;
  IPC::Connection::createSyncMessageEncoder(3628, 0, &v67, &v66);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v66, a2);
  IPC::Connection::sendSyncMessage(v8, v67, (uint64_t *)&v66, 0, (uint64_t)&v64, INFINITY);
  uint64_t v52 = a1;
  uint64_t v54 = (void *)a3;
  if (!v65)
  {
    v62[0] = 0;
    char v63 = 0;
    a2 = v64;
    uint64_t v11 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(v64);
    if (v12)
    {
      uint64_t v8 = v11;
      uint64_t v7 = (uint64_t)&v68;
      IPC::ArgumentCoder<WebKit::RemoteCDMConfiguration,void>::decode((IPC::Decoder *)a2, (uint64_t)&v68);
      if (v72[16]
        || (v43 = *a2, v44 = a2[1], *a2 = 0, a2[1] = 0, (uint64_t v45 = a2[3]) != 0)
        && v44
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43), v72[16]))
      {
        uint64_t v55 = (void *)v8;
        unsigned int v14 = (uint64_t *)v68;
        uint64_t v68 = 0;
        unsigned int v16 = v69;
        unsigned int v15 = HIDWORD(v69);
        uint64_t v69 = 0;
        unint64_t v3 = v70;
        unint64_t v70 = 0;
        a3 = v71;
        int v17 = HIDWORD(v71);
        unint64_t v71 = 0;
        *(_OWORD *)uint64_t v60 = *(_OWORD *)v72;
        uint64_t v7 = 1;
        unsigned char v60[16] = 1;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v13);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v18);
        *(void *)uint64_t v62 = v8;
        uint64_t v56 = 0;
        char v57 = 0;
        unint64_t v58 = 0;
        unint64_t v59 = 0;
        *(_OWORD *)&v62[40] = *(_OWORD *)v60;
        char v63 = 1;
        std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v19);
        if (!v65)
        {
          unsigned int v21 = v64;
          uint64_t v64 = 0;
          uint64_t v7 = *(void *)v62;
          memset(&v62[8], 0, 32);
          *(_OWORD *)&v72[16] = *(_OWORD *)&v62[40];
          uint64_t v68 = 0;
          uint64_t v69 = *(uint64_t **)v62;
          uint64_t v55 = v21;
          uint64_t v56 = *(void *)v62;
          unint64_t v70 = 0;
          char v57 = v14;
          unint64_t v71 = 0;
          unint64_t v58 = __PAIR64__(v15, v16);
          unsigned int v53 = v15;
          *(void *)unint64_t v72 = 0;
          unint64_t v51 = v3;
          unint64_t v59 = v3;
          *(void *)&v72[8] = 0;
          int v50 = a3;
          *(_DWORD *)uint64_t v60 = a3;
          *(_DWORD *)&v60[4] = v17;
          LODWORD(v3) = v17;
          *(_OWORD *)&v60[8] = *(_OWORD *)&v62[40];
          int v61 = 0;
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v72, v20);
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v22);
          uint64_t v24 = v68;
          uint64_t v68 = 0;
          LODWORD(v8) = v16;
          if (v24)
          {
            IPC::Decoder::~Decoder(v24);
            WTF::fastFree(v38, v39);
          }
          int v9 = 0;
          a2 = v14;
          a3 = (unint64_t)v54;
LABEL_11:
          std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v23);
          int v10 = v65;
          if (v65 == -1) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v40 = *a2;
      uint64_t v41 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v42 = a2[3];
      if (v42 && v41) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
      }
    }
    LOBYTE(v55) = 0;
    unsigned char v60[16] = 0;
    int v46 = (void *)*a2;
    uint64_t v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v48 = a2[3];
    if (!v48)
    {
LABEL_28:
      std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v46);
      LOBYTE(v55) = 13;
      int v9 = 1;
      int v61 = 1;
      goto LABEL_11;
    }
LABEL_30:
    if (v47) {
      (*(void (**)(uint64_t, void *))(*(void *)v48 + 16))(v48, v46);
    }
    goto LABEL_28;
  }
  if (v65 != 1)
  {
LABEL_29:
    uint64_t v48 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_30;
  }
  LOBYTE(v55) = (_BYTE)v64;
  int v9 = 1;
  int v61 = 1;
  int v10 = 1;
LABEL_12:
  ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9ECF90[v10])(&v68, &v64);
LABEL_13:
  uint64_t v26 = v66;
  int v66 = 0;
  if (v26)
  {
    IPC::Encoder::~Encoder(v26, v25);
    WTF::fastFree(v36, v37);
  }
  *(void *)&v62[40] = 0;
  memset(v62, 0, 34);
  if (v9)
  {
    LODWORD(v8) = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    uint64_t v7 = 0;
    int v29 = 0;
    int v30 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    *(_OWORD *)&v72[8] = *(_OWORD *)&v62[32];
  }
  else
  {
    char v57 = 0;
    unint64_t v58 = 0;
    uint64_t v68 = (IPC::Decoder *)v7;
    uint64_t v69 = a2;
    unint64_t v59 = 0;
    *(void *)uint64_t v60 = 0;
    *(_OWORD *)&v72[8] = *(_OWORD *)&v60[8];
    unsigned int v27 = v53;
    unint64_t v28 = v51;
    int v29 = v50;
    int v30 = v3;
  }
  unint64_t v70 = __PAIR64__(v27, v8);
  unint64_t v71 = v28;
  *(_DWORD *)unint64_t v72 = v29;
  *(_DWORD *)&v72[4] = v30;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62[16], v25);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v31);
  if (v7)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v52 + 16), v52);
    BOOL v33 = *(atomic_uint **)(v52 + 16);
    if (v33) {
      atomic_fetch_add(v33, 1u);
    }
    operator new();
  }
  *(void *)a3 = 0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v32);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v34);
  return ((uint64_t (*)(IPC::Decoder **, void **))off_1EE9ECDC8[v9])(&v68, &v55);
}

uint64_t WebKit::RemoteCDMFactory::removeSession(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  unint64_t v3 = (uint64_t *)(a1 + 24);
  int v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 24), &v11);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    int v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_8;
    }
    int v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
LABEL_8:
  {
    int v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  int v10 = &v11;
  return IPC::Connection::send<Messages::RemoteCDMFactoryProxy::RemoveSession>(v7, &v10, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::RemoteCDMFactoryProxy::RemoveSession>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 740;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::RemoteCDMFactory::removeInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  {
    int v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v5 = &v6;
  return IPC::Connection::send<Messages::RemoteCDMFactoryProxy::RemoveInstance>(v2, &v5, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::RemoteCDMFactoryProxy::RemoveInstance>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 739;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::RemoteCDMFactory::didReceiveSessionMessage(atomic_uint **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v7 = *((void *)a3 + 8);
  if (v7 == -1)
  {
    uint64_t result = 151;
    __break(0xC471u);
    return result;
  }
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(this + 3, &v7, (atomic_uint **)&v8);
  uint64_t result = (uint64_t)v8;
  if (v8)
  {
    if (*((void *)v8 + 1))
    {
      WebKit::RemoteCDMInstanceSession::didReceiveMessage(*((unsigned int **)v8 + 1), a2, a3);
      uint64_t result = (uint64_t)v8;
      uint64_t v8 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void WebKit::AudioTrackPrivateRemote::~AudioTrackPrivateRemote(WebKit::AudioTrackPrivateRemote *this, WTF::StringImpl *a2)
{
  WebKit::AudioTrackPrivateRemote::~AudioTrackPrivateRemote(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  atomic_uchar *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t vars8;

  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (atomic_uchar *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  *(void *)this = &unk_1EE9ECC18;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

uint64_t WebCore::TrackPrivateBase::logger(WebCore::TrackPrivateBase *this)
{
  return *((void *)this + 4);
}

const char *WebCore::AudioTrackPrivate::logClassName(WebCore::AudioTrackPrivate *this)
{
  return "AudioTrackPrivate";
}

uint64_t WebCore::TrackPrivateBase::logIdentifier(WebCore::TrackPrivateBase *this)
{
  return *((void *)this + 5);
}

WTF::AtomString *WebKit::AudioTrackPrivateRemote::label@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 15);
}

WTF::AtomString *WebKit::AudioTrackPrivateRemote::language@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 16);
}

uint64_t WebKit::AudioTrackPrivateRemote::trackIndex(WebKit::AudioTrackPrivateRemote *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t WebKit::AudioTrackPrivateRemote::startTimeVariance(WebKit::AudioTrackPrivateRemote *this)
{
  return *((void *)this + 18);
}

uint64_t WebCore::AudioTrackPrivate::type(WebCore::AudioTrackPrivate *this)
{
  return 1;
}

uint64_t WebKit::AudioTrackPrivateRemote::kind(WebKit::AudioTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t WebCore::AudioTrackPrivate::isBackedByMediaStreamTrack(WebCore::AudioTrackPrivate *this)
{
  return 0;
}

atomic_uchar *volatile *WebKit::MediaPlayerPrivateRemote::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 6);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::deref(atomic_uchar **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(this[6]);
}

uint64_t WebKit::MediaPlayerPrivateRemote::platformErrorCode(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 88);
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsProgressMonitoring(WebCore::MediaPlayerPrivateInterface *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::requiresImmediateCompositing(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setVisibleForCanvas(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 312))();
}

uint64_t WebCore::MediaPlayerPrivateInterface::setCurrentTimeDidChangeCallback()
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::initialTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(void *)WTF::MediaTime::zeroTime(this);
}

double WebKit::MediaPlayerPrivateRemote::rate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 87);
}

uint64_t WebCore::MediaPlayerPrivateInterface::effectiveRate(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 448))();
}

uint64_t WebKit::MediaPlayerPrivateRemote::paused(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 434);
}

float WebKit::MediaPlayerPrivateRemote::volume(WebKit::MediaPlayerPrivateRemote *this)
{
  return 1.0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::networkState(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 336);
}

uint64_t WebKit::MediaPlayerPrivateRemote::shouldGetNativeImageForCanvasDrawing(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::fileSize(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::ended(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::objCAVFoundationAVPlayer(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::identifier(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 23);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsPlayAtHostTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 212);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsPauseAtHostTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 213);
}

void WebCore::MediaPlayerPrivateInterface::errorMessage(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logger(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 7);
}

const char *non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logClassName(WebKit::MediaPlayerPrivateRemote *this)
{
  return "MediaPlayerPrivateRemote";
}

uint64_t non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logIdentifier(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((void *)this + 8);
}

uint64_t WebKit::MediaSourcePrivateRemote::platformType(WebKit::MediaSourcePrivateRemote *this)
{
  return 3;
}

uint64_t WebCore::MediaSourcePrivate::readyState(WebCore::MediaSourcePrivate *this)
{
  return atomic_load((unsigned int *)this + 13);
}

uint64_t WebCore::MediaSourcePrivate::setReadyState(uint64_t result, unsigned int a2)
{
  return result;
}

uint64_t non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logger(WebKit::MediaSourcePrivateRemote *this)
{
  return *((void *)this + 9);
}

const char *non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logClassName(WebKit::MediaSourcePrivateRemote *this)
{
  return "MediaSourcePrivateRemote";
}

uint64_t non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logIdentifier(WebKit::MediaSourcePrivateRemote *this)
{
  return *((void *)this + 10);
}

atomic_uchar *WebKit::RemoteAudioDestinationProxy::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[19]);
}

atomic_uchar *WebKit::RemoteAudioDestinationProxy::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(this[19], a2);
}

float WebCore::AudioDestination::sampleRate(WebCore::AudioDestination *this)
{
  return *((float *)this + 6);
}

uint64_t WebKit::RemoteAudioDestinationProxy::controlBlock(WebKit::RemoteAudioDestinationProxy *this)
{
  return *((void *)this + 19);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::controlBlock(WebKit::RemoteAudioDestinationProxy *this)
{
  return *((void *)this + 1);
}

atomic_uchar *volatile *WebKit::RemoteAudioHardwareListener::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 9);
}

atomic_uchar *WebKit::RemoteAudioHardwareListener::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(this[9], a2);
}

uint64_t WebKit::RemoteAudioHardwareListener::controlBlock(WebKit::RemoteAudioHardwareListener *this)
{
  return *((void *)this + 9);
}

atomic_uchar *volatile *non-virtual thunk to'WebKit::RemoteAudioHardwareListener::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 3);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioHardwareListener::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioHardwareListener::controlBlock(WebKit::RemoteAudioHardwareListener *this)
{
  return *((void *)this + 3);
}

uint64_t WebKit::RemoteAudioSession::routeSharingPolicy(WebKit::RemoteAudioSession *this)
{
  return *((unsigned __int8 *)this + 114);
}

unsigned char *WebKit::RemoteAudioSession::routingContextUID@<X0>(unsigned char *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  if (this[192]
    || (this = (unsigned char *)WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)this), v2[192]))
  {
    int v4 = (_DWORD *)*((void *)v2 + 15);
    if (v4) {
      *v4 += 2;
    }
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return this;
}

unsigned char *WebKit::RemoteAudioSession::sampleRate(unsigned char *this)
{
  uint64_t v1 = this;
  if (!this[192])
  {
    this = (unsigned char *)WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)this);
    if (!v1[192]) {
      __break(1u);
    }
  }
  return this;
}

uint64_t WebKit::RemoteAudioSession::bufferSize(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 17);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 17);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::numberOfOutputChannels(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 18);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 18);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::maximumNumberOfOutputChannels(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 19);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 19);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::preferredBufferSize(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 20);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((void *)this + 20);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::isMuted(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((unsigned __int8 *)this + 168);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((unsigned __int8 *)this + 168);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::clearInterruptionFlagForTesting(uint64_t this)
{
  *(unsigned char *)(this + 21WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  return this;
}

uint64_t WebKit::RemoteAudioSession::isActive(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((unsigned __int8 *)this + 169);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((unsigned __int8 *)this + 169);
  }
  __break(1u);
  return result;
}

unsigned int **WebCore::AudioSession::setRoutingArbitrationClient(uint64_t a1, atomic_uint **a2)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 32), a2);
}

uint64_t WebKit::RemoteAudioSession::sceneIdentifier(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return (uint64_t)this + 176;
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return (uint64_t)this + 176;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::soundStageSize(WebKit::RemoteAudioSession *this)
{
  if (*((unsigned char *)this + 192)) {
    return *((unsigned __int8 *)this + 184);
  }
  uint64_t result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((unsigned char *)this + 192)) {
    return *((unsigned __int8 *)this + 184);
  }
  __break(1u);
  return result;
}

atomic_uchar *WebKit::RemoteAudioSession::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[11]);
}

atomic_uchar *WebKit::RemoteAudioSession::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioSession,(WTF::DestructionThread)0>(this[11], a2);
}

uint64_t WebKit::RemoteAudioSession::controlBlock(WebKit::RemoteAudioSession *this)
{
  return *((void *)this + 11);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioSession::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[3]);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioSession::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioSession,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioSession::controlBlock(WebKit::RemoteAudioSession *this)
{
  return *((void *)this + 3);
}

void WebKit::RemoteCDM::~RemoteCDM(WebKit::RemoteCDM *this, void *a2)
{
  WebKit::RemoteCDM::~RemoteCDM(this, a2);

  JUMPOUT(0x199740C10);
}

{
  char *v3;
  void *v4;
  void *v5;
  unsigned int *v6;
  uint64_t vars8;

  unint64_t v3 = (char *)this + 32;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v4);
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }

  MEMORY[0x1F416C0C8](this);
}

uint64_t WebKit::RemoteCDM::supportedInitDataTypes@<X0>(WebKit::RemoteCDM *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 32);
}

uint64_t WebKit::RemoteCDM::supportedRobustnesses@<X0>(WebKit::RemoteCDM *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 48);
}

uint64_t WebKit::RemoteCDM::supportsServerCertificates(WebKit::RemoteCDM *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t WebKit::RemoteCDM::supportsSessions(WebKit::RemoteCDM *this)
{
  return *((unsigned __int8 *)this + 65);
}

void WebCore::AudioTrackPrivate::~AudioTrackPrivate(WebCore::AudioTrackPrivate *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9ECC18;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9ECC18;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);

  WTF::fastFree(v5, v6);
}

uint64_t WebCore::TrackPrivateBase::id(WebCore::TrackPrivateBase *this)
{
  return 0;
}

void WebCore::TrackPrivateBase::label(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30970];
  if (*MEMORY[0x1E4F30970]) {
    *v2 += 2;
  }
  *a1 = v2;
}

void WebCore::TrackPrivateBase::language(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30970];
  if (*MEMORY[0x1E4F30970]) {
    *v2 += 2;
  }
  *a1 = v2;
}

uint64_t WebCore::TrackPrivateBase::trackIndex(WebCore::TrackPrivateBase *this)
{
  return 0;
}

uint64_t WebCore::TrackPrivateBase::startTimeVariance(WebCore::TrackPrivateBase *this)
{
  return *(void *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::AudioTrackPrivate::kind(WebCore::AudioTrackPrivate *this)
{
  return 6;
}

void WebCore::TrackPrivateBase::~TrackPrivateBase(WebCore::TrackPrivateBase *this, void *a2)
{
  *(void *)this = MEMORY[0x1E4FB6B58] + 16;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

uint64_t WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 24 * v3));
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      int v4 = (unsigned int *)*((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
      uint64_t result = *(WTF **)v3;
      *(void *)unsigned int v3 = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,(WTF::DestructionThread)0>::deref(result, a2);
      }
      unsigned int v3 = (WTF *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

WTF *WTF::ThreadSafeRefCounted<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = this;
    atomic_store(1u, (unsigned int *)this);
    uint64_t v3 = *((void *)this + 1);
    *((void *)v2 + 1) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate10setEnabledEbEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 1)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56);
    return v5(a2, v4);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED1Ev(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9ECCE8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECCE8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callESA_(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64);
    return v4(a2, a1 + 8);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::InbandGenericCue::InbandGenericCue(uint64_t a1, long long *a2)
{
  *(_DWORD *)a1 = 1;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 37) = *(void *)((char *)a2 + 29);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)a2 + WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v7;
  uint64_t v8 = *((void *)a2 + 7);
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 64) = v8;
  long long v9 = a2[4];
  long long v10 = a2[5];
  *(void *)(a1 + 104) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  WebCore::Color::Color();
  WebCore::Color::Color();
  WebCore::Color::Color();
  __int16 v11 = *((_WORD *)a2 + 64);
  *(unsigned char *)(a1 + 138) = *((unsigned char *)a2 + 130);
  *(_WORD *)(a1 + 13WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v11;
  return a1;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy9AccessLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy8ErrorLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS4_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSC_E_vJSC_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED290;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS4_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSC_E_vJSC_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED290;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS4_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSC_E_vJSC_EE4callESC_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(uint64_t a1, uint64_t a2)
{
  long long v4 = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v4))
  {
    __break(0xC471u);
    JUMPOUT(0x19910104CLL);
  }
  char v5 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  uint64_t v6 = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  int v31 = result;
  if (result)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 12);
    unsigned int v9 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v9;
    if (v9 <= v8) {
      goto LABEL_33;
    }
    uint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      int v11 = *(_DWORD *)(v10 - 4);
      if (!v11) {
        goto LABEL_27;
      }
      int v12 = 0;
      unsigned int v13 = v11 - 1;
      do
      {
        uint64_t v14 = v13;
        unsigned int v15 = (void *)(v10 + 16 * v13);
        if ((unint64_t)(*v15 + 1) >= 2)
        {
          uint64_t v16 = v10 + 16 * v13;
          __int16 v18 = *(atomic_uchar **)(v16 + 8);
          int v17 = (atomic_uchar **)(v16 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v18))
          {
            *unsigned int v15 = -1;
            int v20 = *v17;
            *int v17 = 0;
            if (v20) {
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, v19);
            }
            ++v12;
          }
        }
        --v13;
      }
      while (v14);
      uint64_t v10 = *(void *)a1;
      if (v12)
      {
        *(_DWORD *)(v10 - 16) += v12;
        uint64_t v21 = *(void *)a1;
        if (*(void *)a1) {
          int v22 = *(_DWORD *)(v21 - 12);
        }
        else {
          int v22 = 0;
        }
        *(_DWORD *)(v21 - 12) = v22 - v12;
        uint64_t v10 = *(void *)a1;
      }
      if (v10)
      {
        unsigned int v23 = *(_DWORD *)(v10 - 4);
        if (v23 >= 9 && 6 * *(_DWORD *)(v10 - 12) < v23)
        {
          WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v10 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v10)
          {
            unsigned int v25 = 0;
            goto LABEL_31;
          }
LABEL_28:
          unsigned int v25 = *(_DWORD *)(v10 - 12);
          int v26 = 0x7FFFFFFF;
          if (v25 >= 0x7FFFFFFF) {
            goto LABEL_32;
          }
          goto LABEL_31;
        }
LABEL_27:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_28;
      }
    }
    unsigned int v25 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_31:
    int v26 = v25;
LABEL_32:
    *(_DWORD *)(a1 + 12) = 2 * v26;
LABEL_33:
    uint64_t v30 = a2;
    WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>((uint64_t *)a1, &v30, (uint64_t *)&v31, (uint64_t)v29);
    uint64_t result = v31;
    int v31 = 0;
    if (result) {
      uint64_t result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v27);
    }
  }
  int v28 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    return (WTF::ThreadSafeWeakPtrControlBlock *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  }
  return result;
}

uint64_t *WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = ~(*a2 << 32) + *a2;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    __int16 v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1) {
        __int16 v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *__int16 v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, a2);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v28;
  return result;
}

void *WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::rehash(a1, v5, a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14RemoteCDMProxy14CreateInstanceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages21RemoteCDMFactoryProxy9CreateCDMEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t)a2 + 16;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 32, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v4);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioSession,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v11 = *((void *)v2 + 2);
    uint64_t v7 = (WebKit::RemoteAudioSession *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v11 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    WebKit::RemoteAudioSession::~RemoteAudioSession(v7);
    this = (atomic_uchar *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

_DWORD *WTF::RefCounted<WebCore::InbandGenericCue>::deref(_DWORD *result, void *a2)
{
  uint64_t v2 = (WTF *)result;
  if (*result == 1)
  {
    WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(result + 2), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::tuple<unsigned long long,BOOL>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  int v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7 || (*v5 = v4, char v7 = *((unsigned char *)a2 + 8), result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1), !v9))
  {
    __break(0xC471u);
    JUMPOUT(0x1991017B4);
  }
  *uint64_t result = v7;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9ECE10;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECE10;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 32))(a2, &v5);
  uint64_t result = v5;
  int v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9ECE38;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECE38;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 40))(a2, &v5);
  uint64_t result = v5;
  int v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PlatformMediaResourceLoader,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9ED2B8;
    *((void *)v2 + 1) = v1;
    char v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 32))();
}

void *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote()::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ECE88;
  uint64_t v3 = a1[1];
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ECE88;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote()::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (!v1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = v1 + 16 * v2;
    goto LABEL_11;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  uint64_t v3 = v1 + 16 * v2;
  if (!*(_DWORD *)(v1 - 12))
  {
    uint64_t v4 = v1 + 16 * v2;
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v4 = *(void *)(result + 8);
    while ((unint64_t)(*(void *)v4 + 1) <= 1)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    uint64_t v6 = v1 + 16 * *(unsigned int *)(v1 - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  while (v4 != v6)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 8) + 24))(*(void *)(v4 + 8));
    uint64_t v7 = v4 + 16;
    uint64_t v4 = v3;
    if (v7 != v3)
    {
      uint64_t v4 = v7;
      while ((unint64_t)(*(void *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::MediaPlayerPreload,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9ECEB0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECEB0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerConfiguration>>((uint64_t)v5, a2), v6))
  {
    unint64_t result = (WTF::StringImpl *)WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(v2, (uint64_t)v5);
    if (v6)
    {
      unint64_t result = v5[0];
      v5[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(a1, (uint64_t)v3);
  unint64_t result = v3[0];
  v3[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerConfiguration>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::decode(a2, (uint64_t)&v11);
  if (v13
    || ((uint64_t v5 = *(void *)a2,
         uint64_t v6 = *((void *)a2 + 1),
         *(void *)a2 = 0,
         *((void *)a2 + 1) = 0,
         (uint64_t v7 = *((void *)a2 + 3)) != 0)
      ? (BOOL v8 = v6 == 0)
      : (BOOL v8 = 1),
        !v8 && (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5), v13)))
  {
    *(void *)a1 = v11;
    *(_OWORD *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v10) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)a1;
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 8), &v9);
    if (v9)
    {
      uint64_t result = *(atomic_uchar **)(v5 + 128);
      if (result)
      {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v5 + 136), &v8);
        if (v8)
        {
          WTF::String::operator=((uint64_t *)(v5 + 192), (uint64_t *)a2);
          *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 8);
          uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v8 + 8) + 8) + 112))(*(void *)(*(void *)(v8 + 8) + 8));
          uint64_t v6 = (atomic_uchar **)v8;
          uint64_t v8 = 0;
          if (v6) {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v6);
          }
        }
      }
      uint64_t v7 = v9;
      uint64_t v9 = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 48));
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::DidLoadingProgress,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ECED8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::DidLoadingProgress,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ECED8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::DidLoadingProgress,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::setReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ECF00;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 48));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::setReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ECF00;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 48));
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::setReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::call(atomic_uchar *result)
{
  v36[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 2);
  int v2 = *(unsigned __int8 *)(v1 + 680);
  int v3 = result[24];
  *(unsigned char *)(v1 + 680) = v3;
  unsigned int v4 = result[24];
  if (v2 != v4)
  {
    if (v4 >= 3 && v3 == 2)
    {
      uint64_t v6 = *(void *)(v1 + 112);
      uint64_t v7 = *(void *)(v1 + 120);
      v29[0] = "MediaPlayerPrivateRemote";
      v29[1] = 25;
      v29[2] = "operator()";
      v29[3] = v7;
      if (*(unsigned char *)(v6 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v32, (WTF::Logger::LogSiteIdentifier *)v29);
        WTF::String::String((WTF::String *)&v31, "stall detected");
        *(void *)buf = v32;
        v30[0] = v31;
        uint64_t result = (atomic_uchar *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v30, &v33);
        if (!v33)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v9 = v31;
        int v31 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v8);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        uint64_t v10 = v32;
        BOOL v32 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        uint64_t v11 = qword_1EB358078;
        long long v12 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
        if (v12)
        {
          WTF::String::utf8();
          unint64_t v14 = v30[0] ? (char *)v30[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = v14;
          _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          long long v12 = v30[0];
          v30[0] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1) {
              long long v12 = (WTF *)WTF::fastFree(v12, v13);
            }
            else {
              --*(_DWORD *)v12;
            }
          }
        }
        if (WebKit2LogMedia)
        {
          unsigned int v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v16 = *v15;
            if (v16) {
              break;
            }
            int v17 = *v15;
            atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
            if (v17 == v16)
            {
              uint64_t v18 = WTF::Logger::observers(v12);
              uint64_t v19 = *(unsigned int *)(v18 + 12);
              if (v19)
              {
                uint64_t v20 = *(uint64_t **)v18;
                uint64_t v21 = *(void *)v18 + 8 * v19;
                do
                {
                  uint64_t v22 = *v20;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v29);
                  int v35 = 0;
                  WTF::String::String((WTF::String *)v36, "stall detected");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v22 + 16))(v22, &WebKit2LogMedia, 0, v30);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v23);
                  for (uint64_t i = 24; i != -8; i -= 16)
                  {
                    int v25 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v25)
                    {
                      if (*(_DWORD *)v25 == 2) {
                        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                      }
                      else {
                        *(_DWORD *)v25 -= 2;
                      }
                    }
                  }
                  ++v20;
                }
                while (v20 != (uint64_t *)v21);
              }
              int v26 = 1;
              atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
              if (v26 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        unint64_t v27 = v33;
        BOOL v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
    }
    uint64_t result = *(atomic_uchar **)(v1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v1 + 136), buf);
      uint64_t result = *(atomic_uchar **)buf;
      if (*(void *)buf)
      {
        uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::readyStateChanged(*(WebCore::MediaPlayer **)buf);
        char v28 = *(atomic_uchar ***)buf;
        *(void *)buf = 0;
        if (v28) {
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v28);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [6],double,char [14],WTF::MediaTime,char [20],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, double *a5, const char *a6, WTF::MediaTime *a7, const char *a8, uint64_t a9)
{
  v70[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v54, this);
  uint64_t v43 = (char *)a4;
  unint64_t v14 = (WTF::String *)WTF::String::String((WTF::String *)&v53, a4);
  WTF::String::number((uint64_t *)&v52, v14, *a5);
  WTF::String::String((WTF::String *)&v51, a6);
  WTF::MediaTime::toJSONString((uint64_t *)&v50, a7);
  uint64_t v44 = (char *)a8;
  WTF::String::String((WTF::String *)&v49, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v48);
  v47[0] = v53;
  uint64_t v60 = v52;
  *(void *)buf = v54;
  unint64_t v58 = v50;
  unint64_t v59 = v51;
  uint64_t v56 = v48;
  char v57 = v49;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v47, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
  if (v55)
  {
    int v17 = v48;
    uint64_t v48 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v49;
    uint64_t v49 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = v50;
    int v50 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v51;
    unint64_t v51 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v21 = v52;
    uint64_t v52 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v53;
    unsigned int v53 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v54;
    uint64_t v54 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v16);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = *(NSObject **)(a1 + 32);
    int v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      WTF::String::utf8();
      unint64_t v27 = v47[0] ? (char *)v47[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v27;
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v25 = v47[0];
      v47[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          int v25 = (WTF *)WTF::fastFree(v25, v26);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      char v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v29 = *v28;
        if (v29) {
          break;
        }
        int v30 = *v28;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
        if (v30 == v29)
        {
          uint64_t v31 = WTF::Logger::observers(v25);
          uint64_t v32 = *(unsigned int *)(v31 + 12);
          if (v32)
          {
            BOOL v33 = *(uint64_t **)v31;
            uint64_t v41 = *(void *)v31 + 8 * v32;
            do
            {
              uint64_t v34 = *v33;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v62 = 0;
              int v35 = (WTF::String *)WTF::String::String((WTF::String *)v63, v43);
              double v36 = *a5;
              v63[2] = 0;
              WTF::String::number(&v64, v35, v36);
              int v65 = 0;
              WTF::String::String((WTF::String *)v66, a6);
              v66[2] = 1;
              WTF::MediaTime::toJSONString(&v67, a7);
              int v68 = 0;
              WTF::String::String((WTF::String *)v69, v44);
              void v69[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(v70);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v47, (uint64_t)buf, 7uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v34 + 16))(v34, a1, a2, v47);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v37);
              for (uint64_t i = 104; i != -8; i -= 16)
              {
                uint64_t v39 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2) {
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                  }
                  else {
                    *(_DWORD *)v39 -= 2;
                  }
                }
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v41);
          }
          int v40 = 1;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
          if (v40 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v55;
    uint64_t v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  void *v6;
  void *result;
  unint64_t v8;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::erase(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove(result, a2, (uint64_t)v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100]((uint64_t)v3, 0);
    return (void *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
  return result;
}

WTF *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>>::reset[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t result = *(WTF **)a1;
  *(void *)a1 = a2;
  if (result)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v4 = (unsigned int *)*((void *)result + 3);
      *((void *)result + 3) = 0;
      if (v4)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v4 + 2);
          uint8x8_t v5 = result;
          (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
          uint64_t result = v5;
        }
      }
    }
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>(WTF *result, size_t __n)
{
  uint64_t v2 = result;
  if (__n == 1)
  {
    unint64_t v3 = 2;
  }
  else
  {
    unint64_t v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      uint64_t result = (WTF *)std::__next_prime(__n);
      unint64_t v3 = (unint64_t)result;
    }
  }
  int8x8_t v4 = *(int8x8_t *)((char *)v2 + 8);
  if (v3 <= *(void *)&v4)
  {
    if (v3 >= *(void *)&v4) {
      return result;
    }
    uint64_t result = (WTF *)vcvtps_u32_f32((float)*((unint64_t *)v2 + 3) / *((float *)v2 + 8));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v11 = (uint8x8_t)vcnt_s8(v4), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      uint64_t result = (WTF *)std::__next_prime((size_t)result);
    }
    else
    {
      long long v12 = (WTF *)(1 << -(char)__clz((unint64_t)result - 1));
      if ((unint64_t)result >= 2) {
        uint64_t result = v12;
      }
    }
    if (v3 <= (unint64_t)result) {
      unint64_t v3 = (unint64_t)result;
    }
    if (v3 >= *(void *)&v4) {
      return result;
    }
    if (!v3)
    {
      uint64_t result = *(WTF **)v2;
      *(void *)uint64_t v2 = 0;
      if (result) {
        uint64_t result = (WTF *)WTF::fastFree(result, (void *)__n);
      }
      *((void *)v2 + 1) = 0;
      return result;
    }
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v3));
  uint64_t result = *(WTF **)v2;
  *(void *)uint64_t v2 = v6;
  if (result) {
    uint64_t result = (WTF *)WTF::fastFree(result, v5);
  }
  uint64_t v7 = 0;
  *((void *)v2 + 1) = v3;
  do
    *(void *)(*(void *)v2 + 8 * v7++) = 0;
  while (v3 != v7);
  unint64_t v8 = (void *)*((void *)v2 + 2);
  if (v8)
  {
    unint64_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= v3) {
        v9 %= v3;
      }
    }
    else
    {
      v9 &= v3 - 1;
    }
    *(void *)(*(void *)v2 + 8 * v9) = (char *)v2 + 16;
    char v13 = (void *)*v8;
    if (*v8)
    {
      do
      {
        unint64_t v14 = v13[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v14 >= v3) {
            v14 %= v3;
          }
        }
        else
        {
          v14 &= v3 - 1;
        }
        if (v14 != v9)
        {
          if (!*(void *)(*(void *)v2 + 8 * v14))
          {
            *(void *)(*(void *)v2 + 8 * v14) = v8;
            goto LABEL_30;
          }
          *unint64_t v8 = *v13;
          *char v13 = **(void **)(*(void *)v2 + 8 * v14);
          **(void **)(*(void *)v2 + 8 * v14) = v13;
          char v13 = v8;
        }
        unint64_t v14 = v9;
LABEL_30:
        unint64_t v8 = v13;
        char v13 = (void *)*v13;
        unint64_t v9 = v14;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100](uint64_t result, void *a2)
{
  unint64_t v3 = *(WTF **)result;
  if (*(void *)result)
  {
    int8x8_t v4 = (void *)result;
    uint8x8_t v5 = (unsigned int *)*(unsigned __int8 *)(result + 9);
    if (*(unsigned char *)(result + 9))
    {
      uint64_t result = *((void *)v3 + 3);
      *((void *)v3 + 3) = 0;
      if (!result) {
        goto LABEL_5;
      }
      uint8x8_t v5 = (unsigned int *)(result + 8);
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF);
      if (add != 1) {
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    atomic_store(add, v5);
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
LABEL_5:
    uint64_t result = WTF::fastFree(v3, a2);
    *int8x8_t v4 = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::LoadMediaSource,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9ECF28;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::LoadMediaSource,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECF28;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::LoadMediaSource,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerConfiguration>>((uint64_t)v5, a2), v6))
  {
    uint64_t result = (WTF::StringImpl *)WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(v2, (uint64_t)v5);
    if (v6)
    {
      uint64_t result = v5[0];
      v5[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9ECF50;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECF50;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_1,void>::call(void *a1)
{
  uint64_t result = (atomic_uchar *)a1[1];
  if (result)
  {
    uint64_t v3 = a1[3];
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, a1[2], &v7);
    if (v7)
    {
      uint64_t result = *(atomic_uchar **)(v3 + 128);
      if (result)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 136), &v6);
        uint64_t result = (atomic_uchar *)v6;
        if (v6)
        {
          *(unsigned char *)(v3 + 33WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 4;
          uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::networkStateChanged((WebCore::MediaPlayer *)result);
          int8x8_t v4 = (atomic_uchar **)v6;
          char v6 = 0;
          if (v4) {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
          }
        }
      }
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 48));
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WebCore::MediaStreamPrivate &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9ECF78;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WebCore::MediaStreamPrivate &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECF78;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WebCore::MediaStreamPrivate &)::$_0,void>::call(void *a1)
{
  uint64_t result = (atomic_uchar *)a1[1];
  if (result)
  {
    uint64_t v3 = a1[3];
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, a1[2], &v7);
    if (v7)
    {
      uint64_t result = *(atomic_uchar **)(v3 + 128);
      if (result)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 136), &v6);
        uint64_t result = (atomic_uchar *)v6;
        if (v6)
        {
          *(unsigned char *)(v3 + 33WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 4;
          uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::networkStateChanged((WebCore::MediaPlayer *)result);
          int8x8_t v4 = (atomic_uchar **)v6;
          char v6 = 0;
          if (v4) {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
          }
        }
      }
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 48));
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::optional<BOOL>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::optional<BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= (2 * v2));
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(40 * v4 + 16));
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = result + 16;
    do
    {
      *(_WORD *)(v8 + 32) = 0;
      *(_OWORD *)uint64_t v8 = 0uLL;
      *(_OWORD *)(v8 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0uLL;
      v8 += 40;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    uint64_t v9 = 0;
    uint64_t v2 = v2;
    uint64_t v25 = v1;
    uint64_t v26 = v2;
    while (1)
    {
      uint64_t v10 = v1 + 40 * v9;
      int v11 = *(_DWORD *)(v10 + 24);
      if (v11) {
        break;
      }
      if (*(void *)v10 != -1) {
        goto LABEL_13;
      }
LABEL_27:
      if (++v9 == v2) {
        return WTF::fastFree((WTF *)(v1 - 16), v6);
      }
    }
    if (v11 != 1)
    {
      uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_31;
    }
LABEL_13:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v1 + 40 * v9));
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(v10 + 24);
      if (v13 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9ECD00[v13])(&v28, v1 + 40 * v9);
      }
      *(_DWORD *)(v10 + 24) = -1;
    }
    else
    {
      uint64_t v14 = *a1;
      if (*a1) {
        int v15 = *(_DWORD *)(v14 - 8);
      }
      else {
        int v15 = 0;
      }
      int v31 = -1640531527;
      __int16 v32 = 0;
      char v33 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v31, v1 + 40 * v9);
      unsigned int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
      int v17 = 0;
      do
      {
        unsigned int v18 = v16 & v15;
        uint64_t v19 = (unsigned int *)(v14 + 40 * (v16 & v15));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19);
        int v21 = v20;
        unsigned int v16 = ++v17 + v18;
      }
      while (!v21);
      uint64_t v22 = v19[6];
      if (v22 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9ECD00[v22])(&v29, v14 + 40 * v18);
      }
      *(unsigned char *)uint64_t v19 = 0;
      v19[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v14 + 40 * v18, v10);
      uint64_t v23 = v14 + 40 * v18;
      uint64_t v1 = v25;
      *(_WORD *)(v23 + 32) = *(_WORD *)(v25 + 40 * v9 + 32);
      uint64_t v24 = *(unsigned int *)(v10 + 24);
      if (v24 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9ECD00[v24])(&v30, v10);
      }
      *(_DWORD *)(v10 + 24) = -1;
      uint64_t v2 = v26;
    }
    goto LABEL_27;
  }
LABEL_31:
  if (v1) {
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteMediaPlayerProxy::SetLegacyCDMSession>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1173;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v15 = v6;
  uint64_t v7 = *a2;
  LODWORD(a2) = *(unsigned __int8 *)(*a2 + 8);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (a2)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19910387CLL);
    }
    *uint64_t v8 = 1;
    if (!*(unsigned char *)(v7 + 8))
    {
      uint64_t v14 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v14);
    }
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, (uint64_t *)v7);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19910389CLL);
    }
    *uint64_t v8 = 0;
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  int v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ECFB0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ECFB0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (!a2 || (uint64_t v4 = *(void *)a2) == 0)
  {
    uint64_t v10 = *(atomic_uchar **)(a1 + 8);
    uint64_t v11 = *(void *)(a1 + 16);
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(v10, v11);
  }
  unint64_t v5 = *((void *)a2 + 1);
  if (v5 <= *((void *)a2 + 2) - v4)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v5);
        unint64_t v12 = 0;
        uint64_t v22 = *(void *)a2;
        uint64_t v23 = *((void *)a2 + 1);
        uint64_t v24 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v13 = 0;
        if (v24 && v23)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
          uint64_t v13 = *(void *)a2;
          unint64_t v12 = *((void *)a2 + 1);
        }
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_18;
  }
  char v6 = (unsigned char *)*((void *)a2 + 2);
  *((void *)a2 + 2) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v12 = v5;
    uint64_t v13 = v4;
LABEL_18:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    }
    goto LABEL_19;
  }
  if (*v6)
  {
    IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)v25);
    if (!v26)
    {
LABEL_19:
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (v18)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
          uint64_t v19 = *(void *)a2;
          uint64_t v20 = *((void *)a2 + 1);
          uint64_t v21 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          if (v21)
          {
            if (v20) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
            }
          }
        }
      }
      return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16));
    }
  }
  uint64_t result = *(atomic_uchar **)(a1 + 8);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 16), v25);
    uint64_t v9 = v25[0];
    if (v25[0])
    {
      if (v7)
      {
        uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
        uint64_t v9 = v25[0];
        v25[0] = 0;
        if (!v9) {
          return result;
        }
      }
      else
      {
        v25[0] = 0;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 48));
    }
  }
  return result;
}

atomic_uchar *IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(atomic_uchar *result, uint64_t a2)
{
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, a2, &v3);
    uint64_t v2 = v3;
    if (v3)
    {
      uint64_t v3 = 0;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 48));
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          char v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v27 + 8), v10);
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v30 + 8), v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v16 + 8), v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*result;
  if (*result) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return result;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*result)
  {
    unsigned int v5 = (void *)(*result + 16 * *(unsigned int *)(*result - 4));
    if (v5 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9ECFD8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ECFD8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (uint64_t v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    uint64_t v4 = (void *)v3;
    uint64_t result = *(atomic_uchar **)(a1 + 8);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 16), &v9);
      uint64_t result = (atomic_uchar *)v9;
      if (v9)
      {
        uint64_t result = (atomic_uchar *)WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID((uint64_t)v9, v4);
        uint64_t v6 = v9;
        uint64_t v9 = 0;
        if (v6) {
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 6));
        }
      }
    }
  }
  else
  {
    unsigned int v7 = *(atomic_uchar **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()> &&)::$_0>(v7, v8);
  }
  return result;
}

atomic_uchar *IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(atomic_uchar *result, uint64_t a2)
{
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, a2, &v3);
    uint64_t result = (atomic_uchar *)v3;
    if (v3)
    {
      uint64_t result = (atomic_uchar *)WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID((uint64_t)v3, 0);
      uint64_t v2 = v3;
      uint64_t v3 = 0;
      if (v2) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((atomic_uchar **)v2 + 6));
      }
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::MediaSourcePrivateRemote::queue(void)::$_0 &&>>()
{
  uint64_t result = WTF::WorkQueue::create();
  qword_1EB359E58 = v1;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ED000;
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 24), a2);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 48));
  }
  int v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED000;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 24), a2);
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 48));
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  WebCore::ContentType::ContentType((WebCore::ContentType *)&v67, (const WTF::String *)(a1 + 32));
  uint64_t v50 = 0;
  char v51 = 0;
  uint64_t v52 = 0;
  WTF::URL::invalidate((WTF::URL *)&v52);
  char v54 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v64 = 0;
  char v65 = 0;
  char v66 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  char v57 = 0;
  __int16 v53 = 1;
  WTF::String::operator=(&v50, &v67);
  char v51 = v68;
  if (!WebKit::RemoteMediaPlayerMIMETypeCache::supportsTypeAndCodecs(*(WebKit::RemoteMediaPlayerMIMETypeCache **)(v3 + 200), (const WebCore::MediaEngineSupportParameters *)&v50))
  {
    **(unsigned char **)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
    goto LABEL_42;
  }
  int v5 = *(char ***)(*(void *)(a1 + 56) + 32);
  uint64_t v6 = *(void *)(v3 + 192);
  uint64_t v72 = 0;
  IPC::Connection::createSyncMessageEncoder(3730, v6, &v72, &v71);
  IPC::ArgumentCoder<WebCore::ContentType,void>::encode(v71, (uint64_t)&v67);
  IPC::Connection::sendSyncMessage((uint64_t)v5, v72, (uint64_t *)&v71, 0, (uint64_t)&v69, INFINITY);
  int v7 = v70;
  if (!v70)
  {
    int v5 = v69;
    unint64_t v10 = (unint64_t)v69[1];
    uint64_t v11 = *v69;
    unint64_t v12 = v5[2] - *v5;
    if (v10 <= v12)
    {
      unint64_t v18 = 0;
      unint64_t v19 = 0;
      *uint64_t v69 = 0;
      v5[1] = 0;
      uint64_t v20 = (uint64_t)v5[3];
      if (v20) {
        goto LABEL_53;
      }
      goto LABEL_19;
    }
    uint64_t v13 = &v11[v12];
    void v69[2] = v13 + 1;
    if (!v11)
    {
      unint64_t v18 = v10;
      unint64_t v19 = 0;
      goto LABEL_19;
    }
    unint64_t v9 = *v13;
    if (v9 >= 3) {
      goto LABEL_28;
    }
    if (v10 <= v13 + 1 - v11)
    {
      unint64_t v18 = 0;
      unint64_t v19 = 0;
      *int v5 = 0;
      v5[1] = 0;
      unsigned int v22 = v5[3];
      if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 16))(v22);
        unint64_t v18 = 0;
        uint64_t v42 = *v5;
        uint64_t v43 = v5[1];
        uint64_t v44 = v5[3];
        *int v5 = 0;
        v5[1] = 0;
        unint64_t v19 = 0;
        if (v44)
        {
          if (v43)
          {
            (*(void (**)(char *, char *))(*(void *)v44 + 16))(v44, v42);
            unint64_t v19 = *v5;
            unint64_t v18 = (unint64_t)v5[1];
          }
        }
      }
    }
    else
    {
      void v5[2] = v13 + 2;
      unsigned int v14 = v13[1];
      if (v14 < 2)
      {
        if (v14)
        {
          uint64_t v15 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(v5);
          if (!v16)
          {
            int v23 = *v5;
            unsigned int v24 = v5[1];
            *int v5 = 0;
            v5[1] = 0;
            uint64_t v25 = v5[3];
            if (v25 && v24) {
              (*(void (**)(char *, char *))(*(void *)v25 + 16))(v25, v23);
            }
            goto LABEL_27;
          }
          if (v70) {
            goto LABEL_52;
          }
          uint64_t v1 = v15;
          int v8 = 1;
          int v5 = v69;
        }
        else
        {
          int v8 = 0;
          uint64_t v1 = 0;
        }
        uint64_t v69 = 0;
        char v46 = v9;
        uint64_t v47 = v1;
        char v48 = v8;
        uint64_t v45 = v5;
        goto LABEL_17;
      }
      unint64_t v18 = v10;
      unint64_t v19 = v11;
    }
    *int v5 = 0;
    v5[1] = 0;
    unint64_t v21 = v5[3];
    if (!v21 || !v18) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v70 != 1) {
    goto LABEL_52;
  }
  int v8 = 0;
  unint64_t v9 = 0;
  LOBYTE(v45) = (_BYTE)v69;
LABEL_17:
  int v49 = v7;
  int v17 = v7;
LABEL_31:
  ((void (*)(char *, char ***))off_1EE9ECF90[v17])(&v73, &v69);
  int v30 = v8;
  int v5 = (char **)v9;
  while (1)
  {
    int v31 = v71;
    unint64_t v71 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v27);
      WTF::fastFree(v32, v33);
      if (v7)
      {
LABEL_34:
        LOBYTE(v5) = 1;
        goto LABEL_41;
      }
    }
    else if (v7)
    {
      goto LABEL_34;
    }
    if (v5) {
      goto LABEL_41;
    }
    if (v30) {
      break;
    }
    __break(1u);
LABEL_52:
    uint64_t v20 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
    if (v10)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      unint64_t v19 = *v5;
      unint64_t v18 = (unint64_t)v5[1];
    }
    else
    {
      unint64_t v18 = 0;
      unint64_t v19 = 0;
    }
LABEL_19:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *int v5 = 0;
    v5[1] = 0;
    unint64_t v21 = v5[3];
    if (v21)
    {
      if (v18)
      {
LABEL_25:
        (*(void (**)(char *, char *, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
LABEL_27:
        uint64_t v11 = *v5;
        unint64_t v10 = (unint64_t)v5[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
LABEL_28:
    *int v5 = 0;
    v5[1] = 0;
    char v26 = v5[3];
    if (v26 && v10) {
      (*(void (**)(char *, char *))(*(void *)v26 + 16))(v26, v11);
    }
    uint64_t v27 = *v5;
    uint64_t v28 = v5[1];
    *int v5 = 0;
    v5[1] = 0;
    uint64_t v29 = v5[3];
    if (v29 && v28) {
      (*(void (**)(char *, char *))(*(void *)v29 + 16))(v29, v27);
    }
    int v8 = 0;
    unint64_t v9 = 0;
    int v30 = 0;
    int v5 = 0;
    LOBYTE(v45) = 13;
    int v7 = 1;
    int v49 = 1;
    int v17 = v70;
    if (v70 != -1) {
      goto LABEL_31;
    }
  }
  **(void **)(a1 + 24) = v1;
  uint64_t v35 = *(void *)(a1 + 48);
  uint64_t v34 = *(void *)(a1 + 56);
  uint64_t v36 = WTF::fastMalloc((WTF *)0x1A0);
  uint64_t v37 = WebKit::SourceBufferPrivateRemote::SourceBufferPrivateRemote(v36, v34, v1, (void *)v3, v35);
  int v38 = *(uint64_t **)(a1 + 40);
  uint64_t v39 = *v38;
  uint64_t *v38 = v37;
  if (v39) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v39 + 8));
  }
  LOBYTE(v5) = 0;
LABEL_41:
  **(unsigned char **)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (_BYTE)v5;
  ((void (*)(char ***, char ***))off_1EE9ED018[v7])(&v69, &v45);
LABEL_42:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v50, v4);
  uint64_t result = v67;
  uint64_t v67 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ED038;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED038;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t *)(v2 + 16);
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(unsigned int *)(v2 + 28);
  if (v5 == *(_DWORD *)(v2 + 24))
  {
    uint64_t result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)v4);
    uint64_t v4 = result;
    uint64_t v5 = *(unsigned int *)(v2 + 28);
    uint64_t v6 = (void *)(*(void *)(v2 + 16) + 8 * v5);
  }
  else
  {
    uint64_t v6 = (void *)(*result + 8 * v5);
  }
  uint64_t v7 = *v4;
  *uint64_t v4 = 0;
  *uint64_t v6 = v7;
  *(_DWORD *)(v2 + 28) = v5 + 1;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::durationChanged(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9ED060;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::durationChanged(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED060;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::durationChanged(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v3 + 168);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 176), &v12);
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v12) {
      return result;
    }
    uint64_t v6 = *(void *)(v12 + 32);
    uint64_t v7 = *(void *)(v3 + 192);
    int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v8 = 1250;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v13 = v8;
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v8, a1 + 24);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    uint64_t result = (atomic_uchar *)v13;
    uint64_t v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
    }
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 24), a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::bufferedChanged(WebCore::PlatformTimeRanges const&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9ED088;
  uint64_t v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::bufferedChanged(WebCore::PlatformTimeRanges const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED088;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::bufferedChanged(WebCore::PlatformTimeRanges const&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v3 + 168);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 176), &v12);
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v12) {
      return result;
    }
    uint64_t v6 = *(void *)(v12 + 32);
    uint64_t v7 = *(void *)(v3 + 192);
    int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v8 = 1249;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v13 = v8;
    IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, a1 + 24);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    uint64_t result = (atomic_uchar *)v13;
    uint64_t v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
    }
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 24), a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::markEndOfStream(WebCore::MediaSourcePrivateEndOfStreamStatus)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9ED0B0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::markEndOfStream(WebCore::MediaSourcePrivateEndOfStreamStatus)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED0B0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::markEndOfStream(WebCore::MediaSourcePrivateEndOfStreamStatus)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = *(void *)(v3 + 168);
  if (result) {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)result, *(void *)(v3 + 176), &v15);
  }
  else {
    uint64_t v15 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v15) {
      return result;
    }
    uint64_t v6 = *(void *)(v15 + 32);
    char v7 = *(unsigned char *)(a1 + 24);
    uint64_t v8 = *(void *)(v3 + 192);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1251;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    char v16 = v9;
    unint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
    if (!v11)
    {
      uint64_t result = 831;
      __break(0xC471u);
      return result;
    }
    *unint64_t v10 = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v16, 0, 0);
    uint64_t result = (uint64_t)v16;
    char v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      uint64_t result = WTF::fastFree(v13, v14);
    }
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12) {
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 24), a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9ED0D8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED0D8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v2 + 168);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v2 + 176), &v11);
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 224));
  if ((v4 & 1) == 0)
  {
    if (!v11) {
      return result;
    }
    uint64_t v5 = *(void *)(v11 + 32);
    uint64_t v6 = *(void *)(v2 + 192);
    char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v7 = 1254;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v12 = v7;
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
    uint64_t result = (atomic_uchar *)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      uint64_t result = (atomic_uchar *)WTF::fastFree(v9, v10);
    }
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9ED100;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED100;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v3 + 168);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 176), &v13);
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v13) {
      return result;
    }
    uint64_t v6 = *(void *)(v13 + 32);
    char v7 = *(unsigned char *)(a1 + 24);
    uint64_t v8 = *(void *)(v3 + 192);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1252;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    unsigned int v14 = v9;
    IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::encode<IPC::Encoder>(v9, v7);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
    uint64_t result = (atomic_uchar *)v14;
    unsigned int v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      uint64_t result = (atomic_uchar *)WTF::fastFree(v11, v12);
    }
  }
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 24), a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9ED128;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED128;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v3 + 168);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 176), &v14);
  }
  else {
    uint64_t v14 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v14) {
      return result;
    }
    uint64_t v6 = *(void *)(v14 + 32);
    char v7 = (uint64_t *)(a1 + 24);
    uint64_t v8 = *(void *)(v3 + 192);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1253;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v15 = v9;
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v9, (uint64_t)v7);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v15, 0, 0);
    uint64_t result = (atomic_uchar *)v15;
    uint64_t v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      uint64_t result = (atomic_uchar *)WTF::fastFree(v12, v13);
    }
    uint64_t v10 = *v7;
    *(void *)(v3 + 133) = *(uint64_t *)((char *)v7 + 5);
    *(void *)(v3 + 128) = v10;
  }
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRenderingThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  do
  {
    uint64_t result = MEMORY[0x1997420D0](*(unsigned int *)(v1 + 212));
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v1 + 252));
    if (v3) {
      break;
    }
    uint64_t v4 = *(void *)(v1 + 240);
    if (!v4) {
      break;
    }
    if (*(void *)(v4 + 8) != 4)
    {
      uint64_t result = 82;
      __break(0xC471u);
      return result;
    }
    unsigned int v5 = atomic_load(*(unsigned int **)(v4 + 16));
    unsigned int v6 = *(_DWORD *)(v1 + 248);
    if (v5 < v6) {
      int v7 = ~v6;
    }
    else {
      int v7 = -v6;
    }
    *(_DWORD *)(v1 + 248) = v5;
    for (unsigned int i = v7 + v5; i; *(void *)(v1 + 200) += v10)
    {
      uint64_t v9 = (WTF::MonotonicTime *)mach_absolute_time();
      WTF::MonotonicTime::fromMachAbsoluteTime(v9);
      if (i >= 0x1000) {
        uint64_t v10 = 4096;
      }
      else {
        uint64_t v10 = i;
      }
      uint64_t v11 = *(unsigned int **)(*(void *)(v1 + 192) + 40);
      unsigned int v12 = *(_DWORD *)(*(void *)(v1 + 32) + 28);
      if (v12 >= *v11) {
        uint64_t v13 = *v11;
      }
      else {
        uint64_t v13 = v12;
      }
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v15 = (float **)(v11 + 4);
        do
        {
          WebCore::AudioBus::setChannelMemory(*(WebCore::AudioBus **)(v1 + 32), v14++, *v15);
          v15 += 2;
        }
        while (v13 != v14);
      }
      i -= v10;
      WebCore::AudioDestinationResampler::pullRendered((WebCore::AudioDestinationResampler *)v1);
      WebCore::CARingBuffer::store(*(WebCore::CARingBuffer **)(v1 + 184), *(const AudioBufferList **)(*(void *)(v1 + 192) + 40));
      uint64_t result = WebCore::AudioDestinationResampler::render();
    }
    unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v1 + 252));
  }
  while ((v16 & 1) == 0);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ED178;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED178;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ED1A0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED1A0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v5 > 0xFFu)
    {
      BOOL v6 = v5 != 0;
      WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v7 + 16))(v7, v6);
      uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
      return v8(v7);
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }

  return IPC::Connection::cancelReply<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(uint64_t a1)
{
  WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)a1);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ED1C8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED1C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9ED1F0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9ED1F0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioDestinationProxy,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 152), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v5 > 0xFFu)
    {
      BOOL v6 = v5 == 0;
      WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v7 + 16))(v7, v6);
      uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
      return v8(v7);
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }

  return IPC::Connection::cancelReply<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(uint64_t a1)
{
  WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)a1);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSession::configurationChanged(WebKit::RemoteAudioSessionConfiguration &&)::$_0,void,WebCore::AudioSessionConfigurationChangeObserver &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (**(unsigned char **)(result + 8)) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
  }
  if (**(unsigned char **)(v3 + 24)) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, v4);
  }
  if (**(unsigned char **)(v3 + 32))
  {
    unsigned __int16 v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
    return v5(a2, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMProxy::GetSupportedConfiguration,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>>(WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED268;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMProxy::GetSupportedConfiguration,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>>(WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED268;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMProxy::GetSupportedConfiguration,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>>(WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = (uint64_t *)(a1 + 8);
  if (!a2 || (uint64_t v9 = a2, (v10 = *a2) == 0))
  {
LABEL_15:
    LOBYTE(v64) = 0;
    char v73 = 0;
    WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(v8, (uint64_t)&v64);
    char v26 = (uint64_t *)&v64;
    return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v25);
  }
  unint64_t v11 = a2[1];
  if (v11 <= a2[2] - v10)
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    uint64_t v36 = v9[3];
    if (v36)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v10, v11);
        unint64_t v34 = 0;
        uint64_t v38 = *v9;
        uint64_t v39 = v9[1];
        uint64_t v40 = v9[3];
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v35 = 0;
        if (v40 && v39)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38, v39);
          uint64_t v35 = *v9;
          unint64_t v34 = v9[1];
        }
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
    goto LABEL_22;
  }
  uint64_t v12 = (unsigned char *)a2[2];
  a2[2] = (uint64_t)(v12 + 1);
  unsigned int v13 = *v12;
  if (v13 >= 2)
  {
    unint64_t v34 = v11;
    uint64_t v35 = v10;
LABEL_22:
    *uint64_t v9 = 0;
    v9[1] = 0;
    uint64_t v37 = v9[3];
    if (v37 && v34) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
    }
    goto LABEL_13;
  }
  if (!*v12)
  {
    LOBYTE(v75) = 0;
    char v84 = 0;
    LOBYTE(v64) = 0;
    char v73 = 0;
    char v74 = 1;
    std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, a2);
    LOBYTE(v52) = 0;
    char v62 = 0;
    goto LABEL_9;
  }
  IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>((IPC::Decoder *)a2, (uint64_t)&v75);
  if (!v84)
  {
    std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v14);
LABEL_13:
    uint64_t v27 = *v9;
    uint64_t v28 = v9[1];
    *uint64_t v9 = 0;
    v9[1] = 0;
    uint64_t v29 = v9[3];
    if (v29 && v28)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
      uint64_t v31 = *v9;
      uint64_t v32 = v9[1];
      uint64_t v33 = v9[3];
      *uint64_t v9 = 0;
      v9[1] = 0;
      if (v33 && v32) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
      }
    }
    else
    {
      *uint64_t v9 = 0;
      v9[1] = 0;
    }
    goto LABEL_15;
  }
  uint64_t v15 = *((void *)&v75 + 1);
  uint64_t v50 = v75;
  long long v75 = 0u;
  unsigned int v16 = v76;
  unsigned int v43 = HIDWORD(v76);
  uint64_t v76 = 0;
  uint64_t v17 = v77;
  uint64_t v77 = 0;
  unsigned int v51 = v78;
  uint64_t v44 = v8;
  unsigned int v18 = HIDWORD(v78);
  uint64_t v78 = 0;
  uint64_t v19 = v79;
  uint64_t v79 = 0;
  unsigned int v4 = v80;
  unsigned int v20 = HIDWORD(v80);
  uint64_t v80 = 0;
  __int16 v3 = v81;
  __int16 v70 = v81;
  uint64_t v41 = v82;
  uint64_t v42 = v17;
  uint64_t v82 = 0;
  unsigned int v21 = v83;
  LODWORD(v9) = HIDWORD(v83);
  uint64_t v83 = 0;
  char v73 = 1;
  char v74 = 1;
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v14);
  long long v64 = 0u;
  uint64_t v52 = v50;
  uint64_t v53 = v15;
  uint64_t v49 = v15;
  unint64_t v65 = 0;
  unsigned int v45 = v16;
  unsigned int v46 = v18;
  unint64_t v54 = __PAIR64__(v43, v16);
  unsigned int v6 = v43;
  uint64_t v7 = v42;
  uint64_t v66 = 0;
  uint64_t v55 = v42;
  unint64_t v67 = 0;
  unint64_t v56 = __PAIR64__(v18, v51);
  uint64_t v8 = v44;
  uint64_t v68 = 0;
  uint64_t v47 = v19;
  uint64_t v57 = v19;
  unsigned int v5 = v21;
  uint64_t v2 = v41;
  unint64_t v69 = 0;
  unint64_t v58 = __PAIR64__(v20, v4);
  unsigned int v48 = v20;
  __int16 v59 = v3;
  uint64_t v71 = 0;
  uint64_t v60 = v41;
  unint64_t v72 = 0;
  unint64_t v61 = __PAIR64__(v9, v5);
  char v62 = 1;
LABEL_9:
  char v63 = 1;
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v22);
  LOBYTE(v64) = 0;
  char v73 = 0;
  if (v13)
  {
    uint64_t v23 = v52;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    *(void *)&long long v64 = v23;
    *((void *)&v64 + 1) = v49;
    unint64_t v54 = 0;
    unint64_t v65 = __PAIR64__(v6, v45);
    uint64_t v55 = 0;
    uint64_t v66 = v7;
    unint64_t v56 = 0;
    unint64_t v67 = __PAIR64__(v46, v51);
    uint64_t v57 = 0;
    uint64_t v68 = v47;
    unint64_t v58 = 0;
    unint64_t v69 = __PAIR64__(v48, v4);
    __int16 v70 = v3;
    uint64_t v60 = 0;
    uint64_t v71 = v2;
    unint64_t v61 = 0;
    unint64_t v72 = __PAIR64__(v9, v5);
    char v73 = 1;
  }
  WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(v8, (uint64_t)&v64);
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v24);
  char v26 = &v52;
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v25);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v3);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteCDMInstanceSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteCDMInstanceSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RemoteCDMInstanceSession&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *unsigned int v16 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
    unsigned int v21 = *(atomic_uint **)(a3 + 8);
    if (v21) {
      atomic_fetch_add(v21, 1u);
    }
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = (uint64_t)v21;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v26 = *a1;
    if (*a1) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
      {
LABEL_27:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v16);
        unsigned int v16 = result;
        uint64_t v26 = *a1;
        if (*a1) {
          unint64_t v29 = *(unsigned int *)(v26 - 4);
        }
        else {
          unint64_t v29 = 0;
        }
      }
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_27;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v26 + 16 * v29;
    *(unsigned char *)(a4 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
    return result;
  }
  unsigned int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      unsigned int v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *unsigned int v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = *a2;
        unsigned int v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v8 + 16 * v25;
  *(unsigned char *)(a4 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v31 = *(atomic_uint **)(a3 + 8);
  if (v31)
  {
    atomic_fetch_add(v31, 1u);
    unsigned int v16 = *(uint64_t **)a4;
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v31;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    return (uint64_t *)WTF::fastFree((WTF *)result, v30);
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstance::RemoteCDMInstance(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  uint64_t v5 = a1 + 16;
  *(void *)a1 = &unk_1EE9ED320;
  *(void *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = &unk_1EE9ED398;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *a3;
  uint64_t v7 = *a4;
  *a4 = 0;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    char v9 = *(WebKit::RemoteCDMFactory **)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = WebKit::RemoteCDMFactory::gpuProcessConnection(v9);
      uint64_t v11 = *(void *)(a1 + 40);
      v14[0] = 65;
      v14[1] = v11;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v10 + 48), (unsigned __int8 *)v14, v5, &v13);
    }
  }
  return a1;
}

void WebKit::RemoteCDMInstance::~RemoteCDMInstance(WebKit::RemoteCDMInstance *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      WebKit::RemoteCDMFactory::removeInstance(v4, *((void *)this + 5));
      uint64_t v5 = *((void *)this + 4);
      if (v5) {
        uint64_t v6 = *(WebKit::RemoteCDMFactory **)(v5 + 8);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = WebKit::RemoteCDMFactory::gpuProcessConnection(v6);
      IPC::MessageReceiverMap::removeMessageReceiver(v7 + 40, 0x41u, *((void *)this + 5));
    }
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, a2);
  }
  char v9 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, a2);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCDMInstance::~RemoteCDMInstance(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteCDMInstance::~RemoteCDMInstance(WebKit::RemoteCDMInstance *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCDMInstance::~RemoteCDMInstance((WebKit::RemoteCDMInstance *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteCDMInstance::unrequestedInitializationDataReceived(void *result)
{
  uint64_t v1 = result[7];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 16))();
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDMInstance::initializeWithConfiguration(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && (uint64_t v8 = *(WebKit::RemoteCDMFactory **)(v6 + 8)) != 0)
  {
    unint64_t v12 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v8) + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *a5;
    *a5 = 0;
    unsigned int v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned int v15 = &unk_1EE9ED728;
    v15[1] = v14;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v17 = 741;
    *((void *)v17 + 1) = v13;
    *((void *)v17 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    int v30 = v17;
    IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode(v17, a2);
    unsigned int v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
    if (!v19 || (*unsigned int v18 = a3, v20 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1), !v21))
    {
      __break(0xC471u);
      JUMPOUT(0x199106B78);
    }
    *unsigned int v20 = a4;
    v29[0] = (uint64_t)v15;
    v29[1] = v16;
    IPC::Connection::sendMessageWithAsyncReply(v12, &v30, v29, 0, 0);
    uint64_t v23 = v29[0];
    v29[0] = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t result = v30;
    int v30 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v22);
      return (IPC::Encoder *)WTF::fastFree(v27, v28);
    }
  }
  else
  {
    uint64_t v25 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v25 + 16))(v25, 0);
    uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v25 + 8);
    return (IPC::Encoder *)v26(v25);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDMInstance::setServerCertificate(uint64_t a1, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && (uint64_t v6 = *(WebKit::RemoteCDMFactory **)(v4 + 8)) != 0)
  {
    uint64_t v8 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v6) + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v11 = &unk_1EE9ED750;
    v11[1] = v10;
    uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 742;
    *((void *)v13 + 1) = v9;
    *((void *)v13 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    unsigned int v22 = v13;
    IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(v13, *a2);
    v21[0] = (uint64_t)v11;
    v21[1] = v12;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v22, v21, 0, 0);
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t result = v22;
    unsigned int v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    uint64_t v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
    unsigned int v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);
    return (IPC::Encoder *)v18(v17);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDMInstance::setStorageDirectory(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = this;
    this = *(IPC::Encoder **)(v2 + 8);
    if (this)
    {
      uint64_t v5 = *(void *)(WebKit::RemoteCDMFactory::gpuProcessConnection(this) + 32);
      uint64_t v6 = *((void *)v3 + 5);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 743;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v11 = v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
      this = v11;
      uint64_t v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

void WebKit::RemoteCDMInstance::createSession(WebKit::RemoteCDMInstance *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 4);
  if (!v3 || (uint64_t v5 = *(WebKit::RemoteCDMFactory **)(v3 + 8)) == 0)
  {
    *a2 = 0;
    return;
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    uint64_t v9 = *((void *)this + 4);
    if (v9) {
      uint64_t v5 = *(WebKit::RemoteCDMFactory **)(v9 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(void *)(WebKit::RemoteCDMFactory::gpuProcessConnection(v5) + 32);
  uint64_t v28 = v8;
  uint64_t v11 = *((void *)this + 5);
  uint64_t v35 = 0;
  IPC::Connection::createSyncMessageEncoder(3630, v11, &v35, &v31);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v31, &v28);
  IPC::Connection::sendSyncMessage(v10, v35, (uint64_t *)&v31, 0, (uint64_t)&v33, INFINITY);
  int v12 = v34;
  if (!v34)
  {
    uint64_t v13 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v33);
    if (!(_BYTE)v14)
    {
      LOBYTE(v29[0]) = 13;
      int v12 = 1;
      int v30 = 1;
      int v16 = v34;
      if (v34 == -1) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (!v34)
    {
      uint64_t v8 = v13;
      uint64_t v15 = v33;
      uint64_t v33 = 0;
      v29[0] = v15;
      v29[1] = v13;
      goto LABEL_15;
    }
LABEL_37:
    int v27 = (WebKit::RemoteCDMInstanceSession *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(v27);
    return;
  }
  if (v34 != 1) {
    goto LABEL_37;
  }
  LOBYTE(v29[0]) = (_BYTE)v33;
LABEL_15:
  int v30 = v12;
  int v16 = v12;
LABEL_16:
  ((void (*)(char *, uint64_t **))off_1EE9ED768[v16])(&v32, &v33);
LABEL_17:
  uint64_t v17 = v31;
  uint64_t v31 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v25, v26);
  }
  uint64_t v18 = 0;
  if (!v12 && v8)
  {
    uint64_t v19 = *((void *)this + 4);
    if (v19 && (uint64_t v20 = *(void *)(v19 + 8)) != 0)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v20 + 16), *(void *)(v19 + 8));
      uint64_t v21 = *(atomic_uint **)(v20 + 16);
      if (v21) {
        atomic_fetch_add(v21, 1u);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v23 = v22;
    uint64_t v18 = v22 + 16;
    *(void *)uint64_t v22 = &unk_1EE9ED3D0;
    *(void *)(v22 + 8) = 0;
    *(void *)(v22 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = &unk_1EE9ED450;
    *(void *)(v22 + 32) = v21;
    *(void *)(v22 + 40) = v8;
    *(void *)(v22 + 48) = 0;
    uint64_t v24 = *((void *)this + 4);
    if (v24) {
      uint64_t v24 = *(void *)(v24 + 8);
    }
    *(_DWORD *)(v22 + 24) = 2;
    uint64_t v35 = v8;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteCDMInstanceSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteCDMInstanceSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RemoteCDMInstanceSession&>((uint64_t *)(v24 + 24), &v35, v22, (uint64_t)&v33);
    if (*(_DWORD *)(v23 + 24) == 1) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    else {
      --*(_DWORD *)(v23 + 24);
    }
  }
  *a2 = v18;
  if (v30 != -1) {
    ((void (*)(uint64_t **, void *))off_1EE9ED688[v30])(&v33, v29);
  }
}

void WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(WebKit::RemoteCDMInstanceSession *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  WebKit::RemoteCDMFactory::removeSession(v3, *((void *)this + 5));
  uint64_t v5 = (unsigned int *)*((void *)this + 6);
  *((void *)this + WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(WebKit::RemoteCDMInstanceSession *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession((WebKit::RemoteCDMInstanceSession *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::setLogIdentifier(WebKit::RemoteCDMInstanceSession *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    uint64_t v5 = *(WebKit::RemoteCDMFactory **)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(WebKit::RemoteCDMFactory::gpuProcessConnection(v5) + 32);
  uint64_t v13 = a2;
  uint64_t v7 = *((void *)this + 5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 748;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v13);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::setLogIdentifier(WebKit::RemoteCDMInstanceSession *this, uint64_t a2)
{
  return WebKit::RemoteCDMInstanceSession::setLogIdentifier((WebKit::RemoteCDMInstanceSession *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteCDMInstanceSession::requestLicense(uint64_t a1, char a2, char a3, uint64_t *a4, atomic_uint **a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 && (uint64_t v9 = *(WebKit::RemoteCDMFactory **)(v7 + 8)) != 0)
  {
    uint64_t v14 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v9) + 32);
    uint64_t v15 = *a5;
    *a5 = 0;
    uint64_t v31 = v15;
    uint64_t v16 = *a6;
    *a6 = 0;
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v18 = &unk_1EE9ED788;
    v18[1] = v16;
    uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v20 = 747;
    *((void *)v20 + 1) = v17;
    *((void *)v20 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v20 + 16;
    *((void *)v20 + 67) = 512;
    *((void *)v20 + 68) = 0;
    *((void *)v20 + 70) = 0;
    *((void *)v20 + 69) = 0;
    IPC::Encoder::encodeHeader(v20);
    uint64_t v33 = v20;
    IPC::ArgumentCoder<WebCore::CDMSessionType,void>::encode<IPC::Encoder>(v20, a2);
    uint64_t v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
    if (!v22)
    {
      uint64_t result = 831;
      __break(0xC471u);
      return result;
    }
    *uint64_t v21 = a3;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, a4);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v20, &v31);
    v32[0] = (uint64_t)v18;
    v32[1] = v19;
    IPC::Connection::sendMessageWithAsyncReply(v14, &v33, v32, 0, 0);
    uint64_t v24 = v32[0];
    v32[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v33;
    uint64_t v33 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v23);
      WTF::fastFree(v29, v30);
    }
    uint64_t result = (uint64_t)v31;
    uint64_t v31 = 0;
    if (result) {
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v23);
    }
  }
  else
  {
    int v27 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    v32[0] = WebCore::SharedBuffer::SharedBuffer(v27);
    uint64_t v28 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, void))(*(void *)v28 + 16))(v28, v32, MEMORY[0x1E4F30980], 0, 0);
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    uint64_t result = v32[0];
    v32[0] = 0;
    if (result) {
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v23);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteCDMInstanceSession::requestLicense(uint64_t a1, char a2, char a3, uint64_t *a4, atomic_uint **a5, uint64_t *a6)
{
  return WebKit::RemoteCDMInstanceSession::requestLicense(a1 - 16, a2, a3, a4, a5, a6);
}

unsigned int *WebKit::RemoteCDMInstanceSession::updateLicense(uint64_t a1, uint64_t *a2, char a3, atomic_uint **a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && (uint64_t v8 = *(WebKit::RemoteCDMFactory **)(v6 + 8)) != 0)
  {
    int v12 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v8) + 32);
    uint64_t v13 = *a4;
    *a4 = 0;
    int v30 = v13;
    uint64_t v14 = *a5;
    *a5 = 0;
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v16 = &unk_1EE9ED7B0;
    v16[1] = v14;
    uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v18 = 750;
    *((void *)v18 + 1) = v15;
    *((void *)v18 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 68) = 0;
    *((void *)v18 + 70) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    int v27 = v18;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, a2);
    IPC::ArgumentCoder<WebCore::CDMSessionType,void>::encode<IPC::Encoder>(v18, a3);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v18, &v30);
    v32[0] = (uint64_t)v16;
    v32[1] = v17;
    IPC::Connection::sendMessageWithAsyncReply(v12, &v27, v32, 0, 0);
    uint64_t v20 = v32[0];
    v32[0] = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = v27;
    int v27 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v25, v26);
    }
    uint64_t result = (unsigned int *)v30;
    int v30 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v19);
    }
  }
  else
  {
    LOBYTE(v32[0]) = 0;
    char v33 = 0;
    LOBYTE(v30) = 0;
    char v31 = 0;
    LOBYTE(v27) = 0;
    char v29 = 0;
    uint64_t v23 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, uint64_t *, atomic_uint **, IPC::Encoder **, void))(*(void *)v23 + 16))(v23, 0, v32, &v30, &v27, 0);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
    if (v29)
    {
      uint64_t result = v28;
      uint64_t v28 = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v24);
      }
    }
    if (v33) {
      return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v24);
    }
  }
  return result;
}

unsigned int *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::updateLicense(uint64_t a1, uint64_t *a2, char a3, atomic_uint **a4, uint64_t *a5)
{
  return WebKit::RemoteCDMInstanceSession::updateLicense(a1 - 16, a2, a3, a4, a5);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::loadSession(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && (uint64_t v8 = *(WebKit::RemoteCDMFactory **)(v6 + 8)) != 0)
  {
    int v12 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v8) + 32);
    uint64_t v13 = *a5;
    *a5 = 0;
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v15 = &unk_1EE9ED7D8;
    v15[1] = v13;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v17 = 745;
    *((void *)v17 + 1) = v14;
    *((void *)v17 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    uint64_t v25 = v17;
    IPC::ArgumentCoder<WebCore::CDMSessionType,void>::encode<IPC::Encoder>(v17, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a4);
    v29[0] = (uint64_t)v15;
    v29[1] = v16;
    IPC::Connection::sendMessageWithAsyncReply(v12, &v25, v29, 0, 0);
    uint64_t v19 = v29[0];
    v29[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      return (IPC::Encoder *)WTF::fastFree(v21, v22);
    }
  }
  else
  {
    LOBYTE(v29[0]) = 0;
    char v30 = 0;
    v28[0] = 0;
    v28[8] = 0;
    LOBYTE(v25) = 0;
    char v27 = 0;
    uint64_t v23 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *, unsigned char *, IPC::Encoder **, void, uint64_t))(*(void *)v23 + 16))(v23, v29, v28, &v25, 0, 4);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
    if (v27)
    {
      uint64_t result = v26;
      uint64_t v26 = 0;
      if (result) {
        uint64_t result = (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v24);
      }
    }
    if (v30) {
      return (IPC::Encoder *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v24);
    }
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::loadSession(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  return WebKit::RemoteCDMInstanceSession::loadSession(a1 - 16, a2, a3, a4, a5);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::closeSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && (uint64_t v6 = *(WebKit::RemoteCDMFactory **)(v4 + 8)) != 0)
  {
    uint64_t v8 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v6) + 32);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v11 = &unk_1EE9ED800;
    v11[1] = v9;
    uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 744;
    *((void *)v13 + 1) = v10;
    *((void *)v13 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v22 = v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
    v21[0] = (uint64_t)v11;
    v21[1] = v12;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v22, v21, 0, 0);
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    uint64_t v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);
    return (IPC::Encoder *)v18(v17);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::closeSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return WebKit::RemoteCDMInstanceSession::closeSession(a1 - 16, a2, a3);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::removeSessionData(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && (uint64_t v7 = *(WebKit::RemoteCDMFactory **)(v5 + 8)) != 0)
  {
    uint64_t v10 = *(os_unfair_lock_s **)(WebKit::RemoteCDMFactory::gpuProcessConnection(v7) + 32);
    uint64_t v11 = *a4;
    *a4 = 0;
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v13 = &unk_1EE9ED828;
    v13[1] = v11;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 746;
    *((void *)v15 + 1) = v12;
    *((void *)v15 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v26 = v15;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a2);
    IPC::ArgumentCoder<WebCore::CDMSessionType,void>::encode<IPC::Encoder>(v15, a3);
    uint64_t v24 = v13;
    uint64_t v25 = v14;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v26, (uint64_t *)&v24, 0, 0);
    uint64_t v17 = (uint64_t)v24;
    uint64_t v24 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v21 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void **, IPC::Encoder **, void))(*(void *)v21 + 16))(v21, &v24, &v26, 0);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v23 = (unsigned int *)v26;
    uint64_t v26 = 0;
    if (v23) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v22);
    }
    return (IPC::Encoder *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v22);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::removeSessionData(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  return WebKit::RemoteCDMInstanceSession::removeSessionData(a1 - 16, a2, a3, a4);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::storeRecordOfKeyUsage(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = this;
    this = *(IPC::Encoder **)(v2 + 8);
    if (this)
    {
      uint64_t v5 = *(void *)(WebKit::RemoteCDMFactory::gpuProcessConnection(this) + 32);
      uint64_t v6 = *((void *)v3 + 5);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 749;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v11 = v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
      this = v11;
      uint64_t v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::storeRecordOfKeyUsage(WebKit::RemoteCDMInstanceSession *this, const WTF::String *a2)
{
  return WebKit::RemoteCDMInstanceSession::storeRecordOfKeyUsage((WebKit::RemoteCDMInstanceSession *)((char *)this - 16), a2);
}

void *WebKit::RemoteCDMInstanceSession::updateKeyStatuses(void *result)
{
  uint64_t v1 = result[6];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 16))();
    }
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSession::sendMessage(unsigned int *result, uint64_t a2, unsigned int **a3)
{
  uint64_t v3 = *((void *)result + 6);
  if (v3)
  {
    uint64_t result = *(unsigned int **)(v3 + 8);
    if (result)
    {
      if (*a3)
      {
        uint64_t v5 = *a3;
        *a3 = 0;
        (*(void (**)(unsigned int *, uint64_t, unsigned int **))(*(void *)result + 24))(result, a2, &v5);
        uint64_t result = v5;
        uint64_t v5 = 0;
        if (result) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
        }
      }
    }
  }
  return result;
}

void *WebKit::RemoteCDMInstanceSession::sessionIdChanged(void *this, const WTF::String *a2)
{
  uint64_t v2 = this[6];
  if (v2)
  {
    this = *(void **)(v2 + 8);
    if (this) {
      return (void *)(*(uint64_t (**)(void *, const WTF::String *))(*this + 32))(this, a2);
    }
  }
  return this;
}

void WebKit::RemoteLegacyCDM::~RemoteLegacyCDM(WebKit::RemoteLegacyCDM *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    uint64_t v5 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteLegacyCDM::~RemoteLegacyCDM(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteLegacyCDM::supportsMIMEType(WebKit::RemoteLegacyCDM *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  {
LABEL_24:
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v6 = *((void *)this + 3);
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3717, v6, &v26, &v25);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v5, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  if (v24)
  {
    if (v24 == 1)
    {
      int v7 = 0;
      LOBYTE(v19) = (_BYTE)v23;
      int v8 = 1;
      int v21 = 1;
      int v9 = 1;
LABEL_12:
      ((void (*)(__int16 *, uint64_t **))off_1EE9ED768[v9])(&v22, &v23);
      goto LABEL_13;
    }
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_24;
  }
  __int16 v22 = 0;
  IPC::Decoder::operator>><std::tuple<BOOL>>(v23, &v22);
  if (HIBYTE(v22))
  {
    int v9 = v24;
    if (!v24)
    {
      int v8 = 0;
      uint64_t v12 = v23;
      uint64_t v23 = 0;
      int v7 = v22;
      uint64_t v19 = v12;
      char v20 = v22;
      int v21 = 0;
      goto LABEL_12;
    }
    goto LABEL_23;
  }
  int v7 = 0;
  LOBYTE(v19) = 13;
  int v8 = 1;
  int v21 = 1;
  int v9 = v24;
  if (v24 != -1) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = v25;
  uint64_t v25 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v16, v17);
  }
  if (v8) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v7 == 0;
  }
  uint64_t v10 = !v14;
  ((void (*)(uint64_t **, uint64_t **))off_1EE9ED698[v8])(&v23, &v19);
  return v10;
}

WTF::StringImpl *WebKit::RemoteLegacyCDM::createSession@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)result + 2);
  if (!v4 || !*(void *)(v4 + 8))
  {
    *a3 = 0;
    return result;
  }
  uint64_t v6 = result;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)a2 + 32))(&v26, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  {
LABEL_30:
    uint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v9 = *((void *)v6 + 3);
  uint64_t v31 = 0;
  IPC::Connection::createSyncMessageEncoder(3716, v9, &v31, &v27);
  uint64_t v10 = v27;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, (uint64_t *)&v26);
  uint64_t v11 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
  if (v12 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19910862CLL);
  }
  *uint64_t v11 = v7;
  IPC::Connection::sendSyncMessage(v8, v31, (uint64_t *)&v27, 0, (uint64_t)&v29, INFINITY);
  int v13 = v30;
  if (v30)
  {
    if (v30 == 1)
    {
      LOBYTE(v24[0]) = (_BYTE)v29;
LABEL_12:
      int v25 = v13;
      int v17 = v13;
LABEL_13:
      ((void (*)(char *, uint64_t **))off_1EE9ED768[v17])(&v28, &v29);
      goto LABEL_14;
    }
LABEL_29:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_30;
  }
  uint64_t v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v29);
  if ((_BYTE)v15)
  {
    if (!v30)
    {
      uint64_t v7 = v14;
      uint64_t v16 = v29;
      char v29 = 0;
      v24[0] = v16;
      v24[1] = v14;
      goto LABEL_12;
    }
    goto LABEL_29;
  }
  LOBYTE(v24[0]) = 13;
  int v13 = 1;
  int v25 = 1;
  int v17 = v30;
  if (v30 != -1) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v18 = v27;
  char v27 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
    if (!v13)
    {
LABEL_16:
      if (v7)
      {
        uint64_t v19 = (atomic_uint *)*((void *)v6 + 2);
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        operator new();
      }
    }
  }
  else if (!v13)
  {
    goto LABEL_16;
  }
  *a3 = 0;
  ((void (*)(uint64_t **, void *))off_1EE9ED6A8[v13])(&v29, v24);
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDM::setPlayerId(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = result;
    LOBYTE(v7) = 0;
    char v8 = 0;
    if (a2)
    {
      char v8 = 1;
      uint64_t v7 = a2;
    }
    {
      uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v5);
    }
    uint64_t v4 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 32);
    uint64_t v6 = &v7;
    return IPC::Connection::send<Messages::RemoteLegacyCDMProxy::SetPlayerId>(v4, (uint64_t *)&v6, *(void *)(v3 + 24), 0, 0);
  }
  return result;
}

void WebKit::RemoteLegacyCDMFactory::~RemoteLegacyCDMFactory(WebKit::RemoteLegacyCDMFactory *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (WTF::StringImpl **)*((void *)this + 5);
      do
      {
        uint64_t v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          uint64_t v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
            {
              WTF::StringImpl::destroy(v7, a2);
              uint64_t v6 = *v5;
            }
            else
            {
              *(_DWORD *)v7 -= 2;
            }
          }
          *uint64_t v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, a2);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  char v8 = (WTF::StringImpl **)*((void *)this + 4);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  }
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    if (v10)
    {
      uint64_t v11 = (unsigned int **)(v9 + 8);
      do
      {
        if (*(v11 - 1) != (unsigned int *)-1)
        {
          unint64_t v12 = *v11;
          *uint64_t v11 = 0;
          if (v12)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v12);
              WTF::fastFree((WTF *)v12, a2);
            }
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  uint64_t v13 = *((void *)this + 2);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 - 4);
    if (v14)
    {
      uint64_t v15 = (unsigned int **)(v13 + 8);
      do
      {
        if (*(v15 - 1) != (unsigned int *)-1)
        {
          uint64_t v16 = *v15;
          *uint64_t v15 = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, a2);
            }
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  uint64_t v17 = *((void *)this + 1);
  if (v17)
  {
    *(void *)(v17 + 8) = 0;
    uint64_t v18 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v18)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteLegacyCDMFactory::~RemoteLegacyCDMFactory(this, a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  IPC::Connection::createSyncMessageEncoder(3715, 0, &v20, &v19);
  uint64_t v6 = v19;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, *(uint64_t **)a3);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v6, *(void *)(a3 + 8));
  IPC::Connection::sendSyncMessage(a2, v20, (uint64_t *)&v19, 0, (uint64_t)&v17, INFINITY);
  if (!v18)
  {
    __int16 v16 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v17, &v16);
    if (!HIBYTE(v16))
    {
      *(unsigned char *)a1 = 13;
      *(_DWORD *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
      int v7 = v18;
      if (v18 == -1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v7 = v18;
    if (!v18)
    {
      uint64_t v9 = v17;
      uint64_t v17 = 0;
      char v10 = v16;
      *(void *)a1 = v9;
      *(unsigned char *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::RemoteLegacyCDMFactory::findCDM(v14, v15);
  }
  if (v18 != 1) {
    goto LABEL_12;
  }
  *(unsigned char *)a1 = (_BYTE)v17;
  int v7 = 1;
  *(_DWORD *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
LABEL_8:
  ((void (*)(__int16 *, uint64_t **))off_1EE9ED768[v7])(&v16, &v17);
LABEL_9:
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMFactory::findCDM(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 24));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6) {
    v6 += 2 * *((unsigned int *)v6 - 1);
  }
  if (v6 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = v4[1];
    if (v7) {
      break;
    }
    if (!a2) {
      return a2;
    }
LABEL_8:
    while (1)
    {
      v4 += 2;
      if (v4 == v5) {
        break;
      }
      if ((unint64_t)(*v4 + 1) > 1) {
        goto LABEL_12;
      }
    }
    uint64_t v4 = v5;
LABEL_12:
    if (v4 == v6) {
      return 0;
    }
  }
  if (*(void *)(v7 + 8) != a2) {
    goto LABEL_8;
  }
  return a2;
}

void WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession(WebKit::RemoteLegacyCDMSession *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 7);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  uint64_t vars8;

  WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession(WebKit::RemoteLegacyCDMSession *this, WTF::StringImpl *a2)
{
}

{
  uint64_t vars8;

  WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession((WebKit::RemoteLegacyCDMSession *)((char *)this - 8), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::RemoteLegacyCDMSession::invalidate(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      uint64_t v4 = *(void *)(this + 32);
      uint64_t v16 = v4;
      {
        uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v15);
      }
      uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                                + 32);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 8), v2);
      uint64_t v6 = *(atomic_uint **)(v2 + 8);
      if (v6)
      {
        atomic_fetch_add(v6, 1u);
        uint64_t v4 = v16;
      }
      uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v7 = &unk_1EE9ED8C8;
      v7[1] = v6;
      v7[2] = v4;
      uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 1134;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      int v18 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, &v16);
      v17[0] = (uint64_t)v7;
      v17[1] = v8;
      IPC::Connection::sendMessageWithAsyncReply(v5, &v18, v17, 0, 0);
      uint64_t v11 = v17[0];
      v17[0] = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      unint64_t v12 = v18;
      int v18 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v10);
        WTF::fastFree(v13, v14);
      }
      this = *(void *)(v3 + 24);
      *(void *)(v3 + 24) = 0;
      if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this);
        return WTF::fastFree((WTF *)this, v10);
      }
    }
  }
  return this;
}

unsigned int *WebKit::RemoteLegacyCDMSession::generateKeyRequest@<X0>(JSC::ArrayBufferView *this@<X2>, unsigned int *result@<X0>, uint64_t *a3@<X1>, WTF::StringImpl **a4@<X3>, _WORD *a5@<X4>, _DWORD *a6@<X5>, WTF::DeferrableRefCountedBase *a7@<X8>)
{
  uint64_t v9 = *((void *)result + 3);
  if (!v9 || !this || !*(void *)(v9 + 8))
  {
    *(void *)a7 = 0;
    return result;
  }
  uint64_t v14 = result;
  WebKit::convertToSharedBuffer<JSC::GenericTypedArrayView<JSC::Uint8Adaptor> *>(&v54, this);
  {
LABEL_63:
    unsigned int v45 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v45);
  }
  uint64_t v15 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 32);
  uint64_t v16 = *((void *)v14 + 4);
  uint64_t v62 = 0;
  IPC::Connection::createSyncMessageEncoder(3719, v16, &v62, &v61);
  uint64_t v17 = v61;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v61, a3);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v17, &v54);
  IPC::Connection::sendSyncMessage(v15, v62, (uint64_t *)&v61, 0, (uint64_t)&v59, INFINITY);
  if (!v60)
  {
    LOBYTE(v55[0]) = 0;
    char v58 = 0;
    a3 = (uint64_t *)v59;
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(v59, &v63);
    if (!v64)
    {
      LOBYTE(v48) = 0;
      LOBYTE(v51) = 0;
      goto LABEL_50;
    }
    uint64_t v20 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v65);
    if (!v66)
    {
      int v28 = 0;
      LOBYTE(v48) = 0;
      LOBYTE(v51) = 0;
      goto LABEL_26;
    }
    unint64_t v22 = a3[1];
    int v21 = (WTF::StringImpl *)*a3;
    unint64_t v23 = ((a3[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a3;
    if (v22 < v23 || v22 - v23 <= 1)
    {
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      *a3 = 0;
      a3[1] = 0;
      uint64_t v42 = a3[3];
      if (v42)
      {
        if (v22)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
          uint64_t v41 = *a3;
          uint64_t v40 = a3[1];
        }
        else
        {
          uint64_t v40 = 0;
          uint64_t v41 = 0;
        }
      }
    }
    else
    {
      int v24 = (_WORD *)((char *)v21 + v23);
      a3[2] = (uint64_t)(v24 + 1);
      if (v21)
      {
        unint64_t v25 = (((unint64_t)v24 + 5) & 0xFFFFFFFFFFFFFFFCLL) - (void)v21;
        if (v22 >= v25 && v22 - v25 > 3)
        {
          LOWORD(v15) = *v24;
          LODWORD(v17) = *(_DWORD *)(((unint64_t)v24 + 5) & 0xFFFFFFFFFFFFFFFCLL);
          a3[2] = (((unint64_t)v24 + 5) & 0xFFFFFFFFFFFFFFFCLL) + 4;
          if (!v64)
          {
            __break(1u);
            goto LABEL_60;
          }
          char v27 = (uint64_t *)v63;
          char v63 = 0;
          uint64_t v7 = v65;
          unint64_t v65 = 0;
          unsigned int v48 = v27;
          uint64_t v49 = (uint64_t *)v7;
          LOWORD(v50) = v15;
          HIDWORD(v50) = v17;
          int v28 = 1;
          goto LABEL_21;
        }
        *a3 = 0;
        a3[1] = 0;
        uint64_t v44 = a3[3];
        if (v44)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
            int v21 = (WTF::StringImpl *)*a3;
            uint64_t v46 = a3[1];
            uint64_t v47 = a3[3];
            *a3 = 0;
            a3[1] = 0;
            if (v47)
            {
              if (v46) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v21);
              }
            }
          }
        }
LABEL_58:
        int v28 = 0;
        LOBYTE(v48) = 0;
LABEL_21:
        LOBYTE(v51) = v28;
        if (v66)
        {
          char v29 = v65;
          unint64_t v65 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v21);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
        }
LABEL_26:
        if (v64)
        {
          int v30 = v63;
          char v63 = 0;
          if (v30) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v30, v21);
          }
        }
        if (v28)
        {
          a3 = v48;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          __int16 v56 = v15;
          int v57 = (int)v17;
          char v58 = 1;
          std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48, v21);
          if (v60) {
            goto LABEL_62;
          }
          int v18 = 0;
          char v32 = v59;
          __int16 v59 = 0;
          v55[0] = 0;
          v55[1] = 0;
          unsigned int v48 = (uint64_t *)v32;
          uint64_t v49 = a3;
          uint64_t v50 = v7;
          __int16 v51 = v15;
          int v52 = (int)v17;
LABEL_32:
          int v53 = v18;
          std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v31);
          int v19 = v60;
          if (v60 == -1) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
LABEL_50:
        int v21 = (WTF::StringImpl *)*a3;
        unint64_t v22 = a3[1];
        *a3 = 0;
        a3[1] = 0;
        uint64_t v20 = (IPC::Decoder *)a3[3];
        if (!v20)
        {
LABEL_51:
          std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48, v21);
          LOBYTE(v48) = 13;
          int v18 = 1;
          goto LABEL_32;
        }
LABEL_60:
        if (v22) {
          (*(void (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)v20 + 16))(v20, v21);
        }
        goto LABEL_51;
      }
      uint64_t v40 = v22;
      uint64_t v41 = 0;
    }
    *a3 = 0;
    a3[1] = 0;
    uint64_t v43 = a3[3];
    if (v43 && v40) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v41, v40);
    }
    goto LABEL_58;
  }
  if (v60 != 1)
  {
LABEL_62:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_63;
  }
  LOBYTE(v48) = (_BYTE)v59;
  int v18 = 1;
  int v53 = 1;
  int v19 = 1;
LABEL_33:
  ((void (*)(void *, IPC::Decoder **))off_1EE9ED768[v19])(v55, &v59);
LABEL_34:
  int v34 = v61;
  unint64_t v61 = 0;
  if (v34)
  {
    IPC::Encoder::~Encoder(v34, v33);
    WTF::fastFree(v36, v37);
    if (v18) {
      goto LABEL_36;
    }
  }
  else if (v18)
  {
LABEL_36:
    *(void *)a7 = 0;
LABEL_37:
    ((void (*)(void *, uint64_t **))off_1EE9ED6D8[v18])(v55, &v48);
    goto LABEL_38;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v38 = *a4;
  *a4 = v7;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v33);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  *a5 = v15;
  *a6 = v17;
  if (!a3) {
    goto LABEL_36;
  }
  WebKit::convertToUint8Array(a7, (WebCore::FragmentedSharedBuffer *)a3);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a3, v39);
  int v18 = v53;
  if (v53 != -1) {
    goto LABEL_37;
  }
LABEL_38:
  uint64_t result = (unsigned int *)v54;
  unint64_t v54 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v35);
  }
  return result;
}

unsigned int *WebKit::convertToSharedBuffer<JSC::GenericTypedArrayView<JSC::Uint8Adaptor> *>(void *a1, JSC::ArrayBufferView *this)
{
  JSC::ArrayBufferView::baseAddress(this);
  JSC::ArrayBufferView::byteLength(this);
  uint64_t result = WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(&v5);
  *a1 = v5;
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::convertToUint8Array(WTF::DeferrableRefCountedBase *result, WebCore::FragmentedSharedBuffer *this)
{
  uint64_t v2 = result;
  if (this
    && (uint64_t result = (WTF::DeferrableRefCountedBase *)WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer((uint64_t *)&v6, this), v6))
  {
    if (*((unsigned char *)v6 + 64) && (uint64_t v3 = *((void *)v6 + 4)) != 0) {
      unint64_t v4 = *(void *)(v3 + 32);
    }
    else {
      unint64_t v4 = *((void *)v6 + 6);
    }
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create((uint64_t *)&v6, 0, v4, 1, &v5);
    uint64_t result = v6;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = 0;
    if (result) {
      return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
    }
  }
  else
  {
    *(void *)uint64_t v2 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMSession::releaseKeys(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = this;
    {
      char v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v10);
    }
    uint64_t v3 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 32);
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1136;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v11 = v5;
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    this = *(void *)(v2 + 56);
    if (this)
    {
      *(void *)(v2 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)this, (WTF::StringImpl *)v6);
    }
  }
  return this;
}

BOOL WebKit::RemoteLegacyCDMSession::update(WebCore::FragmentedSharedBuffer *a1, JSC::ArrayBufferView *a2, IPC::Decoder **a3, _WORD *a4, _DWORD *a5)
{
  uint64_t v7 = *((void *)a1 + 3);
  if (!v7) {
    return 0;
  }
  BOOL v8 = 0;
  if (a2 && *(void *)(v7 + 8))
  {
    unint64_t v12 = (unint64_t)a1;
    WebKit::convertToSharedBuffer<JSC::GenericTypedArrayView<JSC::Uint8Adaptor> *>(&v62, a2);
      goto LABEL_60;
    uint64_t v13 = *(IPC::Decoder **)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                           + 32);
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v66 = 0;
    IPC::Connection::createSyncMessageEncoder(3720, v14, &v66, &v65);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v65, &v62);
    IPC::Connection::sendSyncMessage((uint64_t)v13, v66, (uint64_t *)&v65, 0, (uint64_t)&v63, INFINITY);
    int v15 = v64;
    if (v64)
    {
      if (v64 == 1)
      {
        LOBYTE(v5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (_BYTE)v63;
LABEL_26:
        int v61 = v15;
        int v30 = v15;
        goto LABEL_27;
      }
LABEL_59:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
      int v52 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v52);
    }
    uint64_t v13 = v63;
    unint64_t v16 = *((void *)v63 + 1);
    uint64_t v17 = *(char **)v63;
    unint64_t v18 = *((void *)v63 + 2) - *(void *)v63;
    if (v16 <= v18)
    {
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      *(void *)char v63 = 0;
      *((void *)v13 + 1) = 0;
      uint64_t v42 = *((void *)v13 + 3);
      if (v42)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
          uint64_t v41 = *(char **)v13;
          unint64_t v40 = *((void *)v13 + 1);
        }
        else
        {
          unint64_t v40 = 0;
          uint64_t v41 = 0;
        }
      }
    }
    else
    {
      int v19 = &v17[v18];
      *((void *)v63 + 2) = v19 + 1;
      if (v17)
      {
        unsigned int v20 = *v19;
        if (v20 < 2)
        {
          unint64_t v12 = v20 != 0;
          IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(v13, &v56);
          if (v57)
          {
            unint64_t v21 = *((void *)v13 + 1);
            unint64_t v22 = *(char **)v13;
            unint64_t v23 = ((*((void *)v13 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)v13;
            if (v21 < v23 || v21 - v23 <= 1)
            {
              unint64_t v47 = 0;
              unsigned int v48 = 0;
              *(void *)uint64_t v13 = 0;
              *((void *)v13 + 1) = 0;
              uint64_t v49 = *((void *)v13 + 3);
              if (v49)
              {
                if (v21)
                {
                  (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
                  unsigned int v48 = *(char **)v13;
                  unint64_t v47 = *((void *)v13 + 1);
                }
                else
                {
                  unint64_t v47 = 0;
                  unsigned int v48 = 0;
                }
              }
            }
            else
            {
              int v24 = &v22[v23];
              *((void *)v13 + 2) = v24 + 2;
              if (v22)
              {
                char v55 = v12;
                unint64_t v25 = ((unint64_t)(v24 + 5) & 0xFFFFFFFFFFFFFFFCLL) - (void)v22;
                if (v21 >= v25 && v21 - v25 > 3)
                {
                  int v26 = 0;
                  __int16 v6 = *(_WORD *)v24;
                  int v5 = *(_DWORD *)((unint64_t)(v24 + 5) & 0xFFFFFFFFFFFFFFFCLL);
                  *((void *)v13 + 2) = ((unint64_t)(v24 + 5) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                  unint64_t v12 = (unint64_t)v56;
                  __int16 v56 = 0;
                  int v27 = 1;
                  goto LABEL_19;
                }
                *(void *)uint64_t v13 = 0;
                *((void *)v13 + 1) = 0;
                uint64_t v51 = *((void *)v13 + 3);
                if (v51 && v21)
                {
                  (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
                  char v55 = 0;
                  unint64_t v22 = *(char **)v13;
                  uint64_t v53 = *((void *)v13 + 1);
                  uint64_t v54 = *((void *)v13 + 3);
                  int v26 = 1;
                  *(void *)uint64_t v13 = 0;
                  *((void *)v13 + 1) = 0;
                  if (v54)
                  {
                    int v27 = 0;
                    if (v53)
                    {
                      (*(void (**)(uint64_t, char *))(*(void *)v54 + 16))(v54, v22);
                      char v55 = 0;
                      int v27 = 0;
                    }
                  }
                  else
                  {
                    int v27 = 0;
                  }
LABEL_19:
                  if (v57)
                  {
                    int v28 = (unsigned int *)v56;
                    __int16 v56 = 0;
                    if (v28) {
                      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, v22);
                    }
                  }
                  if (!v26)
                  {
LABEL_23:
                    if (!v27)
                    {
                      LOBYTE(v5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 13;
                      int v15 = 1;
                      int v61 = 1;
                      int v30 = v64;
                      if (v64 == -1)
                      {
LABEL_28:
                        uint64_t v31 = v65;
                        unint64_t v65 = 0;
                        if (v31)
                        {
                          IPC::Encoder::~Encoder(v31, v22);
                          WTF::fastFree(v36, v37);
                          if (v15) {
                            goto LABEL_30;
                          }
                        }
                        else if (v15)
                        {
LABEL_30:
                          BOOL v8 = 0;
                          int v32 = 1;
                          goto LABEL_31;
                        }
                        char v58 = 0;
                        *a4 = v6;
                        *a5 = v5;
                        if (v12)
                        {
                          WebKit::convertToUint8Array((WTF::DeferrableRefCountedBase *)&v63, (WebCore::FragmentedSharedBuffer *)v12);
                          uint64_t v39 = *a3;
                          *a3 = v63;
                          if (v39)
                          {
                            if (*(_DWORD *)v39 == 1) {
                              JSC::ArrayBufferView::operator delete();
                            }
                            else {
                              --*(_DWORD *)v39;
                            }
                          }
                          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v12, v38);
                          int v32 = v61;
                          BOOL v8 = v13 != 0;
                          if (v61 == -1) {
                            goto LABEL_32;
                          }
                        }
                        else
                        {
                          int v32 = 0;
                          BOOL v8 = v13 != 0;
                        }
LABEL_31:
                        ((void (*)(IPC::Decoder **, WebCore::FragmentedSharedBuffer **))off_1EE9ED6E8[v32])(&v63, &v56);
LABEL_32:
                        int v34 = (unsigned int *)v62;
                        uint64_t v62 = 0;
                        if (v34) {
                          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v34, v33);
                        }
                        return v8;
                      }
LABEL_27:
                      ((void (*)(char *, IPC::Decoder **))off_1EE9ED768[v30])(&v67, &v63);
                      goto LABEL_28;
                    }
                    if (!v64)
                    {
                      char v29 = v63;
                      char v63 = 0;
                      __int16 v56 = v29;
                      LOBYTE(v13) = v55;
                      char v57 = v55;
                      char v58 = (WebCore::FragmentedSharedBuffer *)v12;
                      __int16 v59 = v6;
                      int v60 = v5;
                      goto LABEL_26;
                    }
                    goto LABEL_59;
                  }
LABEL_50:
                  unint64_t v22 = *(char **)v13;
                  uint64_t v45 = *((void *)v13 + 1);
                  *(void *)uint64_t v13 = 0;
                  *((void *)v13 + 1) = 0;
                  uint64_t v46 = *((void *)v13 + 3);
                  if (v46 && v45) {
                    (*(void (**)(uint64_t, char *))(*(void *)v46 + 16))(v46, v22);
                  }
                  goto LABEL_23;
                }
LABEL_58:
                char v55 = 0;
                int v27 = 0;
                int v26 = 1;
                goto LABEL_19;
              }
              unint64_t v47 = v21;
              unsigned int v48 = 0;
            }
            *(void *)uint64_t v13 = 0;
            *((void *)v13 + 1) = 0;
            uint64_t v50 = *((void *)v13 + 3);
            if (v50 && v47) {
              (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v50 + 16))(v50, v48, v47);
            }
            goto LABEL_58;
          }
LABEL_49:
          int v27 = 0;
          char v55 = 0;
          goto LABEL_50;
        }
LABEL_48:
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        uint64_t v44 = *((void *)v13 + 3);
        if (v44 && v16) {
          (*(void (**)(uint64_t, char *))(*(void *)v44 + 16))(v44, v17);
        }
        goto LABEL_49;
      }
      unint64_t v40 = v16;
      uint64_t v41 = 0;
    }
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    uint64_t v43 = *((void *)v13 + 3);
    if (v43)
    {
      if (v40)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v43 + 16))(v43, v41, v40);
        uint64_t v17 = *(char **)v13;
        unint64_t v16 = *((void *)v13 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_48;
  }
  return v8;
}

uint64_t WebKit::RemoteLegacyCDMSession::cachedKeyForKeyID@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(void *)(this + 24);
  if (!v5 || !*(void *)(v5 + 8))
  {
    *a4 = 0;
    return this;
  }
  uint64_t v7 = (WebCore::FragmentedSharedBuffer *)this;
  BOOL v8 = (uint64_t *)(this + 56);
  uint64_t v9 = *(void *)(this + 56);
  if (v9)
  {
    int v10 = *(_DWORD *)(v9 - 8);
    unsigned int v11 = *((_DWORD *)*a2 + 4);
    if (v11 >= 0x100) {
      unsigned int v12 = v11 >> 8;
    }
    else {
      unsigned int v12 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v12 = i + v14)
    {
      uint64_t v14 = v12 & v10;
      this = *(void *)(v9 + 16 * v14);
      if (this != -1)
      {
        if (!this)
        {
          uint64_t v15 = *v8;
          if (!*v8) {
            goto LABEL_21;
          }
          uint64_t v16 = v15 + 16 * *(unsigned int *)(v15 - 4);
          goto LABEL_16;
        }
        this = WTF::equal((WTF *)this, *a2, a3);
        if (this) {
          break;
        }
      }
      ++i;
    }
    uint64_t v16 = v9 + 16 * v14;
    uint64_t v15 = *v8;
    if (!*v8) {
      goto LABEL_17;
    }
LABEL_16:
    v15 += 16 * *(unsigned int *)(v15 - 4);
LABEL_17:
    if (v15 != v16)
    {
      uint64_t v17 = *(_DWORD **)(v16 + 8);
      if (v17) {
        *v17 += 2;
      }
      *a4 = (uint64_t)v17;
      return this;
    }
  }
LABEL_21:
  {
LABEL_74:
    unint64_t v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v47);
  }
  uint64_t v18 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 32);
  uint64_t v19 = *((void *)v7 + 4);
  uint64_t v56 = 0;
  IPC::Connection::createSyncMessageEncoder(3718, v19, &v56, &v55);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v55, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v18, v56, (uint64_t *)&v55, 0, (uint64_t)&v53, INFINITY);
  if (v54)
  {
    if (v54 == 1)
    {
      LOBYTE(v48) = (_BYTE)v53;
      int v20 = 1;
      int v50 = 1;
      int v21 = 1;
LABEL_29:
      ((void (*)(WebCore::FragmentedSharedBuffer **, IPC::Decoder **))off_1EE9ED768[v21])(&v51, &v53);
      goto LABEL_30;
    }
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_74;
  }
  LOBYTE(v51) = 0;
  char v52 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(v53, (unsigned int *)&v51);
  if (v52)
  {
    int v21 = v54;
    if (!v54)
    {
      int v20 = 0;
      unint64_t v23 = v53;
      uint64_t v53 = 0;
      uint64_t v7 = v51;
      unsigned int v48 = v23;
      uint64_t v49 = v51;
      int v50 = 0;
      goto LABEL_29;
    }
    goto LABEL_73;
  }
  LOBYTE(v48) = 13;
  int v20 = 1;
  int v50 = 1;
  int v21 = v54;
  if (v54 != -1) {
    goto LABEL_29;
  }
LABEL_30:
  int v24 = v55;
  char v55 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v25, v26);
    if (v20) {
      goto LABEL_32;
    }
  }
  else if (v20)
  {
LABEL_32:
    *a4 = 0;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ED6F8[v20])(&v53, &v48);
  }
  uint64_t v49 = 0;
  if (!v7) {
    goto LABEL_32;
  }
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(a4, v7);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v27);
  uint64_t v29 = *v8;
  if (*v8
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8),
        (uint64_t v29 = *v8) != 0))
  {
    int v30 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    int v30 = 0;
  }
  unsigned int v31 = *((_DWORD *)*a2 + 4);
  if (v31 >= 0x100) {
    unsigned int v32 = v31 >> 8;
  }
  else {
    unsigned int v32 = WTF::StringImpl::hashSlowCase(*a2);
  }
  char v33 = 0;
  for (int j = 1; ; ++j)
  {
    uint64_t v35 = v32 & v30;
    uint64_t v36 = (uint64_t *)(v29 + 16 * v35);
    uint64_t v37 = (WTF *)*v36;
    if (*v36 == -1)
    {
      char v33 = (uint64_t *)(v29 + 16 * v35);
      goto LABEL_48;
    }
    if (!v37)
    {
      if (v33)
      {
        *char v33 = 0;
        v33[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        uint64_t v36 = v33;
      }
      WTF::String::operator=(v36, a2);
      uint64_t v38 = (_DWORD *)*a4;
      if (*a4) {
        *v38 += 2;
      }
      this = v36[1];
      v36[1] = (uint64_t)v38;
      if (this) {
        this = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)this);
      }
      uint64_t v39 = *v8;
      if (*v8) {
        int v40 = *(_DWORD *)(v39 - 12) + 1;
      }
      else {
        int v40 = 1;
      }
      *(_DWORD *)(v39 - 12) = v40;
      uint64_t v43 = *v8;
      if (*v8) {
        int v44 = *(_DWORD *)(v43 - 12);
      }
      else {
        int v44 = 0;
      }
      uint64_t v45 = (*(_DWORD *)(v43 - 16) + v44);
      unint64_t v46 = *(unsigned int *)(v43 - 4);
      if (v46 > 0x400)
      {
        if (v46 > 2 * v45) {
          goto LABEL_68;
        }
      }
      else if (3 * v46 > 4 * v45)
      {
        goto LABEL_68;
      }
      this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8);
      goto LABEL_68;
    }
    if (WTF::equal(v37, *a2, v28)) {
      break;
    }
LABEL_48:
    unsigned int v32 = j + v35;
  }
  uint64_t v41 = (uint64_t *)(v29 + 16 * v35 + 8);
  uint64_t v42 = (_DWORD *)*a4;
  if (*a4) {
    *v42 += 2;
  }
  this = *v41;
  *uint64_t v41 = (uint64_t)v42;
  if (this) {
    this = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)this);
  }
LABEL_68:
  int v20 = v50;
  if (v50 != -1) {
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9ED6F8[v20])(&v53, &v48);
  }
  return this;
}

unsigned int *WebKit::RemoteLegacyCDMSession::sendMessage(unsigned int *result, WebCore::FragmentedSharedBuffer **a2, WTF::StringImpl **a3)
{
  uint64_t v3 = *((void *)result + 5);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      __int16 v6 = *a2;
      if (*a2)
      {
        *a2 = 0;
        WebKit::convertToUint8Array((WTF::DeferrableRefCountedBase *)&v14, v6);
        uint64_t v7 = v14;
        BOOL v8 = *a3;
        if (*a3) {
          *(_DWORD *)v8 += 2;
        }
        uint64_t v13 = v8;
        (*(void (**)(uint64_t, _DWORD *, WTF::StringImpl **))(*(void *)v4 + 16))(v4, v7, &v13);
        int v10 = v13;
        uint64_t v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            WTF::StringImpl::destroy(v10, v9);
            if (!v7) {
              return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v9);
            }
LABEL_17:
            if (*v7 == 1) {
              JSC::ArrayBufferView::operator delete();
            }
            else {
              --*v7;
            }
            return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v9);
          }
          *(_DWORD *)v10 -= 2;
        }
        if (!v7) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v9);
        }
        goto LABEL_17;
      }
      unsigned int v11 = *a3;
      if (*a3) {
        *(_DWORD *)v11 += 2;
      }
      uint64_t v15 = v11;
      (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v4 + 16))(v4, 0, &v15);
      uint64_t result = (unsigned int *)v15;
      uint64_t v15 = 0;
      if (result)
      {
        if (*result == 2) {
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        }
        else {
          *result -= 2;
        }
      }
    }
  }
  return result;
}

void WebKit::RemoteMediaEngineConfigurationFactory::~RemoteMediaEngineConfigurationFactory(unsigned int **this, void *a2)
{
}

{
  void *v3;
  uint64_t vars8;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

void WebKit::RemoteMediaPlayerManager::~RemoteMediaPlayerManager(WebKit::RemoteMediaPlayerManager *this, void *a2)
{
  *(void *)this = &unk_1EE9ED5F8;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      __int16 v6 = (atomic_uchar **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (atomic_uchar *)-1)
        {
          uint64_t v7 = *v6;
          *__int16 v6 = 0;
          if (v7) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, a2);
          }
        }
        v6 += 3;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteMediaPlayerManager::~RemoteMediaPlayerManager(this, a2);

  WTF::fastFree(v2, v3);
}

WebKit::RemoteMediaPlayerMIMETypeCache *WebKit::RemoteMediaPlayerManager::typeCache(uint64_t a1, char a2)
{
  char v8 = a2;
  {
    WebKit::mimeCaches(void)::caches = 0;
  }
  WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&WebKit::mimeCaches(void)::caches, &v8, (uint64_t)v7);
  uint64_t v4 = (WebKit::RemoteMediaPlayerMIMETypeCache **)(v7[0] + 8);
  uint64_t result = *(WebKit::RemoteMediaPlayerMIMETypeCache **)(v7[0] + 8);
  if (!result)
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0x30);
    char v6 = v8;
    *(void *)uint64_t v5 = a1;
    *(unsigned char *)(v5 + 8) = v6;
    *(unsigned char *)(v5 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    *(unsigned char *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 40) = 0;
    std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100](v4, (WTF::StringImpl *)v5);
    return *v4;
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::MediaPlayerMediaEngineIdentifier,WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  int v9 = *a2;
  unsigned int v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  unsigned int v12 = (v11 ^ HIWORD(v11)) & v8;
  uint64_t v13 = (uint64_t *)(v6 + 16 * v12);
  int v14 = *(unsigned __int8 *)v13;
  if (v14 != 255)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if (v7) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v24 = v6 + 16 * v23;
        goto LABEL_29;
      }
      if (v14 == 254) {
        uint64_t v15 = v13;
      }
      unsigned int v12 = (v12 + v16) & v8;
      uint64_t v13 = (uint64_t *)(v6 + 16 * v12);
      int v14 = *(unsigned __int8 *)v13;
      ++v16;
    }
    while (v14 != 255);
    if (v15)
    {
      *(unsigned char *)uint64_t v15 = -1;
      v15[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      uint64_t v13 = v15;
    }
  }
  *(unsigned char *)uint64_t v13 = v9;
  uint64_t result = (uint64_t *)std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)v13 + 1, 0);
  uint64_t v17 = *v4;
  if (*v4) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *v4;
  if (*v4) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_20:
      uint64_t result = (uint64_t *)WTF::HashTable<WebCore::MediaPlayerMediaEngineIdentifier,WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>>::expand(v4, v13);
      uint64_t v13 = result;
      uint64_t v19 = *v4;
      if (*v4) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_20;
  }
  uint64_t v24 = v19 + 16 * v22;
  char v25 = 1;
LABEL_29:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v25;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManager::gpuProcessConnection(WebKit::RemoteMediaPlayerManager *this)
{
  uint64_t v3 = (char *)this + 24;
  uint64_t v2 = (atomic_uchar *)*((void *)this + 3);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 4), &v21);
    uint64_t v5 = v21;
    if (v21)
    {
      uint64_t v21 = 0;
LABEL_20:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
      return v5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  {
    uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v7 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 24);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  ++*(void *)(v9 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  uint64_t v11 = v21;
  uint64_t v21 = v7;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v6);
  }
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v21);
  {
    int v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v13 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v14 = 0;
  uint64_t v15 = *(void *)(v13 + 24);
  int v16 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x19972E8D0](v15);
  }
  ++*(void *)(v15 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  }
  uint64_t v17 = v21;
  uint64_t v21 = v13;
  if (v17)
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v17 + 24), v12);
    uint64_t v13 = v21;
  }
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v13 + 184, (uint64_t)this);
  uint64_t v5 = v21;
  uint64_t v21 = 0;
  if (v5) {
    goto LABEL_20;
  }
  return v5;
}

uint64_t WebKit::RemoteMediaPlayerManager::deleteRemoteMediaPlayer(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 2, &v10);
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
LABEL_8:
  uint64_t v7 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection((WebKit::RemoteMediaPlayerManager *)a1) + 32);
  uint64_t v9 = &v10;
  return IPC::Connection::send<Messages::RemoteMediaPlayerManagerProxy::DeleteMediaPlayer>(v7, &v9, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::RemoteMediaPlayerManagerProxy::DeleteMediaPlayer>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1142;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void WebKit::RemoteMediaPlayerManager::didReceivePlayerMessage(atomic_uchar *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v8 = *((void *)a3 + 8);
  if (v8 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(this + 16, &v8, (atomic_uchar **)v9);
    if (v9[0])
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v9[0], (uint64_t)v9[1], &v10);
      uint64_t v6 = (atomic_uchar *)v9[0];
      v9[0] = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
      }
      if (v10)
      {
        WebKit::MediaPlayerPrivateRemote::didReceiveMessage(v10, a2, a3);
        uint64_t v7 = v10;
        uint64_t v10 = 0;
        if (v7) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((atomic_uchar **)v7 + 6));
        }
      }
    }
  }
}

atomic_uchar *WebKit::RemoteMediaPlayerManager::gpuProcessConnectionDidClose(WebKit::RemoteMediaPlayerManager *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  *((void *)this + 4) = 0;
  uint64_t v4 = (atomic_uchar *)*((void *)this + 2);
  uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  uint64_t v7 = result;
  uint64_t v8 = v6;
  if (v4)
  {
    uint64_t v9 = &v4[24 * *((unsigned int *)v4 - 1)];
    uint64_t v10 = *((unsigned int *)v4 - 3);
    if (v10)
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = (atomic_uchar *)WTF::fastMalloc((WTF *)(16 * v10));
      uint64_t v4 = result;
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v9 != v7)
  {
    int v11 = 0;
    int v12 = 1;
    do
    {
      unsigned int v13 = v12;
      uint64_t result = (atomic_uchar *)*((void *)v7 + 1);
      if (result) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
      }
      char v14 = (atomic_uchar *)*((void *)v7 + 2);
      uint64_t v15 = (atomic_uchar **)&v4[16 * v11];
      *uint64_t v15 = result;
      v15[1] = v14;
      while (1)
      {
        v7 += 24;
        if (v7 == v8) {
          break;
        }
        if ((unint64_t)(*(void *)v7 + 1) > 1) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v8;
LABEL_18:
      ++v11;
      int v12 = v13 + 1;
    }
    while (v7 != v9);
    if (v11)
    {
      uint64_t v16 = 16 * v13;
      uint64_t v17 = (uint64_t *)(v4 + 8);
      do
      {
        int v18 = (atomic_uchar *)*(v17 - 1);
        if (v18)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v18, *v17, &v25);
          if (v25)
          {
            uint64_t v19 = *(atomic_uchar **)(v25 + 128);
            if (v19)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v19, *(void *)(v25 + 136), &v24);
              uint64_t v19 = v24;
            }
            else
            {
              uint64_t v24 = 0;
            }
            WebCore::MediaPlayer::reloadAndResumePlaybackIfNeeded((WebCore::MediaPlayer *)v19);
            int v20 = (atomic_uchar **)v24;
            uint64_t v24 = 0;
            if (v20) {
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v20);
            }
            uint64_t v21 = v25;
            uint64_t v25 = 0;
            if (v21) {
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v21 + 48));
            }
          }
        }
        v17 += 2;
        v16 -= 16;
      }
      while (v16);
      uint64_t v22 = 16 * v13;
      uint64_t v23 = (atomic_uchar **)v4;
      do
      {
        uint64_t result = *v23;
        *uint64_t v23 = 0;
        if (result) {
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v6);
        }
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
    }
  }
  if (v4) {
    return (atomic_uchar *)WTF::fastFree((WTF *)v4, v6);
  }
  return result;
}

void WebKit::RemoteMediaResourceProxy::~RemoteMediaResourceProxy(atomic_uchar *volatile **this)
{
}

{
  void *v2;
  uint64_t vars8;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

uint64_t WebKit::RemoteMediaResourceProxy::responseReceived(uint64_t a1, uint64_t a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 32);
  uint64_t v7 = *(os_unfair_lock_s **)(a1 + 16);
  char v8 = (***(uint64_t (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9ED9C8;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 1221;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v21 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, v6);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v12, a3);
  unsigned int v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v14)
  {
    *unsigned int v13 = v8;
    v20[0] = (uint64_t)v10;
    v20[1] = v11;
    IPC::Connection::sendMessageWithAsyncReply(v7, &v21, v20, 0, 0);
    uint64_t v16 = v20[0];
    v20[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t result = (uint64_t)v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
      return WTF::fastFree(v18, v19);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::redirectReceived(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *a3, WebCore::ResourceResponseBase *a4, uint64_t *a5)
{
  uint64_t v7 = *(os_unfair_lock_s **)(a1 + 16);
  char v8 = (uint64_t *)(a1 + 32);
  uint64_t v9 = *a5;
  *a5 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9ED9F0;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 1220;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v19 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, v8);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v12, a3);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v12, a4);
  v18[0] = (uint64_t)v10;
  v18[1] = v11;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v19, v18, 0, 0);
  uint64_t v14 = v18[0];
  v18[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t WebKit::RemoteMediaResourceProxy::shouldCacheResponse()
{
  return 0;
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::dataSent(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = (uint64_t *)((char *)this + 32);
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 1217;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v7);
  uint64_t v9 = (void *)IPC::Encoder::grow(v8, 8uLL, 8);
  if (v10 <= 7 || (*uint64_t v9 = a3, v11 = (void *)IPC::Encoder::grow(v8, 8uLL, 8), v12 <= 7))
  {
    __break(0xC471u);
    JUMPOUT(0x19910AD98);
  }
  *uint64_t v11 = a4;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResourceProxy::dataReceived(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v3 = (os_unfair_lock_s *)*((void *)this + 2);
  uint64_t v4 = (uint64_t *)((char *)this + 32);
  uint64_t v15 = *((void *)a3 + 6);
  uint64_t v16 = (unsigned int *)a3;
  atomic_fetch_add((atomic_uint *volatile)a3, 1u);
  uint64_t v17 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9EDA18;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1216;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v19 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v4);
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v7, (IPC::SharedBufferReference *)&v15);
  v18[0] = (uint64_t)v5;
  v18[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v19, v18, 0, 0);
  uint64_t v9 = v18[0];
  v18[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t v10 = v19;
  uint64_t v19 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v13, v14);
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v8);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::accessControlCheckFailed(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = (uint64_t *)((char *)this + 32);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1215;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, v5);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v6, a3);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::RemoteMediaResourceProxy::loadFailed(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t v3 = *((void *)this + 2);
  v5[0] = (char *)this + 32;
  v5[1] = a3;
  return IPC::Connection::send<Messages::RemoteMediaResourceManager::LoadFailed>(v3, (uint64_t)v5, 0, 0, 0);
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::loadFinished(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = (uint64_t *)((char *)this + 32);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1219;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, v5);
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(v6, (uint64_t)a3);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstance::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 56);
  *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v3;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstance::clearClient(WebKit::RemoteCDMInstance *this, void *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstance::implementationType(WebKit::RemoteCDMInstance *this)
{
  return 3;
}

uint64_t WebKit::RemoteCDMInstance::keySystem(WebKit::RemoteCDMInstance *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebCore::CDMInstance::setHDCPStatus()
{
  return 0;
}

unsigned int *WebKit::RemoteCDMInstanceSession::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSession::clearClient(WebKit::RemoteCDMInstanceSession *this, void *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 6);
  *((void *)this + WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v3;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *non-virtual thunk to'WebKit::RemoteCDMInstanceSession::clearClient(WebKit::RemoteCDMInstanceSession *this, void *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMSession::type(WebKit::RemoteLegacyCDMSession *this)
{
  return 4;
}

uint64_t WebKit::RemoteLegacyCDMSession::sessionId(WebKit::RemoteLegacyCDMSession *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebKit::RemoteMediaPlayerManager::ref(uint64_t this)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(this + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    this = MEMORY[0x19972E8D0](v2);
  }
  ++*(void *)(v2 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return this;
}

atomic_uchar *WebKit::RemoteMediaPlayerManager::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteMediaPlayerManager,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t WebKit::RemoteMediaPlayerManager::controlBlock(WebKit::RemoteMediaPlayerManager *this)
{
  return *((void *)this + 1);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteCDMInstanceProxy13CreateSessionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages20RemoteLegacyCDMProxy13CreateSessionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
          uint64_t v5 = *v4;
        }
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a2[2];
  a2[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

WebKit::RemoteMediaPlayerMIMETypeCache *std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100](WebKit::RemoteMediaPlayerMIMETypeCache **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteMediaPlayerMIMETypeCache::~RemoteMediaPlayerMIMETypeCache(result, a2);
    return (WebKit::RemoteMediaPlayerMIMETypeCache *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::RemoteMediaPlayerMIMETypeCache::~RemoteMediaPlayerMIMETypeCache(WebKit::RemoteMediaPlayerMIMETypeCache *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 2);
    if (v4) {
      WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::deallocateTable(v4, a2);
    }
  }
}

uint64_t WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (a2 != result && *(unsigned char *)(result + 16))
    {
      unsigned int v4 = *(_DWORD *)(result + 12);
      unsigned int v5 = *(_DWORD *)(a2 + 12);
      if (v4 <= v5)
      {
        if (v5 > *(_DWORD *)(result + 8))
        {
          WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(result, 0);
          uint64_t result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3, *(unsigned int *)(a2 + 12));
          unsigned int v4 = *(_DWORD *)(v3 + 12);
        }
      }
      else
      {
        *(_DWORD *)(result + 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v5;
        unsigned int v4 = v5;
      }
      if (v4)
      {
        uint64_t result = (uint64_t)memmove(*(void **)v3, *(const void **)a2, 4 * v4);
        unsigned int v4 = *(_DWORD *)(v3 + 12);
      }
      uint64_t v6 = *(unsigned int *)(a2 + 12);
      if (v4 != v6)
      {
        uint64_t v7 = (_DWORD *)(*(void *)v3 + 4 * v4);
        char v8 = (int *)(*(void *)a2 + 4 * v4);
        uint64_t v9 = 4 * v6 - 4 * v4;
        do
        {
          int v10 = *v8++;
          *v7++ = v10;
          v9 -= 4;
        }
        while (v9);
        unsigned int v4 = *(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(v3 + 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v4;
    }
  }
  else if (*(unsigned char *)(result + 16))
  {
    uint64_t result = *(void *)result;
    if (*(void *)v3)
    {
      *(void *)uint64_t v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(unsigned char *)(v3 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  }
  else
  {
    uint64_t result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, a2);
    *(unsigned char *)(v3 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 1;
  }
  return result;
}

uint64_t *WebKit::RemoteMediaPlayerManager::setUseGPUProcess(BOOL)::$_2::__invoke<WebCore::SampleBufferDisplayLayerClient>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  unsigned int v4 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  unsigned int v5 = (uint64_t *)WebKit::GPUProcessConnection::sampleBufferDisplayLayerManager(v4);

  return WebKit::SampleBufferDisplayLayerManager::createLayer(v5, a1, a2);
}

void WebKit::RemoteMediaPlayerManager::setUseGPUProcess(BOOL)::$_0::__invoke<WebCore::VideoFrame const>(const WebCore::VideoFrame *a1@<X0>, void *a2@<X8>)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  unsigned int v4 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  unsigned int v5 = *(IPC::Semaphore ***)(WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v4) + 8);

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(v5, a1, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED728;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED728;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, void *a2)
{
  if (a2
    && *a2
    && (unsigned __int16 v3 = IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a2), v3 >= 0x100u))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED750;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED750;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, void *a2)
{
  if (a2
    && *a2
    && (unsigned __int16 v3 = IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a2), v3 >= 0x100u))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0)#1},void,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED788;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0)#1},void,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED788;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0)#1},void,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, &v35);
    if (!v36)
    {
      LOBYTE(v31[0]) = 0;
      char v34 = 0;
      goto LABEL_27;
    }
    uint64_t v4 = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v37);
    if (!v38)
    {
      int v14 = 0;
      LOBYTE(v31[0]) = 0;
      char v34 = 0;
      goto LABEL_20;
    }
    unint64_t v6 = *((void *)a2 + 1);
    unsigned int v5 = *(WTF::StringImpl **)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v6 <= v7)
    {
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v22 = *((void *)a2 + 3);
      if (v22)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
          uint64_t v21 = *(WTF::StringImpl **)a2;
          unint64_t v20 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v20 = 0;
          uint64_t v21 = 0;
        }
      }
    }
    else
    {
      char v8 = (unsigned __int8 *)v5 + v7;
      *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v8 + 1;
      if (v5)
      {
        unsigned int v9 = *v8;
        if (v9 < 2)
        {
          if (v6 <= v8 + 1 - (unsigned __int8 *)v5)
          {
            unint64_t v25 = 0;
            int v26 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v27 = *((void *)a2 + 3);
            if (v27)
            {
              (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
              unint64_t v25 = 0;
              unsigned int v5 = *(WTF::StringImpl **)a2;
              uint64_t v29 = *((void *)a2 + 1);
              uint64_t v30 = *((void *)a2 + 3);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              int v26 = 0;
              if (v30)
              {
                if (v29)
                {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v30 + 16))(v30, v5);
                  int v26 = *(WTF::StringImpl **)a2;
                  unint64_t v25 = *((void *)a2 + 1);
                }
              }
            }
          }
          else
          {
            *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v8 + 2;
            unsigned int v10 = v8[1];
            if (v10 < 2)
            {
              if (!v36)
              {
                __break(1u);
                goto LABEL_39;
              }
              BOOL v11 = v10 != 0;
              uint64_t v12 = (uint64_t)v35;
              uint64_t v35 = 0;
              unsigned int v13 = v37;
              uint64_t v37 = 0;
              v31[0] = v12;
              v31[1] = (uint64_t)v13;
              BOOL v32 = v9 != 0;
              BOOL v33 = v11;
              int v14 = 1;
              goto LABEL_12;
            }
            unint64_t v25 = v6;
            int v26 = v5;
          }
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v28 = *((void *)a2 + 3);
          if (v28 && v25) {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
          }
LABEL_37:
          int v14 = 0;
          LOBYTE(v31[0]) = 0;
LABEL_12:
          char v34 = v14;
          if (v38)
          {
            uint64_t v15 = v37;
            uint64_t v37 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v5);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
          }
LABEL_20:
          if (v36)
          {
            int v18 = v35;
            uint64_t v35 = 0;
            if (v18) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v5);
            }
          }
          if (v14)
          {
            WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(v2, v31);
            return (unsigned int *)std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v19);
          }
LABEL_27:
          unsigned int v5 = *(WTF::StringImpl **)a2;
          unint64_t v6 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v4 = (IPC::Decoder *)*((void *)a2 + 3);
          if (!v4)
          {
LABEL_28:
            std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v5);
            return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v2);
          }
LABEL_39:
          if (v6) {
            (*(void (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)v4 + 16))(v4, v5);
          }
          goto LABEL_28;
        }
LABEL_32:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v24 = *((void *)a2 + 3);
        if (v24 && v6) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v24 + 16))(v24, v5);
        }
        goto LABEL_37;
      }
      unint64_t v20 = v6;
      uint64_t v21 = 0;
    }
    unint64_t v6 = 0;
    unsigned int v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        unsigned int v5 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        unsigned int v5 = 0;
      }
    }
    goto LABEL_32;
  }
  uint64_t v16 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v16);
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v3 = 0;
  WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(a1, (uint64_t *)&v3);
  uint64_t result = v3;
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v1);
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(uint64_t *a1, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v3 = *a1;
    *a1 = 0;
  }
  else
  {
    uint64_t v4 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    uint64_t v7 = WebCore::SharedBuffer::SharedBuffer(v4);
    uint64_t v3 = *a1;
    *a1 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v7);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = (unsigned int *)v7;
  uint64_t v7 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
    }
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<WebCore::CDMSessionType,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>)#1},void,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED7B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>)#1},void,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED7B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>)#1},void,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    unsigned int v5 = *(char **)a2;
    if (*(void *)a2)
    {
      unint64_t v6 = *((void *)a2 + 1);
      if (v6 <= *((void *)a2 + 2) - (void)v5)
      {
        unint64_t v12 = 0;
        unsigned int v10 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v24 = *((void *)a2 + 3);
        if (v24)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v24 + 16))(v24, v5, v6);
            unint64_t v12 = 0;
            BOOL v33 = *(char **)a2;
            uint64_t v34 = *((void *)a2 + 1);
            uint64_t v35 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            unsigned int v10 = 0;
            if (v35 && v34)
            {
              (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v35 + 16))(v35, v33, v34);
              unsigned int v10 = *(char **)a2;
              unint64_t v12 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v12 = 0;
            unsigned int v10 = 0;
          }
        }
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v7 + 1;
        unsigned int v8 = *v7;
        if (v8 < 2)
        {
          BOOL v9 = v8 != 0;
          IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v45, a2);
          if (v48)
          {
            IPC::Decoder::decode<std::optional<double>>(a2, &v49);
            if (!v50
              || (IPC::Decoder::decode<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>((uint64_t)v51, (uint64_t *)a2), !v54))
            {
              BOOL v9 = 0;
              int v19 = 0;
              v36[0] = 0;
              char v44 = 0;
              goto LABEL_24;
            }
            unint64_t v12 = *((void *)a2 + 1);
            unsigned int v10 = *(char **)a2;
            unint64_t v13 = *((void *)a2 + 2) - *(void *)a2;
            if (v12 <= v13)
            {
              unint64_t v28 = 0;
              uint64_t v29 = 0;
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v30 = *((void *)a2 + 3);
              if (v30)
              {
                if (v12)
                {
                  (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
                  uint64_t v29 = *(char **)a2;
                  unint64_t v28 = *((void *)a2 + 1);
                }
                else
                {
                  unint64_t v28 = 0;
                  uint64_t v29 = 0;
                }
              }
            }
            else
            {
              int v14 = &v10[v13];
              *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v14 + 1;
              if (v10)
              {
                unsigned int v15 = *v14;
                if (v15 < 2)
                {
                  BOOL v2 = v15 != 0;
                  if (v50)
                  {
                    v36[0] = v9;
                    LOBYTE(v37[0]) = 0;
                    char v38 = 0;
                    if (v47)
                    {
                      v37[0] = v45;
                      uint64_t v16 = v46;
                      uint64_t v45 = 0;
                      uint64_t v46 = 0;
                      v37[1] = v16;
                      char v38 = 1;
                    }
                    long long v39 = v49;
                    v40[0] = 0;
                    char v42 = 0;
                    int v17 = v53;
                    if (v53)
                    {
                      v40[0] = v51[0];
                      int v18 = v52;
                      char v52 = 0;
                      uint64_t v41 = v18;
                      char v42 = 1;
                    }
                    BOOL v43 = v2;
                    int v19 = 1;
LABEL_17:
                    char v44 = v19;
                    if (v17 && v52) {
                      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v52, v10);
                    }
LABEL_24:
                    if (v47) {
                      WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v10);
                    }
                    if (v19)
                    {
                      uint64_t v22 = *v3;
                      *uint64_t v3 = 0;
                      (*(void (**)(uint64_t, BOOL, void *, long long *, char *, BOOL))(*(void *)v22 + 16))(v22, v9, v37, &v39, v40, v2);
                      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
                      return (unsigned int *)std::__optional_destruct_base<std::tuple<BOOL,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v23);
                    }
                    goto LABEL_31;
                  }
                  __break(1u);
                  goto LABEL_41;
                }
LABEL_38:
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v32 = *((void *)a2 + 3);
                if (v32 && v12) {
                  (*(void (**)(uint64_t, char *))(*(void *)v32 + 16))(v32, v10);
                }
                BOOL v9 = 0;
                int v19 = 0;
                v36[0] = 0;
                int v17 = v53;
                goto LABEL_17;
              }
              unint64_t v28 = v12;
              uint64_t v29 = 0;
            }
            unint64_t v12 = 0;
            unsigned int v10 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v31 = *((void *)a2 + 3);
            if (v31)
            {
              if (v28)
              {
                (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
                unsigned int v10 = *(char **)a2;
                unint64_t v12 = *((void *)a2 + 1);
              }
              else
              {
                unint64_t v12 = 0;
                unsigned int v10 = 0;
              }
            }
            goto LABEL_38;
          }
LABEL_30:
          v36[0] = 0;
          char v44 = 0;
LABEL_31:
          unint64_t v25 = *(char **)a2;
          uint64_t v26 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v27 = *((void *)a2 + 3);
          if (v27)
          {
            if (v26) {
              (*(void (**)(uint64_t, char *))(*(void *)v27 + 16))(v27, v25);
            }
          }
          std::__optional_destruct_base<std::tuple<BOOL,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v25);
          return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v3);
        }
        unint64_t v12 = v6;
        unsigned int v10 = v5;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v11 = *((void *)a2 + 3);
      if (v11)
      {
LABEL_41:
        if (v12) {
          (*(void (**)(uint64_t, char *))(*(void *)v11 + 16))(v11, v10);
        }
        goto LABEL_30;
      }
      goto LABEL_30;
    }
  }
  unint64_t v20 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v20);
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(uint64_t *a1)
{
  v8[0] = 0;
  char v9 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v4[0] = 0;
  char v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void, unsigned char *, void *, unsigned char *, void))(*(void *)v1 + 16))(v1, 0, v8, v7, v4, 0);
  unint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6)
  {
    unint64_t result = v5;
    unsigned int v5 = 0;
    if (result) {
      unint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
    }
  }
  if (v9) {
    return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v3);
  }
  return result;
}

unsigned char *IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unsigned char *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  unsigned int v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        unint64_t v13 = *(char **)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned int v8 = &v5[v7];
  *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v12 = v6;
    unint64_t v13 = 0;
LABEL_9:
    unint64_t v6 = 0;
    unsigned int v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unsigned int v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        unsigned int v5 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v16 + 16))(v16, v5);
    }
    goto LABEL_11;
  }
  if (!v9)
  {
    *unint64_t result = 0;
    result[16] = 0;
    result[24] = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v19);
  if (v21)
  {
    *(void *)uint64_t v3 = v19;
    uint64_t v11 = v20;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    *((void *)v3 + 1) = v11;
    v3[16] = 1;
    unint64_t result = (unsigned char *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
    unsigned char v3[24] = 1;
    return result;
  }
LABEL_11:
  *uint64_t v3 = 0;
  unsigned char v3[24] = 0;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (unsigned char *)*((void *)a2 + 3);
  if (result && v17)
  {
    int v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v18();
  }
  return result;
}

void IPC::Decoder::decode<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
  }
  else
  {
    unsigned int v8 = (unsigned __int8 *)(v5 + v7);
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      LODWORD(v8) = *v8;
      if (v8 >= 2) {
        goto LABEL_15;
      }
      if (!v8)
      {
        *(unsigned char *)a1 = 0;
        goto LABEL_9;
      }
      unsigned __int16 v9 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a2);
      if (v9 >= 0x100u)
      {
        char v10 = v9;
        IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((IPC::Decoder *)a2, (uint64_t)&v19);
        if (v20)
        {
          unsigned int v8 = v19;
          *(unsigned char *)a1 = v10;
          *(void *)(a1 + 8) = v8;
          LOBYTE(v8) = 1;
LABEL_9:
          *(unsigned char *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (_BYTE)v8;
          *(unsigned char *)(a1 + 24) = 1;
          return;
        }
      }
      goto LABEL_14;
    }
    uint64_t v11 = v6;
    uint64_t v12 = 0;
  }
  unint64_t v6 = 0;
  uint64_t v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v14 = a2[3];
  if (!v14) {
    goto LABEL_15;
  }
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
LABEL_14:
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    goto LABEL_15;
  }
  unint64_t v6 = 0;
  uint64_t v5 = 0;
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v15 = a2[3];
  if (v15 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v17 = a2[3];
  if (v17 && v16)
  {
    int v18 = *(void (**)(void))(*(void *)v17 + 16);
    v18();
  }
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v3 = *(unsigned int **)(a1 + 56);
      *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      if (v3) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
      }
    }
    if (*(unsigned char *)(a1 + 24)) {
      WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED7D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED7D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v40, a2);
    if (!v43)
    {
      LOBYTE(v31[0]) = 0;
      char v39 = 0;
LABEL_22:
      char v20 = *(char **)a2;
      uint64_t v21 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v22 = *((void *)a2 + 3);
      if (v22)
      {
        if (v21) {
          (*(void (**)(uint64_t, char *))(*(void *)v22 + 16))(v22, v20);
        }
      }
      std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL,WebCore::CDMInstanceSessionLoadFailure>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v20);
      return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(v4);
    }
    IPC::Decoder::decode<std::optional<double>>(a2, &v44);
    if (!v45
      || (IPC::Decoder::decode<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>((uint64_t)v46, (uint64_t *)a2), !v49))
    {
      int v17 = 0;
      LOBYTE(v31[0]) = 0;
      char v39 = 0;
      goto LABEL_37;
    }
    unint64_t v8 = *((void *)a2 + 1);
    unint64_t v6 = *(char **)a2;
    unint64_t v9 = *((void *)a2 + 2) - *(void *)a2;
    if (v8 <= v9)
    {
      unint64_t v14 = 0;
      uint64_t v13 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v23 = *((void *)a2 + 3);
      if (v23)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
          uint64_t v13 = *(char **)a2;
          unint64_t v14 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v13 = 0;
        }
      }
    }
    else
    {
      char v10 = &v6[v9];
      *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v10 + 1;
      if (v6)
      {
        unsigned int v11 = *v10;
        if (v11 >= 2) {
          goto LABEL_28;
        }
        BOOL v3 = v11 != 0;
        if (v8 <= v10 + 1 - v6)
        {
          unint64_t v12 = 0;
          uint64_t v13 = 0;
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v25 = *((void *)a2 + 3);
          if (v25)
          {
            (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
            unint64_t v12 = 0;
            unint64_t v6 = *(char **)a2;
            uint64_t v29 = *((void *)a2 + 1);
            uint64_t v30 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v13 = 0;
            if (v30)
            {
              if (v29)
              {
                (*(void (**)(uint64_t, char *))(*(void *)v30 + 16))(v30, v6);
                uint64_t v13 = *(char **)a2;
                unint64_t v12 = *((void *)a2 + 1);
              }
            }
          }
        }
        else
        {
          *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v10 + 2;
          unsigned int v2 = v10[1];
          unint64_t v12 = v8;
          uint64_t v13 = v6;
          if (v2 < 5)
          {
            unint64_t v14 = v45;
            if (v45)
            {
              LOBYTE(v31[0]) = 0;
              char v32 = 0;
              if (v42)
              {
                v31[0] = v40;
                uint64_t v15 = v41;
                uint64_t v40 = 0;
                uint64_t v41 = 0;
                v31[1] = v15;
                char v32 = 1;
              }
              long long v33 = v44;
              v34[0] = 0;
              char v36 = 0;
              if (v48)
              {
                v34[0] = v46[0];
                uint64_t v16 = v47;
                char v47 = 0;
                uint64_t v35 = v16;
                char v36 = 1;
              }
              BOOL v37 = v11 != 0;
              char v38 = v2;
              int v17 = 1;
              goto LABEL_34;
            }
            __break(1u);
LABEL_45:
            if (v14)
            {
              (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v7 + 16))(v7, v13, v14);
              unint64_t v6 = *(char **)a2;
              unint64_t v8 = *((void *)a2 + 1);
            }
            else
            {
              unint64_t v8 = 0;
              unint64_t v6 = 0;
            }
LABEL_28:
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v24 = *((void *)a2 + 3);
            if (v24 && v8) {
              (*(void (**)(uint64_t, char *))(*(void *)v24 + 16))(v24, v6);
            }
LABEL_33:
            int v17 = 0;
            LOBYTE(v31[0]) = 0;
LABEL_34:
            char v39 = v17;
            if (v48 && v47) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v6);
            }
LABEL_37:
            if (v42) {
              WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v6);
            }
            if (v17)
            {
              uint64_t v27 = *v4;
              *uint64_t v4 = 0;
              (*(void (**)(uint64_t, void *, long long *, char *, BOOL, void))(*(void *)v27 + 16))(v27, v31, &v33, v34, v3, v2);
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
              return (unsigned int *)std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL,WebCore::CDMInstanceSessionLoadFailure>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v28);
            }
            goto LABEL_22;
          }
        }
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v26 = *((void *)a2 + 3);
        if (v26 && v12) {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v26 + 16))(v26, v13, v12);
        }
        goto LABEL_33;
      }
      unint64_t v14 = v8;
      uint64_t v13 = 0;
    }
    unint64_t v8 = 0;
    unint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v7 = *((void *)a2 + 3);
    if (!v7) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }
  int v18 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(v18);
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(uint64_t *a1)
{
  v8[0] = 0;
  char v9 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v4[0] = 0;
  char v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *, void *, unsigned char *, void, void))(*(void *)v1 + 16))(v1, v8, v7, v4, 0, 0);
  unint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6)
  {
    unint64_t result = v5;
    uint64_t v5 = 0;
    if (result) {
      unint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
    }
  }
  if (v9) {
    return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v3);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL,WebCore::CDMInstanceSessionLoadFailure>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      BOOL v3 = *(unsigned int **)(a1 + 48);
      *(void *)(a1 + 48) = 0;
      if (v3) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
      }
    }
    if (*(unsigned char *)(a1 + 16)) {
      WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED800;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED800;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED828;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED828;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v29);
    if (!v31)
    {
      int v13 = 0;
      LOBYTE(v25[0]) = 0;
      char v28 = 0;
LABEL_18:
      char v6 = *(char **)a2;
      uint64_t v16 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v17 = *((void *)a2 + 3);
      if (v17 && v16) {
        (*(void (**)(uint64_t, char *))(*(void *)v17 + 16))(v17, v6);
      }
LABEL_19:
      if (v13)
      {
        uint64_t v18 = *v3;
        *uint64_t v3 = 0;
        (*(void (**)(uint64_t, void *, unsigned int **, BOOL))(*(void *)v18 + 16))(v18, v25, &v26, v2);
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        return std::__optional_destruct_base<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v19);
      }
      else
      {
        std::__optional_destruct_base<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v6);
        return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v3);
      }
    }
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, &v32);
    if (!v33)
    {
      int v13 = 0;
      LOBYTE(v25[0]) = 0;
      char v28 = 0;
LABEL_24:
      int v11 = 1;
LABEL_10:
      if (v31) {
        WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v6);
      }
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    unint64_t v7 = *((void *)a2 + 1);
    char v6 = *(char **)a2;
    unint64_t v8 = *((void *)a2 + 2) - *(void *)a2;
    if (v7 <= v8)
    {
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v22 = *((void *)a2 + 3);
      if (v22)
      {
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
          uint64_t v21 = *(char **)a2;
          unint64_t v20 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v20 = 0;
          uint64_t v21 = 0;
        }
      }
    }
    else
    {
      char v9 = &v6[v8];
      *((void *)a2 + WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v9 + 1;
      if (v6)
      {
        unsigned int v10 = *v9;
        if (v10 < 2)
        {
          if (v31)
          {
            int v11 = 0;
            BOOL v2 = v10 != 0;
            v25[0] = v29;
            uint64_t v12 = v30;
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            v25[1] = v12;
            uint64_t v26 = v32;
            BOOL v27 = v10 != 0;
            int v13 = 1;
            char v28 = 1;
            goto LABEL_10;
          }
          __break(1u);
          goto LABEL_35;
        }
LABEL_29:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v5 = *((void *)a2 + 3);
        if (!v5)
        {
LABEL_30:
          LOBYTE(v25[0]) = 0;
          char v28 = 0;
          if (v33)
          {
            uint64_t v24 = v32;
            char v32 = 0;
            if (v24) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v6);
            }
          }
          int v13 = 0;
          goto LABEL_24;
        }
LABEL_35:
        if (v7) {
          (*(void (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v6);
        }
        goto LABEL_30;
      }
      unint64_t v20 = v7;
      uint64_t v21 = 0;
    }
    unint64_t v7 = 0;
    char v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        char v6 = *(char **)a2;
        unint64_t v7 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        char v6 = 0;
      }
    }
    goto LABEL_29;
  }
  unint64_t v14 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v14);
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(uint64_t *a1)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *, unsigned int **, void))(*(void *)v1 + 16))(v1, v6, &v5, 0);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
  }
  return WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v2);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(unsigned int **)(a1 + 16);
    *(void *)(a1 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    }
    WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

uint64_t IPC::Connection::send<Messages::RemoteLegacyCDMProxy::SetPlayerId>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v10 = 1135;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  int v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9ED850;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ED850;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::call(WebCore::LegacyCDM *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0 || !this)
  {
    *a3 = 0;
    return;
  }
  LOBYTE(v70) = 0;
  char v71 = 0;
  WebCore::LegacyCDM::mediaPlayer((uint64_t *)&v72, this);
  if (v72)
  {
    {
      unint64_t v65 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v65);
    }
    unint64_t v7 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v8 = WebKit::GPUProcessConnection::mediaPlayerManager(v7);
    uint64_t v9 = WebCore::MediaPlayer::playerPrivate(v72);
    unsigned int v10 = *(void **)(v8 + 16);
    int v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v10);
    uint64_t v12 = v11;
    unint64_t v14 = v13;
    if (v10) {
      uint64_t v15 = &v10[3 * *((unsigned int *)v10 - 1)];
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15 == v11)
    {
LABEL_23:
      uint64_t v17 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v17 = *v12;
        uint64_t v16 = (atomic_uchar *)v12[1];
        if (v16)
        {
          uint64_t v18 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v16);
          if (v18) {
            break;
          }
        }
        if (!v9) {
          goto LABEL_25;
        }
LABEL_18:
        while (1)
        {
          v12 += 3;
          if (v12 == v14) {
            break;
          }
          if ((unint64_t)(*v12 + 1) > 1) {
            goto LABEL_22;
          }
        }
        uint64_t v12 = v14;
LABEL_22:
        if (v12 == v15) {
          goto LABEL_23;
        }
      }
      uint64_t v19 = v18;
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v18, v12[2], v68);
      uint64_t v21 = v68[0];
      v68[0] = 0;
      if (v21) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(atomic_uchar **)(v21 + 48));
      }
      if (v21 != v9)
      {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, v20);
        goto LABEL_18;
      }
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, v20);
    }
LABEL_25:
    char v71 = 1;
    uint64_t v70 = v17;
    uint64_t v22 = (atomic_uchar **)v72;
    unint64_t v72 = 0;
    if (v22) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v22);
    }
  }
  {
LABEL_83:
    int v64 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v64);
  }
  uint64_t v23 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 32);
  uint64_t v75 = 0;
  IPC::Connection::createSyncMessageEncoder(3714, 0, &v75, &v74);
  uint64_t v24 = v74;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v74, (uint64_t *)this);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v24, (uint64_t)&v70);
  IPC::Connection::sendSyncMessage(v23, v75, (uint64_t *)&v74, 0, (uint64_t)&v72, INFINITY);
  int v25 = v73;
  if (v73)
  {
    if (v73 == 1)
    {
      LOBYTE(v68[0]) = (_BYTE)v72;
LABEL_34:
      int v69 = v25;
      int v30 = v25;
LABEL_35:
      ((void (*)(char *, WebCore::MediaPlayer **))off_1EE9ED768[v30])(&v76, &v72);
      goto LABEL_36;
    }
LABEL_82:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_83;
  }
  uint64_t v26 = v72;
  uint64_t v27 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(v72);
  if (v28)
  {
    if (!v73)
    {
      uint64_t v23 = v27;
      uint64_t v29 = v72;
      unint64_t v72 = 0;
      v68[0] = v29;
      v68[1] = v27;
      goto LABEL_34;
    }
    goto LABEL_82;
  }
  char v31 = *(void **)v26;
  uint64_t v62 = *((void *)v26 + 1);
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v63 = *((void *)v26 + 3);
  if (v63)
  {
    if (v62)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v63 + 16))(v63, v31);
      char v31 = *(void **)v26;
      uint64_t v66 = *((void *)v26 + 1);
      uint64_t v67 = *((void *)v26 + 3);
      *(void *)uint64_t v26 = 0;
      *((void *)v26 + 1) = 0;
      if (v67)
      {
        if (v66) {
          (*(void (**)(uint64_t, void *))(*(void *)v67 + 16))(v67, v31);
        }
      }
    }
  }
  LOBYTE(v68[0]) = 13;
  int v25 = 1;
  int v69 = 1;
  int v30 = v73;
  if (v73 != -1) {
    goto LABEL_35;
  }
LABEL_36:
  char v32 = v74;
  char v74 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v60, v61);
    if (v25) {
      goto LABEL_74;
    }
  }
  else if (v25)
  {
LABEL_74:
    *a3 = 0;
    goto LABEL_75;
  }
  if (!v23) {
    goto LABEL_74;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
  char v33 = *(atomic_uint **)(v5 + 8);
  if (v33) {
    atomic_fetch_add(v33, 1u);
  }
  uint64_t v34 = (void *)WTF::fastMalloc((WTF *)0x20);
  v34[1] = 0;
  uint64_t v35 = (unsigned int *)(v34 + 1);
  *uint64_t v34 = &unk_1EE9ED4C0;
  void v34[2] = v33;
  v34[3] = v23;
  uint64_t v38 = *(void *)(v5 + 24);
  BOOL v37 = (uint64_t *)(v5 + 24);
  uint64_t v36 = v38;
  if (v38
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v37, 0), (uint64_t v36 = *v37) != 0))
  {
    int v39 = *(_DWORD *)(v36 - 8);
  }
  else
  {
    int v39 = 0;
  }
  unint64_t v40 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
  unint64_t v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
  unint64_t v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
  unsigned int v43 = v39 & ((v42 >> 31) ^ v42);
  long long v44 = (uint64_t *)(v36 + 16 * v43);
  uint64_t v45 = *v44;
  if (!*v44)
  {
LABEL_52:
    uint64_t *v44 = v23;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v35, (uint64_t)v34);
    char v49 = (atomic_uint *)v34[1];
    if (v49) {
      atomic_fetch_add(v49, 1u);
    }
    char v50 = (unsigned int *)v44[1];
    v44[1] = (uint64_t)v49;
    if (v50 && atomic_fetch_add((atomic_uint *volatile)v50, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v48);
    }
    uint64_t v51 = *v37;
    if (*v37) {
      int v52 = *(_DWORD *)(v51 - 12) + 1;
    }
    else {
      int v52 = 1;
    }
    *(_DWORD *)(v51 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v52;
    uint64_t v56 = *v37;
    if (*v37) {
      int v57 = *(_DWORD *)(v56 - 12);
    }
    else {
      int v57 = 0;
    }
    uint64_t v58 = (*(_DWORD *)(v56 - 16) + v57);
    unint64_t v59 = *(unsigned int *)(v56 - 4);
    if (v59 > 0x400)
    {
      if (v59 > 2 * v58) {
        goto LABEL_71;
      }
    }
    else if (3 * v59 > 4 * v58)
    {
      goto LABEL_71;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v37, (uint64_t)v44);
    goto LABEL_71;
  }
  uint64_t v46 = 0;
  int v47 = 1;
  while (v45 != v23)
  {
    if (v45 == -1) {
      uint64_t v46 = v44;
    }
    unsigned int v43 = (v43 + v47) & v39;
    long long v44 = (uint64_t *)(v36 + 16 * v43);
    uint64_t v45 = *v44;
    ++v47;
    if (!*v44)
    {
      if (v46)
      {
        *uint64_t v46 = 0;
        v46[1] = 0;
        --*(_DWORD *)(*v37 - 16);
        long long v44 = v46;
      }
      goto LABEL_52;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v35, (uint64_t)v34);
  char v54 = (atomic_uint *)v34[1];
  if (v54) {
    atomic_fetch_add(v54, 1u);
  }
  char v55 = (unsigned int *)v44[1];
  v44[1] = (uint64_t)v54;
  if (v55 && atomic_fetch_add((atomic_uint *volatile)v55, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v55);
    WTF::fastFree((WTF *)v55, v53);
  }
LABEL_71:
  int v25 = v69;
  *a3 = v34;
  if (v25 != -1) {
LABEL_75:
  }
    ((void (*)(WebCore::MediaPlayer **, void *))off_1EE9ED6C8[v25])(&v72, v68);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_1,BOOL,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9ED878;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_1,BOOL,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ED878;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_1,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  char v6 = (uint64_t *)(v4 + 32);
  unint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v4 + 32), a2, a3);
  uint64_t v8 = *(WTF **)(v4 + 32);
  if (v8) {
    uint64_t v8 = (WTF *)((char *)v8 + 16 * *((unsigned int *)v8 - 1));
  }
  if (v8 == v7)
  {
    {
      uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v16);
    }
    uint64_t v11 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                    + 32);
    LOBYTE(v18) = 0;
    char v19 = 0;
    v17[0] = a2;
    v17[1] = &v18;
    IPC::Connection::sendSync<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem>((uint64_t)v20, v11, (uint64_t)v17);
    if (v19)
    {
      int v13 = v18;
      uint64_t v18 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t v14 = v21;
    char v15 = v20[8];
    if (v21) {
      char v15 = 0;
    }
    LOBYTE(v18) = v15;
    WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::String const&,BOOL &>(v6, a2, (const WTF::StringImpl *)&v18, (uint64_t)v17);
    int v9 = v18;
    if (v14 != -1) {
      ((void (*)(void *, unsigned char *))off_1EE9ED6B8[v14])(v17, v20);
    }
  }
  else
  {
    int v9 = *((unsigned __int8 *)v7 + 8);
  }
  return v9 != 0;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_2,BOOL,WTF::String const&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9ED8A0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_2,BOOL,WTF::String const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ED8A0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_2,BOOL,WTF::String const&,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  unint64_t v7 = *a2;
  if (*a2) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v51 = v7;
  uint64_t v8 = *a3;
  if (*a3) {
    *(_DWORD *)v8 += 2;
  }
  int v52 = v8;
  uint64_t v11 = *(void *)(v4 + 40);
  int v9 = (uint64_t *)(v4 + 40);
  uint64_t v10 = v11;
  if (!v11)
  {
LABEL_19:
    {
      uint64_t v45 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v45);
    }
    uint64_t v24 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                    + 32);
    int v25 = *a3;
    if (*a3) {
      *(_DWORD *)v25 += 2;
    }
    uint64_t v46 = v25;
    char v47 = 1;
    v48[0] = a2;
    v48[1] = &v46;
    IPC::Connection::sendSync<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem>((uint64_t)v49, v24, (uint64_t)v48);
    if (v47)
    {
      uint64_t v27 = v46;
      uint64_t v46 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v26);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    if (v50) {
      char v22 = 0;
    }
    else {
      char v22 = v49[8];
    }
    uint64_t v28 = *v9;
    if (*v9
      || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,BOOL,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(v9),
          (uint64_t v28 = *v9) != 0))
    {
      unsigned int v29 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      unsigned int v29 = 0;
    }
    uint64_t v30 = WTF::PairHash<WTF::String,WTF::String>::hash(&v51) & v29;
    char v31 = (void *)(v28 + 24 * v30);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v31, v32, v33) & 1) == 0)
    {
      uint64_t v35 = 0;
      int v36 = 1;
      do
      {
        if (*v31 == -1)
        {
          uint64_t v35 = v31;
        }
        else if (WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v31, &v51, v34))
        {
          *(unsigned char *)(v28 + 24 * v30 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v22;
          goto LABEL_51;
        }
        uint64_t v30 = (v30 + v36) & v29;
        char v31 = (void *)(v28 + 24 * v30);
        ++v36;
      }
      while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v31, (uint64_t)v17, v34));
      if (v35)
      {
        *uint64_t v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
        --*(_DWORD *)(*v9 - 16);
        char v31 = v35;
      }
    }
    WTF::String::operator=(v31, &v51);
    WTF::String::operator=(v31 + 1, &v52);
    *((unsigned char *)v31 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v22;
    uint64_t v37 = *v9;
    if (*v9) {
      int v38 = *(_DWORD *)(v37 - 12) + 1;
    }
    else {
      int v38 = 1;
    }
    *(_DWORD *)(v37 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v38;
    uint64_t v39 = *v9;
    if (*v9) {
      int v40 = *(_DWORD *)(v39 - 12);
    }
    else {
      int v40 = 0;
    }
    uint64_t v41 = (*(_DWORD *)(v39 - 16) + v40);
    unint64_t v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 > 2 * v41)
      {
LABEL_51:
        if (v50 != -1) {
          ((void (*)(void *, unsigned char *))off_1EE9ED6B8[v50])(v48, v49);
        }
        goto LABEL_53;
      }
    }
    else if (3 * v42 > 4 * v41)
    {
      goto LABEL_51;
    }
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,BOOL,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(v9);
    goto LABEL_51;
  }
  int v12 = *(_DWORD *)(v10 - 8);
  unsigned int v13 = WTF::PairHash<WTF::String,WTF::String>::hash(&v51) & v12;
  uint64_t v14 = v10 + 24 * v13;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v14, v15, v16))
  {
LABEL_13:
    uint64_t v20 = *v9;
    if (!*v9) {
      goto LABEL_19;
    }
    unsigned int v21 = *(_DWORD *)(v20 - 4);
    uint64_t v14 = v20 + 24 * v21;
    goto LABEL_15;
  }
  int v19 = 1;
  while (*(void *)v14 == -1 || (WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v14, &v51, v18) & 1) == 0)
  {
    unsigned int v13 = (v13 + v19) & v12;
    uint64_t v14 = v10 + 24 * v13;
    ++v19;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v14, (uint64_t)v17, v18))goto LABEL_13; {
  }
    }
  uint64_t v20 = *v9;
  if (*v9)
  {
    unsigned int v21 = *(_DWORD *)(v20 - 4);
LABEL_15:
    v20 += 24 * v21;
  }
  if (v20 == v14) {
    goto LABEL_19;
  }
  char v22 = *(unsigned char *)(v14 + 16);
LABEL_53:
  unsigned int v43 = v52;
  int v52 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v17);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  long long v44 = v51;
  uint64_t v51 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v17);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  return v22 != 0;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,BOOL,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    LODWORD(vWTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= (2 * v2));
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(vWTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(_DWORD *)(*a1 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v3;
  if (v2)
  {
    uint64_t v8 = 0;
    uint64_t v2 = v2;
    uint64_t v24 = v2;
    while (1)
    {
      int v9 = (WTF::StringImpl **)(v1 + 24 * v8);
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)(v1 + 24 * v8), (uint64_t)v6, v7))
        {
          uint64_t v10 = v9[1];
          v9[1] = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v6);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          int v19 = *v9;
          *int v9 = 0;
          if (!v19) {
            goto LABEL_39;
          }
          if (*(_DWORD *)v19 == 2)
          {
LABEL_38:
            WTF::StringImpl::destroy(v19, v6);
            goto LABEL_39;
          }
          *(_DWORD *)v19 -= 2;
        }
        else
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unsigned int v13 = WTF::PairHash<WTF::String,WTF::String>::hash((WTF::StringImpl **)(v1 + 24 * v8));
          int v14 = 0;
          do
          {
            unsigned int v15 = v13 & v12;
            uint64_t v16 = (WTF **)(v11 + 24 * (v13 & v12));
            int v17 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v16, (uint64_t)v6, v7);
            unsigned int v13 = ++v14 + v15;
          }
          while (!v17);
          uint64_t v18 = v16[1];
          v16[1] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v6);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          uint64_t v20 = *v16;
          *uint64_t v16 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v6);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          unsigned int v21 = *v9;
          *int v9 = 0;
          *uint64_t v16 = v21;
          char v22 = v9[1];
          v9[1] = 0;
          v16[1] = v22;
          *(unsigned char *)(v11 + 24 * v15 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = *(unsigned char *)(v1 + 24 * v8 + 16);
          uint64_t v23 = v9[1];
          v9[1] = 0;
          uint64_t v2 = v24;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v6);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          int v19 = *v9;
          *int v9 = 0;
          if (!v19) {
            goto LABEL_39;
          }
          if (*(_DWORD *)v19 == 2) {
            goto LABEL_38;
          }
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_39:
      if (++v8 == v2) {
        goto LABEL_42;
      }
    }
  }
  if (v1)
  {
LABEL_42:
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a2;
    int v5 = *(_DWORD *)(v3 - 4);
    int v6 = *(_DWORD *)(v3 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = a2;
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (v7) {
    bzero((void *)(v8 + 16), 16 * v7);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(_DWORD *)(*a1 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v4;
    do
    {
      int v14 = (uint64_t *)(v3 + 16 * v12);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          uint64_t v28 = (uint64_t *)(v19 + 16 * v26);
          unsigned int v29 = (unsigned int *)v28[1];
          v28[1] = 0;
          if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v29);
            uint64_t v34 = v13;
            WTF::fastFree((WTF *)v29, v9);
            uint64_t v13 = v34;
          }
          uint64_t *v28 = *v14;
          uint64_t v30 = v3 + 16 * v12;
          uint64_t v31 = *(void *)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          v28[1] = v31;
          uint64_t v32 = *(unsigned int **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v32);
            uint64_t v33 = v13;
            WTF::fastFree((WTF *)v32, v9);
            uint64_t v13 = v33;
          }
        }
        else
        {
          uint64_t v16 = v3 + 16 * v12;
          int v17 = *(unsigned int **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            uint64_t v18 = v13;
            WTF::fastFree((WTF *)v17, v9);
            uint64_t v13 = v18;
          }
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else if (!v3)
  {
    return;
  }

  WTF::fastFree((WTF *)(v3 - 16), v9);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteLegacyCDMFactoryProxy::RemoveSession,WebKit::RemoteLegacyCDMFactory::removeSession(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0>(WebKit::RemoteLegacyCDMFactory::removeSession(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9ED8C8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteLegacyCDMFactoryProxy::RemoveSession,WebKit::RemoteLegacyCDMFactory::removeSession(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0>(WebKit::RemoteLegacyCDMFactory::removeSession(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ED8C8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteLegacyCDMFactoryProxy::RemoveSession,WebKit::RemoteLegacyCDMFactory::removeSession(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0>(WebKit::RemoteLegacyCDMFactory::removeSession(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (!v1) {
    return result;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return result;
  }
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = (uint64_t *)(v2 + 16);
  uint64_t v4 = v5;
  int v6 = (uint64_t *)(result + 16);
  unsigned int v7 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, *((void *)result + 2));
  if (v5)
  {
    uint64_t v8 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v8 == v7) {
      goto LABEL_11;
    }
LABEL_9:
    if (v8 != v7) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v7);
    }
    goto LABEL_11;
  }
  if (v7)
  {
    uint64_t v8 = 0;
    goto LABEL_9;
  }
LABEL_11:
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v9 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
     + 40;
  uint64_t v10 = *v6;

  return IPC::MessageReceiverMap::removeMessageReceiver(v9, 0x5Du, v10);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(IPC::Decoder *a1, unsigned int *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a1, (uint64_t)&v7);
  std::__optional_storage_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>>(a2, (unsigned __int8 *)&v7);
  if (v8)
  {
    int v5 = v7;
    unsigned int v7 = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v4);
    }
  }
  return a1;
}

unsigned int *std::__optional_storage_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>>(unsigned int *result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (*((unsigned __int8 *)result + 8) == a2[8])
  {
    if (*((unsigned char *)result + 8))
    {
      uint64_t v3 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t result = *(unsigned int **)result;
      *(void *)uint64_t v2 = v3;
      if (result)
      {
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      }
    }
  }
  else if (*((unsigned char *)result + 8))
  {
    uint64_t result = *(unsigned int **)result;
    *(void *)uint64_t v2 = 0;
    if (result) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
    }
    *((unsigned char *)v2 + 8) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)uint64_t result = v4;
    *((unsigned char *)result + 8) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(_DWORD *)(*a1 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (WTF::StringImpl **)(v2 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)v10 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(v10);
          }
          int v17 = 0;
          do
          {
            uint64_t v18 = v16 & v14;
            unsigned int v16 = ++v17 + v18;
          }
          while (*(void *)(v13 + 16 * v18));
          uint64_t v19 = (WTF::StringImpl **)(v13 + 16 * v18);
          int v20 = v19[1];
          v19[1] = 0;
          if (v20)
          {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
            unint64_t v21 = *v19;
            *uint64_t v19 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v7);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
          }
          else
          {
            *uint64_t v19 = 0;
          }
          unint64_t v22 = *v9;
          *uint64_t v9 = 0;
          *uint64_t v19 = v22;
          uint64_t v23 = v2 + 16 * v8;
          unsigned int v24 = *(WTF::StringImpl **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          v19[1] = v24;
          int v25 = *(WTF::DeferrableRefCountedBase **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v25) {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v25);
          }
          uint64_t v10 = *v9;
          *uint64_t v9 = 0;
          if (!v10) {
            goto LABEL_35;
          }
          if (*(_DWORD *)v10 == 2) {
            goto LABEL_34;
          }
          *(_DWORD *)v10 -= 2;
        }
        else
        {
          uint64_t v11 = v2 + 16 * v8;
          uint64_t v12 = *(WTF::DeferrableRefCountedBase **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (v12)
          {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v12);
            uint64_t v10 = *v9;
          }
          *uint64_t v9 = 0;
          if (!v10) {
            goto LABEL_35;
          }
          if (*(_DWORD *)v10 == 2)
          {
LABEL_34:
            WTF::StringImpl::destroy(v10, v7);
            goto LABEL_35;
          }
          *(_DWORD *)v10 -= 2;
        }
      }
LABEL_35:
      if (++v8 == v3) {
        goto LABEL_39;
      }
    }
  }
  if (v2)
  {
LABEL_39:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(void)::$_0,void,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&>::~CallableWrapper(void *a1, void *a2)
{
  int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9ED8F0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(void)::$_0,void,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9ED8F0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(void)::$_0,void,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&>::call(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 && *(void *)(v5 + 8))
  {
    {
      unsigned int v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v24);
    }
    uint64_t v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                              + 32);
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v8 = &unk_1EE9ED918;
    v8[1] = v7;
    uint64_t v9 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 1139;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    int v38 = v10;
    IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::encode(v10, a2);
    int v25 = v8;
    unsigned int v26 = v9;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v38, (uint64_t *)&v25, 0, 0);
    uint64_t v12 = (uint64_t)v25;
    int v25 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t result = v38;
    int v38 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    LOWORD(v25) = 0;
    BYTE2(v25) = 0;
    LOBYTE(v2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    char v29 = 0;
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned int v16 = *(WTF::StringImpl **)a2;
      *(void *)a2 = 0;
      unsigned int v26 = v16;
      long long v17 = *(_OWORD *)(a2 + 24);
      long long v27 = *(_OWORD *)(a2 + 8);
      long long v28 = v17;
      char v29 = 1;
    }
    LOBYTE(v30) = 0;
    char v32 = 0;
    if (*(unsigned char *)(a2 + 96))
    {
      long long v18 = *(_OWORD *)(a2 + 48);
      long long v19 = *(_OWORD *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      long long v30 = v18;
      v31[0] = v19;
      *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)(a2 + 74);
      char v32 = 1;
    }
    LOBYTE(v33[0]) = 0;
    char v34 = 0;
    if (*(unsigned char *)(a2 + 120))
    {
      v33[0] = *(void *)(a2 + 104);
      uint64_t v20 = *(void *)(a2 + 112);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 11WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
      v33[1] = v20;
      char v34 = 1;
    }
    LOBYTE(v35[0]) = 0;
    char v36 = 0;
    if (*(unsigned char *)(a2 + 144))
    {
      v35[0] = *(void *)(a2 + 128);
      uint64_t v21 = *(void *)(a2 + 136);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 13WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      v35[1] = v21;
      char v36 = 1;
    }
    __int16 v37 = *(_WORD *)(a2 + 152);
    (*(void (**)(void, void **))(*(void *)*a3 + 16))(*a3, &v25);
    if (v36) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v22);
    }
    if (v34) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v22);
    }
    uint64_t result = (IPC::Encoder *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, (WTF::StringImpl *)v22);
    if (v29)
    {
      uint64_t result = v26;
      unsigned int v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (IPC::Encoder *)WTF::StringImpl::destroy(result, v23);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0)#1},void,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED918;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0)#1},void,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED918;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0)#1},void,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::decode(a2, (uint64_t)&v37);
    if (v53)
    {
LABEL_4:
      __int16 v20 = v37;
      char v21 = v38;
      LOBYTE(v2WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
      char v25 = 0;
      if (v42)
      {
        uint64_t v5 = v39;
        uint64_t v39 = 0;
        unint64_t v22 = v5;
        long long v23 = v40;
        long long v24 = v41;
        char v25 = 1;
      }
      LOBYTE(v2WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
      char v28 = 0;
      if (v45)
      {
        long long v6 = v43;
        long long v43 = 0uLL;
        long long v26 = v6;
        v27[0] = v44[0];
        *(_OWORD *)((char *)v27 + 10) = *(_OWORD *)((char *)v44 + 10);
        char v28 = 1;
      }
      LOBYTE(v29) = 0;
      char v31 = 0;
      int v7 = v48;
      if (v48)
      {
        uint64_t v29 = v46;
        uint64_t v8 = v47;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v30 = v8;
        char v31 = 1;
      }
      LOBYTE(v3WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
      char v34 = 0;
      if (v51)
      {
        uint64_t v32 = v49;
        uint64_t v9 = v50;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v33 = v9;
        char v34 = 1;
        __int16 v10 = v52;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v4);
        int v7 = v48;
      }
      else
      {
        __int16 v10 = v52;
      }
      __int16 v35 = v10;
      char v36 = 1;
      if (v7) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v4);
      }
      std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, (WTF::StringImpl *)v4);
      if (v42)
      {
        int v14 = v39;
        uint64_t v39 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      (*(void (**)(void, __int16 *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v20);
      return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<WebCore::MediaCapabilitiesDecodingInfo>,false>::~__optional_destruct_base[abi:sn180100](&v20, v15);
    }
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
        if (v53) {
          goto LABEL_4;
        }
        long long v19 = (void *)*a2;
        uint64_t v17 = a2[1];
        uint64_t v18 = a2[3];
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v19 = 0;
LABEL_28:
    LOBYTE(v20) = 0;
    char v36 = 0;
    *a2 = 0;
    a2[1] = 0;
    if (v18 && v17) {
      (*(void (**)(uint64_t, void *))(*(void *)v18 + 16))(v18, v19);
    }
    std::__optional_destruct_base<std::tuple<WebCore::MediaCapabilitiesDecodingInfo>,false>::~__optional_destruct_base[abi:sn180100](&v20, v19);
    return IPC::Connection::cancelReply<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(*(void *)(a1 + 8));
  }
  uint64_t v11 = *(void *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(v11);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v11 = 256;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)int v4 = 0u;
  long long v5 = 0u;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a1 + 16))(a1, v4);
  if (BYTE8(v10)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9 + 8, v1);
  }
  if ((_BYTE)v9) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + 8, (WTF::StringImpl *)v1);
  if (LOBYTE(v7[0]))
  {
    uint64_t result = v4[1];
    v4[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned char *std::__optional_destruct_base<std::tuple<WebCore::MediaCapabilitiesDecodingInfo>,false>::~__optional_destruct_base[abi:sn180100](unsigned char *a1, void *a2)
{
  if (a1[168])
  {
    if (a1[152]) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 136), a2);
    }
    if (a1[128]) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 112), a2);
    }
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 56), (WTF::StringImpl *)a2);
    std::__optional_destruct_base<WebCore::VideoConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), v3);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::MediaPlayerMediaEngineIdentifier,WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>>::expand(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = (void *)(v8 + 24);
    do
    {
      *((unsigned char *)v11 - 8) = -1;
      *uint64_t v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(_DWORD *)(*a1 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      int v14 = (unsigned char *)(v4 + 16 * v12);
      int v15 = *v14;
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)(v4 + 16 * v12 + 8), 0);
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          int v18 = 0;
          unsigned int v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
          unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v21 = v20 & v17;
            unsigned int v20 = ++v18 + v21;
          }
          while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
          uint64_t v22 = v16 + 16 * v21;
          std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)(v22 + 8), 0);
          *(unsigned char *)uint64_t v22 = *v14;
          uint64_t v23 = v4 + 16 * v12;
          uint64_t v24 = *(void *)(v23 + 8);
          v23 += 8;
          *(void *)uint64_t v23 = 0;
          *(void *)(v22 + 8) = v24;
          std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)v23, 0);
          if (v14 == a2) {
            uint64_t v13 = v22;
          }
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerManager::setUseGPUProcess(BOOL)::$_1,void,void (*)(std::unique_ptr<WebCore::MediaPlayerFactory> &&),WebCore::MediaPlayerMediaEngineIdentifier>::call(uint64_t a1, void (*a2)(uint64_t *), char a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v6 = &unk_1EE9ED968;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = a3;
  *(void *)(v6 + 24) = v5;
  uint64_t v8 = v6;
  a2(&v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::MediaPlayerRemoteFactory::~MediaPlayerRemoteFactory(unsigned int **this, void *a2)
{
}

{
  void *v3;
  uint64_t vars8;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::MediaPlayerRemoteFactory::identifier(WebKit::MediaPlayerRemoteFactory *this)
{
  return *((unsigned __int8 *)this + 16);
}

void WebKit::MediaPlayerRemoteFactory::createMediaEnginePlayer(WebKit::MediaPlayerRemoteFactory *this@<X0>, WebCore::MediaPlayer *a2@<X1>, uint64_t *a3@<X8>)
{
  void v92[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)this + 3);
  char v6 = *((unsigned char *)this + 16);
  char v80 = 0;
  LOBYTE(v81[0]) = 0;
  char v82 = 0;
  v83[0] = 0;
  v83[16] = 0;
  v84[0] = 0;
  v84[16] = 0;
  v85[0] = 0;
  v85[16] = 0;
  v78[0] = 0;
  v78[1] = 0;
  LOBYTE(v79[0]) = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  memset(v89, 0, 28);
  unint64_t v91 = 0;
  memset(v92, 0, 14);
  uint64_t v90 = 0;
  WebCore::MediaPlayer::referrer(v77, a2);
  WebCore::MediaPlayer::userAgent(&v74, a2);
  v77[1] = v74;
  WebCore::MediaPlayer::sourceApplicationIdentifier(&v74, a2);
  void v77[2] = v74;
  WebCore::MediaPlayer::mediaPlayerNetworkInterfaceName(&v74, a2);
  v77[3] = v74;
  uint64_t v7 = WebCore::MediaPlayer::mediaContentTypesRequiringHardwareSupport(a2);
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v78, v7);
  BYTE2(v92[1]) = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 136))(*(void *)(*((void *)a2 + 1) + 8));
  WebCore::MediaPlayer::preferredAudioCharacteristics(&v74, a2);
  if (HIDWORD(v87)) {
    WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)v87, (WTF::StringImpl *)(v87 + 8 * HIDWORD(v87)));
  }
  long long v9 = (WTF *)v87;
  if ((void)v87)
  {
    *(void *)&long long v87 = 0;
    DWORD2(v87) = 0;
    WTF::fastFree(v9, v8);
  }
  *(void *)&long long v87 = v74;
  uint64_t v10 = v75;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  *((void *)&v87 + 1) = v10;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v8);
  v92[0] = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 664))();
  LOBYTE(v92[1]) = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 328))();
  BYTE1(v92[1]) = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 264))();
  WebCore::MediaPlayer::outOfBandTrackSources((uint64_t *)&v71, a2);
  uint64_t v68 = a3;
  if (v73)
  {
    if (v73 >= 0x6666667)
    {
      __break(0xC471u);
      return;
    }
    int v12 = 40 * v73;
    uint64_t v13 = WTF::fastMalloc((WTF *)(40 * v73));
    uint64_t v14 = v13;
    unsigned int v15 = (v12 & 0xFFFFFFF8) / 0x28;
    if (v73)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v13 + 16;
      do
      {
        uint64_t v18 = *((void *)v71 + v16);
        unsigned int v19 = *(_DWORD **)(v18 + 16);
        if (v19) {
          *v19 += 2;
        }
        unsigned int v20 = *(_DWORD **)(v18 + 24);
        if (v20) {
          *v20 += 2;
        }
        uint64_t v21 = *(_DWORD **)(v18 + 32);
        if (v21) {
          *v21 += 2;
        }
        char v22 = *(unsigned char *)(v18 + 48);
        uint64_t v23 = *(void *)(v18 + 40);
        *(void *)(v17 - 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v19;
        *(void *)(v17 - 8) = v20;
        *(void *)uint64_t v17 = v21;
        *(void *)(v17 + 8) = v23;
        *(unsigned char *)(v17 + 1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = v22;
        ++v16;
        v17 += 40;
      }
      while (v16 < v73);
      HIDWORD(v75) = v16;
    }
    else
    {
      LODWORD(v1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    }
  }
  else
  {
    LODWORD(v1WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
    unsigned int v15 = 0;
    uint64_t v14 = 0;
  }
  if (HIDWORD(v88)) {
    WTF::VectorDestructor<true,WebCore::PlatformTextTrackData>::destruct((WTF::StringImpl *)v88, (WTF::StringImpl *)(v88 + 40 * HIDWORD(v88)));
  }
  uint64_t v24 = (WTF *)v88;
  if ((void)v88)
  {
    *(void *)&long long v88 = 0;
    DWORD2(v88) = 0;
    WTF::fastFree(v24, v11);
  }
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  *(void *)&long long v88 = v14;
  *((void *)&v88 + 1) = __PAIR64__(v16, v15);
  WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v11);
  if (v73)
  {
    long long v26 = v71;
    uint64_t v27 = 8 * v73;
    do
    {
      char v28 = *(_DWORD **)v26;
      *(void *)long long v26 = 0;
      if (v28)
      {
        if (v28[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
        }
        else {
          --v28[2];
        }
      }
      long long v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  uint64_t v29 = v71;
  if (v71)
  {
    char v71 = 0;
    int v72 = 0;
    WTF::fastFree(v29, v25);
  }
  WebCore::MediaPlayer::documentSecurityOrigin(&v74, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v89, (uint64_t)&v74);
  uint64_t v90 = *((void *)a2 + 25);
  WebCore::MediaPlayer::videoLayerSize(a2);
  unint64_t v91 = __PAIR64__(v31, v30);
  uint64_t v32 = (unsigned __int8 *)WebCore::MediaPlayer::allowedMediaContainerTypes(a2);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v79, v32);
  uint64_t v33 = (unsigned __int8 *)WebCore::MediaPlayer::allowedMediaCodecTypes(a2);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v81, v33);
  uint64_t v34 = WebCore::MediaPlayer::allowedMediaVideoCodecIDs(a2);
  std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)v83, v34);
  uint64_t v35 = WebCore::MediaPlayer::allowedMediaAudioCodecIDs(a2);
  std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)v84, v35);
  uint64_t v36 = WebCore::MediaPlayer::allowedMediaCaptionFormatTypes(a2);
  std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)v85, v36);
  *(void *)&long long v86 = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 272))();
  *((void *)&v86 + 1) = v37;
  BYTE3(v92[1]) = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 608))();
  BYTE5(v92[1]) = WebCore::MediaPlayer::canShowWhileLocked(a2);
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v69 = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 1) + 8) + 656))();
  uint64_t v38 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection((WebKit::RemoteMediaPlayerManager *)v5) + 32);
  uint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v39 = 1141;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  char v71 = v39;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v39, &IdentifierInternal);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v39, &v69);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v39, v6);
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::encode(v39, (uint64_t)v77);
  IPC::Connection::sendMessageImpl(v38, (uint64_t *)&v71, 0, 0);
  long long v41 = v71;
  char v71 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v66, v67);
  }
  uint64_t v42 = IdentifierInternal;
  uint64_t v43 = WTF::fastMalloc((WTF *)0x378);
  WebKit::MediaPlayerPrivateRemote::MediaPlayerPrivateRemote(v43, a2, v6, v42, (uint64_t)v5);
  uint64_t v47 = v5[2];
  uint64_t v46 = v5 + 2;
  uint64_t v45 = v47;
  if (v47
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v46, 0), (uint64_t v45 = *v46) != 0))
  {
    int v48 = *(_DWORD *)(v45 - 8);
  }
  else
  {
    int v48 = 0;
  }
  uint64_t v49 = IdentifierInternal;
  unint64_t v50 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
  unint64_t v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
  unsigned int v53 = v48 & ((v52 >> 31) ^ v52);
  char v54 = (uint64_t *)(v45 + 24 * v53);
  uint64_t v55 = *v54;
  if (*v54)
  {
    uint64_t v56 = 0;
    int v57 = 1;
    while (v55 != IdentifierInternal)
    {
      if (v55 == -1) {
        uint64_t v56 = v54;
      }
      unsigned int v53 = (v53 + v57) & v48;
      char v54 = (uint64_t *)(v45 + 24 * v53);
      uint64_t v55 = *v54;
      ++v57;
      if (!*v54)
      {
        if (v56)
        {
          uint64_t *v56 = 0;
          v56[1] = 0;
          v56[2] = 0;
          --*(_DWORD *)(*v46 - 16);
          uint64_t v49 = IdentifierInternal;
          char v54 = v56;
        }
        goto LABEL_45;
      }
    }
    goto LABEL_58;
  }
LABEL_45:
  *char v54 = v49;
  uint64_t v58 = *(atomic_uchar **)(v43 + 48);
  if (v58) {
    uint64_t v58 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v58);
  }
  unint64_t v59 = (atomic_uchar *)v54[1];
  v54[1] = (uint64_t)v58;
  if (v59) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v59, v44);
  }
  void v54[2] = v43;
  uint64_t v60 = *v46;
  if (*v46) {
    int v61 = *(_DWORD *)(v60 - 12) + 1;
  }
  else {
    int v61 = 1;
  }
  *(_DWORD *)(v60 - 1WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = v61;
  uint64_t v62 = *v46;
  if (*v46) {
    int v63 = *(_DWORD *)(v62 - 12);
  }
  else {
    int v63 = 0;
  }
  uint64_t v64 = (*(_DWORD *)(v62 - 16) + v63);
  unint64_t v65 = *(unsigned int *)(v62 - 4);
  if (v65 > 0x400)
  {
    if (v65 > 2 * v64) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (3 * v65 <= 4 * v64) {
LABEL_57:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v46, v54);
LABEL_58:
  uint64_t *v68 = v43;
  if (v76 != -1) {
    ((void (*)(WTF **, uint64_t *))off_1EE9ED708[v76])(&v71, &v74);
  }
  WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)v77, v44);
}

WTF::StringImpl ***WebKit::MediaPlayerRemoteFactory::getSupportedTypes(uint64_t a1, WTF::StringImpl ***a2)
{
  uint64_t v3 = WebKit::RemoteMediaPlayerManager::typeCache(*(void *)(a1 + 24), *(unsigned char *)(a1 + 16));
  uint64_t v4 = (void **)WebKit::RemoteMediaPlayerMIMETypeCache::supportedTypes(v3);

  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(a2, v4);
}

uint64_t WebKit::MediaPlayerRemoteFactory::supportsTypeAndCodecs(WebKit::MediaPlayerRemoteFactory *this, const WebCore::MediaEngineSupportParameters *a2)
{
  if (*((unsigned char *)a2 + 57)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 3);
  char v4 = *((unsigned char *)this + 16);
  if (!WebCore::contentTypeMeetsContainerAndCodecTypeRequirements()) {
    return 0;
  }
  uint64_t v5 = WebKit::RemoteMediaPlayerManager::typeCache(v3, v4);

  return WebKit::RemoteMediaPlayerMIMETypeCache::supportsTypeAndCodecs(v5, a2);
}

void WebKit::MediaPlayerRemoteFactory::originsInMediaCache(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::MediaPlayerRemoteFactory::supportsKeySystem(WebKit::MediaPlayerRemoteFactory *this, const WTF::String *a2, const WTF::String *a3)
{
  return 0;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED9C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED9C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      unint64_t v3 = a2[1];
      if (v3 > a2[2] - v2)
      {
        char v4 = (unsigned __int8 *)a2[2];
        a2[2] = v4 + 1;
        unsigned int v5 = *v4;
        if (v5 < 2)
        {
          uint64_t v6 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5 != 0);
          goto LABEL_10;
        }
        unint64_t v7 = v3;
        uint64_t v8 = v2;
        goto LABEL_7;
      }
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v9 = a2[3];
      if (v9)
      {
        uint64_t v23 = a2;
        uint64_t v24 = a1;
        if (v3)
        {
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)v9 + 16))(a2[3], v2, v3);
          unint64_t v7 = 0;
          uint64_t v25 = *v23;
          uint64_t v26 = v23[1];
          uint64_t v27 = v23[3];
          *uint64_t v23 = 0;
          v23[1] = 0;
          uint64_t v8 = 0;
          if (v27)
          {
            a1 = v24;
            a2 = v23;
            if (v26)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v26);
              a2 = v23;
              a1 = v24;
              uint64_t v8 = *v23;
              unint64_t v7 = v23[1];
            }
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v7 = 0;
          uint64_t v8 = 0;
        }
        a1 = v24;
        a2 = v23;
      }
LABEL_7:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v10 = a2[3];
      if (v10 && v7)
      {
        uint64_t v16 = a1;
        uint64_t v17 = a2;
        (*(void (**)(void, uint64_t))(*(void *)v10 + 16))(a2[3], v8);
        a2 = v17;
        a1 = v16;
      }
      uint64_t v12 = *a2;
      uint64_t v11 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = a2[3];
      if (v13)
      {
        if (v11)
        {
          uint64_t v18 = a1;
          unsigned int v19 = a2;
          (*(void (**)(void, uint64_t))(*(void *)v13 + 16))(a2[3], v12);
          a1 = v18;
          uint64_t v20 = *v19;
          uint64_t v21 = v19[1];
          uint64_t v22 = v19[3];
          *unsigned int v19 = 0;
          v19[1] = 0;
          if (v22)
          {
            if (v21)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
              a1 = v18;
            }
          }
        }
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
LABEL_10:
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);

  return v14(v6);
}

void *WTF::Detail::CallableWrapper<WebCore::ResourceResponse const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0)#1},void,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9ED9F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceResponse const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0)#1},void,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9ED9F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::ResourceResponse const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0)#1},void,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a2, v5);
    if (v5[200])
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v5);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
      IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(v2);
    }
  }
  else
  {
    char v4 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(v4);
  }
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::DataReceived,WebKit::RemoteMediaResourceProxy::dataReceived(WebCore::PlatformMediaResource &,WebCore::SharedBuffer const&)::$_0>(WebKit::RemoteMediaResourceProxy::dataReceived(WebCore::PlatformMediaResource &,WebCore::SharedBuffer const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a2, (uint64_t)v10);
    if (v13)
    {
      v6[0] = 0;
      char v8 = 0;
      if (v12)
      {
        WTF::MachSendRight::MachSendRight();
        uint64_t v7 = v11;
        char v8 = 1;
        char v9 = 1;
        if (v13 && v12) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v10);
        }
      }
      else
      {
        char v9 = 1;
      }
      goto LABEL_8;
    }
    v6[0] = 0;
    char v9 = 0;
    uint64_t v3 = *(void *)a2;
    uint64_t v4 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v5 = *((void *)a2 + 3);
    if (v5)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
        if (v9)
        {
LABEL_8:
          if (v8)
          {
            WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
          }
        }
      }
    }
  }
}

uint64_t WebKit::RemoteRemoteCommandListener::RemoteRemoteCommandListener(uint64_t a1)
{
  WebCore::RemoteCommandListener::RemoteCommandListener();
  *(void *)(a1 + 48) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = &unk_1EE9ED2E0;
  *(void *)(a1 + 64) = &unk_1EE9B71B0;
  *(void *)(a1 + 7WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = a1;
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = 0;
  *(void *)a1 = &unk_1EE9EDA40;
  *(void *)(a1 + 5WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = &unk_1EE9EDA90;
  *(void *)(a1 + 64) = &unk_1EE9EDAD0;
  *(unsigned char *)(a1 + 9WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 11WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2) = 0;
  WebKit::RemoteRemoteCommandListener::ensureGPUProcessConnection((WebKit::RemoteRemoteCommandListener *)a1);
  return a1;
}

uint64_t WebKit::RemoteRemoteCommandListener::ensureGPUProcessConnection(WebKit::RemoteRemoteCommandListener *this)
{
  uint64_t v3 = (char *)this + 104;
  uint64_t v2 = (atomic_uchar *)*((void *)this + 13);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 14), &v20);
    uint64_t v5 = v20;
    if (v20)
    {
      uint64_t v20 = 0;
LABEL_15:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
      return v5;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  {
    unsigned int v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v7 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 24);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  ++*(void *)(v9 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  uint64_t v11 = v20;
  uint64_t v20 = v7;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v6);
  }
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v20);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v20 + 184, (uint64_t)this + 56);
  uint64_t v12 = *((void *)this + 6);
  v22[0] = 111;
  v22[1] = v12;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v20 + 48), (unsigned __int8 *)v22, (uint64_t)this + 64, (unsigned __int8 **)v21);
  uint64_t v13 = *(void *)(v20 + 32);
  v22[0] = *((void *)this + 6);
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 42;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  v21[0] = v14;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v22);
  IPC::Connection::sendMessageImpl(v13, (uint64_t *)v21, 0, 0);
  unsigned int v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v4);
    WTF::fastFree(v17, v18);
  }
  uint64_t v5 = v20;
  uint64_t v20 = 0;
  if (v5) {
    goto LABEL_15;
  }
  return v5;
}

void WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(WebKit::RemoteRemoteCommandListener *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 13);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v3, *((void *)this + 14), &v13);
    if (v13)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(v13 + 40), (WebKit::RemoteRemoteCommandListener *)((char *)this + 64));
      uint64_t v4 = *(void *)(v13 + 32);
      uint64_t v12 = *((void *)this + 6);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 51;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v14 = v5;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v12);
      IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v14, 0, 0);
      uint64_t v6 = v14;
      uint64_t v14 = 0;
      if (v6)
      {
        IPC::Encoder::~Encoder(v6, a2);
        WTF::fastFree(v10, v11);
      }
      uint64_t v7 = v13;
      uint64_t v13 = 0;
      if (v7) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), a2);
      }
    }
    char v8 = (atomic_uchar *)*((void *)this + 13);
    *((void *)this + 13) = 0;
    if (v8) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
    }
  }
  else
  {
    *((void *)this + 13) = 0;
  }
  uint64_t v9 = *((void *)this + 11);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  *((void *)this + 8) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 9, a2);
  WebCore::RemoteCommandListener::~RemoteCommandListener(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(WebKit::RemoteRemoteCommandListener *this, void *a2)
{
}

{
  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 56), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 64), a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteRemoteCommandListener::gpuProcessConnectionDidClose(WebKit::RemoteRemoteCommandListener *this, WebKit::GPUProcessConnection *a2)
{
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::GPUProcessConnection *)((char *)a2 + 40), (WebKit::RemoteRemoteCommandListener *)((char *)this + 64));
  uint64_t result = (atomic_uchar *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  }
  *((void *)this + 14) = 0;
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteRemoteCommandListener::gpuProcessConnectionDidClose(WebKit::RemoteRemoteCommandListener *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteRemoteCommandListener::gpuProcessConnectionDidClose((WebKit::RemoteRemoteCommandListener *)((char *)this - 56), a2);
}

uint64_t WebKit::RemoteRemoteCommandListener::updateSupportedCommands(WebKit::RemoteRemoteCommandListener *this)
{
  uint64_t v2 = (unsigned __int8 **)WebCore::RemoteCommandListener::supportedCommands(this);
  uint64_t v4 = v2;
  uint64_t v5 = *((void *)this + 11);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 - 12);
    uint64_t v7 = *v2;
    if (*v2)
    {
      if (v6 != *((_DWORD *)v7 - 3)) {
        goto LABEL_29;
      }
      if (v6)
      {
        uint64_t v8 = *((unsigned int *)v7 - 1);
        uint64_t v9 = *v2;
        if (v8)
        {
          uint64_t v10 = *((unsigned int *)v7 - 1);
          uint64_t v9 = *v2;
          while (*v9 >= 0xFEu)
          {
            ++v9;
            if (!--v10) {
              goto LABEL_26;
            }
          }
        }
        uint64_t v11 = &v7[v8];
        if (v9 != v11)
        {
          unsigned int v12 = *(_DWORD *)(v5 - 8);
          while (1)
          {
            int v13 = *v9;
            unsigned int v14 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
            unsigned int v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
            uint64_t v16 = (v15 ^ HIWORD(v15)) & v12;
            int v17 = *(unsigned __int8 *)(v5 + v16);
            if (v17 != v13) {
              break;
            }
LABEL_21:
            if (++v9 != v11)
            {
              while (*v9 >= 0xFEu)
              {
                if (++v9 == v11)
                {
                  uint64_t v9 = v11;
                  break;
                }
              }
              if (v9 != v11) {
                continue;
              }
            }
            goto LABEL_26;
          }
          int v18 = 1;
          while (v17 != 255)
          {
            uint64_t v16 = (v16 + v18) & v12;
            int v17 = *(unsigned __int8 *)(v5 + v16);
            ++v18;
            if (v17 == v13) {
              goto LABEL_21;
            }
          }
          goto LABEL_28;
        }
      }
    }
    else if (v6)
    {
      goto LABEL_34;
    }
LABEL_26:
    int v19 = *((unsigned __int8 *)this + 96);
    uint64_t result = WebCore::RemoteCommandListener::supportsSeeking(this);
    if (v19 == result) {
      return result;
    }
    uint64_t v7 = *v4;
LABEL_28:
    if (v7) {
      goto LABEL_29;
    }
LABEL_34:
    char v28 = 0;
    goto LABEL_66;
  }
  uint64_t v7 = *v2;
  if (!*v2 || !*((_DWORD *)v7 - 3)) {
    goto LABEL_26;
  }
LABEL_29:
  uint64_t v21 = *((unsigned int *)v7 - 3);
  if (!v21) {
    goto LABEL_34;
  }
  unsigned int v22 = (v21 - 1) | ((v21 - 1) >> 1) | (((v21 - 1) | ((v21 - 1) >> 1)) >> 2);
  unsigned int v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
  unint64_t v24 = (v23 | HIWORD(v23)) + 1;
  if (v24 > 0x400)
  {
    if (v24 > 2 * v21) {
      goto LABEL_36;
    }
  }
  else if (3 * v24 > 4 * v21)
  {
LABEL_33:
    double v25 = (double)v21;
    double v26 = (double)v24;
    double v27 = 0.604166667;
    goto LABEL_37;
  }
  LODWORD(v24) = 2 * v24;
  if (v24 <= 0x400) {
    goto LABEL_33;
  }
LABEL_36:
  double v25 = (double)v21;
  double v26 = (double)v24;
  double v27 = 0.416666667;
LABEL_37:
  if (v26 * v27 <= v25) {
    LODWORD(v24) = 2 * v24;
  }
  if (v24 <= 8) {
    size_t v29 = 8;
  }
  else {
    size_t v29 = v24;
  }
  unsigned int v30 = (_DWORD *)WTF::fastMalloc((WTF *)(v29 + 16));
  char v28 = v30 + 4;
  memset(v30 + 4, 255, v29);
  LODWORD(v31) = v29 - 1;
  v30[2] = v29 - 1;
  v30[3] = v29;
  _DWORD *v30 = 0;
  v30[1] = v21;
  uint64_t v32 = *v4;
  if (*v4)
  {
    uint64_t v33 = *((unsigned int *)v32 - 1);
    uint64_t v34 = &v32[v33];
    if (*((_DWORD *)v32 - 3))
    {
      uint64_t v35 = *v4;
      if (v33)
      {
        uint64_t v35 = *v4;
        while (*v35 >= 0xFEu)
        {
          ++v35;
          if (!--v33)
          {
            uint64_t v35 = v34;
            goto LABEL_52;
          }
        }
      }
      goto LABEL_52;
    }
    uint64_t v35 = &v32[v33];
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v34 = &v32[v33];
LABEL_52:
  if (v32) {
    v32 += *((unsigned int *)v32 - 1);
  }
  if (v32 != v35)
  {
    if (v30 == (_DWORD *)-16) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v31;
    }
    do
    {
      int v36 = 0;
      int v37 = *v35;
      unsigned int v38 = 9 * ((~(v37 << 15) + v37) ^ ((~(v37 << 15) + v37) >> 10));
      uint64_t v39 = ((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) ^ (((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) >> 16);
      do
      {
        uint64_t v40 = v39 & v31;
        int v41 = *((unsigned __int8 *)v28 + (v39 & v31));
        uint64_t v39 = ++v36 + (v39 & v31);
      }
      while (v41 != 255);
      *((unsigned char *)v28 + v40) = v37;
      uint64_t v42 = v35 + 1;
      uint64_t v35 = v34;
      if (v42 != v34)
      {
        uint64_t v35 = v42;
        while (*v35 >= 0xFEu)
        {
          if (++v35 == v34)
          {
            uint64_t v35 = v34;
            break;
          }
        }
      }
    }
    while (v35 != v32);
  }
LABEL_66:
  uint64_t v43 = *((void *)this + 11);
  *((void *)this + 11) = v28;
  if (v43) {
    WTF::fastFree((WTF *)(v43 - 16), v3);
  }
  *((unsigned char *)this + 9WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = WebCore::RemoteCommandListener::supportsSeeking(this);
  uint64_t v44 = *(void *)(WebKit::RemoteRemoteCommandListener::ensureGPUProcessConnection(this) + 32);
  if (!*v4 || (uint64_t v45 = (WTF *)*((unsigned int *)*v4 - 3), !v45))
  {
    uint64_t v47 = 0;
LABEL_78:
    unsigned int v52 = 0;
    goto LABEL_79;
  }
  uint64_t v46 = WTF::fastMalloc(v45);
  uint64_t v47 = (WTF *)v46;
  int v48 = *v4;
  if (!*v4 || !*((_DWORD *)v48 - 3)) {
    goto LABEL_78;
  }
  uint64_t v49 = *((unsigned int *)v48 - 1);
  if (v49)
  {
    uint64_t v50 = *((unsigned int *)v48 - 1);
    unint64_t v51 = *v4;
    while (*v51 >= 0xFEu)
    {
      ++v51;
      if (!--v50) {
        goto LABEL_78;
      }
    }
  }
  else
  {
    unint64_t v51 = *v4;
  }
  uint64_t v64 = &v48[v49];
  if (v51 == v64) {
    goto LABEL_78;
  }
  unsigned int v52 = 0;
  do
  {
    char v65 = *v51++;
    *(unsigned char *)(v46 + v52++) = v65;
    if (v51 == v64) {
      break;
    }
    while (*v51 >= 0xFEu)
    {
      if (++v51 == v64)
      {
        unint64_t v51 = v64;
        break;
      }
    }
  }
  while (v51 != v64);
LABEL_79:
  char v53 = *((unsigned char *)this + 96);
  uint64_t v54 = *((void *)this + 6);
  uint64_t v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v55 = 1274;
  *((void *)v55 + 1) = v54;
  *((void *)v55 + 6WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6) = (char *)v55 + 16;
  *((void *)v55 + 67) = 512;
  *((void *)v55 + 68) = 0;
  *((void *)v55 + 70) = 0;
  *((void *)v55 + 69) = 0;
  IPC::Encoder::encodeHeader(v55);
  uint64_t v66 = v55;
  uint64_t v56 = v52;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v55, v52);
  if (v52)
  {
    int v57 = (char *)v47;
    do
    {
      char v58 = *v57++;
      IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::encode<IPC::Encoder>(v55, v58);
      --v56;
    }
    while (v56);
  }
  unint64_t v59 = (unsigned char *)IPC::Encoder::grow(v55, 1uLL, 1);
  if (!v60)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *unint64_t v59 = v53;
  IPC::Connection::sendMessageImpl(v44, (uint64_t *)&v66, 0, 0);
  uint64_t result = (uint64_t)v66;
  uint64_t v66 = 0;
  if (!result)
  {
    if (!v47) {
      return result;
    }
    return WTF::fastFree(v47, v61);
  }
  IPC::Encoder::~Encoder((IPC::Encoder *)result, v61);
  uint64_t result = WTF::fastFree(v62, v63);
  if (v47) {
    return WTF::fastFree(v47, v61);
  }
  return result;
}