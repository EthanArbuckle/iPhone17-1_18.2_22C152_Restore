void IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  long long v9;
  char v10;

  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>(a2, a3, a4, &v9, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, long long *a4@<X4>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 4) && *(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 16) && *((unsigned char *)a4 + 16))
  {
    *(_DWORD *)a5 = *(_DWORD *)a1;
    *(void *)(a5 + 8) = *(void *)a2;
    long long v5 = *a4;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(a5 + 32) = v5;
    *(unsigned char *)(a5 + 48) = 1;
  }
  else
  {
    __break(1u);
  }
}

void *IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  result = IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    result = (void *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    *((void *)a1 + 2) = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
    }
    unint64_t v8 = v2;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v9 = *(void *)v11;
        unint64_t v8 = *((void *)v11 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  result = (void *)*((void *)a1 + 3);
  if (result)
  {
    if (v8)
    {
      v12 = a2;
      result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[40] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  result = IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)v7);
  if (v7[16]) {
    return IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned long long>>(a1, a2, (uint64_t)v7, (uint64_t)a3);
  }
  *a3 = 0;
  a3[40] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned long long>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  result = IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v9);
  char v8 = v10;
  if (!v10)
  {
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 4) && *(unsigned char *)(a3 + 16))
  {
    *(_DWORD *)a4 = *(_DWORD *)a2;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)a3;
    *(_OWORD *)(a4 + 24) = v9;
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(a4 + 40) = v8;
    return result;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[28])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    *((void *)a1 + 2) = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
      return;
    }
    unint64_t v7 = v2;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v9 = *((void *)a1 + 3);
    if (v9)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v8 = *(void *)v11;
        unint64_t v7 = *((void *)v11 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v10 = *((void *)a1 + 3);
  if (v10)
  {
    if (v7)
    {
      v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[28] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  int v8 = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>>(a1, a2, (uint64_t)&v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[28] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v9 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  int v10 = v8;
  if ((_BYTE)v8)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>>(a1, a2, a3, (uint64_t)&v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[28] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  int v11 = v9;
  if ((_BYTE)v9)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>(a2, a3, a4, (uint64_t)&v10, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[28] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 4) && *(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 8) && *(unsigned char *)(a4 + 8))
  {
    *(_DWORD *)a5 = *(_DWORD *)a1;
    *(void *)(a5 + 4) = *(void *)a2;
    *(void *)(a5 + 12) = *(void *)a3;
    *(void *)(a5 + 20) = *(void *)a4;
    *(unsigned char *)(a5 + 28) = 1;
  }
  else
  {
    __break(1u);
  }
}

void IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[36])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    int v6 = (unsigned int *)(v3 + v4);
    *((void *)a1 + 2) = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
      return;
    }
    unint64_t v7 = v2;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v9 = *((void *)a1 + 3);
    if (v9)
    {
      int v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v8 = *(void *)v11;
        unint64_t v7 = *((void *)v11 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v10 = *((void *)a1 + 3);
  if (v10)
  {
    if (v7)
    {
      v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[36] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  int v8 = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>>(a1, a2, (uint64_t)&v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[36] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v9 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  int v10 = v8;
  if ((_BYTE)v8)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>>((uint64_t *)a1, a2, a3, (uint64_t)&v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[36] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v11 = IPC::Decoder::decode<std::optional<int>>(a1);
  int v12 = v10;
  if ((_BYTE)v10)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>>((IPC::Decoder *)a1, a2, a3, a4, (uint64_t)&v11, a5);
  }
  else
  {
    *a5 = 0;
    a5[36] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v12 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  int v13 = v11;
  if ((_BYTE)v11)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>(a2, a3, a4, a5, (uint64_t)&v12, (uint64_t)a6);
  }
  else
  {
    *a6 = 0;
    a6[36] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (*(unsigned char *)(a1 + 4) && *(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 8) && *(unsigned char *)(a4 + 8) && *(unsigned char *)(a5 + 8))
  {
    *(_DWORD *)a6 = *(_DWORD *)a1;
    *(void *)(a6 + 4) = *(void *)a2;
    *(void *)(a6 + 12) = *(void *)a3;
    *(void *)(a6 + 20) = *(void *)a4;
    *(void *)(a6 + 28) = *(void *)a5;
    *(unsigned char *)(a6 + 36) = 1;
  }
  else
  {
    __break(1u);
  }
}

void sub_198A79410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  _Block_release(0);
  CFTypeRef v70 = cf;
  CFTypeRef cf = 0;
  if (v70) {
    CFRelease(v70);
  }
  CFTypeRef v71 = a65;
  a65 = 0;
  if (v71) {
    CFRelease(v71);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a13, v69);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v66);
  _Unwind_Resume(a1);
}

void sub_198A797F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_release(v68);
  CFTypeRef v70 = a33;
  a33 = 0;
  if (v70) {
    CFRelease(v70);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  CFTypeRef v72 = cf;
  CFTypeRef cf = 0;
  if (v72) {
    CFRelease(v72);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a37, v71);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v67);
  _Unwind_Resume(a1);
}

void sub_198A79BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,CFTypeRef cf)
{
  (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  _Block_release(0);
  CFTypeRef v47 = cf;
  CFTypeRef cf = 0;
  if (v47) {
    CFRelease(v47);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a13, v46);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v43);
  _Unwind_Resume(a1);
}

void sub_198A79E48(_Unwind_Exception *exception_object)
{
}

void sub_198A7A0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef cf)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v19);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinator(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v1 = *((void *)this + 32);
  if (!v1)
  {
    uint64_t v1 = WTF::fastMalloc((WTF *)0x58);
    WebKit::WebPaymentCoordinatorProxy::WebPaymentCoordinatorProxy(v1, (uint64_t)this);
    uint64_t v3 = *((void *)this + 32);
    *((void *)this + 32) = v1;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      return *((void *)this + 32);
    }
  }
  return v1;
}

void sub_198A7A228(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorConnection(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorPresentingViewController()
{
  return 0;
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = a2;
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(a1 + 80) + 40);
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9BD5F8;
  v5[1] = v4;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 331;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v15 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v13);
  v14[0] = (uint64_t)v5;
  v14[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v15, v14, 0, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_198A7A36C(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v3, a2);
  WTF::fastFree(v5, v6);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_198A7A3B8()
{
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x198A7A3B0);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorPresentingWindow()
{
  return 0;
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorBoundInterfaceIdentifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 224), &v4);
  if (v2) {
    return v2 + 1128;
  }
  else {
    return MEMORY[0x1E4F30980];
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorCTDataConnectionServiceType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 224), &v4);
  if (v2) {
    return v2 + 1192;
  }
  else {
    return MEMORY[0x1E4F30980];
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorSourceApplicationBundleIdentifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 224), &v4);
  if (v2) {
    return v2 + 1136;
  }
  else {
    return MEMORY[0x1E4F30980];
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorSourceApplicationSecondaryIdentifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 224), &v4);
  if (v2) {
    return v2 + 1144;
  }
  else {
    return MEMORY[0x1E4F30980];
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorAuthorizationPresenter@<X0>(WebKit::WebPaymentCoordinatorProxy *a1@<X1>, PKPaymentRequest *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::PaymentAuthorizationController::PaymentAuthorizationController(v7, (uint64_t)a1 + 24, (uint64_t)a2);
  *a3 = v7;
  return result;
}

void sub_198A7A550(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkProcess::clearServiceWorkerEntitlementOverride(uint64_t a1, uint64_t *a2)
{
  WebKit::disableServiceWorkerEntitlementTestingOverride = 0;
  return WTF::CompletionHandler<void ()(void)>::operator()(a2);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::createClientTCPSocket@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, WebKit *a8@<X7>, uint64_t *a9@<X8>, uint64_t *a10)
{
  uint64_t v18 = WTF::fastMalloc((WTF *)0x38);
  uint64_t result = WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(v18, a1, a2, a3, a4, a5, a6, a7, a8, a10);
  *a9 = v18;
  return result;
}

void sub_198A7A61C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(uint64_t a1, uint64_t a2, uint64_t a3, std::string *this, unsigned int a5, uint64_t a6, uint64_t a7, int a8, WebKit *a9, uint64_t *a10)
{
  *(void *)(a1 + 8) = 0;
  v17 = (uint64_t *)(a1 + 8);
  *(void *)a1 = &unk_1EE9BD270;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 28), 1u);
  uint64_t v18 = *a10;
  *a10 = 0;
  *(void *)(a1 + 32) = v18;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = (a5 & 4) != 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = *this;
  }
  std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  LOBYTE(v20) = *((unsigned char *)&v58.__r_.__value_.__s + 23);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    v21 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)this);
    rtc::IPAddress::ToString((uint64_t *)&v52, v21);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    std::string v58 = v52;
    std::string::size_type v20 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  if ((v20 & 0x80u) == 0) {
    v22 = &v58;
  }
  else {
    v22 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  v23 = (WTF::String *)rtc::SocketAddress::port((rtc::SocketAddress *)this);
  WTF::String::number(v23);
  WTF::String::utf8();
  if (v51[0]) {
    v24 = (char *)v51[0] + 16;
  }
  else {
    v24 = 0;
  }
  WebKit::createNWConnection((nw_connection_t *)&v52, a3, (char *)v22, v24, (a5 >> 1) & 1, a6, a7, a8, a9);
  std::string::size_type v26 = v52.__r_.__value_.__r.__words[0];
  v52.__r_.__value_.__r.__words[0] = 0;
  v27 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = v26;
  if (v27) {
    CFRelease(v27);
  }
  v28 = v51[0];
  v51[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1) {
      WTF::fastFree(v28, v25);
    }
    else {
      --*(_DWORD *)v28;
    }
  }
  v29 = (WTF::StringImpl *)cf;
  CFTypeRef cf = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = *(NSObject **)(a1 + 40);
  if (qword_1EB358EB0 != -1) {
    dispatch_once(&qword_1EB358EB0, &__block_literal_global_105);
  }
  nw_connection_set_queue(v30, (dispatch_queue_t)qword_1EB358EA8);
  v31 = *(NSObject **)(a1 + 40);
  uint64_t v32 = *(void *)(a1 + 8);
  if (v32) {
    goto LABEL_33;
  }
  uint64_t v32 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v32 = 1;
  *(void *)(v32 + 8) = a1;
  v34 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = v32;
  if (!v34) {
    goto LABEL_33;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v34);
    WTF::fastFree((WTF *)v34, v33);
  }
  uint64_t v32 = *v17;
  if (*v17) {
LABEL_33:
  }
    atomic_fetch_add((atomic_uint *volatile)v32, 1u);
  std::string::size_type v35 = *(void *)(a1 + 16);
  v52.__r_.__value_.__r.__words[0] = v32;
  v52.__r_.__value_.__l.__size_ = v35;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 24), 1u);
  v52.__r_.__value_.__r.__words[2] = a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v53, *(atomic_uchar *volatile **)(a1 + 32));
  long long v36 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  std::string::size_type v37 = v52.__r_.__value_.__r.__words[2];
  v38 = v53[0];
  v52.__r_.__value_.__r.__words[0] = 0;
  v52.__r_.__value_.__r.__words[2] = 0;
  v53[0] = 0;
  v39 = malloc_type_malloc(0x40uLL, 0x10E00404BE9A799uLL);
  void *v39 = MEMORY[0x1E4F14398];
  v39[1] = 50331650;
  v39[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v39[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::descriptor;
  *((_OWORD *)v39 + 2) = v36;
  v39[6] = v37;
  v39[7] = v38;
  nw_connection_set_state_changed_handler(v31, v39);
  _Block_release(v39);
  v41 = (atomic_uchar **)v53[0];
  v53[0] = 0;
  if (v41) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v41);
  }
  std::string::size_type v42 = v52.__r_.__value_.__r.__words[2];
  v52.__r_.__value_.__r.__words[2] = 0;
  if (v42) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v42 + 24));
  }
  v43 = (unsigned int *)v52.__r_.__value_.__r.__words[0];
  v52.__r_.__value_.__r.__words[0] = 0;
  if (v43 && atomic_fetch_add((atomic_uint *volatile)v43, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v43);
    WTF::fastFree((WTF *)v43, v40);
  }
  uint64_t v44 = *(const void **)(a1 + 40);
  CFTypeRef cf = v44;
  if (v44) {
    CFRetain(v44);
  }
  v52.__r_.__value_.__r.__words[0] = *(void *)(a1 + 16);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v52.__r_.__value_.__l.__size_, *(atomic_uchar *volatile **)(a1 + 32));
  uint64_t v45 = rtc::SocketAddress::ipaddr((rtc::SocketAddress *)this);
  v52.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1EE9BD6E8;
  LODWORD(v53[0]) = *(_DWORD *)(v45 + 8);
  *(_OWORD *)((char *)v53 + 4) = *(_OWORD *)(v45 + 12);
  __int16 v54 = rtc::SocketAddress::port((rtc::SocketAddress *)this);
  char v55 = *(unsigned char *)(a1 + 48);
  uint64_t v46 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v46 = &unk_1EE9BD620;
  *(void *)(v46 + 8) = v52.__r_.__value_.__r.__words[0];
  std::string::size_type v47 = v52.__r_.__value_.__l.__size_;
  v52.__r_.__value_.__l.__size_ = 0;
  *(void *)(v46 + 16) = v47;
  *(void *)(v46 + 24) = &unk_1EE9BD6E8;
  *(_DWORD *)(v46 + 32) = v53[0];
  *(_OWORD *)(v46 + 36) = *(_OWORD *)((char *)v53 + 4);
  *(_WORD *)(v46 + 56) = v54;
  *(unsigned char *)(v46 + 58) = v55;
  uint64_t v56 = v46;
  v51[0] = 0;
  v51[1] = 0;
  WebKit::processIncomingData((NSObject **)&cf, &v56, (uint64_t *)v51);
  if (v51[0]) {
    WTF::fastFree(v51[0], v48);
  }
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  v49 = (atomic_uchar **)v52.__r_.__value_.__l.__size_;
  v52.__r_.__value_.__l.__size_ = 0;
  if (v49) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v49);
  }
  if (cf) {
    CFRelease(cf);
  }
  nw_connection_start(*(nw_connection_t *)(a1 + 40));
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  return a1;
}

uint64_t sub_198A7AB34(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  v29 = (const void *)v26[5];
  v26[5] = 0;
  if (v29) {
    CFRelease(v29);
  }
  v30 = (atomic_uchar **)v26[4];
  v26[4] = 0;
  if (v30) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v30);
  }
  uint64_t v31 = v26[3];
  v26[3] = 0;
  if (!v31)
  {
LABEL_10:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v27, a2);
    _Unwind_Resume(a1);
  }
  uint64_t v32 = (atomic_uint *)(v31 + 28);
  if (atomic_load((unsigned int *)v32))
  {
    atomic_fetch_add(v32, 0xFFFFFFFF);
    goto LABEL_10;
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

void WebKit::createNWConnection(nw_connection_t *a1, uint64_t a2, char *hostname, char *port, int a5, uint64_t a6, uint64_t a7, int a8, WebKit *a9)
{
  host = nw_endpoint_create_host(hostname, port);
  v16 = (nw_parameters_configure_protocol_block_t *)MEMORY[0x1E4F38C88];
  if (!a5) {
    v16 = (nw_parameters_configure_protocol_block_t *)MEMORY[0x1E4F38C90];
  }
  nw_parameters_t secure_tcp = nw_parameters_create_secure_tcp(*v16, &__block_literal_global_9);
  uint64_t v18 = secure_tcp;
  uint64_t v19 = *(void *)(a2 + 152);
  if (v19) {
    std::string::size_type v20 = (unsigned char *)(v19 + 16);
  }
  else {
    std::string::size_type v20 = 0;
  }
  long long v21 = *(_OWORD *)(a2 + 128);
  v24[0] = *(_OWORD *)(a2 + 112);
  v24[1] = v21;
  int v25 = *(_DWORD *)(a2 + 144);
  WebKit::setNWParametersApplicationIdentifiers((uint64_t)secure_tcp, v20, (uint64_t)v24, a6);
  BOOL isKnownTracker = WebKit::isKnownTracker(a9, v22);
  WebKit::setNWParametersTrackerOptions((uint64_t)v18, a8, a7, isKnownTracker);
  *a1 = nw_connection_create(host, v18);
  if (v18) {
    CFRelease(v18);
  }
  if (host)
  {
    CFRelease(host);
  }
}

void sub_198A7AE78(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::processIncomingData(NSObject **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v7 = malloc_type_malloc(0x40uLL, 0x10F004095304804uLL);
  *uint64_t v7 = MEMORY[0x1E4F14398];
  v7[1] = 50331650;
  v7[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
  v7[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::descriptor;
  v7[4] = v3;
  v7[5] = v4;
  v7[6] = v5;
  v7[7] = v6;
  nw_connection_receive(v3, 1u, 0xFFFFFFFF, v7);

  _Block_release(v7);
}

void sub_198A7AF80(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  _Block_release(v2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkRTCTCPSocketCocoa::~NetworkRTCTCPSocketCocoa(WebKit::NetworkRTCTCPSocketCocoa *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v4);
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = (atomic_uint *)(v5 + 28);
  if (atomic_load((unsigned int *)v6))
  {
    atomic_fetch_add(v6, 0xFFFFFFFF);
LABEL_8:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
    return;
  }
  __break(0xC471u);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkRTCTCPSocketCocoa::~NetworkRTCTCPSocketCocoa(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::NetworkRTCTCPSocketCocoa::close(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    nw_connection_cancel(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 24), 1u);
  WebKit::NetworkRTCProvider::takeSocket((uint64_t *)v3, *((void *)this + 2), (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5) {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  if (v3)
  {
    return WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  }
  return result;
}

void WebKit::NetworkRTCTCPSocketCocoa::setOption(WebKit::NetworkRTCTCPSocketCocoa *this, int a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a2 != 5) {
    return;
  }
  if (a3 <= 33)
  {
    if (!a3 || a3 == 8)
    {
LABEL_9:
      nw_connection_reset_traffic_class();
      return;
    }
  }
  else if (a3 == 34 || a3 == 36 || a3 == 46)
  {
    goto LABEL_9;
  }
  uint64_t v4 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "NetworkRTCTCPSocketCocoa has an unexpected DSCP value %d", (uint8_t *)v5, 8u);
  }
}

WTF *WebKit::NetworkRTCTCPSocketCocoa::sendTo(uint64_t a1, const void *a2, size_t a3)
{
  if (a3 >= 0xFFFF)
  {
LABEL_22:
    uint64_t result = 0;
    uint64_t v36 = 0;
    return result;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    unint64_t v17 = a3 + 2;
    uint64_t v18 = (unsigned char *)WTF::fastMalloc((WTF *)(a3 + 2));
    LODWORD(v36) = v17;
    std::string::size_type v35 = v18;
    *uint64_t v18 = BYTE1(a3);
    v18[1] = a3;
    HIDWORD(v36) = 2;
    if (a3)
    {
      if (v17 > v36)
      {
        unint64_t v20 = v36 + ((unint64_t)v36 >> 2);
        if (v20 >= 0x10) {
          unint64_t v21 = v20 + 1;
        }
        else {
          unint64_t v21 = 16;
        }
        if (v21 <= v17) {
          v22 = (WTF::FastMalloc *)(a3 + 2);
        }
        else {
          v22 = (WTF::FastMalloc *)v21;
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v35, v22);
        uint64_t v19 = HIDWORD(v36);
        if (v17 < HIDWORD(v36))
        {
          __break(0xC471u);
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v19 = 2;
      }
      memcpy(&v35[v19], a2, a3);
    }
    else
    {
      LODWORD(v17) = 2;
    }
LABEL_38:
    v23 = *(NSObject **)(a1 + 40);
    v24 = v35;
    std::string::size_type v35 = 0;
    uint64_t v36 = 0;
    WTF::fastFree(0, v6);
    uint64_t destructor = MEMORY[0x1E4F143A8];
    v38 = (WTF *)3221225472;
    v39[0] = ___ZN6WebKitL14dataFromVectorEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke;
    v39[1] = &__block_descriptor_40_e5_v8__0l;
    v39[2] = v24;
    int v25 = dispatch_data_create(v24, v17, MEMORY[0x1E4F14428], &destructor);
    uint64_t v32 = *(void *)(a1 + 16);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v33, *(atomic_uchar *volatile **)(a1 + 32));
    rtc::PacketOptions::PacketOptions();
    std::string::size_type v26 = (WTF *)v33;
    v33 = 0;
    uint64_t destructor = v32;
    v38 = v26;
    rtc::PacketOptions::PacketOptions();
    v27 = malloc_type_malloc(0xA0uLL, 0x10F0040BEB60112uLL);
    void *v27 = MEMORY[0x1E4F14398];
    v27[1] = 50331650;
    v27[2] = WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
    v27[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::descriptor;
    v28 = v38;
    v38 = 0;
    v27[4] = destructor;
    v27[5] = v28;
    rtc::PacketOptions::PacketOptions();
    v29 = *MEMORY[0x1E4F38C58];
    rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)v39);
    v30 = (atomic_uchar **)v38;
    v38 = 0;
    if (v30) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v30);
    }
    nw_connection_send(v23, v25, v29, 1, v27);
    _Block_release(v27);
    rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v34);
    uint64_t v31 = (atomic_uchar **)v33;
    v33 = 0;
    if (v31) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v31);
    }
    if (v25) {
      CFRelease(v25);
    }
    goto LABEL_44;
  }
  WebCore::WebRTC::getSTUNOrTURNMessageLengths();
  if (LOBYTE(v39[0]))
  {
    std::string::size_type v35 = 0;
    uint64_t v36 = 0;
    if ((unint64_t)v38 >= a3)
    {
      if (!v38)
      {
        uint64_t v7 = 0;
        if (a3) {
          goto LABEL_8;
        }
        goto LABEL_47;
      }
      if (!((unint64_t)v38 >> 32))
      {
        uint64_t v7 = (unsigned char *)WTF::fastMalloc(v38);
        LODWORD(v36) = v38;
        std::string::size_type v35 = v7;
        if (a3)
        {
LABEL_8:
          memcpy(v7, a2, a3);
          HIDWORD(v36) = a3;
          unsigned int v8 = a3;
LABEL_9:
          uint64_t v9 = -1;
          while (++v9 < (unint64_t)v38 - a3)
          {
            unint64_t v10 = v8;
            if (v8 == v36)
            {
              unint64_t v11 = v8 + 1;
              unint64_t v12 = v10 + (v10 >> 2);
              if (v12 >= 0x10) {
                unint64_t v13 = v12 + 1;
              }
              else {
                unint64_t v13 = 16;
              }
              if (v13 <= v11) {
                uint64_t v14 = (WTF::FastMalloc *)(v10 + 1);
              }
              else {
                uint64_t v14 = (WTF::FastMalloc *)v13;
              }
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v35, v14);
              v15 = &v35[HIDWORD(v36)];
            }
            else
            {
              v15 = &v35[v8];
            }
            unsigned char *v15 = 0;
            unsigned int v8 = ++HIDWORD(v36);
            if (!LOBYTE(v39[0]))
            {
              __break(1u);
              goto LABEL_22;
            }
          }
          LODWORD(v17) = HIDWORD(v36);
          if (!HIDWORD(v36)) {
            goto LABEL_44;
          }
          goto LABEL_38;
        }
LABEL_47:
        unsigned int v8 = 0;
        goto LABEL_9;
      }
      __break(0xC471u);
LABEL_51:
      JUMPOUT(0x198A7B65CLL);
    }
  }
  else
  {
    std::string::size_type v35 = 0;
    uint64_t v36 = 0;
  }
LABEL_44:
  uint64_t result = (WTF *)v35;
  if (v35)
  {
    std::string::size_type v35 = 0;
    LODWORD(v36) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

void sub_198A7B668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,uint64_t a28)
{
}

void WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(uint64_t a1, WTF::URL *a2, uint64_t a3, uint64_t a4, int a5, WebKit *a6, uint64_t *a7)
{
  int v14 = WTF::URL::protocolIs();
  int v15 = WTF::URL::port(a2);
  if (v14) {
    __int16 v16 = 443;
  }
  else {
    __int16 v16 = 80;
  }
  if ((v15 & 0xFF0000) != 0) {
    unsigned __int16 v17 = v15;
  }
  else {
    unsigned __int16 v17 = v16;
  }
  WTF::URL::host(a2);
  if ((v18 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  WTF::String::utf8();
  if (v29) {
    uint64_t v19 = (char *)v29 + 16;
  }
  else {
    uint64_t v19 = 0;
  }
  WTF::String::number((WTF::String *)v17);
  WTF::String::utf8();
  if (v27) {
    unint64_t v20 = (char *)v27 + 16;
  }
  else {
    unint64_t v20 = 0;
  }
  WebKit::createNWConnection(&connection, a1, v19, v20, v14, a3, a4, a5, a6);
  if (v27)
  {
    if (*(_DWORD *)v27 == 1) {
      WTF::fastFree(v27, v21);
    }
    else {
      --*(_DWORD *)v27;
    }
  }
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 1) {
      WTF::fastFree(v29, v21);
    }
    else {
      --*(_DWORD *)v29;
    }
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v21);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v22 = *a7;
  *a7 = 0;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  v23 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v23 = &unk_1EE9BD670;
  v23[1] = v22;
  v23[2] = a1;
  v24 = connection;
  if (qword_1EB358EB0 != -1) {
    dispatch_once(&qword_1EB358EB0, &__block_literal_global_105);
  }
  nw_connection_set_queue(v24, (dispatch_queue_t)qword_1EB358EA8);
  if (v24) {
    CFRetain(v24);
  }
  int v25 = malloc_type_malloc(0x30uLL, 0x10E0040672CDC46uLL);
  void *v25 = MEMORY[0x1E4F14398];
  v25[1] = 50331650;
  v25[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v25[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::descriptor;
  v25[4] = v23;
  v25[5] = v24;
  nw_connection_set_state_changed_handler(v24, v25);
  _Block_release(v25);
  nw_connection_start(v24);
  if (v24) {
    CFRelease(v24);
  }
}

void sub_198A7BA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, WTF::StringImpl *a12, WTF *a13, CFTypeRef cf)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void *WebKit::NetworkRTCUDPSocketCocoa::NetworkRTCUDPSocketCocoa(void *a1, uint64_t a2, uint64_t a3, nw_listener_t a4, uint64_t *a5, uint64_t *a6, char a7, char a8, WebKit *a9)
{
  uint64_t v14 = a3;
  *a1 = &unk_1EE9BD2B8;
  a1[1] = a3;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 28), 1u);
  a1[2] = a2;
  uint64_t v17 = WTF::fastMalloc((WTF *)0xC0);
  uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_1994F5F10;
  *(void *)(v18 + 24) = v17;
  *(void *)uint64_t v17 = v18;
  *(void *)(v17 + 8) = a2;
  uint64_t v19 = *a5;
  *a5 = 0;
  *(void *)(v17 + 16) = v19;
  *(unsigned char *)(v17 + 24) = a7;
  *(unsigned char *)(v17 + 25) = WebKit::isKnownTracker(a9, v20);
  *(unsigned char *)(v17 + 26) = a8;
  uint64_t v21 = *(void *)(v14 + 152);
  if (v21) {
    uint64_t v22 = (const char *)(v21 + 16);
  }
  else {
    uint64_t v22 = 0;
  }
  WTF::CString::CString((WTF::CString *)(v17 + 32), v22);
  long long v23 = *(_OWORD *)(v14 + 112);
  long long v24 = *(_OWORD *)(v14 + 128);
  *(_DWORD *)(v17 + 72) = *(_DWORD *)(v14 + 144);
  *(_OWORD *)(v17 + 56) = v24;
  *(_OWORD *)(v17 + 40) = v23;
  uint64_t v25 = *a6;
  *a6 = 0;
  *(void *)(v17 + 80) = v25;
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(v17 + 88));
  *(void *)(v17 + 160) = 0;
  *(_WORD *)(v17 + 168) = 0;
  *(void *)(v17 + 176) = 0;
  *(unsigned char *)(v17 + 184) = 0;
  *(unsigned char *)(v17 + 188) = 0;
  secure_udp = nw_parameters_create_secure_udp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C90], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C88]);
  v27 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)a4);
  if (rtc::IPAddress::IsNil(v27))
  {
    if (SHIBYTE(a4[2].isa) < 0) {
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)a4->isa, (std::string::size_type)a4[1].isa);
    }
    else {
      std::string v56 = *(std::string *)&a4->isa;
    }
  }
  else
  {
    if (*(_DWORD *)(rtc::SocketAddress::ipaddr((rtc::SocketAddress *)a4) + 8) != 2) {
      goto LABEL_18;
    }
    v57 = 0;
    if (getifaddrs(&v57)) {
      goto LABEL_9;
    }
    v28 = v57;
    if (!v57) {
      goto LABEL_18;
    }
    v51 = v57;
    while (1)
    {
      ifa_addr = v28->ifa_addr;
      if (ifa_addr->sa_family == 2)
      {
        __p = &unk_1EE9BD6E8;
        *(_DWORD *)v53 = 2;
        *(void *)&v53[4] = 0;
        *(void *)&v53[12] = 0;
        *(_DWORD *)&v53[4] = *(_DWORD *)&ifa_addr->sa_data[2];
        if (!rtc::IPAddress::operator!=()) {
          break;
        }
      }
      v28 = v28->ifa_next;
      if (!v28)
      {
        MEMORY[0x199740C10](v51, 0x10B0C40815C8216);
        goto LABEL_18;
      }
    }
    if_nametoindex(v28->ifa_name);
    char does_interface_index_support_nat64 = nw_nat64_does_interface_index_support_nat64();
    MEMORY[0x199740C10](v51, 0x10B0C40815C8216);
    if (does_interface_index_support_nat64)
    {
LABEL_9:
      std::string::basic_string[abi:sn180100]<0>(&v56.__r_.__value_.__l.__data_, "0.0.0.0");
    }
    else
    {
LABEL_18:
      uint64_t v31 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)a4);
      rtc::IPAddress::ToString((uint64_t *)&v56, v31);
    }
  }
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
  hostname = nw_endpoint_get_hostname(host_with_numeric_port);
  if (!hostname)
  {
    __break(1u);
LABEL_50:
    dispatch_once(&qword_1EB358EC0, &__block_literal_global_112);
    goto LABEL_32;
  }
  strlen(hostname);
  nw_endpoint_get_port(host_with_numeric_port);
  rtc::SocketAddress::SocketAddress();
  rtc::SocketAddress::operator=();
  if ((v53[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
  nw_parameters_set_local_endpoint(secure_udp, host_with_numeric_port);
  if (host_with_numeric_port) {
    CFRelease(host_with_numeric_port);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (LODWORD(a4[4].isa) == 2) {
    nw_ip_version_t v34 = nw_ip_version_4;
  }
  else {
    nw_ip_version_t v34 = nw_ip_version_6;
  }
  WebKit::NetworkRTCUDPSocketCocoaConnections::configureParameters(v17, secure_udp, v34);
  a4 = nw_listener_create(secure_udp);
  std::string::size_type v35 = *(const void **)(v17 + 160);
  *(void *)(v17 + 160) = a4;
  if (v35)
  {
    CFRelease(v35);
    a4 = *(nw_listener_t *)(v17 + 160);
  }
  if (qword_1EB358EC0 != -1) {
    goto LABEL_50;
  }
LABEL_32:
  nw_listener_set_queue(a4, (dispatch_queue_t)qword_1EB358EB8);
  uint64_t v36 = *(NSObject **)(v17 + 160);
  if (v36) {
    CFRetain(v36);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v53, *(atomic_uchar *volatile **)(v17 + 16));
  atomic_fetch_add((atomic_uint *volatile)(v14 + 24), 1u);
  *(void *)&v53[8] = v14;
  uint64_t v37 = *(void *)(v17 + 8);
  *(void *)&v53[16] = v37;
  if (*(void *)v17)
  {
    v38 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(atomic_uchar **)v17);
    uint64_t v14 = *(void *)&v53[8];
    uint64_t v37 = *(void *)&v53[16];
  }
  else
  {
    v38 = 0;
  }
  uint64_t v39 = *(void *)v53;
  *(void *)v53 = 0;
  *(void *)&v53[8] = 0;
  __int16 v54 = 0;
  uint64_t v55 = 0;
  v40 = malloc_type_malloc(0x50uLL, 0x10E00408B166D2BuLL);
  void *v40 = MEMORY[0x1E4F14398];
  v40[1] = 50331650;
  v40[2] = WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::{lambda(void *,nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v40[3] = &WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::descriptor;
  v40[4] = v36;
  v40[5] = v39;
  v40[6] = v14;
  v40[7] = v37;
  v40[8] = v38;
  v40[9] = v17;
  nw_listener_set_state_changed_handler(v36, v40);
  _Block_release(v40);
  std::string::size_type v42 = v54;
  __int16 v54 = 0;
  if (v42) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v42, v41);
  }
  uint64_t v43 = *(void *)&v53[8];
  *(void *)&v53[8] = 0;
  if (v43) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v43 + 24));
  }
  uint64_t v44 = *(atomic_uchar ***)v53;
  *(void *)v53 = 0;
  if (v44) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v44);
  }
  char v45 = 0;
  uint64_t v46 = *(NSObject **)(v17 + 160);
  std::string::size_type v47 = *(atomic_uchar **)v17;
  int v48 = 1;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v17, (unsigned __int8 *)&v45, 1u, memory_order_acquire, memory_order_acquire);
  if (v45) {
    MEMORY[0x19972E8D0](v47);
  }
  ++*((void *)v47 + 1);
  atomic_compare_exchange_strong_explicit(v47, (unsigned __int8 *)&v48, 0, memory_order_release, memory_order_relaxed);
  if (v48 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v47);
  }
  v49 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v49 = MEMORY[0x1E4F14398];
  v49[1] = 50331650;
  v49[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::{lambda(void *,NSObject  {objcproto16OS_nw_connection}*)#1}::__invoke;
  v49[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::descriptor;
  v49[4] = v17;
  nw_listener_set_new_connection_handler(v46, v49);
  _Block_release(v49);
  nw_listener_start(*(nw_listener_t *)(v17 + 160));
  if (secure_udp) {
    CFRelease(secure_udp);
  }
  a1[3] = v17;
  return a1;
}

uint64_t sub_198A7C118(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF **a10, void **a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, WTF::ThreadSafeWeakPtrControlBlock *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v30 = *(void *)(v27 + 176);
  if (v30) {
    WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(v30, a2);
  }
  uint64_t v31 = *(const void **)(v27 + 160);
  *(void *)(v27 + 160) = 0;
  if (v31) {
    CFRelease(v31);
  }
  if (*(char *)(v27 + 111) < 0) {
    operator delete(*a11);
  }
  uint64_t v32 = *(WTF::StringImpl **)(v27 + 80);
  *(void *)(v27 + 80) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  v33 = *a10;
  *a10 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1) {
      WTF::fastFree(v33, a2);
    }
    else {
      --*(_DWORD *)v33;
    }
  }
  nw_ip_version_t v34 = *(atomic_uchar ***)(v27 + 16);
  *(void *)(v27 + 16) = 0;
  if (v34) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v34);
  }
  WTF::fastFree((WTF *)v27, a2);
  uint64_t v35 = *(void *)(v26 + 8);
  *(void *)(v26 + 8) = 0;
  if (!v35) {
LABEL_22:
  }
    _Unwind_Resume(a1);
  uint64_t v36 = (atomic_uint *)(v35 + 28);
  if (atomic_load((unsigned int *)v36))
  {
    atomic_fetch_add(v36, 0xFFFFFFFF);
    goto LABEL_22;
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

void WebKit::NetworkRTCUDPSocketCocoa::~NetworkRTCUDPSocketCocoa(WebKit::NetworkRTCUDPSocketCocoa *this, void *a2)
{
  uint64_t v3 = (atomic_uchar **)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    uint64_t v5 = (atomic_uint *)(v4 + 28);
    if (atomic_load((unsigned int *)v5)) {
      atomic_fetch_add(v5, 0xFFFFFFFF);
    }
    else {
      __break(0xC471u);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkRTCUDPSocketCocoa::~NetworkRTCUDPSocketCocoa(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::NetworkRTCUDPSocketCocoa::close(WebKit::NetworkRTCUDPSocketCocoa *this)
{
  char v2 = 0;
  uint64_t v3 = *((void *)this + 3);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 168), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](v3 + 168);
  }
  *(unsigned char *)(v3 + 169) = 1;
  uint64_t v5 = WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::begin(*(void *)(v3 + 176));
  uint64_t v6 = v4;
  uint64_t v7 = *(void *)(v3 + 176);
  if (v7) {
    uint64_t v8 = v7 + 88 * *(unsigned int *)(v7 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v5)
  {
    do
    {
      uint64_t v9 = *(NSObject **)(v5 + 72);
      *(unsigned char *)(*(void *)(v5 + 80) + 4) = 1;
      nw_connection_cancel(v9);
      while (1)
      {
        v5 += 88;
        if ((void *)v5 == v6) {
          break;
        }
        int v10 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
        if (*(_DWORD *)(v5 + 60) == 0x80000000) {
          int v11 = 1;
        }
        else {
          int v11 = v10;
        }
        if (v11 != 1) {
          goto LABEL_15;
        }
      }
      uint64_t v5 = (uint64_t)v6;
LABEL_15:
      ;
    }
    while (v5 != v8);
    uint64_t v7 = *(void *)(v3 + 176);
  }
  if (v7)
  {
    *(void *)(v3 + 176) = 0;
    WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(v7, v4);
  }
  nw_listener_cancel(*(nw_listener_t *)(v3 + 160));
  unint64_t v12 = *(const void **)(v3 + 160);
  *(void *)(v3 + 160) = 0;
  if (v12) {
    CFRelease(v12);
  }
  int v13 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 168), (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 168));
  }
  uint64_t v14 = *((void *)this + 1);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 24), 1u);
  WebKit::NetworkRTCProvider::takeSocket((uint64_t *)v14, *((void *)this + 2), (uint64_t *)&v16);
  uint64_t result = v16;
  if (v16) {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v16 + 8))(v16);
  }
  if (v14)
  {
    return WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 24));
  }
  return result;
}

void sub_198A7C5C0(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkRTCUDPSocketCocoa::setOption(WebKit::NetworkRTCUDPSocketCocoa *this, int a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 != 5) {
    return;
  }
  int v3 = a3;
  uint64_t v4 = *((void *)this + 3);
  if (a3 <= 33)
  {
    if (!a3)
    {
      int v5 = 0;
      goto LABEL_12;
    }
    if (a3 == 8)
    {
      int v5 = 0;
      int v3 = 100;
      goto LABEL_12;
    }
LABEL_29:
    __int16 v16 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      v17[0] = 67109120;
      v17[1] = v3;
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections has an unexpected DSCP value %d", (uint8_t *)v17, 8u);
    }
    return;
  }
  if (a3 == 34 || a3 == 36)
  {
    int v5 = 512;
    int v3 = 188;
    goto LABEL_12;
  }
  if (a3 != 46) {
    goto LABEL_29;
  }
  int v5 = 768;
  int v3 = 32;
LABEL_12:
  char v6 = 0;
  *(_DWORD *)(v4 + 184) = v5 | v3;
  *(unsigned char *)(v4 + 188) = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 168), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v7 = WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::begin(*(void *)(v4 + 176));
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v4 + 176);
    uint64_t v12 = v11 ? v11 + 88 * *(unsigned int *)(v11 - 4) : 0;
    if (v12 == v7) {
      break;
    }
    while (*(unsigned char *)(v4 + 188))
    {
      nw_connection_reset_traffic_class();
      while (1)
      {
        v8 += 88;
        if (v8 == v10) {
          break;
        }
        int v13 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
        if (*(_DWORD *)(v8 + 60) == 0x80000000) {
          int v14 = 1;
        }
        else {
          int v14 = v13;
        }
        if (v14 != 1) {
          goto LABEL_26;
        }
      }
      uint64_t v8 = v10;
LABEL_26:
      if (v8 == v12) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_32:
    MEMORY[0x19972E8D0](v4 + 168);
  }
LABEL_27:
  int v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 168), (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 168));
  }
}

void sub_198A7C814(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkRTCUDPSocketCocoa::sendTo(uint64_t a1, const void *a2, size_t a3, rtc::SocketAddress *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)__p);
  if (rtc::SocketAddress::operator==())
  {
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    return;
  }
  int v6 = *((_DWORD *)a4 + 15);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v6 != 0x80000000)
  {
    char v7 = 0;
    int v48 = (WTF::Lock *)(v5 + 168);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 168), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v48);
    }
    uint64_t v8 = *(void *)(v5 + 176);
    v49 = (uint64_t *)(v5 + 176);
    if (v8
      || (WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand((uint64_t *)(v5 + 176), 0), (uint64_t v8 = *v49) != 0))
    {
      int v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      int v9 = 0;
    }
    unsigned int v10 = rtc::SocketAddress::Hash(a4);
    uint64_t v11 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v13 = v10 & v9;
      uint64_t v14 = v8 + 88 * (v10 & v9);
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>()) {
        break;
      }
      if (WTF::DefaultHash<rtc::SocketAddress>::equal((rtc::SocketAddress *)(v8 + 88 * v13), a4)) {
        goto LABEL_68;
      }
      if (*(_DWORD *)(v14 + 60) == 0x80000000) {
        uint64_t v11 = (rtc::SocketAddress *)(v8 + 88 * v13);
      }
      unsigned int v10 = i + v13;
    }
    if (v11)
    {
      rtc::SocketAddress::SocketAddress(v11);
      *((void *)v11 + 9) = 0;
      *((void *)v11 + 10) = 0;
      --*(_DWORD *)(*v49 - 16);
      uint64_t v14 = (uint64_t)v11;
    }
    rtc::SocketAddress::operator=();
    secure_udp = nw_parameters_create_secure_udp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C90], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C88]);
    __int16 v16 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)(v5 + 88));
    rtc::IPAddress::ToString((uint64_t *)__p, v16);
    uint64_t v17 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)(v5 + 88));
    if (rtc::IPAddress::IsNil(v17)) {
      std::string::operator=(__p, (const std::string *)(v5 + 88));
    }
    nw_parameters_allow_sharing_port_with_listener();
    rtc::SocketAddress::port((rtc::SocketAddress *)(v5 + 88));
    host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
    nw_parameters_set_local_endpoint(secure_udp, host_with_numeric_port);
    if (host_with_numeric_port) {
      CFRelease(host_with_numeric_port);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (*((_DWORD *)a4 + 8) == 2) {
      nw_ip_version_t v19 = nw_ip_version_4;
    }
    else {
      nw_ip_version_t v19 = nw_ip_version_6;
    }
    WebKit::NetworkRTCUDPSocketCocoaConnections::configureParameters(v5, secure_udp, v19);
    if (*(unsigned char *)(v5 + 188)) {
      nw_parameters_set_traffic_class();
    }
    unint64_t v20 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr(a4);
    rtc::IPAddress::ToString((uint64_t *)__p, v20);
    uint64_t v21 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr(a4);
    if (rtc::IPAddress::IsNil(v21)) {
      std::string::operator=(__p, (const std::string *)a4);
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = __p;
    }
    else {
      uint64_t v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    long long v23 = (WTF::String *)rtc::SocketAddress::port(a4);
    WTF::String::number(v23);
    WTF::String::utf8();
    if (v52) {
      long long v24 = (char *)v52 + 16;
    }
    else {
      long long v24 = 0;
    }
    host = nw_endpoint_create_host((const char *)v22, v24);
    if (v52)
    {
      if (*(_DWORD *)v52 == 1) {
        WTF::fastFree(v52, v25);
      }
      else {
        --*(_DWORD *)v52;
      }
    }
    uint64_t v27 = v57;
    v57 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    v28 = nw_connection_create(host, secure_udp);
    v29 = (atomic_uint *)WTF::fastMalloc((WTF *)8);
    *(void *)v29 = 1;
    WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(v5, v28, v29, a4);
    if (host) {
      CFRelease(host);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (secure_udp) {
      CFRelease(secure_udp);
    }
    uint64_t v31 = *(const void **)(v14 + 72);
    *(void *)(v14 + 72) = v28;
    if (v31) {
      CFRelease(v31);
    }
    uint64_t v32 = *(unsigned int **)(v14 + 80);
    *(void *)(v14 + 80) = v29;
    if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v30);
    }
    uint64_t v33 = *v49;
    if (*v49) {
      int v34 = *(_DWORD *)(v33 - 12) + 1;
    }
    else {
      int v34 = 1;
    }
    *(_DWORD *)(v33 - 12) = v34;
    uint64_t v35 = *v49;
    if (*v49) {
      int v36 = *(_DWORD *)(v35 - 12);
    }
    else {
      int v36 = 0;
    }
    uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
    unint64_t v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37) {
        goto LABEL_68;
      }
    }
    else if (3 * v38 > 4 * v37)
    {
LABEL_68:
      uint64_t v39 = *(NSObject **)(v14 + 72);
      int v40 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v48, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
      if (v40 != 1) {
        WTF::Lock::unlockSlow(v48);
      }
      v41 = dispatch_data_create(a2, a3, 0, 0);
      v53 = *(WTF **)(v5 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, *(atomic_uchar *volatile **)(v5 + 16));
      rtc::PacketOptions::PacketOptions();
      std::string::size_type v42 = v54;
      __int16 v54 = 0;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v42;
      rtc::PacketOptions::PacketOptions();
      uint64_t v43 = malloc_type_malloc(0xA0uLL, 0x10F0040BEB60112uLL);
      void *v43 = MEMORY[0x1E4F14398];
      v43[1] = 50331650;
      v43[2] = WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
      v43[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::descriptor;
      std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
      __p[0].__r_.__value_.__l.__size_ = 0;
      v43[4] = __p[0].__r_.__value_.__r.__words[0];
      v43[5] = size;
      rtc::PacketOptions::PacketOptions();
      char v45 = *MEMORY[0x1E4F38C58];
      rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&__p[0].__r_.__value_.__r.__words[2]);
      uint64_t v46 = (atomic_uchar **)__p[0].__r_.__value_.__l.__size_;
      __p[0].__r_.__value_.__l.__size_ = 0;
      if (v46) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v46);
      }
      nw_connection_send(v39, v41, v45, 1, v43);
      _Block_release(v43);
      rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v55);
      std::string::size_type v47 = (atomic_uchar **)v54;
      __int16 v54 = 0;
      if (v47) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v47);
      }
      if (v41) {
        CFRelease(v41);
      }
      return;
    }
    uint64_t v14 = WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand(v49, v14);
    goto LABEL_68;
  }
}

void sub_198A7CDD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (atomic_fetch_add((atomic_uint *volatile)v38, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v38);
    WTF::fastFree((WTF *)v38, a2);
    if (!v36)
    {
LABEL_3:
      if (!v39)
      {
LABEL_8:
        if (a36 < 0) {
          operator delete(__p);
        }
        if (v37) {
          CFRelease(v37);
        }
        int v41 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a10, (unsigned __int8 *)&v41, 0, memory_order_release, memory_order_relaxed);
        if (v41 != 1) {
          WTF::Lock::unlockSlow(a10);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      CFRelease(v39);
      goto LABEL_8;
    }
  }
  else if (!v36)
  {
    goto LABEL_3;
  }
  CFRelease(v36);
  if (!v39) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void WebKit::NetworkRTCUDPSocketCocoaConnections::configureParameters(uint64_t a1, nw_parameters_t parameters, nw_ip_version_t a3)
{
  int v6 = nw_parameters_copy_default_protocol_stack(parameters);
  char v7 = nw_protocol_stack_copy_internet_protocol(v6);
  nw_ip_options_set_version(v7, a3);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    int v9 = (unsigned char *)(v8 + 16);
  }
  else {
    int v9 = 0;
  }
  long long v10 = *(_OWORD *)(a1 + 56);
  v11[0] = *(_OWORD *)(a1 + 40);
  v11[1] = v10;
  int v12 = *(_DWORD *)(a1 + 72);
  WebKit::setNWParametersApplicationIdentifiers((uint64_t)parameters, v9, (uint64_t)v11, a1 + 80);
  WebKit::setNWParametersTrackerOptions((uint64_t)parameters, *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
  nw_parameters_set_reuse_local_address(parameters, 1);
  if (v7) {
    CFRelease(v7);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_198A7D0A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(uint64_t a1, nw_connection_t connection, atomic_uint *a3, rtc::SocketAddress *a4)
{
  if (qword_1EB358EC0 != -1) {
    dispatch_once(&qword_1EB358EC0, &__block_literal_global_112);
  }
  nw_connection_set_queue(connection, (dispatch_queue_t)qword_1EB358EB8);
  atomic_fetch_add(a3, 1u);
  uint64_t v8 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v8 = MEMORY[0x1E4F14398];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::descriptor;
  v8[4] = a3;
  nw_connection_set_state_changed_handler(connection, v8);
  _Block_release(v8);
  uint64_t v22 = connection;
  if (connection) {
    CFRetain(connection);
  }
  atomic_fetch_add(a3, 1u);
  uint64_t v21 = (WTF *)a3;
  uint64_t v15 = *(void *)(a1 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, *(atomic_uchar *volatile **)(a1 + 16));
  uint64_t v9 = rtc::SocketAddress::ipaddr(a4);
  v16[1] = (atomic_uchar *volatile *)&unk_1EE9BD6E8;
  int v17 = *(_DWORD *)(v9 + 8);
  long long v18 = *(_OWORD *)(v9 + 12);
  __int16 v19 = rtc::SocketAddress::port(a4);
  uint64_t v10 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v10 = &unk_1EE9BD6C0;
  *(void *)(v10 + 8) = v15;
  uint64_t v11 = v16[0];
  v16[0] = 0;
  *(void *)(v10 + 16) = v11;
  *(void *)(v10 + 24) = &unk_1EE9BD6E8;
  *(_DWORD *)(v10 + 32) = v17;
  *(_OWORD *)(v10 + 36) = v18;
  *(_WORD *)(v10 + 56) = v19;
  uint64_t v20 = v10;
  WebKit::processUDPData(&v22, (uint64_t *)&v21, 0, &v20);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  unsigned int v13 = (atomic_uchar **)v16[0];
  v16[0] = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v13);
  }
  uint64_t v14 = (unsigned int *)v21;
  uint64_t v21 = 0;
  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v12);
  }
  if (v22) {
    CFRelease(v22);
  }
  nw_connection_start(connection);
}

void sub_198A7D340(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a10);
  }
  if (a17 && atomic_fetch_add((atomic_uint *volatile)a17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a17);
    WTF::fastFree(a17, a2);
  }
  __int16 v19 = *(const void **)(v17 - 56);
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::processUDPData(NSObject **a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v5 = *a1;
  *a1 = 0;
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = malloc_type_malloc(0x40uLL, 0x10E00404635C6F6uLL);
  *uint64_t v8 = MEMORY[0x1E4F14398];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::descriptor;
  v8[4] = v5;
  v8[5] = v6;
  *((_DWORD *)v8 + 12) = a3;
  v8[7] = v7;
  nw_connection_receive(v5, 1u, 0xFFFFFFFF, v8);

  _Block_release(v8);
}

void sub_198A7D4E8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void *WebKit::NetworkTransportBidirectionalStream::NetworkTransportBidirectionalStream(void *a1, uint64_t a2, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  WebKit::NetworkTransportReceiveStream::NetworkTransportReceiveStream((WebKit::NetworkTransportReceiveStream *)(a1 + 1), a2, cf);
  return a1;
}

void sub_198A7D5B8(_Unwind_Exception *exception_object)
{
  int v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

WebKit::NetworkTransportReceiveStream *WebKit::NetworkTransportReceiveStream::NetworkTransportReceiveStream(WebKit::NetworkTransportReceiveStream *a1, uint64_t a2, const void *a3)
{
  *(_DWORD *)a1 = 1;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v6 = *(atomic_uint **)(a2 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *((void *)a1 + 3) = v6;
  *((void *)a1 + 4) = a3;
  if (a3) {
    CFRetain(a3);
  }
  WebKit::NetworkTransportReceiveStream::receiveLoop(a1);
  return a1;
}

void sub_198A7D660(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(unsigned int **)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkTransportReceiveStream::receiveLoop(WebKit::NetworkTransportReceiveStream *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    goto LABEL_6;
  }
  uint64_t v2 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v2 = 1;
  *(void *)(v2 + 8) = this;
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = v2;
  if (!v5) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  uint64_t v6 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v6 = MEMORY[0x1E4F14398];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0>(WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0)::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0>(WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0)::descriptor;
  v6[4] = v2;
  nw_connection_receive(v1, 1u, 0xFFFFFFFF, v6);

  _Block_release(v6);
}

void sub_198A7D7D0(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::type(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  return 1;
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::identifier(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  return *((void *)this + 2);
}

uint64_t WebKit::NetworkRTCUDPSocketCocoa::type(WebKit::NetworkRTCUDPSocketCocoa *this)
{
  return 0;
}

uint64_t WebKit::NetworkRTCUDPSocketCocoa::identifier(WebKit::NetworkRTCUDPSocketCocoa *this)
{
  return *((void *)this + 2);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_13;
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  size_t v9 = __sz + 1;
  if (v5 <= (std::string *)__s && (char *)v5 + v9 > __s)
  {
    __break(1u);
LABEL_13:
    abort();
  }

  memmove(v5, __s, v9);
}

void ___ZN6WebKitL18createNWConnectionERNS_18NetworkRTCProviderEPKcS3_bRKN3WTF6StringEbbRKN7WebCore17RegistrableDomainE_block_invoke(int a1, nw_protocol_options_t options)
{
}

dispatch_queue_t ___ZN6WebKitL14tcpSocketQueueEv_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("WebRTC TCP socket queue", MEMORY[0x1E4F14430]);
  qword_1EB358EA8 = (uint64_t)result;
  return result;
}

unsigned int *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar **)a1[7];
  a1[7] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  }
  dispatch_queue_t result = (unsigned int *)a1[4];
  a1[4] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

WTF *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(WTF *result, int a2)
{
  uint64_t v2 = result;
  if (a2 == 4)
  {
    uint64_t v19 = *((void *)result + 6);
    atomic_fetch_add((atomic_uint *volatile)(v19 + 24), 1u);
    uint64_t v20 = *((void *)result + 5);
    uint64_t v21 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v21 = &unk_1EE9BD388;
    *((void *)v21 + nw_tcp_options_set_no_delay(options, 1) = v19;
    *((void *)v21 + 2) = v20;
    long long v24 = v21;
    (*(void (**)(void, WTF **))(**(void **)(v19 + 160) + 32))(*(void *)(v19 + 160), &v24);
    uint64_t v22 = v24;
    long long v24 = 0;
    if (v22) {
      (*(void (**)(WTF *))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = *((void *)v2 + 7);
    LODWORD(v27) = -1;
    long long v24 = (WTF *)((char *)v2 + 40);
    uint64_t v25 = (uint64_t *)&v27;
    return (WTF *)IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v23, (uint64_t)&v24, 0, 0, 0);
  }
  else if (a2 == 3)
  {
    uint64_t v3 = *((void *)result + 6);
    uint64_t v4 = (atomic_uint *)*((void *)result + 4);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    long long v24 = (WTF *)v4;
    uint64_t v5 = (uint64_t *)((char *)result + 56);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v25, (uint64_t **)result + 7);
    uint64_t v7 = *((void *)v2 + 5);
    std::string::size_type v6 = (uint64_t *)((char *)v2 + 40);
    uint64_t v26 = v7;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v8 = &unk_1EE9BD360;
    v8[1] = v24;
    size_t v9 = v25;
    long long v24 = 0;
    uint64_t v25 = 0;
    v8[2] = v9;
    v8[3] = v26;
    uint64_t v27 = v8;
    (*(void (**)(void, void **))(**(void **)(v3 + 160) + 32))(*(void *)(v3 + 160), &v27);
    uint64_t v11 = v27;
    uint64_t v27 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    int v12 = (atomic_uchar **)v25;
    uint64_t v25 = 0;
    if (v12) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v12);
    }
    unsigned int v13 = (unsigned int *)v24;
    long long v24 = 0;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v10);
    }
    uint64_t v14 = *v5;
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 140;
    *((void *)v15 + nw_tcp_options_set_no_delay(options, 1) = 0;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    long long v24 = v15;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, v6);
    IPC::Connection::sendMessageImpl(v14, (uint64_t *)&v24, 0, 0);
    dispatch_queue_t result = v24;
    long long v24 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (WTF *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

void sub_198A7DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 139;
  *((void *)v10 + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, *(uint64_t **)a2);
  IPC::Encoder::operator<<<int>(v10, *(int **)(a2 + 8));
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unsigned int v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void sub_198A7DD8C(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BD360;
  uint64_t v3 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD360;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      nw_path_t v4 = nw_connection_copy_current_path(*(nw_connection_t *)(v2 + 40));
      uint64_t v5 = nw_path_copy_interface();
      name = nw_interface_get_name(v5);
      if (name)
      {
        uint64_t v7 = a1[2];
        strlen(name);
        WTF::String::fromUTF8();
        uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v8 = 143;
        *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = 0;
        *((void *)v8 + 66) = (char *)v8 + 16;
        *((void *)v8 + 67) = 512;
        *((void *)v8 + 68) = 0;
        *((void *)v8 + 70) = 0;
        *((void *)v8 + 69) = 0;
        IPC::Encoder::encodeHeader(v8);
        uint64_t v15 = v8;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, a1 + 3);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)&v14);
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v15, 0, 0);
        uint64_t v10 = v15;
        uint64_t v15 = 0;
        if (v10)
        {
          IPC::Encoder::~Encoder(v10, v9);
          WTF::fastFree(v12, v13);
        }
        uint64_t v11 = v14;
        uint64_t v14 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
            if (!v5)
            {
LABEL_11:
              if (v4) {
                CFRelease(v4);
              }
              return;
            }
LABEL_10:
            CFRelease(v5);
            goto LABEL_11;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
}

void sub_198A7DFF4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  IPC::Encoder::~Encoder(v11, a2);
  WTF::fastFree(v13, v14);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v15);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BD388;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BD388;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return WebKit::NetworkRTCProvider::closeSocket(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5)
  {
    CFRelease(v5);
  }
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, NSObject *a2, nw_content_context_t context, int a4, NSObject *a5)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v10 = (WTF **)(a1 + 48);
    uint64_t v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    void *v11 = MEMORY[0x1E4F14398];
    v11[1] = 50331650;
    _OWORD v11[2] = WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::descriptor;
    v11[4] = v10;
    dispatch_data_apply(a2, v11);
    _Block_release(v11);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(v16);
    unsigned int v13 = *v10;
    if (*v10)
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v13, v12);
    }
    *(void *)(a1 + 48) = v16[0];
    *(void *)(a1 + 56) = v16[1];
  }
  if (!context || !a4 || !nw_content_context_get_is_final(context))
  {
    if (a5)
    {
      uint64_t v14 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
      {
        int error_code = nw_error_get_error_code(a5);
        LODWORD(v16[0]) = 67109120;
        HIDWORD(v16[0]) = error_code;
        _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "NetworkRTCTCPSocketCocoa processIncomingData failed with error %d", (uint8_t *)v16, 8u);
      }
    }
    else
    {
      WebKit::processIncomingData(a1 + 32, a1 + 40, a1 + 48);
    }
  }
}

void sub_198A7E378(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke(uint64_t result, int a2, int a3, void *__src, size_t __n)
{
  if (!__n) {
    return 1;
  }
  uint64_t v7 = *(void *)(result + 32);
  size_t v9 = *(unsigned int *)(v7 + 8);
  uint64_t v8 = (WTF::FastMalloc *)*(unsigned int *)(v7 + 12);
  uint64_t v10 = (WTF::FastMalloc *)((char *)v8 + __n);
  if ((unint64_t)v8 + __n > v9)
  {
    unint64_t v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10) {
      unint64_t v12 = v11 + 1;
    }
    else {
      unint64_t v12 = 16;
    }
    if (v12 <= (unint64_t)v10) {
      unsigned int v13 = v10;
    }
    else {
      unsigned int v13 = (WTF::FastMalloc *)v12;
    }
    dispatch_queue_t result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(*(WTF::ASCIILiteral **)(result + 32), v13);
    uint64_t v8 = (WTF::FastMalloc *)*(unsigned int *)(v7 + 12);
  }
  if (v10 >= v8)
  {
    memcpy((char *)v8 + *(void *)v7, __src, __n);
    *(_DWORD *)(v7 + 12) = v10;
    return 1;
  }
  __break(0xC471u);
  return result;
}

void rtc::IPAddress::~IPAddress(rtc::IPAddress *this)
{
}

uint64_t ___ZN6WebKitL14dataFromVectorEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke(uint64_t a1, void *a2)
{
  return WTF::fastFree(*(WTF **)(a1 + 32), a2);
}

void WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)(a1 + 48));
  uint64_t v2 = *(atomic_uchar ***)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(v3);
  }
}

IPC::Encoder *WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(rtc *a1)
{
  uint64_t v1 = *((void *)a1 + 5);
  uint64_t v2 = *((void *)a1 + 7);
  v4[0] = (char *)a1 + 32;
  v4[1] = v2;
  v4[2] = rtc::TimeMillis(a1);
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(v1, (uint64_t)v4);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 142;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  size_t v9 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v4, *(void *)(a2 + 8));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v4, *(void *)(a2 + 16));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  dispatch_queue_t result = v9;
  size_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void sub_198A7E5B8(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5)
  {
    if (((1 << a2) & 0x1B) != 0)
    {
      if (!*(void *)(a1 + 40)) {
        return;
      }
      uint64_t v14 = 0;
      (*(void (**)(void, WTF::StringImpl **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v14);
      uint64_t v4 = v14;
      uint64_t v14 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v3);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    }
    else
    {
      if (a2 == 2)
      {
        uint64_t v5 = *(NSObject **)(a1 + 40);
        if (!v5) {
          return;
        }
        nw_path_t v6 = nw_connection_copy_current_path(v5);
        uint64_t v7 = nw_path_copy_interface();
        name = nw_interface_get_name(v7);
        if (name)
        {
          strlen(name);
          WTF::String::fromUTF8();
        }
        else
        {
          uint64_t v14 = 0;
        }
        (*(void (**)(void, WTF::StringImpl **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v14);
        unint64_t v12 = v14;
        uint64_t v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v11);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
        unsigned int v13 = *(const void **)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        if (v13) {
          CFRelease(v13);
        }
        if (v7) {
          CFRelease(v7);
        }
        goto LABEL_18;
      }
      if (!*(void *)(a1 + 40)) {
        return;
      }
      uint64_t v14 = 0;
      (*(void (**)(void, WTF::StringImpl **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v14);
      uint64_t v10 = v14;
      uint64_t v14 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    nw_path_t v6 = *(nw_path_t *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
LABEL_18:
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_198A7E830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZN6WebKitL14udpSocketQueueEv_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("WebRTC UDP socket queue", MEMORY[0x1E4F14430]);
  qword_1EB358EB8 = (uint64_t)result;
  return result;
}

void WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[8];
  a1[8] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  }
  uint64_t v5 = (atomic_uchar **)a1[5];
  a1[5] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v5);
  }
  nw_path_t v6 = (const void *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    CFRelease(v6);
  }
}

void WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::{lambda(void *,nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 4:
      unint64_t v11 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 56);
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "NetworkRTCUDPSocketCocoaConnections cancelled listener %llu", (uint8_t *)&buf, 0xCu);
      }
      unsigned int v13 = *(const void **)(a1 + 32);
      *(void *)(a1 + 32) = 0;
      if (v13) {
        CFRelease(v13);
      }
      break;
    case 3:
      uint64_t v15 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
      {
        if (a3) {
          int error_code = nw_error_get_error_code(a3);
        }
        else {
          int error_code = 0;
        }
        LODWORD(buf) = 67109120;
        DWORD1(buf) = error_code;
        _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections failed with error %d", (uint8_t *)&buf, 8u);
      }
      uint64_t v16 = *(void *)(a1 + 48);
      atomic_fetch_add((atomic_uint *volatile)(v16 + 24), 1u);
      uint64_t v17 = *(void *)(a1 + 56);
      long long v18 = (void *)WTF::fastMalloc((WTF *)0x18);
      *long long v18 = &unk_1EE9BD498;
      v18[1] = v16;
      v18[2] = v17;
      *(void *)&long long buf = v18;
      (*(void (**)(void, long long *))(**(void **)(v16 + 160) + 32))(*(void *)(v16 + 160), &buf);
      uint64_t v19 = buf;
      *(void *)&long long buf = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      uint64_t v20 = *(void *)(a1 + 40);
      int v22 = -1;
      *(void *)&long long buf = a1 + 56;
      *((void *)&buf + nw_tcp_options_set_no_delay(options, 1) = &v22;
      IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v20, (uint64_t)&buf, 0, 0, 0);
      break;
    case 2:
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v5 = *(atomic_uchar **)(a1 + 64);
      if (v5) {
        nw_path_t v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
      }
      else {
        nw_path_t v6 = 0;
      }
      uint64_t v7 = *(void *)(a1 + 72);
      uint16_t port = nw_listener_get_port(*(nw_listener_t *)(a1 + 32));
      uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v9 = &unk_1EE9BD470;
      *(void *)(v9 + 8) = v6;
      *(void *)(v9 + 16) = v7;
      *(_WORD *)(v9 + 24) = port;
      *(void *)&long long buf = v9;
      (*(void (**)(void, long long *))(**(void **)(v4 + 160) + 32))(*(void *)(v4 + 160), &buf);
      uint64_t v10 = buf;
      *(void *)&long long buf = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      break;
  }
}

void sub_198A7EC3C(_Unwind_Exception *exception_object)
{
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9BD470;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BD470;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::call(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    char v2 = 0;
    uint64_t v3 = *((void *)result + 2);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
    if (v2) {
      dispatch_queue_t result = (atomic_uchar *)MEMORY[0x19972E8D0](v1);
    }
    if (*(void *)(v1 + 24)) {
      ++*(void *)(v1 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    int v4 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1)
    {
      if (!v3) {
        return result;
      }
    }
    else
    {
      dispatch_queue_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
      if (!v3) {
        return result;
      }
    }
    rtc::SocketAddress::SetPort((rtc::SocketAddress *)(v3 + 88));
    uint64_t v5 = *(void *)(v3 + 16);
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v12, (const rtc::SocketAddress *)(v3 + 88));
    nw_path_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)nw_path_t v6 = 138;
    *((void *)v6 + nw_tcp_options_set_no_delay(options, 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v15 = v6;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, (uint64_t *)(v3 + 8));
    IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(v6, (uint64_t)v12);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v15, 0, 0);
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v10, v11);
    }
    uint64_t v9 = v13;
    if (v13)
    {
      unsigned int v13 = 0;
      int v14 = 0;
      WTF::fastFree(v9, v7);
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*(atomic_uchar **)v3, v7);
  }
  return result;
}

void sub_198A7EE78(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v12, a2);
  _Unwind_Resume(a1);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  char v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v14 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v14 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 176);
    if (v9) {
      WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(v9, a2);
    }
    uint64_t v10 = *(const void **)(v7 + 160);
    *(void *)(v7 + 160) = 0;
    if (v10) {
      CFRelease(v10);
    }
    if (*(char *)(v7 + 111) < 0) {
      operator delete(*(void **)(v7 + 88));
    }
    unint64_t v11 = *(WTF::StringImpl **)(v7 + 80);
    *(void *)(v7 + 80) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = *(WTF **)(v7 + 32);
    *(void *)(v7 + 32) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1) {
        WTF::fastFree(v12, a2);
      }
      else {
        --*(_DWORD *)v12;
      }
    }
    unsigned int v13 = *(atomic_uchar ***)(v7 + 16);
    *(void *)(v7 + 16) = 0;
    if (v13) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v13);
    }
    this = (atomic_uchar *)WTF::fastFree((WTF *)v7, a2);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BD498;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BD498;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return WebKit::NetworkRTCProvider::closeSocket(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

atomic_uchar *WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::{lambda(void const*)#1}::__invoke(atomic_uchar *result, void *a2)
{
  uint64_t v2 = (atomic_uchar **)*((void *)result + 4);
  *((void *)result + 4) = 0;
  if (v2) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v2, a2);
  }
  return result;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::{lambda(void *,NSObject  {objcproto16OS_nw_connection}*)#1}::__invoke(uint64_t *a1, nw_connection_t connection)
{
  uint64_t v3 = a1;
  char v4 = 0;
  int v5 = (atomic_uchar *)(a1[4] + 168);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  if (!*(unsigned char *)(v3[4] + 169))
  {
    uint64_t v6 = nw_connection_copy_endpoint(connection);
    if (nw_endpoint_get_type(v6) == nw_endpoint_type_address)
    {
      hostname = nw_endpoint_copy_address_string(v6);
      uint64_t v10 = hostname;
      if (hostname)
      {
        strlen(hostname);
        nw_endpoint_get_port(v6);
        rtc::SocketAddress::SocketAddress();
        free(v10);
        goto LABEL_9;
      }
    }
    else
    {
      hostname = (char *)nw_endpoint_get_hostname(v6);
      uint64_t v10 = hostname;
      if (hostname)
      {
        strlen(hostname);
        nw_endpoint_get_port(v6);
        rtc::SocketAddress::SocketAddress();
LABEL_9:
        if (v6) {
          CFRelease(v6);
        }
        unint64_t v11 = (atomic_uint *)WTF::fastMalloc((WTF *)8);
        *(void *)unint64_t v11 = 1;
        WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(v3[4], connection, v11, (rtc::SocketAddress *)__p);
        uint64_t v12 = v3[4];
        if (*(unsigned char *)(v12 + 188))
        {
          nw_connection_reset_traffic_class();
          uint64_t v12 = v3[4];
        }
        uint64_t v14 = *(void *)(v12 + 176);
        uint64_t v10 = (char *)(v12 + 176);
        uint64_t v13 = v14;
        if (v14
          || (WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand((uint64_t *)v10, 0), (uint64_t v13 = *(void *)v10) != 0))
        {
          unsigned int v15 = *(_DWORD *)(v13 - 8);
        }
        else
        {
          unsigned int v15 = 0;
        }
        uint64_t v16 = v15 & rtc::SocketAddress::Hash((rtc::SocketAddress *)__p);
        uint64_t v17 = (rtc::SocketAddress *)(v13 + 88 * v16);
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>() & 1) == 0)
        {
          uint64_t v35 = v10;
          int v36 = v5;
          long long v18 = 0;
          int v19 = 1;
          while (!WTF::DefaultHash<rtc::SocketAddress>::equal(v17, (rtc::SocketAddress *)__p))
          {
            int v21 = *((_DWORD *)v17 + 15);
            uint64_t v16 = (v16 + v19) & v15;
            uint64_t v3 = (uint64_t *)(v13 + 88 * v16);
            int v22 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
            if (v21 == 0x80000000) {
              long long v18 = v17;
            }
            ++v19;
            uint64_t v17 = (rtc::SocketAddress *)(v13 + 88 * v16);
            if (v22)
            {
              int v5 = v36;
              uint64_t v10 = v35;
              if (v18)
              {
                rtc::SocketAddress::SocketAddress(v18);
                *((void *)v18 + 9) = 0;
                *((void *)v18 + 10) = 0;
                --*(_DWORD *)(*(void *)v35 - 16);
                uint64_t v3 = (uint64_t *)v18;
              }
              goto LABEL_25;
            }
          }
          int v5 = v36;
          if (connection) {
            CFRetain(connection);
          }
          uint64_t v30 = v13 + 88 * v16;
          uint64_t v31 = *(const void **)(v30 + 72);
          *(void *)(v30 + 72) = connection;
          if (v31) {
            CFRelease(v31);
          }
          uint64_t v32 = v13 + 88 * v16;
          uint64_t v33 = *(unsigned int **)(v32 + 80);
          *(void *)(v32 + 80) = v11;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v20);
          }
          goto LABEL_47;
        }
        uint64_t v3 = (uint64_t *)(v13 + 88 * v16);
LABEL_25:
        rtc::SocketAddress::operator=();
        if (connection) {
          CFRetain(connection);
        }
        uint64_t v23 = (const void *)v3[9];
        v3[9] = (uint64_t)connection;
        if (v23) {
          CFRelease(v23);
        }
        hostname = (char *)v3[10];
        v3[10] = (uint64_t)v11;
        if (!hostname || (unsigned int add = atomic_fetch_add((atomic_uint *volatile)hostname, 0xFFFFFFFF), add != 1))
        {
LABEL_31:
          uint64_t v24 = *(void *)v10;
          if (*(void *)v10) {
            int v25 = *(_DWORD *)(v24 - 12) + 1;
          }
          else {
            int v25 = 1;
          }
          *(_DWORD *)(v24 - 12) = v25;
          uint64_t v26 = *(void *)v10;
          if (*(void *)v10) {
            int v27 = *(_DWORD *)(v26 - 12);
          }
          else {
            int v27 = 0;
          }
          uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
          unint64_t v29 = *(unsigned int *)(v26 - 4);
          if (v29 > 0x400)
          {
            if (v29 > 2 * v28)
            {
LABEL_47:
              if (v38 < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_49;
            }
          }
          else if (3 * v29 > 4 * v28)
          {
            goto LABEL_47;
          }
          WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand((uint64_t *)v10, (uint64_t)v3);
          goto LABEL_47;
        }
LABEL_56:
        atomic_store(add, (unsigned int *)hostname);
        WTF::fastFree((WTF *)hostname, v8);
        goto LABEL_31;
      }
    }
    __break(1u);
    goto LABEL_56;
  }
LABEL_49:
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
}

void sub_198A7F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, WTF::Lock *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(88 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5)
  {
    uint64_t v10 = v5;
    unint64_t v11 = (void *)(v6 + 88);
    do
    {
      rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(v11 - 9));
      void *v11 = 0;
      v11[1] = 0;
      v11 += 11;
      --v10;
    }
    while (v10);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v2 + 88 * v12;
      if (*(_DWORD *)(v14 + 60) != 0x80000000)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>())
        {
          uint64_t v15 = v2 + 88 * v12;
          uint64_t v16 = *(unsigned int **)(v15 + 80);
          *(void *)(v15 + 80) = 0;
          if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v7);
          }
          uint64_t v17 = *(const void **)(v15 + 72);
          *(void *)(v15 + 72) = 0;
          if (v17) {
            CFRelease(v17);
          }
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
        }
        else
        {
          uint64_t v18 = *a1;
          uint64_t v39 = v13;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unsigned int v20 = v19 & rtc::SocketAddress::Hash((rtc::SocketAddress *)(v2 + 88 * v12));
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v13 = v18 + 88 * v20;
            int v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
            unsigned int v20 = (v22 + v21++) & v19;
          }
          while (!v23);
          uint64_t v25 = v18 + 88 * v22;
          uint64_t v28 = *(unsigned int **)(v25 + 80);
          int v27 = (void *)(v25 + 80);
          uint64_t v26 = v28;
          void *v27 = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v24);
          }
          unint64_t v29 = (const void *)*(v27 - 1);
          *(v27 - nw_tcp_options_set_no_delay(options, 1) = 0;
          if (v29) {
            CFRelease(v29);
          }
          if (*(char *)(v13 + 23) < 0) {
            operator delete(*(void **)v13);
          }
          rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)v13, (const rtc::SocketAddress *)(v2 + 88 * v12));
          uint64_t v30 = v2 + 88 * v12;
          uint64_t v32 = *(void *)(v30 + 72);
          uint64_t v31 = (const void **)(v30 + 72);
          const void *v31 = 0;
          *(v27 - nw_tcp_options_set_no_delay(options, 1) = v32;
          uint64_t v33 = v31[1];
          v31[1] = 0;
          void *v27 = v33;
          int v34 = (unsigned int *)v31[1];
          v31[1] = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v7);
          }
          uint64_t v35 = *v31;
          const void *v31 = 0;
          if (v35) {
            CFRelease(v35);
          }
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          if (v14 != a2) {
            uint64_t v13 = v39;
          }
        }
      }
      ++v12;
    }
    while (v12 != v3);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v13;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>()
{
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)&__p);
  uint64_t v0 = rtc::SocketAddress::operator==();
  if (v3 < 0) {
    operator delete(__p);
  }
  return v0;
}

void sub_198A7F828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::DefaultHash<rtc::SocketAddress>::equal(rtc::SocketAddress *a1, rtc::SocketAddress *a2)
{
  if (rtc::SocketAddress::operator==()) {
    return 1;
  }
  uint64_t result = rtc::SocketAddress::IsNil(a1);
  if (result)
  {
    uint64_t result = rtc::SocketAddress::IsNil(a2);
    if (result) {
      return *((_DWORD *)a1 + 15) == *((_DWORD *)a2 + 15);
    }
  }
  return result;
}

uint64_t WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (unsigned int **)(a1 + 80);
    do
    {
      if (*((_DWORD *)v4 - 5) != 0x80000000)
      {
        unsigned int v5 = *v4;
        *int v4 = 0;
        if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
        uint64_t v6 = *(v4 - 1);
        *(v4 - nw_tcp_options_set_no_delay(options, 1) = 0;
        if (v6) {
          CFRelease(v6);
        }
        if (*((char *)v4 - 57) < 0) {
          operator delete(*(v4 - 10));
        }
      }
      v4 += 11;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2 == 4)
  {
    unsigned int v5 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      if (a3) {
        int error_code = nw_error_get_error_code(a3);
      }
      else {
        int error_code = 0;
      }
      v7[0] = 67109120;
      v7[1] = error_code;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections connection failed with error %d", (uint8_t *)v7, 8u);
    }
  }
  else if ((a2 & 0xFFFFFFFE) != 4)
  {
    return;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 4) = 1;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = (const void *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    CFRelease(v5);
  }
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, NSObject *a2, NSObject *a3, uint64_t a4, NSObject *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_content_context_t context = a3;
  if (a2)
  {
    uint64_t v8 = malloc_type_malloc(0x30uLL, 0x10E0040331879E5uLL);
    *uint64_t v8 = MEMORY[0x1E4F14398];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke;
    v8[3] = &WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::descriptor;
    v8[4] = a1 + 40;
    v8[5] = &context;
    dispatch_data_apply(a2, v8);
    _Block_release(v8);
  }
  if (!*(unsigned char *)(*(void *)(a1 + 56) + 4) && !nw_content_context_get_is_final(context))
  {
    if (a5)
    {
      int v9 = *(_DWORD *)(a1 + 48);
      if (v9 != nw_error_get_error_code(a5))
      {
        int error_code = nw_error_get_error_code(a5);
        *(_DWORD *)(a1 + 48) = error_code;
        unint64_t v11 = qword_1EB358820;
        if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&buf[4] = error_code;
          _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections failed processing UDP data with error %d", buf, 8u);
        }
      }
    }
    uint64_t v12 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    *(void *)long long buf = v12;
    WebKit::processUDPData(a1 + 32, buf, *(unsigned int *)(a1 + 48), a1 + 40);
    uint64_t v14 = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (v14)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v13);
      }
    }
  }
}

void sub_198A7FCCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a11);
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = **(NSObject ***)(a1 + 40);
  int v9 = nw_protocol_copy_ip_definition();
  uint64_t v10 = nw_content_context_copy_protocol_metadata(v8, v9);
  unint64_t v11 = v10;
  if (v10)
  {
    if (nw_protocol_metadata_is_ip(v10))
    {
      nw_ip_ecn_flag_t ecn_flag = nw_ip_metadata_get_ecn_flag(v11);
      if (ecn_flag - 1 >= 3) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = ecn_flag;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    CFRelease(v11);
  }
  else
  {
    uint64_t v14 = qword_1EB358820;
    uint64_t v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "Could not retreive the metadata from UDPSocket Context, so use default ECN value", v16, 2u);
      uint64_t v13 = 0;
    }
  }
  if (v9) {
    CFRelease(v9);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v7 + 16))(*v7, a4, a5, v13);
  return 1;
}

void sub_198A7FE28(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)(a1 + 48));
  uint64_t v2 = *(atomic_uchar ***)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(v3);
  }
}

IPC::Encoder *WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(BOOL a1, NSObject *a2)
{
  uint64_t v2 = a1;
  v10[3] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v9 = qword_1EB358820;
    a1 = os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR);
    if (a1)
    {
      LODWORD(v10[0]) = 67109120;
      HIDWORD(v10[0]) = nw_error_get_error_code(a2);
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections::sendTo failed with error %d", (uint8_t *)v10, 8u);
    }
  }
  uint64_t v3 = v2 + 32;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = rtc::TimeMillis((rtc *)a1);
  v10[0] = v3;
  v10[1] = v5;
  v10[2] = v6;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(v4, (uint64_t)v10);
}

unsigned int *WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0>(WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0>(WebKit::NetworkTransportReceiveStream::receiveLoop(void)::$_0)::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t result, dispatch_data_t data, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 32);
  if (v5)
  {
    uint64_t v6 = *(WebKit::NetworkTransportReceiveStream **)(v5 + 8);
    if (v6)
    {
      ++*(_DWORD *)v6;
      if (!a5)
      {
        uint64_t v7 = *((void *)v6 + 3);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            uint64_t v10 = *((void *)v6 + 2);
            uint64_t v18 = 0;
            int v19 = &v18;
            uint64_t v20 = 0x4012000000;
            int v21 = __Block_byref_object_copy__1;
            unsigned int v22 = __Block_byref_object_dispose__1;
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0;
            applier[0] = MEMORY[0x1E4F143A8];
            applier[1] = 3221225472;
            applier[2] = ___ZZZN6WebKit29NetworkTransportReceiveStream11receiveLoopEvENK3__0clEPU27objcproto16OS_dispatch_data8NSObjectPU32objcproto21OS_nw_content_contextS2_bPU22objcproto11OS_nw_errorS2_ENKUlS4_E_clES4__block_invoke;
            applier[3] = &unk_1E5811C80;
            applier[4] = &v18;
            dispatch_data_apply(data, applier);
            unint64_t v11 = v19;
            uint64_t v12 = *((unsigned int *)v19 + 15);
            if (v12)
            {
              uint64_t v13 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)v19 + 15));
              memcpy(v13, (const void *)v11[6], *((unsigned int *)v11 + 15));
            }
            else
            {
              uint64_t v13 = 0;
            }
            _Block_object_dispose(&v18, 8);
            uint64_t v15 = v24;
            if (v24)
            {
              uint64_t v24 = 0;
              LODWORD(v25) = 0;
              WTF::fastFree(v15, v14);
            }
            WebKit::NetworkTransportSession::streamReceiveBytes(v8, v10, (uint64_t)v13, v12, a4);
            if (v13) {
              WTF::fastFree((WTF *)v13, v16);
            }
          }
        }
        WebKit::NetworkTransportReceiveStream::receiveLoop(v6);
      }
      return WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref((uint64_t)v6, data);
    }
  }
  return result;
}

void sub_198A80140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  _Block_object_dispose(&a15, 8);
  uint64_t v25 = a21;
  if (a21)
  {
    a21 = 0;
    a22 = 0;
    WTF::fastFree(v25, v24);
  }
  WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v22, v24);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(result + 56) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(result + 60) = v2;
  return result;
}

WTF *__Block_byref_object_dispose__1(uint64_t a1, void *a2)
{
  uint64_t result = *(WTF **)(a1 + 48);
  if (result)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t ___ZZZN6WebKit29NetworkTransportReceiveStream11receiveLoopEvENK3__0clEPU27objcproto16OS_dispatch_data8NSObjectPU32objcproto21OS_nw_content_contextS2_bPU22objcproto11OS_nw_errorS2_ENKUlS4_E_clES4__block_invoke(uint64_t result, int a2, int a3, void *__src, size_t __n)
{
  if (!__n) {
    return 1;
  }
  uint64_t v7 = *(unsigned int **)(*(void *)(result + 32) + 8);
  size_t v9 = v7[14];
  uint64_t v8 = (WTF::FastMalloc *)v7[15];
  uint64_t v10 = (WTF::FastMalloc *)((char *)v8 + __n);
  if ((unint64_t)v8 + __n > v9)
  {
    unint64_t v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10) {
      unint64_t v12 = v11 + 1;
    }
    else {
      unint64_t v12 = 16;
    }
    if (v12 <= (unint64_t)v10) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = (WTF::FastMalloc *)v12;
    }
    uint64_t result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)(v7 + 12), v13);
    uint64_t v8 = (WTF::FastMalloc *)v7[15];
  }
  if (v10 >= v8)
  {
    memcpy((char *)v8 + *((void *)v7 + 6), __src, __n);
    v7[15] = v10;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v3 = *(const void **)(result + 32);
    *(void *)(v2 + 32) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(unsigned int **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
    return WTF::fastFree((WTF *)v2, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_198A80504(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198A805D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BD5F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BD5F8;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (WTF::RefCountedBase *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
    if (v7)
    {
      uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v2, (WTF::RefCountedBase *)&v6);
      if (v7)
      {
        uint64_t result = v6;
        uint64_t v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (WTF::RefCountedBase *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5);
  }
  return result;
}

void sub_198A80B34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::RefCountedBase *a1)
{
  uint64_t v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a1, (WTF::RefCountedBase *)&v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198A80BC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc&&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BD620;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc&&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD620;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc&&>::call(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v5 = &unk_1EE9BD648;
  v5[1] = v2;
  _DWORD v5[2] = v1;
  v5[3] = v3;
  v5[4] = v4;
  char v7 = v5;
  WebCore::WebRTC::extractMessages();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_198A80D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoaC1ENS_23ObjectIdentifierGenericIN7WebCore29LibWebRTCSocketIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERNS2_18NetworkRTCProviderERKN3rtc13SocketAddressEiRKNS_6StringEbbRKNS5_17RegistrableDomainEONS_3RefIN3IPC10ConnectionENS_12RawPtrTraitsISP_EENS_21DefaultRefDerefTraitsISP_EEEEEN3__1clEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEUlT_E_vJNSt3__14spanIKhLm18446744073709551615EEEEE4callES17_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  v15[0] = a2;
  v15[1] = a3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = **(void **)(a1 + 8);
  uint64_t v6 = (rtc *)WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)v10, *(const rtc::IPAddress **)(a1 + 24));
  LOWORD(v3) = **(_WORD **)(v3 + 32);
  uint64_t v7 = rtc::TimeMicros(v6);
  int v9 = 0;
  v11[0] = v4;
  v11[1] = v15;
  _OWORD v11[2] = v10;
  __int16 v12 = v3;
  uint64_t v13 = v7;
  uint64_t v14 = &v9;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(v5, (uint64_t)v11);
}

uint64_t IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 141;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v13 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v4, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v5 = *(int **)(a2 + 16);
  unsigned __int8 v14 = v5[4];
  IPC::Encoder::operator<<<BOOL>(v4, (char *)&v14);
  IPC::ArgumentCoder<std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>>,void>::encode<IPC::Encoder,std::variant<WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(v4, v5, v14);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v4, *(_WORD *)(a2 + 24));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v4, *(void *)(a2 + 32));
  int v6 = **(_DWORD **)(a2 + 40);
  uint64_t v7 = (_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4);
  if (v8 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v7 = v6;
    IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 0, 0);
    uint64_t result = (uint64_t)v13;
    uint64_t v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
      return WTF::fastFree(v11, v12);
    }
  }
  return result;
}

void sub_198A80F84(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WTF::String&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BD670;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WTF::String&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD670;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WTF::String&>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = v1;
  WTF::String::isolatedCopy();
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v3 = &unk_1EE9BD698;
  v3[1] = v6;
  v3[2] = v7;
  unint64_t v8 = v3;
  (*(void (**)(void, void **))(**(void **)(v2 + 160) + 32))(*(void *)(v2 + 160), &v8);
  uint64_t v4 = v8;
  unint64_t v8 = 0;
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  return 0;
}

void sub_198A811E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoa16getInterfaceNameERNS2_18NetworkRTCProviderERKNS_3URLERKNS_6StringEbbRKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvOS9_EEEEN3__1clIS9_EEDaOT_EUlvE_vJEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9BD698;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoa16getInterfaceNameERNS2_18NetworkRTCProviderERKNS_3URLERKNS_6StringEbbRKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvOS9_EEEEN3__1clIS9_EEDaOT_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9BD698;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoa16getInterfaceNameERNS2_18NetworkRTCProviderERKNS_3URLERKNS_6StringEbbRKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvOS9_EEEEN3__1clIS9_EEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WTF::String &&)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::CompletionHandler<void ()(WTF::String &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A81414(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::begin(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return a1;
  }
  unsigned int v2 = *(_DWORD *)(a1 - 4);
  uint64_t v3 = a1 + 88 * v2;
  if (!*(_DWORD *)(a1 - 12))
  {
    a1 += 88 * v2;
    return a1;
  }
  if (v2)
  {
    uint64_t v4 = 88 * v2;
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>() & 1) != 0
         || *(_DWORD *)(v1 + 60) == 0x80000000)
    {
      v1 += 88;
      v4 -= 88;
      if (!v4) {
        return v3;
      }
    }
  }
  return v1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject  {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BD6C0;
  unsigned int v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject  {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD6C0;
  uint64_t v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject  {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::EcnMarking>::call(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 8;
  v16[0] = a2;
  v16[1] = a3;
  int v15 = a4;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (rtc *)WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)v10, (const rtc::IPAddress *)(a1 + 24));
  LOWORD(v4) = *(_WORD *)(v4 + 56);
  uint64_t v8 = rtc::TimeMicros(v7);
  v11[0] = v5;
  v11[1] = v16;
  _OWORD v11[2] = v10;
  __int16 v12 = v4;
  uint64_t v13 = v8;
  unsigned __int8 v14 = &v15;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(v6, (uint64_t)v11);
}

atomic_uchar *volatile **WebKit::RemoteRenderPassEncoder::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x50D:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0) {
          WebKit::RemoteRenderPassEncoder::beginOcclusionQuery((WebKit::RemoteRenderPassEncoder *)v4);
        }
        goto LABEL_84;
      case 0x50E:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        uint64_t v11 = *((void *)v4[3] + 1);
        __int16 v12 = (_DWORD *)(v11 + 8);
        ++*(_DWORD *)(v11 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v11, (uint64_t)v4[6]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v12, v13);
        goto LABEL_84;
      case 0x50F:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>>(a3, &v54);
        if (BYTE4(v57)) {
          WebKit::RemoteRenderPassEncoder::draw((uint64_t)v4);
        }
        goto LABEL_93;
      case 0x510:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>>(a3, &v54);
        if (BYTE4(v58)) {
          WebKit::RemoteRenderPassEncoder::drawIndexed((uint64_t)v4);
        }
        goto LABEL_93;
      case 0x511:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v54);
        if ((_BYTE)v56) {
          WebKit::RemoteRenderPassEncoder::drawIndexedIndirect((uint64_t)v4, (uint64_t)v54, v55);
        }
        goto LABEL_93;
      case 0x512:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v54);
        if ((_BYTE)v56) {
          WebKit::RemoteRenderPassEncoder::drawIndirect((uint64_t)v4, (uint64_t)v54, v55);
        }
        goto LABEL_93;
      case 0x513:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        WebKit::RemoteRenderPassEncoder::end((WebKit::RemoteRenderPassEncoder *)v4);
        goto LABEL_84;
      case 0x514:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        WebKit::RemoteRenderPassEncoder::endOcclusionQuery((WebKit::RemoteRenderPassEncoder *)v4);
        goto LABEL_84;
      case 0x515:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, (uint64_t)&v54);
        if (!(_BYTE)v56) {
          goto LABEL_93;
        }
        WebKit::RemoteRenderPassEncoder::executeBundles((uint64_t)v4, (uint64_t)&v54);
        if (!(_BYTE)v56) {
          goto LABEL_93;
        }
        int v9 = v54;
        if (!v54) {
          goto LABEL_93;
        }
        __int16 v54 = 0;
        LODWORD(v55) = 0;
        goto LABEL_89;
      case 0x516:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v54);
        if (!(_BYTE)v55) {
          goto LABEL_93;
        }
        WebKit::RemoteRenderPassEncoder::insertDebugMarker((uint64_t)v4);
        goto LABEL_24;
      case 0x517:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        WebKit::RemoteRenderPassEncoder::popDebugGroup((WebKit::RemoteRenderPassEncoder *)v4);
        goto LABEL_84;
      case 0x518:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v54);
        if (!(_BYTE)v55) {
          goto LABEL_93;
        }
        WebKit::RemoteRenderPassEncoder::pushDebugGroup((uint64_t)v4);
        goto LABEL_24;
      case 0x519:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)a3, &v54);
        if (!(_BYTE)v59) {
          goto LABEL_93;
        }
        WebKit::RemoteRenderPassEncoder::setBindGroup((uint64_t)v4, v54, v55, (uint64_t)&v56);
        if (!(_BYTE)v59) {
          goto LABEL_93;
        }
        if (!(_BYTE)v58) {
          goto LABEL_93;
        }
        int v9 = v56;
        if (!v56) {
          goto LABEL_93;
        }
        std::string v56 = 0;
        LODWORD(v57) = 0;
LABEL_89:
        WTF::fastFree(v9, v8);
        goto LABEL_93;
      case 0x51A:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, a2 + 5);
        IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>(a3, &v54);
        LOBYTE(v61[0]) = 0;
        if ((_BYTE)v59)
        {
          int v62 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v61, (uint64_t)&v54);
          char v63 = 1;
          if (!(_BYTE)v59) {
            goto LABEL_74;
          }
          if (v58 == -1) {
            goto LABEL_74;
          }
          ((void (*)(char *, WTF::StringImpl **))off_1EE9BD6F8[v58])(&v64, &v54);
          if (v63) {
            goto LABEL_74;
          }
        }
        else
        {
          char v63 = 0;
        }
        uint64_t v43 = *(void *)a3;
        uint64_t v44 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v45 = *((void *)a3 + 3);
        if (!v45) {
          goto LABEL_79;
        }
        if (!v44) {
          goto LABEL_79;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
        if (!v63) {
          goto LABEL_79;
        }
LABEL_74:
        LOBYTE(v54) = 0;
        LODWORD(v58) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v54, (uint64_t)v61);
        WebKit::RemoteRenderPassEncoder::setBlendConstant((uint64_t)v4, (uint64_t)&v54);
        if (v58 != -1) {
          ((void (*)(char *, WTF::StringImpl **))off_1EE9BD6F8[v58])(&v64, &v54);
        }
        if (v63 && v62 != -1) {
          ((void (*)(WTF::StringImpl **, uint64_t **))off_1EE9BD6F8[v62])(&v54, v61);
        }
LABEL_79:
        char v38 = &v53;
        goto LABEL_94;
      case 0x51B:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t *)a3, &v54);
        if (v60) {
          WebKit::RemoteRenderPassEncoder::setIndexBuffer((uint64_t)v4, (uint64_t)v54, v55, (uint64_t)v56, v57, v58, v59);
        }
        goto LABEL_93;
      case 0x51C:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v54);
        if (!(_BYTE)v55) {
          goto LABEL_93;
        }
        WebKit::RemoteRenderPassEncoder::setLabel((uint64_t)v4, (uint64_t *)&v54);
LABEL_24:
        if ((_BYTE)v55)
        {
          uint64_t v10 = v54;
          __int16 v54 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v7);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
        }
LABEL_93:
        char v38 = v61;
        goto LABEL_94;
      case 0x51D:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        uint64_t v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v6) {
          WebKit::RemoteRenderPassEncoder::setPipeline((uint64_t)v4, v5);
        }
        goto LABEL_84;
      case 0x51E:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a3, &v54);
        if ((_BYTE)v56) {
          WebKit::RemoteRenderPassEncoder::setScissorRect((WebKit::RemoteRenderPassEncoder *)v4);
        }
        goto LABEL_93;
      case 0x51F:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0) {
          WebKit::RemoteRenderPassEncoder::setStencilReference((WebKit::RemoteRenderPassEncoder *)v4);
        }
        goto LABEL_84;
      case 0x520:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t *)a3, &v54);
        if (v60) {
          WebKit::RemoteRenderPassEncoder::setVertexBuffer((uint64_t)v4, v54, v55, (uint64_t)v56, v57, v58, v59);
        }
        goto LABEL_93;
      case 0x521:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v54, a2 + 5);
        unint64_t v14 = *((void *)a3 + 1);
        uint64_t v15 = *(void *)a3;
        unint64_t v16 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
        if (v14 < v16 || v14 - v16 <= 3)
        {
          unint64_t v46 = 0;
          uint64_t v47 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v48 = *((void *)a3 + 3);
          if (v48)
          {
            if (v14)
            {
              (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
              uint64_t v47 = *(void *)a3;
              unint64_t v46 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v46 = 0;
              uint64_t v47 = 0;
            }
          }
          goto LABEL_106;
        }
        uint64_t v18 = (float *)(v15 + v16);
        *((void *)a3 + 2) = v18 + 1;
        if (!v15)
        {
          unint64_t v46 = v14;
          uint64_t v47 = 0;
LABEL_106:
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v49 = *((void *)a3 + 3);
          if (v49 && v46) {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
          }
          goto LABEL_97;
        }
        unint64_t v19 = (((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v15;
        if (v14 >= v19 && v14 - v19 > 3)
        {
          float v21 = *v18;
          *((void *)a3 + 2) = (((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
          float v22 = *(float *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
          unint64_t v23 = (((((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v15;
          if (v14 >= v23 && v14 - v23 > 3)
          {
            uint64_t v25 = (float *)(v15 + v23);
            *((void *)a3 + 2) = v25 + 1;
            float v26 = *v25;
            unint64_t v27 = (((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v15;
            if (v14 >= v27 && v14 - v27 > 3)
            {
              unint64_t v29 = (float *)(v15 + v27);
              *((void *)a3 + 2) = v29 + 1;
              float v30 = *v29;
              unint64_t v31 = (((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v15;
              if (v14 >= v31 && v14 - v31 > 3)
              {
                uint64_t v33 = (float *)(v15 + v31);
                *((void *)a3 + 2) = v33 + 1;
                unint64_t v34 = (((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v15;
                if (v14 >= v34 && v14 - v34 > 3)
                {
                  float v36 = *v33;
                  float v37 = *(float *)(((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                  *((void *)a3 + 2) = (((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                  WebKit::RemoteRenderPassEncoder::setViewport((WebKit::RemoteRenderPassEncoder *)v4, v21, v22, v26, v30, v36, v37);
                  goto LABEL_84;
                }
              }
            }
          }
        }
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v39 = *((void *)a3 + 3);
        if (v39)
        {
          if (v14)
          {
            (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
            uint64_t v50 = *(void *)a3;
            uint64_t v51 = *((void *)a3 + 1);
            uint64_t v52 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            if (v52)
            {
              if (v51) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 16))(v52, v50);
              }
            }
          }
        }
LABEL_97:
        uint64_t v40 = *(void *)a3;
        uint64_t v41 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v42 = *((void *)a3 + 3);
        if (v42 && v41) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
        }
LABEL_84:
        char v38 = (uint64_t **)&v54;
LABEL_94:
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v38);
        break;
      case 0x522:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>>(a3, &v54);
        if ((_BYTE)v59) {
          WebKit::RemoteRenderPassEncoder::unsetVertexBuffer((uint64_t)v4, v54, v55, (uint64_t)v56, v57, v58);
        }
        goto LABEL_93;
      default:
        return this;
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteRenderPipeline::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    switch(v5)
    {
      case 1317:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
        if ((_BYTE)v14)
        {
          WebKit::RemoteRenderPipeline::setLabel((uint64_t)v4, (uint64_t *)&v13);
          if ((_BYTE)v14)
          {
            uint64_t v11 = v13;
            uint64_t v13 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2) {
                WTF::StringImpl::destroy(v11, v10);
              }
              else {
                *(_DWORD *)v11 -= 2;
              }
            }
          }
        }
        break;
      case 1316:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, (uint64_t)&v13);
        if (v15) {
          WebKit::RemoteRenderPipeline::getBindGroupLayout(v4, v13, v14);
        }
        break;
      case 1315:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
        uint64_t v6 = *((void *)v4[3] + 1);
        uint64_t v7 = (_DWORD *)(v6 + 8);
        ++*(_DWORD *)(v6 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v6, (uint64_t)v4[6]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
        int v9 = &v13;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
      default:
        return this;
    }
    int v9 = (WTF::StringImpl **)&v12;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteSampler::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 1362)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemoteSampler::setLabel(v4, (uint64_t *)&v13);
        if (v14)
        {
          uint64_t v11 = v13;
          uint64_t v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      int v9 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 != 1361) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
      uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
      uint64_t v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      int v9 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteShaderModule::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    switch(v5)
    {
      case 1374:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v20);
        if ((_BYTE)v21)
        {
          WebKit::RemoteShaderModule::setLabel(v4, (uint64_t *)&v20);
          if ((_BYTE)v21)
          {
            char v14 = v20;
            uint64_t v20 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v13);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
        }
        __int16 v12 = &v19;
        break;
      case 1373:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, a2 + 5);
        uint64_t v15 = *(void *)(*(void *)(v4 + 24) + 8);
        unint64_t v16 = (_DWORD *)(v15 + 8);
        ++*(_DWORD *)(v15 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v15, *(void *)(v4 + 48));
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v16, v17);
        __int16 v12 = (uint64_t **)&v20;
        break;
      case 1372:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v18, a2 + 5);
        uint64_t v6 = v18;
        uint64_t v7 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v8)
        {
          int v9 = v7;
          uint64_t v20 = v7;
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
          uint64_t v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v10 = (uint64_t)&unk_1EE9BD718;
          v10[1] = (uint64_t)v9;
          float v21 = 0;
          v10[2] = (uint64_t)v6;
          unint64_t v19 = v10;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
          WebKit::RemoteShaderModule::compilationInfo(v4, (uint64_t *)&v19);
          uint64_t v11 = v19;
          unint64_t v19 = 0;
          if (v11) {
            (*(void (**)(uint64_t *))(*v11 + 8))(v11);
          }
        }
        __int16 v12 = (uint64_t **)&v18;
        break;
      default:
        return this;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v12);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteTextDetector::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1406 && *(unsigned char *)(*(void *)(*((void *)this[4] + 1) + 48) + 397) != 0)
  {
    uint64_t v5 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v15, a2 + 5);
    uint64_t v6 = (atomic_uchar *volatile *)v15[0];
    uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    if (v8)
    {
      uint64_t v9 = v7;
      uint64_t v10 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v11)
      {
        __int16 v12 = v10;
        v15[1] = v10;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
        uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v13 = &unk_1EE9BD740;
        v13[1] = v12;
        unint64_t v16 = 0;
        uint64_t v17 = v13;
        v13[2] = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
        WebKit::RemoteTextDetector::detect(v5, v9, (uint64_t *)&v17);
        uint64_t v14 = (uint64_t)v17;
        uint64_t v17 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v15);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteTexture::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*((void *)this[8] + 1) + 78))
  {
    uint64_t v4 = this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x581:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v38, a2 + 5);
        unint64_t v5 = *((void *)a3 + 1);
        uint64_t v6 = *(void *)a3;
        unint64_t v7 = *((void *)a3 + 2) - *(void *)a3;
        if (v5 <= v7)
        {
          unint64_t v24 = 0;
          uint64_t v25 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v26 = *((void *)a3 + 3);
          if (v26)
          {
            if (v5)
            {
              (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
              uint64_t v25 = *(void *)a3;
              unint64_t v24 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v24 = 0;
              uint64_t v25 = 0;
            }
          }
        }
        else
        {
          char v8 = (unsigned char *)(v6 + v7);
          *((void *)a3 + 2) = v8 + 1;
          if (v6)
          {
            unsigned int v9 = *v8;
            if (v9 < 2)
            {
              if (*v8)
              {
                IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::decode(a3, (uint64_t)&v39);
                if (!v41)
                {
                  uint64_t v29 = *(void *)a3;
                  uint64_t v30 = *((void *)a3 + 1);
                  *(void *)a3 = 0;
                  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
                  uint64_t v31 = *((void *)a3 + 3);
                  if (!v31
                    || !v30
                    || ((*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29), !v41))
                  {
LABEL_50:
                    uint64_t v32 = *(void *)a3;
                    uint64_t v33 = *((void *)a3 + 1);
                    *(void *)a3 = 0;
                    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
                    uint64_t v34 = *((void *)a3 + 3);
                    if (v34 && v33) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
                    }
                    LOBYTE(v39) = 0;
                    char v43 = 0;
                    goto LABEL_52;
                  }
                }
                uint64_t v10 = v39;
                *(_OWORD *)uint64_t v44 = v40[0];
                *(_OWORD *)&v44[13] = *(_OWORD *)((char *)v40 + 13);
              }
              else
              {
                uint64_t v10 = 0;
              }
              uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
              LOBYTE(v39) = 0;
              uint64_t v19 = v18;
              if ((_BYTE)v18)
              {
                char v41 = 0;
                if (v9)
                {
                  uint64_t v39 = v10;
                  v40[0] = *(_OWORD *)v44;
                  *(_OWORD *)((char *)v40 + 13) = *(_OWORD *)&v44[13];
                  char v41 = 1;
                  uint64_t v10 = 0;
                }
                uint64_t v42 = v17;
                char v20 = 1;
              }
              else
              {
                char v20 = 0;
              }
              char v43 = v20;
              if (v9) {
                BOOL v21 = v10 == 0;
              }
              else {
                BOOL v21 = 1;
              }
              if (!v21)
              {
                if (*(_DWORD *)v10 == 2)
                {
                  WTF::StringImpl::destroy(v10, v18);
                  if (v19)
                  {
LABEL_30:
                    if (v43)
                    {
                      WebKit::RemoteTexture::createView(v4, (uint64_t)&v39, v42);
                      if (v43)
                      {
                        if (v41)
                        {
                          unint64_t v23 = v39;
                          uint64_t v39 = 0;
                          if (v23)
                          {
                            if (*(_DWORD *)v23 == 2) {
                              WTF::StringImpl::destroy(v23, v22);
                            }
                            else {
                              *(_DWORD *)v23 -= 2;
                            }
                          }
                        }
                      }
                    }
                    unint64_t v16 = (WTF::StringImpl **)&v38;
                    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v16);
                  }
LABEL_52:
                  uint64_t v35 = *(void *)a3;
                  uint64_t v36 = *((void *)a3 + 1);
                  *(void *)a3 = 0;
                  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
                  uint64_t v37 = *((void *)a3 + 3);
                  if (v37 && v36) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
                  }
                  goto LABEL_30;
                }
                *(_DWORD *)v10 -= 2;
              }
              if ((_BYTE)v18) {
                goto LABEL_30;
              }
              goto LABEL_52;
            }
LABEL_46:
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            uint64_t v28 = *((void *)a3 + 3);
            if (v28 && v5) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v6);
            }
            goto LABEL_50;
          }
          unint64_t v24 = v5;
          uint64_t v25 = 0;
        }
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v27 = *((void *)a3 + 3);
        if (v27)
        {
          if (v24)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v25, v24);
            uint64_t v6 = *(void *)a3;
            unint64_t v5 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v5 = 0;
            uint64_t v6 = 0;
          }
        }
        goto LABEL_46;
      case 0x582:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v39, a2 + 5);
        WebKit::RemoteTexture::destroy((WebKit::RemoteTexture *)v4);
        goto LABEL_16;
      case 0x583:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v39, a2 + 5);
        uint64_t v11 = *((void *)v4[3] + 1);
        __int16 v12 = (_DWORD *)(v11 + 8);
        ++*(_DWORD *)(v11 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v11, (uint64_t)v4[5]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v12, v13);
LABEL_16:
        unint64_t v16 = &v39;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v16);
      case 0x584:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v44, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v39);
        if (LOBYTE(v40[0]))
        {
          WebKit::RemoteTexture::setLabel((uint64_t)v4, (uint64_t *)&v39);
          if (LOBYTE(v40[0]))
          {
            uint64_t v15 = v39;
            uint64_t v39 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v14);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
          }
        }
        unint64_t v16 = (WTF::StringImpl **)v44;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v16);
      default:
        return this;
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteTextureView::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 1408)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemoteTextureView::setLabel(v4, (uint64_t *)&v13);
        if (v14)
        {
          uint64_t v11 = v13;
          uint64_t v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      unsigned int v9 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 != 1407) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
      uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
      unint64_t v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      unsigned int v9 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

void WebKit::RemoteVideoFrameObjectHeap::didReceiveMessage(WebKit::RemoteVideoFrameObjectHeap *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x589:
      IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, &v22);
      if (!(_BYTE)v23) {
        goto LABEL_25;
      }
      unint64_t v5 = *((void *)a3 + 1);
      uint64_t v6 = *(void *)a3;
      unint64_t v7 = *((void *)a3 + 2) - *(void *)a3;
      if (v5 <= v7)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v17 = *((void *)a3 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
            uint64_t v16 = *(void *)a3;
            unint64_t v15 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        char v8 = (unsigned __int8 *)(v6 + v7);
        *((void *)a3 + 2) = v8 + 1;
        if (v6)
        {
          unsigned int v9 = *v8;
          if (v9 < 2)
          {
            long long v25 = v22;
            LOBYTE(v26) = v9 != 0;
            char v27 = 1;
            WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(this, &v25, v9 != 0);
            return;
          }
LABEL_24:
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v19 = *((void *)a3 + 3);
          if (v19 && v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v6);
          }
LABEL_25:
          uint64_t v14 = *(void *)a3;
          uint64_t v20 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v13 = *((void *)a3 + 3);
          if (v13) {
            BOOL v21 = v20 == 0;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21) {
            goto LABEL_21;
          }
          return;
        }
        unint64_t v15 = v5;
        uint64_t v16 = 0;
      }
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v18 = *((void *)a3 + 3);
      if (v18)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
          uint64_t v6 = *(void *)a3;
          unint64_t v5 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
        }
      }
      goto LABEL_24;
    case 0x58A:
      uint64_t v10 = (WebKit *)IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode((uint64_t *)a3, (uint64_t)&v25);
      if (v27)
      {
        long long v22 = v25;
        uint64_t v23 = v26;
        char v24 = 1;
        WebKit::remoteVideoFrameObjectHeapQueue(v10);
        IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::remove((uint64_t)this + 32, &v22);
        return;
      }
      uint64_t v11 = *(void *)a3;
      uint64_t v12 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v13 = *((void *)a3 + 3);
      if (!v13)
      {
        uint64_t v12 = 0;
LABEL_18:
        uint64_t v14 = 0;
        goto LABEL_19;
      }
      if (!v12) {
        goto LABEL_18;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      uint64_t v14 = *(void *)a3;
      uint64_t v12 = *((void *)a3 + 1);
      uint64_t v13 = *((void *)a3 + 3);
LABEL_19:
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      if (v13 && v12) {
LABEL_21:
      }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v14);
      return;
    case 0x58B:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v25);
      if ((_BYTE)v26)
      {
        WebKit::RemoteVideoFrameObjectHeap::setSharedVideoFrameMemory((uint64_t)this);
        if ((_BYTE)v26) {
          goto LABEL_13;
        }
      }
      return;
    case 0x58C:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v25);
      if (BYTE8(v25))
      {
        WebKit::RemoteVideoFrameObjectHeap::setSharedVideoFrameSemaphore((uint64_t)this, (IPC::Semaphore *)&v25);
        if (BYTE8(v25))
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v25);
LABEL_13:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v25);
        }
      }
      return;
    default:
      return;
  }
}

IPC::Encoder *WebKit::RemoteVideoFrameObjectHeap::didReceiveSyncMessage(WebKit *a1, atomic_uchar *volatile *a2, uint64_t a3, uint64_t *a4)
{
  int v8 = *(unsigned __int16 *)(a3 + 50);
  if (v8 != 3735)
  {
    if (v8 != 3736) {
      return 0;
    }
    IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v30);
    BOOL v9 = v31 != 0;
    if (v31)
    {
      *(_OWORD *)char v27 = *(_OWORD *)v30;
      char v28 = 1;
      uint64_t v10 = *a4;
      *a4 = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v11 = &unk_1EE9BD768;
      v11[1] = v10;
      v30[0] = 0;
      v30[1] = 0;
      _OWORD v11[2] = a2;
      uint64_t v29 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30[1]);
      uint64_t v13 = v30[0];
      v30[0] = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v12);
        WTF::fastFree(v25, v26);
      }
      WebKit::RemoteVideoFrameObjectHeap::pixelBuffer(a1, v27, (uint64_t *)&v29);
      uint64_t v14 = (uint64_t)v29;
      uint64_t v29 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    else
    {
      uint64_t v20 = *(void *)a3;
      uint64_t v21 = *(void *)(a3 + 8);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v22 = *(void *)(a3 + 24);
      if (v22 && v21) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
      }
    }
    return (IPC::Encoder *)v9;
  }
  IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>((IPC::Decoder *)a3, (uint64_t)v30);
  BOOL v9 = v34 != 0;
  if (!v34) {
    return (IPC::Encoder *)v9;
  }
  uint64_t v15 = *a4;
  *a4 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EE9BD7B0;
  v16[1] = v15;
  v27[0] = 0;
  v27[1] = 0;
  void v16[2] = a2;
  uint64_t v29 = v16;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v27[1]);
  uint64_t result = v27[0];
  v27[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  if (v34)
  {
    WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer((uint64_t)a1, (uint64_t)v30, (uint64_t *)&v29);
    uint64_t v19 = (uint64_t)v29;
    uint64_t v29 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    if (v34 && v33 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9BD780[v33])(v27, &v32);
    }
    return (IPC::Encoder *)v9;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteShaderModule15CompilationInfoEN6WebKit18RemoteShaderModuleES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_6WebGPU18CompilationMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteShaderModule15CompilationInfoEN6WebKit18RemoteShaderModuleES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_6WebGPU18CompilationMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BD718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteShaderModule15CompilationInfoEN6WebKit18RemoteShaderModuleES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_6WebGPU18CompilationMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3188;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 48 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::encode(v5, v7);
      v7 += 48;
      v8 -= 48;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteTextDetector6DetectEN6WebKit18RemoteTextDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedTextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD740;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteTextDetector6DetectEN6WebKit18RemoteTextDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedTextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BD740;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteTextDetector6DetectEN6WebKit18RemoteTextDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedTextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3195;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 40 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::encode(v5, v7);
      v7 += 40;
      v8 -= 40;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS2_29ObjectIdentifierReadReferenceINS_23ObjectIdentifierGenericINS7_30RemoteVideoFrameIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvNS_9RetainPtrIP10__CVBufferEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD768;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS2_29ObjectIdentifierReadReferenceINS_23ObjectIdentifierGenericINS7_30RemoteVideoFrameIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvNS_9RetainPtrIP10__CVBufferEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD768;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS2_29ObjectIdentifierReadReferenceINS_23ObjectIdentifierGenericINS7_30RemoteVideoFrameIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvNS_9RetainPtrIP10__CVBufferEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<__CVBuffer *,void>::encode(*(void *)(a1 + 8), *a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

void IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebKit::SharedVideoFrame>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::SharedVideoFrame>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::SharedVideoFrame>(a1, (uint64_t)&v4);
  if (v8)
  {
    *(_OWORD *)a2 = v4;
    *(_DWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(a2 + 24, (uint64_t)v6);
    int v3 = v8;
    *(unsigned char *)(a2 + 48) = 1;
    if (v3)
    {
      if (v7 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9BD780[v7])(&v9, v6);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS7_16SharedVideoFrameEONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS7_16SharedVideoFrameEONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS7_16SharedVideoFrameEONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

void WebKit::NetworkTransportSendStream::sendBytes(NSObject **a1, void *a2, WTF *this)
{
  long long v4 = *a1;
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v6 = WTF::fastMalloc(this);
    int v7 = (const void *)v6;
    unsigned __int8 v8 = 0;
    do
    {
      *((unsigned char *)v8 + v6) = *((unsigned char *)v8 + (void)a2);
      unsigned __int8 v8 = (WTF *)((char *)v8 + 1);
    }
    while (this != v8);
  }
  else
  {
    int v7 = 0;
  }
  WTF::fastFree(0, a2);
  destructor[0] = MEMORY[0x1E4F143A8];
  destructor[1] = 3221225472;
  destructor[2] = ___ZZN6WebKit26NetworkTransportSendStream9sendBytesENSt3__14spanIKhLm18446744073709551615EEEbENK3__0clEON3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEE_block_invoke;
  destructor[3] = &__block_descriptor_40_e5_v8__0l;
  destructor[4] = v7;
  char v9 = dispatch_data_create(v7, this, MEMORY[0x1E4F14428], destructor);
  nw_connection_send(v4, v9, (nw_content_context_t)*MEMORY[0x1E4F38C58], 1, &__block_literal_global_10);
  if (v9) {
    CFRelease(v9);
  }
}

void sub_198A8355C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkTransportSession::initialize(uint64_t a1, WTF::URL *this, uint64_t *a3)
{
  if ((WTF::URL::port(this) & 0xFF0000) != 0)
  {
    uint64_t v6 = WTF::URL::port(this);
  }
  else
  {
    WTF::URL::protocol(this);
    uint64_t v6 = WTF::defaultPortForProtocol();
  }
  unsigned __int16 v7 = v6;
  if ((v6 & 0xFF0000) == 0)
  {
    uint64_t v36 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()(a3);
LABEL_45:
    uint64_t v36 = 0;
    return;
  }
  uint64_t v36 = WTF::URL::host(this);
  uint64_t v37 = v8;
  WTF::StringView::utf8();
  LODWORD(v9) = 0;
  unsigned __int16 v10 = v7;
  do
  {
    uint64_t v9 = (v9 + 1);
    unsigned int v11 = v10;
    v10 /= 0xAu;
  }
  while (v11 > 9);
  if (v35) {
    uint64_t v12 = (char *)v35 + 16;
  }
  else {
    uint64_t v12 = 0;
  }
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_59;
  }
  if (!v9)
  {
    uint64_t v13 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_17;
  }
  WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
  uint64_t v13 = v40;
  if (!v40)
  {
LABEL_59:
    __break(0xC471u);
    return;
  }
  uint64_t v14 = 0;
  uint64_t v15 = v40 + 5;
  _DWORD *v40 = 2;
  v13[1] = v9;
  *((void *)v13 + nw_tcp_options_set_no_delay(options, 1) = v13 + 5;
  v13[4] = 4;
  do
  {
    unsigned int v16 = v7;
    *((unsigned char *)&v40 + v14-- + 6) = (v7 % 0xAu) | 0x30;
    v7 /= 0xAu;
  }
  while (v16 > 9);
  if (v14 + 8 <= 7) {
    memcpy(v15, (char *)&v40 + v14 + 7, -v14);
  }
LABEL_17:
  WTF::String::utf8();
  if (v34) {
    uint64_t v17 = (char *)v34 + 16;
  }
  else {
    uint64_t v17 = 0;
  }
  host = nw_endpoint_create_host(v12, v17);
  if (v34)
  {
    if (*(_DWORD *)v34 == 1) {
      WTF::fastFree(v34, v18);
    }
    else {
      --*(_DWORD *)v34;
    }
  }
  if (v13)
  {
    if (*v13 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v13, (WTF::StringImpl *)v18);
    }
    else {
      *v13 -= 2;
    }
  }
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
    {
      WTF::fastFree(v35, v18);
      if (host) {
        goto LABEL_33;
      }
      goto LABEL_44;
    }
    --*(_DWORD *)v35;
  }
  if (!host)
  {
LABEL_44:
    uint64_t v36 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()(a3);
    goto LABEL_45;
  }
LABEL_33:
  multiplex = nw_group_descriptor_create_multiplex(host);
  if (multiplex)
  {
    uint64_t v36 = MEMORY[0x1E4F143A8];
    uint64_t v37 = 3321888768;
    char v38 = ___ZZN6WebKit23NetworkTransportSession10initializeERNS_29NetworkConnectionToWebProcessEON3WTF3URLEONS3_17CompletionHandlerIFvONS3_6RefPtrIS0_NS3_12RawPtrTraitsIS0_EENS3_21DefaultRefDerefTraitsIS0_EEEEEEEENK3__0cvU13block_pointerFvPU33objcproto22OS_nw_protocol_options8NSObjectEEv_block_invoke;
    uint64_t v39 = &__block_descriptor_33_e8_32c209_ZTSKZN6WebKit23NetworkTransportSession10initializeERNS_29NetworkConnectionToWebProcessEON3WTF3URLEONS3_17CompletionHandlerIFvONS3_6RefPtrIS0_NS3_12RawPtrTraitsIS0_EENS3_21DefaultRefDerefTraitsIS0_EEEEEEEE3__0_e42_v16__0__NSObject_OS_nw_protocol_options__8l;
    objc_msgSend((id)objc_msgSend(&v36, "copy"), "autorelease");
    quic_stream = nw_parameters_create_quic_stream();
    if (quic_stream)
    {
      nw_connection_group_t v22 = nw_connection_group_create(multiplex, quic_stream);
      if (v22)
      {
        uint64_t v23 = WTF::fastMalloc((WTF *)0x58);
        *(_DWORD *)(v23 + 16) = 1;
        *(void *)(v23 + 8) = 0;
        char v24 = (unsigned int *)(v23 + 8);
        *(void *)uint64_t v23 = &unk_1EE9B71B0;
        *(void *)(v23 + 24) = &unk_1EEA102E8;
        uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
        *(void *)uint64_t v23 = &unk_1EE9CDDE8;
        *(void *)(v23 + 24) = &unk_1EE9CDE30;
        *(void *)(v23 + 32) = IdentifierInternal;
        *(void *)(v23 + 40) = 0;
        *(void *)(v23 + 48) = 0;
        *(void *)(v23 + 56) = 0;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
        uint64_t v26 = *(atomic_uint **)(a1 + 56);
        if (v26) {
          atomic_fetch_add(v26, 1u);
        }
        *(void *)(v23 + 64) = v26;
        *(void *)(v23 + 72) = v22;
        CFRetain(v22);
        *(void *)(v23 + 80) = host;
        CFRetain(host);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v24, v23);
        char v27 = *(atomic_uint **)v24;
        if (*(void *)v24) {
          atomic_fetch_add(v27, 1u);
        }
        char v28 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
        void *v28 = MEMORY[0x1E4F14398];
        v28[1] = 50331650;
        v28[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL)>::fromCallable<WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0>(WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0)::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL)#1}::__invoke;
        v28[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL)>::fromCallable<WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0>(WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0)::descriptor;
        v28[4] = v27;
        nw_connection_group_set_receive_handler(v22, 0xFFFFFFFF, 0, v28);
        _Block_release(v28);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v24, v23);
        uint64_t v29 = *(atomic_uint **)v24;
        if (*(void *)v24) {
          atomic_fetch_add(v29, 1u);
        }
        uint64_t v30 = *a3;
        *a3 = 0;
        char v31 = malloc_type_malloc(0x38uLL, 0x10E004099C88F60uLL);
        void *v31 = MEMORY[0x1E4F14398];
        v31[1] = 50331650;
        v31[2] = WTF::BlockPtr<void ()(nw_connection_group_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1)::{lambda(void *,nw_connection_group_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
        v31[3] = &WTF::BlockPtr<void ()(nw_connection_group_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1)::descriptor;
        v31[4] = v23;
        v31[5] = v29;
        v31[6] = v30;
        nw_connection_group_set_state_changed_handler(v22, v31);
        _Block_release(v31);
        nw_connection_group_set_queue(v22, MEMORY[0x1E4F14428]);
        nw_connection_group_start(v22);
        CFRelease(v22);
      }
      else
      {
        uint64_t v36 = 0;
        WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()(a3);
        int v33 = (_DWORD *)v36;
        uint64_t v36 = 0;
        if (v33)
        {
          if (v33[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v33 + 8))(v33);
          }
          else {
            --v33[4];
          }
        }
      }
      CFRelease(quic_stream);
    }
    else
    {
      uint64_t v36 = 0;
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()(a3);
      uint64_t v32 = (_DWORD *)v36;
      uint64_t v36 = 0;
      if (v32)
      {
        if (v32[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v32 + 8))(v32);
        }
        else {
          --v32[4];
        }
      }
    }
    CFRelease(multiplex);
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()(a3);
    uint64_t v36 = 0;
  }
  CFRelease(host);
}

void sub_198A83BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, WTF *a12, _DWORD *a13)
{
  if (a13)
  {
    if (a13[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a13 + 8))(a13);
    }
    else {
      --a13[4];
    }
  }
  CFRelease(v15);
  CFRelease(v14);
  CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A83FF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::NetworkTransportSession::sendDatagram(uint64_t a1, void *a2, WTF *this, uint64_t *a4)
{
  unsigned __int16 v7 = *(NSObject **)(a1 + 72);
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v9 = WTF::fastMalloc(this);
    unsigned __int16 v10 = (const void *)v9;
    unsigned int v11 = 0;
    do
    {
      *((unsigned char *)v11 + v9) = *((unsigned char *)v11 + (void)a2);
      unsigned int v11 = (WTF *)((char *)v11 + 1);
    }
    while (this != v11);
  }
  else
  {
    unsigned __int16 v10 = 0;
  }
  WTF::fastFree(0, a2);
  destructor[0] = MEMORY[0x1E4F143A8];
  destructor[1] = 3221225472;
  destructor[2] = ___ZZN6WebKit23NetworkTransportSession12sendDatagramENSt3__14spanIKhLm18446744073709551615EEEON3WTF17CompletionHandlerIFvvEEEENK3__1clEONS5_6VectorIhLm0ENS5_15CrashOnOverflowELm16ENS5_10FastMallocEEE_block_invoke;
  destructor[3] = &__block_descriptor_40_e5_v8__0l;
  destructor[4] = v10;
  uint64_t v12 = dispatch_data_create(v10, this, MEMORY[0x1E4F14428], destructor);
  uint64_t v13 = *(NSObject **)(a1 + 80);
  uint64_t v14 = *a4;
  *a4 = 0;
  uint64_t v15 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  unsigned int v16 = *MEMORY[0x1E4F38C58];
  void *v15 = MEMORY[0x1E4F14398];
  v15[1] = 50331650;
  void v15[2] = WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v15[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v15[4] = v14;
  nw_connection_group_send_message(v7, v12, v13, v16, v15);
  _Block_release(v15);
  if (v12) {
    CFRelease(v12);
  }
}

void sub_198A841C4(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void WebKit::NetworkTransportSession::createBidirectionalStream(uint64_t a1, uint64_t *a2)
{
  nw_connection_t connection = nw_connection_group_extract_connection(*(nw_connection_group_t *)(a1 + 72), *(nw_endpoint_t *)(a1 + 80), 0);
  if (connection)
  {
    int v5 = connection;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v6 = *(atomic_uint **)(a1 + 8);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x30);
    WebKit::NetworkTransportBidirectionalStream::NetworkTransportBidirectionalStream(v8, a1, v5);
    uint64_t v9 = malloc_type_malloc(0x38uLL, 0x10E004099C88F60uLL);
    *uint64_t v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    v9[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>(WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
    v9[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>(WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0)::descriptor;
    v9[4] = v6;
    v9[5] = v7;
    v9[6] = v8;
    nw_connection_set_state_changed_handler(v5, v9);
    _Block_release(v9);
    nw_connection_set_queue(v5, MEMORY[0x1E4F14428]);
    nw_connection_start(v5);
    CFRelease(v5);
  }
  else
  {
    WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>::operator()(a2);
  }
}

void sub_198A84384(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  _Block_release(v3);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A844A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkTransportSession::createOutgoingUnidirectionalStream(uint64_t a1, uint64_t *a2)
{
  return WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>::operator()(a2);
}

uint64_t ___ZZN6WebKit26NetworkTransportSendStream9sendBytesENSt3__14spanIKhLm18446744073709551615EEEbENK3__0clEON3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEE_block_invoke(uint64_t a1, void *a2)
{
  return WTF::fastFree(*(WTF **)(a1 + 32), a2);
}

unsigned int *WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL)>::fromCallable<WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0>(WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

IPC::Encoder *WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL)>::fromCallable<WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0>(WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkConnectionToWebProcess &,NSObject {objcproto22OS_nw_connection_group}*,NSObject {objcproto14OS_nw_endpoint}*)::$_0)::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL)#1}::__invoke(IPC::Encoder *result, dispatch_data_t data)
{
  uint64_t v2 = *((void *)result + 4);
  if (v2)
  {
    uint64_t v3 = *(_DWORD **)(v2 + 8);
    if (v3)
    {
      ++v3[4];
      uint64_t v11 = 0;
      uint64_t v12 = &v11;
      uint64_t v13 = 0x4012000000;
      uint64_t v14 = __Block_byref_object_copy__2;
      uint64_t v15 = __Block_byref_object_dispose__2;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = ___ZZZN6WebKit23NetworkTransportSessionC1ERNS_29NetworkConnectionToWebProcessEPU33objcproto22OS_nw_connection_group8NSObjectPU25objcproto14OS_nw_endpointS3_ENK3__0clEPU27objcproto16OS_dispatch_dataS3_PU32objcproto21OS_nw_content_contextS3_bENKUlSA_E_clESA__block_invoke;
      applier[3] = &unk_1E5811C80;
      applier[4] = &v11;
      dispatch_data_apply(data, applier);
      long long v4 = v12;
      size_t v5 = *((unsigned int *)v12 + 15);
      if (v5)
      {
        uint64_t v6 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)v12 + 15));
        memcpy(v6, (const void *)v4[6], *((unsigned int *)v4 + 15));
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(&v11, 8);
      uint64_t v8 = v17;
      if (v17)
      {
        uint64_t v17 = 0;
        LODWORD(v18) = 0;
        WTF::fastFree(v8, v7);
      }
      uint64_t result = WebKit::NetworkTransportSession::receiveDatagram((uint64_t)v3, v6, v5);
      if (v6) {
        uint64_t result = (IPC::Encoder *)WTF::fastFree((WTF *)v6, v9);
      }
      if (v3[4] == 1) {
        return (IPC::Encoder *)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[4];
      }
    }
  }
  return result;
}

void sub_198A846A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  _Block_object_dispose(&a15, 8);
  long long v25 = a21;
  if (a21)
  {
    a21 = 0;
    a22 = 0;
    WTF::fastFree(v25, v24);
  }
  if (v22[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
  }
  else {
    --v22[4];
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(result + 56) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(result + 60) = v2;
  return result;
}

WTF *__Block_byref_object_dispose__2(uint64_t a1, void *a2)
{
  uint64_t result = *(WTF **)(a1 + 48);
  if (result)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t ___ZZZN6WebKit23NetworkTransportSessionC1ERNS_29NetworkConnectionToWebProcessEPU33objcproto22OS_nw_connection_group8NSObjectPU25objcproto14OS_nw_endpointS3_ENK3__0clEPU27objcproto16OS_dispatch_dataS3_PU32objcproto21OS_nw_content_contextS3_bENKUlSA_E_clESA__block_invoke(uint64_t result, int a2, int a3, void *__src, size_t __n)
{
  if (!__n) {
    return 1;
  }
  uint64_t v7 = *(unsigned int **)(*(void *)(result + 32) + 8);
  size_t v9 = v7[14];
  uint64_t v8 = (WTF::FastMalloc *)v7[15];
  unsigned __int16 v10 = (WTF::FastMalloc *)((char *)v8 + __n);
  if ((unint64_t)v8 + __n > v9)
  {
    unint64_t v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10) {
      unint64_t v12 = v11 + 1;
    }
    else {
      unint64_t v12 = 16;
    }
    if (v12 <= (unint64_t)v10) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = (WTF::FastMalloc *)v12;
    }
    uint64_t result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)(v7 + 12), v13);
    uint64_t v8 = (WTF::FastMalloc *)v7[15];
  }
  if (v10 >= v8)
  {
    memcpy((char *)v8 + *((void *)v7 + 6), __src, __n);
    v7[15] = v10;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    long long v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        a2 = *v4;
        *long long v4 = 0;
        if (a2) {
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v4, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportReceiveStream,WTF::RawPtrTraits<WebKit::NetworkTransportReceiveStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportReceiveStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    long long v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *long long v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    long long v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *long long v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v5 + 8, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void ___ZZN6WebKit23NetworkTransportSession10initializeERNS_29NetworkConnectionToWebProcessEON3WTF3URLEONS3_17CompletionHandlerIFvONS3_6RefPtrIS0_NS3_12RawPtrTraitsIS0_EENS3_21DefaultRefDerefTraitsIS0_EEEEEEEENK3__0cvU13block_pointerFvPU33objcproto22OS_nw_protocol_options8NSObjectEEv_block_invoke()
{
  uint64_t v0 = nw_quic_connection_copy_sec_protocol_options();
  sec_protocol_options_set_peer_authentication_required(v0, 1);
  uint64_t v1 = malloc_type_malloc(0x28uLL, 0x10E0040C0B912BCuLL);
  *uint64_t v1 = MEMORY[0x1E4F14398];
  v1[1] = 50331650;
  v1[2] = WTF::BlockPtr<void ()(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_0::operator() const(NSObject {objcproto22OS_nw_protocol_options}*)::{lambda(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1}>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_0::operator() const(NSObject {objcproto22OS_nw_protocol_options}*)::{lambda(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1})::{lambda(void *,NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1}::__invoke;
  v1[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_0::operator() const(NSObject {objcproto22OS_nw_protocol_options}*)::{lambda(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1}>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_0::operator() const(NSObject {objcproto22OS_nw_protocol_options}*)::{lambda(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1})::descriptor;
  sec_protocol_options_set_verify_block(v0, v1, MEMORY[0x1E4F14428]);
  _Block_release(v1);
  sec_protocol_options_add_tls_application_protocol(v0, "h3");
  if (v0)
  {
    CFRelease(v0);
  }
}

void sub_198A84A28(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_0::operator() const(NSObject {objcproto22OS_nw_protocol_options}*)::{lambda(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1}>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_0::operator() const(NSObject {objcproto22OS_nw_protocol_options}*)::{lambda(NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1})::{lambda(void *,NSObject  {objcproto24OS_sec_protocol_metadata}*,NSObject {objcproto12OS_sec_trust}*,void({block_pointer})(BOOL))#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1);
}

_DWORD *WTF::BlockPtr<void ()(nw_connection_group_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t result = (_DWORD *)a1[4];
  a1[4] = 0;
  if (result)
  {
    if (result[4] == 1)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (_DWORD *)v6();
    }
    else
    {
      --result[4];
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(nw_connection_group_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1>(WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess &,WTF::URL &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)> &&)::$_1)::{lambda(void *,nw_connection_group_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t result, int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(void *)(result + 48);
    result += 48;
    if (v3)
    {
LABEL_3:
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()((uint64_t *)result);
      return 0;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        uint64_t v5 = *(void *)(result + 48);
        result += 48;
        if (v5) {
          goto LABEL_3;
        }
        break;
      case 1:
        return result;
      case 2:
        uint64_t v6 = *(void *)(result + 48);
        result += 48;
        uint64_t v7 = *(_DWORD **)(result - 16);
        *(void *)(result - 16) = 0;
        uint64_t v8 = v7;
        if (v6)
        {
          uint64_t result = WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>> &&)>::operator()((uint64_t *)result);
          uint64_t v7 = v8;
        }
        if (v7)
        {
          if (v7[4] == 1) {
            uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[4];
          }
        }
        break;
      case 3:
      case 4:
        uint64_t v4 = *(void *)(result + 48);
        result += 48;
        if (v4) {
          goto LABEL_3;
        }
        break;
      default:
        uint64_t result = 137;
        __break(0xC471u);
        break;
    }
  }
  return result;
}

void sub_198A84CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[4];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN6WebKit23NetworkTransportSession12sendDatagramENSt3__14spanIKhLm18446744073709551615EEEON3WTF17CompletionHandlerIFvvEEEENK3__1clEONS5_6VectorIhLm0ENS5_15CrashOnOverflowELm16ENS5_10FastMallocEEE_block_invoke(uint64_t a1, void *a2)
{
  return WTF::fastFree(*(WTF **)(a1 + 32), a2);
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkTransportSession::sendDatagram(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 32));
}

unsigned int *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>(WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v3 + 8, a2);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (unsigned int *)a1[4];
  a1[4] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>(WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = a1 + 32;
  if (a3)
  {
LABEL_2:
    uint64_t v7 = 0;
    uint64_t result = (uint64_t)WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_1::operator()((uint64_t *)result, &v7);
LABEL_3:
    if (v7) {
      return WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v7 + 8, v5);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
      case 4:
      case 5:
        goto LABEL_2;
      case 1:
      case 2:
        return result;
      case 3:
        uint64_t v6 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        uint64_t v7 = v6;
        uint64_t result = (uint64_t)WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_1::operator()((uint64_t *)result, &v7);
        goto LABEL_3;
      default:
        uint64_t result = 204;
        __break(0xC471u);
        break;
    }
  }
  return result;
}

void sub_198A84ED0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(a10 + 8, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::NetworkTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_1::operator()(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = result + 1;
  if (!result[1]) {
    return result;
  }
  if (!*result)
  {
    uint64_t v3 = 0;
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)(*result + 8);
  if (!v3)
  {
LABEL_21:
    char v20 = 1;
    goto LABEL_23;
  }
  ++*(_DWORD *)(v3 + 16);
  uint64_t v4 = *a2;
  if (!*a2)
  {
    char v20 = 0;
LABEL_23:
    uint64_t result = (uint64_t *)WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>::operator()(result + 1);
    if (v20) {
      return result;
    }
    goto LABEL_35;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  *a2 = 0;
  uint64_t v7 = (uint64_t *)(v3 + 40);
  uint64_t v6 = *(void *)(v3 + 40);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v3 + 40), 0), (uint64_t v6 = *v7) != 0))
  {
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (void *)(v6 + 16 * v12);
  uint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != v5)
    {
      if (v14 == -1) {
        uint64_t v15 = v13;
      }
      unsigned int v12 = (v12 + v16) & v8;
      uint64_t v13 = (void *)(v6 + 16 * v12);
      uint64_t v14 = *v13;
      ++v16;
      if (!*v13)
      {
        if (v15)
        {
          void *v15 = 0;
          v15[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          uint64_t v13 = v15;
        }
        goto LABEL_16;
      }
    }
    uint64_t v21 = v13[1];
    v13[1] = v4;
    if (v21) {
      WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v21 + 8, a2);
    }
    goto LABEL_34;
  }
LABEL_16:
  uint64_t v17 = v13[1];
  void *v13 = v5;
  v13[1] = v4;
  if (v17) {
    WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v17 + 8, a2);
  }
  uint64_t v18 = *v7;
  if (*v7) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v22 = *v7;
  if (*v7) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (3 * v25 <= 4 * v24) {
LABEL_33:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v3 + 40), v13);
LABEL_34:
  uint64_t result = (uint64_t *)WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>::operator()(v2);
LABEL_35:
  if (*(_DWORD *)(v3 + 16) == 1)
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (uint64_t *)v26(v3);
  }
  else
  {
    --*(_DWORD *)(v3 + 16);
  }
  return result;
}

void sub_198A85154(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportBidirectionalStream,WTF::RawPtrTraits<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportBidirectionalStream>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (void *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v15 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v13);
          uint64_t v16 = v15[1];
          v15[1] = 0;
          if (v16) {
            WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v16 + 8, v10);
          }
          void *v15 = *v13;
          uint64_t v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          uint64_t v18 = v13[1];
          v13[1] = 0;
          if (v18) {
            WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v18 + 8, v10);
          }
          if (v13 == a3) {
            unint64_t v11 = v15;
          }
        }
        else
        {
          uint64_t v14 = v13[1];
          v13[1] = 0;
          if (v14) {
            WTF::RefCounted<WebKit::NetworkTransportReceiveStream>::deref(v14 + 8, v10);
          }
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::didReceiveMessage(atomic_uchar *volatile *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v5 = (atomic_uchar **)(this + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x585:
      IPC::Decoder::decode<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>>(&v15, (uint64_t *)a3);
      v21[0] = 0;
      if (!v19)
      {
        char v24 = 0;
LABEL_45:
        uint64_t v6 = *(void **)a3;
        uint64_t v13 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v14 = *((void *)a3 + 3);
        if (!v14) {
          goto LABEL_39;
        }
        if (!v13) {
          goto LABEL_39;
        }
        (*(void (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, v6);
        if (!v24) {
          goto LABEL_39;
        }
        goto LABEL_30;
      }
      char v23 = 0;
      if (!(_BYTE)v18)
      {
        char v24 = 1;
        goto LABEL_30;
      }
      int v22 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v21, (uint64_t)&v15);
      char v23 = 1;
      char v24 = 1;
      if (v19)
      {
        if ((_BYTE)v18)
        {
          if (v17 != -1)
          {
            ((void (*)(char *, uint64_t *))off_1EE9BD8B8[v17])(&v25, &v15);
            if (!v24) {
              goto LABEL_45;
            }
          }
        }
      }
LABEL_30:
      WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newConvertedVideoFrameBuffer((uint64_t)this, (uint64_t)v21);
      if (v24 && v23 && v22 != -1) {
        ((void (*)(uint64_t *, unsigned char *))off_1EE9BD8B8[v22])(&v15, v21);
      }
      goto LABEL_39;
    case 0x586:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v8
        || (uint64_t v9 = v7,
            IPC::Decoder::decode<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>>(v21, (uint64_t *)a3), !v24))
      {
        LOBYTE(v15) = 0;
        char v20 = 0;
LABEL_25:
        uint64_t v6 = *(void **)a3;
        uint64_t v10 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v11 = *((void *)a3 + 3);
        if (!v11) {
          goto LABEL_39;
        }
        if (!v10) {
          goto LABEL_39;
        }
        (*(void (**)(uint64_t, void *))(*(void *)v11 + 16))(v11, v6);
        if (!v20) {
          goto LABEL_39;
        }
        goto LABEL_35;
      }
      uint64_t v15 = v9;
      v16[0] = 0;
      char v19 = 0;
      if (!v23)
      {
        char v20 = 1;
        goto LABEL_35;
      }
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v16, (uint64_t)v21);
      char v19 = 1;
      char v20 = 1;
      if (v24)
      {
        if (v23)
        {
          if (v22 != -1)
          {
            ((void (*)(char *, unsigned char *))off_1EE9BD8B8[v22])(&v25, v21);
            if (!v20) {
              goto LABEL_25;
            }
          }
        }
      }
LABEL_35:
      WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newVideoFrameBuffer((uint64_t)this, v15, (uint64_t)v16);
      if (v20 && v19 && v18 != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9BD8B8[v18])(v21, v16);
      }
LABEL_39:
      if (this)
      {
        uint64_t v12 = *v5;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v12, v6);
      }
      return;
    case 0x587:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v15);
      if ((_BYTE)v17)
      {
        WebKit::RemoteVideoFrameObjectHeapProxyProcessor::setSharedVideoFrameMemory((uint64_t)this);
        if ((_BYTE)v17) {
          goto LABEL_23;
        }
      }
      goto LABEL_39;
    case 0x588:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v15);
      if (v16[0])
      {
        WebKit::RemoteVideoFrameObjectHeapProxyProcessor::setSharedVideoFrameSemaphore((uint64_t)this, (IPC::Semaphore *)&v15);
        if (v16[0])
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v15);
LABEL_23:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v15);
        }
      }
      goto LABEL_39;
    default:
      goto LABEL_39;
  }
}

void WebKit::RemoteWebLockRegistry::didReceiveMessage(WebKit::RemoteWebLockRegistry *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  ++*((_DWORD *)this + 2);
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 != 1444)
  {
    if (v5 != 1443) {
      goto LABEL_19;
    }
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, (uint64_t)&v20);
    if (!v22) {
      goto LABEL_18;
    }
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a3, (uint64_t)&v25);
    if (!v27) {
      goto LABEL_18;
    }
    unint64_t v6 = *((void *)a3 + 1);
    uint64_t v7 = *(void *)a3;
    unint64_t v8 = *((void *)a3 + 2) - *(void *)a3;
    if (v6 <= v8) {
      goto LABEL_15;
    }
    uint64_t v9 = (unsigned __int8 *)(v7 + v8);
    *((void *)a3 + 2) = v9 + 1;
    if (!v7)
    {
      unint64_t v11 = v6;
      uint64_t v12 = 0;
LABEL_16:
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v14 = *((void *)a3 + 3);
      if (v14)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
          uint64_t v7 = *(void *)a3;
          unint64_t v6 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v6 = 0;
          uint64_t v7 = 0;
        }
      }
      goto LABEL_17;
    }
    unsigned int v10 = *v9;
    if (v10 >= 2)
    {
LABEL_17:
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v15 = *((void *)a3 + 3);
      if (v15 && v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v7);
      }
      goto LABEL_18;
    }
    if (v22)
    {
      long long v23 = v25;
      long long v24 = v26;
      WebKit::RemoteWebLockRegistry::didCompleteLockRequest((uint64_t)this, v20, v21, (uint64_t *)&v23, v10 != 0);
      goto LABEL_19;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v13 = *((void *)a3 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a3;
        unint64_t v11 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_16;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, (uint64_t)&v20);
  if (v22)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a3, (uint64_t)&v25);
    if (v27)
    {
      if (v22)
      {
        long long v23 = v25;
        long long v24 = v26;
        WebKit::RemoteWebLockRegistry::didStealLock((uint64_t)this, v20, v21, (uint64_t *)&v23);
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_18:
  uint64_t v16 = *(void *)a3;
  uint64_t v17 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t v18 = *((void *)a3 + 3);
  if (v18 && v17) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
  }
LABEL_19:
  if (*((_DWORD *)this + 2) == 1)
  {
    char v19 = *(void (**)(WebKit::RemoteWebLockRegistry *))(*(void *)this + 8);
    v19(this);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
}

void non-virtual thunk to'WebKit::RemoteWebLockRegistry::didReceiveMessage(WebKit::RemoteWebLockRegistry *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

atomic_uchar *volatile **WebKit::RemoteXRBinding::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[6] + 1) + 77))
  {
    int v4 = this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 1445)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, a2 + 5);
      unsigned __int16 v19 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>((uint64_t *)a3);
      if (v19 < 0x100u) {
        goto LABEL_23;
      }
      char v20 = v19;
      uint64_t v21 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>((uint64_t *)a3);
      if ((v21 & 0xFF0000) == 0) {
        goto LABEL_23;
      }
      __int16 v22 = v21;
      unsigned __int16 v23 = IPC::Decoder::decode<WTF::OptionSet<WebCore::WebGPU::TextureUsage>>((uint64_t *)a3);
      if (v23 < 0x100u) {
        goto LABEL_23;
      }
      unint64_t v24 = *((void *)a3 + 1);
      uint64_t v25 = *(void *)a3;
      unint64_t v26 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v24 < v26 || v24 - v26 <= 7)
      {
        unint64_t v40 = 0;
        uint64_t v41 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v42 = *((void *)a3 + 3);
        if (v42)
        {
          if (v24)
          {
            (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
            uint64_t v41 = *(void *)a3;
            unint64_t v40 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v40 = 0;
            uint64_t v41 = 0;
          }
        }
      }
      else
      {
        char v27 = (double *)(v25 + v26);
        *((void *)a3 + 2) = v27 + 1;
        if (v25)
        {
          char v28 = v23;
          double v29 = *v27;
          uint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
          if (v31)
          {
            WebKit::RemoteXRBinding::createProjectionLayer(v4, v20, v22, v28, v30, v29);
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
          }
LABEL_23:
          uint64_t v37 = *(void *)a3;
          uint64_t v38 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v39 = *((void *)a3 + 3);
          if (v39)
          {
            if (v38) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37);
            }
          }
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
        }
        unint64_t v40 = v24;
        uint64_t v41 = 0;
      }
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v43 = *((void *)a3 + 3);
      if (v43 && v40) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v41);
      }
      goto LABEL_23;
    }
    if (v5 != 1447)
    {
      if (v5 != 1446) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, a2 + 5);
      uint64_t v6 = *((void *)v4[3] + 1);
      uint64_t v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, (uint64_t)v4[5]);
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, a2 + 5);
    uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v10) {
      goto LABEL_23;
    }
    unint64_t v11 = *((void *)a3 + 1);
    uint64_t v12 = *(void *)a3;
    unint64_t v13 = *((void *)a3 + 2) - *(void *)a3;
    if (v11 <= v13)
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v34 = *((void *)a3 + 3);
      if (v34)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
          uint64_t v33 = *(void *)a3;
          unint64_t v32 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v32 = 0;
          uint64_t v33 = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = (unsigned __int8 *)(v12 + v13);
      *((void *)a3 + 2) = v14 + 1;
      if (v12)
      {
        uint64_t v15 = *v14;
        if (v15 < 3)
        {
          uint64_t v16 = v9;
          uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
          if (v18)
          {
            WebKit::RemoteXRBinding::getViewSubImage(v4, v16, v15, v17);
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
          }
          goto LABEL_23;
        }
LABEL_22:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v36 = *((void *)a3 + 3);
        if (v36 && v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v12);
        }
        goto LABEL_23;
      }
      unint64_t v32 = v11;
      uint64_t v33 = 0;
    }
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v35 = *((void *)a3 + 3);
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
        uint64_t v12 = *(void *)a3;
        unint64_t v11 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_22;
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteXRProjectionLayer::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[6] + 1) + 77))
  {
    uint64_t v3 = this;
    int v4 = *((unsigned __int16 *)a3 + 25);
    switch(v4)
    {
      case 1448:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, a2 + 5);
        uint64_t v5 = *((void *)v3[3] + 1);
        uint64_t v6 = (_DWORD *)(v5 + 8);
        ++*(_DWORD *)(v5 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v5, (uint64_t)v3[5]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v8);
      case 1449:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, a2 + 5);
        WebKit::RemoteXRProjectionLayer::endFrame((WebKit::RemoteXRProjectionLayer *)v3);
      case 1450:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, a2 + 5);
        WebKit::RemoteXRProjectionLayer::startFrame((WebKit::RemoteXRProjectionLayer *)v3);
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteXRSubImage::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[6] + 1) + 77))
  {
    if (*((_WORD *)a3 + 25) == 1451)
    {
      uint64_t v3 = (uint64_t)this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v7, a2 + 5);
      uint64_t v4 = *(void *)(*(void *)(v3 + 24) + 8);
      uint64_t v5 = (_DWORD *)(v4 + 8);
      ++*(_DWORD *)(v4 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v4, *(void *)(v3 + 40));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v5, v6);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v7);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::ServiceWorkerDownloadTask::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5AF:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>(a3, &v9);
      if (v14)
      {
        this = (WTF::StringImpl *)WebKit::ServiceWorkerDownloadTask::didFail((uint64_t)v3, (uint64_t *)&v9);
        if (v14)
        {
          CFTypeRef v5 = cf;
          CFTypeRef cf = 0;
          if (v5) {
            CFRelease(v5);
          }
          uint64_t v6 = v12;
          uint64_t v12 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, v4);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
          unint64_t v8 = v10;
          char v10 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v4);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
          this = v9;
          uint64_t v9 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v4);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
      break;
    case 0x5B0:
      this = (WTF::StringImpl *)WebKit::ServiceWorkerDownloadTask::didFinish(this, (int *)a2);
      break;
    case 0x5B1:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>(a3, &v9);
      if (v11) {
        WebKit::ServiceWorkerDownloadTask::didReceiveData(v3, (const IPC::SharedBufferReference *)&v9);
      }
      this = (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v7);
      break;
    case 0x5B2:
      this = IPC::Decoder::decode<std::tuple<IPC::FormDataReference>>(a3, (uint64_t)&v9);
      if ((_BYTE)v10)
      {
        this = (WTF::StringImpl *)WebKit::ServiceWorkerDownloadTask::didReceiveFormData((uint64_t)v3);
        if ((_BYTE)v10)
        {
          this = v9;
          uint64_t v9 = 0;
          if (this) {
            this = (WTF::StringImpl *)WTF::RefCounted<WebCore::FormData>::deref(this);
          }
        }
      }
      break;
    default:
      return this;
  }
  return this;
}

WTF::StringImpl *non-virtual thunk to'WebKit::ServiceWorkerDownloadTask::didReceiveMessage(WebKit::ServiceWorkerDownloadTask *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::ServiceWorkerDownloadTask::didReceiveMessage((WebKit::ServiceWorkerDownloadTask *)((char *)this - 560), a2, a3);
}

_DWORD *WebKit::WebBroadcastChannelRegistry::didReceiveMessage(_DWORD *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v4 = this[2];
  this[2] = v4 + 1;
  if (*((_WORD *)a3 + 25) == 1577)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>>((uint64_t *)a3, v15);
    if (v18)
    {
      uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v7)
      {
        uint64_t v9 = v8;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
        char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
        *char v10 = &unk_1EE9BD8E8;
        v10[1] = v9;
        unint64_t v13 = 0;
        char v14 = v10;
        v10[2] = a2;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
        if (!v18) {
          __break(1u);
        }
        WebKit::WebBroadcastChannelRegistry::postMessageToRemote((uint64_t)v3, (uint64_t)v15, &v16, &v17, (uint64_t *)&v14);
        uint64_t v11 = (uint64_t)v14;
        char v14 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
    }
    this = (_DWORD *)std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
    int v4 = v3[2] - 1;
  }
  if (v4)
  {
    v3[2] = v4;
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(_DWORD *))(*(void *)v3 + 8);
    return (_DWORD *)v12(v3);
  }
  return this;
}

unsigned char *IPC::Decoder::decode<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>>(unsigned char *result, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_12:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    *(unsigned char *)uint64_t v3 = 0;
    goto LABEL_15;
  }
  if (!v9)
  {
    void *result = 0;
    result[24] = 0;
    result[32] = 1;
    return result;
  }
  IPC::Decoder::decode<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>(a2, (uint64_t)v19);
  int v10 = v21;
  *(unsigned char *)uint64_t v3 = 0;
  if (v10)
  {
    *(_DWORD *)(v3 + 16) = -1;
    uint64_t result = (unsigned char *)std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(v3, (uint64_t)v19);
    *(unsigned char *)(v3 + 24) = 1;
    int v11 = v21;
    *(unsigned char *)(v3 + 32) = 1;
    if (!v11) {
      return result;
    }
    if (v20 == -1) {
      return result;
    }
    uint64_t result = (unsigned char *)((uint64_t (*)(char *, unsigned char *))off_1EE9BD8B8[v20])(&v22, v19);
    if (*(unsigned char *)(v3 + 32)) {
      return result;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(unsigned char *)(v3 + 32) = 0;
LABEL_16:
  uint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned char *)a2[3];
  if (result && v17)
  {
    char v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v18();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[80])
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceError>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)v5);
  if (v6)
  {
    std::optional<std::tuple<WebCore::ResourceError>>::optional[abi:sn180100]<std::in_place_t,WebCore::ResourceError,void>((uint64_t)a2, v5);
  }
  else
  {
    *a2 = 0;
    a2[80] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t std::optional<std::tuple<WebCore::ResourceError>>::optional[abi:sn180100]<std::in_place_t,WebCore::ResourceError,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(unsigned char *)(a1 + 80) = 1;
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<IPC::SharedBufferReference>(a1, (uint64_t)v7);
  if (v7[24])
  {
    IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder,IPC::SharedBufferReference>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
}

void *IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder,IPC::SharedBufferReference>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      uint64_t v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v5, v4);
        uint64_t result = v13;
        a4 = v15;
        a2 = *v13;
        a3 = v13[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_12:
      char v11 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      uint64_t v14 = a4;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a2);
      a4 = v14;
    }
    goto LABEL_12;
  }
  uint64_t v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a2 + 24))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = *v8;
  *(void *)a4 = *(void *)a2;
  long long v10 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a4 + 8) = v10;
  *(void *)(a4 + 24) = v9;
  char v11 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 32) = v11;
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(unsigned int **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    unint64_t v4 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
    }
  }
  return a1;
}

WTF::RefCountedBase *IPC::Decoder::decode<std::tuple<IPC::FormDataReference>>@<X0>(WTF *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<IPC::FormDataReference>(a1, &v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (WTF::RefCountedBase *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::RefCountedBase *)(*(uint64_t (**)(WTF::RefCountedBase *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27WebBroadcastChannelRegistry19PostMessageToRemoteEN6WebKit27WebBroadcastChannelRegistryES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS9_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD8E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27WebBroadcastChannelRegistry19PostMessageToRemoteEN6WebKit27WebBroadcastChannelRegistryES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS9_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BD8E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27WebBroadcastChannelRegistry19PostMessageToRemoteEN6WebKit27WebBroadcastChannelRegistryES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS9_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3227;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::MediaCapability::MediaCapability(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (const void **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9BD910;
  *(unsigned char *)(a1 + 24) = 0;
  unint64_t v4 = (WTF::URL *)(a1 + 32);
  WTF::URL::URL(a1 + 32, a2);
  WTF::URL::protocolHostAndPort((uint64_t *)&v15, v4);
  MEMORY[0x19972E890](&v16, &v15, 0);
  uint64_t v6 = WTF::URL::operator NSURL *();
  BOOL v7 = v16;
  uint64_t v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v5);
      if (v6) {
        goto LABEL_9;
      }
LABEL_15:
      uint64_t result = 40;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v6) {
    goto LABEL_15;
  }
LABEL_9:
  id v9 = objc_alloc(MEMORY[0x1E4F18B98]);
  uint64_t v10 = objc_msgSend(v9, "initWithWebPageURL:", v6, v15, v16);
  *(void *)(a1 + 72) = v10;
  char v11 = (const void *)[MEMORY[0x1E4F18BA8] mediaPlaybackAndCaptureWithEnvironment:v10];
  uint64_t v12 = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v13 = *v3;
  *uint64_t v3 = v12;
  if (v13) {
    CFRelease(v13);
  }
  return a1;
}

void sub_198A86A84(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v15 = *v13;
  const void *v13 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v12, a2);
  uint64_t v16 = (const void *)v10[1];
  *uint64_t v10 = v11;
  v10[1] = 0;
  if (v16) {
    CFRelease(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::MediaCapability::isActivatingOrActive(WebKit::MediaCapability *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 24);
  if (v1 < 4) {
    return (6u >> (v1 & 0xF)) & 1;
  }
  uint64_t result = 62;
  __break(0xC471u);
  return result;
}

uint64_t *WebKit::MediaCapability::environmentIdentifier@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t *)[this[9] createXPCRepresentation];
  if (result)
  {
    string = (WTF::String *)xpc_dictionary_get_string(result, "identifier");
    return WTF::String::fromUTF8(a2, string, v5);
  }
  else
  {
    uint64_t v6 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v6 += 2;
    }
    *a2 = (uint64_t)v6;
  }
  return result;
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::MediaPlaybackTargetContextSerialized(uint64_t a1, WebCore::MediaPlaybackTargetContextCocoa *a2)
{
  *(unsigned char *)(a1 + 8) = 2;
  *(void *)a1 = &unk_1EE9B5420;
  (*(void (**)(WebCore::MediaPlaybackTargetContextCocoa *))(*(void *)a2 + 16))(a2);
  *(unsigned char *)(a1 + 24) = (*(uint64_t (**)(WebCore::MediaPlaybackTargetContextCocoa *))(*(void *)a2 + 24))(a2);
  *(unsigned char *)(a1 + 25) = (*(uint64_t (**)(WebCore::MediaPlaybackTargetContextCocoa *))(*(void *)a2 + 32))(a2);
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 2)
  {
    char v5 = *((unsigned char *)a2 + 26);
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 26) = v5;
    *(unsigned char *)(a1 + 27) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 27) = *((unsigned char *)a2 + 27);
    WTF::String::operator=((uint64_t *)(a1 + 32), (WTF::StringImpl **)a2 + 4);
    if (*((unsigned char *)a2 + 8) == 2)
    {
      WTF::String::operator=((uint64_t *)(a1 + 40), (WTF::StringImpl **)a2 + 5);
      return a1;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198A86EACLL);
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (WTF::StringImpl **)(a1 + 32);
  *(unsigned char *)(a1 + 26) = v4;
  *(unsigned char *)(a1 + 27) = 0;
  *(void *)(a1 + 40) = 0;
  BOOL v7 = (WTF::StringImpl **)(a1 + 40);
  if (v4 == 1)
  {
    *(unsigned char *)(a1 + 27) = *((unsigned char *)a2 + 24);
    return a1;
  }
  if (!v4)
  {
    uint64_t v8 = objc_opt_new();
    if (*((unsigned char *)a2 + 8)) {
      goto LABEL_26;
    }
    id v9 = (void *)v8;
    WebCore::MediaPlaybackTargetContextCocoa::outputContext((uint64_t *)&cf, a2);
    [(id)cf encodeWithCoder:v9];
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = (void *)[v9 accumulatedDictionary];
    MEMORY[0x19972EAD0](&cf, [v11 objectForKey:@"AVOutputContextSerializationKeyContextID"]);
    uint64_t v13 = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    uint64_t v14 = *v6;
    _DWORD *v6 = v13;
    if (v14)
    {
      int v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2) {
        goto LABEL_13;
      }
      WTF::StringImpl::destroy(v14, v12);
      uint64_t v14 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (!v14) {
        goto LABEL_14;
      }
      int v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v16);
      }
      else {
LABEL_13:
      }
        *(_DWORD *)uint64_t v14 = v15;
    }
LABEL_14:
    MEMORY[0x19972EAD0](&cf, [v11 objectForKey:@"AVOutputContextSerializationKeyContextType"]);
    char v18 = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    uint64_t v19 = *v7;
    *BOOL v7 = v18;
    if (!v19) {
      goto LABEL_19;
    }
    int v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v17);
      uint64_t v19 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (!v19) {
        goto LABEL_19;
      }
      int v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v21);
        if (!v9) {
          return a1;
        }
        goto LABEL_20;
      }
    }
    *(_DWORD *)uint64_t v19 = v20;
LABEL_19:
    if (!v9) {
      return a1;
    }
LABEL_20:
    CFRelease(v9);
  }
  return a1;
}

void sub_198A86ED0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v13) {
    CFRelease(v13);
  }
  int v15 = *v12;
  WTF::StringImpl *v12 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = *v11;
  void *v11 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *v10;
  *CFTypeRef v10 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MediaPlaybackTargetContextSerialized::platformContext(WebKit::MediaPlaybackTargetContextSerialized *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 26) == 1)
  {
    char v4 = *((unsigned char *)this + 27);
    char v5 = (_DWORD *)*((void *)this + 2);
    if (v5) {
      *v5 += 2;
    }
    *(unsigned char *)(a2 + 8) = 1;
    *(void *)a2 = &unk_1EE9BD9B0;
    *(void *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 32) = 1;
  }
  else
  {
    uint64_t v6 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:2];
    if (*((void *)this + 4)) {
      BOOL v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      BOOL v7 = &stru_1EEA10550;
    }
    [v6 setObject:v7 forKeyedSubscript:@"AVOutputContextSerializationKeyContextID"];
    if (*((void *)this + 5)) {
      uint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = &stru_1EEA10550;
    }
    [v6 setObject:v8 forKeyedSubscript:@"AVOutputContextSerializationKeyContextType"];
    id v9 = [[WKKeyedCoder alloc] initWithDictionary:v6];
    CFTypeRef cf = (CFTypeRef)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB62E0])()) initWithCoder:v9];
    WebCore::MediaPlaybackTargetContextCocoa::MediaPlaybackTargetContextCocoa();
    if (cf) {
      CFRelease(cf);
    }
    *(_DWORD *)(a2 + 32) = 0;
    if (v9) {
      CFRelease(v9);
    }
  }
}

void sub_198A870E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlaybackTargetContextMock::~MediaPlaybackTargetContextMock(WebCore::MediaPlaybackTargetContextMock *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  WTF::fastFree(this, a2);
}

void WebKit::PaymentAuthorizationPresenter::completeMerchantValidation(uint64_t a1, const void **a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  char v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  [v3 completeMerchantValidation:v4 error:0];
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198A871EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 656))
  {
    char v4 = (void *)(a2 + 80);
    unsigned int v5 = *(_DWORD *)(a2 + 92);
    if (v5
      && ((v6 = *v4 + 80 * v5, v7 = *(unsigned __int8 *)(v6 - 7), int v8 = *(unsigned __int8 *)(v6 - 8), v7)
        ? (BOOL v9 = v8 == 0)
        : (BOOL v9 = 0),
          v9))
    {
      id v14 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6440])());
      if (!*(unsigned char *)(a2 + 656)) {
        goto LABEL_40;
      }
      uint64_t v11 = v14;
      uint64_t v12 = WebCore::platformDisbursementSummaryItems();
    }
    else
    {
      id v10 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6440])());
      if (!*(unsigned char *)(a2 + 656)) {
        goto LABEL_40;
      }
      uint64_t v11 = v10;
      uint64_t v12 = WebCore::platformSummaryItems();
    }
    char v4 = (void *)[v11 initWithPaymentSummaryItems:v12];
    if (!*(unsigned char *)(a2 + 656)) {
      goto LABEL_40;
    }
    WebKit::toNSErrors(&cf, a2 + 616);
    CFTypeRef v15 = cf;
    [v4 setErrors:cf];
    if (v15) {
      CFRelease(v15);
    }
    if (!*(unsigned char *)(a2 + 656)) {
      goto LABEL_40;
    }
    [v4 setAvailableShippingMethods:WebKit::toPKShippingMethods(a2 + 632)];
    if (!*(unsigned char *)(a2 + 656)) {
      goto LABEL_40;
    }
    if (*(unsigned char *)(a2 + 296))
    {
      WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v16, &cf);
      [v4 setRecurringPaymentRequest:cf];
      CFTypeRef v17 = cf;
      CFTypeRef cf = 0;
      if (v17) {
        CFRelease(v17);
      }
      if (!*(unsigned char *)(a2 + 656)) {
        goto LABEL_40;
      }
    }
    if (*(unsigned char *)(a2 + 416))
    {
      WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v16, &cf);
      [v4 setAutomaticReloadPaymentRequest:cf];
      CFTypeRef v18 = cf;
      CFTypeRef cf = 0;
      if (v18) {
        CFRelease(v18);
      }
      if (!*(unsigned char *)(a2 + 656)) {
        goto LABEL_40;
      }
    }
    if (*(unsigned char *)(a2 + 440))
    {
      WebKit::platformPaymentTokenContexts(a2 + 424, &cf);
      [v4 setMultiTokenContexts:cf];
      CFTypeRef v19 = cf;
      CFTypeRef cf = 0;
      if (v19) {
        CFRelease(v19);
      }
      if (!*(unsigned char *)(a2 + 656)) {
        goto LABEL_40;
      }
    }
    if (!*(void *)(a2 + 648)) {
      goto LABEL_41;
    }
    for (int i = (__CFString *)WTF::StringImpl::operator NSString *(); ; int i = &stru_1EEA10550)
    {
      [v4 setInstallmentGroupIdentifier:i];
      [(id)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) completePaymentMethodSelection:v4];
      if (*(unsigned char *)(a2 + 656)) {
        break;
      }
LABEL_40:
      __break(1u);
LABEL_41:
      ;
    }
    if (*(unsigned char *)(a2 + 576))
    {
      WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v21, &cf);
      [v4 setDeferredPaymentRequest:cf];
      CFTypeRef v22 = cf;
      CFTypeRef cf = 0;
      if (v22) {
        CFRelease(v22);
      }
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    [v13 completePaymentMethodSelection:0];
  }
}

void sub_198A874C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toNSErrors(void *a1, uint64_t a2)
{
  char v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (!v5)
  {
LABEL_70:
    *a1 = v4;
    return;
  }
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v7 = *MEMORY[0x1E4F28568];
  uint64_t v8 = 8 * v5;
  while (1)
  {
    uint64_t v9 = *v6;
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v11 = *(WTF::StringImpl **)(v9 + 16);
    if (v11)
    {
      *(_DWORD *)v11 += 2;
      uint64_t v12 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      uint64_t v12 = &stru_1EEA10550;
    }
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)[v10 setObject:v12 forKey:v7];
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::StringImpl::destroy(v11, v14);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (*(unsigned __int16 *)(v9 + 24) < 0x100u || *(_WORD *)(v9 + 24) != 0)
    {
      if (*(unsigned __int16 *)(v9 + 13) >= 0x100u)
      {
        switch(*(_WORD *)(v9 + 13))
        {
          case 0u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPhoneNumber(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 1u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldEmailAddress(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 2u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldName(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 3u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPhoneticName(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 4u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
LABEL_39:
            uint64_t PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
            goto LABEL_40;
          case 5u:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)_MergedGlobals_29[0]();
            goto LABEL_46;
          case 6u:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FA0[0]();
            goto LABEL_46;
          case 7u:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FA8[0]();
            goto LABEL_46;
          case 8u:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FB0[0]();
            goto LABEL_46;
          case 9u:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FB8[0]();
            goto LABEL_46;
          case 0xAu:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FC0[0]();
            goto LABEL_46;
          case 0xBu:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FC8[0]();
            goto LABEL_46;
          case 0xCu:
            uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1EB352FD0();
LABEL_46:
            char v28 = PassKitCore_PKContactFieldPhoneNumber;
            break;
          default:
            uint64_t PassKitCore_PKContactFieldPostalAddress = 0;
LABEL_40:
            char v28 = 0;
            break;
        }
        PassKitCore_PKContactFieldPhoneNumber = (PAL *)[v10 setObject:PassKitCore_PKContactFieldPostalAddress forKey:PAL::get_PassKitCore_PKPaymentErrorContactFieldUserInfoKey(PassKitCore_PKContactFieldPhoneNumber)];
        if (v28) {
          PassKitCore_PKContactFieldPhoneNumber = (PAL *)[v10 setObject:v28 forKey:PAL::get_PassKitCore_PKPaymentErrorPostalAddressUserInfoKey(PassKitCore_PKContactFieldPhoneNumber)];
        }
      }
      goto LABEL_49;
    }
    int v16 = *(unsigned __int8 *)(v9 + 12);
    if (v16 != 6) {
      break;
    }
    uint64_t v24 = [(id)((uint64_t (*)(PAL *))*MEMORY[0x1E4FB6380])(PassKitCore_PKContactFieldPhoneNumber) disbursementCardUnsupportedError];
LABEL_57:
    uint64_t v23 = v24;
LABEL_58:
    if (v10) {
      CFRelease(v10);
    }
    if (v23) {
      [v4 addObject:v23];
    }
    ++v6;
    v8 -= 8;
    if (!v8) {
      goto LABEL_70;
    }
  }
  if (v16 != 7)
  {
    uint64_t v25 = (void *)MEMORY[0x1E4F28C58];
    uint64_t PassKitCore_PKDisbursementErrorDomain = PAL::get_PassKitCore_PKDisbursementErrorDomain(PassKitCore_PKContactFieldPhoneNumber);
LABEL_51:
    uint64_t v29 = -1;
LABEL_56:
    uint64_t v24 = [v25 errorWithDomain:PassKitCore_PKDisbursementErrorDomain code:v29 userInfo:v10];
    goto LABEL_57;
  }
  if (*(unsigned __int16 *)(v9 + 13) < 0x100u)
  {
LABEL_49:
    uint64_t v25 = (void *)MEMORY[0x1E4F28C58];
    uint64_t PassKitCore_PKDisbursementErrorDomain = PAL::get_PassKitCore_PKPaymentErrorDomain(PassKitCore_PKContactFieldPhoneNumber);
    switch(*(unsigned char *)(v9 + 12))
    {
      case 1:
        uint64_t v29 = 1;
        break;
      case 2:
        uint64_t v29 = 2;
        break;
      case 3:
        uint64_t v29 = 3;
        break;
      case 4:
        uint64_t v29 = 4;
        break;
      case 5:
        uint64_t v29 = 5;
        break;
      default:
        goto LABEL_51;
    }
    goto LABEL_56;
  }
  CFTypeRef v17 = (PAL *)((uint64_t (*)(PAL *))*MEMORY[0x1E4FB6380])(PassKitCore_PKContactFieldPhoneNumber);
  if (*(unsigned __int16 *)(v9 + 13) > 0xFFu)
  {
    CFTypeRef v18 = v17;
    switch(*(_WORD *)(v9 + 13))
    {
      case 0u:
        uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneNumber(v17);
        goto LABEL_22;
      case 1u:
        uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldEmailAddress(v17);
        goto LABEL_22;
      case 2u:
        uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldName(v17);
        goto LABEL_22;
      case 3u:
        uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneticName(v17);
        goto LABEL_22;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(v17);
LABEL_22:
        uint64_t v2 = PassKitCore_PKContactFieldEmailAddress;
        break;
      default:
        break;
    }
    int v20 = *(WTF::StringImpl **)(v9 + 16);
    if (v20)
    {
      *(_DWORD *)v20 += 2;
      unsigned __int8 v21 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      unsigned __int8 v21 = &stru_1EEA10550;
    }
    uint64_t v23 = [(PAL *)v18 disbursementContactInvalidErrorWithContactField:v2 localizedDescription:v21];
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v22);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    goto LABEL_58;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_198A87954(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completePaymentSession(uint64_t a1, __int16 *a2)
{
  unint64_t v4 = *a2;
  if (v4 > 7) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = qword_1994F60F8[v4];
  }
  WebKit::toNSErrors(&v24, (uint64_t)(a2 + 4));
  LOBYTE(v2nw_tcp_options_set_no_delay(options, 1) = 0;
  char v23 = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v7 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(a2 + 12) = 0u;
    long long v8 = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a2 + 20) = 0u;
    long long v21 = v7;
    long long v22 = v8;
    char v23 = 1;
    id v9 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6388])());
    if ((void)v21) {
      id v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      id v10 = &stru_1EEA10550;
    }
    if (*((void *)&v21 + 1)) {
      uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v11 = &stru_1EEA10550;
    }
    uint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
    if ((void)v22) {
      uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v13 = &stru_1EEA10550;
    }
    uint64_t v14 = [v12 URLWithString:v13];
    if (*((void *)&v22 + 1)) {
      CFTypeRef v15 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      CFTypeRef v15 = &stru_1EEA10550;
    }
    int v16 = (const void *)[v9 initWithOrderTypeIdentifier:v10 orderIdentifier:v11 webServiceURL:v14 authenticationToken:v15];
    CFTypeRef v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    CFTypeRef v18 = v24;
    [v17 completePaymentSession:v5 errors:v24 orderDetails:v16];
    if (v16) {
      CFRelease(v16);
    }
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v19);
  }
  else
  {
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v6);
    int v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    CFTypeRef v18 = v24;
    objc_msgSend(v20, "completePaymentSession:errors:", v5, v24, (void)v21);
  }
  if (v18) {
    CFRelease(v18);
  }
}

void sub_198A87C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completeShippingContactSelection(uint64_t a1, unsigned char *a2)
{
  if (a2[648])
  {
    int v4 = a2[608];
    id v5 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6460])());
    if (v4)
    {
      if (!a2[648]) {
        goto LABEL_33;
      }
      uint64_t v6 = WebCore::platformDisbursementSummaryItems();
    }
    else
    {
      if (!a2[648]) {
        goto LABEL_33;
      }
      uint64_t v6 = WebCore::platformSummaryItems();
    }
    uint64_t v8 = [v5 initWithPaymentSummaryItems:v6];
    if (a2[648])
    {
      id v9 = (void *)v8;
      WebKit::toNSErrors(&cf, (uint64_t)(a2 + 616));
      CFTypeRef v10 = cf;
      [v9 setErrors:cf];
      if (v10) {
        CFRelease(v10);
      }
      if (a2[648])
      {
        [v9 setAvailableShippingMethods:WebKit::toPKShippingMethods((uint64_t)(a2 + 632))];
        if (a2[648])
        {
          if (!a2[296]) {
            goto LABEL_38;
          }
          WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v11, &cf);
          [v9 setRecurringPaymentRequest:cf];
          CFTypeRef v12 = cf;
          CFTypeRef cf = 0;
          if (v12) {
            CFRelease(v12);
          }
          if (a2[648])
          {
LABEL_38:
            if (!a2[416]) {
              goto LABEL_36;
            }
            WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v11, &cf);
            [v9 setAutomaticReloadPaymentRequest:cf];
            CFTypeRef v13 = cf;
            CFTypeRef cf = 0;
            if (v13) {
              CFRelease(v13);
            }
            if (a2[648])
            {
LABEL_36:
              if (!a2[440]) {
                goto LABEL_37;
              }
              WebKit::platformPaymentTokenContexts((uint64_t)(a2 + 424), &cf);
              [v9 setMultiTokenContexts:cf];
              CFTypeRef v14 = cf;
              CFTypeRef cf = 0;
              if (v14) {
                CFRelease(v14);
              }
              if (a2[648])
              {
LABEL_37:
                if (a2[576])
                {
                  WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v11, &cf);
                  [v9 setDeferredPaymentRequest:cf];
                  CFTypeRef v15 = cf;
                  CFTypeRef cf = 0;
                  if (v15) {
                    CFRelease(v15);
                  }
                }
                [(id)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) completeShippingContactSelection:v9];
                if (v9) {
                  CFRelease(v9);
                }
                return;
              }
            }
          }
        }
      }
    }
LABEL_33:
    __break(1u);
    return;
  }
  long long v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);

  [v7 completeShippingContactSelection:0];
}

void sub_198A87F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completeShippingMethodSelection(uint64_t a1, unsigned char *a2)
{
  if (a2[632])
  {
    id v4 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6458])());
    if (!a2[632]) {
      goto LABEL_26;
    }
    id v5 = (void *)[v4 initWithPaymentSummaryItems:WebCore::platformSummaryItems()];
    if (!a2[632]) {
      goto LABEL_26;
    }
    uint64_t v6 = v5;
    [v5 setAvailableShippingMethods:WebKit::toPKShippingMethods((uint64_t)(a2 + 616))];
    if (!a2[632]) {
      goto LABEL_26;
    }
    if (a2[296])
    {
      WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v7, &cf);
      [v6 setRecurringPaymentRequest:cf];
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
      if (!a2[632]) {
        goto LABEL_26;
      }
    }
    if (a2[416])
    {
      WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v7, &cf);
      [v6 setAutomaticReloadPaymentRequest:cf];
      CFTypeRef v9 = cf;
      CFTypeRef cf = 0;
      if (v9) {
        CFRelease(v9);
      }
      if (!a2[632]) {
        goto LABEL_26;
      }
    }
    if (!a2[440]) {
      goto LABEL_29;
    }
    WebKit::platformPaymentTokenContexts((uint64_t)(a2 + 424), &cf);
    [v6 setMultiTokenContexts:cf];
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    if (a2[632])
    {
LABEL_29:
      if (a2[576])
      {
        WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v7, &cf);
        [v6 setDeferredPaymentRequest:cf];
        CFTypeRef v11 = cf;
        CFTypeRef cf = 0;
        if (v11) {
          CFRelease(v11);
        }
      }
      [(id)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) completeShippingMethodSelection:v6];
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
LABEL_26:
      __break(1u);
    }
  }
  else
  {
    CFTypeRef v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    [v12 completeShippingMethodSelection:0];
  }
}

void sub_198A8816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completeCouponCodeChange(uint64_t a1, unsigned char *a2)
{
  if (a2[648])
  {
    id v4 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6430])());
    if (!a2[648]) {
      goto LABEL_29;
    }
    uint64_t v5 = [v4 initWithPaymentSummaryItems:WebCore::platformSummaryItems()];
    if (!a2[648]) {
      goto LABEL_29;
    }
    uint64_t v6 = (void *)v5;
    WebKit::toNSErrors(&cf, (uint64_t)(a2 + 616));
    CFTypeRef v7 = cf;
    [v6 setErrors:cf];
    if (v7) {
      CFRelease(v7);
    }
    if (!a2[648]) {
      goto LABEL_29;
    }
    [v6 setAvailableShippingMethods:WebKit::toPKShippingMethods((uint64_t)(a2 + 632))];
    if (!a2[648]) {
      goto LABEL_29;
    }
    if (a2[296])
    {
      WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v8, &cf);
      [v6 setRecurringPaymentRequest:cf];
      CFTypeRef v9 = cf;
      CFTypeRef cf = 0;
      if (v9) {
        CFRelease(v9);
      }
      if (!a2[648]) {
        goto LABEL_29;
      }
    }
    if (a2[416])
    {
      WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v8, &cf);
      [v6 setAutomaticReloadPaymentRequest:cf];
      CFTypeRef v10 = cf;
      CFTypeRef cf = 0;
      if (v10) {
        CFRelease(v10);
      }
      if (!a2[648]) {
        goto LABEL_29;
      }
    }
    if (!a2[440]) {
      goto LABEL_32;
    }
    WebKit::platformPaymentTokenContexts((uint64_t)(a2 + 424), &cf);
    [v6 setMultiTokenContexts:cf];
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    if (a2[648])
    {
LABEL_32:
      if (a2[576])
      {
        WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v8, &cf);
        [v6 setDeferredPaymentRequest:cf];
        CFTypeRef v12 = cf;
        CFTypeRef cf = 0;
        if (v12) {
          CFRelease(v12);
        }
      }
      [(id)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) completeCouponCodeChange:v6];
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
LABEL_29:
      __break(1u);
    }
  }
  else
  {
    CFTypeRef v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    [v13 completeCouponCodeChange:0];
  }
}

void sub_198A883F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A885C8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198A88700(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A88808(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198A88908(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198A88A54(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A88BAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A88D04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A890AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_198A89190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    CFRelease(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A89264(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198A8933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A8949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_198A895D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_198A898EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A89B64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A89C8C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit33LinkDecorationFilteringController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9BDA70;
  v2[1] = v1;
  id v4 = v2;
  WebKit::LinkDecorationFilteringController::updateStrings(v1, (uint64_t *)&v4);
  uint64_t result = (uint64_t)v4;
  id v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A89F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LinkDecorationFilteringController::updateStrings(uint64_t a1, uint64_t *a2)
{
  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    {
      uint64_t v4 = HIDWORD(qword_1EB35A508);
      if (HIDWORD(qword_1EB35A508) == qword_1EB35A508)
      {
        a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers, HIDWORD(qword_1EB35A508) + 1, (unint64_t)a2);
        int v5 = HIDWORD(qword_1EB35A508);
        uint64_t v6 = (uint64_t *)(WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers
                       + 8 * HIDWORD(qword_1EB35A508));
        goto LABEL_10;
      }
      CFTypeRef v7 = (uint64_t *)WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers;
      int v5 = HIDWORD(qword_1EB35A508);
    }
    else
    {
      uint64_t v4 = 0;
      int v5 = 0;
      CFTypeRef v7 = &qword_1EB35A510;
      WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers = (uint64_t)&qword_1EB35A510;
      qword_1EB35A508 = 1;
    }
    uint64_t v6 = &v7[v4];
LABEL_10:
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t *v6 = v8;
    HIDWORD(qword_1EB35A508) = v5 + 1;
    if ((v5 + 1) <= 1)
    {
      CFTypeRef v9 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
      uint64_t v10 = [v9 setAfterUpdates:0];
      CFTypeRef v11 = (void *)[(id)((uint64_t (*)(uint64_t))*MEMORY[0x1E4FB6298])(v10) sharedInstance];
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___ZN6WebKit33LinkDecorationFilteringController13updateStringsEON3WTF17CompletionHandlerIFvvEEE_block_invoke;
      v12[3] = &__block_descriptor_40_e41_v24__0__WPLinkFilteringData_8__NSError_16l;
      v12[4] = a1;
      [v11 requestLinkFilteringData:v9 completionHandler:v12];
      if (v9) {
        CFRelease(v9);
      }
    }
    return;
  }

  WTF::CompletionHandler<void ()(void)>::operator()(a2);
}

void sub_198A8A0F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit33LinkDecorationFilteringController13updateStringsEON3WTF17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  if (a3)
  {
    uint64_t v4 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Failed to request query parameters from WebPrivacy.", buf, 2u);
    }
  }
  else
  {
    int v5 = (void *)[a2 rules];
    uint64_t v52 = v3;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v7 = [v5 countByEnumeratingWithState:&v62 objects:v68 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v63;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v63 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v62 + 1) + 8 * v9);
          MEMORY[0x19972EAD0](&v56, [v10 domain]);
          v53 = (WTF::StringImpl *)"http://";
          uint64_t v54 = 8;
          uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v53, (uint64_t *)&v56, &v57);
          if (!v57)
          {
            __break(0xC471u);
            return result;
          }
          MEMORY[0x19972E890](buf, &v57, 0);
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v61, (const WTF::URL *)buf);
          CFTypeRef v13 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          CFTypeRef v14 = v57;
          uint64_t v57 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v12);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          CFTypeRef v15 = v56;
          std::string v56 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v12);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          if (objc_msgSend((id)objc_msgSend(v10, "domain"), "hasPrefix:", @"http://"))
          {
            MEMORY[0x19972EAD0](&v57, [v10 domain]);
            MEMORY[0x19972E890](buf, &v57, 0);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v53, (const WTF::URL *)buf);
            CFTypeRef v17 = v53;
            v53 = 0;
            CFTypeRef v18 = v61;
            v61 = v17;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
              {
                WTF::StringImpl::destroy(v18, v16);
                CFTypeRef v19 = v53;
                v53 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2) {
                    WTF::StringImpl::destroy(v19, v16);
                  }
                  else {
                    *(_DWORD *)v19 -= 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)v18 -= 2;
                v53 = 0;
              }
            }
            int v20 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2) {
                WTF::StringImpl::destroy(v20, v16);
              }
              else {
                *(_DWORD *)v20 -= 2;
              }
            }
            long long v21 = v57;
            uint64_t v57 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v16);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
          }
          char v22 = objc_opt_respondsToSelector();
          char v23 = &stru_1EEA10550;
          if (v22) {
            char v23 = (__CFString *)[v10 path];
          }
          MEMORY[0x19972EAD0](&v53, v23);
          MEMORY[0x19972EAD0](&v57, [v10 queryParameter]);
          uint64_t v25 = v61;
          v61 = 0;
          unint64_t v26 = v53;
          v53 = 0;
          *(void *)long long buf = v25;
          uint64_t v59 = v26;
          char v27 = v57;
          uint64_t v57 = 0;
          char v60 = v27;
          if (HIDWORD(v67) == v67)
          {
            WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v66, (unint64_t)buf);
          }
          else
          {
            int v28 = HIDWORD(v67) + 1;
            uint64_t v29 = (WTF::StringImpl **)(v66 + 24 * HIDWORD(v67));
            *(void *)long long buf = 0;
            atomic_uint *v29 = v25;
            uint64_t v30 = v59;
            uint64_t v59 = 0;
            v29[1] = v30;
            char v31 = v60;
            char v60 = 0;
            v29[2] = v31;
            HIDWORD(v67) = v28;
          }
          unint64_t v32 = v60;
          char v60 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v24);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          uint64_t v33 = v59;
          uint64_t v59 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v24);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          uint64_t v34 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2) {
              WTF::StringImpl::destroy(v34, v24);
            }
            else {
              *(_DWORD *)v34 -= 2;
            }
          }
          uint64_t v35 = v57;
          uint64_t v57 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, v24);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          uint64_t v36 = v53;
          v53 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v24);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
          uint64_t v37 = v61;
          v61 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2) {
              WTF::StringImpl::destroy(v37, v24);
            }
            else {
              *(_DWORD *)v37 -= 2;
            }
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v38 = [v5 countByEnumeratingWithState:&v62 objects:v68 count:16];
        uint64_t v7 = v38;
      }
      while (v38);
    }
    uint64_t v39 = (WTF::StringImpl **)(v52 + 8);
    unsigned int v40 = *(_DWORD *)(v52 + 20);
    if (v40) {
      WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(*v39, (WTF::StringImpl *)((char *)*v39 + 24 * v40));
    }
    uint64_t v41 = *v39;
    if (*v39)
    {
      *(void *)(v52 + 8) = 0;
      *(_DWORD *)(v52 + 16) = 0;
      WTF::fastFree(v41, v6);
    }
    *(void *)(v52 + 8) = v66;
    int v43 = v67;
    unint64_t v42 = HIDWORD(v67);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    *(_DWORD *)(v52 + 16) = v43;
    *(_DWORD *)(v52 + 20) = v42;
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v39, v42);
  }
  v53 = (WTF::StringImpl *)&v55;
  uint64_t v54 = 1;
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer((uint64_t)buf, (uint64_t)&WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers);
  if (HIDWORD(qword_1EB35A508))
  {
    uint64_t v44 = (uint64_t *)WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers;
    uint64_t v45 = 8 * HIDWORD(qword_1EB35A508);
    do
    {
      uint64_t v46 = *v44;
      *uint64_t v44 = 0;
      if (v46) {
        (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
      }
      ++v44;
      v45 -= 8;
    }
    while (v45);
  }
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt((uint64_t)&WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers, &v53);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v47);
  if (HIDWORD(v59))
  {
    uint64_t v49 = *(uint64_t **)buf;
    uint64_t v50 = 8 * HIDWORD(v59);
    do
    {
      WTF::CompletionHandler<void ()(void)>::operator()(v49++);
      v50 -= 8;
    }
    while (v50);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v48);
  return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v51);
}

void sub_198A8A6C8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void WebKit::requestLinkDecorationFilteringData(uint64_t *a1)
{
  if (!PAL::WebPrivacyLibrary((PAL *)1)) {
    goto LABEL_16;
  }
  if (byte_1EB358EC9)
  {
    if (_MergedGlobals_13_0) {
      goto LABEL_4;
    }
LABEL_16:
    v11[0] = 0;
    v11[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a1);
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
    return;
  }
  int v9 = [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6298])() instancesRespondToSelector:sel_requestAllowedLinkFilteringData_completionHandler_];
  _MergedGlobals_13_0 = v9;
  byte_1EB358EC9 = 1;
  if (!v9) {
    goto LABEL_16;
  }
LABEL_4:
  if ((byte_1EB358ECA & 1) == 0)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    int v5 = &qword_1EB358F90;
    qword_1EB358F80 = (uint64_t)&qword_1EB358F90;
    *(void *)&dword_1EB358F88 = 1;
    byte_1EB358ECA = 1;
    goto LABEL_9;
  }
  uint64_t v2 = dword_1EB358F8C;
  if (dword_1EB358F8C != dword_1EB358F88)
  {
    int v5 = (uint64_t *)qword_1EB358F80;
    int v3 = dword_1EB358F8C;
LABEL_9:
    uint64_t v4 = &v5[v2];
    goto LABEL_10;
  }
  a1 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1EB358F8C + 1, (char *)a1);
  int v3 = dword_1EB358F8C;
  uint64_t v4 = (uint64_t *)(qword_1EB358F80 + 8 * dword_1EB358F8C);
LABEL_10:
  uint64_t v6 = *a1;
  *a1 = 0;
  *uint64_t v4 = v6;
  dword_1EB358F8C = v3 + 1;
  if ((v3 + 1) <= 1)
  {
    uint64_t v7 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
    uint64_t v8 = [v7 setAfterUpdates:0];
    objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E4FB6298])(v8), "sharedInstance"), "requestAllowedLinkFilteringData:completionHandler:", v7, &__block_literal_global_11);
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

void sub_198A8AA80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A8AB2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit34requestLinkDecorationFilteringDataEON3WTF17CompletionHandlerIFvONS0_6VectorIN7WebCore27LinkDecorationFilteringDataELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  if (a3)
  {
    int v3 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Failed to request allowed query parameters from WebPrivacy.", buf, 2u);
    }
  }
  else
  {
    int v5 = (void *)[a2 rules];
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v66 objects:v72 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v67;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v67 != v7) {
            objc_enumerationMutation(v5);
          }
          int v9 = *(void **)(*((void *)&v66 + 1) + 8 * v8);
          MEMORY[0x19972EAD0](&v60, [v9 domain]);
          uint64_t v57 = (WTF::StringImpl *)"http://";
          uint64_t v58 = 8;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v57, (uint64_t *)&v60, &v61);
          if (!v61)
          {
            __break(0xC471u);
            JUMPOUT(0x198A8B1A0);
          }
          MEMORY[0x19972E890](buf, &v61, 0);
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v65, (const WTF::URL *)buf);
          CFTypeRef v11 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          CFTypeRef v12 = v61;
          v61 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v10);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          CFTypeRef v13 = v60;
          char v60 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v10);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          if (objc_msgSend((id)objc_msgSend(v9, "domain"), "hasPrefix:", @"http://"))
          {
            MEMORY[0x19972EAD0](&v61, [v9 domain]);
            MEMORY[0x19972E890](buf, &v61, 0);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v57, (const WTF::URL *)buf);
            CFTypeRef v15 = v57;
            uint64_t v57 = 0;
            int v16 = v65;
            long long v65 = v15;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
              {
                WTF::StringImpl::destroy(v16, v14);
                CFTypeRef v17 = v57;
                uint64_t v57 = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2) {
                    WTF::StringImpl::destroy(v17, v14);
                  }
                  else {
                    *(_DWORD *)v17 -= 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)v16 -= 2;
                uint64_t v57 = 0;
              }
            }
            CFTypeRef v18 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2) {
                WTF::StringImpl::destroy(v18, v14);
              }
              else {
                *(_DWORD *)v18 -= 2;
              }
            }
            CFTypeRef v19 = v61;
            v61 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2) {
                WTF::StringImpl::destroy(v19, v14);
              }
              else {
                *(_DWORD *)v19 -= 2;
              }
            }
          }
          MEMORY[0x19972EAD0](&v57, [v9 queryParameter]);
          long long v21 = v65;
          long long v65 = 0;
          *(void *)long long buf = v21;
          long long v63 = 0;
          char v22 = v57;
          uint64_t v57 = 0;
          v64[0] = v22;
          if (HIDWORD(v71) == v71)
          {
            WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v70, (unint64_t)buf);
          }
          else
          {
            int v23 = HIDWORD(v71) + 1;
            uint64_t v24 = (WTF::StringImpl **)(v70 + 24 * HIDWORD(v71));
            *(void *)long long buf = 0;
            WTF::StringImpl *v24 = v21;
            uint64_t v25 = v63;
            long long v63 = 0;
            v24[1] = v25;
            unint64_t v26 = v64[0];
            v64[0] = 0;
            _OWORD v24[2] = v26;
            HIDWORD(v7nw_tcp_options_set_no_delay(options, 1) = v23;
          }
          char v27 = v64[0];
          v64[0] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v20);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          int v28 = v63;
          long long v63 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v20);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v20);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v30 = v57;
          uint64_t v57 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v20);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          char v31 = v65;
          long long v65 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v20);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          ++v8;
        }
        while (v6 != v8);
        uint64_t v32 = [v5 countByEnumeratingWithState:&v66 objects:v72 count:16];
        uint64_t v6 = v32;
      }
      while (v32);
    }
  }
  uint64_t v33 = &v59;
  uint64_t v57 = (WTF::StringImpl *)&v59;
  uint64_t v58 = 1;
  uint64_t v34 = v64;
  *(void *)long long buf = v64;
  LODWORD(v63) = 1;
  uint64_t v35 = qword_1EB358F80;
  if ((uint64_t *)qword_1EB358F80 != &qword_1EB358F90)
  {
    qword_1EB358F80 = (uint64_t)&qword_1EB358F90;
    *(void *)long long buf = v35;
    int v36 = dword_1EB358F88;
    dword_1EB358F88 = 1;
    LODWORD(v63) = v36;
LABEL_66:
    int v37 = dword_1EB358F8C;
    dword_1EB358F8C = 0;
    HIDWORD(v63) = v37;
    goto LABEL_67;
  }
  if (!dword_1EB358F8C) {
    goto LABEL_66;
  }
  uint64_t v52 = 8 * dword_1EB358F8C;
  v53 = &qword_1EB358F90;
  do
  {
    *v34++ = (WTF::StringImpl *)*v53;
    *v53++ = 0;
    v52 -= 8;
  }
  while (v52);
  uint64_t v54 = (WTF *)qword_1EB358F80;
  int v55 = dword_1EB358F8C;
  dword_1EB358F8C = 0;
  HIDWORD(v63) = v55;
  if ((uint64_t *)qword_1EB358F80 != &qword_1EB358F90)
  {
    if (qword_1EB358F80)
    {
      qword_1EB358F80 = 0;
      dword_1EB358F88 = 0;
      WTF::fastFree(v54, v4);
      std::string v56 = v57;
      qword_1EB358F80 = (uint64_t)&qword_1EB358F90;
      if (v57 != (WTF::StringImpl *)&v59)
      {
        uint64_t v57 = (WTF::StringImpl *)&v59;
        qword_1EB358F80 = (uint64_t)v56;
        int v40 = v58;
        LODWORD(v58) = 1;
        goto LABEL_71;
      }
    }
    else
    {
      qword_1EB358F80 = (uint64_t)&qword_1EB358F90;
    }
  }
LABEL_67:
  if (HIDWORD(v58))
  {
    uint64_t v38 = 8 * HIDWORD(v58);
    uint64_t v39 = &qword_1EB358F90;
    do
    {
      *v39++ = *v33;
      *v33++ = 0;
      v38 -= 8;
    }
    while (v38);
  }
  int v40 = v58;
LABEL_71:
  int v41 = HIDWORD(v58);
  HIDWORD(v58) = 0;
  dword_1EB358F88 = v40;
  dword_1EB358F8C = v41;
  WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
  unsigned int v43 = HIDWORD(v63) - 1;
  if (HIDWORD(v63) - 1 >= 0)
  {
    while (1)
    {
      uint64_t v44 = (uint64_t *)(*(void *)buf + 8 * v43);
      if (!v43) {
        break;
      }
      uint64_t v57 = 0;
      LODWORD(v58) = 0;
      HIDWORD(v58) = HIDWORD(v71);
      if (HIDWORD(v71))
      {
        if (HIDWORD(v71) >= 0xAAAAAAB) {
          goto LABEL_91;
        }
        unsigned int v45 = 24 * HIDWORD(v71);
        uint64_t v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v71)));
        LODWORD(v58) = v45 / 0x18;
        uint64_t v57 = v46;
        if (HIDWORD(v71))
        {
          uint64_t v47 = v70;
          uint64_t v48 = 24 * HIDWORD(v71);
          do
          {
            uint64_t v46 = (WTF::StringImpl *)(WebCore::LinkDecorationFilteringData::LinkDecorationFilteringData(v46, v47) + 3);
            v47 += 24;
            v48 -= 24;
          }
          while (v48);
        }
      }
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v44);
      WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v49);
      if (HIDWORD(v63) <= --v43)
      {
LABEL_91:
        __break(0xC471u);
        JUMPOUT(0x198A8B0B0);
      }
    }
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v44);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v42);
  return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v50);
}

void sub_198A8B1AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v31);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a30, v32);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9BDAC0;
  v2[1] = v1;
  uint64_t v4 = v2;
  WebKit::StorageAccessPromptQuirkController::updateQuirks(v1, (uint64_t *)&v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A8B430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::StorageAccessPromptQuirkController::setCachedQuirksForTesting(uint64_t a1, WTF::StringImpl *a2)
{
  *(unsigned char *)(a1 + 40) = 1;
  WebKit::StorageAccessPromptQuirkController::setCachedQuirks((unsigned int *)a1, a2);
  int v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v3 = &unk_1EE9BDB10;
  int v5 = v3;
  WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(a1 + 24), &v5);
  uint64_t result = (uint64_t)v5;
  int v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A8B50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9BDB88;
  v2[1] = v1;
  uint64_t v4 = v2;
  WebKit::StorageAccessUserAgentStringQuirkController::updateQuirks(v1, (uint64_t *)&v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A8B5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::StorageAccessUserAgentStringQuirkController::setCachedQuirksForTesting(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(WTF::StringImpl ***)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  int v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v5 = &unk_1EE9BDBD8;
  uint64_t v7 = v5;
  WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(a1 + 16), &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

void sub_198A8B6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebKit::RestrictedOpenerDomainsController *WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController(WebKit::RestrictedOpenerDomainsController *this)
{
  *(void *)this = 0;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)this + 2) = 0;
  __uint64_t v2 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW_APPROX);
  WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(this, v2);
  WebKit::RestrictedOpenerDomainsController::update(this);
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = *(const void **)this;
  *(void *)this = v3;
  if (v4)
  {
    CFRelease(v4);
    uint64_t v3 = *(void **)this;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZN6WebKit33RestrictedOpenerDomainsControllerC2Ev_block_invoke;
  v6[3] = &__block_descriptor_40_e5_v8__0l;
  v6[4] = this;
  [v3 listenForRestrictedOpenerDomainsChanges:v6];
  return this;
}

void sub_198A8B7CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl ***)(v2 + 8);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  int v5 = *(const void **)v2;
  *(void *)uint64_t v2 = 0;
  if (v5) {
    CFRelease(v5);
  }
  _Unwind_Resume(exception_object);
}

double WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(WebKit::RestrictedOpenerDomainsController *this, uint64_t a2)
{
  uint64_t v2 = &qword_1EB35A000;
  uint64_t v3 = &qword_1EB35A000;
  {
    unint64_t v4 = WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(unsigned long long)::random;
    unint64_t v5 = WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(unsigned long long)::random ^ (WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(unsigned long long)::random << 23);
    unint64_t v6 = v5 >> 17;
  }
  else
  {
    uint64_t v11 = a2;
    CFTypeRef v12 = this;
    unsigned int v9 = WTF::cryptographicallyRandomNumber<unsigned int>();
    a2 = v11;
    this = v12;
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v2 = &qword_1EB35A000;
    uint64_t v3 = &qword_1EB35A000;
    unint64_t v5 = v10 ^ (v10 << 23);
    unint64_t v6 = v5 >> 17;
    unint64_t v4 = ((v10 >> 26) | (v10 << 23)) ^ (v5 >> 17);
  }
  v2[181] = v4;
  unint64_t v7 = v5 ^ v6 ^ (v4 >> 26) ^ v4;
  v3[182] = v7;
  double result = (double)((v7 + v4) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 * 7.2e12;
  *((void *)this + 2) = a2 + 86400000000000 + (uint64_t)result;
  return result;
}

void WebKit::RestrictedOpenerDomainsController::update(WebKit::RestrictedOpenerDomainsController *this)
{
  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    uint64_t v2 = (uint64_t (**)(uint64_t))MEMORY[0x1E4FB6298];
    if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6298])() instancesRespondToSelector:sel_requestRestrictedOpenerDomains_completionHandler_])
    {
      uint64_t v3 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
      unint64_t v4 = objc_msgSend((id)(*v2)(objc_msgSend(v3, "setAfterUpdates:", 0)), "sharedInstance");
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      _DWORD v5[2] = ___ZN6WebKit33RestrictedOpenerDomainsController6updateEv_block_invoke;
      v5[3] = &__block_descriptor_40_e29_v24__0__NSArray_8__NSError_16l;
      v5[4] = this;
      [v4 requestRestrictedOpenerDomains:v3 completionHandler:v5];
      if (v3) {
        CFRelease(v3);
      }
    }
  }
}

void sub_198A8B9C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit33RestrictedOpenerDomainsControllerC2Ev_block_invoke(uint64_t a1)
{
}

void ___ZN6WebKit33RestrictedOpenerDomainsController6updateEv_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v3 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Failed to request restricted opener domains from WebPrivacy", buf, 2u);
    }
    return;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  Table = 0;
  unsigned int v6 = [a2 count];
  unsigned int v7 = (v6 - 1) | ((v6 - 1) >> 1) | (((v6 - 1) | ((v6 - 1) >> 1)) >> 2);
  unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  unint64_t v9 = (v8 | HIWORD(v8)) + 1;
  if (v9 > 0x400)
  {
    if (v9 > 2 * (unint64_t)v6) {
      goto LABEL_10;
    }
  }
  else if (3 * v9 > 4 * (unint64_t)v6)
  {
LABEL_8:
    double v10 = (double)v6;
    double v11 = (double)v9;
    double v12 = 0.604166667;
    goto LABEL_11;
  }
  LODWORD(v9) = 2 * v9;
  if (v9 <= 0x400) {
    goto LABEL_8;
  }
LABEL_10:
  double v10 = (double)v6;
  double v11 = (double)v9;
  double v12 = 0.416666667;
LABEL_11:
  if (v11 * v12 <= v10) {
    LODWORD(v9) = 2 * v9;
  }
  if (v9 <= 8) {
    unsigned int v13 = 8;
  }
  else {
    unsigned int v13 = v9;
  }
  uint64_t v42 = v5;
  Table = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(v13);
  *((_DWORD *)Table - nw_tcp_options_set_no_delay(options, 1) = v13;
  *((_DWORD *)Table - 2) = v13 - 1;
  *((_DWORD *)Table - 4) = 0;
  *((_DWORD *)Table - 3) = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v15 = [a2 countByEnumeratingWithState:&v47 objects:v53 count:16];
  if (v15)
  {
    id obj = a2;
    uint64_t v44 = *(void *)v48;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v48 != v44) {
          objc_enumerationMutation(obj);
        }
        CFTypeRef v17 = *(void **)(*((void *)&v47 + 1) + 8 * v16);
        MEMORY[0x19972EAD0](&v45, [v17 domain]);
        CFTypeRef v19 = v45;
        if (v45 && *((_DWORD *)v45 + 1))
        {
          uint64_t v46 = v45;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          CFTypeRef v19 = *(WTF::StringImpl **)buf;
          uint64_t v33 = v45;
          unsigned int v45 = 0;
          uint64_t v46 = *(WTF::StringImpl **)buf;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::destroy(v33, v18);
              CFTypeRef v19 = v46;
              if (!v46) {
                goto LABEL_54;
              }
              goto LABEL_24;
            }
            *(_DWORD *)v33 -= 2;
          }
          if (!v19) {
            goto LABEL_54;
          }
        }
LABEL_24:
        if (*((_DWORD *)v19 + 1) && (MEMORY[0x19972E990]() & 1) == 0)
        {
          uint64_t v20 = [v17 openerType];
          if (v20 == 1) {
            char v22 = 1;
          }
          else {
            char v22 = 2 * (v20 == 2);
          }
          int v23 = Table;
          if (Table
            || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&Table, 0), (int v23 = Table) != 0))
          {
            int v24 = *((_DWORD *)v23 - 2);
          }
          else
          {
            int v24 = 0;
          }
          unsigned int v25 = WTF::ASCIICaseInsensitiveHash::hash(v46, v21) & v24;
          uint64_t v26 = (uint64_t)&v23[2 * v25];
          if (WTF::equal(*(WTF **)v26, 0, v27))
          {
LABEL_39:
            WTF::String::operator=((uint64_t *)v26, &v46);
            *(unsigned char *)(v26 + 8) = v22;
            if (Table) {
              int v32 = *((_DWORD *)Table - 3) + 1;
            }
            else {
              int v32 = 1;
            }
            *((_DWORD *)Table - 3) = v32;
            if (Table) {
              int v34 = *((_DWORD *)Table - 3);
            }
            else {
              int v34 = 0;
            }
            uint64_t v35 = (*((_DWORD *)Table - 4) + v34);
            unint64_t v36 = *((unsigned int *)Table - 1);
            if (v36 <= 0x400)
            {
              if (3 * v36 > 4 * v35) {
                goto LABEL_54;
              }
LABEL_52:
              WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&Table, v26);
              goto LABEL_54;
            }
            if (v36 <= 2 * v35) {
              goto LABEL_52;
            }
          }
          else
          {
            uint64_t v29 = 0;
            int v30 = 1;
            while (1)
            {
              uint64_t v31 = v26;
              if (*(void *)v26 != -1)
              {
                uint64_t v31 = v29;
                if (WTF::equalIgnoringASCIICase(*(WTF **)v26, v46, v28)) {
                  break;
                }
              }
              unsigned int v25 = (v25 + v30) & v24;
              uint64_t v26 = (uint64_t)&v23[2 * v25];
              ++v30;
              uint64_t v29 = v31;
              if (WTF::equal(*(WTF **)v26, 0, v28))
              {
                if (v31)
                {
                  *(void *)uint64_t v31 = 0;
                  *(unsigned char *)(v31 + 8) = 0;
                  --*((_DWORD *)Table - 4);
                  uint64_t v26 = v31;
                }
                goto LABEL_39;
              }
            }
          }
        }
LABEL_54:
        int v37 = v46;
        uint64_t v46 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, v18);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
        ++v16;
      }
      while (v16 != v15);
      uint64_t v38 = [obj countByEnumeratingWithState:&v47 objects:v53 count:16];
      uint64_t v15 = v38;
    }
    while (v38);
  }
  uint64_t v39 = Table;
  Table = 0;
  int v40 = *(WTF::StringImpl ***)(v42 + 8);
  *(void *)(v42 + 8) = v39;
  if (v40)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v40, v14);
    if (Table) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(Table, v41);
    }
  }
}

void sub_198A8BE1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl **a24)
{
  if (a24) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a24, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RestrictedOpenerDomainsController::lookup(WebKit::RestrictedOpenerDomainsController *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  __uint64_t v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW_APPROX);
  if (v4 > *((void *)this + 2))
  {
    WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(this, v4);
    WebKit::RestrictedOpenerDomainsController::update(this);
  }
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 1, a2);
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if (v6 == v5) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v5 + 8);
  }
}

void WebKit::configureForAdvancedPrivacyProtections(WebKit *this, NSURLSession *a2)
{
  if (byte_1EB358ECE)
  {
    if (!byte_1EB358ECD) {
      return;
    }
  }
  else
  {
    int v6 = [MEMORY[0x1E4F18DC0] instancesRespondToSelector:sel__networkContext];
    byte_1EB358ECD = v6;
    byte_1EB358ECE = 1;
    if (!v6) {
      return;
    }
  }
  uint64_t v3 = [(WebKit *)this _networkContext];
  if (v3)
  {
    uint64_t v4 = v3;
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB358F20, memory_order_acquire) != -1)
    {
      double v10 = &v8;
      unint64_t v9 = &v10;
      std::__call_once(&qword_1EB358F20, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerAddressLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>);
    }
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB358F38, memory_order_acquire) != -1)
    {
      double v10 = &v8;
      unint64_t v9 = &v10;
      std::__call_once(&qword_1EB358F38, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerDomainLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>);
    }
    if (byte_1EB358ED1 == 1)
    {
      uint64_t v5 = off_1EB358F50;
      if (!off_1EB358F50) {
        return;
      }
      goto LABEL_10;
    }
    if (byte_1EB358ED2 == 1)
    {
      unsigned int v7 = (void *)qword_1EB358F58;
    }
    else
    {
      unsigned int v7 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1EB358F58 = (uint64_t)v7;
      byte_1EB358ED2 = 1;
    }
    uint64_t v5 = dlsym(v7, "nw_context_set_tracker_lookup_callback");
    off_1EB358F50 = v5;
    byte_1EB358ED1 = 1;
    if (v5)
    {
LABEL_10:
      ((void (*)(uint64_t, void *))v5)(v4, &__block_literal_global_199);
    }
  }
}

uint64_t ___ZN6WebKit38configureForAdvancedPrivacyProtectionsEP12NSURLSession_block_invoke(int a1, nw_endpoint_t endpoint, const char **a3, void *a4, unsigned char *a5)
{
  if (nw_endpoint_get_type(endpoint) == nw_endpoint_type_address)
  {
    address = (sockaddr *)nw_endpoint_get_address(endpoint);
    int sa_family = address->sa_family;
    if (sa_family == 30)
    {
      *(sockaddr *)uint64_t v51 = *(sockaddr *)&address->sa_data[6];
      int v52 = 2;
      char v53 = 1;
      WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)address, v9);
      double v11 = &qword_1EB358F70;
    }
    else
    {
      if (sa_family != 2) {
        goto LABEL_35;
      }
      LODWORD(v51[0]) = *(_DWORD *)&address->sa_data[2];
      int v52 = 1;
      char v53 = 1;
      WebKit::TrackerAddressLookupInfo::version4List((WebKit::TrackerAddressLookupInfo *)address, v9);
      double v11 = &qword_1EB358F60;
    }
    unint64_t v12 = *((unsigned int *)v11 + 3);
    if (v12)
    {
      uint64_t v13 = *v11;
      if (WebCore::IPAddress::compare((uint64_t)v51, *v11) == 1)
      {
        unint64_t v14 = 0;
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = v12 - 1;
        if (WebCore::IPAddress::compare((uint64_t)v51, v13 + 48 * (v12 - 1)) == 3)
        {
          unint64_t v14 = v12 - 1;
        }
        else
        {
          if (v15 >= 2)
          {
            unint64_t v14 = 0;
            unint64_t v16 = v12 - 1;
            while (2)
            {
              unint64_t v15 = (v14 + v16) >> 1;
              if (v15 < v12)
              {
                switch(WebCore::IPAddress::compare((uint64_t)v51, v13 + 48 * v15))
                {
                  case 1u:
                    goto LABEL_16;
                  case 2u:
                    goto LABEL_27;
                  case 3u:
                    unint64_t v14 = (v14 + v16) >> 1;
                    unint64_t v15 = v16;
LABEL_16:
                    unint64_t v16 = v15;
                    if (v15 - v14 <= 1) {
                      goto LABEL_19;
                    }
                    continue;
                  default:
                    goto LABEL_35;
                }
              }
              break;
            }
            __break(0xC471u);
            JUMPOUT(0x198A8C618);
          }
          unint64_t v14 = 0;
        }
      }
LABEL_19:
      if (v15 >= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198A8C620);
      }
      if (WebCore::IPAddress::matchingNetMaskLength((WebCore::IPAddress *)(v13 + 48 * v15), (const WebCore::IPAddress *)v51) >= *(_DWORD *)(v13 + 48 * v15 + 20))
      {
        if (v15 >= *((unsigned int *)v11 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198A8C628);
        }
LABEL_27:
        if (*v11)
        {
          uint64_t v18 = *v11 + 48 * v15;
          uint64_t v19 = *(void *)(v18 + 24);
          if (v19) {
            uint64_t v20 = v19 + 16;
          }
          else {
            uint64_t v20 = 0;
          }
          *a4 = v20;
          uint64_t v21 = *(void *)(v18 + 32);
          if (v21) {
            char v22 = (const char *)(v21 + 16);
          }
          else {
            char v22 = 0;
          }
          *a3 = v22;
          *a5 = *(unsigned char *)(v18 + 40);
        }
        goto LABEL_35;
      }
      if (v15 != v14)
      {
        if (v14 >= *((unsigned int *)v11 + 3))
        {
LABEL_95:
          __break(0xC471u);
          JUMPOUT(0x198A8C2A4);
        }
        CFTypeRef v17 = (WebCore::IPAddress *)(*v11 + 48 * v14);
        if (WebCore::IPAddress::matchingNetMaskLength(v17, (const WebCore::IPAddress *)v51) >= *((_DWORD *)v17 + 5))
        {
          unint64_t v15 = v14;
          if (v14 >= *((unsigned int *)v11 + 3)) {
            goto LABEL_95;
          }
          goto LABEL_27;
        }
      }
    }
  }
LABEL_35:
  uint64_t result = nw_endpoint_get_type(endpoint);
  if (result != 2) {
    return result;
  }
  hostname = nw_endpoint_get_hostname(endpoint);
  WTF::String::String((WTF::String *)&v49, hostname);
  v55[0] = (uint64_t)"http://";
  v55[1] = 8;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v55, (uint64_t *)&v49, &v50);
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8C610);
  }
  MEMORY[0x19972E890](v51, &v50, 0);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v54, (const WTF::URL *)v51);
  char v27 = v51[0];
  v51[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  int v28 = v50;
  long long v50 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v25);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = v49;
  long long v49 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v25);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  int v30 = v54;
  if (v54) {
    *(_DWORD *)v54 += 2;
  }
  char v31 = byte_1EB358F48;
  if ((byte_1EB358F48 & 1) == 0)
  {
    qword_1EB358FC8 = 0;
    *(void *)&dword_1EB358FD0 = 0;
    qword_1EB358FD8 = 0;
    char v31 = 1;
    byte_1EB358F48 = 1;
  }
  if ((unint64_t)v30 + 1 < 2) {
    goto LABEL_54;
  }
  if ((v31 & 1) == 0)
  {
    int v32 = 0;
    char v33 = 0;
    qword_1EB358FC8 = 0;
    *(void *)&dword_1EB358FD0 = 0;
    qword_1EB358FD8 = 0;
    byte_1EB358F48 = 1;
    goto LABEL_55;
  }
  uint64_t v34 = qword_1EB358FC8;
  if (!qword_1EB358FC8)
  {
LABEL_54:
    int v32 = 0;
    char v33 = 0;
    goto LABEL_55;
  }
  int v35 = dword_1EB358FD0;
  int v36 = qword_1EB358FD8;
  unsigned int v37 = *((_DWORD *)v30 + 4);
  uint64_t v46 = a3;
  long long v47 = a5;
  if (v37 >= 0x100)
  {
    unsigned int v38 = v37 >> 8;
  }
  else
  {
    unsigned int v38 = WTF::StringImpl::hashSlowCase(v30);
    uint64_t v34 = qword_1EB358FC8;
  }
  int v39 = v35 - 1;
  unsigned int v40 = (v38 ^ v36) & (v35 - 1);
  uint64_t v41 = v34 + 24 * v40;
  uint64_t v42 = *(WTF **)v41;
  if (*(void *)v41)
  {
    int v43 = -1;
    while (1)
    {
      unsigned int v44 = *((_DWORD *)v42 + 4);
      if (v44 >= 0x100) {
        unsigned int v45 = v44 >> 8;
      }
      else {
        unsigned int v45 = WTF::StringImpl::hashSlowCase(v42);
      }
      if (++v43 > ((v40 + v35 - ((v45 ^ v36) & v39)) & v39))
      {
LABEL_85:
        int v32 = 0;
        char v33 = 0;
        a3 = v46;
        a5 = v47;
        goto LABEL_55;
      }
      if (v45 == v38 && (WTF::equal(*(WTF **)v41, v30, v26) & 1) != 0) {
        break;
      }
      unsigned int v40 = (v40 + 1) & v39;
      uint64_t v41 = qword_1EB358FC8 + 24 * v40;
      uint64_t v42 = *(WTF **)v41;
      if (!*(void *)v41) {
        goto LABEL_85;
      }
    }
    int v32 = *(WTF **)(v41 + 8);
    a5 = v47;
    if (v32) {
      ++*(_DWORD *)v32;
    }
    char v33 = *(unsigned char *)(v41 + 16);
    a3 = v46;
LABEL_55:
    if (!v30) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  char v33 = 0;
  int v32 = 0;
  a3 = v46;
  a5 = v47;
LABEL_56:
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::destroy(v30, v25);
    if (!v32) {
      goto LABEL_70;
    }
LABEL_65:
    if (*((void *)v32 + 1))
    {
      *a4 = (char *)v32 + 16;
      *a3 = hostname;
      *a5 = v33;
    }
    if (*(_DWORD *)v32 == 1) {
      WTF::fastFree(v32, v25);
    }
    else {
      --*(_DWORD *)v32;
    }
    goto LABEL_70;
  }
  *(_DWORD *)v30 -= 2;
LABEL_58:
  if (v32) {
    goto LABEL_65;
  }
LABEL_70:
  uint64_t result = (uint64_t)v54;
  uint64_t v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198A8C634(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  if (*(_DWORD *)v20 == 2) {
    WTF::StringImpl::destroy(v20, a2);
  }
  else {
    *(_DWORD *)v20 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PaymentAuthorizationController::PaymentAuthorizationController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)a1 = &unk_1EE9BD978;
  *(void *)(a1 + 24) = [objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6428])()) initWithPaymentRequest:a3];
  uint64_t v5 = [[WKPaymentAuthorizationControllerDelegate alloc] initWithRequest:a3 presenter:a1];
  *(void *)(a1 + 32) = v5;
  [*(id *)(a1 + 24) setDelegate:v5];
  [*(id *)(a1 + 24) setPrivateDelegate:*(void *)(a1 + 32)];
  return a1;
}

void sub_198A8C938(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(const void **)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  if (v5) {
    CFRelease(v5);
  }
  int v6 = *(const void **)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PaymentAuthorizationController::platformDelegate(WebKit::PaymentAuthorizationController *this)
{
  return *((void *)this + 4);
}

void WebKit::PaymentAuthorizationController::dismiss(id *this)
{
  [this[3] dismissWithCompletion:0];
  [this[3] setDelegate:0];
  [this[3] setPrivateDelegate:0];
  id v2 = this[3];
  this[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  [this[4] invalidate];
  id v3 = this[4];
  this[4] = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void WebKit::PaymentAuthorizationController::present(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v3 = *(void **)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    uint64_t v5 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *uint64_t v5 = MEMORY[0x1E4F14398];
    v5[1] = 50331650;
    _DWORD v5[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v5[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v5[4] = v4;
    [v3 presentWithCompletion:v5];
    _Block_release(v5);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
  }
}

void sub_198A8CAE4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::MediaCapability::~MediaCapability(WebKit::MediaCapability *this, WTF::StringImpl *a2)
{
  id v3 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
  uint64_t v5 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1EE9B2A08;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v5) {
    CFRelease(v5);
  }
}

{
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;
  uint64_t vars8;

  id v3 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
  uint64_t v5 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1EE9B2A08;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v5) {
    CFRelease(v5);
  }

  JUMPOUT(0x199740C10);
}

void WebKit::PaymentAuthorizationController::~PaymentAuthorizationController(WebKit::PaymentAuthorizationController *this, void *a2)
{
  id v3 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  const void *v3;
  const void *v4;
  void *v5;
  uint64_t vars8;

  id v3 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v5);
}

uint64_t WebCore::MediaPlaybackTargetContextMock::deviceName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  id v2 = *(_DWORD **)(this + 16);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

BOOL WebCore::MediaPlaybackTargetContextMock::hasActiveRoute(WebCore::MediaPlaybackTargetContextMock *this)
{
  uint64_t v1 = *((void *)this + 2);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

BOOL WebCore::MediaPlaybackTargetContextMock::supportsRemoteVideoPlayback(WebCore::MediaPlaybackTargetContextMock *this)
{
  uint64_t v1 = *((void *)this + 2);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t initCNPostalAddressStreetKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressStreetKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8CE34);
  }
  uint64_t result = *v1;
  qword_1EB358ED8 = result;
  _MergedGlobals_29[0] = CNPostalAddressStreetKeyFunction;
  return result;
}

uint64_t CNPostalAddressStreetKeyFunction(void)
{
  return qword_1EB358ED8;
}

uint64_t ___ZL15ContactsLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  if (!result)
  {
    uint64_t result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t initCNPostalAddressSubLocalityKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressSubLocalityKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8CF20);
  }
  uint64_t result = *v1;
  qword_1EB358EE8 = result;
  off_1EB352FA0[0] = CNPostalAddressSubLocalityKeyFunction;
  return result;
}

uint64_t CNPostalAddressSubLocalityKeyFunction(void)
{
  return qword_1EB358EE8;
}

uint64_t initCNPostalAddressCityKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressCityKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8CFC4);
  }
  uint64_t result = *v1;
  qword_1EB358EF0 = result;
  off_1EB352FA8[0] = CNPostalAddressCityKeyFunction;
  return result;
}

uint64_t CNPostalAddressCityKeyFunction(void)
{
  return qword_1EB358EF0;
}

uint64_t initCNPostalAddressPostalCodeKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressPostalCodeKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8D068);
  }
  uint64_t result = *v1;
  qword_1EB358EF8 = result;
  off_1EB352FB0[0] = CNPostalAddressPostalCodeKeyFunction;
  return result;
}

uint64_t CNPostalAddressPostalCodeKeyFunction(void)
{
  return qword_1EB358EF8;
}

uint64_t initCNPostalAddressSubAdministrativeAreaKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressSubAdministrativeAreaKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8D10CLL);
  }
  uint64_t result = *v1;
  qword_1EB358F00 = result;
  off_1EB352FB8[0] = CNPostalAddressSubAdministrativeAreaKeyFunction;
  return result;
}

uint64_t CNPostalAddressSubAdministrativeAreaKeyFunction(void)
{
  return qword_1EB358F00;
}

uint64_t initCNPostalAddressStateKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressStateKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8D1B0);
  }
  uint64_t result = *v1;
  qword_1EB358F08 = result;
  off_1EB352FC0[0] = CNPostalAddressStateKeyFunction;
  return result;
}

uint64_t CNPostalAddressStateKeyFunction(void)
{
  return qword_1EB358F08;
}

uint64_t initCNPostalAddressCountryKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressCountryKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8D254);
  }
  uint64_t result = *v1;
  qword_1EB358F10 = result;
  off_1EB352FC8[0] = CNPostalAddressCountryKeyFunction;
  return result;
}

uint64_t CNPostalAddressCountryKeyFunction(void)
{
  return qword_1EB358F10;
}

uint64_t initCNPostalAddressISOCountryCodeKey(void)
{
  if (byte_1EB358ECF == 1)
  {
    uint64_t v0 = (void *)qword_1EB358EE0;
  }
  else
  {
    uint64_t v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EB358EE0 = (uint64_t)v0;
    byte_1EB358ECF = 1;
  }
  uint64_t v1 = (uint64_t *)dlsym(v0, "CNPostalAddressISOCountryCodeKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A8D2F8);
  }
  uint64_t result = *v1;
  qword_1EB358F18 = result;
  off_1EB352FD0 = CNPostalAddressISOCountryCodeKeyFunction;
  return result;
}

uint64_t CNPostalAddressISOCountryCodeKeyFunction(void)
{
  return qword_1EB358F18;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerAddressLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>()
{
  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    uint64_t v0 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
    uint64_t v1 = [v0 setAfterUpdates:1];
    objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E4FB6298])(v1), "sharedInstance"), "requestTrackerNetworkAddresses:completionHandler:", v0, &__block_literal_global_293);
    if (v0)
    {
      CFRelease(v0);
    }
  }
}

void sub_198A8D3B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN6WebKit24TrackerAddressLookupInfo16populateIfNeededEvENKUlvE_clEv_block_invoke(WebKit::TrackerAddressLookupInfo *a1, void *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    WebKit::TrackerAddressLookupInfo::version4List(a1, a2);
    uint64_t v5 = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EB358F60, 0);
    WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)v5, v6);
    WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EB358F70, 0);
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    unsigned int v7 = (WebKit::TrackerAddressLookupInfo *)[a2 countByEnumeratingWithState:&v33 objects:v42 count:16];
    double v10 = v7;
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)v34;
    *(void *)&long long v9 = 138412290;
    long long v32 = v9;
    while (1)
    {
      unint64_t v12 = 0;
      do
      {
        if (*(void *)v34 != v11) {
          objc_enumerationMutation(a2);
        }
        uint64_t v13 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v12);
        uint64_t v14 = objc_msgSend(v13, "version", v32);
        if (v14 == 6)
        {
          WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)6, v15);
          WebKit::TrackerAddressLookupInfo::TrackerAddressLookupInfo((uint64_t)buf, v13);
          int v18 = HIDWORD(qword_1EB358F78);
          if (HIDWORD(qword_1EB358F78) == qword_1EB358F78)
          {
            WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::TrackerAddressLookupInfo>((unsigned int *)&qword_1EB358F70, (unint64_t)buf);
          }
          else
          {
            uint64_t v24 = qword_1EB358F70 + 48 * HIDWORD(qword_1EB358F78);
            long long v25 = *(_OWORD *)buf;
            *(void *)(v24 + 16) = v38;
            *(_OWORD *)uint64_t v24 = v25;
            uint64_t v26 = v39;
            int v39 = 0;
            *(void *)(v24 + 24) = v26;
            char v27 = v40;
            unsigned int v40 = 0;
            *(void *)(v24 + 32) = v27;
            *(unsigned char *)(v24 + 40) = v41;
            HIDWORD(qword_1EB358F78) = v18 + 1;
          }
          goto LABEL_19;
        }
        if (v14 == 4)
        {
          WebKit::TrackerAddressLookupInfo::version4List((WebKit::TrackerAddressLookupInfo *)4, v15);
          WebKit::TrackerAddressLookupInfo::TrackerAddressLookupInfo((uint64_t)buf, v13);
          int v17 = HIDWORD(qword_1EB358F68);
          if (HIDWORD(qword_1EB358F68) == qword_1EB358F68)
          {
            WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::TrackerAddressLookupInfo>((unsigned int *)&qword_1EB358F60, (unint64_t)buf);
          }
          else
          {
            uint64_t v20 = qword_1EB358F60 + 48 * HIDWORD(qword_1EB358F68);
            long long v21 = *(_OWORD *)buf;
            *(void *)(v20 + 16) = v38;
            *(_OWORD *)uint64_t v20 = v21;
            char v22 = v39;
            int v39 = 0;
            *(void *)(v20 + 24) = v22;
            int v23 = v40;
            unsigned int v40 = 0;
            *(void *)(v20 + 32) = v23;
            *(unsigned char *)(v20 + 40) = v41;
            HIDWORD(qword_1EB358F68) = v17 + 1;
          }
LABEL_19:
          int v28 = v40;
          unsigned int v40 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1) {
              WTF::fastFree(v28, v16);
            }
            else {
              --*(_DWORD *)v28;
            }
          }
          uint64_t v29 = v39;
          int v39 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1) {
              WTF::fastFree(v29, v16);
            }
            else {
              --*(_DWORD *)v29;
            }
          }
          goto LABEL_27;
        }
        uint64_t v19 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = v32;
          *(void *)&buf[4] = v13;
          _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "Skipped invalid tracking IP address: %@", buf, 0xCu);
        }
LABEL_27:
        unint64_t v12 = (WebKit::TrackerAddressLookupInfo *)((char *)v12 + 1);
      }
      while (v10 != v12);
      unsigned int v7 = (WebKit::TrackerAddressLookupInfo *)[a2 countByEnumeratingWithState:&v33 objects:v42 count:16];
      double v10 = v7;
      if (!v7)
      {
LABEL_29:
        WebKit::TrackerAddressLookupInfo::version4List(v7, v8);
        int v30 = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EB358F60, HIDWORD(qword_1EB358F68));
        WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)v30, v31);
        WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EB358F70, HIDWORD(qword_1EB358F78));
        return;
      }
    }
  }
  id v3 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Failed to request tracking IP addresses from WebPrivacy", buf, 2u);
  }
}

void sub_198A8D704(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,WTF *a23)
{
  if (a23)
  {
    if (*(_DWORD *)a23 == 1) {
      WTF::fastFree(a23, a2);
    }
    else {
      --*(_DWORD *)a23;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 1) {
      WTF::fastFree(a22, a2);
    }
    else {
      --*(_DWORD *)a22;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::TrackerAddressLookupInfo::version4List(WebKit::TrackerAddressLookupInfo *this, void *a2)
{
  if ((byte_1EB358F28 & 1) == 0)
  {
    v3[0] = 0;
    qword_1EB358F60 = 0;
    v3[1] = 0;
    qword_1EB358F68 = 0;
    uint64_t result = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    byte_1EB358F28 = 1;
  }
  return result;
}

uint64_t WebKit::TrackerAddressLookupInfo::version6List(WebKit::TrackerAddressLookupInfo *this, void *a2)
{
  if ((byte_1EB358F30 & 1) == 0)
  {
    v3[0] = 0;
    qword_1EB358F70 = 0;
    v3[1] = 0;
    qword_1EB358F78 = 0;
    uint64_t result = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    byte_1EB358F30 = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::TrackerAddressLookupInfo>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 48 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::TrackerAddressLookupInfo>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF **)result;
    do
    {
      uint64_t v4 = v3[4];
      v3[4] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1) {
          WTF::fastFree(v4, a2);
        }
        else {
          --*(_DWORD *)v4;
        }
      }
      uint64_t result = v3[3];
      v3[3] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          uint64_t result = (WTF *)WTF::fastFree(result, a2);
        }
        else {
          --*(_DWORD *)result;
        }
      }
      v3 += 6;
    }
    while (v3 != (WTF **)a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebKit::TrackerAddressLookupInfo>::destruct((WTF *)(*(void *)result + 48 * this), (WTF *)(*(void *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x198A8D9F8);
      }
      int v6 = (WTF *)(48 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebKit::TrackerAddressLookupInfo>::move(v5, (WTF *)((char *)v5 + 48 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebKit::TrackerAddressLookupInfo>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      long long v6 = *(_OWORD *)v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      *(void *)(a3 + 24) = v7;
      uint64_t v8 = *((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      *(void *)(a3 + 32) = v8;
      *(unsigned char *)(a3 + 40) = *((unsigned char *)v5 + 40);
      long long v9 = (WTF *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1) {
          WTF::fastFree(v9, a2);
        }
        else {
          --*(_DWORD *)v9;
        }
      }
      uint64_t result = (WTF *)*((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          uint64_t result = (WTF *)WTF::fastFree(result, a2);
        }
        else {
          --*(_DWORD *)result;
        }
      }
      uint64_t v5 = (WTF *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::TrackerAddressLookupInfo>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * a1[3];
  unint64_t v5 = v3[1].n128_u64[0];
  __n128 result = *v3;
  *(__n128 *)uint64_t v4 = *v3;
  *(void *)(v4 + 16) = v5;
  unint64_t v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  *(void *)(v4 + 24) = v7;
  unint64_t v8 = v3[2].n128_u64[0];
  v3[2].n128_u64[0] = 0;
  *(void *)(v4 + 32) = v8;
  *(unsigned char *)(v4 + 40) = v3[2].n128_u8[8];
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      id v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = (WTF *)(*(void *)result + 48 * *((unsigned int *)result + 3));
      int v5 = 48 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
      *(void *)id v2 = v6;
      __n128 result = WTF::VectorMover<false,WebKit::TrackerAddressLookupInfo>::move(v3, v4, v6);
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)id v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (WTF *)WTF::fastFree(v3, v7);
      }
    }
  }
  return result;
}

uint64_t WebKit::TrackerAddressLookupInfo::TrackerAddressLookupInfo(uint64_t a1, void *a2)
{
  uint64_t v5 = [a2 address];
  int v6 = *(unsigned __int8 *)(v5 + 1);
  if (v6 == 30)
  {
    int v7 = *(_DWORD *)(v5 + 8);
    uint64_t v13 = *(void *)(v5 + 12);
    int v14 = *(_DWORD *)(v5 + 20);
    int v8 = 2;
  }
  else
  {
    if (v6 != 2)
    {
      uint64_t v11 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      unint64_t v12 = *v2;
      *id v2 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          WTF::fastFree(v12, v10);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
      _Unwind_Resume(v11);
    }
    int v7 = *(_DWORD *)(v5 + 4);
    int v8 = 1;
  }
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 4) = v13;
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = [a2 netMaskLength];
  WTF::CString::CString((WTF::CString *)(a1 + 24), (const char *)objc_msgSend((id)objc_msgSend(a2, "owner"), "UTF8String"));
  WTF::CString::CString((WTF::CString *)(a1 + 32), (const char *)objc_msgSend((id)objc_msgSend(a2, "host"), "UTF8String"));
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerDomainLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>()
{
  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    if (byte_1EB358F40)
    {
      if (!byte_1EB358ED0) {
        return;
      }
    }
    else
    {
      int v2 = [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6298])() instancesRespondToSelector:sel_requestTrackerDomainNamesData_completionHandler_];
      byte_1EB358ED0 = v2;
      byte_1EB358F40 = 1;
      if (!v2) {
        return;
      }
    }
    uint64_t v0 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63D0])()) init];
    uint64_t v1 = [v0 setAfterUpdates:1];
    objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E4FB6298])(v1), "sharedInstance"), "requestTrackerDomainNamesData:completionHandler:", v0, &__block_literal_global_295);
    if (v0)
    {
      CFRelease(v0);
    }
  }
}

void sub_198A8DEC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN6WebKit23TrackerDomainLookupInfo16populateIfNeededEvENKUlvE_clEv_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v3 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Failed to request tracking domains from WebPrivacy", buf, 2u);
    }
    return;
  }
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  uint64_t v69 = [a2 countByEnumeratingWithState:&v75 objects:v83 count:16];
  if (!v69) {
    return;
  }
  uint64_t v68 = *(void *)v76;
  do
  {
    uint64_t v4 = 0;
    do
    {
      if (*(void *)v76 != v68) {
        objc_enumerationMutation(a2);
      }
      uint64_t v5 = *(void **)(*((void *)&v75 + 1) + 8 * v4);
      if ((byte_1EB358F48 & 1) == 0)
      {
        qword_1EB358FC8 = 0;
        *(void *)&dword_1EB358FD0 = 0;
        qword_1EB358FD8 = 0;
        byte_1EB358F48 = 1;
      }
      WTF::String::String((WTF::String *)&v74, (const char *)objc_msgSend((id)objc_msgSend(v5, "host"), "UTF8String"));
      WTF::CString::CString((WTF::CString *)&v72, (const char *)objc_msgSend((id)objc_msgSend(v5, "owner"), "UTF8String"));
      char v73 = [v5 canBlock];
      v79 = &v72;
      uint64_t v8 = dword_1EB358FD0;
      uint64_t v70 = v4;
      if (10 * (unint64_t)dword_1EB358FD4 >= 9 * (unint64_t)dword_1EB358FD0
        || dword_1EB358FD0 <= (2 * dword_1EB358FD4) && BYTE4(qword_1EB358FD8))
      {
        if (dword_1EB358FD0) {
          unsigned int v9 = 2 * dword_1EB358FD0;
        }
        else {
          unsigned int v9 = 8;
        }
        unint64_t v10 = (WTF *)qword_1EB358FC8;
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)(24 * v9));
        uint64_t v12 = (uint64_t)v11;
        if (v9) {
          bzero(v11, 24 * v9);
        }
        qword_1EB358FC8 = v12;
        dword_1EB358FD0 = v9;
        unint64_t v13 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        LODWORD(qword_1EB358FD8) = (v15 >> 31) ^ v15;
        BYTE4(qword_1EB358FD8) = 0;
        if (v8)
        {
          uint64_t v16 = 0;
          uint64_t v71 = v10;
          do
          {
            int v17 = (WTF::StringImpl **)((char *)v10 + 24 * v16);
            int v18 = *v17;
            if (*v17)
            {
              int v19 = dword_1EB358FD0;
              int v20 = qword_1EB358FD8;
              unsigned int v21 = *((_DWORD *)v18 + 4);
              if (v21 >= 0x100) {
                unsigned int v22 = v21 >> 8;
              }
              else {
                unsigned int v22 = WTF::StringImpl::hashSlowCase(v18);
              }
              uint64_t v23 = v8;
              int v24 = v19 - 1;
              unsigned int v25 = (v22 ^ v20) & (v19 - 1);
              uint64_t v26 = (WTF::StringImpl **)(qword_1EB358FC8 + 24 * v25);
              char v27 = *v26;
              if (*v26)
              {
                unsigned int v28 = 0;
                do
                {
                  unsigned int v29 = *((_DWORD *)v27 + 4);
                  if (v29 >= 0x100) {
                    unsigned int v30 = v29 >> 8;
                  }
                  else {
                    unsigned int v30 = WTF::StringImpl::hashSlowCase(v27);
                  }
                  unsigned int v31 = (v25 + v19 - ((v30 ^ v20) & v24)) & v24;
                  if (v28 > v31)
                  {
                    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>((uint64_t)v17, (uint64_t)v26);
                    unsigned int v28 = v31;
                  }
                  unsigned int v25 = (v25 + 1) & v24;
                  ++v28;
                  uint64_t v26 = (WTF::StringImpl **)(qword_1EB358FC8 + 24 * v25);
                  char v27 = *v26;
                }
                while (*v26);
              }
              WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>((uint64_t)v26, (uint64_t)v17);
              uint64_t v8 = v23;
              unint64_t v10 = v71;
            }
            long long v32 = (char *)v10 + 24 * v16;
            long long v33 = (WTF *)*((void *)v32 + 1);
            *((void *)v32 + nw_tcp_options_set_no_delay(options, 1) = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1) {
                WTF::fastFree(v33, v6);
              }
              else {
                --*(_DWORD *)v33;
              }
            }
            long long v34 = *v17;
            WebCore::IPAddress *v17 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2) {
                WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v6);
              }
              else {
                *(_DWORD *)v34 -= 2;
              }
            }
            ++v16;
          }
          while (v16 != v8);
LABEL_45:
          WTF::fastFree(v10, v6);
          LODWORD(v8) = dword_1EB358FD0;
          goto LABEL_46;
        }
        if (v10) {
          goto LABEL_45;
        }
        LODWORD(v8) = 8;
      }
LABEL_46:
      int v35 = qword_1EB358FD8;
      unsigned int v36 = *((_DWORD *)v74 + 4);
      if (v36 >= 0x100) {
        unsigned int v37 = v36 >> 8;
      }
      else {
        unsigned int v37 = WTF::StringImpl::hashSlowCase(v74);
      }
      unsigned int v38 = v8 - 1;
      uint64_t v39 = (v37 ^ v35) & (v8 - 1);
      uint64_t v40 = qword_1EB358FC8;
      uint64_t v41 = qword_1EB358FC8 + 24 * v39;
      uint64_t v42 = *(WTF **)v41;
      if (*(void *)v41)
      {
        unsigned int v43 = 0;
        while (1)
        {
          unsigned int v44 = *((_DWORD *)v42 + 4);
          int v45 = v44 >= 0x100 ? v44 >> 8 : WTF::StringImpl::hashSlowCase(v42);
          unsigned int v46 = (v39 + v8 - ((v45 ^ v35) & v38)) & v38;
          if (v43 > v46) {
            break;
          }
          if (v45 == v37 && (WTF::equal(*(WTF **)v41, v74, v7) & 1) != 0)
          {
            uint64_t v51 = v72;
            CFTypeRef v72 = 0;
            int v52 = *(WTF **)(v41 + 8);
            *(void *)(v41 + 8) = v51;
            uint64_t v53 = v70;
            if (v52)
            {
              if (*(_DWORD *)v52 == 1) {
                WTF::fastFree(v52, v6);
              }
              else {
                --*(_DWORD *)v52;
              }
            }
            *(unsigned char *)(v41 + 16) = v73;
            goto LABEL_92;
          }
          uint64_t v40 = qword_1EB358FC8;
          uint64_t v39 = (v39 + 1) & v38;
          ++v43;
          uint64_t v41 = qword_1EB358FC8 + 24 * v39;
          uint64_t v42 = *(WTF **)v41;
          if (!*(void *)v41)
          {
            if (v43 >= 0x80) {
              BYTE4(qword_1EB358FD8) = 1;
            }
            goto LABEL_60;
          }
        }
        if (v43 >= 0x80) {
          BYTE4(qword_1EB358FD8) = 1;
        }
        long long v47 = *(WTF **)v41;
        *(void *)uint64_t v41 = 0;
        *(void *)long long buf = v47;
        uint64_t v48 = v40 + 24 * v39;
        long long v49 = *(WTF **)(v48 + 8);
        *(void *)(v48 + 8) = 0;
        v81 = v49;
        char v82 = *(unsigned char *)(v48 + 16);
        long long v50 = *(WTF **)(v48 + 8);
        *(void *)(v48 + 8) = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1) {
            WTF::fastFree(v50, v6);
          }
          else {
            --*(_DWORD *)v50;
          }
        }
        uint64_t v54 = *(WTF::StringImpl **)v41;
        *(void *)uint64_t v41 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2) {
            WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v6);
          }
          else {
            *(_DWORD *)v54 -= 2;
          }
        }
        *(void *)uint64_t v41 = 0;
        *(void *)(v41 + 8) = 0;
        *(void *)(v41 + 16) = 0;
        WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String,WebKit::TrackerDomainLookupInfo>(WTF::String &&,WebKit::TrackerDomainLookupInfo &&)::{lambda(void)#1}>(v41, (uint64_t *)&v74, (uint64_t **)&v79);
        for (unsigned int i = v39 + 1; ; unsigned int i = v56 + 1)
        {
          unsigned int v56 = i & v38;
          uint64_t v57 = (WTF::StringImpl **)(qword_1EB358FC8 + 24 * (i & v38));
          uint64_t v58 = *v57;
          if (!*v57) {
            break;
          }
          unsigned int v59 = *((_DWORD *)v58 + 4);
          if (v59 >= 0x100) {
            unsigned int v60 = v59 >> 8;
          }
          else {
            unsigned int v60 = WTF::StringImpl::hashSlowCase(v58);
          }
          ++v46;
          unsigned int v61 = (v56 + v8 - ((v60 ^ v35) & v38)) & v38;
          if (v46 > v61)
          {
            std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>((uint64_t)buf, (uint64_t)v57);
            unsigned int v46 = v61;
          }
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>(qword_1EB358FC8 + 24 * v56, (uint64_t)buf);
        long long v62 = v81;
        v81 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1) {
            WTF::fastFree(v62, v6);
          }
          else {
            --*(_DWORD *)v62;
          }
        }
        long long v63 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2) {
            WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v6);
          }
          else {
            *(_DWORD *)v63 -= 2;
          }
        }
      }
      else
      {
LABEL_60:
        WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String,WebKit::TrackerDomainLookupInfo>(WTF::String &&,WebKit::TrackerDomainLookupInfo &&)::{lambda(void)#1}>(v41, (uint64_t *)&v74, (uint64_t **)&v79);
      }
      ++dword_1EB358FD4;
      uint64_t v53 = v70;
LABEL_92:
      long long v64 = v72;
      CFTypeRef v72 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 1) {
          WTF::fastFree(v64, v6);
        }
        else {
          --*(_DWORD *)v64;
        }
      }
      long long v65 = v74;
      v74 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2) {
          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v6);
        }
        else {
          *(_DWORD *)v65 -= 2;
        }
      }
      uint64_t v4 = v53 + 1;
    }
    while (v4 != v69);
    uint64_t v66 = [a2 countByEnumeratingWithState:&v75 objects:v83 count:16];
    uint64_t v69 = v66;
  }
  while (v66);
}

void sub_198A8E5A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,WTF *a28)
{
  if (a28)
  {
    if (*(_DWORD *)a28 == 1) {
      WTF::fastFree(a28, a2);
    }
    else {
      --*(_DWORD *)a28;
    }
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 1) {
      WTF::fastFree(a14, a2);
    }
    else {
      --*(_DWORD *)a14;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::String,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WebKit::TrackerDomainLookupInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::TrackerDomainLookupInfo>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::String,WebKit::TrackerDomainLookupInfo>(WTF::String &&,WebKit::TrackerDomainLookupInfo &&)::{lambda(void)#1}>(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  WTF::String::operator=((uint64_t *)a1, a2);
  int v6 = *a3;
  uint64_t v7 = **a3;
  uint64_t *v6 = 0;
  char v8 = *((unsigned char *)v6 + 8);
  __n128 result = *(WTF **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      __n128 result = (WTF *)WTF::fastFree(result, v5);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

WTF *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  __n128 result = *(WTF **)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      __n128 result = (WTF *)WTF::fastFree(result, v4);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

WTF *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  char v6 = *(unsigned char *)(a1 + 16);
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  unsigned int v9 = *(WTF **)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1) {
      WTF::fastFree(v9, v7);
    }
    else {
      --*(_DWORD *)v9;
    }
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v10 = *(WTF::StringImpl **)a2;
  *(void *)a2 = v4;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  __n128 result = *(WTF **)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      __n128 result = (WTF *)WTF::fastFree(result, v7);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

void sub_198A8E7E8(_Unwind_Exception *exception_object, void *a2)
{
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      WTF::fastFree(v3, a2);
    }
    else {
      --*(_DWORD *)v3;
    }
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IPAddress::compare(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 2)
  {
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      unint64_t v9 = bswap64(*(void *)a1);
      unint64_t v10 = bswap64(*(void *)a2);
      if (v9 == v10 && (unint64_t v9 = bswap64(*(void *)(a1 + 8)), v10 = bswap64(*(void *)(a2 + 8)), v9 == v10))
      {
        int v8 = 0;
      }
      else if (v9 < v10)
      {
        int v8 = -1;
      }
      else
      {
        int v8 = 1;
      }
      goto LABEL_16;
    }
    return 0;
  }
  if (v2 != 1 || *(_DWORD *)(a2 + 16) != 1) {
    return 0;
  }
  unsigned int v3 = bswap32(*(_DWORD *)a1);
  unsigned int v4 = bswap32(*(_DWORD *)a2);
  BOOL v5 = v3 >= v4;
  BOOL v6 = v3 > v4;
  int v7 = !v5;
  int v8 = v6 - v7;
LABEL_16:
  BOOL v12 = v8 == 0;
  if (v8 < 0) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = 3;
  }
  if (v12) {
    return 2;
  }
  else {
    return v13;
  }
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
}

void *_ZN3WTF6Detail15CallableWrapperIZZ72__WKPaymentAuthorizationDelegate_Protected___didRequestMerchantSession__EUb_E3__0vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BDA48;
  int v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  unsigned int v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ72__WKPaymentAuthorizationDelegate_Protected___didRequestMerchantSession__EUb_E3__0vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BDA48;
  unsigned int v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZ72__WKPaymentAuthorizationDelegate_Protected___didRequestMerchantSession__EUb_E3__0vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    MEMORY[0x19972E8A0](v8, *(void *)(a1 + 24));
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v4 + 64))(v4, v3, v8);
    uint64_t result = v8[0];
    v8[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(*(void *)(v1 + 56) + 16);
    return (WTF::StringImpl *)v7();
  }
  return result;
}

void sub_198A8EAC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::LinkDecorationFilteringDataObserver *WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(WebKit::LinkDecorationFilteringDataObserver *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::LinkDecorationFilteringDataObserver::~LinkDecorationFilteringDataObserver(result, a2);
    return (WebKit::LinkDecorationFilteringDataObserver *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::LinkDecorationFilteringDataObserver::~LinkDecorationFilteringDataObserver(WebKit::LinkDecorationFilteringDataObserver *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit33LinkDecorationFilteringController14observeUpdatesEONS_8FunctionIFvvEEEEUb0_E3__1vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v3 = result;
  void *result = &unk_1EE9BDA98;
  uint64_t v6 = *(void *)(v1 + 24);
  BOOL v5 = (uint64_t *)(v1 + 24);
  uint64_t v4 = v6;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v6 && (uint64_t v7 = *(unsigned int *)(v4 - 12), v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v8 = WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v22) = v7;
    uint64_t v21 = v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v5);
  uint64_t v11 = v9;
  BOOL v12 = v10;
  if (*v5) {
    uint64_t v13 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
  }
  else {
    uint64_t v13 = 0;
  }
  if ((unsigned int *)v13 != v9)
  {
    unsigned int v14 = 0;
    do
    {
      unint64_t v10 = *(unsigned int **)(*(void *)v11 + 8);
      if (v10)
      {
        unint64_t v15 = (atomic_uint **)(v10 + 2);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10 + 2, (uint64_t)v10);
        uint64_t v16 = *v15;
        if (*v15)
        {
          atomic_fetch_add(v16, 1u);
          unsigned int v14 = HIDWORD(v22);
          uint64_t v8 = v21;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      unsigned int v17 = v14 + 1;
      *(void *)(v8 + 8 * v14) = v16;
      HIDWORD(v22) = v14 + 1;
      while (1)
      {
        v11 += 2;
        if (v11 == v12) {
          break;
        }
        if ((unint64_t)(*(void *)v11 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v11 = v12;
LABEL_20:
      ++v14;
    }
    while (v11 != (unsigned int *)v13);
    if (v17)
    {
      uint64_t v18 = v21;
      uint64_t v19 = 8 * v17;
      do
      {
        if (*(void *)v18)
        {
          if (*(void *)(*(void *)v18 + 8))
          {
            uint64_t v23 = *(void *)v18;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v5, &v23))
            {
              if (*(void *)v18) {
                uint64_t v20 = *(void *)(*(void *)v18 + 8);
              }
              else {
                uint64_t v20 = 0;
              }
              (*(void (**)(void *, uint64_t))(*v3 + 16))(v3, v20);
            }
          }
        }
        v18 += 8;
        v19 -= 8;
      }
      while (v19);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v10);
  return (void *)(*(uint64_t (**)(void *))(*v3 + 8))(v3);
}

void sub_198A8EDB0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit33LinkDecorationFilteringController14observeUpdatesEONS_8FunctionIFvvEEEEUb0_ENK3__1clEvEUlRT_E_vJRNS2_35LinkDecorationFilteringDataObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] >= a2) {
    return result;
  }
  unsigned int v2 = a2;
  unint64_t v3 = result;
  uint64_t v4 = *(WTF **)result;
  uint64_t v5 = result[3];
  if (a2 >= 2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
    uint64_t v6 = result;
    void v3[2] = v2;
    *(void *)unint64_t v3 = result;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  uint64_t v6 = result + 4;
  *(void *)uint64_t result = result + 4;
  result[2] = 1;
  if (v5)
  {
LABEL_7:
    uint64_t v7 = 8 * v5;
    unint64_t v8 = (unsigned int **)v4;
    do
    {
      unint64_t v9 = *v8;
      *unint64_t v8 = 0;
      *(void *)uint64_t v6 = v9;
      uint64_t result = *v8;
      *unint64_t v8 = 0;
      if (result) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      v6 += 2;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
LABEL_11:
  if (v3 + 4 != (unsigned int *)v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(void *)unint64_t v3 = 0;
      void v3[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

char *WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, char *a2)
{
  unsigned int v2 = a2;
  if (qword_1EB358F80 <= (unint64_t)a2
    && qword_1EB358F80 + 8 * (unint64_t)dword_1EB358F8C > (unint64_t)a2)
  {
    uint64_t v6 = &a2[-qword_1EB358F80];
    unint64_t v7 = dword_1EB358F88 + ((unint64_t)dword_1EB358F88 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a1) {
      a1 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return &v6[qword_1EB358F80];
  }
  else
  {
    unint64_t v4 = dword_1EB358F88 + ((unint64_t)dword_1EB358F88 >> 2);
    if (v4 >= 0x10) {
      unint64_t v5 = v4 + 1;
    }
    else {
      unint64_t v5 = 16;
    }
    if (v5 > a1) {
      a1 = v5;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v2;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t result, void *a2)
{
  if (dword_1EB358F88 >= result) {
    return result;
  }
  int v2 = result;
  unint64_t v3 = (WTF *)qword_1EB358F80;
  uint64_t v4 = dword_1EB358F8C;
  if (result >= 2)
  {
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t result = WTF::fastMalloc((WTF *)(8 * result));
    unint64_t v5 = (uint64_t *)result;
    dword_1EB358F88 = v2;
    qword_1EB358F80 = result;
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  unint64_t v5 = &qword_1EB358F90;
  qword_1EB358F80 = (uint64_t)&qword_1EB358F90;
  dword_1EB358F88 = 1;
  if (dword_1EB358F8C)
  {
LABEL_7:
    uint64_t v6 = 8 * v4;
    unint64_t v7 = (unint64_t *)v3;
    do
    {
      uint64_t v8 = *v7;
      *unint64_t v7 = 0;
      *unint64_t v5 = v8;
      uint64_t result = *v7;
      *unint64_t v7 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)result + 8))(result);
      }
      ++v5;
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
LABEL_11:
  if (v3 != (WTF *)&qword_1EB358F90 && v3)
  {
    if ((WTF *)qword_1EB358F80 == v3)
    {
      qword_1EB358F80 = 0;
      dword_1EB358F88 = 0;
    }
    return WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v7 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WebCore::LinkDecorationFilteringData::LinkDecorationFilteringData(void *result, uint64_t a2)
{
  int v2 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v2 += 2;
  }
  void *result = v2;
  uint64_t v3 = *(_DWORD **)(a2 + 8);
  if (v3) {
    *v3 += 2;
  }
  result[1] = v3;
  uint64_t v4 = *(_DWORD **)(a2 + 16);
  if (v4) {
    *v4 += 2;
  }
  result[2] = v4;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb1_E3__3vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(*(void *)(a1 + 8) + 24);
  int v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v2 = &unk_1EE9BDAE8;
  uint64_t v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A8F3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb1_ENK3__3clEvEUlRT_E_vJRNS2_32StorageAccessPromptQuirkObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessPromptQuirkController::setCachedQuirksForTesting(WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebKit::StorageAccessPromptQuirkObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb2_E3__6vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(*(void *)(a1 + 8) + 16);
  int v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v2 = &unk_1EE9BDBB0;
  uint64_t v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A8F51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb2_ENK3__6clEvEUlRT_E_vJRNS2_41StorageAccessUserAgentStringQuirkObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessUserAgentStringQuirkController::setCachedQuirksForTesting(WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&)::$_0,void,WebKit::StorageAccessUserAgentStringQuirkObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 16))();
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    uint64_t v5 = (unsigned char *)(v2 + 24);
    do
    {
      *((void *)v5 - nw_tcp_options_set_no_delay(options, 1) = 0;
      *uint64_t v5 = 0;
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v12 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = v6;
    do
    {
      if (*(void *)v14 != -1)
      {
        if (WTF::equal(*(WTF **)v14, 0, v11))
        {
          unint64_t v15 = *(WTF::StringImpl **)v14;
          *(void *)uint64_t v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)v14);
          unsigned int v17 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v10);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v18 = *(WTF::ASCIICaseInsensitiveHash **)v14;
          *(void *)uint64_t v14 = 0;
          *(void *)uint64_t v16 = v18;
          *(unsigned char *)(v16 + 8) = *(unsigned char *)(v14 + 8);
          uint64_t v19 = *(WTF::StringImpl **)v14;
          *(void *)uint64_t v14 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v10);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v16;
          }
        }
      }
      v14 += 16;
      --v13;
    }
    while (v13);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  int v6 = 0;
  do
  {
    uint64_t v7 = v4 & v3;
    int v8 = WTF::equal(*(WTF **)(v2 + 16 * v7), 0, v5);
    int v4 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 16 * v7;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  uint64_t v7 = (WTF **)(v2 + 16 * v6);
  if (WTF::equal(*v7, 0, v8))
  {
LABEL_7:
    if (*a1) {
      return *a1 + 16 * *(unsigned int *)(*a1 - 4);
    }
    else {
      return 0;
    }
  }
  else
  {
    int v10 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
    {
      unsigned int v6 = (v6 + v10) & v5;
      uint64_t v7 = (WTF **)(v2 + 16 * v6);
      ++v10;
      if (WTF::equal(*v7, 0, v9)) {
        goto LABEL_7;
      }
    }
  }
  return (uint64_t)v7;
}

void WebKit::WebLockRegistryProxy::didReceiveMessage(WebKit::WebLockRegistryProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*((void *)this + 2) + 1115)) {
    return;
  }
  unsigned int v3 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x73F:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>>((uint64_t)v53, (uint64_t *)a3);
      if (!v64) {
        goto LABEL_16;
      }
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v6) {
        goto LABEL_16;
      }
      *(void *)&long long v65 = v7;
      unsigned int v3 = (IPC::Decoder *)((char *)&v65 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v65 + 1, a2);
      int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v8 = &unk_1EE9BDC60;
      v8[1] = v65;
      uint64_t v9 = *((void *)&v65 + 1);
      *((void *)&v65 + nw_tcp_options_set_no_delay(options, 1) = 0;
      v8[2] = v9;
      *(void *)&long long v69 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65 + 1);
      if (!v64) {
        goto LABEL_63;
      }
      long long v65 = v58;
      long long v66 = v59;
      WebKit::WebLockRegistryProxy::abortLockRequest((uint64_t)this, (uint64_t)v53, v57, *((uint64_t *)&v57 + 1), (uint64_t)&v65, (uint64_t)&v60, (uint64_t *)&v69);
      uint64_t v10 = v69;
      *(void *)&long long v69 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_16;
    case 0x740:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, &v65);
      if (v68)
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t)&v69);
        char v19 = v71;
        if (v71)
        {
          if (!v68) {
            goto LABEL_63;
          }
          v53[0] = 0;
          int v54 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v53, (uint64_t)&v65);
          v55[0] = 0;
          int v56 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v55, (uint64_t)v67);
          long long v57 = v69;
          long long v58 = v70;
          char v19 = 1;
        }
        else
        {
          v53[0] = 0;
        }
        LOBYTE(v59) = v19;
      }
      else
      {
        v53[0] = 0;
        LOBYTE(v59) = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65);
      if ((_BYTE)v59) {
        goto LABEL_37;
      }
      goto LABEL_64;
    case 0x741:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>>((uint64_t)v53, (uint64_t *)a3);
      if (v64)
      {
        long long v65 = v58;
        long long v66 = v59;
        WebKit::WebLockRegistryProxy::releaseLock((uint64_t)this, (uint64_t)v53, v57, *((uint64_t *)&v57 + 1), (uint64_t)&v65);
      }
LABEL_16:
      std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v53, v6);
      return;
    case 0x742:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, &v65);
      if (!v68
        || (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v3, (uint64_t)&v49), !v50)|| (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t)&v69), !v71)|| (IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v51), !v52))
      {
        v53[0] = 0;
        char v64 = 0;
LABEL_28:
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65);
        if (v64 {
          || (int v35 = *(WTF::StringImpl **)v3,
        }
              uint64_t v36 = *((void *)v3 + 1),
              *(void *)unsigned int v3 = 0,
              *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0,
              (uint64_t v37 = *((void *)v3 + 3)) != 0)
          && v36
          && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v35), v64))
        {
          long long v65 = v58;
          long long v66 = v59;
          WebKit::WebLockRegistryProxy::requestLock((uint64_t)this, (uint64_t)v53, v57, *((uint64_t *)&v57 + 1), &v65, (uint64_t)&v60);
          if (v64)
          {
            uint64_t v21 = v60;
            unsigned int v60 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v20);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
            if (v56 != -1) {
              ((void (*)(long long *, unsigned char *))off_1EE9BDC40[v56])(&v65, v55);
            }
            int v56 = -1;
            if (v54 != -1) {
              ((void (*)(long long *, unsigned char *))off_1EE9BDC40[v54])(&v65, v53);
            }
          }
        }
        return;
      }
      unsigned __int16 v16 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)v3);
      if (v16 <= 0xFFu) {
        goto LABEL_22;
      }
      unint64_t v22 = *((void *)v3 + 1);
      unsigned int v17 = *(WTF::StringImpl **)v3;
      unint64_t v23 = *((void *)v3 + 2) - *(void *)v3;
      if (v22 <= v23)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v40 = *((void *)v3 + 3);
        if (v40)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
            uint64_t v39 = *(WTF::StringImpl **)v3;
            unint64_t v38 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v38 = 0;
            uint64_t v39 = 0;
          }
        }
        goto LABEL_73;
      }
      int v24 = (unsigned __int8 *)v17 + v23;
      *((void *)v3 + 2) = v24 + 1;
      if (!v17)
      {
        unint64_t v38 = v22;
        uint64_t v39 = 0;
LABEL_73:
        unint64_t v22 = 0;
        unsigned int v17 = 0;
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v41 = *((void *)v3 + 3);
        if (v41)
        {
          if (v38)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
            unsigned int v17 = *(WTF::StringImpl **)v3;
            unint64_t v22 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v22 = 0;
            unsigned int v17 = 0;
          }
        }
        goto LABEL_74;
      }
      unsigned int v25 = *v24;
      if (v25 >= 2)
      {
LABEL_74:
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v42 = *((void *)v3 + 3);
        if (v42 && v22) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v17);
        }
        goto LABEL_22;
      }
      BOOL v26 = v25 != 0;
      if (v22 <= v24 + 1 - (unsigned __int8 *)v17)
      {
        unint64_t v43 = 0;
        unsigned int v44 = 0;
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v45 = *((void *)v3 + 3);
        if (v45)
        {
          (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
          unint64_t v43 = 0;
          unsigned int v17 = *(WTF::StringImpl **)v3;
          uint64_t v47 = *((void *)v3 + 1);
          uint64_t v48 = *((void *)v3 + 3);
          *(void *)unsigned int v3 = 0;
          *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          unsigned int v44 = 0;
          if (v48)
          {
            if (v47)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v48 + 16))(v48, v17);
              unsigned int v44 = *(WTF::StringImpl **)v3;
              unint64_t v43 = *((void *)v3 + 1);
            }
          }
        }
        goto LABEL_78;
      }
      *((void *)v3 + 2) = v24 + 2;
      unsigned int v27 = v24[1];
      if (v27 >= 2)
      {
        unint64_t v43 = v22;
        unsigned int v44 = v17;
LABEL_78:
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v46 = *((void *)v3 + 3);
        if (v46 && v43) {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v46 + 16))(v46, v44, v43);
        }
LABEL_22:
        char v18 = 0;
        v53[0] = 0;
LABEL_58:
        char v64 = v18;
        if (v52)
        {
          unsigned int v31 = v51;
          uint64_t v51 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v17);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
        }
        goto LABEL_28;
      }
      BOOL v28 = v27 != 0;
      if (v68 && v50 && v71 && v52)
      {
        char v29 = v16;
        v53[0] = 0;
        int v54 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v53, (uint64_t)&v65);
        v55[0] = 0;
        int v56 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v55, (uint64_t)v67);
        long long v57 = v49;
        long long v58 = v69;
        long long v59 = v70;
        unsigned int v30 = v51;
        uint64_t v51 = 0;
        unsigned int v60 = v30;
        char v61 = v29;
        BOOL v62 = v26;
        char v18 = 1;
        BOOL v63 = v28;
        goto LABEL_58;
      }
LABEL_63:
      __break(1u);
LABEL_64:
      long long v32 = *(WTF::StringImpl **)v3;
      uint64_t v33 = *((void *)v3 + 1);
      *(void *)unsigned int v3 = 0;
      *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v34 = *((void *)v3 + 3);
      if (v34)
      {
        if (v33)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v34 + 16))(v34, v32);
          if ((_BYTE)v59)
          {
LABEL_37:
            long long v65 = v57;
            long long v66 = v58;
            WebKit::WebLockRegistryProxy::clientIsGoingAway(this, (uint64_t)v53, (uint64_t)&v65);
            if ((_BYTE)v59)
            {
              if (v56 != -1) {
                ((void (*)(long long *, unsigned char *))off_1EE9BDC40[v56])(&v65, v55);
              }
              int v56 = -1;
              if (v54 != -1) {
                ((void (*)(long long *, unsigned char *))off_1EE9BDC40[v54])(&v65, v53);
              }
            }
          }
        }
      }
      return;
    case 0x743:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>((uint64_t *)a3, v53);
      if (!(_BYTE)v57) {
        goto LABEL_13;
      }
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!v12) {
        goto LABEL_13;
      }
      *(void *)&long long v65 = v11;
      unsigned int v3 = (IPC::Decoder *)((char *)&v65 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v65 + 1, a2);
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v13 = &unk_1EE9BDC88;
      v13[1] = v65;
      uint64_t v14 = *((void *)&v65 + 1);
      *((void *)&v65 + nw_tcp_options_set_no_delay(options, 1) = 0;
      v13[2] = v14;
      *(void *)&long long v69 = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v65 + 1);
      if (!(_BYTE)v57) {
        goto LABEL_63;
      }
      WebKit::WebLockRegistryProxy::snapshot((uint64_t)this, (uint64_t)v53, (uint64_t *)&v69);
      uint64_t v15 = v69;
      *(void *)&long long v69 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
LABEL_13:
      std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v53);
      return;
    default:
      return;
  }
}

atomic_uint *WebKit::WebPermissionController::didReceiveMessage(atomic_uint *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v3 = this;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add(this + 2, 1u);
  if (*((_WORD *)a3 + 25) != 2582) {
    goto LABEL_12;
  }
  unsigned __int16 v5 = IPC::Decoder::decode<WebCore::PermissionName>((uint64_t *)a3);
  if (v5 <= 0xFFu || (unsigned __int8 v6 = v5, IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)a3, v15), !v17))
  {
    unsigned __int8 v11 = 0;
    char v14 = 0;
    goto LABEL_11;
  }
  unsigned __int8 v11 = v6;
  v12[0] = 0;
  int v13 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v12, (uint64_t)v15);
  char v14 = 1;
  if (v17)
  {
    if (v16 != -1)
    {
      ((void (*)(char *, unsigned char *))off_1EE9BDC40[v16])(&v10, v15);
      if (!v14)
      {
LABEL_11:
        uint64_t v7 = *(void *)a3;
        uint64_t v8 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        this = (atomic_uint *)*((void *)a3 + 3);
        if (!this) {
          goto LABEL_12;
        }
        if (!v8) {
          goto LABEL_12;
        }
        this = (atomic_uint *)(*(uint64_t (**)(atomic_uint *, uint64_t))(*(void *)this + 16))(this, v7);
        if (!v14) {
          goto LABEL_12;
        }
      }
    }
  }
  this = (atomic_uint *)(*(uint64_t (**)(atomic_uint *, void, unsigned char *))(*(void *)v3 + 40))(v3, v11, v12);
  if (v14 && v13 != -1) {
    this = (atomic_uint *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9BDC40[v13])(v15, v12);
  }
LABEL_12:
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3 + 2);
    uint64_t v9 = *(uint64_t (**)(atomic_uint *))(*(void *)v3 + 8);
    return (atomic_uint *)v9(v3);
  }
  return this;
}

atomic_uint *non-virtual thunk to'WebKit::WebPermissionController::didReceiveMessage(atomic_uint *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebPermissionController::didReceiveMessage(this - 4, a2, a3);
}

uint64_t WebKit::WebPermissionControllerProxy::didReceiveMessage(uint64_t this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*((_WORD *)a3 + 25) != 2581) {
    return this;
  }
  unsigned int v3 = (uint64_t *)a3;
  uint64_t v5 = this;
  IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, &v36);
  if (v39)
  {
    unsigned __int16 v6 = IPC::Decoder::decode<WebCore::PermissionName>(v3);
    if (*v3)
    {
      char v7 = v6;
      if (v6 <= 0xFFu) {
        goto LABEL_30;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v3, &v26);
      char v8 = v27;
      if (!v27) {
        goto LABEL_17;
      }
      unint64_t v9 = v3[1];
      uint64_t v10 = *v3;
      unint64_t v11 = v3[2] - *v3;
      if (v9 <= v11)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        *unsigned int v3 = 0;
        v3[1] = 0;
        uint64_t v18 = v3[3];
        if (v18)
        {
          if (v9)
          {
            (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
            uint64_t v17 = *v3;
            uint64_t v16 = v3[1];
          }
          else
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
          }
        }
      }
      else
      {
        char v12 = (unsigned __int8 *)(v10 + v11);
        void v3[2] = (uint64_t)(v12 + 1);
        if (v10)
        {
          unsigned int v13 = *v12;
          if (v13 < 4)
          {
            if (!v39) {
              goto LABEL_30;
            }
            v28[0] = 0;
            int v29 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v28, (uint64_t)&v36);
            v30[0] = 0;
            int v31 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)&v38);
            v32[0] = v7;
            long long v33 = v26;
            unsigned __int8 v34 = v13;
            char v8 = 1;
            goto LABEL_18;
          }
          goto LABEL_15;
        }
        uint64_t v16 = v9;
        uint64_t v17 = 0;
      }
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      *unsigned int v3 = 0;
      v3[1] = 0;
      uint64_t v19 = v3[3];
      if (v19)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v16);
          uint64_t v10 = *v3;
          unint64_t v9 = v3[1];
        }
        else
        {
          unint64_t v9 = 0;
          uint64_t v10 = 0;
        }
      }
LABEL_15:
      *unsigned int v3 = 0;
      v3[1] = 0;
      uint64_t v20 = v3[3];
      if (v20 && v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v10);
      }
      char v8 = 0;
LABEL_17:
      v28[0] = 0;
LABEL_18:
      char v35 = v8;
      goto LABEL_19;
    }
    uint64_t v14 = v3[1];
    *unsigned int v3 = 0;
    v3[1] = 0;
    uint64_t v15 = v3[3];
    if (v15 && v14) {
      (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, 0);
    }
  }
  v28[0] = 0;
  char v35 = 0;
LABEL_19:
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
  if (!v35) {
    goto LABEL_31;
  }
  while (1)
  {
    this = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
    if (!v21) {
      break;
    }
    uint64_t v36 = this;
    unsigned int v3 = (uint64_t *)v37;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v37, a2);
    unint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9BDCB0;
    v22[1] = v36;
    unint64_t v23 = v37[0];
    v37[0] = 0;
    v22[2] = v23;
    *(void *)&long long v26 = v22;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v37);
    if (v35)
    {
      WebKit::WebPermissionControllerProxy::query(v5, (const WebCore::ClientOrigin *)v28, v32, v33, SBYTE8(v33), v34, (uint64_t *)&v26);
      this = v26;
      *(void *)&long long v26 = 0;
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    uint64_t v24 = *v3;
    uint64_t v25 = v3[1];
    *unsigned int v3 = 0;
    v3[1] = 0;
    this = v3[3];
    if (this)
    {
      if (v25)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 16))(this, v24);
        if (v35) {
          continue;
        }
      }
    }
    return this;
  }
  if (v35)
  {
    if (v31 != -1) {
      this = ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9BDC40[v31])(&v36, v30);
    }
    int v31 = -1;
    if (v29 != -1) {
      return ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9BDC40[v29])(&v36, v28);
    }
  }
  return this;
}

void *WebKit::WebScreenOrientationManager::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2822)
  {
    uint64_t v3 = (uint64_t)this;
    this = (void *)IPC::Decoder::decode<std::tuple<WebCore::ScreenOrientationType>>((uint64_t *)a3);
    if ((unsigned __int16)this >= 0x100u)
    {
      return WebKit::WebScreenOrientationManager::orientationDidChange(v3, this);
    }
  }
  return this;
}

void *non-virtual thunk to'WebKit::WebScreenOrientationManager::didReceiveMessage(WebKit::WebScreenOrientationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebScreenOrientationManager::didReceiveMessage((void *)this - 4, a2, a3);
}

WebKit::WebScreenOrientationManagerProxy *WebKit::WebScreenOrientationManagerProxy::didReceiveMessage(WebKit::WebScreenOrientationManagerProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 2821:
      return (WebKit::WebScreenOrientationManagerProxy *)WebKit::WebScreenOrientationManagerProxy::unlock((uint64_t)this);
    case 2820:
      unsigned __int16 v12 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v12 <= 0xFFu)
      {
LABEL_16:
        uint64_t v13 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        this = (WebKit::WebScreenOrientationManagerProxy *)*((void *)a3 + 3);
        if (this && v13)
        {
          uint64_t v14 = *(uint64_t (**)(void))(*(void *)this + 16);
          return (WebKit::WebScreenOrientationManagerProxy *)v14();
        }
        return this;
      }
      return (WebKit::WebScreenOrientationManagerProxy *)WebKit::WebScreenOrientationManagerProxy::setShouldSendChangeNotification((uint64_t)v3, v12 != 0);
    case 2819:
      unsigned __int16 v7 = IPC::Decoder::decode<WebCore::ScreenOrientationLockType>((uint64_t *)a3);
      if (v7 > 0xFFu)
      {
        unsigned __int8 v8 = v7;
        this = (WebKit::WebScreenOrientationManagerProxy *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v9)
        {
          uint64_t v15 = (uint64_t)this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2);
          uint64_t v10 = (WebKit::WebScreenOrientationManagerProxy *)WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v10 = &unk_1EE9BDCD8;
          *((void *)v10 + nw_tcp_options_set_no_delay(options, 1) = v15;
          unint64_t v11 = v16;
          uint64_t v16 = 0;
          uint64_t v17 = v10;
          *((void *)v10 + 2) = v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
          WebKit::WebScreenOrientationManagerProxy::lock(v3, v8, (uint64_t *)&v17);
          this = v17;
          uint64_t v17 = 0;
          if (this) {
            return (WebKit::WebScreenOrientationManagerProxy *)(*(uint64_t (**)(WebKit::WebScreenOrientationManagerProxy *))(*(void *)this + 8))(this);
          }
        }
        return this;
      }
      goto LABEL_16;
    default:
      return this;
  }
}

BOOL WebKit::WebScreenOrientationManagerProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4 = *(unsigned __int16 *)(a3 + 50);
  if (v4 == 3827)
  {
    unsigned __int16 v6 = *a4;
    *a4 = 0;
    unint64_t v11 = v6;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v12, a2);
    unsigned __int16 v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned __int16 v7 = &unk_1EE9BDD00;
    v7[1] = v11;
    unsigned __int8 v8 = v12[0];
    v12[0] = 0;
    _DWORD v7[2] = v8;
    uint64_t v13 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v12);
    WebKit::WebScreenOrientationManagerProxy::currentOrientation(a1, (uint64_t *)&v13);
    uint64_t v9 = (uint64_t)v13;
    uint64_t v13 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  return v4 == 3827;
}

void WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(WTF::StringImpl **this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  switch(*((_WORD *)a3 + 25))
  {
    case 0xB07:
      WebKit::WebSharedWorkerContextManagerConnection::close((WebKit::WebSharedWorkerContextManagerConnection *)this);
      return;
    case 0xB08:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v109);
      if (!v111
        || (uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
            !v6)
        || (uint64_t v7 = v5, IPC::Decoder::decode<WebCore::WorkerOptions>((uint64_t)&v51, (uint64_t *)a3), !v53))
      {
        LOBYTE(v73) = 0;
        char v108 = 0;
LABEL_50:
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
        if (v108 {
          || (uint64_t v48 = *(void *)a3,
        }
              uint64_t v49 = *((void *)a3 + 1),
              *(void *)a3 = 0,
              *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0,
              (uint64_t v50 = *((void *)a3 + 3)) != 0)
          && v49
          && ((*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48), v108))
        {
          WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker((uint64_t)this, (uint64_t)&v73, v79, (uint64_t)&v80, (uint64_t)v82, (uint64_t)&v97);
          if (v108)
          {
            uint64_t v41 = v107;
            v107 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2) {
                WTF::StringImpl::destroy(v41, v40);
              }
              else {
                *(_DWORD *)v41 -= 2;
              }
            }
            if (v102)
            {
              uint64_t v45 = v98;
              v98 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2) {
                  WTF::StringImpl::destroy(v45, v40);
                }
                else {
                  *(_DWORD *)v45 -= 2;
                }
              }
            }
            WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)v82, v40);
            uint64_t v47 = v81;
            v81 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2) {
                WTF::StringImpl::destroy(v47, v46);
              }
              else {
                *(_DWORD *)v47 -= 2;
              }
            }
            if (v78 != -1) {
              ((void (*)(long long *, char *))off_1EE9BDC40[v78])(&v54, (char *)&v75 + 8);
            }
            int v78 = -1;
            if (v75 != -1) {
              ((void (*)(long long *, WTF::StringImpl **))off_1EE9BDC40[v75])(&v54, &v73);
            }
          }
        }
        return;
      }
      IPC::Decoder::decode<WebCore::WorkerFetchResult>((uint64_t *)a3, (uint64_t)&v54);
      if (!v72)
      {
        LOBYTE(v73) = 0;
        char v108 = 0;
LABEL_76:
        if (v53 && v52)
        {
          if (*(_DWORD *)v52 == 2) {
            WTF::StringImpl::destroy(v52, v8);
          }
          else {
            *(_DWORD *)v52 -= 2;
          }
        }
        goto LABEL_50;
      }
      IPC::Decoder::decode<WebCore::WorkerInitializationData>((uint64_t *)a3, (uint64_t)&v112);
      char v10 = v123;
      if (!v123)
      {
        LOBYTE(v73) = 0;
LABEL_74:
        char v108 = v10;
        std::__optional_destruct_base<WebCore::WorkerInitializationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v112, v9);
        if (v72) {
          WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v54, v8);
        }
        goto LABEL_76;
      }
      if (v111 && v72)
      {
        LOBYTE(v73) = 0;
        LODWORD(v75) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v73, (uint64_t)v109);
        BYTE8(v75) = 0;
        int v78 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v75 + 8, (uint64_t)&v110);
        uint64_t v79 = v7;
        __int16 v80 = v51;
        unint64_t v11 = v52;
        char v52 = 0;
        v81 = v11;
        v82[0] = v54;
        long long v12 = v57;
        v82[2] = v56;
        long long v54 = 0u;
        v82[1] = v55;
        LODWORD(v55) = v55 & 0xFFFFFFFE;
        long long v57 = 0u;
        v82[3] = v12;
        uint64_t v13 = v58;
        uint64_t v58 = 0;
        uint64_t v83 = v13;
        char v85 = v60;
        int v84 = v59;
        __int16 v86 = v61;
        long long v14 = v62;
        long long v62 = 0u;
        long long v15 = v63;
        long long v63 = 0u;
        long long v87 = v14;
        long long v88 = v15;
        uint64_t v16 = v64;
        uint64_t v64 = 0;
        long long v90 = v65;
        long long v91 = v66;
        LODWORD(v65) = v65 & 0xFFFFFFFE;
        uint64_t v89 = v16;
        uint64_t v92 = v67;
        __int16 v94 = v69;
        int v93 = v68;
        uint64_t v17 = v70;
        uint64_t v67 = 0;
        uint64_t v70 = 0;
        uint64_t v95 = v17;
        char v96 = v71;
        LOBYTE(v97) = 0;
        char v102 = 0;
        if (v117)
        {
          long long v97 = v112;
          uint64_t v18 = v113;
          v113 = 0;
          v98 = v18;
          long long v99 = v114;
          long long v100 = v115;
          LODWORD(v114) = v114 & 0xFFFFFFFE;
          __int16 v101 = v116;
          char v102 = 1;
        }
        long long v103 = v118;
        long long v104 = v119;
        long long v105 = v120;
        __int16 v106 = v121;
        uint64_t v19 = v122;
        v122 = 0;
        char v10 = 1;
        v107 = v19;
        goto LABEL_74;
      }
      goto LABEL_88;
    case 0xB09:
      uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v22
        && (uint64_t v23 = v21,
            IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)&v54), (_BYTE)v56)&& (IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v112), BYTE8(v112)))
      {
        if (!(_BYTE)v56) {
LABEL_88:
        }
          __break(1u);
        long long v74 = v54;
        long long v75 = v55;
        uint64_t v24 = (WTF::StringImpl *)v112;
        char v73 = (WTF::StringImpl *)v23;
        long long v76 = (WTF::StringImpl *)v112;
        char v77 = 1;
        uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v26)
        {
          *(void *)&long long v54 = v25;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v54 + 1, a2);
          char v27 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v27 = &unk_1EE9BDD28;
          v27[1] = v54;
          uint64_t v28 = *((void *)&v54 + 1);
          *((void *)&v54 + nw_tcp_options_set_no_delay(options, 1) = 0;
          v27[2] = v28;
          *(void *)&long long v112 = v27;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54 + 1);
          WebCore::SharedWorkerContextManager::Connection::postConnectEvent();
          uint64_t v29 = v112;
          *(void *)&long long v112 = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          if (!v77) {
            return;
          }
          uint64_t v24 = v76;
        }
        long long v76 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
          {
            unsigned __int8 v34 = v24;
LABEL_81:
            WTF::StringImpl::destroy(v34, v26);
          }
          else
          {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
      else
      {
        uint64_t v42 = *(void *)a3;
        uint64_t v43 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v44 = *((void *)a3 + 3);
        if (v44 && v43) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v42);
        }
      }
      return;
    case 0xB0A:
      uint64_t v30 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v31)
      {
        MEMORY[0x1F4171728](this, v30);
      }
      return;
    case 0xB0B:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v73);
      if (!(_BYTE)v74) {
        return;
      }
      long long v33 = v73;
      char v73 = 0;
      unsigned __int8 v34 = this[9];
      this[9] = v33;
      if (!v34) {
        return;
      }
      int v35 = *(_DWORD *)v34 - 2;
      if (*(_DWORD *)v34 != 2) {
        goto LABEL_37;
      }
      WTF::StringImpl::destroy(v34, v32);
      if (!(_BYTE)v74) {
        return;
      }
      unsigned __int8 v34 = v73;
      char v73 = 0;
      if (!v34) {
        return;
      }
      int v35 = *(_DWORD *)v34 - 2;
      if (*(_DWORD *)v34 == 2) {
        goto LABEL_81;
      }
LABEL_37:
      *(_DWORD *)unsigned __int8 v34 = v35;
      return;
    case 0xB0C:
      uint64_t v36 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v37)
      {
        MEMORY[0x1F4171730](this, v36);
      }
      return;
    case 0xB0D:
      uint64_t v38 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v39)
      {
        MEMORY[0x1F4171738](this, v38);
      }
      return;
    case 0xB0E:
      IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore>>(a3, (uint64_t)&v73);
      if (v77) {
        WebKit::WebSharedWorkerContextManagerConnection::updatePreferencesStore((WebKit::WebSharedWorkerContextManagerConnection *)this, (const WebKit::WebPreferencesStore *)&v73);
      }
      std::optional<WebKit::WebPreferencesStore>::~optional((uint64_t)&v73);
      return;
    default:
      return;
  }
}

void non-virtual thunk to'WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(WTF::StringImpl **this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

WTF::StringImpl *WebKit::WebSharedWorkerObjectConnection::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v5 = this;
  ++*((_DWORD *)this + 2);
  int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 == 2833)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v64, (uint64_t *)a3);
    if (!v64[16]) {
      goto LABEL_43;
    }
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v53);
    if (!LOBYTE(v53[1])) {
      goto LABEL_43;
    }
    unint64_t v9 = *((void *)a3 + 1);
    unsigned __int8 v8 = *(WTF::StringImpl **)a3;
    unint64_t v18 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
    if (v9 < v18 || v9 - v18 <= 3) {
      goto LABEL_86;
    }
    uint64_t v20 = (int *)((char *)v8 + v18);
    *((void *)a3 + 2) = v20 + 1;
    if (!v8)
    {
      unint64_t v40 = v9;
      uint64_t v41 = 0;
LABEL_87:
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v43 = *((void *)a3 + 3);
      if (v43 && v40) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v43 + 16))(v43, v41, v40);
      }
LABEL_91:
      int v30 = 0;
      v55[0] = 0;
      v55[48] = 0;
      goto LABEL_35;
    }
    unint64_t v21 = (((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v8;
    if (v9 < v21 || v9 - v21 <= 3)
    {
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v44 = *((void *)a3 + 3);
      if (v44)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
          unsigned __int8 v8 = *(WTF::StringImpl **)a3;
          uint64_t v51 = *((void *)a3 + 1);
          uint64_t v52 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          if (v52)
          {
            if (v51) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v8);
            }
          }
        }
      }
      goto LABEL_91;
    }
    int v23 = *v20;
    int v24 = *(_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a3 + 2) = (((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v62);
    if (!LOBYTE(v62[1]))
    {
      int v30 = 0;
      v55[0] = 0;
      v55[48] = 0;
      goto LABEL_35;
    }
    unint64_t v9 = *((void *)a3 + 1);
    unsigned __int8 v8 = *(WTF::StringImpl **)a3;
    unint64_t v25 = *((void *)a3 + 2) - *(void *)a3;
    if (v9 <= v25)
    {
      unint64_t v45 = 0;
      uint64_t v46 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v47 = *((void *)a3 + 3);
      if (v47)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
          uint64_t v46 = *(void *)a3;
          unint64_t v45 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v45 = 0;
          uint64_t v46 = 0;
        }
      }
    }
    else
    {
      long long v26 = (unsigned __int8 *)v8 + v25;
      *((void *)a3 + 2) = v26 + 1;
      if (v8)
      {
        unsigned int v27 = *v26;
        if (v27 < 2)
        {
          if (!LOBYTE(v53[1]))
          {
LABEL_85:
            __break(1u);
LABEL_86:
            unint64_t v40 = 0;
            uint64_t v41 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            uint64_t v42 = *((void *)a3 + 3);
            if (v42)
            {
              if (v9)
              {
                (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
                uint64_t v41 = *(void *)a3;
                unint64_t v40 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v40 = 0;
                uint64_t v41 = 0;
              }
            }
            goto LABEL_87;
          }
          BOOL v28 = v27 != 0;
          *(_OWORD *)long long v55 = *(_OWORD *)v64;
          uint64_t v29 = v53[0];
          v53[0] = 0;
          *(void *)&v55[16] = v29;
          *(_DWORD *)&unsigned char v55[24] = v23;
          *(_DWORD *)&v55[28] = v24;
          *(WTF::StringImpl **)&v55[32] = v62[0];
          v55[40] = v28;
          int v30 = 1;
          v55[48] = 1;
LABEL_35:
          if (LOBYTE(v53[1]))
          {
            char v31 = v53[0];
            v53[0] = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
              {
                WTF::StringImpl::destroy(v31, v8);
                if (!v30) {
                  goto LABEL_43;
                }
LABEL_67:
                this = (WTF::StringImpl *)WebCore::SharedWorkerObjectConnection::postErrorToWorkerObject();
                if (!v55[48]) {
                  goto LABEL_79;
                }
                uint64_t v38 = *(WTF::StringImpl **)&v55[32];
                *(void *)&v55[32] = 0;
                if (!v38) {
                  goto LABEL_75;
                }
                goto LABEL_72;
              }
              *(_DWORD *)v31 -= 2;
            }
          }
          if (!v30) {
            goto LABEL_43;
          }
          goto LABEL_67;
        }
LABEL_94:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v49 = *((void *)a3 + 3);
        if (v49 && v9) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v49 + 16))(v49, v8);
        }
        v55[0] = 0;
        v55[48] = 0;
        if (LOBYTE(v62[1]))
        {
          uint64_t v50 = v62[0];
          v62[0] = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 != 2)
            {
              int v30 = 0;
              *(_DWORD *)v50 -= 2;
              goto LABEL_35;
            }
            WTF::StringImpl::destroy(v50, v8);
          }
        }
        int v30 = 0;
        goto LABEL_35;
      }
      unint64_t v45 = v9;
      uint64_t v46 = 0;
    }
    unint64_t v9 = 0;
    unsigned __int8 v8 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v48 = *((void *)a3 + 3);
    if (v48)
    {
      if (v45)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v48 + 16))(v48, v46, v45);
        unsigned __int8 v8 = *(WTF::StringImpl **)a3;
        unint64_t v9 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        unsigned __int8 v8 = 0;
      }
    }
    goto LABEL_94;
  }
  if (v6 == 2832)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v62, (uint64_t *)a3);
    if (!v63) {
      goto LABEL_43;
    }
    IPC::Decoder::decode<WebCore::ResourceError>(a3, (uint64_t)v64);
    if (!v70)
    {
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64, v12);
      goto LABEL_43;
    }
    long long v13 = *(_OWORD *)v64;
    *(void *)uint64_t v64 = 0;
    *(void *)&v64[8] = 0;
    *(_OWORD *)long long v55 = *(_OWORD *)v62;
    *(_OWORD *)&v55[16] = v13;
    *(_OWORD *)&v55[32] = *(_OWORD *)&v64[16];
    *(_OWORD *)&v55[48] = *(_OWORD *)&v64[32];
    *(_DWORD *)&v64[16] &= ~1u;
    long long v56 = v65;
    int v57 = v66;
    __int16 v58 = v67;
    long long v14 = v68;
    long long v65 = 0;
    int v68 = 0;
    CFTypeRef cf = v14;
    char v60 = v69;
    char v61 = 1;
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64, v12);
    WebCore::SharedWorkerObjectConnection::notifyWorkerObjectOfLoadCompletion();
    CFTypeRef v16 = cf;
    CFTypeRef cf = 0;
    if (v16) {
      CFRelease(v16);
    }
    uint64_t v17 = v56;
    long long v56 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v38 = *(WTF::StringImpl **)&v55[24];
    *(void *)&unsigned char v55[24] = 0;
    if (!v38)
    {
LABEL_75:
      this = *(WTF::StringImpl **)&v55[16];
      *(void *)&v55[16] = 0;
      if (!this) {
        goto LABEL_79;
      }
      goto LABEL_76;
    }
LABEL_72:
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v15);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
    goto LABEL_75;
  }
  if (v6 != 2831) {
    goto LABEL_79;
  }
  IPC::Decoder::decode<WTF::URL>(a3, v64);
  if (!v64[40]) {
    goto LABEL_43;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v53, (uint64_t *)a3);
  if (v54)
  {
    IPC::Decoder::decode<WebCore::WorkerOptions>((uint64_t)v62, (uint64_t *)a3);
    if (!v63)
    {
      int v11 = 0;
      v55[0] = 0;
      goto LABEL_47;
    }
    if (v64[40])
    {
      uint64_t v10 = *(void *)v64;
      *(void *)uint64_t v64 = 0;
      *(void *)long long v55 = v10;
      *(_OWORD *)&v55[8] = *(_OWORD *)&v64[8];
      *(_OWORD *)&unsigned char v55[24] = *(_OWORD *)&v64[24];
      *(_DWORD *)&v64[8] &= ~1u;
      *(_OWORD *)&v55[40] = *(_OWORD *)v53;
      *(_WORD *)&v55[56] = v62[0];
      uint64_t v3 = v62[1];
      long long v56 = v62[1];
      int v11 = 1;
LABEL_47:
      LOBYTE(v57) = v11;
      goto LABEL_48;
    }
    goto LABEL_85;
  }
  int v11 = 0;
  v55[0] = 0;
  LOBYTE(v57) = 0;
LABEL_48:
  if (v64[40])
  {
    unsigned __int8 v34 = *(WTF::StringImpl **)v64;
    *(void *)uint64_t v64 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
        goto LABEL_52;
      }
      WTF::StringImpl::destroy(v34, v8);
      if (v11) {
        goto LABEL_55;
      }
LABEL_43:
      uint64_t v32 = *(void *)a3;
      uint64_t v33 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      this = (WTF::StringImpl *)*((void *)a3 + 3);
      if (this && v33) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)this + 16))(this, v32);
      }
      goto LABEL_79;
    }
  }
LABEL_52:
  if (!v11) {
    goto LABEL_43;
  }
LABEL_55:
  uint64_t v35 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
  if (!(_BYTE)v15) {
    goto LABEL_60;
  }
  *(void *)uint64_t v64 = v35;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v64[8], a2);
  uint64_t v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v36 = &unk_1EE9BDD50;
  *((void *)v36 + nw_tcp_options_set_no_delay(options, 1) = *(void *)v64;
  uint64_t v37 = *(void *)&v64[8];
  *(void *)&v64[8] = 0;
  *((void *)v36 + 2) = v37;
  v62[0] = v36;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64[8]);
  WebCore::SharedWorkerObjectConnection::fetchScriptInClient();
  this = v62[0];
  v62[0] = 0;
  if (this) {
    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
  }
  if ((_BYTE)v57)
  {
    uint64_t v3 = v56;
LABEL_60:
    long long v56 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v15);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    this = *(WTF::StringImpl **)v55;
    *(void *)long long v55 = 0;
    if (!this) {
      goto LABEL_79;
    }
LABEL_76:
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_79:
  if (*((_DWORD *)v5 + 2) == 1)
  {
    char v39 = *(uint64_t (**)(WTF::StringImpl *))(*(void *)v5 + 8);
    return (WTF::StringImpl *)v39(v5);
  }
  else
  {
    --*((_DWORD *)v5 + 2);
  }
  return this;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::didReceiveMessage(WebKit::WebSharedWorkerObjectConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  return WebKit::WebSharedWorkerObjectConnection::didReceiveMessage((WebKit::WebSharedWorkerObjectConnection *)((char *)this - 32), a2, a3);
}

void WebKit::WebSharedWorkerServerConnection::didReceiveMessage(WebKit::WebSharedWorkerServerConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  switch(*((_WORD *)a3 + 25))
  {
    case 0xB12:
      IPC::Decoder::decode<WebCore::SharedWorkerKey>((uint64_t)v33, (uint64_t *)a3);
      if (v34
        && (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)&v15, (uint64_t *)a3), v16)&& (IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)v17), v18))
      {
        IPC::Decoder::decode<WebCore::WorkerOptions>((uint64_t)&v19, (uint64_t *)a3);
        char v6 = v21;
        if (v21)
        {
          if (!v34 || !v18) {
            __break(1u);
          }
          std::__tuple_leaf<0ul,WebCore::SharedWorkerKey,false>::__tuple_leaf[abi:sn180100]<WebCore::SharedWorkerKey,void>((uint64_t)v22, (uint64_t)v33);
          long long v28 = v15;
          v29[0] = v17[0];
          v29[1] = v17[1];
          __int16 v30 = v19;
          char v31 = v20;
          char v6 = 1;
        }
        else
        {
          v22[0] = 0;
        }
        char v32 = v6;
      }
      else
      {
        v22[0] = 0;
        char v32 = 0;
      }
      std::__optional_destruct_base<WebCore::SharedWorkerKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v5);
      if (v32 {
        || (uint64_t v12 = *(void *)a3,
      }
            uint64_t v13 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0,
            (uint64_t v14 = *((void *)a3 + 3)) != 0)
        && v13
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12), v32))
      {
        WebKit::WebSharedWorkerServerConnection::requestSharedWorker(this, (uint64_t)v22, v28, *((uint64_t *)&v28 + 1), (uint64_t)v29, (uint64_t)&v30);
        if (v32)
        {
          unint64_t v9 = v31;
          char v31 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v8);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
          uint64_t v10 = v27;
          unsigned int v27 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v8);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          int v11 = v26;
          long long v26 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v8);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          if (v25 != -1) {
            ((void (*)(unsigned char *, uint64_t *))off_1EE9BDC40[v25])(v33, &v24);
          }
          int v25 = -1;
          if (v23 != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9BDC40[v23])(v33, v22);
          }
        }
      }
      return;
    case 0xB13:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v22, (uint64_t *)a3);
      if (LOBYTE(v29[0])) {
        WebKit::WebSharedWorkerServerConnection::resumeForBackForwardCache(this, (uint64_t)v22, v28, *((uint64_t *)&v28 + 1));
      }
      goto LABEL_15;
    case 0xB14:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v22, (uint64_t *)a3);
      if (LOBYTE(v29[0])) {
        WebKit::WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway(this, (uint64_t)v22, v28, *((uint64_t *)&v28 + 1));
      }
      goto LABEL_15;
    case 0xB15:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v22, (uint64_t *)a3);
      if (LOBYTE(v29[0])) {
        WebKit::WebSharedWorkerServerConnection::suspendForBackForwardCache(this, (uint64_t)v22, v28, *((uint64_t *)&v28 + 1));
      }
LABEL_15:
      std::__optional_destruct_base<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v7);
      break;
    default:
      return;
  }
}

void non-virtual thunk to'WebKit::WebSharedWorkerServerConnection::didReceiveMessage(WebKit::WebSharedWorkerServerConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v14);
  if (!v16
    || (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, (uint64_t)&v10), !v11)|| (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((IPC::Decoder *)a2, (uint64_t)v17), !v18))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 128) = 0;
    goto LABEL_11;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v12);
  char v4 = v13;
  if (!v13) {
    goto LABEL_19;
  }
  char v4 = v16;
  if (!v16 || (char v4 = v11) == 0 || (char v4 = v18) == 0)
  {
    __break(1u);
LABEL_19:
    *(unsigned char *)a1 = 0;
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v14);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, (uint64_t)&v15);
  long long v5 = v17[0];
  long long v6 = v17[1];
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = v12;
  char v4 = 1;
LABEL_9:
  *(unsigned char *)(a1 + 128) = v4;
LABEL_11:
  uint64_t result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  if (!*(unsigned char *)(a1 + 128))
  {
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v8)
      {
        unint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v9();
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDC40[v4])(&v7, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 24);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDC40[v5])(&v8, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy16AbortLockRequestEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSC_INS_4UUIDEEEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDC60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy16AbortLockRequestEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSC_INS_4UUIDEEEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDC60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy16AbortLockRequestEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSC_INS_4UUIDEEEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3339;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  long long v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy8SnapshotEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS9_22WebLockManagerSnapshotEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDC88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy8SnapshotEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS9_22WebLockManagerSnapshotEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDC88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy8SnapshotEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS9_22WebLockManagerSnapshotEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3340;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2 + 16);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28WebPermissionControllerProxy5QueryEN6WebKit28WebPermissionControllerProxyES8_FvRKN7WebCore12ClientOriginERKNS9_20PermissionDescriptorENSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_21PermissionQuerySourceEONS_17CompletionHandlerIFvNSH_INS9_15PermissionStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDCB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28WebPermissionControllerProxy5QueryEN6WebKit28WebPermissionControllerProxyES8_FvRKN7WebCore12ClientOriginERKNS9_20PermissionDescriptorENSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_21PermissionQuerySourceEONS_17CompletionHandlerIFvNSH_INS9_15PermissionStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDCB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28WebPermissionControllerProxy5QueryEN6WebKit28WebPermissionControllerProxyES8_FvRKN7WebCore12ClientOriginERKNS9_20PermissionDescriptorENSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENS9_21PermissionQuerySourceEONS_17CompletionHandlerIFvNSH_INS9_15PermissionStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, __int16 a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3529;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v13 = v5;
  long long v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if ((a2 & 0xFF00) != 0)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198A924ECLL);
    }
    unsigned char *v6 = 1;
    long long v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
    if (!v8)
    {
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x198A92480);
    }
  }
  else
  {
    if (!v7) {
      goto LABEL_11;
    }
    LOBYTE(a2) = 0;
  }
  unsigned char *v6 = a2;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  char v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ScreenOrientationType>>(uint64_t *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      unsigned int v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
        int v3 = 0;
        unsigned int v2 = v8;
      }
      else
      {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 0;
    }
  }
  if (v2 <= 0x100) {
    LOBYTE(v2) = 0;
  }
  return v3 | v2;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebScreenOrientationManagerProxy4LockEN6WebKit32WebScreenOrientationManagerProxyES8_FvN7WebCore25ScreenOrientationLockTypeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDCD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebScreenOrientationManagerProxy4LockEN6WebKit32WebScreenOrientationManagerProxyES8_FvN7WebCore25ScreenOrientationLockTypeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDCD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebScreenOrientationManagerProxy4LockEN6WebKit32WebScreenOrientationManagerProxyES8_FvN7WebCore25ScreenOrientationLockTypeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3589;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::Exception>,void>::encode<IPC::Encoder,std::optional<WebCore::Exception>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::optional<WebCore::Exception>,void>::encode<IPC::Encoder,std::optional<WebCore::Exception>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A9279CLL);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A927BCLL);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDD00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDD00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, char a2)
{
  unsigned int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::ScreenOrientationType,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

unint64_t IPC::ArgumentCoder<WebCore::ScreenOrientationType,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::WorkerOptions>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::WorkerOptions,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (WTF::StringImpl *)a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

void IPC::Decoder::decode<WebCore::WorkerFetchResult>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 192))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::WorkerInitializationData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 144))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WorkerInitializationData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 144))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 136);
    *(void *)(a1 + 136) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39WebSharedWorkerContextManagerConnection16PostConnectEventEN6WebKit39WebSharedWorkerContextManagerConnectionEN7WebCore26SharedWorkerContextManager10ConnectionEFvNS_23ObjectIdentifierGenericINS9_26SharedWorkerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONSt3__14pairINS9_21MessagePortIdentifierESK_EEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDD28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39WebSharedWorkerContextManagerConnection16PostConnectEventEN6WebKit39WebSharedWorkerContextManagerConnectionEN7WebCore26SharedWorkerContextManager10ConnectionEFvNS_23ObjectIdentifierGenericINS9_26SharedWorkerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONSt3__14pairINS9_21MessagePortIdentifierESK_EEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDD28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39WebSharedWorkerContextManagerConnection16PostConnectEventEN6WebKit39WebSharedWorkerContextManagerConnectionEN7WebCore26SharedWorkerContextManager10ConnectionEFvNS_23ObjectIdentifierGenericINS9_26SharedWorkerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONSt3__14pairINS9_21MessagePortIdentifierESK_EEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3590;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::WebPreferencesStore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WebKit::WebPreferencesStore>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::WebPreferencesStore>(a1, (uint64_t)v6);
  char v4 = v13;
  if (v13)
  {
    *(void *)a2 = v6[0];
    *(void *)(a2 + 8) = v6[1];
    *(_DWORD *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 20) = v8;
    *(void *)(a2 + 24) = v9;
    uint64_t v5 = v10;
    *(_DWORD *)(a2 + 40) = v11;
    *(unsigned char *)(a2 + 44) = v12;
    char v4 = 1;
    *(void *)(a2 + 32) = v5;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 48) = v4;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN6WebKit31WebSharedWorkerObjectConnectionEN7WebCore28SharedWorkerObjectConnectionEFvONS_3URLENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_32SharedWorkerObjectIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_13WorkerOptionsEONS_17CompletionHandlerIFvONS9_17WorkerFetchResultEONS9_24WorkerInitializationDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDD50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN6WebKit31WebSharedWorkerObjectConnectionEN7WebCore28SharedWorkerObjectConnectionEFvONS_3URLENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_32SharedWorkerObjectIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_13WorkerOptionsEONS_17CompletionHandlerIFvONS9_17WorkerFetchResultEONS9_24WorkerInitializationDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDD50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN6WebKit31WebSharedWorkerObjectConnectionEN7WebCore28SharedWorkerObjectConnectionEFvONS_3URLENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_32SharedWorkerObjectIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_13WorkerOptionsEONS_17CompletionHandlerIFvONS9_17WorkerFetchResultEONS9_24WorkerInitializationDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SR_EE4callESP_SR_(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 3591;
  *((void *)v7 + nw_tcp_options_set_no_delay(options, 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::encode(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SharedWorkerKey>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 112))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebCore::SharedWorkerKey,false>::__tuple_leaf[abi:sn180100]<WebCore::SharedWorkerKey,void>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  WTF::URL::URL(a1 + 64, (uint64_t *)(a2 + 64));
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 104) = v4;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::SharedWorkerKey,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(unsigned int *)(a1 + 56);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDC40[v5])(&v8, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v6 = *(unsigned int *)(a1 + 24);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDC40[v6])(&v9, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SharedWorkerKey>((uint64_t)v11, a2);
  if (v12)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)&v9, a2);
    char v5 = v10;
    if (v10)
    {
      if (!v12) {
        __break(1u);
      }
      std::__tuple_leaf<0ul,WebCore::SharedWorkerKey,false>::__tuple_leaf[abi:sn180100]<WebCore::SharedWorkerKey,void>(a1, (uint64_t)v11);
      *(_OWORD *)(a1 + 112) = v9;
      char v5 = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 128) = v5;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 128) = 0;
  }
  uint64_t result = std::__optional_destruct_base<WebCore::SharedWorkerKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
  if (!*(unsigned char *)(a1 + 128))
  {
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v7)
      {
        char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v8();
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(unsigned int *)(a1 + 56);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDC40[v5])(&v8, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v6 = *(unsigned int *)(a1 + 24);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDC40[v6])(&v9, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

void WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage(WebKit::WebSharedWorkerServerToContextConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v8 = *((unsigned __int16 *)a3 + 25);
  if (v8 != 2839)
  {
    if (v8 != 2838) {
      return;
    }
    uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v10) {
      goto LABEL_36;
    }
    uint64_t v11 = v9;
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v54);
    if (!v55) {
      goto LABEL_36;
    }
    unint64_t v12 = *((void *)a3 + 1);
    uint64_t v13 = *(WTF::StringImpl **)a3;
    unint64_t v14 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
    if (v12 < v14 || v12 - v14 <= 3)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v37 = *((void *)a3 + 3);
      if (v37)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v36 = *(void *)a3;
          unint64_t v35 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v35 = 0;
          uint64_t v36 = 0;
        }
      }
      goto LABEL_47;
    }
    char v16 = (int *)((char *)v13 + v14);
    *((void *)a3 + 2) = v16 + 1;
    if (!v13)
    {
      unint64_t v35 = v12;
      uint64_t v36 = 0;
LABEL_47:
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v38 = *((void *)a3 + 3);
      if (v38 && v35) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
      }
LABEL_51:
      int v25 = 0;
      LOBYTE(v47) = 0;
      char v53 = 0;
      goto LABEL_22;
    }
    unint64_t v17 = (((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v13;
    if (v12 < v17 || v12 - v17 <= 3)
    {
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v39 = *((void *)a3 + 3);
      if (v39)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
          uint64_t v13 = *(WTF::StringImpl **)a3;
          uint64_t v45 = *((void *)a3 + 1);
          uint64_t v46 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          if (v46)
          {
            if (v45) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v13);
            }
          }
        }
      }
      goto LABEL_51;
    }
    int v4 = *v16;
    int v3 = *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a3 + 2) = (((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    uint64_t v19 = IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v56);
    if (!v57)
    {
      int v25 = 0;
      LOBYTE(v47) = 0;
      char v53 = 0;
      goto LABEL_22;
    }
    unint64_t v20 = *((void *)a3 + 1);
    uint64_t v13 = *(WTF::StringImpl **)a3;
    unint64_t v21 = *((void *)a3 + 2) - *(void *)a3;
    if (v20 <= v21)
    {
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v42 = *((void *)a3 + 3);
      if (v42)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
          uint64_t v41 = *(void *)a3;
          unint64_t v40 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v40 = 0;
          uint64_t v41 = 0;
        }
      }
    }
    else
    {
      char v22 = (unsigned __int8 *)v13 + v21;
      *((void *)a3 + 2) = v22 + 1;
      if (v13)
      {
        unsigned int v23 = *v22;
        if (v23 < 2)
        {
          if (v55)
          {
            BOOL v5 = v23 != 0;
            uint64_t v24 = v54;
            char v54 = 0;
            uint64_t v47 = v11;
            uint64_t v48 = v24;
            int v49 = v4;
            int v50 = v3;
            uint64_t v51 = v56;
            BOOL v52 = v5;
            int v25 = 1;
            char v53 = 1;
            goto LABEL_22;
          }
          __break(1u);
          goto LABEL_60;
        }
LABEL_54:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v44 = *((void *)a3 + 3);
        if (v44 && v20) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v44 + 16))(v44, v13);
        }
        LOBYTE(v47) = 0;
        char v53 = 0;
        if (!v57) {
          goto LABEL_61;
        }
        uint64_t v19 = v56;
        long long v56 = 0;
        if (!v19) {
          goto LABEL_61;
        }
        if (*(_DWORD *)v19 != 2)
        {
          int v25 = 0;
          *(_DWORD *)v19 -= 2;
          goto LABEL_22;
        }
LABEL_60:
        WTF::StringImpl::destroy(v19, v13);
LABEL_61:
        int v25 = 0;
LABEL_22:
        if (v55)
        {
          long long v26 = v54;
          char v54 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::destroy(v26, v13);
              if (v25)
              {
LABEL_27:
                WebKit::WebSharedWorkerServerToContextConnection::postErrorToWorkerObject((uint64_t)this, v47, (uint64_t)&v48, v4, v3, (uint64_t)&v51, v5);
                if (v53)
                {
                  long long v28 = v51;
                  uint64_t v51 = 0;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 2) {
                      WTF::StringImpl::destroy(v28, v27);
                    }
                    else {
                      *(_DWORD *)v28 -= 2;
                    }
                  }
                  char v34 = v48;
                  uint64_t v48 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2) {
                      WTF::StringImpl::destroy(v34, v27);
                    }
                    else {
                      *(_DWORD *)v34 -= 2;
                    }
                  }
                }
                return;
              }
              goto LABEL_36;
            }
            *(_DWORD *)v26 -= 2;
          }
        }
        if (v25) {
          goto LABEL_27;
        }
LABEL_36:
        uint64_t v31 = *(void *)a3;
        uint64_t v32 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v33 = *((void *)a3 + 3);
        if (v33 && v32) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
        }
        return;
      }
      unint64_t v40 = v20;
      uint64_t v41 = 0;
    }
    unint64_t v20 = 0;
    uint64_t v13 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v43 = *((void *)a3 + 3);
    if (v43)
    {
      if (v40)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v43 + 16))(v43, v41, v40);
        uint64_t v13 = *(WTF::StringImpl **)a3;
        unint64_t v20 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_54;
  }
  uint64_t v29 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
  if (v30)
  {
    WebKit::WebSharedWorkerServerToContextConnection::sharedWorkerTerminated((uint64_t)this, v29);
  }
}

void non-virtual thunk to'WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage(WebKit::WebSharedWorkerServerToContextConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

unsigned int *WebKit::WebTransportSession::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v3 = (WTF::DeferrableRefCountedBase *)this;
  int v4 = this + 12;
  atomic_fetch_add((atomic_uint *volatile)this + 12, 1u);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xB20:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v5) {
        this = (unsigned int *)WebKit::WebTransportSession::receiveBidirectionalStream((uint64_t)v3);
      }
      break;
    case 0xB21:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)&v7);
      if ((_BYTE)v9) {
        this = (unsigned int *)WebKit::WebTransportSession::receiveDatagram((uint64_t)v3, v7, (uint64_t)v8);
      }
      break;
    case 0xB22:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v6) {
        this = (unsigned int *)WebKit::WebTransportSession::receiveIncomingUnidirectionalStream((uint64_t)v3);
      }
      break;
    case 0xB23:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>((uint64_t *)a3, &v7);
      if (v10) {
        this = (unsigned int *)WebKit::WebTransportSession::streamReceiveBytes(v3, v7, v8, v9);
      }
      break;
    default:
      break;
  }
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref(v4);
  }
  return this;
}

unsigned int *non-virtual thunk to'WebKit::WebTransportSession::didReceiveMessage(WebKit::WebTransportSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebTransportSession::didReceiveMessage((unsigned int *)this - 6, a2, a3);
}

uint64_t WebKit::GPUConnectionToWebProcess::didReceiveSyncMessage(WebKit::GPUConnectionToWebProcess *a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, uint64_t *a4)
{
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v19, (uint64_t)a1);
  if (a3[25] == 3593)
  {
    int v8 = (IPC::Encoder *)*a4;
    *a4 = 0;
    unint64_t v20 = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a2);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EE9BDD78;
    v9[1] = v20;
    char v10 = v21[0];
    unint64_t v20 = 0;
    v21[0] = 0;
    v9[2] = v10;
    char v22 = v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    unint64_t v12 = v20;
    unint64_t v20 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v17, v18);
    }
    WebKit::GPUConnectionToWebProcess::ensureAudioSession(a1, (uint64_t *)&v22);
    uint64_t v13 = (uint64_t)v22;
    char v22 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = WebKit::GPUConnectionToWebProcess::dispatchSyncMessage((uint64_t *)a1, a2, a3, a4);
  }
  uint64_t v15 = v19;
  uint64_t v19 = 0;
  if (v15) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
  }
  return v14;
}

uint64_t non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, uint64_t *a4)
{
  return WebKit::GPUConnectionToWebProcess::didReceiveSyncMessage((WebKit::GPUConnectionToWebProcess *)(a1 - 24), a2, a3, a4);
}

uint64_t WebKit::GPUProcessConnection::didReceiveSyncMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::Ref<WebKit::GPUProcessConnection,WTF::RawPtrTraits<WebKit::GPUProcessConnection>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection>>::Ref(&v12, a1);
  uint64_t v9 = IPC::MessageReceiverMap::dispatchSyncMessage((uint64_t *)(a1 + 40), a2, a3, a4);
  uint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 24), v8);
  }
  return v9;
}

void WebKit::LibWebRTCCodecs::didReceiveMessage(WebKit::LibWebRTCCodecs *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x85:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_42;
      }
      uint64_t v7 = (char *)v5;
      unint64_t v8 = IPC::Decoder::decode<long long>(a3);
      if (!v9) {
        goto LABEL_42;
      }
      uint64_t v10 = (void *)v8;
      unint64_t v11 = IPC::Decoder::decode<long long>(a3);
      if (!v12) {
        goto LABEL_42;
      }
      unint64_t v13 = v11;
      IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>((uint64_t *)a3, (uint64_t)&v70);
      if (!BYTE8(v73)) {
        goto LABEL_42;
      }
      *(_OWORD *)CFTypeRef cf = v70;
      long long v56 = v7;
      *(void *)&long long v57 = v10;
      *((void *)&v57 + nw_tcp_options_set_no_delay(options, 1) = v13;
      long long v59 = v71;
      long long v60 = v72;
      *(void *)&long long v61 = v73;
      BYTE8(v6nw_tcp_options_set_no_delay(options, 1) = 1;
      WebKit::LibWebRTCCodecs::completedDecoding((uint64_t)this, (uint64_t)v7, v10, v13, (uint64_t)cf);
      return;
    case 0x86:
      uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v32) {
        goto LABEL_42;
      }
      uint64_t v33 = (char *)v31;
      unint64_t v34 = IPC::Decoder::decode<long long>(a3);
      if (!v35) {
        goto LABEL_42;
      }
      uint64_t v36 = (void *)v34;
      unint64_t v37 = IPC::Decoder::decode<long long>(a3);
      if (!v38) {
        goto LABEL_42;
      }
      unint64_t v39 = v37;
      IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(a3, (uint64_t)&v70);
      if (!BYTE8(v70)) {
        goto LABEL_42;
      }
      long long v56 = v33;
      *(void *)&long long v57 = v36;
      *((void *)&v57 + nw_tcp_options_set_no_delay(options, 1) = v39;
      cf[0] = (CFTypeRef)v70;
      LOBYTE(cf[1]) = 1;
      WebKit::LibWebRTCCodecs::completedDecodingCV((uint64_t)this, (uint64_t)v33, v36, v39, (uint64_t *)cf);
      if (LOBYTE(cf[1]))
      {
        CFTypeRef v40 = cf[0];
        cf[0] = 0;
        if (v40) {
          CFRelease(v40);
        }
      }
      return;
    case 0x87:
      uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v27) {
        goto LABEL_42;
      }
      long long v28 = (char *)v26;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v68);
      if (!v69) {
        goto LABEL_42;
      }
      IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::decode(a3, (uint64_t)&v70);
      if (!v79)
      {
        uint64_t v49 = *(void *)a3;
        uint64_t v50 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v51 = *((void *)a3 + 3);
        if (!v51) {
          goto LABEL_42;
        }
        if (!v50) {
          goto LABEL_42;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v49);
        if (!v79) {
          goto LABEL_42;
        }
      }
      if (!v69) {
        goto LABEL_34;
      }
      long long v57 = v68;
      long long v63 = v75;
      long long v64 = v76;
      long long v65 = v77;
      long long v59 = v71;
      long long v60 = v72;
      long long v61 = v73;
      long long v62 = v74;
      long long v56 = v28;
      uint64_t v66 = v78;
      *(_OWORD *)CFTypeRef cf = v70;
      char v67 = 1;
      WebKit::LibWebRTCCodecs::completedEncoding((uint64_t)this, (uint64_t)v28, v68, *((uint64_t *)&v68 + 1), (uint64_t)cf);
      return;
    case 0x88:
      uint64_t v29 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v30)
      {
        WebKit::LibWebRTCCodecs::failedDecoding((uint64_t)this, v29);
      }
      return;
    case 0x89:
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v15) {
        goto LABEL_42;
      }
      uint64_t v16 = v14;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v56);
      if (!BYTE8(v57)) {
        goto LABEL_42;
      }
      unint64_t v17 = *((void *)a3 + 1);
      uint64_t v18 = *(void *)a3;
      unint64_t v19 = *((void *)a3 + 2) - *(void *)a3;
      if (v17 <= v19) {
        goto LABEL_35;
      }
      unint64_t v20 = (unsigned __int8 *)(v18 + v19);
      *((void *)a3 + 2) = v20 + 1;
      if (!v18)
      {
        unint64_t v41 = v17;
        uint64_t v42 = 0;
LABEL_36:
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v44 = *((void *)a3 + 3);
        if (v44)
        {
          if (v41)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
            uint64_t v18 = *(void *)a3;
            unint64_t v17 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v18 = 0;
          }
        }
        goto LABEL_37;
      }
      unsigned int v21 = *v20;
      if (v21 >= 2)
      {
LABEL_37:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v45 = *((void *)a3 + 3);
        if (v45 && v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v18);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        uint64_t v24 = 0;
        char v25 = 0;
        goto LABEL_33;
      }
      unint64_t v22 = IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>((uint64_t *)a3);
      if (v23)
      {
        if (BYTE8(v57))
        {
          uint64_t v24 = v22;
          char v25 = 1;
LABEL_33:
          WebKit::LibWebRTCCodecs::setEncodingConfiguration((uint64_t)this, v16, v56, (WTF *)v57, v24, v25);
          return;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v43 = *((void *)a3 + 3);
        if (v43)
        {
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
            uint64_t v42 = *(void *)a3;
            unint64_t v41 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v41 = 0;
            uint64_t v42 = 0;
          }
        }
        goto LABEL_36;
      }
LABEL_38:
      uint64_t v46 = *(void *)a3;
      uint64_t v47 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v48 = *((void *)a3 + 3);
      if (v48 && v47) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46);
      }
LABEL_42:
      uint64_t v52 = *(void *)a3;
      uint64_t v53 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v54 = *((void *)a3 + 3);
      if (v54) {
        BOOL v55 = v53 == 0;
      }
      else {
        BOOL v55 = 1;
      }
      if (!v55) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v52);
      }
      return;
    default:
      return;
  }
}

void WebKit::LibWebRTCCodecsProxy::didReceiveMessage(WebKit::LibWebRTCCodecsProxy *this, atomic_uchar *volatile *a2, WTF::StringImpl **a3)
{
  uint64_t v7 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x76:
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v11
        || (int v4 = (WTF::ThreadSafeWeakPtrControlBlock *)v10,
            unsigned __int16 v12 = IPC::Decoder::decode<WebCore::VideoCodecType>(v7),
            v12 <= 0xFFu)
        || (unsigned __int8 v3 = v12, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v7, (uint64_t)v221), !LOBYTE(v221[1])))
      {
        int v13 = 0;
        LOBYTE(v209) = 0;
        LOBYTE(v212) = 0;
LABEL_5:
        uint64_t v14 = *v7;
        char v15 = v7[1];
        *uint64_t v7 = 0;
        v7[1] = 0;
        uint64_t v16 = v7[3];
        if (v16 && v15) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v16 + 16))(v16, v14);
        }
        goto LABEL_154;
      }
      unint64_t v136 = (unint64_t)v7[1];
      v137 = *v7;
      unint64_t v138 = v7[2] - *v7;
      if (v136 <= v138)
      {
        v181 = 0;
        v182 = 0;
        *uint64_t v7 = 0;
        v7[1] = 0;
        v183 = v7[3];
        if (v183)
        {
          if (v136)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v183 + 16))(v183);
            v182 = *v7;
            v181 = v7[1];
          }
          else
          {
            v181 = 0;
            v182 = 0;
          }
        }
        goto LABEL_203;
      }
      v139 = (unsigned __int8 *)v137 + v138;
      _DWORD v7[2] = (WTF::StringImpl *)(v139 + 1);
      if (!v137)
      {
        v181 = (WTF::StringImpl *)v136;
        v182 = 0;
LABEL_203:
        unint64_t v136 = 0;
        v137 = 0;
        *uint64_t v7 = 0;
        v7[1] = 0;
        v184 = v7[3];
        if (v184)
        {
          if (v181)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v184 + 16))(v184, v182, v181);
            v137 = *v7;
            unint64_t v136 = (unint64_t)v7[1];
          }
          else
          {
            unint64_t v136 = 0;
            v137 = 0;
          }
        }
        goto LABEL_204;
      }
      unsigned int v140 = *v139;
      if (v140 >= 2)
      {
LABEL_204:
        *uint64_t v7 = 0;
        v7[1] = 0;
        v185 = v7[3];
        if (v185 && v136) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v185 + 16))(v185, v137);
        }
        goto LABEL_209;
      }
      BOOL v5 = v140 != 0;
      if (v136 <= v139 + 1 - (unsigned __int8 *)v137)
      {
        v186 = 0;
        v187 = 0;
        *uint64_t v7 = 0;
        v7[1] = 0;
        v188 = v7[3];
        if (v188)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v188 + 16))(v188);
          v186 = 0;
          v137 = *v7;
          v207 = v7[1];
          v208 = v7[3];
          *uint64_t v7 = 0;
          v7[1] = 0;
          v187 = 0;
          if (v208)
          {
            if (v207)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v208 + 16))(v208, v137);
              v187 = *v7;
              v186 = v7[1];
            }
          }
        }
      }
      else
      {
        _DWORD v7[2] = (WTF::StringImpl *)(v139 + 2);
        unsigned int v141 = v139[1];
        if (v141 < 2)
        {
          int v142 = 0;
          BOOL v6 = v141 != 0;
          v209 = v4;
          LOBYTE(v210) = v3;
          int v4 = v221[0];
          v221[0] = 0;
          *((void *)&v210 + nw_tcp_options_set_no_delay(options, 1) = v4;
          LOBYTE(v21nw_tcp_options_set_no_delay(options, 1) = v140 != 0;
          BYTE1(v21nw_tcp_options_set_no_delay(options, 1) = v141 != 0;
          int v13 = 1;
          goto LABEL_135;
        }
        v186 = (WTF::StringImpl *)v136;
        v187 = v137;
      }
      *uint64_t v7 = 0;
      v7[1] = 0;
      v189 = v7[3];
      if (v189 && v186) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v189 + 16))(v189, v187, v186);
      }
LABEL_209:
      int v13 = 0;
      LOBYTE(v209) = 0;
      int v142 = 1;
LABEL_135:
      LOBYTE(v212) = v13;
      if (LOBYTE(v221[1]))
      {
        v143 = v221[0];
        v221[0] = 0;
        if (v143)
        {
          if (*(_DWORD *)v143 == 2) {
            WTF::StringImpl::destroy(v143, v137);
          }
          else {
            *(_DWORD *)v143 -= 2;
          }
        }
      }
      if (v142) {
        goto LABEL_5;
      }
LABEL_154:
      if (!v13) {
        return;
      }
      v158 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
      if ((_BYTE)v159)
      {
        v221[0] = v158;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v221[1], a2);
        uint64_t v160 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v160 = &unk_1EE9BDF10;
        *(WTF::StringImpl **)(v160 + 8) = v221[0];
        v161 = v221[1];
        v221[1] = 0;
        *(void *)(v160 + 16) = v161;
        *(void *)&long long v226 = v160;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v221[1]);
        WebKit::LibWebRTCCodecsProxy::createDecoder((uint64_t)this, (uint64_t)v209, v3, (uint64_t *)&v210 + 1, v5, v6, (uint64_t *)&v226);
        uint64_t v162 = v226;
        *(void *)&long long v226 = 0;
        if (v162) {
          (*(void (**)(uint64_t))(*(void *)v162 + 8))(v162);
        }
        if (!(_BYTE)v212) {
          return;
        }
        int v4 = (WTF::ThreadSafeWeakPtrControlBlock *)*((void *)&v210 + 1);
      }
      *((void *)&v210 + nw_tcp_options_set_no_delay(options, 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          v163 = v4;
          goto LABEL_199;
        }
        *(_DWORD *)v4 -= 2;
      }
      return;
    case 0x77:
      uint64_t v69 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v70) {
        goto LABEL_54;
      }
      long long v71 = (WTF::ThreadSafeWeakPtrControlBlock *)v69;
      unsigned __int16 v72 = IPC::Decoder::decode<WebCore::VideoCodecType>(v7);
      if (v72 < 0x100u) {
        goto LABEL_54;
      }
      char v144 = v72;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v7, (uint64_t)&v226);
      if (!BYTE8(v226)) {
        goto LABEL_54;
      }
      unint64_t v39 = IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v7, (uint64_t)v221);
      if (!(_BYTE)v222)
      {
        int v157 = 0;
        LOBYTE(v209) = 0;
        LOBYTE(v216) = 0;
        goto LABEL_185;
      }
      unint64_t v146 = (unint64_t)v7[1];
      v145 = *v7;
      unint64_t v147 = v7[2] - *v7;
      if (v146 <= v147)
      {
        v190 = 0;
        v191 = 0;
        *uint64_t v7 = 0;
        v7[1] = 0;
        v192 = v7[3];
        if (v192)
        {
          if (v146)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v192 + 16))(v192);
            v191 = *v7;
            v190 = v7[1];
          }
          else
          {
            v190 = 0;
            v191 = 0;
          }
        }
      }
      else
      {
        v148 = (unsigned __int8 *)v145 + v147;
        _DWORD v7[2] = (WTF::StringImpl *)(v148 + 1);
        if (v145)
        {
          unsigned int v149 = *v148;
          if (v149 < 2)
          {
            BOOL v150 = v149 != 0;
            if (v146 > v148 + 1 - (unsigned __int8 *)v145)
            {
              _DWORD v7[2] = (WTF::StringImpl *)(v148 + 2);
              unsigned int v151 = v148[1];
              if (v151 >= 2)
              {
                v154 = (WTF::StringImpl *)v146;
                CFTypeRef v40 = v145;
LABEL_181:
                *uint64_t v7 = 0;
                v7[1] = 0;
                v174 = v7[3];
                if (v174 && v154) {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v174
                }
                                                                                                  + 16))(v174, v40, v154);
LABEL_182:
                int v157 = 0;
                LOBYTE(v209) = 0;
                goto LABEL_183;
              }
              BOOL v152 = v151 != 0;
              if (v146 > v148 + 2 - (unsigned __int8 *)v145)
              {
                _DWORD v7[2] = (WTF::StringImpl *)(v148 + 3);
                unsigned int v153 = v148[2];
                v154 = (WTF::StringImpl *)v146;
                CFTypeRef v40 = v145;
                if (v153 < 3)
                {
                  unint64_t v41 = BYTE8(v226);
                  if (!BYTE8(v226)) {
                    goto LABEL_232;
                  }
                  v209 = v71;
                  LOBYTE(v210) = v144;
                  uint64_t v155 = v226;
                  *(void *)&long long v226 = 0;
                  *((void *)&v210 + nw_tcp_options_set_no_delay(options, 1) = v155;
                  v211 = v221[0];
                  v156 = v221[1];
                  v221[0] = 0;
                  v221[1] = 0;
                  v212 = v156;
                  BOOL v213 = v150;
                  BOOL v214 = v152;
                  int v157 = 1;
                  unsigned __int8 v215 = v153;
LABEL_183:
                  LOBYTE(v216) = v157;
                  if ((_BYTE)v222) {
                    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v221, v145);
                  }
LABEL_185:
                  if (BYTE8(v226))
                  {
                    v175 = (WTF::StringImpl *)v226;
                    *(void *)&long long v226 = 0;
                    if (v175)
                    {
                      if (*(_DWORD *)v175 == 2) {
                        WTF::StringImpl::destroy(v175, v145);
                      }
                      else {
                        *(_DWORD *)v175 -= 2;
                      }
                    }
                  }
                  if (!v157) {
                    goto LABEL_54;
                  }
                  v176 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
                  if (!(_BYTE)v177) {
                    goto LABEL_196;
                  }
                  v221[0] = v176;
                  uint64_t v7 = &v221[1];
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v221[1], a2);
                  uint64_t v178 = WTF::fastMalloc((WTF *)0x18);
                  *(void *)uint64_t v178 = &unk_1EE9BDF88;
                  *(WTF::StringImpl **)(v178 + 8) = v221[0];
                  v179 = v221[1];
                  v221[1] = 0;
                  *(void *)(v178 + 16) = v179;
                  *(void *)&long long v226 = v178;
                  unint64_t v39 = (unint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v221[1]);
                  unint64_t v41 = v216;
                  if (!(_BYTE)v216) {
                    goto LABEL_232;
                  }
                  WebKit::LibWebRTCCodecsProxy::createEncoder((uint64_t)this, v209, v210, (void *)&v210 + 1, (uint64_t *)&v211, v213, v214, v215, (uint64_t *)&v226);
                  uint64_t v180 = v226;
                  *(void *)&long long v226 = 0;
                  if (v180) {
                    (*(void (**)(uint64_t))(*(void *)v180 + 8))(v180);
                  }
                  if ((_BYTE)v216)
                  {
LABEL_196:
                    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v211, v177);
                    v163 = (WTF::StringImpl *)*((void *)&v210 + 1);
                    *((void *)&v210 + nw_tcp_options_set_no_delay(options, 1) = 0;
                    if (v163)
                    {
                      if (*(_DWORD *)v163 == 2) {
LABEL_199:
                      }
                        WTF::StringImpl::destroy(v163, v159);
                      else {
                        *(_DWORD *)v163 -= 2;
                      }
                    }
                  }
                  return;
                }
                goto LABEL_181;
              }
            }
            v154 = 0;
            CFTypeRef v40 = 0;
            *uint64_t v7 = 0;
            v7[1] = 0;
            v173 = v7[3];
            if (v173)
            {
              (*(void (**)(WTF::StringImpl *))(*(void *)v173 + 16))(v173);
              v154 = 0;
              v145 = *v7;
              v205 = v7[1];
              v206 = v7[3];
              *uint64_t v7 = 0;
              v7[1] = 0;
              CFTypeRef v40 = 0;
              if (v206)
              {
                if (v205)
                {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v206 + 16))(v206, v145);
                  CFTypeRef v40 = *v7;
                  v154 = v7[1];
                }
              }
            }
            goto LABEL_181;
          }
LABEL_212:
          *uint64_t v7 = 0;
          v7[1] = 0;
          v194 = v7[3];
          if (v194 && v146) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v194 + 16))(v194, v145);
          }
          goto LABEL_182;
        }
        v190 = (WTF::StringImpl *)v146;
        v191 = 0;
      }
      unint64_t v146 = 0;
      v145 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v193 = v7[3];
      if (v193)
      {
        if (v190)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v193 + 16))(v193, v191, v190);
          v145 = *v7;
          unint64_t v146 = (unint64_t)v7[1];
        }
        else
        {
          unint64_t v146 = 0;
          v145 = 0;
        }
      }
      goto LABEL_212;
    case 0x78:
      uint64_t v42 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v43) {
        goto LABEL_54;
      }
      uint64_t v44 = v42;
      unint64_t v45 = IPC::Decoder::decode<long long>((IPC::Decoder *)v7);
      if (!v46) {
        goto LABEL_54;
      }
      uint64_t v47 = v45;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v7, (uint64_t)&v209);
      if (!BYTE8(v210)) {
        goto LABEL_54;
      }
      uint64_t v48 = v209;
      uint64_t v49 = v210;
      uint64_t v50 = (WTF::ThreadSafeWeakPtrControlBlock *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
      if (v51)
      {
        v209 = v50;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v210, a2);
        uint64_t v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v52 = &unk_1EE9BDF60;
        *((void *)v52 + nw_tcp_options_set_no_delay(options, 1) = v209;
        uint64_t v53 = v210;
        *(void *)&long long v210 = 0;
        *((void *)v52 + 2) = v53;
        v221[0] = v52;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v210);
        WebKit::LibWebRTCCodecsProxy::decodeFrame((uint64_t)this, v44, v47, (uint64_t)v48, v49, (uint64_t *)v221);
        uint64_t v54 = v221[0];
        v221[0] = 0;
        if (v54) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v54 + 8))(v54);
        }
      }
      return;
    case 0x79:
      uint64_t v55 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v56
        || (long long v57 = (WTF::ThreadSafeWeakPtrControlBlock *)v55,
            IPC::Decoder::decode<WebKit::SharedVideoFrame>((IPC::Decoder *)v7, (uint64_t)v221),
            !v225))
      {
        LOBYTE(v209) = 0;
        unsigned __int8 v220 = 0;
        goto LABEL_116;
      }
      unint64_t v58 = IPC::Decoder::decode<long long>((IPC::Decoder *)v7);
      if (!v59)
      {
        int v61 = 0;
        LOBYTE(v209) = 0;
        unsigned __int8 v220 = 0;
        goto LABEL_221;
      }
      uint64_t v60 = v58;
      unint64_t v39 = (unint64_t)IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v7, (uint64_t)&v226);
      int v61 = v227;
      if (!v227) {
        goto LABEL_219;
      }
      long long v62 = v7[1];
      long long v63 = *v7;
      unint64_t v64 = v7[2] - *v7;
      if ((unint64_t)v62 <= v64)
      {
        v195 = 0;
        v196 = 0;
        *uint64_t v7 = 0;
        v7[1] = 0;
        v197 = v7[3];
        if (v197)
        {
          if (v62)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v197 + 16))(v197);
            v196 = *v7;
            v195 = v7[1];
          }
          else
          {
            v195 = 0;
            v196 = 0;
          }
        }
      }
      else
      {
        long long v65 = (unsigned __int8 *)v63 + v64;
        _DWORD v7[2] = (WTF::StringImpl *)(v65 + 1);
        if (v63)
        {
          unint64_t v41 = *v65;
          if (v41 < 2)
          {
            CFTypeRef v40 = (WTF::StringImpl *)v225;
            if (!v225) {
              goto LABEL_232;
            }
            BOOL v66 = v41 != 0;
            v209 = v57;
            long long v210 = *(_OWORD *)v221;
            LODWORD(v21nw_tcp_options_set_no_delay(options, 1) = v222;
            LOBYTE(v212) = 0;
            int v216 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)&v212, (uint64_t)v223);
            uint64_t v217 = v60;
            long long v218 = v226;
            BOOL v219 = v66;
            int v61 = 1;
            goto LABEL_220;
          }
LABEL_217:
          *uint64_t v7 = 0;
          v7[1] = 0;
          v199 = v7[3];
          if (v199 && v62) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v199 + 16))(v199, v63);
          }
          int v61 = 0;
LABEL_219:
          LOBYTE(v209) = 0;
LABEL_220:
          unsigned __int8 v220 = v61;
LABEL_221:
          if (v225 && v224 != -1)
          {
            ((void (*)(long long *, unsigned char *))off_1EE9BDFA0[v224])(&v226, v223);
            int v61 = v220;
          }
          if (v61) {
            goto LABEL_225;
          }
LABEL_116:
          v127 = *v7;
          v128 = v7[1];
          *uint64_t v7 = 0;
          v7[1] = 0;
          v129 = v7[3];
          if (!v129) {
            return;
          }
          if (!v128) {
            return;
          }
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v129 + 16))(v129, v127);
          if (!v220) {
            return;
          }
LABEL_225:
          v200 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
          if (v201)
          {
            v221[0] = v200;
            uint64_t v7 = &v221[1];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v221[1], a2);
            uint64_t v202 = WTF::fastMalloc((WTF *)0x18);
            *(void *)uint64_t v202 = &unk_1EE9BDFD0;
            *(WTF::StringImpl **)(v202 + 8) = v221[0];
            v203 = v221[1];
            v221[1] = 0;
            *(void *)(v202 + 16) = v203;
            *(void *)&long long v226 = v202;
            unint64_t v39 = (unint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v221[1]);
            unint64_t v41 = v220;
            if (!v220) {
              goto LABEL_232;
            }
            WebKit::LibWebRTCCodecsProxy::encodeFrame(this, (uint64_t)v209, (uint64_t)&v210, v217, v218, *((uint64_t *)&v218 + 1), v219, (uint64_t *)&v226);
            uint64_t v204 = v226;
            *(void *)&long long v226 = 0;
            if (v204) {
              (*(void (**)(uint64_t))(*(void *)v204 + 8))(v204);
            }
          }
          if (v220 && v216 != -1) {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9BDFA0[v216])(v221, &v212);
          }
          return;
        }
        v195 = v62;
        v196 = 0;
      }
      long long v62 = 0;
      long long v63 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v198 = v7[3];
      if (v198)
      {
        if (v195)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v198 + 16))(v198, v196, v195);
          long long v63 = *v7;
          long long v62 = v7[1];
        }
        else
        {
          long long v62 = 0;
          long long v63 = 0;
        }
      }
      goto LABEL_217;
    case 0x7A:
      uint64_t v27 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v28)
      {
        uint64_t v29 = v27;
        char v30 = (WTF::ThreadSafeWeakPtrControlBlock *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
        if (v31)
        {
          v209 = v30;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v210, a2);
          char v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)char v32 = &unk_1EE9BDF38;
          *((void *)v32 + nw_tcp_options_set_no_delay(options, 1) = v209;
          uint64_t v33 = v210;
          *(void *)&long long v210 = 0;
          *((void *)v32 + 2) = v33;
          v221[0] = v32;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v210);
          WebKit::LibWebRTCCodecsProxy::flushDecoder((uint64_t)this, v29, (uint64_t)v221);
          goto LABEL_109;
        }
      }
      return;
    case 0x7B:
      uint64_t v77 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v78)
      {
        uint64_t v79 = v77;
        __int16 v80 = (WTF::ThreadSafeWeakPtrControlBlock *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
        if (v81)
        {
          v209 = v80;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v210, a2);
          char v82 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)char v82 = &unk_1EE9BDFF8;
          *((void *)v82 + nw_tcp_options_set_no_delay(options, 1) = v209;
          uint64_t v83 = v210;
          *(void *)&long long v210 = 0;
          *((void *)v82 + 2) = v83;
          v221[0] = v82;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v210);
          WebKit::LibWebRTCCodecsProxy::flushEncoder((uint64_t)this, v79, (uint64_t *)v221);
          goto LABEL_109;
        }
      }
      return;
    case 0x7C:
      uint64_t v87 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v88) {
        goto LABEL_171;
      }
      uint64_t v89 = v87;
      uint64_t v90 = IPC::Decoder::decode<unsigned short>(v7);
      if ((v90 & 0xFF0000) == 0) {
        goto LABEL_171;
      }
      unsigned __int16 v91 = v90;
      uint64_t v92 = IPC::Decoder::decode<unsigned short>(v7);
      if ((v92 & 0xFF0000) == 0) {
        goto LABEL_171;
      }
      int v93 = v7[1];
      __int16 v94 = *v7;
      unint64_t v95 = (((unint64_t)v7[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v7;
      if ((unint64_t)v93 < v95 || (unint64_t)v93 - v95 <= 3) {
        goto LABEL_169;
      }
      long long v97 = (unsigned int *)((char *)v94 + v95);
      _DWORD v7[2] = (WTF::StringImpl *)(v97 + 1);
      if (!v94) {
        goto LABEL_259;
      }
      unint64_t v98 = (((unint64_t)v97 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v94;
      if ((unint64_t)v93 < v98 || (unint64_t)v93 - v98 <= 3) {
        goto LABEL_164;
      }
      uint64_t v100 = *v97;
      _DWORD v7[2] = (WTF::StringImpl *)((((unint64_t)v97 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      uint64_t v101 = *(unsigned int *)(((unint64_t)v97 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v102 = (((((unint64_t)v97 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v94;
      if ((unint64_t)v93 < v102 || (unint64_t)v93 - v102 <= 3) {
        goto LABEL_164;
      }
      long long v104 = (unsigned int *)((char *)v94 + v102);
      _DWORD v7[2] = (WTF::StringImpl *)(v104 + 1);
      unint64_t v105 = (((unint64_t)v104 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v94;
      if ((unint64_t)v93 < v105 || (unint64_t)v93 - v105 <= 3) {
        goto LABEL_164;
      }
      v107 = (unsigned int *)(((unint64_t)v104 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v108 = *v107;
      uint64_t v109 = *v104;
      _DWORD v7[2] = (WTF::StringImpl *)(v107 + 1);
      WebKit::LibWebRTCCodecsProxy::initializeEncoder((uint64_t)this, v89, v91, (unsigned __int16)v92, v100, v101, v109, v108);
      return;
    case 0x7D:
      uint64_t v67 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v68)
      {
        WebKit::LibWebRTCCodecsProxy::releaseDecoder((uint64_t)this, v67);
      }
      return;
    case 0x7E:
      uint64_t v125 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v126)
      {
        WebKit::LibWebRTCCodecsProxy::releaseEncoder((uint64_t)this, v125);
      }
      return;
    case 0x7F:
      uint64_t v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v35
        && (uint64_t v36 = v34,
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v7, (uint64_t)&v209),
            BYTE8(v210))
        && (uint64_t v37 = IPC::Decoder::decode<unsigned short>(v7), (v37 & 0xFF0000) != 0)
        && (v38 = v37, unint64_t v39 = IPC::Decoder::decode<unsigned short>(v7), (v39 & 0xFF0000) != 0))
      {
        unint64_t v41 = BYTE8(v210);
        if (!BYTE8(v210))
        {
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
        WebKit::LibWebRTCCodecsProxy::setDecoderFormatDescription((uint64_t)this, v36, (uint64_t)v209, v210, v38, v39);
      }
      else
      {
LABEL_54:
        long long v73 = *v7;
        long long v74 = v7[1];
        *uint64_t v7 = 0;
        v7[1] = 0;
        long long v75 = v7[3];
        if (v75) {
          BOOL v76 = v74 == 0;
        }
        else {
          BOOL v76 = 1;
        }
        if (!v76) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v75 + 16))(v75, v73);
        }
      }
      return;
    case 0x80:
      uint64_t v110 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v111) {
        goto LABEL_171;
      }
      int v93 = v7[1];
      __int16 v94 = *v7;
      unint64_t v112 = (((unint64_t)v7[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v7;
      if ((unint64_t)v93 >= v112 && (unint64_t)v93 - v112 > 3)
      {
        long long v114 = (unsigned int *)((char *)v94 + v112);
        _DWORD v7[2] = (WTF::StringImpl *)(v114 + 1);
        if (v94)
        {
          unint64_t v115 = (((unint64_t)v114 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v94;
          if ((unint64_t)v93 < v115 || (unint64_t)v93 - v115 <= 3)
          {
LABEL_164:
            *uint64_t v7 = 0;
            v7[1] = 0;
            v164 = v7[3];
            if (v164)
            {
              if (v93)
              {
                (*(void (**)(WTF::StringImpl *))(*(void *)v164 + 16))(v164);
                v165 = *v7;
                v166 = v7[1];
                v167 = v7[3];
                *uint64_t v7 = 0;
                v7[1] = 0;
                if (v167)
                {
                  if (v166) {
                    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v167 + 16))(v167, v165);
                  }
                }
              }
            }
            goto LABEL_171;
          }
          uint64_t v117 = v110;
          long long v118 = (void *)*v114;
          uint64_t v119 = *(unsigned int *)(((unint64_t)v114 + 7) & 0xFFFFFFFFFFFFFFFCLL);
          _DWORD v7[2] = (WTF::StringImpl *)((((unint64_t)v114 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          long long v120 = (WTF::ThreadSafeWeakPtrControlBlock *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v7);
          if (v121)
          {
            v209 = v120;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v210, a2);
            v122 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(void *)v122 = &unk_1EE9BE020;
            *((void *)v122 + nw_tcp_options_set_no_delay(options, 1) = v209;
            uint64_t v123 = v210;
            *(void *)&long long v210 = 0;
            *((void *)v122 + 2) = v123;
            v221[0] = v122;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v210);
            WebKit::LibWebRTCCodecsProxy::setEncodeRates((uint64_t)this, v117, v118, v119, (uint64_t *)v221);
LABEL_109:
            uint64_t v124 = v221[0];
            v221[0] = 0;
            if (v124) {
              (*(void (**)(WTF::StringImpl *))(*(void *)v124 + 8))(v124);
            }
          }
          return;
        }
LABEL_259:
        unint64_t v41 = (unint64_t)v93;
        CFTypeRef v40 = v94;
      }
      else
      {
LABEL_169:
        unint64_t v41 = 0;
        CFTypeRef v40 = 0;
        *uint64_t v7 = 0;
        v7[1] = 0;
        v168 = v7[3];
        if (v168)
        {
          if (v93)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v168 + 16))(v168);
            CFTypeRef v40 = *v7;
            unint64_t v41 = (unint64_t)v7[1];
          }
          else
          {
            unint64_t v41 = 0;
            CFTypeRef v40 = 0;
          }
        }
      }
      *uint64_t v7 = 0;
      v7[1] = 0;
      unint64_t v39 = (unint64_t)v7[3];
      if (v39)
      {
LABEL_233:
        if (v41) {
          (*(void (**)(unint64_t, WTF::StringImpl *, unint64_t))(*(void *)v39 + 16))(v39, v40, v41);
        }
      }
      goto LABEL_171;
    case 0x81:
      uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v22) {
        goto LABEL_171;
      }
      uint64_t v23 = v21;
      uint64_t v24 = IPC::Decoder::decode<unsigned short>(v7);
      if ((v24 & 0xFF0000) == 0) {
        goto LABEL_171;
      }
      __int16 v25 = v24;
      uint64_t v26 = IPC::Decoder::decode<unsigned short>(v7);
      if ((v26 & 0xFF0000) == 0) {
        goto LABEL_171;
      }
      WebKit::LibWebRTCCodecsProxy::setFrameSize((uint64_t)this, v23, v25, v26);
      return;
    case 0x82:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerReadyState>((uint64_t *)a3) <= 0xFFu)
      {
LABEL_171:
        v169 = v7[1];
        *uint64_t v7 = 0;
        v7[1] = 0;
        v170 = v7[3];
        if (v170) {
          BOOL v171 = v169 == 0;
        }
        else {
          BOOL v171 = 1;
        }
        if (!v171)
        {
          v172 = *(void (**)(void))(*(void *)v170 + 16);
          v172();
        }
      }
      else
      {
        WebCore::LibWebRTCProvider::setRTCLogging();
      }
      return;
    case 0x83:
      uint64_t v84 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v85
        && (__int16 v86 = (WTF::ThreadSafeWeakPtrControlBlock *)v84,
            IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v7, (uint64_t)v221),
            (_BYTE)v222))
      {
        v209 = v86;
        WTF::MachSendRight::MachSendRight();
        *((WTF::StringImpl **)&v210 + nw_tcp_options_set_no_delay(options, 1) = v221[1];
        LOBYTE(v21nw_tcp_options_set_no_delay(options, 1) = 1;
        if ((_BYTE)v222) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v221);
        }
      }
      else
      {
        LOBYTE(v209) = 0;
        LOBYTE(v21nw_tcp_options_set_no_delay(options, 1) = 0;
        v133 = *v7;
        v134 = v7[1];
        *uint64_t v7 = 0;
        v7[1] = 0;
        v135 = v7[3];
        if (!v135) {
          return;
        }
        if (!v134) {
          return;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v135 + 16))(v135, v133);
        if (!(_BYTE)v211) {
          return;
        }
      }
      WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory((uint64_t)this, (uint64_t)v209);
      goto LABEL_67;
    case 0x84:
      uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v18
        && (unint64_t v19 = (WTF::ThreadSafeWeakPtrControlBlock *)v17,
            IPC::Decoder::decode<IPC::Semaphore>((IPC::Decoder *)v7, v221),
            LOBYTE(v221[1])))
      {
        v209 = v19;
        WTF::MachSendRight::MachSendRight();
        int v20 = HIDWORD(v221[0]);
        HIDWORD(v221[0]) = 0;
        DWORD1(v210) = v20;
        BYTE8(v210) = 1;
        if (LOBYTE(v221[1]))
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)v221);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v221);
        }
      }
      else
      {
        LOBYTE(v209) = 0;
        BYTE8(v210) = 0;
        v130 = *v7;
        v131 = v7[1];
        *uint64_t v7 = 0;
        v7[1] = 0;
        v132 = v7[3];
        if (!v132) {
          return;
        }
        if (!v131) {
          return;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v132 + 16))(v132, v130);
        if (!BYTE8(v210)) {
          return;
        }
      }
      WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore((uint64_t)this, (uint64_t)v209, (IPC::Semaphore *)&v210);
      if (BYTE8(v210))
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)&v210);
LABEL_67:
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v210);
      }
      return;
    default:
      return;
  }
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    unsigned int v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unsigned int v2 = &unk_1EE9BE048;
    *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = v1;
    unsigned __int8 v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 48) + 8))();
}

uint64_t IPC::Decoder::decode<WebCore::NowPlayingInfo>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 112))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](a1 + 32, a2);
    int v4 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    BOOL v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a1);
  if (!v3)
  {
    uint64_t result = 0;
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6)
    {
      if (!v4) {
        return 0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(a1[3], v5);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
      uint64_t v9 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = 0;
      if (v9 && v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
        return 0;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String>((uint64_t *)a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  __int16 v7 = result;
  if ((unsigned __int16)result > 0xFFu) {
    return IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String,WTFLogChannelState>(a1, a2, &v7, a3);
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String,WTFLogChannelState>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::MediaPlayerReadyState>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    char v8 = 0;
    *a4 = 0;
LABEL_6:
    a4[16] = v8;
    return result;
  }
  if (*((unsigned char *)a2 + 8) && a3[1])
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    *(void *)a4 = v9;
    a4[8] = *a3;
    a4[9] = result;
    char v8 = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5 && (uint64_t v6 = v4, result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v12), v13))
  {
    uint64_t v8 = v12;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      char v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEN6WebKit25GPUConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvRKNS7_31RemoteAudioSessionConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDD78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEN6WebKit25GPUConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvRKNS7_31RemoteAudioSessionConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDD78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEN6WebKit25GPUConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvRKNS7_31RemoteAudioSessionConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)a1;
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess20InitializeGPUProcessEN6WebKit10GPUProcessES8_FvONS7_28GPUProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDDA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess31CreateGPUConnectionToWebProcessEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS2_16ConnectionHandleEONS7_30GPUProcessConnectionParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDDC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess39SharedPreferencesForWebProcessDidChangeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30SharedPreferencesForWebProcessEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDDF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess39SharedPreferencesForWebProcessDidChangeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30SharedPreferencesForWebProcessEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDDF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess39SharedPreferencesForWebProcessDidChangeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30SharedPreferencesForWebProcessEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2889;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = v7;
    uint64_t result = WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess16PrepareToSuspendEN6WebKit10GPUProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDE18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess16PrepareToSuspendEN6WebKit10GPUProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDE18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess16PrepareToSuspendEN6WebKit10GPUProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2887;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess19UpdateCaptureAccessEN6WebKit10GPUProcessES8_FvbbbNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDE40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess19UpdateCaptureAccessEN6WebKit10GPUProcessES8_FvbbbNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDE40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess19UpdateCaptureAccessEN6WebKit10GPUProcessES8_FvbbbNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2890;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MockMediaDevice>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[96])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::MockMediaDevice>(a1, (uint64_t)v5);
  if (v6)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder,WebCore::MockMediaDevice>(v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

void IPC::Decoder::decode<WebCore::MockMediaDevice>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 96))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder,WebCore::MockMediaDevice>@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)a1 + 96))
  {
    long long v3 = *a1;
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    *(_OWORD *)a2 = v3;
    *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
    *(unsigned char *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 88) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>>(a2 + 24, (uint64_t)a1 + 24);
    *(unsigned char *)(a2 + 96) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 88);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BDE68[v3])(&v7, a1 + 24);
    }
    *(_DWORD *)(a1 + 88) = -1;
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,BOOL>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v14;
        uint64_t v5 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  LOBYTE(v5) = (_BYTE)v4 + 1;
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v5 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      char v13 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v5, v10);
        a1 = v13;
        uint64_t v2 = *v13;
        unint64_t v1 = v13[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    __int16 v15 = (v6 != 0) | 0x100;
    LODWORD(v7) = IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder,BOOL>(a1, (unsigned __int8 *)&v15);
    LOBYTE(v5) = BYTE1(v7);
    int v8 = BYTE2(v7);
    return (v8 << 16) | (v5 << 8) | v7;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = a1[3];
  if (v7)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v2);
    }
    int v8 = 0;
    LOBYTE(v7) = 0;
  }
  else
  {
    int v8 = 0;
  }
  return (v8 << 16) | (v5 << 8) | v7;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder,BOOL>(void *a1, unsigned __int8 *a2)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        a1 = v16;
        uint64_t v13 = *v16;
        unint64_t v12 = v16[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v6 = (unsigned __int8 *)(v4 + v5);
  LOBYTE(v7) = (_BYTE)v6 + 1;
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v12 = v3;
    uint64_t v13 = 0;
LABEL_8:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      __int16 v15 = a1;
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v7 + 16))(v7, v13, v12);
        a1 = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    a1 = (void *)a1[3];
    if (!a1)
    {
LABEL_10:
      unsigned int v9 = 0;
      int v10 = 0;
      return (v7 << 8) | (v10 << 16) | v9;
    }
LABEL_12:
    if (v3) {
      (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v4);
    }
    goto LABEL_10;
  }
  unsigned int v8 = *v6;
  if (v8 >= 2) {
    goto LABEL_9;
  }
  LOBYTE(v7) = a2[1];
  if (!(_BYTE)v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  LOBYTE(v7) = v8 != 0;
  unsigned int v9 = *a2;
  int v10 = 1;
  return (v7 << 8) | (v10 << 16) | v9;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess32RequestBitmapImageForCurrentTimeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_25MediaPlayerIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDE98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess32RequestBitmapImageForCurrentTimeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_25MediaPlayerIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDE98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess32RequestBitmapImageForCurrentTimeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_25MediaPlayerIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 2888;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess35WebProcessConnectionCountForTestingEN6WebKit10GPUProcessES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDEC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess35WebProcessConnectionCountForTestingEN6WebKit10GPUProcessES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDEC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess35WebProcessConnectionCountForTestingEN6WebKit10GPUProcessES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 2891;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  unsigned int v6 = (void *)IPC::Encoder::grow(v5, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15GPUProcessProxy18StatusBarWasTappedEN6WebKit15GPUProcessProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDEE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15GPUProcessProxy18StatusBarWasTappedEN6WebKit15GPUProcessProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDEE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15GPUProcessProxy18StatusBarWasTappedEN6WebKit15GPUProcessProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2884;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unsigned int v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unsigned int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::VideoCodecType>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      char v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        uint64_t v8 = *v18;
        unint64_t v7 = v18[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7)
    {
      uint64_t v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 4)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    goto LABEL_8;
  }
  int v6 = 1;
LABEL_8:
  uint64_t v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        unsigned int v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDF10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDF10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 2896;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDF38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDF38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2900;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11DecodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEExNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDF60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11DecodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEExNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDF60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11DecodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEExNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 2898;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringERKNS_6VectorINSt3__14pairISH_SH_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbbNSF_27VideoEncoderScalabilityModeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDF88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringERKNS_6VectorINSt3__14pairISH_SH_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbbNSF_27VideoEncoderScalabilityModeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDF88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringERKNS_6VectorINSt3__14pairISH_SH_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbbNSF_27VideoEncoderScalabilityModeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 2897;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11EncodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_16SharedVideoFrameExNSt3__18optionalIyEEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDFD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11EncodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_16SharedVideoFrameExNSt3__18optionalIyEEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDFD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11EncodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_16SharedVideoFrameExNSt3__18optionalIyEEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 2899;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BDFF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BDFF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2901;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy14SetEncodeRatesEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEjjONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE020;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy14SetEncodeRatesEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEjjONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE020;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy14SetEncodeRatesEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEjjONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2902;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebKit *API::WebArchive::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, WebKit **a4@<X8>)
{
  uint64_t v8 = (WebKit *)API::Object::newObject(0x30uLL, 30);
  uint64_t result = API::WebArchive::WebArchive(v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_198A97814(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

API::WebArchive *API::WebArchive::create@<X0>(API::WebArchive *this@<X0>, API::WebArchive **a2@<X8>)
{
  unsigned int v5 = (API::WebArchive *)API::Object::newObject(0x30uLL, 30);
  uint64_t result = API::WebArchive::WebArchive(v5, this);
  *a2 = v5;
  return result;
}

void sub_198A97870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double API::WebArchive::create@<D0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)API::Object::newObject(0x30uLL, 30);
  unint64_t v3 = (WebKit *)WebCore::LegacyWebArchive::create();
  *uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v3);
  *uint64_t v2 = &unk_1EE9BE070;
  if (v5)
  {
    ++v5[2];
    v2[2] = v5;
    v2[3] = 0;
    v2[4] = 0;
    v2[5] = 0;
    *a1 = v2;
    if (v5[2] == 1) {
      (*(void (**)())(*(void *)v5 + 8))();
    }
    else {
      --v5[2];
    }
  }
  else
  {
    double result = 0.0;
    *((_OWORD *)v2 + nw_tcp_options_set_no_delay(options, 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *a1 = v2;
  }
  return result;
}

void sub_198A9797C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

WebKit *API::WebArchive::WebArchive(WebKit *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(a1);
  *(void *)a1 = &unk_1EE9BE070;
  *((void *)a1 + 2) = 0;
  if (a2) {
    CFRetain(*(CFTypeRef *)(a2 + 8));
  }
  *((void *)a1 + 3) = a2;
  uint64_t v8 = *a3;
  if (*a3) {
    CFRetain(*(CFTypeRef *)(v8 + 8));
  }
  *((void *)a1 + 4) = v8;
  uint64_t v9 = *a4;
  if (*a4)
  {
    CFRetain(*(CFTypeRef *)(v9 + 8));
    uint64_t v8 = *((void *)a1 + 4);
  }
  *((void *)a1 + 5) = v9;
  uint64_t v10 = *(_DWORD **)(*((void *)a1 + 3) + 16);
  uint64_t v11 = *(unsigned int *)(v8 + 28);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198A97D04);
    }
    unint64_t v12 = 0;
    LODWORD(v33) = v11;
    uint64_t v32 = WTF::fastMalloc((WTF *)(8 * v11));
    do
    {
      uint64_t v13 = *((void *)a1 + 4);
      if (v12 >= *(unsigned int *)(v13 + 28)) {
        goto LABEL_34;
      }
      uint64_t v14 = *(void *)(*(void *)(v13 + 16) + 8 * v12);
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
      if (v12 >= *(unsigned int *)(v13 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x198A97CECLL);
      }
      uint64_t v15 = *(void *)(*(void *)(v13 + 16) + 8 * v12);
      CFRetain(*(CFTypeRef *)(v15 + 8));
      uint64_t v16 = *(void *)(v15 + 16);
      ++*(_DWORD *)(v16 + 8);
      CFRelease(*(CFTypeRef *)(v15 + 8));
      int v17 = HIDWORD(v33) + 1;
      *(void *)(v32 + 8 * HIDWORD(v33)) = v16;
      HIDWORD(v33) = v17;
      ++v12;
    }
    while (v11 != v12);
    uint64_t v9 = *((void *)a1 + 5);
  }
  uint64_t v18 = *(unsigned int *)(v9 + 28);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v18)
  {
    if (v18 >> 29)
    {
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x198A97CE4);
    }
    uint64_t v19 = WTF::fastMalloc((WTF *)(8 * v18));
    unint64_t v20 = 0;
    LODWORD(v3nw_tcp_options_set_no_delay(options, 1) = v18;
    uint64_t v30 = v19;
    do
    {
      uint64_t v21 = *((void *)a1 + 5);
      if (v20 >= *(unsigned int *)(v21 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x198A97CF4);
      }
      uint64_t v22 = *(void *)(*(void *)(v21 + 16) + 8 * v20);
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      if (v20 >= *(unsigned int *)(v21 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x198A97CFCLL);
      }
      uint64_t v23 = *(void *)(*(void *)(v21 + 16) + 8 * v20);
      CFRetain(*(CFTypeRef *)(v23 + 8));
      uint64_t v24 = *(void *)(v23 + 16);
      ++*(_DWORD *)(v24 + 8);
      CFRelease(*(CFTypeRef *)(v23 + 8));
      *(void *)(v19 + 8 * v20) = v24;
      HIDWORD(v3nw_tcp_options_set_no_delay(options, 1) = ++v20;
    }
    while (v18 != v20);
  }
  ++v10[2];
  WebCore::LegacyWebArchive::create();
  uint64_t v26 = (_DWORD *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v29;
  if (v26)
  {
    if (v26[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
    }
    else {
      --v26[2];
    }
  }
  if (v10)
  {
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[2];
    }
  }
  WTF::Vector<WTF::Ref<WebCore::LegacyWebArchive,WTF::RawPtrTraits<WebCore::LegacyWebArchive>,WTF::DefaultRefDerefTraits<WebCore::LegacyWebArchive>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v25);
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v27);
  return a1;
}

void sub_198A97D10(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF *a13)
{
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  uint64_t v15 = v13[5];
  v13[5] = 0;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  uint64_t v16 = v13[4];
  v13[4] = 0;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = v13[3];
  v13[3] = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  uint64_t v18 = (_DWORD *)v13[2];
  v13[2] = 0;
  if (v18)
  {
    if (v18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[2];
    }
  }
  _Unwind_Resume(a1);
}

API::WebArchive *API::WebArchive::WebArchive(API::WebArchive *this, API::Data *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9BE070;
  *((_OWORD *)this + nw_tcp_options_set_no_delay(options, 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v9);
  WebCore::LegacyWebArchive::create();
  uint64_t v4 = v10;
  uint64_t v10 = 0;
  unsigned int v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = v4;
  if (v5)
  {
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      int v6 = v10;
      uint64_t v10 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
    }
    else
    {
      --v5[2];
      uint64_t v10 = 0;
    }
  }
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v3);
  }
  return this;
}

void sub_198A97F84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  uint64_t v14 = v11[5];
  v11[5] = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  uint64_t v15 = v11[4];
  v11[4] = 0;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  uint64_t v16 = v11[3];
  void v11[3] = 0;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = *v12;
  IPC::Encoder *v12 = 0;
  if (v17)
  {
    if (v17[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
    }
    else {
      --v17[2];
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X8>)
{
  WebCore::FragmentedSharedBuffer::create();
  uint64_t v2 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x199730FA0](v2, &v5);
  *a1 = v2;
  double result = v5;
  unsigned int v5 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  }
  return result;
}

void sub_198A9808C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF::fastFree(v10, a2);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  }
  _Unwind_Resume(a1);
}

void API::WebArchive::~WebArchive(API::WebArchive *this)
{
  *(void *)this = &unk_1EE9BE070;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  unsigned int v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
}

{
  uint64_t vars8;

  API::WebArchive::~WebArchive(this);

  JUMPOUT(0x199740C10);
}

WebKit *API::WebArchive::mainResource(API::WebArchive *this)
{
  unint64_t v1 = (WebKit *)*((void *)this + 3);
  if (!v1)
  {
    uint64_t v3 = *(void *)(*((void *)this + 2) + 16);
    if (v3) {
      ++*(_DWORD *)(v3 + 8);
    }
    unint64_t v1 = (WebKit *)API::Object::newObject(0x18uLL, 31);
    *(void *)unint64_t v1 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v1);
    *(void *)unint64_t v1 = &unk_1EE9BE098;
    *((void *)v1 + 2) = v3;
    uint64_t v4 = *((void *)this + 3);
    *((void *)this + 3) = v1;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      return (WebKit *)*((void *)this + 3);
    }
  }
  return v1;
}

void sub_198A9826C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::WebArchive::subresources(API::WebArchive *this)
{
  uint64_t result = *((void *)this + 4);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v4 = *(unsigned int *)(v3 + 36);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v16) = v4;
      uint64_t v15 = v5;
      uint64_t v6 = *(unsigned int *)(v3 + 36);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v3 + 24);
        uint64_t v9 = 8 * v6;
        do
        {
          uint64_t v10 = *(void *)(v8 + 8 * v7);
          ++*(_DWORD *)(v10 + 8);
          uint64_t v11 = (WebKit *)API::Object::newObject(0x18uLL, 31);
          *(void *)uint64_t v11 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v11);
          *(void *)uint64_t v11 = &unk_1EE9BE098;
          *((void *)v11 + 2) = v10;
          *(void *)(v5 + 8 * v7++) = v11;
          v9 -= 8;
        }
        while (v9);
        HIDWORD(v16) = v6;
      }
    }
    API::Array::create(&v15, &v14);
    uint64_t v13 = *((void *)this + 4);
    *((void *)this + 4) = v14;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v12);
    return *((void *)this + 4);
  }
  return result;
}

void sub_198A983EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t API::WebArchive::subframeArchives(API::WebArchive *this)
{
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v4 = *(unsigned int *)(v3 + 52);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v16) = v4;
      uint64_t v15 = v5;
      uint64_t v6 = *(unsigned int *)(v3 + 52);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v3 + 40);
        uint64_t v9 = 8 * v6;
        do
        {
          uint64_t v10 = *(_DWORD **)(v8 + 8 * v7);
          ++v10[2];
          uint64_t v11 = (WebKit *)API::Object::newObject(0x30uLL, 30);
          *(void *)uint64_t v11 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v11);
          *(void *)uint64_t v11 = &unk_1EE9BE070;
          ++v10[2];
          *((void *)v11 + 2) = v10;
          *((void *)v11 + 3) = 0;
          *((void *)v11 + 4) = 0;
          *((void *)v11 + 5) = 0;
          if (v10[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
          }
          else {
            --v10[2];
          }
          *(void *)(v5 + 8 * v7++) = v11;
          v9 -= 8;
        }
        while (v9);
        HIDWORD(v16) = v6;
      }
    }
    API::Array::create(&v15, &v14);
    uint64_t v13 = *((void *)this + 5);
    *((void *)this + 5) = v14;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v12);
    return *((void *)this + 5);
  }
  return result;
}

void sub_198A985C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void API::WebArchive::data(WebCore::LegacyWebArchive **this@<X0>, WebKit **a2@<X8>)
{
  WebCore::LegacyWebArchive::rawDataRepresentation((uint64_t *)&cf, this[2]);
  CFRetain(cf);
  CFDataRef v3 = (const __CFData *)cf;
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex Length = CFDataGetLength(v3);
  if (Length < 0)
  {
    __break(0xC471u);
  }
  else
  {
    CFTypeRef v6 = cf;
    uint64_t v7 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(void *)uint64_t v7 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v7);
    *(void *)uint64_t v7 = &unk_1EE9B5358;
    *((void *)v7 + 2) = BytePtr;
    *((void *)v7 + 3) = Length;
    *((void *)v7 + 4) = API::releaseWebArchiveData;
    *((void *)v7 + 5) = v6;
    *a2 = v7;
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_198A98710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void API::releaseWebArchiveData(API *this, CFTypeRef cf, const void *a3)
{
}

API::WebArchiveResource *API::WebArchiveResource::create@<X0>(API::WebArchiveResource *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, API::WebArchiveResource **a5@<X8>)
{
  uint64_t v11 = (API::WebArchiveResource *)API::Object::newObject(0x18uLL, 31);
  uint64_t result = API::WebArchiveResource::WebArchiveResource(v11, this, a2, a3, a4);
  *a5 = v11;
  return result;
}

void sub_198A9879C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

API::WebArchiveResource *API::WebArchiveResource::WebArchiveResource(API::WebArchiveResource *this, API::Data *a2, WTF::StringImpl **a3, const WTF::String *a4, const WTF::String *a5)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9BE098;
  long long v23 = *((_OWORD *)a2 + 1);
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v24);
  uint64_t v8 = (uint64_t)v24;
  uint64_t v24 = 0;
  __int16 v25 = (unsigned int *)v8;
  WTF::URL::URL((uint64_t)&v22, a3);
  uint64_t v21 = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v17);
  CFTypeRef cf = 0;
  char v20 = 0;
  char v18 = v18 & 0xF1 | 4;
  WebCore::ArchiveResource::create();
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v17, v9);
  unint64_t v12 = v21;
  uint64_t v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v22;
  uint64_t v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v25;
  __int16 v25 = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v11);
  }
  uint64_t v15 = v24;
  uint64_t v24 = 0;
  if (v15) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v11);
  }
  return this;
}

void sub_198A98964(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,CFTypeRef cf)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFTypeRef v43 = cf;
  CFTypeRef cf = 0;
  if (v43) {
    CFRelease(v43);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a11, a2);
  unint64_t v45 = *(WTF::StringImpl **)(v41 - 144);
  *(void *)(v41 - 144) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v44);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  char v46 = *(WTF::StringImpl **)(v41 - 136);
  *(void *)(v41 - 136) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, v44);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  uint64_t v47 = *(unsigned int **)(v41 - 72);
  *(void *)(v41 - 72) = 0;
  if (v47) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v44);
  }
  uint64_t v48 = *(unsigned int **)(v41 - 80);
  *(void *)(v41 - 80) = 0;
  if (v48) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v48, v44);
  }
  _Unwind_Resume(a1);
}

void API::WebArchiveResource::~WebArchiveResource(API::WebArchiveResource *this)
{
  *(void *)this = &unk_1EE9BE098;
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
}

{
  uint64_t vars8;

  API::WebArchiveResource::~WebArchiveResource(this);

  JUMPOUT(0x199740C10);
}

void API::WebArchiveResource::data(API::WebArchiveResource *this@<X0>, void *a2@<X1>, WebKit **a3@<X8>)
{
  uint64_t v4 = *(atomic_uint **)(*((void *)this + 2) + 312);
  if (v4)
  {
    atomic_fetch_add(v4, 1u);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v4, a2);
  }
  WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v13, (WebCore::FragmentedSharedBuffer *)v4);
  WebCore::SharedBuffer::createCFData((uint64_t *)&cf, v13);
  CFTypeRef v6 = (unsigned int *)v13;
  uint64_t v13 = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
  }
  CFRetain(cf);
  CFDataRef v7 = (const __CFData *)cf;
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex Length = CFDataGetLength(v7);
  if (Length < 0)
  {
    __break(0xC471u);
  }
  else
  {
    CFTypeRef v10 = cf;
    uint64_t v11 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(void *)uint64_t v11 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v11);
    *(void *)uint64_t v11 = &unk_1EE9B5358;
    *((void *)v11 + 2) = BytePtr;
    *((void *)v11 + 3) = Length;
    *((void *)v11 + 4) = API::releaseWebArchiveResourceData;
    *((void *)v11 + 5) = v10;
    *a3 = v11;
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
}

void sub_198A98C0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, CFTypeRef cf)
{
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void API::releaseWebArchiveResourceData(API *this, CFTypeRef cf, const void *a3)
{
}

CFTypeRef WebKit::DocumentEditingContext::toLegacyPlatformContext(uint64_t a1, char a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F43030]);
  if ((a2 & 2) != 0)
  {
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)a1);
    [v4 setContextBefore:cf];
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 40));
    [v4 setSelectedText:cf];
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 80));
    [v4 setContextAfter:cf];
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 120));
    [v4 setMarkedText:cf];
  }
  else
  {
    if ((a2 & 1) == 0) {
      goto LABEL_19;
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)a1);
    objc_msgSend(v4, "setContextBefore:", objc_msgSend((id)cf, "string"));
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 40));
    objc_msgSend(v4, "setSelectedText:", objc_msgSend((id)cf, "string"));
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 80));
    objc_msgSend(v4, "setContextAfter:", objc_msgSend((id)cf, "string"));
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 120));
    objc_msgSend(v4, "setMarkedText:", objc_msgSend((id)cf, "string"));
  }
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
LABEL_19:
  objc_msgSend(v4, "setSelectedRangeInMarkedText:", *(void *)(a1 + 200), *(void *)(a1 + 208));
  uint64_t v12 = *(unsigned int *)(a1 + 228);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 216);
    uint64_t v14 = v13 + 32 * v12;
    do
    {
      WebCore::FloatRect::operator CGRect();
      [v4 addTextRect:*(void *)(v13 + 16) forCharacterRange:*(void *)(v13 + 24)];
      v13 += 32;
    }
    while (v13 != v14);
  }
  WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 160));
  [v4 setAnnotatedText:cf];
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
  if (v15) {
    CFRelease(v15);
  }
  if (a2 < 0)
  {
    uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 244)];
    uint64_t v17 = *(unsigned int *)(a1 + 244);
    if (v17)
    {
      char v18 = *(void **)(a1 + 232);
      uint64_t v19 = &v18[2 * v17];
      do
      {
        uint64_t v20 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", *v18, v18[1]);
        if (v20) {
          [v16 addObject:v20];
        }
        v18 += 2;
      }
      while (v18 != v19);
    }
    if (objc_opt_respondsToSelector()) {
      [v4 setAutocorrectedRanges:v16];
    }
    if (v16) {
      CFRelease(v16);
    }
  }
  return (id)CFMakeCollectable(v4);
}

void sub_198A98EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::DocumentEditingContext::toPlatformContext(uint64_t a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    id v5 = objc_alloc(MEMORY[0x1E4F18BC8]);
    WebCore::AttributedString::nsAttributedString((uint64_t *)&v31, (WebCore::AttributedString *)(a1 + 40));
    CFTypeRef v6 = v31;
    WebCore::AttributedString::nsAttributedString((uint64_t *)&v30, (WebCore::AttributedString *)a1);
    CFTypeRef v7 = v30;
    WebCore::AttributedString::nsAttributedString((uint64_t *)&v29, (WebCore::AttributedString *)(a1 + 80));
    CFTypeRef v8 = v29;
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 120));
    uint64_t v9 = objc_msgSend(v5, "initWithAttributedSelectedText:contextBefore:contextAfter:markedText:selectedRangeInMarkedText:", v6, v7, v8, cf, *(void *)(a1 + 200), *(void *)(a1 + 208));
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      id v4 = 0;
      goto LABEL_14;
    }
    id v10 = objc_alloc(MEMORY[0x1E4F18BC8]);
    WebCore::AttributedString::nsAttributedString((uint64_t *)&v31, (WebCore::AttributedString *)(a1 + 40));
    uint64_t v11 = [(id)v31 string];
    WebCore::AttributedString::nsAttributedString((uint64_t *)&v30, (WebCore::AttributedString *)a1);
    uint64_t v12 = [(id)v30 string];
    WebCore::AttributedString::nsAttributedString((uint64_t *)&v29, (WebCore::AttributedString *)(a1 + 80));
    uint64_t v13 = [(id)v29 string];
    WebCore::AttributedString::nsAttributedString((uint64_t *)&cf, (WebCore::AttributedString *)(a1 + 120));
    uint64_t v9 = objc_msgSend(v10, "initWithSelectedText:contextBefore:contextAfter:markedText:selectedRangeInMarkedText:", v11, v12, v13, objc_msgSend((id)cf, "string"), *(void *)(a1 + 200), *(void *)(a1 + 208));
  }
  id v4 = (void *)v9;
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14) {
    CFRelease(v14);
  }
  CFTypeRef v15 = v29;
  CFTypeRef v29 = 0;
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v16 = v30;
  CFTypeRef v30 = 0;
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = v31;
  CFTypeRef v31 = 0;
  if (v17) {
    CFRelease(v17);
  }
LABEL_14:
  uint64_t v18 = *(unsigned int *)(a1 + 228);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 216);
    uint64_t v20 = v19 + 32 * v18;
    do
    {
      WebCore::FloatRect::operator CGRect();
      [v4 addTextRect:*(void *)(v19 + 16) forCharacterRange:*(void *)(v19 + 24)];
      v19 += 32;
    }
    while (v19 != v20);
  }
  WebCore::AttributedString::nsAttributedString((uint64_t *)&v31, (WebCore::AttributedString *)(a1 + 160));
  [v4 setAnnotatedText:v31];
  CFTypeRef v21 = v31;
  CFTypeRef v31 = 0;
  if (v21) {
    CFRelease(v21);
  }
  if (a2 < 0)
  {
    uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 244)];
    uint64_t v23 = *(unsigned int *)(a1 + 244);
    if (v23)
    {
      uint64_t v24 = *(void **)(a1 + 232);
      __int16 v25 = &v24[2 * v23];
      do
      {
        uint64_t v26 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", *v24, v24[1], cf, v29, v30, v31);
        if (v26) {
          [v22 addObject:v26];
        }
        v24 += 2;
      }
      while (v24 != v25);
    }
    if (objc_opt_respondsToSelector()) {
      [v4 setAutocorrectedRanges:v22];
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  return (id)CFMakeCollectable(v4);
}

void sub_198A991E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf, CFTypeRef a11, CFTypeRef a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  if (a12) {
    CFRelease(a12);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::RemoteObjectInvocation::RemoteObjectInvocation(void *result, _DWORD **a2, uint64_t *a3, uint64_t *a4)
{
  id v4 = *a2;
  if (*a2) {
    *v4 += 2;
  }
  API::WebArchiveResource *result = v4;
  uint64_t v5 = *a3;
  *a3 = 0;
  result[1] = v5;
  uint64_t v6 = *a4;
  *a4 = 0;
  result[2] = v6;
  return result;
}

void WebKit::RemoteObjectRegistry::~RemoteObjectRegistry(WebKit::RemoteObjectRegistry *this, void *a2)
{
  *(void *)this = &unk_1EE9BE0C0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  }
  objc_destroyWeak((id *)this + 2);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

IPC::Encoder *WebKit::RemoteObjectRegistry::sendInvocation(WebKit::RemoteObjectRegistry *this, const WebKit::RemoteObjectInvocation *a2)
{
  id v4 = (uint64_t *)*((void *)a2 + 2);
  if (v4)
  {
    (*(void (**)(WebKit::ProcessThrottlerActivity **__return_ptr, WebKit::RemoteObjectRegistry *, const char *, uint64_t))(*(void *)this + 48))(&v11, this, "RemoteObjectRegistry invocation", 32);
    WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::ProcessThrottlerActivity>>((uint64_t *)this + 3, v4, &v11, (uint64_t)v10);
    CFTypeRef v7 = v11;
    uint64_t v11 = 0;
    if (v7)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v7, v6);
      WTF::fastFree(v8, v9);
    }
  }
  v10[0] = (uint64_t)a2;
  return WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>((uint64_t *)this, v10);
}

void sub_198A9941C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WebKit::ProcessThrottlerActivity *a12)
{
  if (a12)
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::ProcessThrottlerActivity>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, WebKit::ProcessThrottlerActivity **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  CFTypeRef v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_29;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      CFTypeRef v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      CFTypeRef v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)v16 + 1, v20);
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
      CFTypeRef v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_22;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_29:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

IPC::Encoder *WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(uint64_t *a1, uint64_t *a2)
{
  v8[0] = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  v8[1] = v4;
  v9[0] = a2;
  v9[1] = a1;
  if (v4 == 1) {
    return std::invoke[abi:sn180100]<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>,std::reference_wrapper<WebKit::WebPage>>(v9, v8);
  }
  if (!v4) {
    return std::invoke[abi:sn180100]<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>,std::reference_wrapper<WebKit::WebProcessProxy>>(v9, v8);
  }
  uint64_t v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(v6, v7);
}

IPC::Encoder *WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  v10[0] = a2;
  v10[1] = a1;
  if (v4 == -1 || v4 != 0)
  {
    if (v4 == 1) {
      return WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(Messages::RemoteObjectRegistry::CallReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::CallReplyBlock)#1}::operator()<std::reference_wrapper<WebKit::WebPage>>(v10, v5);
    }
    goto LABEL_11;
  }
  if (v4)
  {
LABEL_11:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(v9);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);

  return (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::send<Messages::RemoteObjectRegistry::CallReplyBlock>(v5, a2, v8, 0);
}

IPC::Encoder *WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  v11[0] = a2;
  v11[1] = a1;
  if (v4 == -1 || v4 != 0)
  {
    if (v4 == 1) {
      return WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock)#1}::operator()<std::reference_wrapper<WebKit::WebPage>>(v11, v5);
    }
    goto LABEL_11;
  }
  if (v4)
  {
LABEL_11:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::RemoteObjectRegistry::invokeMethod(v9, v10);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);

  return (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(v5, a2, v8, 0);
}

uint64_t WebKit::RemoteObjectRegistry::invokeMethod(uint64_t a1, uint64_t a2)
{
  id Weak = objc_loadWeak((id *)(a1 + 16));

  return [Weak _invokeMethod:a2];
}

uint64_t WebKit::RemoteObjectRegistry::callReplyBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, a2);
  if (v7)
  {
    uint64_t v9 = v7 + 16 * *(unsigned int *)(v7 - 4);
    if (v9 == v8) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v9 = 0;
  }
  if (v9 != v8) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v6, v8);
  }
LABEL_8:
  id Weak = objc_loadWeak((id *)(a1 + 16));

  return [Weak _callReplyWithID:a2 blockInvocation:a3];
}

uint64_t WebKit::RemoteObjectRegistry::releaseUnusedReplyBlock(WebKit::RemoteObjectRegistry *this, uint64_t a2)
{
  int v4 = (uint64_t *)((char *)this + 24);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, a2);
  if (v5)
  {
    uint64_t v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v7 == v6) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_8;
    }
    uint64_t v7 = 0;
  }
  if (v7 != v6) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v4, v6);
  }
LABEL_8:
  id Weak = objc_loadWeak((id *)this + 2);

  return [Weak _releaseReplyWithID:a2];
}

BOOL WebKit::methodSignaturesAreCompatible(WebKit *this, NSString *a2, NSString *a3)
{
  if (![(NSString *)a2 isEqualToString:this]) {
    return 1;
  }
  NSUInteger v5 = [(NSString *)a2 length];
  if (v5 != [(WebKit *)this length]) {
    return 0;
  }
  NSUInteger v6 = [(NSString *)a2 length];
  if (!v6) {
    return 1;
  }
  uint64_t v7 = 0;
  NSUInteger v8 = v6 - 1;
  do
  {
    int v9 = [(NSString *)a2 characterAtIndex:v7];
    if (v9 == 66) {
      int v10 = 99;
    }
    else {
      int v10 = v9;
    }
    int v11 = [(WebKit *)this characterAtIndex:v7];
    if (v11 == 66) {
      int v12 = 99;
    }
    else {
      int v12 = v11;
    }
    BOOL result = v10 == v12;
  }
  while (v10 == v12 && v8 != v7++);
  return result;
}

void encodeToObjectStream(WKRemoteObjectEncoder *a1, NSError *a2)
{
  objectStream = a1->_objectStream;
  if (!objectStream)
  {
    v24.super.super.isa = 0;
    v24._rootDictionary.m_ptr = 0;
    API::Array::create((uint64_t *)&v24, (uint64_t *)&v23);
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v12);
    uint64_t v13 = (uint64_t)v23;
    a1->_objectStream = v23;
    m_ptr = a1->_rootDictionary.m_ptr;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v21 = v13;
    isa = v24.super.super.isa;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)m_ptr + 2, &isa, &v21, (uint64_t)&v24);
    uint64_t v16 = v21;
    uint64_t v21 = 0;
    if (v16) {
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
    uint64_t v17 = isa;
    isa = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    objectStream = a1->_objectStream;
  }
  NSUInteger v5 = objectStream + 2;
  unint64_t v6 = *((unsigned int *)objectStream + 7);
  if (v6 == *((_DWORD *)objectStream + 6))
  {
    unint64_t v18 = v6 + (v6 >> 2);
    if (v18 >= 0x10) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = 16;
    }
    if (v19 <= v6 + 1) {
      unint64_t v20 = v6 + 1;
    }
    else {
      unint64_t v20 = v19;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v5, v20);
    uint64_t v8 = *((unsigned int *)objectStream + 7);
    uint64_t v7 = (void *)(objectStream[2] + 8 * v8);
  }
  else
  {
    uint64_t v7 = (void *)(*v5 + 8 * v6);
    LODWORD(v8) = *((_DWORD *)objectStream + 7);
  }
  *uint64_t v7 = 0;
  *((_DWORD *)objectStream + 7) = v8 + 1;
  createEncodedObject(&v24.super.super.isa, a1, a2);
  int v9 = a1->_objectStream;
  if (*((_DWORD *)v9 + 7) <= v6)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v10 = v9[2];
    uint64_t v11 = *(void *)(v10 + 8 * v6);
    *(void *)(v10 + 8 * v6) = v24.super.super.isa;
    if (v11) {
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
  }
}

void sub_198A9A46C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9A57C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit **createEncodedObject(WebKit **result, WKRemoteObjectEncoder *a2, NSError *a3)
{
  uint64_t v3 = result;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    API::WebArchiveResource *result = 0;
    return result;
  }
  unint64_t v6 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(void *)unint64_t v6 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v6);
  *(void *)unint64_t v6 = &unk_1EE9D1E00;
  *((void *)v6 + 2) = 0;
  currentDictionary = (objc_class *)a2->_currentDictionary;
  a2->_currentDictionary = v6;
  if (([(NSError *)a3 conformsToProtocol:&unk_1EEA79688] & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"%@ does not conform to NSSecureCoding", a3 format];
    }
  }
  Class = object_getClass(a3);
  if (class_isMetaClass(Class)) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"Class objects may not be encoded"];
  }
  int v9 = (objc_class *)[(NSError *)a3 classForCoder];
  if (!v9) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"-classForCoder returned nil for %@", a3 format];
  }
  p_objectsBeingEncoded = (objc_object *)&a2->_objectsBeingEncoded;
  Class m_table = (Class)a2->_objectsBeingEncoded.m_impl.var0.m_table;
  if (m_table)
  {
    int v12 = *((_DWORD *)m_table - 2);
    unint64_t v13 = ((unint64_t)a3 + ~((void)a3 << 32)) ^ (((unint64_t)a3 + ~((void)a3 << 32)) >> 22);
    unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
    uint64_t v17 = (NSError *)*((void *)m_table + v16);
    if (v17 == a3)
    {
LABEL_12:
      unint64_t v19 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        char v51 = object_getClass(a3);
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = class_getName(v51);
        _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "WKRemoteObjectCode::encodeObject: Object of type '%{private}s' contains a cycle", (uint8_t *)&buf, 0xCu);
      }
      unint64_t v20 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v21 = object_getClass(a3);
      BOOL result = (WebKit **)objc_msgSend(v20, "raise:format:", *MEMORY[0x1E4F1C3C8], @"Object of type '%s' contains a cycle", class_getName(v21));
      goto LABEL_50;
    }
    int v18 = 1;
    while (v17)
    {
      unsigned int v16 = (v16 + v18) & v12;
      uint64_t v17 = (NSError *)*((void *)m_table + v16);
      ++v18;
      if (v17 == a3) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::expand((uint64_t *)&a2->_objectsBeingEncoded);
    Class m_table = p_objectsBeingEncoded->isa;
    if (p_objectsBeingEncoded->isa) {
      int v12 = *((_DWORD *)m_table - 2);
    }
    else {
      int v12 = 0;
    }
  }
  unint64_t v22 = ((unint64_t)a3 + ~((void)a3 << 32)) ^ (((unint64_t)a3 + ~((void)a3 << 32)) >> 22);
  unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  unsigned int v25 = v12 & ((v24 >> 31) ^ v24);
  uint64_t v26 = (NSError **)((char *)m_table + 8 * v25);
  unint64_t v27 = *v26;
  if (*v26)
  {
    uint64_t v49 = 0;
    int v50 = 1;
    while (v27 != a3)
    {
      if (v27 == (NSError *)-1) {
        uint64_t v49 = v26;
      }
      unsigned int v25 = (v25 + v50) & v12;
      uint64_t v26 = (NSError **)((char *)m_table + 8 * v25);
      unint64_t v27 = *v26;
      ++v50;
      if (!*v26)
      {
        if (v49)
        {
          WTF *v49 = 0;
          --*((_DWORD *)p_objectsBeingEncoded->isa - 4);
          uint64_t v26 = v49;
        }
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    *uint64_t v26 = a3;
    Class isa = p_objectsBeingEncoded->isa;
    if (p_objectsBeingEncoded->isa) {
      int v29 = *((_DWORD *)isa - 3) + 1;
    }
    else {
      int v29 = 1;
    }
    *((_DWORD *)isa - 3) = v29;
    Class v30 = p_objectsBeingEncoded->isa;
    if (p_objectsBeingEncoded->isa) {
      int v31 = *((_DWORD *)v30 - 3);
    }
    else {
      int v31 = 0;
    }
    uint64_t v32 = (*((_DWORD *)v30 - 4) + v31);
    unint64_t v33 = *((unsigned int *)v30 - 1);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32) {
        goto LABEL_27;
      }
    }
    else if (3 * v33 > 4 * v32)
    {
      goto LABEL_27;
    }
    WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::expand((uint64_t *)&a2->_objectsBeingEncoded);
  }
LABEL_27:
  v59[0] = a2;
  v59[1] = a3;
  char v60 = 1;
  Class v34 = (Class)a2->_currentDictionary;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v64[0] = (WTF::StringImpl *)buf;
  Name = class_getName(v9);
  WTF::String::String((WTF::String *)&v61, Name);
  API::String::create(&v61, &v62);
  uint64_t v36 = v62;
  long long v62 = 0;
  long long v63 = v36;
  WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)v34 + 2, v64, (uint64_t *)&v63, (uint64_t)&buf);
  uint64_t v38 = (uint64_t)v63;
  long long v63 = 0;
  if (v38) {
    CFRelease(*(CFTypeRef *)(v38 + 8));
  }
  unint64_t v39 = v62;
  long long v62 = 0;
  if (v39) {
    CFRelease(*((CFTypeRef *)v39 + 1));
  }
  CFTypeRef v40 = v61;
  int v61 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v37);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = v64[0];
  v64[0] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v37);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (v9 == (objc_class *)objc_opt_class() || v9 == (objc_class *)objc_opt_class())
    {
      Class v42 = (Class)a2->_currentDictionary;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      MEMORY[0x19972EAD0](&v61, a3);
      API::String::create(&v61, &v62);
      CFTypeRef v43 = v62;
      long long v62 = 0;
      long long v63 = v43;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)v42 + 2, v64, (uint64_t *)&v63, (uint64_t)&buf);
      uint64_t v45 = (uint64_t)v63;
      long long v63 = 0;
      if (v45) {
        CFRelease(*(CFTypeRef *)(v45 + 8));
      }
      char v46 = v62;
      long long v62 = 0;
      if (v46) {
        CFRelease(*((CFTypeRef *)v46 + 1));
      }
      uint64_t v47 = v61;
      int v61 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, v44);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
      uint64_t v48 = v64[0];
      v64[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, v44);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else if (v9 == (objc_class *)objc_opt_class())
    {
      encodeError(a2, a3);
    }
    else
    {
      [(NSError *)a3 encodeWithCoder:a2];
    }
    goto LABEL_49;
  }
  -[WKRemoteObjectEncoder encodeObject:forKey:](a2, "encodeObject:forKey:", objc_msgSend((id)-[NSError methodSignature](a3, "methodSignature"), "_typeString"), @"typeString");
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v52 = 1;
    [(WKRemoteObjectEncoder *)a2 encodeBool:1 forKey:@"isReplyBlock"];
  }
  else
  {
    [(WKRemoteObjectEncoder *)a2 encodeObject:NSStringFromSelector((SEL)[(NSError *)a3 selector]) forKey:@"selector"];
    unint64_t v52 = 2;
  }
  uint64_t v53 = (void *)[(NSError *)a3 methodSignature];
  unint64_t v54 = [v53 numberOfArguments];
  if (v54 > v52)
  {
    do
    {
      uint64_t v55 = (const char *)[v53 getArgumentTypeAtIndex:v52];
      char v56 = v55;
      int v57 = *v55;
      if (v57 == 64)
      {
        *(void *)&long long buf = 0;
        [(NSError *)a3 getArgument:&buf atIndex:v52];
        encodeToObjectStream(a2, (objc_object *)buf);
      }
      else
      {
        if (v57 > 82)
        {
          switch(*v55)
          {
            case 'c':
              LOBYTE(buf) = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithChar:(char)buf]);
              goto LABEL_70;
            case 'd':
              *(void *)&long long buf = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithDouble:*(double *)&buf]);
              goto LABEL_70;
            case 'e':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'r':
              goto LABEL_90;
            case 'f':
              LODWORD(buf) = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              LODWORD(v58) = buf;
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithFloat:v58]);
              goto LABEL_70;
            case 'i':
              LODWORD(buf) = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithInt:buf]);
              goto LABEL_70;
            case 'l':
              *(void *)&long long buf = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithLong:(void)buf]);
              goto LABEL_70;
            case 'q':
              *(void *)&long long buf = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithLongLong:(void)buf]);
              goto LABEL_70;
            case 's':
              LOWORD(buf) = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithShort:(__int16)buf]);
              goto LABEL_70;
            default:
              if (v57 == 83)
              {
                LOWORD(buf) = 0;
                [(NSError *)a3 getArgument:&buf atIndex:v52];
                encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithUnsignedShort:(unsigned __int16)buf]);
              }
              else
              {
                if (v57 != 123) {
                  goto LABEL_90;
                }
                if (!strcmp(v55, "{_NSRange=QQ}"))
                {
                  [(NSError *)a3 getArgument:&buf atIndex:v52];
                  encodeToObjectStream(a2, (objc_object *)objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", (void)buf, *((void *)&buf + 1)));
                }
                else
                {
                  if (strcmp(v56, "{CGSize=dd}")) {
                    goto LABEL_90;
                  }
                  [(NSError *)a3 getArgument:&buf atIndex:v52];
                  encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithDouble:*(double *)&buf]);
                  encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithDouble:*((double *)&buf + 1)]);
                }
              }
              break;
          }
          goto LABEL_70;
        }
        if (v57 > 72)
        {
          if (v57 == 73)
          {
            LODWORD(buf) = 0;
            [(NSError *)a3 getArgument:&buf atIndex:v52];
            encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithUnsignedInt:buf]);
            goto LABEL_70;
          }
          if (v57 == 76)
          {
            *(void *)&long long buf = 0;
            [(NSError *)a3 getArgument:&buf atIndex:v52];
            encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithUnsignedLong:(void)buf]);
            goto LABEL_70;
          }
          if (v57 != 81) {
            goto LABEL_90;
          }
          *(void *)&long long buf = 0;
          [(NSError *)a3 getArgument:&buf atIndex:v52];
          encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithUnsignedLongLong:(void)buf]);
        }
        else
        {
          if (v57 != 66)
          {
            if (v57 == 67)
            {
              LOBYTE(buf) = 0;
              [(NSError *)a3 getArgument:&buf atIndex:v52];
              encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithUnsignedChar:buf]);
              goto LABEL_70;
            }
LABEL_90:
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Unsupported invocation argument type '%s'", v56);
            goto LABEL_70;
          }
          LOBYTE(buf) = 0;
          [(NSError *)a3 getArgument:&buf atIndex:v52];
          encodeToObjectStream(a2, (objc_object *)[NSNumber numberWithBool:buf]);
        }
      }
LABEL_70:
      ++v52;
    }
    while (v54 != v52);
  }
LABEL_49:
  BOOL result = (WebKit **)WTF::ScopeExit<encodeObject(WKRemoteObjectEncoder *,objc_object *)::$_0>::~ScopeExit((uint64_t)v59);
LABEL_50:
  *uint64_t v3 = v6;
  a2->_currentDictionary = currentDictionary;
  return result;
}

void sub_198A9B2AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9B400(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9B52C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9B684(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9B7D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9B934(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9BA88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9BC54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::Array>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3) {
    return 0;
  }
  int v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 1) {
    NSUInteger v5 = v4;
  }
  else {
    NSUInteger v5 = 0;
  }
  CFRelease(v4[1]);
  return v5;
}

void sub_198A9BCFC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198A9C0D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef decodeObjectFromObjectStream(WKRemoteObjectDecoder *a1, void *a2)
{
  uint64_t objectStream = (uint64_t)a1->_objectStream;
  if (!objectStream) {
    return 0;
  }
  unint64_t objectStreamPosition = a1->_objectStreamPosition;
  if (objectStreamPosition == *(_DWORD *)(objectStream + 28)) {
    return 0;
  }
  a1->_unint64_t objectStreamPosition = objectStreamPosition + 1;
  uint64_t v6 = API::Array::at<API::Dictionary>(objectStream, objectStreamPosition);
  uint64_t v7 = (CFTypeRef *)v6;
  if (v6) {
    CFRetain(*(CFTypeRef *)(v6 + 8));
  }
  CFTypeRef v8 = decodeObject(a1, v7, a2);
  if (v7) {
    CFRelease(v7[1]);
  }
  return v8;
}

void sub_198A9C204(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9C334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9C450(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::Boolean>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3) {
    return 0;
  }
  int v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 32) {
    NSUInteger v5 = v4;
  }
  else {
    NSUInteger v5 = 0;
  }
  CFRelease(v4[1]);
  return v5;
}

void sub_198A9C4F8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198A9C5E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::UInt64>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3) {
    return 0;
  }
  int v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 34) {
    NSUInteger v5 = v4;
  }
  else {
    NSUInteger v5 = 0;
  }
  CFRelease(v4[1]);
  return v5;
}

void sub_198A9C688(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198A9C770(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9C870(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9C984(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::Double>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3) {
    return 0;
  }
  int v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 33) {
    NSUInteger v5 = v4;
  }
  else {
    NSUInteger v5 = 0;
  }
  CFRelease(v4[1]);
  return v5;
}

void sub_198A9CA2C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198A9CB1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A9CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198A9CF04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if ((v22 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v21 + 8));
  }
  if (a21) {
    WTF::fastFree((WTF *)(a21 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef decodeObject(WKRemoteObjectDecoder *a1, const void *a2, void *a3)
{
  if (!a2) {
    return 0;
  }
  currentDictionary = a1->_currentDictionary;
  a1->_currentDictionary = a2;
  if (*a3 && *(_DWORD *)(*a3 - 12))
  {
    allowedClasses = a1->_allowedClasses;
    a1->_allowedClasses = a3;
    CFTypeRef result = decodeObject(a1);
    a1->_allowedClasses = allowedClasses;
  }
  else
  {
    CFTypeRef result = decodeObject(a1);
  }
  a1->_currentDictionary = currentDictionary;
  return result;
}

void sub_198A9D00C(_Unwind_Exception *a1)
{
  *(void *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_198A9D110(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)30>::type()
{
  return 30;
}

uint64_t API::ObjectImpl<(API::Object::Type)31>::type()
{
  return 31;
}

void WebKit::RemoteObjectRegistry::backgroundActivity(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (WebKit::ProcessThrottlerActivity **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::ProcessThrottlerActivity *)-1) {
        std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void encodeError(WKRemoteObjectEncoder *a1, NSError *a2)
{
  uint64_t v2 = a2;
  v24[16] = *MEMORY[0x1E4F143B8];
  if ([(NSDictionary *)[(NSError *)a2 userInfo] objectForKeyedSubscript:@"_WKRecoveryAttempterErrorKey"])
  {
    CFTypeRef cf = (void *)[(NSDictionary *)[(NSError *)v2 userInfo] mutableCopy];
    [cf removeObjectForKey:@"_WKRecoveryAttempterErrorKey"];
  }
  else
  {
    CFTypeRef cf = 0;
  }
  if ([(NSDictionary *)[(NSError *)v2 userInfo] objectForKeyedSubscript:@"NSErrorClientCertificateChainKey"])
  {
    int v4 = cf;
    if (!cf) {
      int v4 = (void *)[(NSDictionary *)[(NSError *)v2 userInfo] mutableCopy];
    }
    CFTypeRef cf = v4;
    [v4 removeObjectForKey:@"NSErrorClientCertificateChainKey"];
  }
  id v5 = [(NSDictionary *)[(NSError *)v2 userInfo] objectForKeyedSubscript:@"NSErrorPeerCertificateChainKey"];
  if (v5)
  {
    if (!cf) {
      CFTypeRef cf = (void *)[(NSDictionary *)[(NSError *)v2 userInfo] mutableCopy];
    }
    uint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
    uint64_t v17 = v2;
    int v18 = a1;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v21;
      uint64_t v9 = *MEMORY[0x1E4F1C3C8];
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v21 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v11 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          CFTypeID v12 = CFGetTypeID(v11);
          if (v12 != SecCertificateGetTypeID()) {
            [MEMORY[0x1E4F1CA00] raise:v9 format:@"Error encoding invalid certificate in chain"];
          }
          CFDataRef v13 = SecCertificateCopyData((SecCertificateRef)v11);
          [v6 addObject:v13];
          if (v13) {
            CFRelease(v13);
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v7);
    }
    [cf setObject:v6 forKeyedSubscript:@"NSErrorPeerCertificateChainKey"];
    uint64_t v2 = v17;
    a1 = v18;
    if (v6) {
      CFRelease(v6);
    }
  }
  id v14 = [(NSDictionary *)[(NSError *)v2 userInfo] objectForKeyedSubscript:@"NSURLErrorFailingURLPeerTrustErrorKey"];
  if (v14)
  {
    if (!cf) {
      CFTypeRef cf = (void *)[(NSDictionary *)[(NSError *)v2 userInfo] mutableCopy];
    }
    CFTypeID v15 = CFGetTypeID(v14);
    if (v15 != SecTrustGetTypeID()) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"Error encoding invalid SecTrustRef"];
    }
    v24[0] = 0;
    unsigned int v16 = (const void *)SecTrustSerialize();
    if (v24[0]) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Error serializing SecTrustRef: %@", v24[0] format];
    }
    [cf setObject:v16 forKeyedSubscript:@"NSURLErrorFailingURLPeerTrustErrorKey"];
    if (v16) {
      CFRelease(v16);
    }
  }
  if (cf)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", -[NSError domain](v2, "domain"), -[NSError code](v2, "code"), cf), "encodeWithCoder:", a1);
    CFRelease(cf);
  }
  else
  {
    [(NSError *)v2 encodeWithCoder:a1];
  }
}

void sub_198A9D568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ScopeExit<encodeObject(WKRemoteObjectEncoder *,objc_object *)::$_0>::~ScopeExit(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = (uint64_t *)(*(void *)a1 + 32);
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      unsigned int v5 = *(_DWORD *)(v3 - 8);
      unint64_t v6 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
      uint64_t v10 = *(void *)(v3 + 8 * v9);
      if (v10 != v4)
      {
        int v11 = 1;
        while (v10)
        {
          uint64_t v9 = (v9 + v11) & v5;
          uint64_t v10 = *(void *)(v3 + 8 * v9);
          ++v11;
          if (v10 == v4) {
            goto LABEL_9;
          }
        }
        uint64_t v9 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(v3 - 4))
      {
        *(void *)(v3 + 8 * v9) = -1;
        ++*(_DWORD *)(*v2 - 16);
        uint64_t v12 = *v2;
        int v13 = *v2 ? *(_DWORD *)(v12 - 12) - 1 : -1;
        *(_DWORD *)(v12 - 12) = v13;
        uint64_t v14 = *v2;
        if (*v2)
        {
          unsigned int v15 = 6 * *(_DWORD *)(v14 - 12);
          unsigned int v16 = *(_DWORD *)(v14 - 4);
          if (v15 < v16 && v16 >= 9) {
            WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::rehash(v2, v16 >> 1);
          }
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = *(void *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        unint64_t v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          unsigned int v18 = v16;
          unint64_t v8 = *(void **)(v11 + 8 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (v8);
        *(void *)(v11 + 8 * v18) = v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t API::Array::at<API::Dictionary>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 28) <= a2) {
    goto LABEL_8;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8 * a2);
  if (!result) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result) != 9) {
    return 0;
  }
  if (*(unsigned int *)(a1 + 28) <= a2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198A9D92CLL);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2);
}

CFTypeRef decodeObject(WKRemoteObjectDecoder *a1)
{
  currentDictionary = a1->_currentDictionary;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = API::Dictionary::get<API::String>((uint64_t)currentDictionary, &cf.super.super.isa, v3);
  int v6 = v4;
  if (v4) {
    CFRetain(v4[1]);
  }
  Class isa = cf.super.super.isa;
  cf.super.super.Class isa = 0;
  if (isa)
  {
    if (*(_DWORD *)isa == 2) {
      WTF::StringImpl::destroy(isa, v5);
    }
    else {
      *(_DWORD *)isa -= 2;
    }
  }
  if (!v6) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498] format:@"Class name missing"];
  }
  WTF::String::isolatedCopy();
  WTF::String::utf8();
  uint64_t v9 = cf.super.super.isa;
  cf.super.super.Class isa = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (v25) {
    uint64_t v10 = (char *)v25 + 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = objc_lookUpClass(v10);
  if (!v11)
  {
    if (v25) {
      long long v20 = (char *)v25 + 16;
    }
    else {
      long long v20 = 0;
    }
    CFTypeRef result = (CFTypeRef)crashWithClassName(v20);
    goto LABEL_51;
  }
  allowedClasses = (uint64_t *)a1->_allowedClasses;
  if (allowedClasses
    && (WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<void const*>,WTF::DefaultHash<void const*>>,void const*>(*allowedClasses, (uint64_t)v11) & 1) == 0)
  {
    alwaysAllowedClasses((uint64_t *)&cf);
    Class v21 = cf.super.super.isa;
    char v23 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<void const*>,WTF::DefaultHash<void const*>>,void const*>((uint64_t)cf.super.super.isa, (uint64_t)v11);
    if (v21) {
      WTF::fastFree((Class)((char *)v21 - 16), v22);
    }
    if ((v23 & 1) == 0)
    {
      CFTypeRef result = (CFTypeRef)crashWithClassName(v11);
LABEL_51:
      __break(1u);
      return result;
    }
  }
  if ((objc_class *)objc_opt_class() != v11
    && (objc_class *)objc_opt_class() != v11
    && ([(WKRemoteObjectDecoder *)a1 validateClassSupportsSecureCoding:v11] & 1) == 0)
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"Object of class \"%@\" does not support NSSecureCoding.", v11 format];
  }
  if (v11 == (objc_class *)objc_opt_class() || v11 == (objc_class *)objc_opt_class())
  {
    CFTypeRef v18 = decodeInvocation(a1);
  }
  else
  {
    if (v11 == (objc_class *)objc_opt_class())
    {
      decodeString(&cf, (uint64_t)a1);
      Class v13 = cf.super.super.isa;
      cf.super.super.Class isa = 0;
      CFTypeRef v14 = (id)CFMakeCollectable(v13);
      goto LABEL_25;
    }
    if (v11 == (objc_class *)objc_opt_class())
    {
      decodeError(&cf, (objc_class *)a1);
      CFTypeRef v18 = (id)CFMakeCollectable(cf.super.super.isa);
    }
    else
    {
      if (v11 == (objc_class *)objc_opt_class())
      {
        unint64_t v24 = (void *)MEMORY[0x1E4F28E78];
        decodeString(&cf, (uint64_t)a1);
        CFTypeRef v14 = (CFTypeRef)[v24 stringWithString:cf.super.super.isa];
LABEL_25:
        CFTypeRef v16 = v14;
        Class v17 = cf.super.super.isa;
        cf.super.super.Class isa = 0;
        if (v17) {
          CFRelease(v17);
        }
        goto LABEL_31;
      }
      decodeObjCObject(&cf, (objc_class *)a1, v11);
      CFTypeRef v18 = (id)CFMakeCollectable(cf.super.super.isa);
    }
  }
  CFTypeRef v16 = v18;
LABEL_31:
  if (v25)
  {
    if (*(_DWORD *)v25 == 1) {
      WTF::fastFree(v25, v15);
    }
    else {
      --*(_DWORD *)v25;
    }
  }
  if (v6) {
    CFRelease(v6[1]);
  }
  return v16;
}

void sub_198A9DC90()
{
}

void sub_198A9DCB4(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 != 2) {
      JUMPOUT(0x198A9DD28);
    }
    WTF::StringImpl::destroy(a12, a2);
  }
  JUMPOUT(0x198A9DD2CLL);
}

void sub_198A9DCD8()
{
}

void sub_198A9DCE0(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  JUMPOUT(0x198A9DD38);
}

CFTypeRef *API::Dictionary::get<API::String>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unsigned int v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 21) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  CFRelease(v4[1]);
  return v5;
}

void sub_198A9DDC0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t crashWithClassName(const char *__src)
{
  strncpy(__dst, __src, 0x30uLL);
  uint64_t v1 = (WKRemoteObjectDecoder *)WTFCrashWithInfoImpl(813, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/API/Cocoa/WKRemoteObjectCoder.mm", "void crashWithClassName(const char *)", 126, *(unint64_t *)__dst, v4, v5, v6, v7, v8);
  return decodeInvocation(v1);
}

void *decodeInvocation(WKRemoteObjectDecoder *a1)
{
  long long v20 = 0;
  BOOL v2 = [(WKRemoteObjectDecoder *)a1 decodeBoolForKey:@"isReplyBlock"];
  if (v2)
  {
    SEL replyToSelector = a1->_replyToSelector;
    if (replyToSelector)
    {
      m_ptr = a1->_interface.m_ptr;
    }
    else
    {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"%@: Received unknown reply block", a1 format];
      SEL replyToSelector = a1->_replyToSelector;
      m_ptr = a1->_interface.m_ptr;
      if (!replyToSelector)
      {
        SEL v17 = 0;
LABEL_22:
        uint64_t v18 = [m_ptr _invocationForReplyBlockOfSelector:v17];
        if (v18)
        {
          unint64_t v5 = (void *)v18;
          unint64_t v4 = 0;
        }
        else
        {
          if (a1->_replyToSelector) {
            unint64_t v19 = a1->_replyToSelector;
          }
          else {
            unint64_t v19 = 0;
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F28498], @"Reply block for selector \"%s\" is not defined in the local interface", sel_getName(v19));
          unint64_t v4 = 0;
          unint64_t v5 = 0;
        }
        goto LABEL_6;
      }
    }
    SEL v17 = replyToSelector;
    goto LABEL_22;
  }
  unsigned int v3 = (NSString *)[(WKRemoteObjectDecoder *)a1 decodeObjectOfClass:objc_opt_class() forKey:@"selector"];
  if (!v3) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498] format:@"Invocation had no selector"];
  }
  unint64_t v4 = NSSelectorFromString(v3);
  long long v20 = v4;
  unint64_t v5 = (void *)[a1->_interface.m_ptr _invocationForSelector:v4];
  if (!v5) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"Selector \"%@\" is not defined in the local interface", v3 format];
  }
LABEL_6:
  unint64_t v6 = (WebKit *)[(WKRemoteObjectDecoder *)a1 decodeObjectOfClass:objc_opt_class() forKey:@"typeString"];
  if (!v6) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498] format:@"Invocation had no type signature"];
  }
  unint64_t v7 = (NSString *)objc_msgSend((id)objc_msgSend(v5, "methodSignature"), "_typeString");
  if (!WebKit::methodSignaturesAreCompatible(v6, v7, v8))
  {
    Class v13 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v14 = *MEMORY[0x1E4F28498];
    if (v4) {
      Name = sel_getName(v4);
    }
    else {
      Name = "(no selector)";
    }
    objc_msgSend(v13, "raise:format:", v14, @"Local and remote method signatures are not compatible for method \"%s\"", Name);
  }
  uint64_t v9 = a1->_interface.m_ptr;
  if (v2)
  {
    if (a1->_replyToSelector) {
      SEL v16 = a1->_replyToSelector;
    }
    else {
      SEL v16 = 0;
    }
    decodeInvocationArguments((uint64_t)a1, v5, [v9 _allowedArgumentClassesForReplyBlockOfSelector:v16], 1uLL);
  }
  else
  {
    decodeInvocationArguments((uint64_t)a1, v5, [v9 _allowedArgumentClassesForSelector:v4], 2uLL);
    [v5 setArgument:&v20 atIndex:1];
  }
  return v5;
}

void decodeString(WKRemoteObjectDecoder *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unint64_t v5 = API::Dictionary::get<API::String>(v3, v12, v4);
  unint64_t v7 = v5;
  if (v5) {
    CFRetain(v5[1]);
  }
  unint64_t v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (!v7) {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F28498], @"String missing", v12[0]);
  }
  uint64_t v9 = (unsigned int *)v7[2];
  if (v9)
  {
    uint64_t v10 = (WTF::StringImpl *)*((void *)v9 + 1);
    unint64_t v11 = v9[1] | ((unint64_t)((v9[4] >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0x100000000;
  }
  v12[0] = v10;
  v12[1] = (WTF::StringImpl *)v11;
  WTF::StringView::createNSString((uint64_t *)a1, (WTF::StringView *)v12);
  CFRelease(v7[1]);
}

void sub_198A9E294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  CFRelease(*(CFTypeRef *)(v9 + 8));
  _Unwind_Resume(a1);
}

void decodeError(WKRemoteObjectDecoder *a1, objc_class *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = 0x1E4F28000uLL;
  unint64_t v5 = objc_opt_class();
  decodeObjCObject(&v30, a2, v5);
  Class isa = v30.super.super.isa;
  unint64_t v6 = objc_msgSend((id)-[objc_class userInfo](v30.super.super.isa, "userInfo"), "objectForKeyedSubscript:", @"NSErrorPeerCertificateChainKey");
  if (v6)
  {
    WKRemoteObjectDecoder cf = objc_msgSend((id)-[objc_class userInfo](isa, "userInfo"), "mutableCopy");
    unint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v6, "count"));
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v8 = [v6 countByEnumeratingWithState:&v26 objects:&v30 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v27;
      uint64_t v10 = *MEMORY[0x1E4F28498];
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v27 != v9) {
            objc_enumerationMutation(v6);
          }
          int v12 = *(const void **)(*((void *)&v26 + 1) + 8 * i);
          CFTypeID v13 = CFGetTypeID(v12);
          if (v13 != CFDataGetTypeID())
          {
            uint64_t v14 = (void *)MEMORY[0x1E4F1CA00];
            unint64_t v15 = (objc_class *)objc_opt_class();
            [v14 raise:v10, @"Error decoding certificate from object that is not data %@", NSStringFromClass(v15) format];
          }
          SecCertificateRef v16 = SecCertificateCreateWithData(0, (CFDataRef)v12);
          if (!v16) {
            [MEMORY[0x1E4F1CA00] raise:v10 format:@"Error decoding nvalid certificate in chain"];
          }
          [v7 addObject:v16];
          if (v16) {
            CFRelease(v16);
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v26 objects:&v30 count:16];
      }
      while (v8);
    }
    [cf setObject:v7 forKeyedSubscript:@"NSErrorPeerCertificateChainKey"];
    unint64_t v4 = 0x1E4F28000;
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    WKRemoteObjectDecoder cf = 0;
  }
  SEL v17 = (const void *)objc_msgSend((id)-[objc_class userInfo](isa, "userInfo"), "objectForKeyedSubscript:", @"NSURLErrorFailingURLPeerTrustErrorKey");
  if (v17)
  {
    if (!cf) {
      WKRemoteObjectDecoder cf = objc_msgSend((id)-[objc_class userInfo](isa, "userInfo"), "mutableCopy");
    }
    CFTypeID v18 = CFGetTypeID(v17);
    if (v18 != CFDataGetTypeID())
    {
      unint64_t v19 = (void *)MEMORY[0x1E4F1CA00];
      long long v20 = (objc_class *)objc_opt_class();
      [v19 raise:*MEMORY[0x1E4F28498], @"Invalid SecTrustRef data %@", NSStringFromClass(v20) format];
    }
    v30.super.super.Class isa = 0;
    uint64_t v21 = SecTrustDeserialize();
    long long v22 = (const void *)v21;
    if (v30.super.super.isa || !v21) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"Invalid SecTrustRef %@", v30.super.super.isa format];
    }
    [cf setObject:v22 forKeyedSubscript:@"NSURLErrorFailingURLPeerTrustErrorKey"];
    if (v22) {
      CFRelease(v22);
    }
  }
  if (cf)
  {
    char v23 = (objc_class *)objc_msgSend(*(id *)(v4 + 3160), "errorWithDomain:code:userInfo:", -[objc_class domain](isa, "domain"), -[objc_class code](isa, "code"), cf);
    a1->super.super.Class isa = v23;
    if (v23) {
      CFRetain(v23);
    }
    CFRelease(cf);
    if (isa) {
      CFRelease(isa);
    }
  }
  else
  {
    a1->super.super.Class isa = isa;
  }
}

void sub_198A9E64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

objc_class *decodeObjCObject(WKRemoteObjectDecoder *a1, objc_class *a2, void *a3)
{
  unint64_t v6 = objc_msgSend(a3, "allocWithZone:", -[objc_class zone](a2, "zone"));
  if (!v6) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"Class \"%@\" returned nil from +alloc while being decoded", NSStringFromClass((Class)a3) format];
  }
  unint64_t v7 = (objc_class *)[v6 initWithCoder:a2];
  a1->super.super.Class isa = v7;
  if (!v7) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"Object of class \"%@\" returned nil from -initWithCoder: while being decoded", NSStringFromClass((Class)a3) format];
  }
  a1->super.super.Class isa = 0;
  CFTypeRef result = (objc_class *)[(objc_class *)v7 awakeAfterUsingCoder:a2];
  a1->super.super.Class isa = result;
  if (!result) {
    return (objc_class *)[MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"Object of class \"%@\" returned nil from -awakeAfterUsingCoder: while being decoded", NSStringFromClass((Class)a3) format];
  }
  return result;
}

void sub_198A9E810(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

WTF *WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v3 - 8);
  unsigned int v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v7 = i + v9)
  {
    uint64_t v9 = v7 & v5;
    CFTypeRef result = *(WTF **)(v3 + 16 * v9);
    if (!result) {
      break;
    }
    if (result != (WTF *)-1 && (WTF::equal(result, *a2, a3) & 1) != 0) {
      return *(WTF **)(v3 + 16 * v9 + 8);
    }
    ++i;
  }
  return result;
}

uint64_t crashWithClassName(objc_class *a1)
{
  uint64_t v1 = [NSStringFromClass(a1) UTF8String];
  crashWithClassName(v1);
  return alwaysAllowedClasses();
}

uint64_t *alwaysAllowedClasses(uint64_t *result)
{
  uint64_t v1 = result;
  v24[22] = *MEMORY[0x1E4F143B8];
  if (_MergedGlobals_44)
  {
    uint64_t v2 = qword_1E93CF5B0;
  }
  else
  {
    v24[0] = objc_opt_class();
    v24[1] = objc_opt_class();
    _OWORD v24[2] = objc_opt_class();
    v24[3] = objc_opt_class();
    v24[4] = objc_opt_class();
    v24[5] = objc_opt_class();
    v24[6] = objc_opt_class();
    v24[7] = objc_opt_class();
    v24[8] = objc_opt_class();
    v24[9] = objc_opt_class();
    v24[10] = objc_opt_class();
    v24[11] = objc_opt_class();
    v24[12] = objc_opt_class();
    v24[13] = objc_opt_class();
    v24[14] = objc_opt_class();
    v24[15] = objc_opt_class();
    v24[16] = objc_opt_class();
    v24[17] = objc_opt_class();
    void v24[18] = objc_opt_class();
    v24[19] = objc_opt_class();
    v24[20] = objc_opt_class();
    v24[21] = (uint64_t)NSClassFromString(&cfstr_Nsdecimalnumbe.isa);
    CFTypeRef result = WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v23, v24, 22);
    uint64_t v2 = v23;
    qword_1E93CF5B0 = v23;
    _MergedGlobals_44 = 1;
  }
  *uint64_t v1 = 0;
  if (!v2) {
    return result;
  }
  uint64_t v3 = *(unsigned int *)(v2 - 12);
  if (!v3) {
    return result;
  }
  unsigned int v4 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v5 = v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8);
  unint64_t v6 = (v5 | HIWORD(v5)) + 1;
  if (v6 > 0x400)
  {
    if (v6 > 2 * v3) {
      goto LABEL_10;
    }
  }
  else if (3 * v6 > 4 * v3)
  {
LABEL_8:
    double v7 = (double)v3;
    double v8 = (double)v6;
    double v9 = 0.604166667;
    goto LABEL_11;
  }
  LODWORD(v6) = 2 * v6;
  if (v6 <= 0x400) {
    goto LABEL_8;
  }
LABEL_10:
  double v7 = (double)v3;
  double v8 = (double)v6;
  double v9 = 0.416666667;
LABEL_11:
  if (v8 * v9 <= v7) {
    LODWORD(v6) = 2 * v6;
  }
  if (v6 <= 8) {
    unsigned int v10 = 8;
  }
  else {
    unsigned int v10 = v6;
  }
  unint64_t v11 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v10 + 16));
  int v12 = v11 + 4;
  *uint64_t v1 = (uint64_t)(v11 + 4);
  void v11[2] = v10 - 1;
  void v11[3] = v10;
  _DWORD *v11 = 0;
  v11[1] = v3;
  CFTypeRef result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)&qword_1E93CF5B0);
  uint64_t v14 = qword_1E93CF5B0;
  if (qword_1E93CF5B0) {
    uint64_t v14 = qword_1E93CF5B0 + 8 * *(unsigned int *)(qword_1E93CF5B0 - 4);
  }
  if ((uint64_t *)v14 != result)
  {
    int v15 = v11[2];
    do
    {
      unint64_t v16 = ~(*result << 32) + *result;
      unint64_t v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
      unint64_t v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
      unsigned int v19 = v15 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~(v18 << 27)));
      int v20 = 1;
      do
      {
        unsigned int v21 = v19;
        uint64_t v22 = *(void *)&v12[2 * v19];
        unsigned int v19 = (v19 + v20++) & v15;
      }
      while (v22);
      *(void *)&v12[2 * v21] = *result;
      while (++result != v13)
      {
        if ((unint64_t)(*result + 1) > 1) {
          goto LABEL_27;
        }
      }
      CFTypeRef result = v13;
LABEL_27:
      ;
    }
    while (result != (uint64_t *)v14);
  }
  return result;
}

uint64_t WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<void const*>,WTF::DefaultHash<void const*>>,void const*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(void *)(a1 + 8 * v6);
  if (v7 == a2) {
    return 1;
  }
  int v10 = 1;
  do
  {
    BOOL v8 = v7 != 0;
    if (!v7) {
      break;
    }
    unsigned int v6 = (v6 + v10) & v2;
    uint64_t v7 = *(void *)(a1 + 8 * v6);
    ++v10;
  }
  while (v7 != a2);
  return v8;
}

const char *decodeInvocationArguments(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  BOOL v8 = (void *)[a2 methodSignature];
  CFTypeRef result = (const char *)[v8 numberOfArguments];
  int v10 = &result[-a4];
  if ((unint64_t)result > a4)
  {
    uint64_t v11 = 0;
    for (unint64_t i = 0; v10 != (const char *)i; ++i)
    {
      CFTypeRef result = (const char *)[v8 getArgumentTypeAtIndex:a4 + i];
      CFTypeID v13 = result;
      int v14 = *result;
      if (v14 > 80)
      {
        if (v14 <= 98)
        {
          if (v14 == 81)
          {
            uint64_t v42 = 0;
            uint64_t v44 = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
            uint64_t v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "unsignedLongLongValue");
            if (v45[0]) {
              WTF::fastFree((WTF *)(v45[0] - 16), v37);
            }
LABEL_53:
            uint64_t v42 = v23;
            CFTypeRef result = (const char *)[a2 setArgument:&v42 atIndex:a4 + i];
          }
          else if (v14 == 83)
          {
            LOWORD(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            __int16 v17 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "unsignedShortValue");
            if (v42) {
              WTF::fastFree((WTF *)(v42 - 16), v16);
            }
LABEL_15:
            LOWORD(v44) = v17;
            CFTypeRef result = (const char *)[a2 setArgument:&v44 atIndex:a4 + i];
          }
          else
          {
LABEL_29:
            CFTypeRef result = (const char *)objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Unsupported invocation argument type '%s' for argument %zu", v13, a4 + i);
          }
        }
        else
        {
          switch(*result)
          {
            case 'c':
              LOBYTE(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              char v27 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "charValue");
              if (v42) {
                WTF::fastFree((WTF *)(v42 - 16), v26);
              }
LABEL_59:
              LOBYTE(v44) = v27;
              CFTypeRef result = (const char *)[a2 setArgument:&v44 atIndex:a4 + i];
              break;
            case 'd':
              uint64_t v42 = 0;
              uint64_t v44 = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
              objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "doubleValue");
              uint64_t v30 = v29;
              if (v45[0]) {
                WTF::fastFree((WTF *)(v45[0] - 16), v28);
              }
              uint64_t v42 = v30;
              CFTypeRef result = (const char *)[a2 setArgument:&v42 atIndex:a4 + i];
              break;
            case 'e':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'r':
              goto LABEL_29;
            case 'f':
              LODWORD(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "floatValue");
              int v33 = v32;
              if (v42) {
                WTF::fastFree((WTF *)(v42 - 16), v31);
              }
              LODWORD(v44) = v33;
              CFTypeRef result = (const char *)[a2 setArgument:&v44 atIndex:a4 + i];
              break;
            case 'i':
              LODWORD(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              int v35 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "intValue");
              if (v42) {
                WTF::fastFree((WTF *)(v42 - 16), v34);
              }
LABEL_47:
              LODWORD(v44) = v35;
              CFTypeRef result = (const char *)[a2 setArgument:&v44 atIndex:a4 + i];
              break;
            case 'l':
              uint64_t v42 = 0;
              uint64_t v44 = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
              uint64_t v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "longValue");
              if (v45[0]) {
                WTF::fastFree((WTF *)(v45[0] - 16), v24);
              }
              goto LABEL_53;
            case 'q':
              uint64_t v42 = 0;
              uint64_t v44 = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
              uint64_t v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "longLongValue");
              if (v45[0]) {
                WTF::fastFree((WTF *)(v45[0] - 16), v25);
              }
              goto LABEL_53;
            case 's':
              LOWORD(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              __int16 v17 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "shortValue");
              if (v42) {
                WTF::fastFree((WTF *)(v42 - 16), v36);
              }
              goto LABEL_15;
            default:
              if (v14 != 123) {
                goto LABEL_29;
              }
              if (!strcmp(result, "{_NSRange=QQ}"))
              {
                uint64_t v42 = 0;
                CFTypeRef v43 = 0;
                uint64_t v44 = objc_opt_class();
                WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
                uint64_t v42 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "rangeValue");
                CFTypeRef v43 = v41;
                if (v45[0]) {
                  WTF::fastFree((WTF *)(v45[0] - 16), v41);
                }
              }
              else
              {
                if (strcmp(v13, "{CGSize=dd}")) {
                  goto LABEL_29;
                }
                uint64_t v44 = objc_opt_class();
                WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
                objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "doubleValue");
                uint64_t v42 = v19;
                if (v45[0]) {
                  WTF::fastFree((WTF *)(v45[0] - 16), v18);
                }
                uint64_t v44 = objc_opt_class();
                WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
                objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "doubleValue");
                CFTypeRef v43 = v21;
                if (v45[0]) {
                  WTF::fastFree((WTF *)(v45[0] - 16), v20);
                }
              }
              CFTypeRef result = (const char *)[a2 setArgument:&v42 atIndex:a4 + i];
              break;
          }
        }
      }
      else
      {
        switch(*result)
        {
          case '@':
            if (i >= *(unsigned int *)(a3 + 12))
            {
              __break(0xC471u);
              return result;
            }
            uint64_t v15 = *(void *)a3 + v11;
            uint64_t v42 = 0;
            uint64_t v42 = decodeObjectFromObjectStream(a1, v15);
            CFTypeRef result = (const char *)[a2 setArgument:&v42 atIndex:a4 + i];
            break;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_29;
          case 'B':
            LOBYTE(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            char v27 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "BOOLValue");
            if (v42) {
              WTF::fastFree((WTF *)(v42 - 16), v39);
            }
            goto LABEL_59;
          case 'C':
            LOBYTE(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            char v27 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "unsignedCharValue");
            if (v42) {
              WTF::fastFree((WTF *)(v42 - 16), v38);
            }
            goto LABEL_59;
          case 'I':
            LODWORD(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            int v35 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "unsignedIntValue");
            if (v42) {
              WTF::fastFree((WTF *)(v42 - 16), v40);
            }
            goto LABEL_47;
          default:
            if (v14 != 76) {
              goto LABEL_29;
            }
            uint64_t v42 = 0;
            uint64_t v44 = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
            uint64_t v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "unsignedLongValue");
            if (v45[0]) {
              WTF::fastFree((WTF *)(v45[0] - 16), v22);
            }
            goto LABEL_53;
        }
      }
      v11 += 8;
    }
  }
  return result;
}

void sub_198A9F4D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      unsigned int v6 = *(_DWORD **)v4;
      *(void *)unint64_t v4 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::LegacyWebArchive,WTF::RawPtrTraits<WebCore::LegacyWebArchive>,WTF::DefaultRefDerefTraits<WebCore::LegacyWebArchive>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      unsigned int v6 = *(_DWORD **)v4;
      *(void *)unint64_t v4 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      CFTypeID v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = v15 + 16 * v22;
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v24 + 8), 0);
          uint64_t v25 = *v13;
          uint64_t v26 = v6 + 16 * v11;
          uint64_t v27 = *(void *)(v26 + 8);
          v26 += 8;
          *(void *)uint64_t v26 = 0;
          *(void *)uint64_t v24 = v25;
          *(void *)(v24 + 8) = v27;
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)v26, 0);
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

IPC::Encoder *std::invoke[abi:sn180100]<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>,std::reference_wrapper<WebKit::WebProcessProxy>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1[1] + 64))(a1[1]);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 1256;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  CFTypeID v13 = v5;
  IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::encode(v5, *v3);
  LOBYTE(v1nw_tcp_options_set_no_delay(options, 1) = 0;
  char v12 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v13, 0, (uint64_t)&v11, 1);
  if (v12)
  {
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  uint64_t result = v13;
  CFTypeID v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_198A9F9E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *std::invoke[abi:sn180100]<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>,std::reference_wrapper<WebKit::WebPage>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1[1] + 64))(a1[1]);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 1256;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::encode(v5, *v3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v2 + 32) + 32))(v2 + 32, &v10, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198A9FB34(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteObjectRegistry::CallReplyBlock>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 1255;
  *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<unsigned long long,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebKit::UserData const&>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198A9FC50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<unsigned long long,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebKit::UserData const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned int v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    __break(0xC471u);
  }
  else
  {
    *unsigned int v5 = v4;
    uint64_t v7 = (uint64_t *)a2[1];
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, v7);
  }
}

IPC::Encoder *WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(Messages::RemoteObjectRegistry::CallReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::CallReplyBlock)#1}::operator()<std::reference_wrapper<WebKit::WebPage>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1[1] + 64))(a1[1]);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 1255;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::tuple<unsigned long long,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebKit::UserData const&>,0ul,1ul>(v5, v3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a2 + 32) + 32))(a2 + 32, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198A9FE24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 1257;
  *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198A9FF50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock)#1}::operator()<std::reference_wrapper<WebKit::WebPage>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1[1] + 64))(a1[1]);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 1257;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a2 + 32) + 32))(a2 + 32, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198AA00A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WebKit::ProcessThrottlerActivity *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::ProcessThrottlerActivity *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void WebKit::RemoteAudioDestinationManager::didReceiveMessage(WebKit::RemoteAudioDestinationManager *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2BC:
      uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v7)
      {
        uint64_t v8 = v6;
        IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)&v79);
        if (v81)
        {
          uint64_t v65 = v8;
          WTF::MachSendRight::MachSendRight();
          long long v69 = v80;
          v70[0] = 1;
          if (v81) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v79);
          }
LABEL_6:
          WebKit::RemoteAudioDestinationManager::audioSamplesStorageChanged((uint64_t)this, v65);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v68);
          return;
        }
      }
      LOBYTE(v65) = 0;
      v70[0] = 0;
      uint64_t v52 = *(void *)a3;
      uint64_t v53 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v54 = *((void *)a3 + 3);
      if (v54)
      {
        if (v53)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v52);
          if (v70[0]) {
            goto LABEL_6;
          }
        }
      }
      return;
    case 0x2BD:
      uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v27)
      {
        LOBYTE(v65) = 0;
        char v73 = 0;
        goto LABEL_62;
      }
      uint64_t v28 = v26;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v74);
      if (!v75)
      {
        LOBYTE(v65) = 0;
        char v73 = 0;
        goto LABEL_74;
      }
      unint64_t v30 = *((void *)a3 + 1);
      uint64_t v31 = *(WTF::StringImpl **)a3;
      unint64_t v32 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v30 < v32 || v30 - v32 <= 3)
      {
        unint64_t v49 = 0;
        uint64_t v48 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v61 = *((void *)a3 + 3);
        if (v61)
        {
          if (v30)
          {
            (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
            uint64_t v48 = *(void *)a3;
            unint64_t v49 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v49 = 0;
            uint64_t v48 = 0;
          }
        }
LABEL_67:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v47 = *((void *)a3 + 3);
        if (!v47) {
          goto LABEL_68;
        }
LABEL_82:
        if (v49) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v47 + 16))(v47, v48, v49);
        }
        goto LABEL_68;
      }
      Class v34 = (unsigned int *)((char *)v31 + v32);
      *((void *)a3 + 2) = v34 + 1;
      if (!v31)
      {
        unint64_t v49 = v30;
        uint64_t v48 = 0;
        goto LABEL_67;
      }
      unint64_t v35 = (((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v31;
      if (v30 < v35 || v30 - v35 <= 3) {
        goto LABEL_55;
      }
      unsigned int v37 = *v34;
      *((void *)a3 + 2) = (((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      unsigned int v38 = *(_DWORD *)(((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v39 = (((((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v31;
      BOOL v40 = v30 >= v39 && v30 - v39 > 3;
      if (!v40
        || ((uint64_t v41 = (unsigned int *)((char *)v31 + v39),
             *((void *)a3 + 2) = v41 + 1,
             unsigned int v42 = *v41,
             unint64_t v43 = (((unint64_t)v41 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v31,
             v30 >= v43)
          ? (BOOL v44 = v30 - v43 > 3)
          : (BOOL v44 = 0),
            !v44))
      {
LABEL_55:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v55 = *((void *)a3 + 3);
        if (v55)
        {
          if (v30)
          {
            (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
            uint64_t v31 = *(WTF::StringImpl **)a3;
            uint64_t v56 = *((void *)a3 + 1);
            uint64_t v57 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            if (v57)
            {
              if (v56) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v31);
              }
            }
          }
        }
        goto LABEL_68;
      }
      uint64_t v45 = (unsigned int *)((char *)v31 + v43);
      unsigned int v46 = *v45;
      *((void *)a3 + 2) = v45 + 1;
      IPC::Decoder::decode<IPC::Semaphore>(a3, v76);
      if (!v78)
      {
LABEL_68:
        LOBYTE(v65) = 0;
        char v73 = 0;
        goto LABEL_69;
      }
      IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a3, (uint64_t)&v79);
      if (BYTE8(v80))
      {
        unint64_t v49 = v75;
        if (!v75 || (unint64_t v49 = v78) == 0)
        {
          __break(1u);
          goto LABEL_82;
        }
        int v50 = v74;
        long long v74 = 0;
        uint64_t v65 = v28;
        char v68 = v50;
        *(void *)&long long v69 = __PAIR64__(v38, v37);
        *((void *)&v69 + nw_tcp_options_set_no_delay(options, 1) = __PAIR64__(v46, v42);
        WTF::MachSendRight::MachSendRight();
        int v51 = v77;
        int v77 = 0;
        int v71 = v51;
        WTF::MachSendRight::MachSendRight();
        v72[1] = v80;
        char v73 = 1;
        if (BYTE8(v80)) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v79);
        }
      }
      else
      {
        LOBYTE(v65) = 0;
        char v73 = 0;
      }
      if (v78)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v76);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v76);
      }
LABEL_69:
      if (v75)
      {
        long long v62 = v74;
        long long v74 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2) {
            WTF::StringImpl::destroy(v62, v31);
          }
          else {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
LABEL_74:
      if (v73) {
        goto LABEL_75;
      }
LABEL_62:
      uint64_t v58 = *(void *)a3;
      uint64_t v59 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v60 = *((void *)a3 + 3);
      if (!v60) {
        return;
      }
      if (!v59) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
      if (!v73) {
        return;
      }
LABEL_75:
      LODWORD(v29) = DWORD2(v69);
      WebKit::RemoteAudioDestinationManager::createAudioDestination(this, v65, v29, *((float *)&v69 + 3), (uint64_t)&v68, v69, SDWORD1(v69), (uint64_t)v70);
      if (v73)
      {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v72);
        IPC::Semaphore::destroy((IPC::Semaphore *)v70);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v70);
        unint64_t v64 = v68;
        char v68 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2) {
            WTF::StringImpl::destroy(v64, v63);
          }
          else {
            *(_DWORD *)v64 -= 2;
          }
        }
      }
      return;
    case 0x2BE:
      uint64_t v16 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v17)
      {
        WebKit::RemoteAudioDestinationManager::deleteAudioDestination((uint64_t *)this, v16);
      }
      return;
    case 0x2BF:
      uint64_t v18 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v19)
      {
        uint64_t v20 = v18;
        uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v22)
        {
          uint64_t v67 = v21;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v68, a2);
          uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v23 = &unk_1EE9BE118;
          v23[1] = v67;
          uint64_t v24 = v68;
          char v68 = 0;
          v23[2] = v24;
          uint64_t v79 = v23;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
          WebKit::RemoteAudioDestinationManager::startAudioDestination((uint64_t *)this, v20, (uint64_t *)&v79);
          goto LABEL_17;
        }
      }
      return;
    case 0x2C0:
      uint64_t v9 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v13)
        {
          uint64_t v66 = v12;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v68, a2);
          uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v14 = &unk_1EE9BE140;
          v14[1] = v66;
          uint64_t v15 = v68;
          char v68 = 0;
          uint64_t v14[2] = v15;
          uint64_t v79 = v14;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
          WebKit::RemoteAudioDestinationManager::stopAudioDestination((uint64_t *)this, v11, (uint64_t *)&v79);
LABEL_17:
          uint64_t v25 = (uint64_t)v79;
          uint64_t v79 = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
        }
      }
      return;
    default:
      return;
  }
}

atomic_uchar *WebKit::RemoteAudioHardwareListener::didReceiveMessage(WebKit::RemoteAudioHardwareListener *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5 = (atomic_uchar **)((char *)this + 72);
  uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 9);
  int v8 = *((unsigned __int16 *)a3 + 25);
  switch(v8)
  {
    case 707:
      uint64_t result = (atomic_uchar *)IPC::Decoder::decode<std::tuple<unsigned long,unsigned long>>(a3, (uint64_t)&v9);
      if (v10)
      {
        *(_OWORD *)((char *)this + 24) = v9;
        uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
      }
      break;
    case 706:
      *((_DWORD *)this + 4) = 2;
      (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(*v5, v7);
    case 705:
      *((_DWORD *)this + 4) = 1;
      (*(void (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(*v5, v7);
  }
  if (this) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(*v5, v7);
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteAudioHardwareListener::didReceiveMessage(WebKit::RemoteAudioHardwareListener *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteAudioHardwareListener::didReceiveMessage((WebKit::RemoteAudioHardwareListener *)((char *)this - 56), a2, a3);
}

WebKit::RemoteAudioSession *WebKit::RemoteAudioSession::didReceiveMessage(WebKit::RemoteAudioSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = (uint64_t)this;
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 722:
      return (WebKit::RemoteAudioSession *)WebKit::RemoteAudioSession::beginInterruptionRemote(this);
    case 724:
      this = (WebKit::RemoteAudioSession *)IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
      {
        return (WebKit::RemoteAudioSession *)WebKit::RemoteAudioSession::endInterruptionRemote(v3);
      }
      break;
    case 723:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteAudioSessionConfiguration>>(a3, (uint64_t)v6);
      if (v6[72]) {
        WebKit::RemoteAudioSession::configurationChanged(v3, (uint64_t)v6);
      }
      return (WebKit::RemoteAudioSession *)std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
  }
  return this;
}

WebKit::RemoteAudioSession *non-virtual thunk to'WebKit::RemoteAudioSession::didReceiveMessage(WebKit::RemoteAudioSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteAudioSession::didReceiveMessage((WebKit::RemoteAudioSession *)((char *)this - 72), a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager21StartAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager21StartAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager21StartAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3136;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager20StopAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager20StopAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager20StopAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3137;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v11 = *((void *)v2 + 2);
    uint64_t v7 = (WebKit::RemoteAudioHardwareListener *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v11 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(v7, a2);
    this = (atomic_uchar *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *IPC::Decoder::decode<std::tuple<unsigned long,unsigned long>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<unsigned long,unsigned long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<unsigned long,unsigned long>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (v15)
    {
      uint64_t v20 = result;
      uint64_t v22 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t result = v20;
        a2 = v22;
        uint64_t v14 = *v20;
        unint64_t v13 = v20[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v6 = (uint64_t *)(v3 + v4);
  result[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_15:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result || !v13) {
      goto LABEL_19;
    }
    uint64_t v21 = a2;
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t))(*result + 16))(result, v14, v13);
LABEL_26:
    a2 = v21;
LABEL_19:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_13;
  }
  unint64_t v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v7 || v2 - v7 <= 7)
  {
    void *result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (!v16) {
      goto LABEL_19;
    }
    if (!v2) {
      goto LABEL_19;
    }
    char v17 = result;
    uint64_t v21 = a2;
    (*(void (**)(void))(*(void *)v16 + 16))(result[3]);
    a2 = v21;
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t result = (void *)v17[3];
    uint64_t *v17 = 0;
    v17[1] = 0;
    if (!result || !v19) {
      goto LABEL_19;
    }
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v18);
    goto LABEL_26;
  }
  uint64_t v9 = *v6;
  char v10 = (uint64_t *)(v3 + v7);
  uint64_t v11 = *v10;
  result[2] = v10 + 1;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  char v12 = 1;
LABEL_13:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteAudioSessionConfiguration>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::RemoteAudioSessionConfiguration>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteAudioSessionConfiguration>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::RemoteAudioSessionConfiguration>(a1, (uint64_t)&v6);
  char v4 = v11;
  if (v11)
  {
    *(void *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 24) = v8[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v8 + 10);
    *(void *)(a2 + 56) = v9;
    *(unsigned char *)(a2 + 64) = v10;
    char v4 = 1;
    uint64_t v6 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 72) = v4;
  return std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v3);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::RemoteAudioSessionConfiguration>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    char v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>(uint64_t *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      unsigned int v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
        int v3 = 0;
        unsigned int v2 = v8;
      }
      else
      {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 0;
    }
  }
  if (v2 <= 0x100) {
    LOBYTE(v2) = 0;
  }
  return v3 | v2;
}

void sub_198AA1698(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t URLFromString(const WTF::String *a1)
{
  if (!a1 || !*((_DWORD *)a1 + 1)) {
    return 0;
  }
  uint64_t v1 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v2 = WTF::StringImpl::operator NSString *();

  return [v1 URLWithString:v2];
}

void sub_198AA1780(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA180C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA18A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1930(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA19C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1A54(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1AE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1B74(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1C04(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1C94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA1E24(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_198AA204C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA22A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA23E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA27BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA2BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  PendingReply::~PendingReply((PendingReply *)&a13);
  uint64_t v19 = a18;
  a18 = 0;
  if (v19) {
    std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)&a18, v19);
  }
  _Unwind_Resume(a1);
}

void WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::add<PendingReply>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    unsigned int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  uint64_t v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = (uint64_t *)(v8 + 32 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = *(unsigned int *)(v8 - 4);
        }
        char v31 = 0;
        uint64_t v32 = v8 + 32 * v26;
        goto LABEL_33;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      uint64_t v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 32 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *(_OWORD *)uint64_t v18 = 0u;
      *((_OWORD *)v18 + nw_tcp_options_set_no_delay(options, 1) = 0u;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      uint64_t v16 = v18;
    }
  }
  uint64_t v20 = *(void *)a4;
  *(void *)a4 = 0;
  long long v21 = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  uint64_t v22 = (const void *)v16[1];
  uint64_t *v16 = v11;
  v16[1] = v20;
  if (v22)
  {
    long long v33 = v21;
    CFRelease(v22);
    long long v21 = v33;
  }
  uint64_t v23 = (const void *)v16[3];
  *((_OWORD *)v16 + nw_tcp_options_set_no_delay(options, 1) = v21;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v27 = *a2;
  if (*a2) {
    int v28 = *(_DWORD *)(v27 - 12);
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
  unint64_t v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
    {
LABEL_26:
      uint64_t v16 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, v16);
      uint64_t v27 = *a2;
      if (*a2) {
        unint64_t v30 = *(unsigned int *)(v27 - 4);
      }
      else {
        unint64_t v30 = 0;
      }
    }
  }
  else if (3 * v30 <= 4 * v29)
  {
    goto LABEL_26;
  }
  uint64_t v32 = v27 + 32 * v30;
  char v31 = 1;
LABEL_33:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v32;
  *(unsigned char *)(a1 + 16) = v31;
}

void PendingReply::~PendingReply(PendingReply *this)
{
  uint64_t v2 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)this;
  *(void *)this = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198AA3240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    WTF::ThreadSafeRefCounted<-[_WKRemoteObjectRegistry _invokeMethod:]::ReplyBlockCallChecker,(WTF::DestructionThread)2>::deref(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  CFRelease(v13);
  std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair(v17 - 96);
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t replyBlockSignature(Protocol *a1, objc_selector *a2, uint64_t a3)
{
  uint64_t MethodTypeEncoding = _protocol_getMethodTypeEncoding();
  if (!MethodTypeEncoding)
  {
    uint64_t MethodTypeEncoding = _protocol_getMethodTypeEncoding();
    if (!MethodTypeEncoding) {
      return 0;
    }
  }
  uint64_t v5 = (void *)[MEMORY[0x1E4F1CA38] signatureWithObjCTypes:MethodTypeEncoding];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (void *)[v5 _signatureForBlockAtArgumentIndex:a3];

  return [v6 _typeString];
}

void sub_198AA347C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198AA3558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c54_ZTSKZ41___WKRemoteObjectRegistry__invokeMethod__E3__1(void *a1, void *a2)
{
  char v4 = (const void *)a2[4];
  a1[4] = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = (CFTypeRef)a2[5];
  a1[5] = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  uint64_t v6 = (atomic_uint *)a2[7];
  a1[6] = a2[6];
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  a1[7] = v6;
  return result;
}

void sub_198AA35EC(_Unwind_Exception *exception_object)
{
  int v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA366C(_Unwind_Exception *exception_object)
{
  int v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c54_ZTSKZ41___WKRemoteObjectRegistry__invokeMethod__E3__1(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<-[_WKRemoteObjectRegistry _invokeMethod:]::ReplyBlockCallChecker,(WTF::DestructionThread)2>::deref(v2);
  }
  int v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3) {
    CFRelease(v3);
  }
  char v4 = (const void *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198AA38F4(_Unwind_Exception *a1)
{
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

CFStringRef WKStringCopyCFString(const __CFAllocator *a1, void *a2)
{
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (!v9)
  {
    int v3 = 0;
    CFIndex v4 = 0;
    goto LABEL_5;
  }
  int v3 = (const UInt8 *)*((void *)v9 + 1);
  CFIndex v4 = *((unsigned int *)v9 + 1);
  if ((*((unsigned char *)v9 + 16) & 4) != 0)
  {
LABEL_5:
    CFStringRef v5 = CFStringCreateWithBytes(a1, v3, v4, 0x201u, 1u);
    goto LABEL_6;
  }
  CFStringRef v5 = CFStringCreateWithCharacters(a1, (const UniChar *)v3, v4);
LABEL_6:
  CFStringRef v7 = v5;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v6);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v7;
}

void sub_198AA3BE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WKURLCreateWithCFURL(id a1)
{
  id v1 = a1;
  if (a1)
  {
    Class Class = object_getClass(a1);
    if (qword_1EB358FF8 != -1) {
      dispatch_once(&qword_1EB358FF8, &__block_literal_global_302);
    }
    if (Class == (Class)qword_1EB359000)
    {
      return *(id *)([(id)CFRetain(v1) _apiObject] + 8);
    }
    else
    {
      WTF::bytesAsString((uint64_t *)&v7, (WTF *)v1, v2);
      if (v7)
      {
        API::URL::create((API::URL *)&v7, &v8);
        if (v8) {
          id v1 = (id)*((void *)v8 + 1);
        }
        else {
          id v1 = 0;
        }
        CFStringRef v5 = v7;
        CFStringRef v7 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, v4);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

void sub_198AA3D00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFURLRef WKURLCopyCFURL(uint64_t a1, void *a2)
{
  if (a2) {
    uint64_t v2 = [a2 _apiObject];
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 16)) {
    return 0;
  }
  WTF::String::utf8();
  if (v8)
  {
    int v3 = (const UInt8 *)v8 + 16;
    CFIndex v4 = *((void *)v8 + 1);
  }
  else
  {
    CFIndex v4 = 0;
    int v3 = 0;
  }
  CFURLRef v6 = CFURLCreateAbsoluteURLWithBytes(0, v3, v4, 0x8000100u, 0, 1u);
  if (v8)
  {
    if (*(_DWORD *)v8 == 1) {
      WTF::fastFree(v8, v5);
    }
    else {
      --*(_DWORD *)v8;
    }
  }
  return v6;
}

void sub_198AA3DE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

void MethodInfo::~MethodInfo(MethodInfo *this, void *a2)
{
  int v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  CFStringRef v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(v5);
  }

  WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v4);
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_Lb0EEEvT1_SQ_T0_NS_15iterator_traitsISQ_E15difference_typeEb(uint64_t result, objc_class **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (objc_class **)result;
  while (2)
  {
    char v9 = a2 - 1;
    unsigned int v10 = a2 - 2;
    uint64_t v11 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), *v8);
                if (result)
                {
                  BOOL v44 = *v8;
                  *uint64_t v8 = *(a2 - 1);
                  *(a2 - nw_tcp_options_set_no_delay(options, 1) = v44;
                }
                break;
              case 3:
                CFTypeRef result = _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v8, v8 + 1, v9);
                break;
              case 4:
                CFTypeRef result = _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(v8, v8 + 1, v8 + 2, v9);
                break;
              case 5:
                uint64_t v45 = v8 + 2;
                unsigned int v46 = v8 + 3;
                _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(v8, v8 + 1, v8 + 2, v8 + 3);
                CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), v8[3]);
                if (result)
                {
                  uint64_t v47 = *v46;
                  WebKit *v46 = *(a2 - 1);
                  *(a2 - nw_tcp_options_set_no_delay(options, 1) = v47;
                  CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v46, *v45);
                  if (result)
                  {
                    uint64_t v48 = *v45;
                    unint64_t v49 = *v46;
                    *uint64_t v45 = *v46;
                    WebKit *v46 = v48;
                    CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v49, v8[1]);
                    if (result)
                    {
                      int v51 = v8[1];
                      int v50 = v8[2];
                      uint64_t v52 = *v8;
                      v8[1] = v50;
                      _OWORD v8[2] = v51;
                      CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v50, v52);
                      if (result) {
                        *(int8x16_t *)uint64_t v8 = vextq_s8(*(int8x16_t *)v8, *(int8x16_t *)v8, 8uLL);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v53 = v8 + 1;
            BOOL v55 = v8 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                uint64_t v57 = v8;
                do
                {
                  uint64_t v59 = *v57;
                  uint64_t v58 = v57[1];
                  uint64_t v57 = v53;
                  CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v58, v59);
                  if (result)
                  {
                    uint64_t v60 = *v53;
                    uint64_t v61 = v56;
                    while (1)
                    {
                      *(objc_class **)((char *)v8 + v61 + 8) = *(objc_class **)((char *)v8 + v61);
                      if (!v61) {
                        break;
                      }
                      CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v60, *(objc_class **)((char *)v8 + v61 - 8));
                      v61 -= 8;
                      if ((result & 1) == 0)
                      {
                        long long v62 = (objc_class **)((char *)v8 + v61 + 8);
                        goto LABEL_91;
                      }
                    }
                    long long v62 = v8;
LABEL_91:
                    *long long v62 = v60;
                  }
                  uint64_t v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              uint64_t v85 = 0;
              uint64_t v86 = 1;
              do
              {
                uint64_t v87 = v86;
                CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v53, v8[v85]);
                if (result)
                {
                  char v88 = *v53;
                  do
                  {
                    uint64_t v89 = &v8[v85];
                    v89[1] = *v89;
                    if (v85 == -1) {
                      goto LABEL_135;
                    }
                    --v85;
                    CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v88, *(v89 - 1));
                  }
                  while ((result & 1) != 0);
                  v8[v85 + 1] = v88;
                }
                uint64_t v86 = v87 + 1;
                uint64_t v53 = &v8[v87 + 1];
                uint64_t v85 = v87;
              }
              while (v53 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != a2)
            {
              int64_t v63 = (unint64_t)(v13 - 2) >> 1;
              int64_t v93 = v63;
              do
              {
                int64_t v64 = v63;
                if (v93 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v8[v65];
                  if (2 * v63 + 2 < v13
                    && _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v66, v66[1]))
                  {
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t v67 = &v8[v64];
                  CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v66, *v67);
                  if ((result & 1) == 0)
                  {
                    int64_t v91 = v64;
                    char v68 = *v67;
                    do
                    {
                      long long v69 = v66;
                      *uint64_t v67 = *v66;
                      if (v93 < v65) {
                        break;
                      }
                      uint64_t v70 = (2 * v65) | 1;
                      uint64_t v66 = &v8[v70];
                      uint64_t v71 = 2 * v65 + 2;
                      if (v71 < v13
                        && _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v66, v66[1]))
                      {
                        ++v66;
                        uint64_t v70 = v71;
                      }
                      CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v66, v68);
                      uint64_t v67 = v69;
                      uint64_t v65 = v70;
                    }
                    while (!result);
                    WTF::StringImpl *v69 = v68;
                    int64_t v64 = v91;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v72 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v73 = 0;
                long long v74 = *v8;
                unsigned __int8 v75 = v8;
                do
                {
                  BOOL v76 = &v75[v73 + 1];
                  uint64_t v77 = (2 * v73) | 1;
                  uint64_t v78 = 2 * v73 + 2;
                  if (v78 < v72)
                  {
                    CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v76, v75[v73 + 2]);
                    if (result)
                    {
                      ++v76;
                      uint64_t v77 = v78;
                    }
                  }
                  *unsigned __int8 v75 = *v76;
                  unsigned __int8 v75 = v76;
                  uint64_t v73 = v77;
                }
                while (v77 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                if (v76 == --a2)
                {
                  *BOOL v76 = v74;
                }
                else
                {
                  *BOOL v76 = *a2;
                  *a2 = v74;
                  uint64_t v79 = (char *)v76 - (char *)v8 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                    char v81 = &v8[v80];
                    CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v81, *v76);
                    if (result)
                    {
                      char v82 = *v76;
                      do
                      {
                        uint64_t v83 = v81;
                        *BOOL v76 = *v81;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        char v81 = &v8[v80];
                        CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v81, v82);
                        BOOL v76 = v83;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v83 = v82;
                    }
                  }
                }
              }
              while (v72-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v8[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v15, v8, v9);
          }
          else
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v8, v15, v9);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v8 + 1, v15 - 1, v10);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v8 + 2, &v8[v14 + 1], a2 - 3);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v15 - 1, v15, &v8[v14 + 1]);
            uint64_t v16 = *v8;
            *uint64_t v8 = *v15;
            const void *v15 = v16;
          }
          --a3;
          if ((a4 & 1) != 0
            || (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(v8 - 1), *v8) & 1) != 0)
          {
            break;
          }
          Class v34 = *v8;
          CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v8, *v9);
          unint64_t v35 = v8 + 1;
          if (result)
          {
            do
            {
              if (v35 == a2) {
                goto LABEL_135;
              }
              uint64_t v36 = *v35++;
              CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v34, v36);
            }
            while ((result & 1) == 0);
            uint64_t v11 = v35 - 1;
          }
          else
          {
            do
            {
              uint64_t v11 = v35;
              if (v35 >= a2) {
                break;
              }
              ++v35;
              CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v34, *v11);
            }
            while ((result & 1) == 0);
          }
          unsigned int v37 = a2;
          if (v11 < a2)
          {
            unsigned int v37 = a2;
            while (v37 != v8)
            {
              unsigned int v38 = *--v37;
              CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v34, v38);
              if ((result & 1) == 0) {
                goto LABEL_56;
              }
            }
LABEL_135:
            __break(1u);
            JUMPOUT(0x198AA4634);
          }
LABEL_56:
          if (v11 < v37)
          {
            unint64_t v39 = *v11;
            void *v11 = *v37;
            BOOL v40 = v11 + 1;
            *unsigned int v37 = v39;
            do
            {
              if (v40 == a2) {
                goto LABEL_135;
              }
              uint64_t v41 = *v40++;
            }
            while (!_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v34, v41));
            uint64_t v11 = v40 - 1;
            while (v37 != v8)
            {
              unsigned int v42 = *--v37;
              CFTypeRef result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v34, v42);
              if ((result & 1) == 0) {
                goto LABEL_56;
              }
            }
            goto LABEL_135;
          }
          unint64_t v43 = v11 - 1;
          BOOL v4 = v11 - 1 >= v8;
          BOOL v5 = v11 - 1 == v8;
          if (v11 - 1 != v8) {
            *uint64_t v8 = *v43;
          }
          a4 = 0;
          void *v43 = v34;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *v8;
        do
        {
          int v19 = &v8[v17 + 1];
          if (v19 == a2) {
            goto LABEL_135;
          }
          ++v17;
        }
        while ((_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v19, v18) & 1) != 0);
        uint64_t v20 = &v8[v17];
        long long v21 = a2;
        if (v17 != 1)
        {
          while (v21 != v8)
          {
            uint64_t v22 = *--v21;
            if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v22, v18))goto LABEL_22; {
          }
            }
          goto LABEL_135;
        }
        long long v21 = a2;
        do
        {
          if (v20 >= v21) {
            break;
          }
          uint64_t v23 = *--v21;
        }
        while ((_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v23, v18) & 1) == 0);
LABEL_22:
        if (v20 >= v21)
        {
          uint64_t v32 = v20 - 1;
        }
        else
        {
          uint64_t v90 = a3;
          uint64_t v24 = v10;
          int v25 = v9;
          uint64_t v26 = &v8[v17];
          uint64_t v27 = v21;
          do
          {
            int v28 = *v26;
            *uint64_t v26 = *v27;
            NSError *v27 = v28;
            uint64_t v29 = v26 + 1;
            do
            {
              if (v29 == a2) {
                goto LABEL_135;
              }
              unint64_t v30 = *v29++;
            }
            while ((_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v30, v18) & 1) != 0);
            uint64_t v26 = v29 - 1;
            do
            {
              if (v27 == v8) {
                goto LABEL_135;
              }
              char v31 = *--v27;
            }
            while (!_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v31, v18));
          }
          while (v26 < v27);
          uint64_t v32 = v29 - 2;
          char v9 = v25;
          unsigned int v10 = v24;
          a3 = v90;
        }
        if (v32 != v8) {
          *uint64_t v8 = *v32;
        }
        *uint64_t v32 = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_38:
        CFTypeRef result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_Lb0EEEvT1_SQ_T0_NS_15iterator_traitsISQ_E15difference_typeEb(v8, v32, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v32 + 1;
      }
      BOOL v33 = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEbT1_SQ_T0_(v8, v32);
      uint64_t v11 = v32 + 1;
      CFTypeRef result = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEbT1_SQ_T0_(v32 + 1, a2);
      if (result) {
        break;
      }
      if (!v33) {
        goto LABEL_38;
      }
    }
    a2 = v32;
    if (!v33) {
      continue;
    }
    return result;
  }
}

uint64_t _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(objc_class *a1, objc_class *a2)
{
  Name = class_getName(a1);
  WTF::CString::CString((WTF::CString *)&v11, Name);
  BOOL v4 = class_getName(a2);
  WTF::CString::CString((WTF::CString *)&v10, v4);
  uint64_t v6 = WTF::operator<();
  CFStringRef v7 = v10;
  unsigned int v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1) {
      WTF::fastFree(v7, v5);
    }
    else {
      --*(_DWORD *)v7;
    }
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1) {
      WTF::fastFree(v8, v5);
    }
    else {
      --*(_DWORD *)v8;
    }
  }
  return v6;
}

void sub_198AA46F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::fastFree(a9, a2);
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(objc_class **a1, objc_class **a2, objc_class **a3)
{
  char v6 = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a2, *a1);
  uint64_t result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a3, *a2);
  if (v6)
  {
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      uint64_t result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a3, v8);
      if (result)
      {
        uint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    char v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    uint64_t result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a2, *a1);
    if (result)
    {
      unsigned int v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEbT1_SQ_T0_(objc_class **a1, objc_class **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), *a1))
      {
        char v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - nw_tcp_options_set_no_delay(options, 1) = v6;
      }
      return 1;
    case 3:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v15 = a1 + 2;
      uint64_t v16 = a1 + 3;
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(a1, a1 + 1, a1 + 2, a1 + 3);
      if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), a1[3]))
      {
        uint64_t v17 = *v16;
        objc_class *v16 = *(a2 - 1);
        *(a2 - nw_tcp_options_set_no_delay(options, 1) = v17;
        if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v16, *v15))
        {
          uint64_t v18 = *v15;
          int v19 = *v16;
          const void *v15 = *v16;
          objc_class *v16 = v18;
          if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v19, a1[1]))
          {
            long long v21 = a1[1];
            uint64_t v20 = a1[2];
            uint64_t v22 = *a1;
            a1[1] = v20;
            a1[2] = v21;
            if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v20, v22))*(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL); {
          }
            }
        }
      }
      return 1;
    default:
      CFStringRef v7 = a1 + 2;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(a1, a1 + 1, a1 + 2);
      uint64_t v8 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v8, *v7))
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        uint64_t v13 = (objc_class **)((char *)a1 + v12);
        *(objc_class **)((char *)a1 + v12 + 24) = *(objc_class **)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if ((_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v11, v13[1]) & 1) == 0)
        {
          unint64_t v14 = (objc_class **)((char *)a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      unint64_t v14 = a1;
LABEL_13:
      *unint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    CFStringRef v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(objc_class **a1, objc_class **a2, objc_class **a3, objc_class **a4)
{
  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(a1, a2, a3);
  uint64_t result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a4, *a3);
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a3, *a2);
    if (result)
    {
      int v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      uint64_t result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a2, *a1);
      if (result)
      {
        uint64_t v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void PendingReply::PendingReply(PendingReply *this, CFTypeRef cf, objc_selector *a3, objc_object *a4)
{
  *(void *)this = cf;
  if (cf) {
    CFRetain(cf);
  }
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)this + 2) = [(objc_object *)a4 copy];
}

void sub_198AA4B20(_Unwind_Exception *exception_object)
{
  int v3 = *v1;
  *id v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL12wkNSURLClassv_block_invoke()
{
  uint64_t result = objc_opt_class();
  qword_1EB359000 = result;
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v4 + 32 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 32 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 32 * v25);
          int v28 = (const void *)v27[3];
          v27[3] = 0;
          if (v28) {
            CFRelease(v28);
          }
          uint64_t v29 = (const void *)v27[1];
          v27[1] = 0;
          if (v29) {
            CFRelease(v29);
          }
          uint64_t *v27 = *v13;
          uint64_t v30 = v4 + 32 * v11;
          long long v32 = *(_OWORD *)(v30 + 8);
          char v31 = (const void **)(v30 + 8);
          objc_class *v31 = 0;
          *(_OWORD *)(v27 + nw_tcp_options_set_no_delay(options, 1) = v32;
          BOOL v33 = v31[2];
          v31[2] = 0;
          v27[3] = (uint64_t)v33;
          Class v34 = v31[2];
          v31[2] = 0;
          if (v34) {
            CFRelease(v34);
          }
          unint64_t v35 = *v31;
          objc_class *v31 = 0;
          if (v35) {
            CFRelease(v35);
          }
          if (v13 == a3) {
            uint64_t v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v4 + 32 * v11;
          uint64_t v16 = *(const void **)(v15 + 24);
          *(void *)(v15 + 24) = 0;
          if (v16) {
            CFRelease(v16);
          }
          uint64_t v17 = *(const void **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v17) {
            CFRelease(v17);
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void *WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(void *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(a2, a3, (const WTF::StringImpl *)a3);
  if (v4)
  {
    return std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::pair[abi:sn180100]<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>,(void *)0>(a1, (uint64_t)(v4 + 1));
  }
  else
  {
    v6[0] = 0;
    v6[1] = 0;
    *a1 = 0;
    a1[1] = 0;
    return (void *)std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair((uint64_t)v6);
  }
}

WTF **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (a1)
  {
    int v5 = *(_DWORD *)(a1 - 8);
    unsigned int v6 = *((_DWORD *)*a2 + 4);
    if (v6 >= 0x100) {
      unsigned int v7 = v6 >> 8;
    }
    else {
      unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v7 = i + v9)
    {
      int v9 = v7 & v5;
      uint64_t v10 = (WTF **)(a1 + 24 * (v7 & v5));
      uint64_t v11 = *v10;
      if (!*v10) {
        break;
      }
      if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0) {
        return v10;
      }
      ++i;
    }
  }
  return 0;
}

void *std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::pair[abi:sn180100]<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>,(void *)0>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a2;
  *a1 = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  int v5 = *(const void **)(a2 + 8);
  a1[1] = v5;
  if (v5) {
    CFRetain(v5);
  }
  return a1;
}

void sub_198AA4F20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *id v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA4FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AA50AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 32 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 32 * v6;
    }
    else
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 32 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
      result += 32 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  unint64_t v4 = (const void *)a2[3];
  a2[3] = 0;
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)a2[1];
  a2[1] = 0;
  if (v5) {
    CFRelease(v5);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

uint64_t WebKit::RemoteAudioSessionProxy::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2CB:
      unint64_t v6 = *((void *)a3 + 1);
      uint64_t v7 = *(void *)a3;
      unint64_t v8 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 <= v8)
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v27 = *((void *)a3 + 3);
        if (v27)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
            uint64_t v26 = *(void *)a3;
            unint64_t v25 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v25 = 0;
            uint64_t v26 = 0;
          }
        }
      }
      else
      {
        unsigned int v9 = (unsigned __int8 *)(v7 + v8);
        *((void *)a3 + 2) = v9 + 1;
        if (v7)
        {
          unsigned int v10 = *v9;
          if (v10 < 7)
          {
            if (v6 <= (unint64_t)&v9[-v7 + 1])
            {
              unint64_t v12 = 0;
              uint64_t v13 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
              uint64_t v30 = *((void *)a3 + 3);
              if (v30)
              {
                (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
                unint64_t v12 = 0;
                uint64_t v34 = *(void *)a3;
                uint64_t v35 = *((void *)a3 + 1);
                uint64_t v36 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
                uint64_t v13 = 0;
                if (v36)
                {
                  if (v35)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
                    uint64_t v13 = *(void *)a3;
                    unint64_t v12 = *((void *)a3 + 1);
                  }
                }
              }
            }
            else
            {
              *((void *)a3 + 2) = v9 + 2;
              unsigned int v11 = v9[1];
              unint64_t v12 = v6;
              uint64_t v13 = v7;
              if (v11 < 3)
              {
                unsigned __int16 v14 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>((uint64_t *)a3);
                if (v14 > 0xFFu)
                {
                  return (uint64_t)WebKit::RemoteAudioSessionProxy::setCategory((WebKit::RemoteAudioSessionProxy *)v4, v10, v11, v14);
                }
                goto LABEL_55;
              }
            }
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            uint64_t v31 = *((void *)a3 + 3);
            if (v31 && v12) {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v13, v12);
            }
LABEL_55:
            uint64_t v32 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            this = *((void *)a3 + 3);
            if (this && v32)
            {
              BOOL v33 = *(uint64_t (**)(void))(*(void *)this + 16);
              return v33();
            }
            return this;
          }
LABEL_50:
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v29 = *((void *)a3 + 3);
          if (v29 && v6) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v7);
          }
          goto LABEL_55;
        }
        unint64_t v25 = v6;
        uint64_t v26 = 0;
      }
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v28 = *((void *)a3 + 3);
      if (v28)
      {
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
          uint64_t v7 = *(void *)a3;
          unint64_t v6 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v6 = 0;
          uint64_t v7 = 0;
        }
      }
      goto LABEL_50;
    case 0x2CC:
      this = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a3);
      if ((this & 0xFF0000) != 0)
      {
        *(unsigned char *)(v4 + 58) = 1;
        uint64_t v17 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
        uint64_t v18 = *(uint64_t (**)(void))(*(void *)WebCore::AudioSession::sharedSession(v17) + 144);
        return v18();
      }
      return this;
    case 0x2CD:
      this = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if (v15)
      {
        *(void *)(v4 + 48) = this;
        uint64_t v16 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
        return (uint64_t)WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(v16);
      }
      return this;
    case 0x2D0:
      this = WebKit::RemoteAudioSessionProxy::allowTestOnlyIPC((WebKit::RemoteAudioSessionProxy *)this);
      if ((this & 1) == 0)
      {
        int v5 = *((unsigned __int16 *)a3 + 25);
        goto LABEL_24;
      }
      return (uint64_t)WebKit::RemoteAudioSessionProxy::triggerBeginInterruptionForTesting((WebKit::RemoteAudioSessionProxy *)v4);
    default:
LABEL_24:
      if (v5 != 721) {
        goto LABEL_30;
      }
      this = WebKit::RemoteAudioSessionProxy::allowTestOnlyIPC((WebKit::RemoteAudioSessionProxy *)v4);
      if (this)
      {
        return (uint64_t)WebKit::RemoteAudioSessionProxy::triggerEndInterruptionForTesting((WebKit::RemoteAudioSessionProxy *)v4);
      }
      else
      {
        int v5 = *((unsigned __int16 *)a3 + 25);
LABEL_30:
        switch(v5)
        {
          case 713:
            int v19 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
            this = WebKit::RemoteAudioSessionProxyManager::beginInterruptionRemote(v19);
            break;
          case 714:
            this = IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>((uint64_t *)a3);
            if ((unsigned __int16)this >= 0x100u)
            {
              BOOL v21 = this != 0;
              unint64_t v22 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
              this = WebKit::RemoteAudioSessionProxyManager::endInterruptionRemote(v22, v21);
            }
            break;
          case 718:
            this = (uint64_t)IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v37);
            if (v38)
            {
              this = (uint64_t)WebKit::RemoteAudioSessionProxy::setSceneIdentifier((WebKit::RemoteAudioSessionProxy *)v4, &v37);
              if (v38)
              {
                this = (uint64_t)v37;
                unsigned int v37 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2) {
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
                  }
                  else {
                    *(_DWORD *)this -= 2;
                  }
                }
              }
            }
            break;
          case 719:
            unsigned __int16 v23 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a3);
            if (v23 <= 0xFFu) {
              goto LABEL_55;
            }
            *(unsigned char *)(v4 + 35) = v23;
            int v24 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
            this = (uint64_t)WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(v24);
            break;
          default:
            return this;
        }
      }
      return this;
  }
}

uint64_t WebKit::RemoteAudioSessionProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t *a3, IPC::Encoder **a4)
{
  if (*((_WORD *)a3 + 25) != 3626) {
    return 0;
  }
  unsigned __int16 v8 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
  if (v8 <= 0xFFu)
  {
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    uint64_t result = a3[3];
    if (!result) {
      return result;
    }
    if (v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
    }
    return 0;
  }
  char v9 = v8;
  unsigned int v10 = *a4;
  *a4 = 0;
  uint64_t v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v18, a2);
  unsigned int v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9BE200;
  v11[1] = v17;
  unint64_t v12 = v18[0];
  v18[0] = 0;
  void v11[2] = v12;
  int v19 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v18);
  WebKit::RemoteAudioSessionProxy::tryToSetActive(a1, v9 != 0, (uint64_t *)&v19);
  uint64_t v13 = (uint64_t)v19;
  int v19 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return 1;
}

void WebKit::RemoteAudioSourceProviderManager::didReceiveMessage(WebKit::RemoteAudioSourceProviderManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 725)
  {
    uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (v12)
    {
      unint64_t v10 = *((void *)a3 + 1);
      uint64_t v13 = *(void *)a3;
      unint64_t v14 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v10 < v14 || v10 - v14 <= 7)
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v9 = *((void *)a3 + 3);
        if (!v9) {
          goto LABEL_37;
        }
        goto LABEL_48;
      }
      uint64_t v16 = (uint64_t *)(v13 + v14);
      *((void *)a3 + 2) = v16 + 1;
      if (!v13)
      {
        unint64_t v25 = v10;
        uint64_t v26 = 0;
        goto LABEL_37;
      }
      unint64_t v17 = (((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) - v13;
      if (v10 >= v17 && v10 - v17 > 7)
      {
        int v19 = (uint64_t *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v20 = *v19;
        uint64_t v21 = *v16;
        *((void *)a3 + 2) = v19 + 1;
        WebKit::RemoteAudioSourceProviderManager::audioSamplesAvailable((uint64_t)this, v11, v21, v20);
        return;
      }
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v28 = *((void *)a3 + 3);
      if (v28)
      {
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
          uint64_t v32 = *(void *)a3;
          uint64_t v33 = *((void *)a3 + 1);
          uint64_t v34 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          if (v34)
          {
            if (v33) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
            }
          }
        }
      }
    }
LABEL_41:
    uint64_t v29 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v30 = *((void *)a3 + 3);
    if (v30 && v29)
    {
      uint64_t v31 = *(void (**)(void))(*(void *)v30 + 16);
      v31();
    }
    return;
  }
  if (v5 != 726) {
    return;
  }
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
  if (v7)
  {
    uint64_t v8 = v6;
    IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v44);
    if (!v46)
    {
      LOBYTE(v35) = 0;
      char v43 = 0;
      goto LABEL_28;
    }
    IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a3, (uint64_t)v47);
    if (!v53)
    {
      LOBYTE(v35) = 0;
      char v43 = 0;
LABEL_26:
      if (v46) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v44);
      }
LABEL_28:
      if (v43)
      {
LABEL_29:
        WebKit::RemoteAudioSourceProviderManager::audioStorageChanged((uint64_t)this, v35, (uint64_t)v36, (uint64_t)&v37);
        if (v43)
        {
          WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v37);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v36);
        }
        return;
      }
      goto LABEL_32;
    }
    if (v46)
    {
      uint64_t v35 = v8;
      WTF::MachSendRight::MachSendRight();
      *(_OWORD *)&v36[8] = v45;
      uint64_t v37 = MEMORY[0x1E4FB6B98] + 16;
      long long v39 = v49;
      long long v40 = v50;
      long long v41 = v51;
      int v42 = v52;
      long long v38 = v48;
      char v43 = 1;
      if (v53) {
        WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v47);
      }
      goto LABEL_26;
    }
    __break(1u);
LABEL_48:
    if (v10)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
      uint64_t v26 = *(void *)a3;
      unint64_t v25 = *((void *)a3 + 1);
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
    }
LABEL_37:
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v27 = *((void *)a3 + 3);
    if (v27 && v25) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v26, v25);
    }
    goto LABEL_41;
  }
  LOBYTE(v35) = 0;
  char v43 = 0;
LABEL_32:
  uint64_t v22 = *(void *)a3;
  uint64_t v23 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t v24 = *((void *)a3 + 3);
  if (v24)
  {
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
      if (v43) {
        goto LABEL_29;
      }
    }
  }
}

uint64_t *WebKit::RemoteImageBuffer::didReceiveStreamMessage(uint64_t *this, IPC::StreamServerConnection *a2, IPC::Decoder *a3)
{
  int v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x461:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)a2 + 5);
      WebKit::RemoteImageBuffer::convertToLuminanceMask((WebKit::RemoteImageBuffer *)v5);
      goto LABEL_3;
    case 0x462:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)a2 + 5);
      (*(void (**)(uint64_t))(*(void *)v5[3] + 24))(v5[3]);
      goto LABEL_3;
    case 0x463:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)a2 + 5);
      IPC::ArgumentCoder<WebCore::PixelBuffer,void>::decode((uint64_t *)a3, &v53);
      if ((_BYTE)cf)
      {
        char v7 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a3);
        if (!v8)
        {
LABEL_37:
          if (v53)
          {
            if (*((_DWORD *)v53 + 2) == 1) {
              (*(void (**)(void))(*v53 + 8))();
            }
            else {
              --*((_DWORD *)v53 + 2);
            }
          }
          goto LABEL_40;
        }
        uint64_t v9 = (uint64_t)v7;
        unint64_t v10 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a3);
        if (v11)
        {
          uint64_t v12 = (uint64_t)v10;
          uint64_t v13 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a3);
          if (v14)
          {
            unint64_t v15 = *((void *)a3 + 1);
            uint64_t v16 = *(void *)a3;
            unint64_t v17 = *((void *)a3 + 2) - *(void *)a3;
            if (v15 <= v17)
            {
              unint64_t v38 = 0;
              uint64_t v39 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
              uint64_t v40 = *((void *)a3 + 3);
              if (v40)
              {
                if (v15)
                {
                  (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
                  uint64_t v39 = *(void *)a3;
                  unint64_t v38 = *((void *)a3 + 1);
                }
                else
                {
                  unint64_t v38 = 0;
                  uint64_t v39 = 0;
                }
              }
            }
            else
            {
              uint64_t v18 = (unsigned __int8 *)(v16 + v17);
              *((void *)a3 + 2) = v18 + 1;
              if (v16)
              {
                uint64_t v19 = *v18;
                if (v19 < 2)
                {
                  WebKit::RemoteImageBuffer::putPixelBuffer((uint64_t)v5, &v53, v9, v12, (uint64_t)v13, v19);
                  uint64_t v20 = v53;
                  char v53 = 0;
                  if (v20)
                  {
                    if (*((_DWORD *)v20 + 2) == 1) {
                      (*(void (**)(uint64_t *))(*v20 + 8))(v20);
                    }
                    else {
                      --*((_DWORD *)v20 + 2);
                    }
                  }
                  goto LABEL_12;
                }
                goto LABEL_36;
              }
              unint64_t v38 = v15;
              uint64_t v39 = 0;
            }
            unint64_t v15 = 0;
            uint64_t v16 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            uint64_t v41 = *((void *)a3 + 3);
            if (!v41)
            {
LABEL_36:
              *(void *)a3 = 0;
              *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
              uint64_t v42 = *((void *)a3 + 3);
              if (v42 && v15) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v16);
              }
              goto LABEL_37;
            }
            if (!v38)
            {
              unint64_t v15 = 0;
              uint64_t v16 = 0;
              goto LABEL_36;
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
          }
        }
        uint64_t v16 = *(void *)a3;
        unint64_t v15 = *((void *)a3 + 1);
        goto LABEL_36;
      }
      uint64_t v35 = *(void *)a3;
      uint64_t v36 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v37 = *((void *)a3 + 3);
      if (v37 && v36) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
      }
LABEL_40:
      uint64_t v43 = *(void *)a3;
      uint64_t v44 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v45 = *((void *)a3 + 3);
      if (v45 && v44) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
      }
LABEL_12:
      uint64_t v6 = &v52;
      return (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v6);
    case 0x464:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)a2 + 5);
      IPC::handleMessage<Messages::RemoteImageBuffer::TransformToColorSpace,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::DestinationColorSpace const&)>((uint64_t *)a3, v5);
LABEL_3:
      uint64_t v6 = &v53;
      return (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v6);
    default:
      switch(*((_WORD *)a3 + 25))
      {
        case 0xE7A:
          return IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::FilteredNativeImage,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>((uint64_t)a2, a3, (uint64_t)this);
        case 0xE7B:
          this = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          char v47 = v46;
          if (v46)
          {
            long long v48 = this;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)a2 + 5);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53);
            atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
            uint64_t v49 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v49 = &unk_1EE9BE2C8;
            *(void *)(v49 + 8) = v48;
            *(unsigned char *)(v49 + 16) = v47;
            *(_DWORD *)(v49 + 17) = v52;
            *(_DWORD *)(v49 + 20) = *(_DWORD *)((char *)&v52 + 3);
            *(void *)(v49 + 24) = a2;
            char v53 = (uint64_t *)v49;
            WebKit::RemoteImageBuffer::flushContextSync((uint64_t)v5, (uint64_t *)&v53);
            this = v53;
            char v53 = 0;
            if (this) {
              return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
            }
          }
          return this;
        case 0xE7C:
          this = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          char v22 = v21;
          if (!v21) {
            return this;
          }
          uint64_t v23 = this;
          IPC::Decoder::decode<WebCore::PixelBufferFormat>((uint64_t *)a3, (uint64_t)&v53);
          if (!v55) {
            return (uint64_t *)IPC::Decoder::markInvalid(a3);
          }
          uint64_t v24 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a3);
          if (!v25)
          {
            int v28 = v55;
            goto LABEL_56;
          }
          uint64_t v26 = (uint64_t)v24;
          uint64_t v27 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a3);
          int v28 = v55;
          if (!v29)
          {
LABEL_56:
            if (v28)
            {
              CFTypeRef v50 = cf;
              CFTypeRef cf = 0;
              if (v50) {
                CFRelease(v50);
              }
            }
            return (uint64_t *)IPC::Decoder::markInvalid(a3);
          }
          if (!v55)
          {
            __break(1u);
            goto LABEL_48;
          }
          uint64_t v30 = (uint64_t)v27;
          __int16 v31 = (__int16)v53;
          CFTypeRef v32 = cf;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v33 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v33 = &unk_1EE9BE228;
          *(void *)(v33 + 8) = v23;
          *(unsigned char *)(v33 + 16) = v22;
          *(_DWORD *)(v33 + 17) = *(_DWORD *)v51;
          *(_DWORD *)(v33 + 20) = *(_DWORD *)&v51[3];
          *(void *)(v33 + 24) = a2;
          int v52 = (uint64_t *)v33;
          LOWORD(v53) = v31;
          CFTypeRef cf = v32;
          WebKit::RemoteImageBuffer::getPixelBuffer((uint64_t)v5, (uint64_t)&v53, v26, v30, (uint64_t *)&v52);
          CFTypeRef v34 = cf;
          CFTypeRef cf = 0;
          if (v34) {
            CFRelease(v34);
          }
          this = v52;
          int v52 = 0;
          if (this) {
            return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
          }
          return this;
        case 0xE7D:
LABEL_48:
          return (uint64_t *)IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>((uint64_t)a2, a3, (uint64_t)v5);
        case 0xE7E:
          return IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetShareableBitmap,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>((uint64_t)a2, a3, (uint64_t)this);
        default:
          return this;
      }
  }
}

void IPC::handleMessage<Messages::RemoteImageBuffer::TransformToColorSpace,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::DestinationColorSpace const&)>(uint64_t *a1, void *a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>(a1, a2, (uint64_t)&cf);
  if (v5)
  {
    WebKit::RemoteImageBuffer::transformToColorSpace((uint64_t)a2);
    if (v5)
    {
      CFTypeRef v3 = cf;
      CFTypeRef cf = 0;
      if (v3) {
        CFRelease(v3);
      }
    }
  }
}

WTF::MachSendRight *IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = (WTF::MachSendRight *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v8 = v7;
  if (v7)
  {
    uint64_t v9 = result;
    IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>>(v14, a2);
    if (v15)
    {
      uint64_t result = (WTF::MachSendRight *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, (uint64_t **)(a1 + 40));
      if (!v15
        || (uint64_t result = (WTF::MachSendRight *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v13),
            !v15))
      {
        __break(1u);
        return result;
      }
      atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
      uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v10 = &unk_1EE9BE250;
      *(void *)(v10 + 8) = v9;
      *(unsigned char *)(v10 + 16) = v8;
      *(_DWORD *)(v10 + 17) = *(_DWORD *)v12;
      *(_DWORD *)(v10 + 20) = *(_DWORD *)&v12[3];
      *(void *)(v10 + 24) = a1;
      uint64_t v13 = (uint64_t *)v10;
      IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(a3, (uint64_t)v14, (uint64_t)&v13);
      char v11 = v13;
      uint64_t v13 = 0;
      if (v11) {
        (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      }
    }
    return std::optional<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>>::~optional((WTF::MachSendRight *)v14);
  }
  return result;
}

uint64_t *IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetShareableBitmap,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v8 = v7;
  if (!v7) {
    return result;
  }
  uint64_t v9 = result;
  unint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *(void *)a2;
  unint64_t v12 = *((void *)a2 + 2) - *(void *)a2;
  if (v10 <= v12)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *(void *)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_11;
  }
  uint64_t v13 = (unsigned __int8 *)(v11 + v12);
  *((void *)a2 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v19 = v10;
    uint64_t v20 = 0;
LABEL_11:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_12:
    *(void *)a2 = 0;
    *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v11);
    }
    BOOL v15 = 0;
    int v16 = 0;
    goto LABEL_6;
  }
  BOOL v15 = v14 != 0;
  int v16 = 256;
LABEL_6:
  int v17 = v16 | v15;
  if ((v16 | v15) <= 0xFF)
  {
    uint64_t v24 = *(void *)a2;
    uint64_t v25 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (uint64_t *)*((void *)a2 + 3);
    if (result)
    {
      if (v25)
      {
        (*(void (**)(uint64_t *, uint64_t))(*result + 16))(result, v24);
        uint64_t v26 = *((void *)a2 + 1);
        uint64_t result = (uint64_t *)*((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
        if (result)
        {
          if (v26)
          {
            uint64_t v27 = *(uint64_t (**)(void))(*result + 16);
            return (uint64_t *)v27();
          }
        }
      }
    }
  }
  else
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, (uint64_t **)(a1 + 40));
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v29);
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v18 = &unk_1EE9BE278;
    *(void *)(v18 + 8) = v9;
    *(unsigned char *)(v18 + 16) = v8;
    *(_DWORD *)(v18 + 17) = *(_DWORD *)v28;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)&v28[3];
    *(void *)(v18 + 24) = a1;
    char v29 = (uint64_t *)v18;
    WebKit::RemoteImageBuffer::getShareableBitmap(a3, v17 != 256, (uint64_t *)&v29);
    uint64_t result = v29;
    char v29 = 0;
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t *IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::FilteredNativeImage,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v8 = v7;
  if (v7)
  {
    uint64_t v9 = result;
    uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>>(a2, (uint64_t)&v16);
    if (v17)
    {
      uint64_t result = (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, (uint64_t **)(a1 + 40));
      if (v17
        && (uint64_t result = (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v18),
            v17))
      {
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v10 = &unk_1EE9BE2A0;
        *(void *)(v10 + 8) = v9;
        *(unsigned char *)(v10 + 16) = v8;
        *(_DWORD *)(v10 + 17) = *(_DWORD *)v14;
        *(_DWORD *)(v10 + 20) = *(_DWORD *)&v14[3];
        *(void *)(v10 + 24) = a1;
        uint64_t v11 = v16;
        BOOL v15 = (uint64_t *)v10;
        int v16 = 0;
        uint64_t v18 = v11;
        WebKit::RemoteImageBuffer::filteredNativeImage(a3, (uint64_t)&v18, (uint64_t *)&v15);
        WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v18, v12);
        uint64_t result = v15;
        BOOL v15 = 0;
        if (result) {
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
        if (v17) {
          return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v16, v13);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) != 1117) {
    return this;
  }
  uint64_t v4 = this;
  IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>((uint64_t *)a3, (uint64_t)v9);
  LOBYTE(v5[0]) = 0;
  if (!v12)
  {
    char v8 = 0;
    goto LABEL_20;
  }
  char v7 = 0;
  if (v11)
  {
    int v6 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)v9);
    char v7 = 1;
    char v8 = 1;
    if (!v12) {
      goto LABEL_8;
    }
    if (!v11) {
      goto LABEL_8;
    }
    if (v10 == -1) {
      goto LABEL_8;
    }
    off_1EE9BE2E0[v10]((int)&v13, (WTF::MachSendRight *)v9);
    if (v8) {
      goto LABEL_8;
    }
LABEL_20:
    this = IPC::Decoder::markInvalid(a3);
    if (!v8) {
      return this;
    }
    goto LABEL_8;
  }
  char v8 = 1;
LABEL_8:
  LOBYTE(v9[0]) = 0;
  char v11 = 0;
  if (v7)
  {
    int v10 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v5);
    char v11 = 1;
  }
  this = WebKit::RemoteImageBufferProxy::didCreateBackend(v4, (uint64_t)v9);
  if (v11 && v10 != -1) {
    this = off_1EE9BE2E0[v10]((int)&v13, (WTF::MachSendRight *)v9);
  }
  if (v8 && v7 && v6 != -1) {
    return off_1EE9BE2E0[v6]((int)v9, (WTF::MachSendRight *)v5);
  }
  return this;
}

void *WebKit::RemoteImageDecoderAVFManager::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1125) {
    return IPC::handleMessage<Messages::RemoteImageDecoderAVFManager::EncodedDataStatusChanged,WebKit::RemoteImageDecoderAVFManager,WebKit::RemoteImageDecoderAVFManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned long,WebCore::IntSize const&,BOOL)>((uint64_t *)a3, this);
  }
  return this;
}

void *IPC::handleMessage<Messages::RemoteImageDecoderAVFManager::EncodedDataStatusChanged,WebKit::RemoteImageDecoderAVFManager,WebKit::RemoteImageDecoderAVFManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned long,WebCore::IntSize const&,BOOL)>(uint64_t *a1, void *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    unint64_t v6 = a1[1];
    uint64_t v7 = *a1;
    unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v6 < v8 || v6 - v8 <= 7)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v21 = a1[3];
      if (v21)
      {
        if (v6)
        {
          uint64_t v22 = *(void (**)(void))(*(void *)v21 + 16);
LABEL_32:
          v22();
          uint64_t v16 = *a1;
          unint64_t v15 = a1[1];
          goto LABEL_18;
        }
        goto LABEL_37;
      }
      goto LABEL_18;
    }
    int v10 = (uint64_t *)(v7 + v8);
    a1[2] = (uint64_t)(v10 + 1);
    if (!v7)
    {
      unint64_t v15 = v6;
      uint64_t v16 = 0;
      goto LABEL_18;
    }
    uint64_t v11 = v4;
    uint64_t v12 = *v10;
    char v13 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1);
    if (v14)
    {
      unint64_t v15 = a1[1];
      uint64_t v16 = *a1;
      unint64_t v17 = a1[2] - *a1;
      if (v15 <= v17)
      {
        uint64_t v23 = 0;
        *a1 = 0;
        a1[1] = 0;
        uint64_t v24 = a1[3];
        if (v24)
        {
          if (v15)
          {
            (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
            uint64_t v23 = a1[1];
          }
          else
          {
            uint64_t v23 = 0;
          }
        }
      }
      else
      {
        uint64_t v18 = (unsigned __int8 *)(v16 + v17);
        a1[2] = (uint64_t)(v18 + 1);
        if (v16)
        {
          unsigned int v19 = *v18;
          if (v19 < 2)
          {
            v30[0] = v11;
            v30[1] = v12;
            __int16 v31 = v13;
            BOOL v32 = v19 != 0;
            char v33 = 1;
            return WebKit::RemoteImageDecoderAVFManager::encodedDataStatusChanged(a2, v30, v12, (int *)&v31, v19 != 0);
          }
          goto LABEL_18;
        }
        uint64_t v23 = v15;
      }
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v25 = a1[3];
      if (v25)
      {
        if (v23)
        {
          uint64_t v22 = *(void (**)(void))(*(void *)v25 + 16);
          goto LABEL_32;
        }
LABEL_37:
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
LABEL_18:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v26 = a1[3];
      if (v26 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v16);
      }
    }
  }
  uint64_t v27 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (void *)a1[3];
  if (result) {
    BOOL v28 = v27 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28)
  {
    char v29 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v29();
  }
  return result;
}

void *non-virtual thunk to'WebKit::RemoteImageDecoderAVFManager::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1125) {
    return IPC::handleMessage<Messages::RemoteImageDecoderAVFManager::EncodedDataStatusChanged,WebKit::RemoteImageDecoderAVFManager,WebKit::RemoteImageDecoderAVFManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,unsigned long,WebCore::IntSize const&,BOOL)>((uint64_t *)a3, this - 1);
  }
  return this;
}

void WebKit::RemoteImageDecoderAVFProxy::didReceiveMessage(WebKit::RemoteImageDecoderAVFProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1126:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v7);
      if (v8) {
        WebKit::RemoteImageDecoderAVFProxy::clearFrameBufferCache((uint64_t)this, v7);
      }
      break;
    case 1128:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,long long>>((uint64_t *)a3, (uint64_t)&v7);
      if (v8) {
        WebKit::RemoteImageDecoderAVFProxy::setExpectedContentSize((uint64_t)this, v7);
      }
      break;
    case 1127:
      uint64_t v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v6)
      {
        WebKit::RemoteImageDecoderAVFProxy::deleteDecoder(this, v5);
      }
      break;
  }
}

uint64_t WebKit::RemoteImageDecoderAVFProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, uint64_t *a4)
{
  unint64_t v5 = (unint64_t)a3;
  int v8 = a3[25];
  if (v8 == 3713)
  {
    uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v27)
    {
LABEL_46:
      char v53 = *(char **)v5;
      uint64_t v54 = *(void *)(v5 + 8);
      *(void *)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v55 = *(void *)(v5 + 24);
      if (v55 && v54) {
        (*(void (**)(uint64_t, char *))(*(void *)v55 + 16))(v55, v53);
      }
      return 0;
    }
    uint64_t v28 = v26;
    IPC::Decoder::decode<IPC::SharedBufferReference>((IPC::Decoder *)v5, (uint64_t)v63);
    if (!v64)
    {
LABEL_45:
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v9);
      goto LABEL_46;
    }
    unint64_t v10 = *(void *)(v5 + 8);
    uint64_t v9 = *(char **)v5;
    unint64_t v29 = *(void *)(v5 + 16) - *(void *)v5;
    if (v10 > v29)
    {
      uint64_t v30 = &v9[v29];
      *(void *)(v5 + 16) = v30 + 1;
      if (v9)
      {
        unsigned int v31 = *v30;
        if (v31 < 2)
        {
          uint64_t v59 = v28;
          *(void *)uint64_t v60 = *(void *)v63;
          long long v32 = *(_OWORD *)&v63[8];
          *(_OWORD *)&v63[8] = 0u;
          *(_OWORD *)&v60[8] = v32;
          BOOL v61 = v31 != 0;
          char v62 = 1;
          std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v9);
          uint64_t v33 = *a4;
          *a4 = 0;
          *(void *)int64_t v63 = v33;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v63[8], a2);
          CFTypeRef v34 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v34 = &unk_1EE9BE328;
          v34[1] = *(void *)v63;
          uint64_t v35 = *(void *)&v63[8];
          *(_OWORD *)int64_t v63 = 0u;
          v34[2] = v35;
          uint64_t v57 = v34;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63[8]);
          uint64_t v37 = *(IPC::Encoder **)v63;
          *(void *)int64_t v63 = 0;
          if (v37)
          {
            IPC::Encoder::~Encoder(v37, v36);
            WTF::fastFree(v46, v47);
          }
          WebKit::RemoteImageDecoderAVFProxy::setData(a1, v28, (uint64_t)v60, v31 != 0, (uint64_t *)&v57);
          uint64_t v38 = (uint64_t)v57;
          uint64_t v57 = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
          if (!v62) {
            return 1;
          }
          uint64_t v39 = *(unsigned int **)&v60[16];
          *(void *)&v60[16] = 0;
          if (v39) {
            WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v39);
          }
          uint64_t v40 = *(unsigned int **)&v60[8];
          *(void *)&v60[8] = 0;
          if (!v40) {
            return 1;
          }
LABEL_39:
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v40, v17);
          return 1;
        }
        goto LABEL_44;
      }
      unint64_t v48 = v10;
      uint64_t v49 = 0;
LABEL_43:
      unint64_t v10 = 0;
      uint64_t v9 = 0;
      *(void *)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v51 = *(void *)(v5 + 24);
      if (v51)
      {
        if (v48)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v51 + 16))(v51, v49, v48);
          uint64_t v9 = *(char **)v5;
          unint64_t v10 = *(void *)(v5 + 8);
        }
        else
        {
          unint64_t v10 = 0;
          uint64_t v9 = 0;
        }
      }
LABEL_44:
      *(void *)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v52 = *(void *)(v5 + 24);
      if (v52 && v10) {
        (*(void (**)(uint64_t, char *))(*(void *)v52 + 16))(v52, v9);
      }
      goto LABEL_45;
    }
LABEL_42:
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    uint64_t v50 = *(void *)(v5 + 24);
    if (v50)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
        uint64_t v49 = *(char **)v5;
        unint64_t v48 = *(void *)(v5 + 8);
      }
      else
      {
        unint64_t v48 = 0;
        uint64_t v49 = 0;
      }
    }
    goto LABEL_43;
  }
  if (v8 != 3712)
  {
    if (v8 != 3711) {
      return 0;
    }
    IPC::Decoder::decode<IPC::SharedBufferReference>((IPC::Decoder *)a3, (uint64_t)v63);
    if (!v64) {
      goto LABEL_45;
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)&v57);
    if (!v58) {
      goto LABEL_45;
    }
    if (v64)
    {
      uint64_t v59 = *(void *)v63;
      long long v11 = *(_OWORD *)&v63[8];
      *(_OWORD *)&v63[8] = 0u;
      *(_OWORD *)uint64_t v60 = v11;
      *(void *)&v60[16] = v57;
      BOOL v61 = 1;
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v9);
      uint64_t v12 = *a4;
      *a4 = 0;
      *(void *)int64_t v63 = v12;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v63[8], a2);
      char v13 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v13 = &unk_1EE9BE300;
      v13[1] = *(void *)v63;
      uint64_t v14 = *(void *)&v63[8];
      *(_OWORD *)int64_t v63 = 0u;
      v13[2] = v14;
      uint64_t v57 = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63[8]);
      uint64_t v16 = *(IPC::Encoder **)v63;
      *(void *)int64_t v63 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v15);
        WTF::fastFree(v44, v45);
      }
      WebKit::RemoteImageDecoderAVFProxy::createDecoder(a1, (IPC::SharedBufferReference *)&v59, (uint64_t)&v60[16], (uint64_t *)&v57);
      uint64_t v18 = (uint64_t)v57;
      uint64_t v57 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      if (!v61) {
        return 1;
      }
      unsigned int v19 = *(WTF::StringImpl **)&v60[16];
      *(void *)&v60[16] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v43 = *(unsigned int **)&v60[8];
      *(void *)&v60[8] = 0;
      if (v43) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v43);
      }
      uint64_t v40 = *(unsigned int **)v60;
      *(void *)uint64_t v60 = 0;
      if (!v40) {
        return 1;
      }
      goto LABEL_39;
    }
    goto LABEL_41;
  }
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v59);
  unint64_t v5 = v60[8] != 0;
  if (v60[8])
  {
    uint64_t v20 = *a4;
    *a4 = 0;
    *(void *)int64_t v63 = v20;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v63[8], a2);
    uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v21 = &unk_1EE9BE350;
    v21[1] = *(void *)v63;
    uint64_t v22 = *(void *)&v63[8];
    *(void *)int64_t v63 = 0;
    *(void *)&v63[8] = 0;
    v21[2] = v22;
    uint64_t v57 = v21;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63[8]);
    uint64_t v24 = *(IPC::Encoder **)v63;
    *(void *)int64_t v63 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v23);
      WTF::fastFree(v41, v42);
    }
    if (!v60[8])
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    WebKit::RemoteImageDecoderAVFProxy::createFrameImageAtIndex(a1, v59, *(uint64_t *)v60, (uint64_t *)&v57);
    uint64_t v25 = (uint64_t)v57;
    uint64_t v57 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
  return v5;
}

void WebKit::RemoteImageDecoderAVFProxy::~RemoteImageDecoderAVFProxy(WebKit::RemoteImageDecoderAVFProxy *this)
{
  WebKit::RemoteImageDecoderAVFProxy::~RemoteImageDecoderAVFProxy(this);

  WTF::fastFree(v1, v2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  atomic_uchar *v7;

  *(void *)this = &unk_1EE9BE378;
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteImageDecoderAVFProxy *)((char *)this + 40));
  CFTypeRef v3 = *((void *)this + 4);
  if (v3)
  {
    int v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      unint64_t v5 = (unsigned int **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (unsigned int *)-1)
        {
          char v6 = *v5;
          *unint64_t v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6 + 2);
              (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  uint64_t v7 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if ((v2 & 0xFF0000) != 0) {
    return (unsigned __int16)v2 | 0x10000u;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
    return 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEN6WebKit23RemoteAudioSessionProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEN6WebKit23RemoteAudioSessionProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEN6WebKit23RemoteAudioSessionProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer14GetPixelBufferEN6WebKit17RemoteImageBufferES8_FvN7WebCore17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BE228;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer14GetPixelBufferEN6WebKit17RemoteImageBufferES8_FvN7WebCore17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE228;
  CFTypeRef v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer14GetPixelBufferEN6WebKit17RemoteImageBufferES8_FvN7WebCore17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v19);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 120))
  {
    uint64_t v7 = *(void *)(v1 + 56);
    uint64_t v6 = *(void *)(v1 + 64);
    unint64_t v5 = *(void *)(v6 + 8);
    if (v7 != 1)
    {
      BOOL v8 = v5 >= 0x100;
      v5 -= 256;
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v9 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v8 = v5 >= v7 - 1;
        unint64_t v5 = v7 - 1;
        if (!v8) {
          goto LABEL_24;
        }
      }
      uint64_t v10 = v9 + 256;
      unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
      if (v11 < v9 + 256) {
        goto LABEL_25;
      }
      goto LABEL_10;
    }
    if (v5 <= 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      if (v5) {
        return result;
      }
      goto LABEL_17;
    }
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v10 = v9 + 256;
    unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v11 >= v9 + 256)
    {
      unint64_t v5 = 0;
LABEL_10:
      unint64_t v12 = v11 - v10;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v5)
      {
        uint64_t v14 = v9 + 256;
        *(_WORD *)(v14 + v12) = 2872;
        if (v5) {
          return result;
        }
        *(_WORD *)(v14 + v12) = 2870;
      }
    }
  }
LABEL_17:
  unint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v15 = 2872;
  *((void *)v15 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  unsigned int v19 = v15;
  if (*(unsigned char *)(v1 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v1 + 128), v15);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v1 + 40), (uint64_t *)&v19, 0, 0);
  uint64_t result = v19;
  unsigned int v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t IPC::StreamServerConnectionBuffer::acquireAll(uint64_t this, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (this == 1)
  {
    if (v2 >= 0x100)
    {
      uint64_t v3 = *(void *)(a2 + 16);
      return v3 + 256;
    }
  }
  else if (v2 >= 0x100)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    if (!this || v2 - 256 >= this - 1) {
      return v3 + 256;
    }
  }
  __break(1u);
  return this;
}

void IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[48])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v4[0] = WebKit::RemoteImageBuffer::getPixelBufferWithNewMemory;
  v4[1] = 0;
  v3[0] = &v5;
  v3[1] = v4;
  void v3[2] = a3;
  IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*,std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint> &&,WTF<WTF::CompletionHandler> &&)::{lambda(WebKit::RemoteImageBuffer &&)#1}::operator()<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>((uint64_t)v3, a2, (__int16 *)(a2 + 16), (void *)(a2 + 32), (void *)(a2 + 40));
}

WTF::MachSendRight *std::optional<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>>::~optional(WTF::MachSendRight *this)
{
  if (*((unsigned char *)this + 48))
  {
    unint64_t v2 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WTF::MachSendRight::~MachSendRight(this);
  }
  return this;
}

void IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a2, (uint64_t)v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle>(a1, (uint64_t *)a2, (uint64_t)v4);
    if (v5) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *a1 = 0;
    a1[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle>(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  IPC::Decoder::decode<WebCore::PixelBufferFormat>(a2, (uint64_t)v7);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat>(a1, (unint64_t *)a2, a3, (uint64_t)v7);
    if (v9)
    {
      CFTypeRef v6 = cf;
      CFTypeRef cf = 0;
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[48] = 0;
  }
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat>(unsigned char *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IPC::Decoder::decode<WebCore::IntSize>(a2);
  uint64_t v10 = result;
  int v11 = v9;
  if ((_BYTE)v9) {
    return IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint>(a1, a2, a3, a4, &v10);
  }
  *a1 = 0;
  a1[48] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint>(unsigned char *a1, unint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = IPC::Decoder::decode<WebCore::IntSize>(a2);
  int v11 = result;
  int v12 = v10;
  if ((_BYTE)v10) {
    return (unint64_t *)IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>((uint64_t)a1, a3, a4, a5, &v11);
  }
  *a1 = 0;
  a1[48] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (*(unsigned char *)(a2 + 16) && *(unsigned char *)(a3 + 16) && *((unsigned char *)a4 + 8) && *((unsigned char *)a5 + 8)) {
    return std::__optional_destruct_base<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,false>::__optional_destruct_base[abi:sn180100]<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>(a1, a2, a3, a4, a5);
  }
  __break(1u);
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,false>::__optional_destruct_base[abi:sn180100]<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = WTF::MachSendRight::MachSendRight();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_WORD *)(result + 16) = *(_WORD *)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(result + 24) = v10;
  *(void *)(result + 32) = *a4;
  *(void *)(result + 40) = *a5;
  *(unsigned char *)(result + 48) = 1;
  return result;
}

void IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*,std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint> &&,WTF<WTF::CompletionHandler> &&)::{lambda(WebKit::RemoteImageBuffer &&)#1}::operator()<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  CFTypeRef v6 = *(void (**)(void *, uint64_t, __int16 *, void, void, void))v5;
  uint64_t v7 = *(void *)(v5 + 8);
  BOOL v8 = (void *)(**(void **)a1 + (v7 >> 1));
  if (v7) {
    CFTypeRef v6 = *(void (**)(void *, uint64_t, __int16 *, void, void, void))(*v8 + v6);
  }
  __int16 v11 = *a3;
  int v9 = (const void *)*((void *)a3 + 1);
  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
  CFTypeRef cf = v9;
  v6(v8, a2, &v11, *a4, *a5, *(void *)(a1 + 16));
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEN6WebKit17RemoteImageBufferES8_FvON7WebCore18SharedMemoryHandleENS9_17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BE250;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEN6WebKit17RemoteImageBufferES8_FvON7WebCore18SharedMemoryHandleENS9_17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE250;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEN6WebKit17RemoteImageBufferES8_FvON7WebCore18SharedMemoryHandleENS9_17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>(IPC::StreamServerConnection &,IPC::Decoder &,WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*)::{lambda(Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory &&)#1}::operator()<>(a1 + 8);
}

IPC::Encoder **IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>(IPC::StreamServerConnection &,IPC::Decoder &,WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*)::{lambda(Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory &&)#1}::operator()<>(uint64_t a1)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v3, (uint64_t **)(*(void *)(a1 + 16) + 40));
  uint64_t result = (IPC::Encoder **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v3);
  if (*(unsigned char *)(a1 + 8)) {
    return IPC::StreamServerConnection::sendSyncReply<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(*(void *)(a1 + 16), *(void *)a1);
  }
  __break(1u);
  return result;
}

IPC::Encoder **IPC::StreamServerConnection::sendSyncReply<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t result = (IPC::Encoder **)IPC::StreamServerConnectionBuffer::acquireAll(*(void *)(a1 + 56), *(void *)(a1 + 64));
    unint64_t v8 = ((unint64_t)result + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v9 = v8 >= (unint64_t)result;
    unint64_t v10 = v8 - (void)result;
    if (v9)
    {
      if (v10 <= 0xFFFFFFFFFFFFFFFDLL && v10 + 2 <= v7)
      {
        *(_WORD *)((char *)result + v10) = 2872;
        if (v7) {
          return result;
        }
        *(_WORD *)((char *)result + v10) = 2870;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2872;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v14 = v4;
  if (*(unsigned char *)(a1 + 120))
  {
    char v13 = 0;
    uint64_t v14 = 0;
    std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 128), v4);
    std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v13, v12);
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 40), (uint64_t *)&v14, 0, 0);
  }
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v14, v5);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer18GetShareableBitmapEN6WebKit17RemoteImageBufferES8_FvN7WebCore18PreserveResolutionEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BE278;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer18GetShareableBitmapEN6WebKit17RemoteImageBufferES8_FvN7WebCore18PreserveResolutionEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE278;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer18GetShareableBitmapEN6WebKit17RemoteImageBufferES8_FvN7WebCore18PreserveResolutionEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, unint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v11, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v11);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v7 = 2872;
    *((void *)v7 + nw_tcp_options_set_no_delay(options, 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    __int16 v11 = v7;
    IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v7, a2);
    if (*(unsigned char *)(v5 + 120))
    {
      return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v5 + 128), v7);
    }
    else
    {
      IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v11, 0, 0);
      uint64_t result = v11;
      __int16 v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    return (uint64_t *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>(a1, (uint64_t)&v7);
  char v5 = v8;
  if (v8)
  {
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    *(void *)a2 = v6;
    uint64_t result = WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v7, v4);
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer19FilteredNativeImageEN6WebKit17RemoteImageBufferES8_FvNS_3RefIN7WebCore6FilterENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BE2A0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer19FilteredNativeImageEN6WebKit17RemoteImageBufferES8_FvNS_3RefIN7WebCore6FilterENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE2A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer19FilteredNativeImageEN6WebKit17RemoteImageBufferES8_FvNS_3RefIN7WebCore6FilterENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, unint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v11, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v11);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2872;
    *((void *)v7 + nw_tcp_options_set_no_delay(options, 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    __int16 v11 = v7;
    IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v7, a2);
    if (*(unsigned char *)(v5 + 120))
    {
      return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v5 + 128), v7);
    }
    else
    {
      IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v11, 0, 0);
      uint64_t result = v11;
      __int16 v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer16FlushContextSyncEN6WebKit17RemoteImageBufferES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BE2C8;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer16FlushContextSyncEN6WebKit17RemoteImageBufferES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE2C8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer16FlushContextSyncEN6WebKit17RemoteImageBufferES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v19);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 120))
  {
    uint64_t v7 = *(void *)(v1 + 56);
    uint64_t v6 = *(void *)(v1 + 64);
    unint64_t v5 = *(void *)(v6 + 8);
    if (v7 != 1)
    {
      BOOL v8 = v5 >= 0x100;
      v5 -= 256;
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v9 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v8 = v5 >= v7 - 1;
        unint64_t v5 = v7 - 1;
        if (!v8) {
          goto LABEL_24;
        }
      }
      uint64_t v10 = v9 + 256;
      unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
      if (v11 < v9 + 256) {
        goto LABEL_25;
      }
      goto LABEL_10;
    }
    if (v5 <= 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      if (v5) {
        return result;
      }
      goto LABEL_17;
    }
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v10 = v9 + 256;
    unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v11 >= v9 + 256)
    {
      unint64_t v5 = 0;
LABEL_10:
      unint64_t v12 = v11 - v10;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v5)
      {
        uint64_t v14 = v9 + 256;
        *(_WORD *)(v14 + v12) = 2872;
        if (v5) {
          return result;
        }
        *(_WORD *)(v14 + v12) = 2870;
      }
    }
  }
LABEL_17:
  unint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v15 = 2872;
  *((void *)v15 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  unsigned int v19 = v15;
  if (*(unsigned char *)(v1 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v1 + 128), v15);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v1 + 40), (uint64_t *)&v19, 0, 0);
  uint64_t result = v19;
  unsigned int v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5 && (unint64_t v6 = result, result = IPC::Decoder::decode<long long>((IPC::Decoder *)a1), v7))
  {
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = result;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEN6WebKit26RemoteImageDecoderAVFProxyES8_FvRKNS2_21SharedBufferReferenceERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEN6WebKit26RemoteImageDecoderAVFProxyES8_FvRKNS2_21SharedBufferReferenceERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEN6WebKit26RemoteImageDecoderAVFProxyES8_FvRKNS2_21SharedBufferReferenceERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  char v5 = *(IPC::Encoder **)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  char v7 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198AA89A0);
    }
    *char v7 = 1;
    if (!*(unsigned char *)(a2 + 8))
    {
      uint64_t v11 = std::__throw_bad_optional_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSM_bSV_EED1Ev(v11);
    }
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, (uint64_t *)a2);
  }
  else
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198AA89C0);
    }
    *char v7 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSM_bSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSM_bSV_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSM_bSV_EE4callEmSM_bSV_(uint64_t a1, uint64_t a2, int *a3, char a4, uint64_t *a5)
{
  uint64_t v9 = (uint64_t *)(a1 + 8);
  uint64_t v10 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v10, a3);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198AA8B9CLL);
  }
  unsigned char *v11 = a4;
  int v13 = *((unsigned __int8 *)a5 + 16);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (v13)
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198AA8BBCLL);
    }
    *uint64_t v14 = 1;
    if (!*((unsigned char *)a5 + 16))
    {
      uint64_t v21 = std::__throw_bad_optional_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v21);
    }
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, *((unsigned int *)a5 + 3));
    uint64_t v16 = *((unsigned int *)a5 + 3);
    if (v16)
    {
      uint64_t v17 = *a5;
      uint64_t v18 = v17 + 16 * v16;
      do
      {
        IPC::Encoder::operator<<<BOOL>(v10, (char *)v17);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v10, *(double *)(v17 + 8));
        v17 += 16;
      }
      while (v17 != v18);
    }
  }
  else
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198AA8BDCLL);
    }
    *uint64_t v14 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v19, v9, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t WKCertificateInfoCreateWithServerTrust()
{
  return 0;
}

uint64_t WKCertificateInfoCreateWithCertficateChain()
{
  return 0;
}

uint64_t WKCertificateInfoGetCertificateChain()
{
  return 0;
}

uint64_t WKCertificateInfoGetServerTrust()
{
  return 0;
}

void *WKObjCTypeWrapperGetObject(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = [result _apiObject];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2) == 8) {
      return *(void **)([v1 _apiObject] + 8);
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeRef WKURLRequestCreateWithNSURLRequest(void *a1)
{
  if ([a1 HTTPBodyStream]) {
    return 0;
  }
  uint64_t v3 = (const void *)[a1 copy];
  MEMORY[0x199732A50](v6, v3);
  API::URLRequest::create(v6, &v8);
  if (v8) {
    CFTypeRef v2 = v8[1];
  }
  else {
    CFTypeRef v2 = 0;
  }
  uint64_t v8 = 0;
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v6);
  if (v3) {
    CFRelease(v3);
  }
  return v2;
}

void sub_198AA8E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  CFTypeRef v35 = cf;
  CFTypeRef cf = 0;
  if (v35) {
    CFRelease(v35);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  if (v33) {
    CFRelease(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t WKURLRequestCopyNSURLRequest(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  uint64_t v1 = (void *)WebCore::ResourceRequest::nsURLRequest();

  return [v1 copy];
}

uint64_t WKURLResponseCreateWithNSURLResponse(void *a1)
{
  uint64_t v1 = (NSURLResponse *)[a1 copy];
  WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v6, v1);
  API::URLResponse::create((API::URLResponse *)v6, &v8);
  if (v8) {
    uint64_t v3 = *((void *)v8 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v8 = 0;
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v6, v2);
  if (v1) {
    CFRelease(v1);
  }
  return v3;
}

void sub_198AA8F18(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef cf)
{
  CFTypeRef v42 = cf;
  CFTypeRef cf = 0;
  if (v42) {
    CFRelease(v42);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a10, a2);
  if (v40) {
    CFRelease(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t WKURLResponseCopyNSURLResponse(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = (void *)WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(a1 + 16));

  return [v1 copy];
}

void *WebKit::PaymentSetupFeatures::PaymentSetupFeatures(void *a1, uint64_t a2)
{
  CFTypeRef v4 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(a2 + 12)];
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    int v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      [v4 addObject:*(void *)(v8 + 16)];
      v7 -= 8;
    }
    while (v7);
  }
  *a1 = v4;
  if (v4) {
    CFRetain(v4);
  }
  return a1;
}

unint64_t WebKit::PaymentSetupFeatures::operator WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t result = [*a1 count];
  int v5 = result;
  if (result)
  {
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = *a1;
  unint64_t result = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  unint64_t v8 = result;
  if (result)
  {
    LODWORD(v9) = 0;
    uint64_t v10 = *(void *)v18;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        if (WebCore::ApplePaySetupFeature::supportsFeature())
        {
          uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
          WebCore::ApplePaySetupFeature::ApplePaySetupFeature();
          uint64_t v16 = (_DWORD *)v12;
          if (v9 == *(_DWORD *)(a2 + 8))
          {
            int v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v9 + 1, (unint64_t)&v16);
            uint64_t v9 = *(unsigned int *)(a2 + 12);
            uint64_t v6 = *(void *)a2;
            uint64_t v14 = *v13;
            uint64_t *v13 = 0;
            *(void *)(v6 + 8 * v9) = v14;
          }
          else
          {
            uint64_t v16 = 0;
            *(void *)(v6 + 8 * v9) = v12;
          }
          LODWORD(v9) = v9 + 1;
          *(_DWORD *)(a2 + 12) = v9;
          uint64_t v15 = v16;
          uint64_t v16 = 0;
          if (v15)
          {
            if (v15[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[2];
            }
          }
        }
        ++v11;
      }
      while (v8 != v11);
      unint64_t result = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
      unint64_t v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_198AA91F4(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::platformAutomaticReloadPaymentRequest@<X0>(WebKit *this@<X0>, const WebCore::ApplePayAutomaticReloadPaymentRequest *a2@<X1>, void *a3@<X8>)
{
  id v5 = objc_alloc((Class)((uint64_t (*)(WebKit *, const WebCore::ApplePayAutomaticReloadPaymentRequest *))*MEMORY[0x1E4FB6420])(this, a2));
  if (*(void *)this) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v7 = WebCore::platformAutomaticReloadSummaryItem();
  unint64_t v8 = (void *)MEMORY[0x1E4F1CB10];
  if (*((void *)this + 12)) {
    uint64_t v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v9 = &stru_1EEA10550;
  }
  uint64_t v10 = objc_msgSend(v5, "initWithPaymentDescription:automaticReloadBilling:managementURL:", v6, v7, objc_msgSend(v8, "URLWithString:", v9));
  *a3 = v10;
  if (*((void *)this + 11)) {
    [v10 setBillingAgreement:WTF::StringImpl::operator NSString *()];
  }
  uint64_t result = *((void *)this + 13);
  if (result) {
    return objc_msgSend(v10, "setTokenNotificationURL:", objc_msgSend(MEMORY[0x1E4F1CB10], "URLWithString:", WTF::StringImpl::operator NSString *()));
  }
  return result;
}

void sub_198AA9378(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::platformDeferredPaymentRequest@<X0>(WebKit *this@<X0>, const WebCore::ApplePayDeferredPaymentRequest *a2@<X1>, void *a3@<X8>)
{
  id v5 = objc_alloc((Class)((uint64_t (*)(WebKit *, const WebCore::ApplePayDeferredPaymentRequest *))*MEMORY[0x1E4FB63B8])(this, a2));
  if (*((void *)this + 14)) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v7 = WebCore::platformDeferredSummaryItem();
  unint64_t v8 = (void *)MEMORY[0x1E4F1CB10];
  if (*((void *)this + 13)) {
    uint64_t v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v9 = &stru_1EEA10550;
  }
  uint64_t v10 = objc_msgSend(v5, "initWithPaymentDescription:deferredBilling:managementURL:", v6, v7, objc_msgSend(v8, "URLWithString:", v9));
  *a3 = v10;
  if (*(void *)this) {
    [v10 setBillingAgreement:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 12))
  {
    uint64_t v11 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:WTF::StringImpl::operator NSString *()];
    if (v11)
    {
      objc_msgSend(v10, "setFreeCancellationDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSince1970:", *((double *)this + 11)));
      [v10 setFreeCancellationDateTimeZone:v11];
    }
  }
  uint64_t result = *((void *)this + 15);
  if (result) {
    return objc_msgSend(v10, "setTokenNotificationURL:", objc_msgSend(MEMORY[0x1E4F1CB10], "URLWithString:", WTF::StringImpl::operator NSString *()));
  }
  return result;
}

void sub_198AA94F8(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::platformDisbursementRequest(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  id v5 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6380])());
  if (*(void *)(a1 + 16)) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  if (*(void *)(a1 + 8)) {
    uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = &stru_1EEA10550;
  }
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 72, (uint64_t *)&cf);
  CFTypeRef v8 = cf;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 88);
  int v10 = *(unsigned __int8 *)(a1 + 89);
  int v11 = *(unsigned __int8 *)(a1 + 90);
  int v12 = *(unsigned __int8 *)(a1 + 91);
  int v13 = *(unsigned __int8 *)(a1 + 92);
  uint64_t v14 = WebCore::platformDisbursementSummaryItems();
  uint64_t v15 = v9 | 2;
  if (!v10) {
    uint64_t v15 = v9;
  }
  if (v11) {
    v15 |= 4uLL;
  }
  if (v12) {
    v15 |= 8uLL;
  }
  if (v13) {
    uint64_t v16 = v15 | 0x80;
  }
  else {
    uint64_t v16 = v15;
  }
  long long v17 = (void *)[v5 initWithMerchantIdentifier:&stru_1EEA10550 currencyCode:v6 regionCode:v7 supportedNetworks:v8 merchantCapabilities:v16 summaryItems:v14];
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v19 = (PAL *)[MEMORY[0x1E4F1CA48] array];
    if (!*(unsigned char *)(a2 + 16))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return;
    }
    long long v20 = v19;
    uint64_t v21 = *(unsigned int *)(a2 + 12);
    if (v21)
    {
      uint64_t v22 = *(unsigned char **)a2;
      do
      {
        switch(*v22)
        {
          case 0:
            uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldEmailAddress(v19);
            goto LABEL_26;
          case 1:
            uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldName(v19);
            goto LABEL_26;
          case 2:
            uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneticName(v19);
            goto LABEL_26;
          case 3:
            uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneNumber(v19);
            goto LABEL_26;
          case 4:
            uint64_t PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(v19);
LABEL_26:
            long long v19 = (PAL *)[(PAL *)v20 addObject:PassKitCore_PKContactFieldEmailAddress];
            break;
          default:
            break;
        }
        ++v22;
        --v21;
      }
      while (v21);
    }
    CFTypeRef v18 = (CFTypeRef)objc_msgSend(v17, "setRequiredRecipientContactFields:", -[PAL copy](v20, "copy"));
  }
  uint64_t v24 = (void *)[objc_alloc((Class)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E4FB6400])(v18)) initWithDisbursementRequest:v17];
  *a3 = v24;
  [v24 setOriginatingURL:WTF::URL::operator NSURL *()];
  [v24 setAPIType:2];
  if (v17) {
    CFRelease(v17);
  }
}

void sub_198AA9754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  *a2 = v4;
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6)
  {
    uint64_t v7 = (void *)v4;
    CFTypeRef v8 = *(WTF **)a1;
    uint64_t v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      CFTypeRef v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_198AA9854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  *CFTypeRef v10 = 0;
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>>::destruct(_DWORD *result, _DWORD **a2)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v3 = (_DWORD **)result;
    do
    {
      uint64_t result = *v3;
      *uint64_t v3 = 0;
      if (result)
      {
        if (result[2] == 1) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[2];
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void WebKit::RemoteMediaRecorderManager::didReceiveMessage(WebKit::RemoteMediaRecorderManager *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1205)
  {
    uint64_t v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (v23)
    {
      WebKit::RemoteMediaRecorderManager::releaseRecorder(this, v22);
    }
    else
    {
      uint64_t v24 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v25 = *((void *)a3 + 3);
      if (v25 && v24)
      {
        uint64_t v26 = *(void (**)(void))(*(void *)v25 + 16);
        v26();
      }
    }
    return;
  }
  if (v5 != 1204) {
    return;
  }
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
  if (!v8)
  {
LABEL_38:
    uint64_t v36 = *(void *)a3;
    uint64_t v37 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v38 = *((void *)a3 + 3);
    if (v38 && v37) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
    }
    return;
  }
  unint64_t v9 = *((void *)a3 + 1);
  uint64_t v10 = *(void *)a3;
  unint64_t v11 = *((void *)a3 + 2) - *(void *)a3;
  if (v9 <= v11)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v29 = *((void *)a3 + 3);
    if (v29)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *(void *)a3;
        unint64_t v27 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
LABEL_29:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v30 = *((void *)a3 + 3);
    if (v30)
    {
      if (!v27)
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
        goto LABEL_33;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
      goto LABEL_32;
    }
LABEL_33:
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v31 = *((void *)a3 + 3);
    if (v31 && v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v10);
    }
    goto LABEL_38;
  }
  int v12 = (unsigned __int8 *)(v10 + v11);
  *((void *)a3 + 2) = v12 + 1;
  if (!v10)
  {
    unint64_t v27 = v9;
    uint64_t v28 = 0;
    goto LABEL_29;
  }
  unsigned int v13 = *v12;
  if (v13 >= 2) {
    goto LABEL_33;
  }
  if (v9 <= (unint64_t)&v12[-v10 + 1])
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v34 = *((void *)a3 + 3);
    if (v34)
    {
      (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
      unint64_t v32 = 0;
      uint64_t v39 = *(void *)a3;
      uint64_t v40 = *((void *)a3 + 1);
      uint64_t v41 = *((void *)a3 + 3);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v33 = 0;
      if (v41)
      {
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39);
          uint64_t v33 = *(void *)a3;
          unint64_t v32 = *((void *)a3 + 1);
        }
      }
    }
    goto LABEL_37;
  }
  *((void *)a3 + 2) = v12 + 2;
  unsigned int v14 = v12[1];
  if (v14 >= 2)
  {
    unint64_t v32 = v9;
    uint64_t v33 = v10;
LABEL_37:
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v35 = *((void *)a3 + 3);
    if (v35 && v32) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
    }
    goto LABEL_38;
  }
  uint64_t v15 = v7;
  IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::decode(a3, (uint64_t)&v48);
  if (!v50)
  {
LABEL_32:
    uint64_t v10 = *(void *)a3;
    unint64_t v9 = *((void *)a3 + 1);
    goto LABEL_33;
  }
  v42[1] = v15;
  BOOL v43 = v13 != 0;
  BOOL v44 = v14 != 0;
  uint64_t v16 = v48;
  uint64_t v45 = v48;
  *(_OWORD *)char v46 = *(_OWORD *)v49;
  *(void *)&v46[13] = *(void *)&v49[13];
  char v47 = 1;
  uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
  if (!(_BYTE)v18) {
    goto LABEL_15;
  }
  unint64_t v48 = (WTF::StringImpl *)v17;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v49, a2);
  long long v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v19 = &unk_1EE9BE3E8;
  v19[1] = v48;
  uint64_t v20 = *(void *)v49;
  *(void *)uint64_t v49 = 0;
  v19[2] = v20;
  v42[0] = (uint64_t)v19;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v49);
  WebKit::RemoteMediaRecorderManager::createRecorder(this, v15, v13 != 0, v14 != 0, (uint64_t)&v45, v42);
  uint64_t v21 = v42[0];
  v42[0] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  if (v47)
  {
    uint64_t v16 = v45;
LABEL_15:
    uint64_t v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v18);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
}

void WebKit::RemoteMediaRecorder::didReceiveMessage(WebKit::RemoteMediaRecorder *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4B6:
      IPC::Decoder::decode<WTF::MediaTime>(a3, (uint64_t)&v39);
      if (!BYTE8(v40)) {
        goto LABEL_51;
      }
      unint64_t v6 = *((void *)a3 + 1);
      uint64_t v7 = *(void *)a3;
      unint64_t v8 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v6 < v8 || v6 - v8 <= 7)
      {
        unint64_t v30 = 0;
        uint64_t v29 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v34 = *((void *)a3 + 3);
        if (v34)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v7, v6);
            uint64_t v29 = *(void *)a3;
            unint64_t v30 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v30 = 0;
            uint64_t v29 = 0;
          }
        }
LABEL_50:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v28 = *((void *)a3 + 3);
        if (v28) {
          goto LABEL_57;
        }
        goto LABEL_51;
      }
      uint64_t v10 = (NSObject **)(v7 + v8);
      *((void *)a3 + 2) = v10 + 1;
      if (!v7)
      {
        unint64_t v30 = v6;
        uint64_t v29 = 0;
        goto LABEL_50;
      }
      WebKit::RemoteMediaRecorder::audioSamplesAvailable((uint64_t)this, v39, v40, *v10);
      return;
    case 0x4B7:
      IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v48);
      if (v50)
      {
        IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a3, (uint64_t)&v51);
        if (v57)
        {
          if (!v50)
          {
            __break(1u);
LABEL_57:
            if (v30) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v29);
            }
LABEL_51:
            uint64_t v35 = *(void *)a3;
            uint64_t v36 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            uint64_t v37 = *((void *)a3 + 3);
            if (v37) {
              BOOL v38 = v36 == 0;
            }
            else {
              BOOL v38 = 1;
            }
            if (!v38) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
            }
            return;
          }
          WTF::MachSendRight::MachSendRight();
          long long v40 = v49;
          uint64_t v41 = MEMORY[0x1E4FB6B98] + 16;
          long long v44 = v54;
          long long v45 = v55;
          int v46 = v56;
          long long v43 = v53;
          long long v42 = v52;
          char v47 = 1;
          if (v57) {
            WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v51);
          }
        }
        else
        {
          LOBYTE(v39) = 0;
          char v47 = 0;
        }
        if (v50) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v48);
        }
      }
      else
      {
        LOBYTE(v39) = 0;
        char v47 = 0;
      }
      if (v47 {
        || (uint64_t v31 = *(void *)a3,
      }
            uint64_t v32 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0,
            (uint64_t v33 = *((void *)a3 + 3)) != 0)
        && v32
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31), v47))
      {
        WebKit::RemoteMediaRecorder::audioSamplesStorageChanged((uint64_t)this, (uint64_t)&v39, (uint64_t)&v41);
        if (v47)
        {
          WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v41);
LABEL_43:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v39);
        }
      }
      return;
    case 0x4B8:
      uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v16)
      {
        uint64_t v39 = v15;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v40, a2);
        uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v17 = &unk_1EE9BE430;
        v17[1] = v39;
        uint64_t v18 = v40;
        *(void *)&long long v40 = 0;
        _OWORD v17[2] = v18;
        uint64_t v51 = v17;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v40);
        WebKit::RemoteMediaRecorder::fetchData((uint64_t)this, (uint64_t *)&v51);
        uint64_t v19 = (uint64_t)v51;
        uint64_t v51 = 0;
        if (v19) {
          goto LABEL_14;
        }
      }
      return;
    case 0x4B9:
      uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v21) {
        return;
      }
      uint64_t v39 = v20;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v40, a2);
      uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v22 = &unk_1EE9BE480;
      v22[1] = v39;
      uint64_t v23 = v40;
      *(void *)&long long v40 = 0;
      v22[2] = v23;
      uint64_t v51 = v22;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v40);
      WebKit::RemoteMediaRecorder::pause((uint64_t)this, (uint64_t *)&v51);
      goto LABEL_19;
    case 0x4BA:
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v12) {
        return;
      }
      uint64_t v39 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v40, a2);
      unsigned int v13 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v13 = &unk_1EE9BE4A8;
      v13[1] = v39;
      uint64_t v14 = v40;
      *(void *)&long long v40 = 0;
      v13[2] = v14;
      uint64_t v51 = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v40);
      WebKit::RemoteMediaRecorder::resume((uint64_t)this, (uint64_t *)&v51);
      goto LABEL_19;
    case 0x4BB:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v39);
      if (!BYTE8(v40)) {
        return;
      }
      WebKit::RemoteMediaRecorder::setSharedVideoFrameMemory((uint64_t)this);
      if (!BYTE8(v40)) {
        return;
      }
      goto LABEL_43;
    case 0x4BC:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v39);
      if (!(_BYTE)v40) {
        return;
      }
      WebKit::RemoteMediaRecorder::setSharedVideoFrameSemaphore((uint64_t)this, (IPC::Semaphore *)&v39);
      if (!(_BYTE)v40) {
        return;
      }
      IPC::Semaphore::destroy((IPC::Semaphore *)&v39);
      goto LABEL_43;
    case 0x4BD:
      uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v25) {
        return;
      }
      uint64_t v39 = v24;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v40, a2);
      uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v26 = &unk_1EE9BE458;
      v26[1] = v39;
      uint64_t v27 = v40;
      *(void *)&long long v40 = 0;
      v26[2] = v27;
      uint64_t v51 = v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v40);
      WebKit::RemoteMediaRecorder::stopRecording((uint64_t)this, (uint64_t *)&v51);
LABEL_19:
      uint64_t v19 = (uint64_t)v51;
      uint64_t v51 = 0;
      if (v19) {
LABEL_14:
      }
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      return;
    case 0x4BE:
      IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>(a3, (uint64_t)&v39);
      if ((_BYTE)v43)
      {
        WebKit::RemoteMediaRecorder::videoFrameAvailable((uint64_t)this, (uint64_t)&v39);
        if ((_BYTE)v43)
        {
          if (DWORD2(v42) != -1) {
            ((void (*)(void **, uint64_t *))off_1EE9BE400[DWORD2(v42)])(&v51, &v41);
          }
        }
      }
      return;
    default:
      return;
  }
}

WTF::StringImpl *WebKit::RemoteMediaSessionHelper::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4D8:
      unint64_t v5 = *((void *)a3 + 1);
      uint64_t v6 = *(void *)a3;
      unint64_t v7 = *((void *)a3 + 2) - *(void *)a3;
      if (v5 <= v7) {
        goto LABEL_61;
      }
      unint64_t v8 = (unsigned __int8 *)(v6 + v7);
      *((void *)a3 + 2) = v8 + 1;
      if (!v6) {
        goto LABEL_93;
      }
      unsigned int v9 = *v8;
      if (v9 >= 2) {
        goto LABEL_63;
      }
      return (WTF::StringImpl *)MEMORY[0x1F416F1E0](this, v9 != 0);
    case 0x4D9:
      unint64_t v5 = *((void *)a3 + 1);
      uint64_t v6 = *(void *)a3;
      unint64_t v22 = *((void *)a3 + 2) - *(void *)a3;
      if (v5 <= v22) {
        goto LABEL_61;
      }
      uint64_t v23 = (unsigned __int8 *)(v6 + v22);
      *((void *)a3 + 2) = v23 + 1;
      if (!v6) {
        goto LABEL_93;
      }
      unsigned int v24 = *v23;
      if (v24 >= 2) {
        goto LABEL_63;
      }
      return (WTF::StringImpl *)MEMORY[0x1F416F230](this, v24 != 0);
    case 0x4DA:
      unint64_t v10 = *((void *)a3 + 1);
      uint64_t v11 = *(void *)a3;
      unint64_t v12 = *((void *)a3 + 2) - *(void *)a3;
      if (v10 <= v12)
      {
        unint64_t v40 = 0;
        uint64_t v41 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v42 = *((void *)a3 + 3);
        if (v42)
        {
          if (v10)
          {
            (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
            uint64_t v41 = *(void *)a3;
            unint64_t v40 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v40 = 0;
            uint64_t v41 = 0;
          }
        }
        goto LABEL_72;
      }
      unsigned int v13 = (unsigned __int8 *)(v11 + v12);
      *((void *)a3 + 2) = v13 + 1;
      if (!v11)
      {
        unint64_t v40 = v10;
        uint64_t v41 = 0;
LABEL_72:
        unint64_t v10 = 0;
        uint64_t v11 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v43 = *((void *)a3 + 3);
        if (v43)
        {
          if (v40)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v43 + 16))(v43, v41, v40);
            uint64_t v11 = *(void *)a3;
            unint64_t v10 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v10 = 0;
            uint64_t v11 = 0;
          }
        }
        goto LABEL_73;
      }
      unsigned int v14 = *v13;
      if (v14 >= 2)
      {
LABEL_73:
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v44 = *((void *)a3 + 3);
        if (v44)
        {
          if (v10)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v11);
            uint64_t v47 = *((void *)a3 + 3);
            uint64_t v48 = *(void *)a3;
            uint64_t v49 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
            if (v47)
            {
              if (v49) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v48);
              }
            }
          }
        }
        BOOL v50 = 0;
        char v56 = 0;
        goto LABEL_75;
      }
      IPC::Decoder::decode<WebKit::MediaPlaybackTargetContextSerialized>(a3, (uint64_t)v57);
      BOOL v16 = v61;
      if (v61)
      {
        BOOL v16 = v14 != 0;
        char v52 = v57[8];
        uint64_t v51 = &unk_1EE9B5420;
        long long v53 = v58;
        int v54 = v59;
        long long v17 = v60;
        char v58 = 0;
        long long v60 = 0uLL;
        *(_OWORD *)long long v55 = v17;
        char v18 = 1;
      }
      else
      {
        char v18 = 0;
      }
      BOOL v50 = v16;
      char v56 = v18;
      std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v15);
      if (v56) {
        goto LABEL_47;
      }
LABEL_75:
      uint64_t v45 = *(void *)a3;
      uint64_t v46 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      this = (WTF::StringImpl *)*((void *)a3 + 3);
      if (!this) {
        return this;
      }
      if (!v46) {
        return this;
      }
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)this + 16))(this, v45);
      if (!v56) {
        return this;
      }
LABEL_47:
      this = (WTF::StringImpl *)WebKit::RemoteMediaSessionHelper::activeVideoRouteDidChange((int)v4, v50, (WebKit::MediaPlaybackTargetContextSerialized *)&v51);
      if (v56)
      {
        uint64_t v29 = v55[1];
        v55[1] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v28);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
        unint64_t v30 = v55[0];
        v55[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy(v30, v28);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
        }
        this = v53;
        long long v53 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v28);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
      return this;
    case 0x4DB:
      return (WTF::StringImpl *)MEMORY[0x1F416F1F0](this, a2);
    case 0x4DC:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a3);
      if ((unsigned __int16)this >= 0x100u)
      {
        return (WTF::StringImpl *)MEMORY[0x1F416F200](v4, this != 0);
      }
      return this;
    case 0x4DD:
      return (WTF::StringImpl *)MEMORY[0x1F416F208](this, a2);
    case 0x4DE:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a3);
      if ((unsigned __int16)this >= 0x100u)
      {
        return (WTF::StringImpl *)MEMORY[0x1F416F218](v4, this != 0);
      }
      return this;
    case 0x4DF:
      unint64_t v5 = *((void *)a3 + 1);
      uint64_t v6 = *(void *)a3;
      unint64_t v19 = *((void *)a3 + 2) - *(void *)a3;
      if (v5 <= v19) {
        goto LABEL_61;
      }
      uint64_t v20 = (unsigned __int8 *)(v6 + v19);
      *((void *)a3 + 2) = v20 + 1;
      if (!v6) {
        goto LABEL_93;
      }
      unsigned int v21 = *v20;
      if (v21 >= 2) {
        goto LABEL_63;
      }
      return (WTF::StringImpl *)MEMORY[0x1F416F220](this, v21 != 0);
    case 0x4E0:
      unint64_t v5 = *((void *)a3 + 1);
      uint64_t v6 = *(void *)a3;
      unint64_t v25 = *((void *)a3 + 2) - *(void *)a3;
      if (v5 <= v25)
      {
LABEL_61:
        unint64_t v31 = 0;
        uint64_t v32 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v33 = *((void *)a3 + 3);
        if (v33)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
            uint64_t v32 = *(void *)a3;
            unint64_t v31 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v31 = 0;
            uint64_t v32 = 0;
          }
        }
      }
      else
      {
        uint64_t v26 = (unsigned __int8 *)(v6 + v25);
        *((void *)a3 + 2) = v26 + 1;
        if (v6)
        {
          unsigned int v27 = *v26;
          if (v27 < 2)
          {
            return (WTF::StringImpl *)MEMORY[0x1F416F228](this, v27 != 0);
          }
LABEL_63:
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          uint64_t v35 = *((void *)a3 + 3);
          if (v35 && v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v6);
          }
          uint64_t v36 = *(void *)a3;
          uint64_t v37 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
          this = (WTF::StringImpl *)*((void *)a3 + 3);
          if (this)
          {
            if (v37)
            {
              (*(void (**)(WTF::StringImpl *, uint64_t))(*(void *)this + 16))(this, v36);
              uint64_t v38 = *((void *)a3 + 1);
              this = (WTF::StringImpl *)*((void *)a3 + 3);
              *(void *)a3 = 0;
              *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
              if (this)
              {
                if (v38)
                {
                  uint64_t v39 = *(uint64_t (**)(void))(*(void *)this + 16);
                  return (WTF::StringImpl *)v39();
                }
              }
            }
          }
          return this;
        }
LABEL_93:
        unint64_t v31 = v5;
        uint64_t v32 = v6;
      }
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v34 = *((void *)a3 + 3);
      if (v34)
      {
        if (v31)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
          uint64_t v6 = *(void *)a3;
          unint64_t v5 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
        }
      }
      goto LABEL_63;
    default:
      return this;
  }
}

WTF::StringImpl *non-virtual thunk to'WebKit::RemoteMediaSessionHelper::didReceiveMessage(WebKit::RemoteMediaSessionHelper *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaSessionHelper::didReceiveMessage((WebKit::RemoteMediaSessionHelper *)((char *)this - 56), a2, a3);
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1237:
      this = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((this & 0xFF00000000) != 0)
      {
        *(_DWORD *)(v3 + 56) = this;
        *(unsigned char *)(v3 + 60) = 1;
        unint64_t v5 = *(uint64_t (**)(void))(*(void *)WebCore::MediaSessionHelper::sharedHelper((WebCore::MediaSessionHelper *)this)
                                 + 16);
        return v5();
      }
      break;
    case 1239:
      return (uint64_t)WebKit::RemoteMediaSessionHelperProxy::stopMonitoringWirelessRoutes((WebCore::MediaSessionHelper *)this);
    case 1238:
      return (uint64_t)WebKit::RemoteMediaSessionHelperProxy::startMonitoringWirelessRoutes((WebCore::MediaSessionHelper *)this);
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage(WebKit::RemoteMediaSessionHelperProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage((uint64_t)this - 16, a2, a3);
}

uint64_t IPC::handleMessageAsync<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v6)
  {
    uint64_t v9 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    unint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unint64_t v7 = &unk_1EE9BE4D0;
    v7[1] = v9;
    unint64_t v8 = v10;
    unint64_t v10 = 0;
    uint64_t v11 = v7;
    _DWORD v7[2] = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebKit::RemoteRenderingBackend::getImageBufferResourceLimitsForTesting(a3, (uint64_t *)&v11);
    uint64_t result = (uint64_t)v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void IPC::handleMessage<Messages::RemoteRenderingBackend::CacheFontCustomPlatformData,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WebCore::FontCustomPlatformSerializedData &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::decode(a1, (uint64_t)v11);
  if (v12) {
    goto LABEL_2;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t v7 = *((void *)a1 + 3);
  if (!v7)
  {
    uint64_t v6 = 0;
LABEL_12:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  if (!v6) {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
  if (v12)
  {
LABEL_2:
    uint64_t v9 = (WTF *)v11[0];
    unint64_t v10 = (WTF::StringImpl *)v11[2];
    WebKit::RemoteRenderingBackend::cacheFontCustomPlatformData(a2);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v4);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v9) {
      WTF::fastFree(v9, v4);
    }
    return;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *((void *)a1 + 3);
LABEL_13:
  *(void *)a1 = 0;
  *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v7 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v8);
  }
}

uint64_t *IPC::handleMessage<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>> &&)>(IPC::Decoder *a1, atomic_uchar *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>>(a1, (uint64_t)&v5);
  if (v6)
  {
    uint64_t result = (uint64_t *)WebKit::RemoteRenderingBackend::cacheFilter(a2, &v5);
    if (v6) {
      return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v5, v4);
    }
  }
  return result;
}

WTF *IPC::handleMessage<Messages::RemoteRenderingBackend::CreateRemoteBarcodeDetector,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ShapeDetection::BarcodeDetectorOptions const&)>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::ArgumentCoder<WebCore::ShapeDetection::BarcodeDetectorOptions,void>::decode(a1, (uint64_t)v18);
    if (v19)
    {
      uint64_t v15 = (WTF *)v18[0];
      uint64_t v16 = v18[1];
      char v17 = 1;
      uint64_t result = (WTF *)WebKit::RemoteRenderingBackend::createRemoteBarcodeDetector(a2, v6, (uint64_t)&v15);
      if (v17)
      {
        uint64_t result = v15;
        if (v15)
        {
          uint64_t v15 = 0;
          LODWORD(v16) = 0;
          return (WTF *)WTF::fastFree(result, v8);
        }
      }
      return result;
    }
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  uint64_t v12 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (WTF *)a1[3];
  if (result) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    unsigned int v14 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF *)v14();
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v6)
  {
    uint64_t v9 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9BE4F8;
    v7[1] = v9;
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    uint64_t v11 = v7;
    _DWORD v7[2] = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebKit::RemoteRenderingBackend::getRemoteBarcodeDetectorSupportedFormats(a3, (uint64_t)&v11);
    uint64_t result = (uint64_t)v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::handleMessageSynchronous<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync,WebKit::RemoteRenderingBackend,WebKit::RemoteRenderingBackend,void ()(WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = (unsigned int *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v8 = v7;
  if (v7)
  {
    uint64_t v9 = result;
    uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v17, a2);
    if (v19)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, (uint64_t **)(a1 + 40));
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v20);
      atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
      uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v10 = &unk_1EE9BE520;
      *(void *)(v10 + 8) = v9;
      *(unsigned char *)(v10 + 16) = v8;
      *(_DWORD *)(v10 + 17) = *(_DWORD *)v15;
      *(_DWORD *)(v10 + 20) = *(_DWORD *)&v15[3];
      *(void *)(v10 + 24) = a1;
      uint64_t v11 = v17;
      uint64_t v16 = (unsigned int *)v10;
      char v17 = 0;
      v20[0] = v11;
      uint64_t v12 = v18;
      char v18 = 0;
      v20[1] = v12;
      WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplaySync(a3, (uint64_t)v20, (uint64_t *)&v16);
      WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v20, v13);
      uint64_t result = v16;
      uint64_t v16 = 0;
      if (result) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      if (v19) {
        return WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v17, v14);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackendProxy::didReceiveSyncMessage()
{
  return 0;
}

void WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper(WebKit::RemoteMediaSessionHelper *this, void *a2)
{
  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper(this, a2);

  WTF::fastFree(v2, v3);
}

{
  atomic_uchar *v3;
  void *v4;
  _DWORD *v5;
  unsigned int **v6;

  uint64_t v3 = (atomic_uchar *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  *((void *)this + 7) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 8, a2);
  *(void *)this = &unk_1EE9BE3B0;
  char v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  char v6 = (unsigned int **)*((void *)this + 2);
  if (v6) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, v4);
  }
}

atomic_uchar *WebKit::RemoteMediaSessionHelper::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

atomic_uchar *WebKit::RemoteMediaSessionHelper::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t WebKit::RemoteMediaSessionHelper::controlBlock(WebKit::RemoteMediaSessionHelper *this)
{
  return *((void *)this + 1);
}

void non-virtual thunk to'WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper(WebKit::RemoteMediaSessionHelper *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 56), a2);

  WTF::fastFree(v2, v3);
}

{
  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 72), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 72), a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteMediaSessionHelper::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(this - 8));
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteMediaSessionHelper::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(this - 8), a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteMediaSessionHelper::controlBlock(WebKit::RemoteMediaSessionHelper *this)
{
  return *((void *)this - 8);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaRecorderManager14CreateRecorderEN6WebKit26RemoteMediaRecorderManagerES8_FvNS_23ObjectIdentifierGenericINS7_27MediaRecorderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbRKN7WebCore27MediaRecorderPrivateOptionsEONS_17CompletionHandlerIFvONSt3__18optionalINSF_13ExceptionDataEEEONS_6StringEjjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_jjEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE3E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaRecorderManager14CreateRecorderEN6WebKit26RemoteMediaRecorderManagerES8_FvNS_23ObjectIdentifierGenericINS7_27MediaRecorderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbRKN7WebCore27MediaRecorderPrivateOptionsEONS_17CompletionHandlerIFvONSt3__18optionalINSF_13ExceptionDataEEEONS_6StringEjjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_jjEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE3E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaRecorderManager14CreateRecorderEN6WebKit26RemoteMediaRecorderManagerES8_FvNS_23ObjectIdentifierGenericINS7_27MediaRecorderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbRKN7WebCore27MediaRecorderPrivateOptionsEONS_17CompletionHandlerIFvONSt3__18optionalINSF_13ExceptionDataEEEONS_6StringEjjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_jjEE4callESO_SQ_jj(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 3164;
  *((void *)v11 + nw_tcp_options_set_no_delay(options, 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v20 = v11;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  uint64_t v12 = (_DWORD *)IPC::Encoder::grow(v11, 4uLL, 4);
  if (v13 <= 3 || (_DWORD *v12 = a4, v14 = (_DWORD *)IPC::Encoder::grow(v11, 4uLL, 4), v15 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x198AAB684);
  }
  *unsigned int v14 = a5;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198AAB748);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198AAB768);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEE4callESD_d(uint64_t a1, const void *a2, size_t a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 3165;
  *((void *)v9 + nw_tcp_options_set_no_delay(options, 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unsigned int v14 = v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  unsigned int v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder13StopRecordingEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder13StopRecordingEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder13StopRecordingEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3168;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder5PauseEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder5PauseEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder5PauseEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3166;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder6ResumeEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE4A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder6ResumeEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE4A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder6ResumeEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 3167;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v23 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v23;
        uint64_t v11 = *v23;
        unint64_t v10 = v23[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v22 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v22;
        uint64_t v2 = *v22;
        unint64_t v1 = v22[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    int v7 = 256;
    goto LABEL_5;
  }
LABEL_11:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  if (v6)
  {
    unsigned int v21 = a1;
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
    }
    LODWORD(v6) = 0;
    int v7 = 0;
    a1 = v21;
  }
  else
  {
    int v7 = 0;
  }
LABEL_5:
  unsigned int v8 = v7 | v6;
  LODWORD(v6) = 256;
  if (v8 <= 0xFF)
  {
    uint64_t v14 = *a1;
    uint64_t v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6)
    {
      unsigned int v19 = v8;
      uint64_t v20 = a1;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v14);
        LODWORD(v6) = 0;
        uint64_t v16 = *v20;
        uint64_t v17 = v20[1];
        uint64_t v18 = v20[3];
        *uint64_t v20 = 0;
        v20[1] = 0;
        if (v18)
        {
          unsigned int v8 = v19;
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
            unsigned int v8 = v19;
            LODWORD(v6) = 0;
          }
        }
        else
        {
          unsigned int v8 = v19;
        }
      }
      else
      {
        LODWORD(v6) = 0;
      }
    }
  }
  if (v8 <= 0x100) {
    LOBYTE(v8) = 0;
  }
  return v6 | v8 & 1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend38GetImageBufferResourceLimitsForTestingEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvN7WebCore25ImageBufferResourceLimitsEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE4D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend38GetImageBufferResourceLimitsForTestingEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvN7WebCore25ImageBufferResourceLimitsEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE4D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend38GetImageBufferResourceLimitsForTestingEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvN7WebCore25ImageBufferResourceLimitsEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3184;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = *(void *)v3;
  uint64_t result = WebCore::Region::Region();
  __int16 v6 = *(_WORD *)(v3 + 32);
  *(unsigned char *)(v4 + 34) = *(unsigned char *)(v3 + 34);
  *(_WORD *)(v4 + 32) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x198AAC200);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 12);
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3 + 8;
    uint64_t v5 = a1 + 8;
    do
    {
      *(void *)(v4 - 8) = *(void *)(v5 - 8);
      WebCore::Region::Region();
      __int16 v6 = *(_WORD *)(v5 + 24);
      *(unsigned char *)(v4 + 26) = *(unsigned char *)(v5 + 26);
      *(_WORD *)(v4 + 24) = v6;
      WebCore::Region::~Region((WebCore::Region *)v5);
      v4 += 40;
      uint64_t v7 = v5 + 32;
      v5 += 40;
    }
    while (v7 != a2);
  }
}

void WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  if (*(unsigned int *)(a1 + 8) > this)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      uint64_t v5 = 40 * v4 - 40 * this;
      __int16 v6 = (WebCore::Region *)(*(void *)a1 + 40 * this + 8);
      do
      {
        WebCore::Region::~Region(v6);
        __int16 v6 = (WebCore::Region *)(v7 + 40);
        v5 -= 40;
      }
      while (v5);
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    unint64_t v8 = *(WTF **)a1;
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        return;
      }
      unint64_t v9 = (WTF *)(40 * this);
      uint64_t v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x28;
      *(void *)a1 = v10;
      if ((WTF *)v10 != v8) {
        WTF::VectorMover<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>::move((uint64_t)v8, (uint64_t)v8 + 40 * v4, v10);
      }
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)this);
    }
  }
}

__n128 WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (__n128 *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  __n128 result = *v3;
  *(__n128 *)(*(void *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      __n128 result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v4 && (WTF *)result != v5)
      {
        uint64_t v6 = 16 * v4;
        uint64_t v7 = v5;
        do
        {
          long long v8 = *(_OWORD *)v7;
          uint64_t v7 = (WTF *)((char *)v7 + 16);
          *(_OWORD *)__n128 result = v8;
          result += 16;
          v6 -= 16;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend40GetRemoteBarcodeDetectorSupportedFormatsEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvONS_6VectorIN7WebCore14ShapeDetection13BarcodeFormatELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE4F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend40GetRemoteBarcodeDetectorSupportedFormatsEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvONS_6VectorIN7WebCore14ShapeDetection13BarcodeFormatELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE4F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend40GetRemoteBarcodeDetectorSupportedFormatsEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvONS_6VectorIN7WebCore14ShapeDetection13BarcodeFormatELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3185;
  *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v15 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(char **)a2;
    while (1)
    {
      char v8 = *v7;
      unint64_t v9 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
      if (!v10) {
        break;
      }
      *unint64_t v9 = v8;
      ++v7;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v15, 0, 0);
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      return WTF::fastFree(v13, v14);
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ShapeDetection::FaceDetectorOptions>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5)
  {
    uint64_t v6 = v4;
    unint64_t result = IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::decode(a2);
    if ((result & 0xFF00000000) != 0)
    {
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v10 = a2[3];
    if (v10 && v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v13();
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEN6WebKit22RemoteRenderingBackendES8_FvNS_6VectorINS7_46ImageBufferSetPrepareBufferForDisplayInputDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS7_29SwapBuffersDisplayRequirementELm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BE520;
  int v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEN6WebKit22RemoteRenderingBackendES8_FvNS_6VectorINS7_46ImageBufferSetPrepareBufferForDisplayInputDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS7_29SwapBuffersDisplayRequirementELm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE520;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEN6WebKit22RemoteRenderingBackendES8_FvNS_6VectorINS7_46ImageBufferSetPrepareBufferForDisplayInputDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS7_29SwapBuffersDisplayRequirementELm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_28;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 64);
  unint64_t v8 = *(void *)(v6 + 8);
  if (v7 != 1)
  {
    BOOL v9 = v8 >= 0x100;
    unint64_t v10 = v8 - 256;
    if (!v9) {
      goto LABEL_28;
    }
    uint64_t v11 = *(void *)(v6 + 16);
    if (v7)
    {
      BOOL v9 = v10 >= v7 - 1;
      unint64_t v10 = v7 - 1;
      if (!v9) {
        goto LABEL_28;
      }
    }
    goto LABEL_9;
  }
  if (v8 >= 0x100)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v6 + 16);
LABEL_9:
    BOOL v12 = (IPC::Encoder *)(v11 + 256);
    unsigned int v24 = v12;
    unint64_t v25 = v10;
    unint64_t v26 = 0;
    uint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_30;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10) {
      goto LABEL_29;
    }
    *(_WORD *)uint64_t v13 = 2872;
    unint64_t v26 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v24, a2);
    if (!v25)
    {
      *(_WORD *)((char *)v12 + v14) = 2870;
      goto LABEL_16;
    }
    return result;
  }
LABEL_28:
  while (1)
  {
    __break(1u);
LABEL_29:
    unint64_t v25 = 0;
LABEL_30:
    unint64_t result = (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v24, a2);
    if (v25) {
      return result;
    }
LABEL_16:
    uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v17 = 2872;
    *((void *)v17 + nw_tcp_options_set_no_delay(options, 1) = v3;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    unsigned int v24 = v17;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v17, *(unsigned int *)(a2 + 12));
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    if (!v3)
    {
LABEL_20:
      if (*(unsigned char *)(v2 + 120)) {
        return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v2 + 128), v17);
      }
      IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v24, 0, 0);
      unint64_t result = v24;
      unsigned int v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v21);
        return (IPC::Encoder *)WTF::fastFree(v22, v23);
      }
      return result;
    }
    a2 = *(void *)a2;
    while (1)
    {
      char v18 = *(unsigned char *)a2;
      unsigned int v19 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
      if (!v20) {
        break;
      }
      *unsigned int v19 = v18;
      ++a2;
      if (!--v3) {
        goto LABEL_20;
      }
    }
    __break(0xC471u);
  }
}

uint64_t WebKit::PaymentSetupConfiguration::platformConfiguration(WebKit::PaymentSetupConfiguration *this, uint64_t *a2)
{
  uint64_t v4 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63F0])()) init];
  uint64_t v5 = *a2;
  *(void *)this = v4;
  if (v5) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  [v4 setMerchantIdentifier:v6];
  [v4 setOriginatingURL:WTF::URL::operator NSURL *()];
  if (a2[1]) {
    uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = &stru_1EEA10550;
  }
  [v4 setReferrerIdentifier:v7];
  if (a2[2]) {
    unint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v8 = &stru_1EEA10550;
  }
  [v4 setSignature:v8];
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    unint64_t v10 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*((unsigned int *)a2 + 9)];
    uint64_t v11 = *((unsigned int *)a2 + 9);
    if (v11)
    {
      BOOL v12 = (void *)a2[3];
      uint64_t v13 = 8 * v11;
      do
      {
        if (*v12) {
          unint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          unint64_t v14 = &stru_1EEA10550;
        }
        [v10 addObject:v14];
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    return [v4 setSignedFields:v10];
  }
  return result;
}

void sub_198AACBD8(_Unwind_Exception *exception_object)
{
  *unint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::platformPaymentTokenContext(WebKit *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 3))
  {
    uint64_t v5 = (const void *)WTF::StringImpl::operator NSString *();
    uint64_t v6 = v5;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v8 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63A0])());
  if (*(void *)this) {
    BOOL v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v9 = &stru_1EEA10550;
  }
  if (*((void *)this + 1)) {
    unint64_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v10 = &stru_1EEA10550;
  }
  if (*((void *)this + 2)) {
    uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v11 = &stru_1EEA10550;
  }
  *a2 = objc_msgSend(v8, "initWithMerchantIdentifier:externalIdentifier:merchantName:merchantDomain:amount:", v9, v10, v11, v6, WebCore::toDecimalNumber((WebKit *)((char *)this + 32), v7));
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_198AACD20(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::platformPaymentTokenContexts(uint64_t a1@<X0>, void *a2@<X8>)
{
  WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>(&v3, a1);
  *a2 = v3;
}

void WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
  *a1 = v4;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = (void *)v4;
    uint64_t v7 = *(WebKit **)a2;
    uint64_t v8 = 40 * v5;
    do
    {
      WebKit::platformPaymentTokenContext(v7, &v10);
      BOOL v9 = v10;
      if (v10)
      {
        [v6 addObject:v10];
        CFRelease(v9);
      }
      uint64_t v7 = (WebKit *)((char *)v7 + 40);
      v8 -= 40;
    }
    while (v8);
  }
}

void sub_198AACE14(_Unwind_Exception *a1)
{
  CFRelease(v3);
  *unint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::platformRecurringPaymentRequest@<X0>(WebKit *this@<X0>, const WebCore::ApplePayRecurringPaymentRequest *a2@<X1>, void *a3@<X8>)
{
  id v5 = objc_alloc((Class)((uint64_t (*)(WebKit *, const WebCore::ApplePayRecurringPaymentRequest *))*MEMORY[0x1E4FB63D8])(this, a2));
  if (*(void *)this) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v7 = WebCore::platformRecurringSummaryItem();
  uint64_t v8 = (void *)MEMORY[0x1E4F1CB10];
  if (*((void *)this + 23)) {
    BOOL v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v9 = &stru_1EEA10550;
  }
  unint64_t v10 = objc_msgSend(v5, "initWithPaymentDescription:regularBilling:managementURL:", v6, v7, objc_msgSend(v8, "URLWithString:", v9));
  *a3 = v10;
  if (*((unsigned char *)this + 168)) {
    [v10 setTrialBilling:WebCore::platformRecurringSummaryItem()];
  }
  if (*((void *)this + 22)) {
    [v10 setBillingAgreement:WTF::StringImpl::operator NSString *()];
  }
  uint64_t result = *((void *)this + 24);
  if (result) {
    return objc_msgSend(v10, "setTokenNotificationURL:", objc_msgSend(MEMORY[0x1E4F1CB10], "URLWithString:", WTF::StringImpl::operator NSString *()));
  }
  return result;
}

void sub_198AACF60(_Unwind_Exception *exception_object)
{
  *unint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy(WebKit::WebPaymentCoordinatorProxy *this)
{
  *(void *)this = &unk_1EE9BE620;
  *((void *)this + 2) = &unk_1EE9BE6A8;
  *((void *)this + 3) = &unk_1EE9BE6F8;
  if (*((unsigned __int16 *)this + 28) - 10 >= 0xFFFFFFF7)
  {
    CFTypeRef cf = 0;
    WebKit::WebPaymentCoordinatorProxy::didReachFinalState((uint64_t)this, (WebCore::PaymentSessionError *)&cf);
    CFTypeRef v2 = cf;
    CFTypeRef cf = 0;
    if (v2) {
      CFRelease(v2);
    }
  }
  (*(void (**)(void, WebKit::WebPaymentCoordinatorProxy *, uint64_t))(**((void **)this + 4) + 56))(*((void *)this + 4), this, 188);
  objc_destroyWeak((id *)this + 10);
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy(this);

  WTF::fastFree(v1, v2);
}

void sub_198AAD0FC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 + 80));
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)uint64_t v1 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy(WebKit::WebPaymentCoordinatorProxy *this)
{
}

{
  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

void WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  if (*a2) {
    uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = &stru_1EEA10550;
  }
  if (*a3) {
    uint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = &stru_1EEA10550;
  }
  if (*(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a1)) {
    BOOL v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v9 = &stru_1EEA10550;
  }
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v11 = MEMORY[0x1E4F14398];
  v11[1] = 50331650;
  void v11[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
  void v11[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
  v11[4] = v10;
  ((void (*)(__CFString *, __CFString *, __CFString *, void *))*MEMORY[0x1E4FB6488])(v7, v8, v9, v11);

  _Block_release(v11);
}

void sub_198AAD37C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v7 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB62B0])()) init];
  if (*a2) {
    uint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = &stru_1EEA10550;
  }
  if (*a3) {
    BOOL v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v9 = &stru_1EEA10550;
  }
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v11 = MEMORY[0x1E4F14398];
  v11[1] = 50331650;
  void v11[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  void v11[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
  v11[4] = v10;
  [v7 openPaymentSetupForMerchantIdentifier:v8 domain:v9 completion:v11];
  _Block_release(v11);
  if (v7)
  {
    CFRelease(v7);
  }
}

void sub_198AAD504(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::toPKShippingMethods(uint64_t a1)
{
  CFTypeRef v2 = (CFTypeRef)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  uint64_t v3 = (void *)v2;
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a1 + 104 * v4;
    uint64_t v7 = *(void *)a1 + 32;
    uint64_t v8 = (uint64_t (**)(void))MEMORY[0x1E4FB6310];
    while (1)
    {
      uint64_t v10 = (void *)(*v8)();
      if (*(void *)(v7 - 32)) {
        uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v11 = &stru_1EEA10550;
      }
      uint64_t v12 = v7 - 16;
      uint64_t v13 = objc_msgSend(v10, "summaryItemWithLabel:amount:", v11, WebCore::toDecimalNumber((WebCore *)(v7 - 16), v9));
      if (*(void *)(v7 - 8)) {
        unint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v14 = &stru_1EEA10550;
      }
      [v13 setIdentifier:v14];
      if (*(void *)(v7 - 24)) {
        uint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v15 = &stru_1EEA10550;
      }
      CFTypeRef v2 = (CFTypeRef)[v13 setDetail:v15];
      if (*(unsigned char *)(v7 + 64))
      {
        id v16 = objc_alloc((Class)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E4FB6378])(v2));
        WebKit::toNSDateComponents(&v25, (unsigned int *)v7);
        uint64_t v17 = v25;
        WebKit::toNSDateComponents(&v24, (unsigned int *)(v7 + 32));
        char v18 = v24;
        unsigned int v19 = (const void *)[v16 initWithStartDateComponents:v17 endDateComponents:v24];
        if (v18) {
          CFRelease(v18);
        }
        if (v17) {
          CFRelease(v17);
        }
        CFTypeRef v2 = (CFTypeRef)[v13 setDateComponentsRange:v19];
        if (v19) {
          CFRelease(v19);
        }
      }
      if (*(unsigned char *)(v7 + 68)) {
        break;
      }
      uint64_t v20 = v5;
      if (v13) {
        goto LABEL_24;
      }
LABEL_25:
      v7 += 104;
      uint64_t v5 = v20;
      if (v12 + 88 == v6) {
        goto LABEL_31;
      }
    }
    if (v13) {
      CFTypeRef v2 = CFRetain(v13);
    }
    uint64_t v20 = v13;
    if (v5)
    {
      CFRelease(v5);
      uint64_t v20 = v13;
    }
    if (!v13) {
      goto LABEL_25;
    }
LABEL_24:
    CFTypeRef v2 = (CFTypeRef)[v3 addObject:v13];
    goto LABEL_25;
  }
  uint64_t v20 = 0;
LABEL_31:
  unsigned int v21 = (const void *)[objc_alloc((Class)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E4FB6328])(v2)) initWithMethods:v3 defaultMethod:v20];
  CFTypeRef v22 = (id)CFMakeCollectable(v21);
  if (v3) {
    CFRelease(v3);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v22;
}

void sub_198AAD7A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::toPKContactFields(PAL *PassKitCore_PKContactFieldPhoneNumber, unsigned char *a2)
{
  uint64_t v3 = PassKitCore_PKContactFieldPhoneNumber;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (*a2)
  {
    uint64_t PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, 1uLL, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
    int v4 = HIDWORD(v16);
    uint64_t v5 = v15;
    *((void *)v15 + HIDWORD(vWebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16)) = *(void *)PassKitCore_PKContactFieldPhoneNumber;
    unsigned int v6 = v4 + 1;
    HIDWORD(v16) = v4 + 1;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
  }
  if (a2[1])
  {
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPhoneNumber(PassKitCore_PKContactFieldPhoneNumber);
    uint64_t PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
    if (v6 == v16)
    {
      PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      int v7 = HIDWORD(v16);
      *((void *)v15 + HIDWORD(vWebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16)) = *(void *)PassKitCore_PKContactFieldPhoneNumber;
    }
    else
    {
      *((void *)v5 + v6) = PassKitCore_PKContactFieldPhoneNumber;
      int v7 = HIDWORD(v16);
    }
    unsigned int v6 = v7 + 1;
    HIDWORD(v16) = v7 + 1;
  }
  if (a2[2])
  {
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldEmailAddress(PassKitCore_PKContactFieldPhoneNumber);
    uint64_t PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
    if (v6 == v16)
    {
      PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      unsigned int v6 = HIDWORD(v16);
      *((void *)v15 + HIDWORD(vWebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16)) = *(void *)PassKitCore_PKContactFieldPhoneNumber;
    }
    else
    {
      *((void *)v15 + v6) = PassKitCore_PKContactFieldPhoneNumber;
    }
    HIDWORD(v16) = ++v6;
  }
  if (a2[3])
  {
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldName(PassKitCore_PKContactFieldPhoneNumber);
    uint64_t PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
    if (v6 == v16)
    {
      PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      unsigned int v6 = HIDWORD(v16);
      *((void *)v15 + HIDWORD(vWebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16)) = *(void *)PassKitCore_PKContactFieldPhoneNumber;
    }
    else
    {
      *((void *)v15 + v6) = PassKitCore_PKContactFieldPhoneNumber;
    }
    HIDWORD(v16) = ++v6;
  }
  if (a2[4])
  {
    uint64_t PassKitCore_PKContactFieldPhoneticName = PAL::get_PassKitCore_PKContactFieldPhoneticName(PassKitCore_PKContactFieldPhoneNumber);
    uint64_t PassKitCore_PKContactFieldPostalAddress = PassKitCore_PKContactFieldPhoneticName;
    if (v6 == v16)
    {
      BOOL v9 = (void *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      unsigned int v6 = HIDWORD(v16);
      *((void *)v15 + HIDWORD(vWebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16)) = *v9;
    }
    else
    {
      *((void *)v15 + v6) = PassKitCore_PKContactFieldPhoneticName;
    }
    ++v6;
  }
  id v10 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v11 = v15;
  uint64_t result = [v10 initWithObjects:v15 count:v6];
  *uint64_t v3 = result;
  if (v11) {
    return WTF::fastFree(v11, v13);
  }
  return result;
}

void sub_198AADA08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v5 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v5 = MEMORY[0x1E4F14398];
  v5[1] = 50331650;
  _DWORD v5[2] = WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::{lambda(void *,NSArray<PKPaymentSetupFeature *> *)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::descriptor;
  v5[4] = v4;
  unsigned int v6 = (void *)((uint64_t (*)(void))*MEMORY[0x1E4FB63C8])();
  WebKit::PaymentSetupConfiguration::platformConfiguration((WebKit::PaymentSetupConfiguration *)&v8, a2);
  int v7 = v8;
  [v6 paymentSetupFeaturesForConfiguration:v8 completion:v5];
  if (v7) {
    CFRelease(v7);
  }

  _Block_release(v5);
}

void sub_198AADB20(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198AADB4C()
{
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x198AADB44);
}

void WebKit::WebPaymentCoordinatorProxy::beginApplePaySetup(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), a1);
  if (v8)
  {
    BOOL v9 = (void *)v8;
    id v10 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6398])()) init];
    WebKit::PaymentSetupConfiguration::platformConfiguration((WebKit::PaymentSetupConfiguration *)&v17, a2);
    uint64_t v11 = v17;
    [v10 setConfiguration:v17];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = [v10 setPaymentSetupFeatures:*a3];
    uint64_t v13 = (void *)[objc_alloc((Class)((uint64_t (*)(uint64_t))*MEMORY[0x1E4FB6410])(v12)) initWithPaymentSetupRequest:v10];
    if (v13)
    {
      uint64_t v14 = *a4;
      *a4 = 0;
      uint64_t v15 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v15 = MEMORY[0x1E4F14398];
      v15[1] = 50331650;
      void v15[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke;
      v15[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
      v15[4] = v14;
      uint64_t v16 = (id *)(a1 + 80);
      [objc_loadWeak(v16) dismissViewControllerAnimated:1 completion:0];
      objc_storeWeak(v16, 0);
      [v9 presentViewController:v13 animated:1 completion:v15];
      objc_storeWeak(v16, v13);
      _Block_release(v15);
      CFRelease(v13);
    }
    else
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
    }
    if (v10)
    {
      CFRelease(v10);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
}

void sub_198AADD98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6428])();
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  int v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v7 = &unk_1EE9BE8A8;
  v7[1] = v5;
  _DWORD v7[2] = v6;
  BOOL v9 = v7;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, &v9);
  uint64_t result = (uint64_t)v9;
  BOOL v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198AADF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = std::__optional_copy_base<WebCore::ApplePayDisbursementRequest,false>::__optional_copy_base[abi:sn180100](&v117, a5 + 848);
  if (v120)
  {
    WebKit::platformDisbursementRequest(a5, (uint64_t)&v117, &cf);
    uint64_t v12 = (void *)cf;
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v13 = cf;
      CFTypeRef cf = 0;
      if (v13) {
        CFRelease(v13);
      }
    }
    goto LABEL_126;
  }
  uint64_t v12 = (void *)[objc_alloc((Class)((uint64_t (*)(unsigned char *))*MEMORY[0x1E4FB6308])(v11)) init];
  [v12 setOriginatingURL:WTF::URL::operator NSURL *()];
  uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a4 + 12)];
  uint64_t v16 = *(unsigned int *)(a4 + 12);
  if (v16)
  {
    uint64_t v17 = *(WTF **)a4;
    uint64_t v18 = 40 * v16;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v17, v14);
      if (cf)
      {
        objc_msgSend(v15, "addObject:");
        CFTypeRef v19 = cf;
        CFTypeRef cf = 0;
        if (v19) {
          CFRelease(v19);
        }
      }
      uint64_t v17 = (WTF *)((char *)v17 + 40);
      v18 -= 40;
    }
    while (v18);
  }
  [v12 setThumbnailURLs:v15];
  if (v15) {
    CFRelease(v15);
  }
  if (*(unsigned char *)(a5 + 232)) {
    uint64_t v20 = 2;
  }
  else {
    uint64_t v20 = 1;
  }
  [v12 setAPIType:v20];
  if (*(void *)(a5 + 8)) {
    unsigned int v21 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unsigned int v21 = &stru_1EEA10550;
  }
  [v12 setCountryCode:v21];
  if (*(void *)(a5 + 16)) {
    CFTypeRef v22 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    CFTypeRef v22 = &stru_1EEA10550;
  }
  [v12 setCurrencyCode:v22];
  WebCore::PaymentContact::pkContact((uint64_t *)&cf, (WebCore::PaymentContact *)(a5 + 32));
  [v12 setBillingContact:cf];
  CFTypeRef v23 = cf;
  CFTypeRef cf = 0;
  if (v23) {
    CFRelease(v23);
  }
  WebCore::PaymentContact::pkContact((uint64_t *)&cf, (WebCore::PaymentContact *)(a5 + 56));
  [v12 setShippingContact:cf];
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    CFRelease(v24);
  }
  WebKit::toPKContactFields((PAL *)&cf, (unsigned char *)(a5 + 24));
  CFTypeRef v25 = cf;
  [v12 setRequiredBillingContactFields:cf];
  if (v25) {
    CFRelease(v25);
  }
  WebKit::toPKContactFields((PAL *)&cf, (unsigned char *)(a5 + 48));
  CFTypeRef v26 = cf;
  [v12 setRequiredShippingContactFields:cf];
  if (v26) {
    CFRelease(v26);
  }
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a5 + 72, (uint64_t *)&cf);
  [v12 setSupportedNetworks:cf];
  CFTypeRef v27 = cf;
  CFTypeRef cf = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = *(unsigned __int8 *)(a5 + 88);
  if (*(unsigned char *)(a5 + 89)) {
    v28 |= 2uLL;
  }
  if (*(unsigned char *)(a5 + 90)) {
    v28 |= 4uLL;
  }
  if (*(unsigned char *)(a5 + 91)) {
    v28 |= 8uLL;
  }
  if (*(unsigned char *)(a5 + 92)) {
    uint64_t v29 = v28 | 0x80;
  }
  else {
    uint64_t v29 = v28;
  }
  [v12 setMerchantCapabilities:v29];
  if (*(unsigned __int8 *)(a5 + 93) - 1 < 3) {
    uint64_t v30 = (*(unsigned char *)(a5 + 93) - 1) + 1;
  }
  else {
    uint64_t v30 = 0;
  }
  [v12 setShippingType:v30];
  [v12 setAvailableShippingMethods:WebKit::toPKShippingMethods(a5 + 96)];
  [v12 setPaymentSummaryItems:WebCore::platformSummaryItems()];
  [v12 setExpectsMerchantSession:1];
  if (*(void *)(a5 + 208))
  {
    id v31 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    uint64_t v32 = *(void *)(a5 + 208) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    uint64_t v33 = (const void *)[v31 initWithBase64EncodedString:v32 options:0];
    [v12 setApplicationData:v33];
    if (v33) {
      CFRelease(v33);
    }
  }
  if (*(_DWORD *)(a5 + 228))
  {
    uint64_t v34 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:*(unsigned int *)(a5 + 228)];
    uint64_t v35 = *(unsigned int *)(a5 + 228);
    if (v35)
    {
      uint64_t v36 = *(void **)(a5 + 216);
      uint64_t v37 = 8 * v35;
      do
      {
        if (*v36) {
          uint64_t v38 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v38 = &stru_1EEA10550;
        }
        [v34 addObject:v38];
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  [v12 setSupportedCountries:v34];
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v39 = *(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a1);
  if (v39 && *(_DWORD *)(v39 + 4)) {
    [v12 setBoundInterfaceIdentifier:WTF::StringImpl::operator NSString *()];
  }
  uint64_t v40 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), a1);
  uint64_t v41 = (void *)v40;
  if (*(void *)v40 && *(_DWORD *)(*(void *)v40 + 4) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*v41) {
      uint64_t v42 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v42 = &stru_1EEA10550;
    }
    [v12 setSourceApplicationBundleIdentifier:v42];
  }
  uint64_t v43 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a1);
  uint64_t v44 = (void *)v43;
  if (*(void *)v43 && *(_DWORD *)(*(void *)v43 + 4) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*v44) {
      uint64_t v45 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v45 = &stru_1EEA10550;
    }
    [v12 setSourceApplicationSecondaryIdentifier:v45];
  }
  uint64_t v46 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32), a1);
  uint64_t v47 = (void *)v46;
  if (*(void *)v46 && *(_DWORD *)(*(void *)v46 + 4) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*v47) {
      uint64_t v48 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v48 = &stru_1EEA10550;
    }
    [v12 setCTDataConnectionServiceType:v48];
  }
  WebCore::PaymentInstallmentConfiguration::platformConfiguration((uint64_t *)&cf, (WebCore::PaymentInstallmentConfiguration *)(a5 + 240));
  if (cf)
  {
    objc_msgSend(v12, "setInstallmentConfiguration:");
    [v12 setRequestType:5];
    CFTypeRef v50 = cf;
    CFTypeRef cf = 0;
    if (v50) {
      CFRelease(v50);
    }
  }
  if (*(unsigned __int16 *)(a5 + 346) >= 0x100u) {
    [v12 setSupportsCouponCode:*(_WORD *)(a5 + 346) != 0];
  }
  uint64_t v51 = *(void **)(a5 + 352);
  if (v51) {
    uint64_t v51 = (void *)[v12 setCouponCode:WTF::StringImpl::operator NSString *()];
  }
  if (*(unsigned char *)(a5 + 345))
  {
    if (*(unsigned char *)(a5 + 344) == 2) {
      uint64_t v52 = 2;
    }
    else {
      uint64_t v52 = 1;
    }
    uint64_t v51 = (void *)[v12 setShippingContactEditingMode:v52];
  }
  if (*(unsigned char *)(a5 + 881))
  {
    int v53 = *(unsigned __int8 *)(a5 + 880);
    if (v53 == 2) {
      uint64_t v54 = 2;
    }
    else {
      uint64_t v54 = v53 == 1;
    }
    uint64_t v51 = (void *)[v12 setApplePayLaterAvailability:v54];
  }
  if (*(unsigned char *)(a5 + 560))
  {
    WebKit::platformRecurringPaymentRequest((WebKit *)(a5 + 360), v49, &cf);
    CFTypeRef v55 = cf;
    uint64_t v51 = (void *)[v12 setRecurringPaymentRequest:cf];
    if (v55) {
      CFRelease(v55);
    }
  }
  if (*(unsigned char *)(a5 + 680))
  {
    WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a5 + 568), v49, &cf);
    [v12 setAutomaticReloadPaymentRequest:cf];
    uint64_t v51 = (void *)cf;
    CFTypeRef cf = 0;
    if (v51) {
      CFRelease(v51);
    }
  }
  if (*(unsigned char *)(a5 + 704))
  {
    WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>((uint64_t *)&cf, a5 + 688);
    CFTypeRef v56 = cf;
    uint64_t v51 = (void *)[v12 setMultiTokenContexts:cf];
    if (v56) {
      CFRelease(v56);
    }
  }
  if (*(unsigned char *)(a5 + 840))
  {
    WebKit::platformDeferredPaymentRequest((WebKit *)(a5 + 712), v49, &cf);
    [v12 setDeferredPaymentRequest:cf];
    uint64_t v51 = (void *)cf;
    CFTypeRef cf = 0;
    if (v51) {
      CFRelease(v51);
    }
  }
  uint64_t v57 = *(void *)(a5 + 888);
  if (v57)
  {
    uint64_t v58 = *(void *)(v57 + 8);
    uint64_t v59 = *(unsigned int *)(v57 + 4);
    if (v58) {
      BOOL v60 = v59 == 0;
    }
    else {
      BOOL v60 = 1;
    }
    char v61 = v60;
    if ((*(unsigned char *)(v57 + 16) & 4) == 0)
    {
      if ((v61 & 1) == 0)
      {
        uint64_t v78 = 0;
        uint64_t v79 = 2 * v59;
        while (1)
        {
          int v80 = *(unsigned __int16 *)(v58 + v78);
          if ((v80 - 9) >= 5 && v80 != 32) {
            break;
          }
          --v59;
          v78 += 2;
          if (v79 == v78) {
            goto LABEL_117;
          }
        }
        if (v80 == 43 || v80 == 45)
        {
          if (v79 - 2 == v78) {
            goto LABEL_117;
          }
          --v59;
          uint64_t v81 = v58 + v78;
          int v84 = *(unsigned __int16 *)(v81 + 2);
          uint64_t v82 = v81 + 2;
          int v83 = v84;
        }
        else
        {
          uint64_t v82 = v58 + v78;
          int v83 = v80;
        }
        if ((v83 - 48) <= 9)
        {
          __int16 v92 = 0;
          char v93 = 0;
          while (1)
          {
            __int16 v94 = v83 - 48;
            int v95 = (__int16)(10 * v92);
            BOOL v96 = v95 != 10 * v92;
            if (v95 == 10 * v92) {
              v92 *= 10;
            }
            int v97 = v92 + v94;
            BOOL v98 = v97 != (__int16)(v92 + v94);
            int v99 = v92 - v94;
            BOOL v100 = v99 != (__int16)v99;
            if (v80 != 45)
            {
              LOWORD(v99) = v97;
              BOOL v100 = v98;
            }
            if (!v100) {
              __int16 v92 = v99;
            }
            if (v100 || v96) {
              char v93 = 1;
            }
            if (!--v59) {
              break;
            }
            uint64_t v101 = v82 + 2;
            int v83 = *(unsigned __int16 *)(v82 + 2);
            if ((v83 - 48) <= 9)
            {
              v82 += 2;
              if ((v83 - 48) < 0xA) {
                continue;
              }
            }
            if (!v93)
            {
              uint64_t v102 = 0;
              while (1)
              {
                int v103 = *(unsigned __int16 *)(v101 + 2 * v102);
                if ((v103 - 9) >= 5 && v103 != 32) {
                  break;
                }
                if (v59 == ++v102) {
                  goto LABEL_201;
                }
              }
            }
            goto LABEL_117;
          }
          if (v93) {
            goto LABEL_117;
          }
LABEL_201:
          int v64 = v92 & 0xFF00;
          int v63 = v92;
          int v62 = 0x10000;
          goto LABEL_118;
        }
      }
LABEL_117:
      int v62 = 0;
      int v63 = 0;
      int v64 = 0;
LABEL_118:
      unsigned int v65 = v63 | v62 | v64;
LABEL_122:
      __int16 PassKitCore_PKMerchantCategoryCodeNone = PAL::get_PassKitCore_PKMerchantCategoryCodeNone((PAL *)v51);
      if (v65 >= 0x10000) {
        __int16 v70 = v65;
      }
      else {
        __int16 v70 = PassKitCore_PKMerchantCategoryCodeNone;
      }
      [v12 setMerchantCategoryCode:v70];
      goto LABEL_126;
    }
    if (v61) {
      goto LABEL_120;
    }
    uint64_t v85 = 0;
    while (1)
    {
      int v86 = *(unsigned __int8 *)(v58 + v85);
      if ((v86 - 9) >= 5 && v86 != 32) {
        break;
      }
      if (v59 == ++v85) {
        goto LABEL_120;
      }
    }
    if (v86 == 43 || v86 == 45)
    {
      if (v59 - 1 == v85) {
        goto LABEL_120;
      }
      uint64_t v87 = ~v85 + v59;
      uint64_t v88 = v58 + v85;
      int v91 = *(unsigned __int8 *)(v88 + 1);
      uint64_t v89 = v88 + 1;
      int v90 = v91;
    }
    else
    {
      uint64_t v89 = v58 + v85;
      uint64_t v87 = v59 - v85;
      int v90 = v86;
    }
    if ((v90 - 48) <= 9)
    {
      __int16 v104 = 0;
      char v105 = 0;
      while (1)
      {
        int v106 = v90 - 48;
        int v107 = (__int16)(10 * v104);
        BOOL v108 = v107 != 10 * v104;
        if (v107 == 10 * v104) {
          v104 *= 10;
        }
        int v109 = v106 + v104;
        BOOL v110 = v109 != (__int16)(v106 + v104);
        int v111 = v104 - v106;
        if (v86 == 45)
        {
          BOOL v112 = v111 != (__int16)v111;
        }
        else
        {
          LOWORD(v11nw_tcp_options_set_no_delay(options, 1) = v109;
          BOOL v112 = v110;
        }
        if (!v112) {
          __int16 v104 = v111;
        }
        if (v112 || v108) {
          char v105 = 1;
        }
        if (!--v87) {
          break;
        }
        int v113 = *(unsigned __int8 *)++v89;
        LOBYTE(v90) = v113;
        unsigned int v114 = v113 - 48;
        if ((v113 - 48) > 9 || v114 >= 0xA)
        {
          if (!v105)
          {
            uint64_t v115 = 0;
            while (1)
            {
              int v116 = *(unsigned __int8 *)(v89 + v115);
              if ((v116 - 9) >= 5 && v116 != 32) {
                break;
              }
              if (v87 == ++v115) {
                goto LABEL_203;
              }
            }
          }
          goto LABEL_120;
        }
      }
      if (v105) {
        goto LABEL_120;
      }
LABEL_203:
      int v68 = v104 & 0xFF00;
      int v67 = v104;
      int v66 = 0x10000;
      goto LABEL_121;
    }
LABEL_120:
    int v66 = 0;
    int v67 = 0;
    int v68 = 0;
LABEL_121:
    unsigned int v65 = v67 | v66 | v68;
    goto LABEL_122;
  }
LABEL_126:
  uint64_t v71 = *(void *)(a1 + 32);
  if (v12) {
    CFRetain(v12);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v72 = *(atomic_uint **)(a1 + 8);
  if (v72) {
    atomic_fetch_add(v72, 1u);
  }
  uint64_t v73 = *a6;
  *a6 = 0;
  long long v74 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v74 = &unk_1EE9BE8F8;
  v74[1] = a2;
  v74[2] = v12;
  v74[3] = v72;
  v74[4] = v73;
  CFTypeRef cf = v74;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)v71 + 96))(v71, a2, &cf);
  CFTypeRef v76 = cf;
  CFTypeRef cf = 0;
  if (v76) {
    (*(void (**)(CFTypeRef))(*(void *)v76 + 8))(v76);
  }
  if (v120)
  {
    if (v119)
    {
      uint64_t v77 = v117;
      if (v117)
      {
        uint64_t v117 = 0;
        int v118 = 0;
        WTF::fastFree(v77, v75);
      }
    }
  }
  if (v12) {
    CFRelease(v12);
  }
}

void sub_198AAEAA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, int a14, __int16 a15, char a16, char a17, CFTypeRef cf)
{
  if (v18) {
    CFRelease(v18);
  }
  if ((_BYTE)a15 && a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::toAuthenticationChallengeDisposition(unint64_t this, NSURLSessionAuthChallengeDisposition a2)
{
  if (this >= 4) {
    LOBYTE(this) = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid NSURLSessionAuthChallengeDisposition (%ld)", this);
  }
  return this;
}

uint64_t WebKit::fromAuthenticationChallengeDisposition(uint64_t result)
{
  if (result >= 4) {
    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid AuthenticationChallengeDisposition (%ld)", result);
  }
  else {
    return result;
  }
}

uint64_t ___ZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionE_block_invoke(uint64_t a1, void *a2)
{
  *(void *)&long long v10 = a2;
  if (a2) {
    id v3 = a2;
  }
  uint64_t v4 = *(atomic_uint **)(a1 + 32);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)&v10 + nw_tcp_options_set_no_delay(options, 1) = v4;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9BE920;
  long long v6 = v10;
  long long v10 = 0uLL;
  *(_OWORD *)(v5 + 8) = v6;
  uint64_t v11 = v5;
  WTF::callOnMainRunLoop();
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_EN3__7D1Ev((uint64_t)&v10, v7);
}

void sub_198AAEDF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_EN3__7D1Ev((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_EN3__7D1Ev(uint64_t a1, void *a2)
{
  id v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  if (*(void *)a1) {

  }
  return a1;
}

unsigned int *__destroy_helper_block_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void *WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(void *a1, uint64_t a2)
{
  id v3 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v3 += 2;
  }
  *a1 = v3;
  uint64_t v4 = *(_DWORD **)(a2 + 8);
  if (v4) {
    *v4 += 2;
  }
  a1[1] = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 16);
  if (v5) {
    *v5 += 2;
  }
  a1[2] = v5;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 3), a2 + 24);
  return a1;
}

void sub_198AAEF3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[2];
  v2[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v2[1];
  v2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = *v2;
  *CFTypeRef v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(WTF::RunLoop *a1, char a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9BE7A8;
  *(void *)(v5 + 8) = v4;
  *(unsigned char *)(v5 + 16) = a2;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_198AAF09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BE7A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BE7A8;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(WTF::RunLoop *a1, char a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9BE7F0;
  *(void *)(v5 + 8) = v4;
  *(unsigned char *)(v5 + 16) = a2;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_198AAF310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BE7F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BE7F0;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t WebKit::toNSDateComponents(void *a1, unsigned int *a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  *a1 = v4;
  uint64_t result = objc_msgSend(v4, "setCalendar:", objc_msgSend(MEMORY[0x1E4F1C9A8], "calendarWithIdentifier:", *MEMORY[0x1E4F1C318]));
  if (*((unsigned char *)a2 + 4)) {
    uint64_t result = [v4 setYear:*a2];
  }
  if (*((unsigned char *)a2 + 12)) {
    uint64_t result = [v4 setMonth:a2[2]];
  }
  if (*((unsigned char *)a2 + 20)) {
    uint64_t result = [v4 setDay:a2[4]];
  }
  if (*((unsigned char *)a2 + 28)) {
    return [v4 setHour:a2[6]];
  }
  return result;
}

void sub_198AAF550(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::{lambda(void *,NSArray<PKPaymentSetupFeature *> *)#1}::__invoke(WTF::RunLoop *a1, const void *a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9BE838;
  v5[1] = v4;
  _DWORD v5[2] = a2;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_198AAF660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0::operator()(NSArray<PKPaymentSetupFeature *> *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BE838;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0::operator()(NSArray<PKPaymentSetupFeature *> *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE838;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0::operator()(NSArray<PKPaymentSetupFeature *> *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  CFTypeRef cf = *(CFTypeRef *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v1 + 16))(v1, &cf);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198AAF890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1EE9BE880;
  v3[1] = v2;
  uint64_t v5 = v3;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

void sub_198AAF9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BE880;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BE880;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BE8A8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE8A8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  char v2 = [*(id *)(a1 + 8) canMakePayments];
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9BE8D0;
  *(unsigned char *)(v4 + 8) = v2;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = v4;
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_198AAFCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BE8D0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE8D0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BE8F8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (const void *)a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE8F8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::String const&>::call(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = (void *)a1[2];
    if (*a2) {
      uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v6 = &stru_1EEA10550;
    }
    [v5 setUserAgent:v6];
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 32) + 80))(&v13);
    uint64_t v7 = v13;
    uint64_t v13 = 0;
    uint64_t v8 = *(void *)(v4 + 64);
    *(void *)(v4 + 64) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      uint64_t v7 = *(void *)(v4 + 64);
    }
    if (v7)
    {
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 32) + 64))(*(void *)(v4 + 32), v4);
      return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 24))(v7, v10, a1 + 4);
    }
    else
    {
      return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1 + 4);
    }
  }
  else
  {
    uint64_t v12 = a1 + 4;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(v12);
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_E3__7vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9BE920;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4) {

  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_E3__7vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BE920;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4) {

  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_E3__7vJEE4callEv(uint64_t a1)
{
}

void _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_ENK3__7clEv(WTF *a1)
{
  if ((WTF::isMainRunLoop(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198AB0480);
  }
  Class Class = object_getClass(*(id *)a1);
  if (Class != (Class)MEMORY[0x1E4F145A8])
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (Class == (Class)MEMORY[0x1E4F14590] && v4 != 0)
      {
        string = xpc_dictionary_get_string(*(xpc_object_t *)a1, "message-name");
        if (!strcmp(string, "client-certificate-credential"))
        {
          uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)a1, "challenge-id");
          if (uint64)
          {
            uint64_t v8 = (void *)uint64;
            xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)a1, "sec-key-proxy-endpoint");
            if (value)
            {
              xpc_object_t v10 = value;
              if (object_getClass(value) == (Class)MEMORY[0x1E4F145A0])
              {
                id v11 = objc_alloc_init(MEMORY[0x1E4F292A0]);
                [v11 _setEndpoint:v10];
                uint64_t v31 = 0;
                uint64_t v12 = (const void *)[MEMORY[0x1E4F3B450] createIdentityFromEndpoint:v11 error:&v31];
                if (v12 && !v31)
                {
                  xpc_object_t array = xpc_dictionary_get_array(*(xpc_object_t *)a1, "certificates");
                  uint64_t v14 = array;
                  if (!array)
                  {
LABEL_33:
                    CFRelease(v12);
LABEL_34:
                    if (v11) {
                      CFRelease(v11);
                    }
                    return;
                  }
                  size_t count = xpc_array_get_count(array);
                  if (count)
                  {
                    uint64_t v16 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:count];
                    size_t v17 = 0;
                    while (1)
                    {
                      xpc_object_t v18 = xpc_array_get_value(v14, v17);
                      bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(v18);
                      size_t length = xpc_data_get_length(v18);
                      CFDataRef v21 = CFDataCreate(0, bytes_ptr, length);
                      SecCertificateRef v22 = SecCertificateCreateWithData(0, v21);
                      if (!v22) {
                        break;
                      }
                      [v16 addObject:v22];
                      CFRelease(v22);
                      if (v21) {
                        CFRelease(v21);
                      }
                      if (count == ++v17) {
                        goto LABEL_25;
                      }
                    }
                    if (v21)
                    {
                      uint64_t v29 = v21;
LABEL_38:
                      CFRelease(v29);
                    }
                  }
                  else
                  {
                    uint64_t v16 = 0;
LABEL_25:
                    uint64_t v23 = xpc_dictionary_get_uint64(*(xpc_object_t *)a1, "persistence");
                    if (v23 <= 3)
                    {
                      uint64_t v24 = *((void *)a1 + 1);
                      if (v24)
                      {
                        uint64_t v25 = *(void *)(v24 + 8);
                        uint64_t v26 = v25 ? v25 - 8 : 0;
                      }
                      else
                      {
                        uint64_t v26 = 0;
                      }
                      if (v8 == (void *)-1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198AB0560);
                      }
                      uint64_t v27 = [objc_alloc(MEMORY[0x1E4F18D88]) initWithIdentity:v12 certificates:v16 persistence:v23];
                      MEMORY[0x19972F4E0](v30, v27);
                      WebKit::AuthenticationManager::completeAuthenticationChallenge(v26, v8, 0, (uint64_t)v30);
                      WebCore::Credential::~Credential((WebCore::Credential *)v30, v28);
                      if (v27)
                      {
                        uint64_t v29 = (const void *)v27;
                        goto LABEL_38;
                      }
                    }
                  }
                }
                if (!v12) {
                  goto LABEL_34;
                }
                goto LABEL_33;
              }
            }
          }
        }
      }
    }
  }
}

void sub_198AB056C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::Credential::~Credential((WebCore::Credential *)va, a2);
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(v4);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(a1);
}

void WebCore::Credential::~Credential(WebCore::Credential *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

atomic_uchar *WebKit::RemoteSampleBufferDisplayLayerManager::didReceiveMessage(atomic_uchar *volatile *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v6 = (atomic_uchar **)(this + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  int v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 1349)
  {
    uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (v28)
    {
      uint64_t result = (atomic_uchar *)WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer((uint64_t)this, v27);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v7 != 1348)
  {
    uint64_t result = (atomic_uchar *)WebKit::RemoteSampleBufferDisplayLayerManager::dispatchMessage((WebKit::RemoteSampleBufferDisplayLayerManager *)this, a2, a3);
    goto LABEL_30;
  }
  uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
  if (!v9) {
    goto LABEL_29;
  }
  unint64_t v10 = *((void *)a3 + 1);
  uint64_t v11 = *(void *)a3;
  unint64_t v12 = *((void *)a3 + 2) - *(void *)a3;
  if (v10 <= v12) {
    goto LABEL_19;
  }
  uint64_t v13 = (unsigned __int8 *)(v11 + v12);
  *((void *)a3 + 2) = v13 + 1;
  if (!v11)
  {
LABEL_44:
    unint64_t v29 = v10;
    uint64_t v30 = v11;
LABEL_20:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v32 = *((void *)a3 + 3);
    if (!v32) {
      goto LABEL_24;
    }
    if (!v29)
    {
      unint64_t v10 = 0;
      uint64_t v11 = 0;
      goto LABEL_24;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v32 + 16))(v32, v30, v29);
    goto LABEL_23;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_24:
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v33 = *((void *)a3 + 3);
    if (v33 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v11);
    }
    goto LABEL_29;
  }
  uint64_t v15 = v8;
  uint64_t v16 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a3);
  if (!v17)
  {
LABEL_23:
    uint64_t v11 = *(void *)a3;
    unint64_t v10 = *((void *)a3 + 1);
    goto LABEL_24;
  }
  unint64_t v10 = *((void *)a3 + 1);
  uint64_t v11 = *(void *)a3;
  unint64_t v18 = *((void *)a3 + 2) - *(void *)a3;
  if (v10 <= v18)
  {
LABEL_19:
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v31 = *((void *)a3 + 3);
    if (v31)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
        uint64_t v30 = *(void *)a3;
        unint64_t v29 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v29 = 0;
        uint64_t v30 = 0;
      }
    }
    goto LABEL_20;
  }
  CFTypeRef v19 = (unsigned __int8 *)(v11 + v18);
  *((void *)a3 + 2) = v19 + 1;
  if (!v11) {
    goto LABEL_44;
  }
  unsigned int v20 = *v19;
  if (v20 >= 2) {
    goto LABEL_24;
  }
  if (v10 <= (unint64_t)&v19[-v11 + 1])
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v36 = *((void *)a3 + 3);
    if (v36)
    {
      (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
      unint64_t v34 = 0;
      uint64_t v40 = *(void *)a3;
      uint64_t v41 = *((void *)a3 + 1);
      uint64_t v42 = *((void *)a3 + 3);
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v35 = 0;
      if (v42)
      {
        if (v41)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
          uint64_t v35 = *(void *)a3;
          unint64_t v34 = *((void *)a3 + 1);
        }
      }
    }
  }
  else
  {
    *((void *)a3 + 2) = v19 + 2;
    unsigned int v21 = v19[1];
    if (v21 < 2)
    {
      uint64_t v22 = (uint64_t)v16;
      uint64_t result = (atomic_uchar *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v24)
      {
        uint64_t v43 = result;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (atomic_uchar *volatile *)a2);
        uint64_t v25 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v25 = &unk_1EE9BE948;
        *((void *)v25 + nw_tcp_options_set_no_delay(options, 1) = v43;
        uint64_t v26 = v44;
        uint64_t v44 = 0;
        uint64_t v45 = v25;
        *((void *)v25 + 2) = v26;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v44);
        WebKit::RemoteSampleBufferDisplayLayerManager::createLayer((uint64_t)this, v15, v14 != 0, v22, v20 != 0, v21 != 0, (uint64_t *)&v45);
        uint64_t result = v45;
        uint64_t v45 = 0;
        if (result) {
          uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
        }
      }
      goto LABEL_30;
    }
    unint64_t v34 = v10;
    uint64_t v35 = v11;
  }
  *(void *)a3 = 0;
  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t v37 = *((void *)a3 + 3);
  if (v37 && v34) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v37 + 16))(v37, v35, v34);
  }
LABEL_29:
  uint64_t v24 = *(void **)a3;
  uint64_t v38 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t result = (atomic_uchar *)*((void *)a3 + 3);
  if (result && v38) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *, void *))(*(void *)result + 16))(result, v24);
  }
LABEL_30:
  if (this)
  {
    uint64_t v39 = *v6;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v39, v24);
  }
  return result;
}

void WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(WebKit::RemoteSampleBufferDisplayLayer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x546:
      uint64_t v5 = *((void *)this + 10);
      MEMORY[0x1F4171C60](v5, a2);
      break;
    case 0x547:
      IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>(a3, (uint64_t)&v18);
      if (v23)
      {
        WebKit::RemoteSampleBufferDisplayLayer::enqueueVideoFrame((uint64_t)this, (uint64_t)&v18);
        if (v23)
        {
          if (v22 != -1) {
            ((void (*)(char *, uint64_t *))off_1EE9BE960[v22])(&v24, &v21);
          }
        }
      }
      break;
    case 0x548:
      uint64_t v6 = *((void *)this + 10);
      MEMORY[0x1F4171C90](v6, a2);
      break;
    case 0x549:
      uint64_t v7 = *((void *)this + 10);
      MEMORY[0x1F4171C78](v7, a2);
      break;
    case 0x54A:
      *(unsigned char *)(*((void *)this + 10) + 152) = 1;
      break;
    case 0x54B:
      *(unsigned char *)(*((void *)this + 10) + 152) = 0;
      break;
    case 0x54C:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v18);
      if (v19)
      {
        WebKit::RemoteSampleBufferDisplayLayer::setLogIdentifier((uint64_t)this, (uint64_t *)&v18);
        if (v19)
        {
          char v9 = v18;
          unint64_t v18 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v8);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
        }
      }
      break;
    case 0x54D:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v18);
      if (v20)
      {
        WebKit::RemoteGraphicsContextGL::setSharedVideoFrameMemory((uint64_t)this);
        if (v20) {
          goto LABEL_28;
        }
      }
      break;
    case 0x54E:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v18);
      if (v19)
      {
        WebKit::RemoteGraphicsContextGL::setSharedVideoFrameSemaphore((uint64_t)this, (IPC::Semaphore *)&v18);
        if (v19)
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v18);
LABEL_28:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v18);
        }
      }
      break;
    case 0x54F:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu)
      {
        uint64_t v14 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v15 = *((void *)a3 + 3);
        if (v15) {
          BOOL v16 = v14 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16)
        {
          char v17 = *(void (**)(void))(*(void *)v15 + 16);
          v17();
        }
      }
      else
      {
        WebKit::RemoteSampleBufferDisplayLayer::setShouldMaintainAspectRatio(this);
      }
      break;
    case 0x550:
      uint64_t v10 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v10 & 0xFFFFFF) >= 0x10000)
      {
        BOOL v11 = v10 != 0;
        BOOL v12 = (v10 & 0xFF00) != 0;
        uint64_t v13 = *((void *)this + 10);
        MEMORY[0x1F4171C70](v13, v11, v12);
      }
      break;
    default:
      return;
  }
}

void non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(WebKit::RemoteSampleBufferDisplayLayer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

unint64_t WebKit::RemoteSharedResourceCache::didReceiveMessage(unint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1375)
  {
    unint64_t v3 = this;
    this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    if (v4)
    {
      v5[1] = 0;
      _DWORD v5[2] = 0;
      v5[0] = this;
      return IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::remove(v3 + 24, v5);
    }
  }
  return this;
}

uint64_t WebKit::SampleBufferDisplayLayer::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1453) {
    return IPC::handleMessage<Messages::SampleBufferDisplayLayer::SetDidFail,WebKit::SampleBufferDisplayLayer,WebKit::SampleBufferDisplayLayer,void ()(BOOL)>(a3, this);
  }
  return this;
}

uint64_t IPC::handleMessage<Messages::SampleBufferDisplayLayer::SetDidFail,WebKit::SampleBufferDisplayLayer,WebKit::SampleBufferDisplayLayer,void ()(BOOL)>(void *a1, uint64_t a2)
{
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a1);
  if (v4 <= 0xFFu)
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  else
  {
    return WebKit::SampleBufferDisplayLayer::setDidFail(a2, v4 != 0);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::SampleBufferDisplayLayer::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1453) {
    return IPC::handleMessage<Messages::SampleBufferDisplayLayer::SetDidFail,WebKit::SampleBufferDisplayLayer,WebKit::SampleBufferDisplayLayer,void ()(BOOL)>(a3, this - 24);
  }
  return this;
}

void WebKit::ServiceWorkerFetchTask::didReceiveMessage(WebKit::ServiceWorkerFetchTask *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5B3:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>(a3, &v31);
      if (v37)
      {
        WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)&v31);
        if (v37)
        {
          CFTypeRef v6 = cf;
          CFTypeRef cf = 0;
          if (v6) {
            CFRelease(v6);
          }
          BOOL v7 = v35;
          uint64_t v35 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v5);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
          char v19 = v32;
          uint64_t v32 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v5);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          char v20 = v31;
          uint64_t v31 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v5);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
        }
      }
      return;
    case 0x5B4:
      IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>((uint64_t *)a3, (uint64_t)&v31);
      if (v38) {
        WebKit::ServiceWorkerFetchTask::didFinish(this, (const WebCore::NetworkLoadMetrics *)&v31);
      }
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v10);
      return;
    case 0x5B5:
      WebKit::ServiceWorkerFetchTask::didNotHandle(this);
      return;
    case 0x5B6:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>(a3, &v31);
      if (v34) {
        WebKit::ServiceWorkerFetchTask::didReceiveData((unsigned int *)this, (const IPC::SharedBufferReference *)&v31, v33);
      }
      std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v9);
      return;
    case 0x5B7:
      IPC::Decoder::decode<std::tuple<IPC::FormDataReference>>(a3, (uint64_t)&v31);
      if ((_BYTE)v32)
      {
        WTF::isIntegralOrPointerType(this);
        if ((_BYTE)v32)
        {
          uint64_t v8 = v31;
          uint64_t v31 = 0;
          if (v8) {
            WTF::RefCounted<WebCore::FormData>::deref(v8);
          }
        }
      }
      return;
    case 0x5B8:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>(a3, &v31);
      if (v40) {
        WebKit::ServiceWorkerFetchTask::didReceiveRedirectResponse(this, (uint64_t)&v31);
      }
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v31, v11);
      return;
    case 0x5B9:
      IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v42);
      char v13 = v43;
      if (!v43) {
        goto LABEL_49;
      }
      unint64_t v14 = *((void *)a3 + 1);
      BOOL v12 = *(WTF::StringImpl **)a3;
      unint64_t v15 = *((void *)a3 + 2) - *(void *)a3;
      if (v14 <= v15)
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v23 = *((void *)a3 + 3);
        if (v23)
        {
          if (v14)
          {
            (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
            uint64_t v22 = *(void *)a3;
            unint64_t v21 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v21 = 0;
            uint64_t v22 = 0;
          }
        }
        goto LABEL_46;
      }
      BOOL v16 = (unsigned __int8 *)v12 + v15;
      *((void *)a3 + 2) = v16 + 1;
      if (!v12)
      {
        unint64_t v21 = v14;
        uint64_t v22 = 0;
LABEL_46:
        unint64_t v14 = 0;
        BOOL v12 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
        uint64_t v24 = *((void *)a3 + 3);
        if (v24)
        {
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v22, v21);
            BOOL v12 = *(WTF::StringImpl **)a3;
            unint64_t v14 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v14 = 0;
            BOOL v12 = 0;
          }
        }
        goto LABEL_47;
      }
      unsigned int v17 = *v16;
      if (v17 < 2)
      {
        BOOL v18 = v17 != 0;
        std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v31, (uint64_t)v42);
        BOOL v40 = v18;
        char v13 = 1;
        goto LABEL_50;
      }
LABEL_47:
      *(void *)a3 = 0;
      *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v25 = *((void *)a3 + 3);
      if (v25 && v14) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v25 + 16))(v25, v12);
      }
      char v13 = 0;
LABEL_49:
      LOBYTE(v3nw_tcp_options_set_no_delay(options, 1) = 0;
LABEL_50:
      char v41 = v13;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v42, v12);
      if (v41 {
        || (uint64_t v28 = *(void *)a3,
      }
            uint64_t v29 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0,
            (uint64_t v30 = *((void *)a3 + 3)) != 0)
        && v29
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28), v41))
      {
        WebKit::ServiceWorkerFetchTask::didReceiveResponse(this, (uint64_t)&v31, v40);
        if (v41)
        {
          CFTypeRef v27 = v39;
          CFTypeRef v39 = 0;
          if (v27) {
            CFRelease(v27);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v31, v26);
        }
      }
      return;
    case 0x5BA:
      WebKit::ServiceWorkerFetchTask::usePreload(this);
      return;
    case 0x5BB:
      WebKit::ServiceWorkerFetchTask::workerClosed(this);
      return;
    default:
      return;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages37RemoteSampleBufferDisplayLayerManager11CreateLayerEN6WebKit37RemoteSampleBufferDisplayLayerManagerES8_FvNS_23ObjectIdentifierGenericINS7_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BE948;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages37RemoteSampleBufferDisplayLayerManager11CreateLayerEN6WebKit37RemoteSampleBufferDisplayLayerManagerES8_FvNS_23ObjectIdentifierGenericINS7_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BE948;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages37RemoteSampleBufferDisplayLayerManager11CreateLayerEN6WebKit37RemoteSampleBufferDisplayLayerManagerES8_FvNS_23ObjectIdentifierGenericINS7_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int16 v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v4 = 3186;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(v4, (uint64_t)&v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebCore::ResourceResponseBase *IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[256])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t result = (WebCore::ResourceResponseBase *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceResponseBase *)v7();
    }
  }
  return result;
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v6);
  char v4 = v7;
  if (v7)
  {
    std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)a2, (uint64_t)v6);
    char v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[256] = v4;
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v6, v3);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 128))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::NetworkLoadMetrics>(a1, (uint64_t)v10);
  char v4 = v16;
  if (v16)
  {
    long long v5 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v10[4];
    long long v6 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v6;
    uint64_t v7 = v12;
    *(void *)(a2 + 80) = v11;
    *(void *)(a2 + 88) = v7;
    *(_OWORD *)(a2 + 96) = v13;
    uint64_t v8 = v15;
    *(void *)(a2 + 112) = v14;
    *(void *)(a2 + 120) = v8;
    char v4 = 1;
    uint64_t v12 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 128) = v4;
  return std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v3);
}

uint64_t API::Object::wrap(uint64_t this, API::Object *a2)
{
  if (this) {
    return *(void *)(this + 8);
  }
  return this;
}

void API::Object::toNSObject(API::Object *this@<X0>, void *a2@<X8>)
{
  int v4 = (*(uint64_t (**)(API::Object *))(*(void *)this + 16))(this);
  if (v4 > 20)
  {
    switch(v4)
    {
      case ' ':
        uint64_t v19 = [objc_alloc(NSNumber) initWithBool:*((unsigned __int8 *)this + 16)];
        goto LABEL_46;
      case '!':
        uint64_t v19 = [objc_alloc(NSNumber) initWithDouble:*((double *)this + 2)];
        goto LABEL_46;
      case '""':
        uint64_t v19 = [objc_alloc(NSNumber) initWithUnsignedLongLong:*((void *)this + 2)];
        goto LABEL_46;
      case '#':
        uint64_t v19 = [objc_alloc(NSNumber) initWithLongLong:*((void *)this + 2)];
LABEL_46:
        *a2 = v19;
        return;
      default:
        if (v4 != 21) {
          goto LABEL_42;
        }
        WTF::String::isolatedCopy();
        if (v28)
        {
          uint64_t v25 = (__CFString *)WTF::StringImpl::operator NSString *();
          *a2 = v25;
          if (!v25) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v25 = &stru_1EEA10550;
          *a2 = &stru_1EEA10550;
        }
        CFRetain(v25);
LABEL_39:
        CFTypeRef v27 = v28;
        uint64_t v28 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v26);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        break;
    }
  }
  else
  {
    switch(v4)
    {
      case 1:
        uint64_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 7)];
        uint64_t v20 = *((unsigned int *)this + 7);
        if (v20)
        {
          unint64_t v21 = (API::Object **)*((void *)this + 2);
          uint64_t v22 = 8 * v20;
          do
          {
            if (*v21)
            {
              API::Object::toNSObject((uint64_t *)&v28, *v21);
              uint64_t v23 = v28;
              if (v28)
              {
                [v10 addObject:v28];
                CFRelease(v23);
              }
            }
            ++v21;
            v22 -= 8;
          }
          while (v22);
        }
LABEL_30:
        *a2 = v10;
        return;
      case 8:
        uint64_t v24 = (const void *)*((void *)this + 1);
        *a2 = v24;
        if (v24)
        {
          CFRetain(v24);
        }
        break;
      case 9:
        id v5 = objc_alloc(MEMORY[0x1E4F1CA60]);
        uint64_t v8 = *((void *)this + 2);
        uint64_t v7 = (void **)((char *)this + 16);
        uint64_t v6 = v8;
        if (v8) {
          uint64_t v9 = *(unsigned int *)(v6 - 12);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = (void *)[v5 initWithCapacity:v9];
        uint64_t v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
        uint64_t v12 = v11;
        uint64_t v14 = v13;
        if (*v7) {
          uint64_t v15 = (uint64_t)&(*v7)[2 * *((unsigned int *)*v7 - 1)];
        }
        else {
          uint64_t v15 = 0;
        }
        if ((void *)v15 != v11)
        {
          do
          {
            char v16 = (API::Object *)v12[1];
            if (v16)
            {
              API::Object::toNSObject((uint64_t *)&v28, v16);
              unsigned int v17 = v28;
              if (v28)
              {
                if (*v12) {
                  BOOL v18 = (__CFString *)WTF::StringImpl::operator NSString *();
                }
                else {
                  BOOL v18 = &stru_1EEA10550;
                }
                [v10 setObject:v17 forKey:v18];
                CFRelease(v17);
              }
            }
            while (1)
            {
              v12 += 2;
              if (v12 == v14) {
                break;
              }
              if ((unint64_t)(*v12 + 1) > 1) {
                goto LABEL_19;
              }
            }
            uint64_t v12 = v14;
LABEL_19:
            ;
          }
          while (v12 != (void *)v15);
        }
        goto LABEL_30;
      default:
LABEL_42:
        *a2 = 0;
        break;
    }
  }
}

void sub_198AB1B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void API::Object::fromNSObject(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    MEMORY[0x19972EAD0](&v33, a1);
    API::String::create(&v33, (WebKit **)&v21);
    *a2 = (uint64_t)v21;
    unint64_t v21 = 0;
    id v5 = v33;
    unint64_t v33 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      CFTypeRef cf = a1;
      if (a1) {
        CFRetain(a1);
      }
      API::Data::createWithoutCopying((id *)&cf, (WebKit **)&v21);
      *a2 = (uint64_t)v21;
      unint64_t v21 = 0;
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [a1 doubleValue];
        API::Double::create(v6, &v21);
        *a2 = (uint64_t)v21;
        return;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
        unint64_t v7 = [a1 count];
        if (v7)
        {
          if (v7 >> 29)
          {
            __break(0xC471u);
            return;
          }
          LODWORD(v22) = v7;
          unint64_t v21 = (double *)WTF::fastMalloc((WTF *)(8 * v7));
        }
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        uint64_t v8 = [a1 countByEnumeratingWithState:&v28 objects:v34 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v29;
          do
          {
            uint64_t v10 = 0;
            do
            {
              if (*(void *)v29 != v9) {
                objc_enumerationMutation(a1);
              }
              API::Object::fromNSObject(&v33, *(void *)(*((void *)&v28 + 1) + 8 * v10));
              uint64_t v11 = v33;
              if (v33)
              {
                LODWORD(v12) = HIDWORD(v22);
                if (HIDWORD(v22) == v22)
                {
                  uint64_t v14 = (double *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, HIDWORD(v22) + 1, (unint64_t)&v33);
                  uint64_t v12 = HIDWORD(v22);
                  uint64_t v15 = v21;
                  double v16 = *v14;
                  *uint64_t v14 = 0.0;
                  v15[v12] = v16;
                }
                else
                {
                  unint64_t v33 = 0;
                  *(void *)&v21[HIDWORD(v22)] = v11;
                }
                HIDWORD(v22) = v12 + 1;
                long long v13 = v33;
                unint64_t v33 = 0;
                if (v13) {
                  CFRelease(*((CFTypeRef *)v13 + 1));
                }
              }
              ++v10;
            }
            while (v8 != v10);
            uint64_t v17 = [a1 countByEnumeratingWithState:&v28 objects:v34 count:16];
            uint64_t v8 = v17;
          }
          while (v17);
        }
        API::Array::create((uint64_t *)&v21, a2);
        WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unint64_t v21 = 0;
          uint64_t v22 = &v21;
          uint64_t v23 = 0x3812000000;
          uint64_t v24 = __Block_byref_object_copy__3;
          uint64_t v25 = __Block_byref_object_dispose__3;
          uint64_t v26 = &unk_19964AFC1;
          uint64_t v27 = 0;
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 3221225472;
          v20[2] = ___ZN3API6Object12fromNSObjectEPU25objcproto14NSSecureCoding8NSObject_block_invoke;
          v20[3] = &unk_1E5811DF0;
          v20[4] = &v21;
          [a1 enumerateKeysAndObjectsUsingBlock:v20];
          API::Dictionary::create((uint64_t *)v22 + 6, (WebKit **)a2);
          _Block_object_dispose(&v21, 8);
          if (v27) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v19);
          }
        }
        else
        {
          *a2 = 0;
        }
      }
    }
  }
}

void sub_198AB1FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,CFTypeRef cf,WTF::StringImpl *a31)
{
  _Block_object_dispose(&a14, 8);
  if (a20) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v32);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__3(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

void ___ZN3API6Object12fromNSObjectEPU25objcproto14NSSecureCoding8NSObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  API::Object::fromNSObject(&v11, a3);
  uint64_t v5 = v11;
  if (v11)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v11 = 0;
LABEL_9:
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return;
    }
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    MEMORY[0x19972EAD0](&v10, a2);
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)(v6 + 48), &v10, &v11, (uint64_t)v9);
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v5 = v11;
    uint64_t v11 = 0;
    if (v5) {
      goto LABEL_9;
    }
  }
}

void sub_198AB2138(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ARKitLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit12ARKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = 0;
  if (qword_1EB359018 != -1) {
    dispatch_once(&qword_1EB359018, block);
  }
  return qword_1EB359010;
}

uint64_t ___ZN6WebKit12ARKitLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  qword_1EB359010 = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initARQuickLookPreviewItem(WebKit *this)
{
  if (qword_1EB359028 != -1) {
    dispatch_once(&qword_1EB359028, &__block_literal_global_13);
  }
  return qword_1EB359030;
}

void WebKit::AuxiliaryProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 0xEF4) {
    unsigned int v4 = 3828;
  }
  else {
    unsigned int v4 = a3;
  }
  uint64_t v5 = &(&IPC::Detail::messageDescriptions)[3 * v4];
  uint64_t v6 = v5[1];
  BOOL v7 = v6 != 0;
  size_t v8 = (size_t)(v6 - 1);
  if (v7) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  size_t v10 = v9 >> 31;
  if (v9 >> 31)
  {
LABEL_58:
    __break(0xC471u);
    goto LABEL_62;
  }
  unsigned __int16 v12 = a3;
  long long v13 = *v5;
  unsigned __int16 v14 = a3;
  do
  {
    LODWORD(v10) = v10 + 1;
    unsigned int v15 = v14;
    v14 /= 0xAu;
  }
  while (v15 > 9);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v19 = -(int)a4;
    int v16 = 1;
    do
    {
      ++v16;
      BOOL v7 = v19 >= 0xA;
      v19 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    int v16 = 0;
    unsigned int v17 = a4;
    do
    {
      ++v16;
      BOOL v18 = v17 > 9;
      v17 /= 0xAu;
    }
    while (v18);
  }
  if ((v16 & 0x80000000) == 0)
  {
    BOOL v20 = __OFADD__(v16, 1);
    int v21 = v16 + 1;
    if (!v20)
    {
      BOOL v20 = __OFADD__(v21, 2);
      int v22 = v21 + 2;
      BOOL v23 = v20;
      if ((v10 & 0x80000000) == 0 && !v23)
      {
        BOOL v20 = __OFADD__(v10, v22);
        int v24 = v10 + v22;
        if (!v20)
        {
          BOOL v20 = __OFADD__(v24, 3);
          int v25 = v24 + 3;
          BOOL v26 = v20;
          if ((v9 & 0x80000000) == 0 && !v26)
          {
            BOOL v20 = __OFADD__(v9, v25);
            int v27 = v9 + v25;
            if (!v20)
            {
              uint64_t v28 = (v27 + 27);
              if (!__OFADD__(v27, 27))
              {
                if (v27 == -27)
                {
                  long long v29 = (_DWORD *)MEMORY[0x1E4F30960];
                  *MEMORY[0x1E4F30960] += 2;
LABEL_47:
                  uint64_t v47 = v29;
                  WTF::String::utf8();
                  if (v46) {
                    uint64_t v42 = (WTF *)((char *)v46 + 16);
                  }
                  else {
                    uint64_t v42 = 0;
                  }
                  WTFLogAlways();
                  WTF::setCrashLogMessage(v42, v43);
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 1) {
                      WTF::fastFree(v46, v44);
                    }
                    else {
                      --*(_DWORD *)v46;
                    }
                  }
                  WTFCrashWithInfoImpl(119, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/Cocoa/AuxiliaryProcessCocoa.mm", "virtual void WebKit::AuxiliaryProcess::didReceiveInvalidMessage(IPC::Connection &, IPC::MessageName, int32_t)");
                  __break(1u);
                  goto LABEL_58;
                }
                if ((v28 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
                  long long v29 = v47;
                  if (v47)
                  {
                    *uint64_t v47 = 2;
                    v29[1] = v28;
                    *((void *)v29 + nw_tcp_options_set_no_delay(options, 1) = v29 + 5;
                    v29[4] = 4;
                    qmemcpy(v29 + 5, "Received invalid message: '", 27);
                    long long v30 = (char *)v29 + 47;
                    if (v9)
                    {
                      if (v9 == 1) {
                        char *v30 = *v13;
                      }
                      else {
                        memcpy((char *)v29 + 47, v13, v9);
                      }
                    }
                    uint64_t v31 = 0;
                    uint64_t v32 = &v30[v9];
                    v32[2] = 40;
                    *(_WORD *)uint64_t v32 = 8231;
                    unsigned __int16 v33 = v12;
                    do
                    {
                      unsigned int v34 = v33;
                      *((unsigned char *)&v47 + v31-- + 6) = (v33 % 0xAu) | 0x30;
                      v33 /= 0xAu;
                    }
                    while (v34 > 9);
                    uint64_t v35 = v32 + 3;
                    if (v31 + 8 <= 7) {
                      memcpy(v35, (char *)&v47 + v31 + 7, -v31);
                    }
                    int v36 = 0;
                    do
                    {
                      ++v36;
                      unsigned int v37 = v12;
                      v12 /= 0xAu;
                    }
                    while (v37 > 9);
                    char v38 = &v35[v36];
                    *(_WORD *)char v38 = 8236;
                    CFTypeRef v39 = v38 + 2;
                    WTF::writeIntegerToBuffer<unsigned char,int>(a4, v39);
                    if ((a4 & 0x80000000) != 0)
                    {
                      unsigned int v45 = -(int)a4;
                      unsigned int v40 = 1;
                      do
                      {
                        ++v40;
                        BOOL v7 = v45 >= 0xA;
                        v45 /= 0xAu;
                      }
                      while (v7);
                    }
                    else
                    {
                      unsigned int v40 = 0;
                      unsigned int v41 = a4;
                      do
                      {
                        ++v40;
                        BOOL v7 = v41 >= 0xA;
                        v41 /= 0xAu;
                      }
                      while (v7);
                    }
                    *((unsigned char *)v39 + v40) = 41;
                    goto LABEL_47;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __break(0xC471u);
LABEL_62:
  JUMPOUT(0x198AB260CLL);
}

void sub_198AB263C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *___ZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)MEMORY[0x199741920]();
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    size_t v10 = 0;
  }
  else
  {
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v4 + 128))(&cf, v4);
    if ([(id)cf count]
      && (uint64_t v13 = 0,
          v6 = (void *)[MEMORY[0x1E4F28F98] dataWithPropertyList:cf format:200 options:0 error:&v13], (BOOL v7 = v6) != 0))
    {
      size_t v8 = [v6 length] + 200;
      size_t v9 = (char *)malloc_type_malloc(v8, 0x26207753uLL);
      size_t v10 = v9;
      if (v9)
      {
        bzero(v9, v8);
        *(_DWORD *)size_t v10 = 1;
        *((_DWORD *)v10 + nw_tcp_options_set_no_delay(options, 1) = [v7 length];
        strlcpy(v10 + 136, *(const char **)(a1 + 40), 0x40uLL);
        memcpy(v10 + 200, (const void *)[v7 bytes], objc_msgSend(v7, "length"));
      }
    }
    else
    {
      size_t v10 = 0;
    }
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  return v10;
}

void sub_198AB2814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuxiliaryProcess::preferenceDidUpdate(uint64_t a1, WTF::String *a2, WTF::String *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a4 + 8))
  {
    unsigned int v19 = 0;
LABEL_10:
    if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
    {
      WTF::String::createCFString((uint64_t *)&v29, a3);
      CFStringRef v20 = v29;
      WTF::String::createCFString((uint64_t *)&v28, a2);
      CFPreferencesSetValue(v20, v19, v28, (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      CFStringRef v21 = v28;
      CFStringRef v28 = 0;
      if (v21) {
        CFRelease(v21);
      }
    }
    else
    {
      WTF::String::createCFString((uint64_t *)&v29, a3);
      CFPreferencesSetValue(v29, v19, (CFStringRef)*MEMORY[0x1E4F1D3B8], (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    }
    CFStringRef v22 = v29;
    CFStringRef v29 = 0;
    if (v22) {
      CFRelease(v22);
    }
    BOOL v23 = *(void (**)(uint64_t, WTF::String *, WTF::String *, const void *))(*(void *)a1 + 136);
    v23(a1, a2, a3, v19);
    return;
  }
  id v8 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  if (*(unsigned char *)(a4 + 8))
  {
    uint64_t v4 = v8;
    int v24 = a3;
    if (*(void *)a4)
    {
      size_t v9 = (__CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  size_t v9 = &stru_1EEA10550;
LABEL_5:
  size_t v10 = (const void *)[v4 initWithBase64EncodedString:v9 options:0];
  BOOL v26 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v25 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v18 = objc_opt_class();
  CFStringRef v29 = 0;
  unsigned int v19 = (const void *)objc_msgSend(MEMORY[0x1E4F28DC0], "_strictlyUnarchivedObjectOfClasses:fromData:error:", objc_msgSend(v26, "setWithObjects:", v25, v11, v12, v13, v14, v15, v16, v17, v18, objc_opt_class(), 0), v10, &v29);
  if (v10) {
    CFRelease(v10);
  }
  a3 = v24;
  if (v19) {
    goto LABEL_10;
  }
}

void sub_198AB2AF4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(const void **)(v1 - 96);
  *(void *)(v1 - 96) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(v1 - 88);
  *(void *)(v1 - 88) = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcess::preferencesDidUpdate(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2)
  {
    uint64_t v6 = *((unsigned int *)v5 - 1);
    BOOL v7 = &v5[3 * v6];
    if (*((_DWORD *)v5 - 3))
    {
      id v8 = *(void **)a2;
      if (v6)
      {
        uint64_t v9 = 24 * v6;
        id v8 = *(void **)a2;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 3;
          v9 -= 24;
          if (!v9)
          {
            id v8 = v7;
            break;
          }
        }
      }
      if (v5) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
    id v8 = &v5[3 * v6];
  }
  else
  {
    id v8 = 0;
    LODWORD(v6) = 0;
  }
  BOOL v7 = &v5[3 * v6];
  if (v5)
  {
LABEL_9:
    size_t v10 = &v5[3 * *((unsigned int *)v5 - 1)];
    goto LABEL_14;
  }
LABEL_13:
  size_t v10 = 0;
LABEL_14:
  while (v8 != v10)
  {
    CFStringRef v21 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, void *, void *))(*(void *)v4 + 64))(v4, &v21, v8, v8 + 1);
    uint64_t result = (uint64_t)v21;
    CFStringRef v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v11 = v8 + 3;
    id v8 = v7;
    if (v11 != v7)
    {
      id v8 = v11;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 3;
        if (v8 == v7)
        {
          id v8 = v7;
          break;
        }
      }
    }
  }
  uint64_t v12 = *(WTF ***)a3;
  if (!*(void *)a3)
  {
    uint64_t v16 = 0;
    uint64_t v13 = 0;
    goto LABEL_37;
  }
  uint64_t v13 = *((unsigned int *)v12 - 1);
  uint64_t v14 = &v12[4 * v13];
  if (!*((_DWORD *)v12 - 3))
  {
    uint64_t v16 = &v12[4 * v13];
LABEL_37:
    uint64_t v14 = &v12[4 * v13];
    if (v12) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (v13)
  {
    uint64_t v15 = 32 * v13;
    while (1)
    {
      uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v12, (uint64_t)a2, a3);
      if ((result & 1) == 0 && *v12 != (WTF *)-1) {
        break;
      }
      v12 += 4;
      v15 -= 32;
      if (!v15)
      {
        uint64_t v12 = v14;
        break;
      }
    }
    uint64_t v16 = v12;
    uint64_t v12 = *(WTF ***)a3;
    if (!*(void *)a3) {
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v17 = &v12[4 * *((unsigned int *)v12 - 1)];
    goto LABEL_41;
  }
  uint64_t v16 = *(WTF ***)a3;
  if (v12) {
    goto LABEL_38;
  }
LABEL_40:
  uint64_t v17 = 0;
LABEL_41:
  while (v16 != v17)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF **, WTF **, WTF **))(*(void *)v4 + 64))(v4, v16, v16 + 1, v16 + 2);
    CFStringRef v20 = v16 + 4;
    uint64_t v16 = v14;
    if (v20 != v14)
    {
      uint64_t v16 = v20;
      while (1)
      {
        uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v16, v18, v19);
        if ((result & 1) == 0 && *v16 != (WTF *)-1) {
          break;
        }
        v16 += 4;
        if (v16 == v14)
        {
          uint64_t v16 = v14;
          break;
        }
      }
    }
  }
  return result;
}

void sub_198AB2DA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::AuxiliaryProcess::handleAXPreferenceChange(WebKit::AuxiliaryProcess *this, WTF **a2, const WTF::String *a3, objc_object *a4)
{
  {
    uint64_t result = (WTF::StringImpl *)libAccessibilityLibrary(void)::dylib;
    if (!libAccessibilityLibrary(void)::dylib) {
      return result;
    }
  }
  else
  {
    uint64_t result = (WTF::StringImpl *)dlopen("/usr/lib/libAccessibility.dylib", 2);
    libAccessibilityLibrary(void)::dylib = (uint64_t)result;
    if (!result) {
      return result;
    }
  }
  MEMORY[0x19972EAD0](&v10, *MEMORY[0x1E4FB8FD8], a3, a4);
  int v8 = WTF::equal(*a2, v10, v6);
  uint64_t result = v10;
  size_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      if (!v8) {
        return result;
      }
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v8) {
    return result;
  }
LABEL_9:
  uint64_t result = (WTF::StringImpl *)_AXSUpdateWebAccessibilitySettingsPtr();
  if (result)
  {
    uint64_t v9 = (uint64_t (*)(void))_AXSUpdateWebAccessibilitySettingsPtr();
    return (WTF::StringImpl *)v9();
  }
  return result;
}

void sub_198AB2EA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_AXSUpdateWebAccessibilitySettingsPtr(void)
{
    return (void *)_AXSUpdateWebAccessibilitySettingsPtr(void)::ptr;
  {
    uint64_t v1 = (void *)libAccessibilityLibrary(void)::dylib;
  }
  else
  {
    uint64_t v1 = dlopen("/usr/lib/libAccessibility.dylib", 2);
    libAccessibilityLibrary(void)::dylib = (uint64_t)v1;
  }
  uint64_t result = dlsym(v1, "_AXSUpdateWebAccessibilitySettings");
  _AXSUpdateWebAccessibilitySettingsPtr(void)::ptr = (uint64_t)result;
  return result;
}

uint64_t WebKit::AuxiliaryProcess::handlePreferenceChange(WebKit::AuxiliaryProcess *this, WTF **a2, const WTF::String *a3, objc_object *a4)
{
  WebKit::AuxiliaryProcess::handleAXPreferenceChange(this, a2, a3, a4);
  uint64_t v6 = *(uint64_t (**)(WebKit::AuxiliaryProcess *, const WTF::String *))(*(void *)this + 144);

  return v6(this, a3);
}

void WebKit::codeSigningIdentifier(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v4 = SecTaskCopySigningIdentifier(this, 0);
  MEMORY[0x19972EAD0](a2, v4);
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198AB3028(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::codeSigningIdentifierAndPlatformBinaryStatus(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v5 = *((_OWORD *)this + 1);
  *(_OWORD *)token.val = *(_OWORD *)this;
  *(_OWORD *)&token.val[4] = v5;
  uint64_t v6 = SecTaskCreateWithAuditToken(v4, &token);
  uint32_t CodeSignStatus = SecTaskGetCodeSignStatus(v6);
  WebKit::codeSigningIdentifier(v6, (uint64_t)&v11);
  uint64_t v9 = v11;
  if (v11)
  {
    int v10 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 8) = (CodeSignStatus & 0x4000000) != 0;
    uint64_t v11 = 0;
    if (v10) {
      *(_DWORD *)uint64_t v9 = v10;
    }
    else {
      WTF::StringImpl::destroy(v9, v8);
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = (CodeSignStatus & 0x4000000) != 0;
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_198AB30F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::codeSigningIdentifier@<X0>(WebKit *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  long long v4 = *((_OWORD *)this + 1);
  v8[0] = *(_OWORD *)this;
  v8[1] = v4;
  WebKit::codeSigningIdentifierAndPlatformBinaryStatus((WebKit *)v8, (uint64_t)&v9);
  uint64_t result = v9;
  if (v9)
  {
    int v7 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    *a2 = result;
    if (v7)
    {
      *(_DWORD *)uint64_t result = v7;
    }
    else
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

Class WebKit::CompletionHandlerCallChecker::create@<X0>(WebKit::CompletionHandlerCallChecker *this@<X0>, objc_object *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
  Class result = object_getClass(this);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = result;
  *(void *)(v7 + 16) = a2;
  *(unsigned char *)(v7 + 24) = 0;
  *a3 = v7;
  return result;
}

void sub_198AB31EC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CompletionHandlerCallChecker::~CompletionHandlerCallChecker(SEL *this)
{
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v2 = WebKit::CompletionHandlerCallChecker::classImplementingDelegateMethod((WebKit::CompletionHandlerCallChecker *)this);
    BOOL v3 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v4 = *MEMORY[0x1E4F1C3B8];
    isMetaClass Class = class_isMetaClass(v2);
    uint64_t v7 = NSStringFromClass(v2);
    int v8 = NSStringFromSelector(this[2]);
    uint64_t v6 = 45;
    if (isMetaClass) {
      uint64_t v6 = 43;
    }
    [v3 raise:v4, @"Completion handler passed to %c[%@ %@] was not called", v6, v7, v8 format];
  }
}

objc_class *WebKit::CompletionHandlerCallChecker::classImplementingDelegateMethod(WebKit::CompletionHandlerCallChecker *this)
{
  uint64_t v2 = (objc_class *)*((void *)this + 1);
  InstanceMethod = class_getInstanceMethod(v2, *((SEL *)this + 2));
  for (int i = v2; ; int i = v6)
  {
    Superclass = class_getSuperclass(i);
    if (!Superclass) {
      break;
    }
    uint64_t v6 = Superclass;
    if (class_getInstanceMethod(Superclass, *((SEL *)this + 2)) != InstanceMethod) {
      break;
    }
    uint64_t v2 = v6;
  }
  return v2;
}

BOOL WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(SEL *this)
{
  int v1 = *((unsigned __int8 *)this + 24);
  if (*((unsigned char *)this + 24))
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB359038, memory_order_acquire) != -1)
    {
      uint64_t v13 = &v11;
      uint64_t v12 = &v13;
      std::__call_once(&qword_1EB359038, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldThrowExceptionForDuplicateCompletionHandlerCall(void)::$_0 &&>>);
    }
    if (byte_1EB35900C)
    {
      BOOL v3 = WebKit::CompletionHandlerCallChecker::classImplementingDelegateMethod((WebKit::CompletionHandlerCallChecker *)this);
      uint64_t v4 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v5 = *MEMORY[0x1E4F1C3B8];
      isMetaClass Class = class_isMetaClass(v3);
      uint64_t v9 = NSStringFromClass(v3);
      int v10 = NSStringFromSelector(this[2]);
      uint64_t v7 = 45;
      if (isMetaClass) {
        uint64_t v7 = 43;
      }
      [v4 raise:v5, @"Completion handler passed to %c[%@ %@] was called more than once", v7, v9, v10 format];
    }
  }
  return v1 != 0;
}

uint64_t *WebKit::appBoundDomainsForTesting(WebKit *this, const WTF::String *a2)
{
  if (!MEMORY[0x19972E990](*(void *)this, "inAppBrowserPrivacyTestIdentifier", 33)) {
    return 0;
  }
    return &WebKit::appBoundDomainsForTesting(WTF::String const&)::domains;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v5, &v6);
  uint64_t v4 = v5;
  WebKit::appBoundDomainsForTesting(WTF::String const&)::domains = (uint64_t)v6;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return &WebKit::appBoundDomainsForTesting(WTF::String const&)::domains;
}

void sub_198AB34D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::hasProhibitedUsageStrings(WebKit *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = atomic_load(byte_1EB35900D);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "infoDictionary");
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x198AB3708);
    }
    BOOL v3 = (void *)v2;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v4 = [&unk_1EEA53098 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v14 != v5) {
            objc_enumerationMutation(&unk_1EEA53098);
          }
          uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if ([v3 objectForKey:v7])
          {
            MEMORY[0x19972EAD0](&v12, [NSString stringWithFormat:@"[In-App Browser Privacy] %@ used prohibited usage string %@.", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), v7]);
            WTF::String::utf8();
            WTFLogAlways();
            if (v11)
            {
              if (*(_DWORD *)v11 == 1) {
                WTF::fastFree(v11, v8);
              }
              else {
                --*(_DWORD *)v11;
              }
            }
            byte_1EB35900A = 1;
            uint64_t v9 = v12;
            uint64_t v12 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2) {
                WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v8);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
            goto LABEL_20;
          }
        }
        uint64_t v4 = [&unk_1EEA53098 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_20:
    atomic_store(1u, byte_1EB35900D);
  }
  return byte_1EB35900A;
}

void sub_198AB3710(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1) {
      WTF::fastFree(a11, a2);
    }
    else {
      --*(_DWORD *)a11;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(WebKit *this)
{
    return WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(void)::staticShouldEvaluateJavaScriptWithoutTransientActivation != 0;
  char v2 = WTF::linkedOnOrAfterSDKWithBehavior();
  uint64_t result = 1;
  if ((v2 & 1) == 0) {
    uint64_t result = WebKit::isFullWebBrowserOrRunningTest((WebKit *)1);
  }
  WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(void)::staticShouldEvaluateJavaScriptWithoutTransientActivation = result;
  return result;
}

void WebKit::AuxiliaryProcess::additionalStateForDiagnosticReport(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::AuxiliaryProcess::shouldOverrideQuarantine(WebKit::AuxiliaryProcess *this)
{
  return 1;
}

uint64_t ___ZN6WebKitL26initARQuickLookPreviewItemEv_block_invoke(WebKit *a1)
{
  WebKit::ARKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ARQuickLookPreviewItem");
  qword_1EB359030 = result;
  if (result)
  {
    WebKit::getARQuickLookPreviewItemClass[0] = WebKit::ARQuickLookPreviewItemFunction;
  }
  else
  {
    uint64_t result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ARQuickLookPreviewItemFunction(WebKit *this)
{
  return qword_1EB359030;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldThrowExceptionForDuplicateCompletionHandlerCall(void)::$_0 &&>>()
{
  uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
  byte_1EB35900C = result;
  return result;
}

uint64_t WTF::writeIntegerToBuffer<unsigned char,int>(uint64_t result, void *__dst)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if ((result & 0x80000000) != 0)
  {
    unint64_t v4 = -(int)result;
    return WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(v4, __dst);
  }
  else
  {
    uint64_t v2 = 0;
    do
    {
      v5[v2-- + 12] = (result % 0xA) | 0x30;
      BOOL v3 = result > 9;
      uint64_t result = result / 0xAuLL;
    }
    while (v3);
    if (v2 + 14 <= 13) {
      return (uint64_t)memcpy(__dst, &v5[v2 + 13], -v2);
    }
  }
  return result;
}

unint64_t WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(unint64_t result, void *__dst)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  do
  {
    v6[v2-- + 12] = (result % 0xA) | 0x30;
    BOOL v3 = result > 9;
    uint64_t result = result / 0xAuLL;
  }
  while (v3);
  uint64_t v4 = v2 + 12;
  uint64_t v5 = &v6[v2 + 12];
  *uint64_t v5 = 45;
  if (v2 + 14 <= 14)
  {
    if (v4 <= 12) {
      uint64_t v4 = 12;
    }
    return (unint64_t)memcpy(__dst, v5, v4 - v2 - 11);
  }
  return result;
}

unsigned int *WTF::StringTypeAdapter<int,void>::writeTo<char16_t>(unsigned int *result, _WORD *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *result;
  if ((*result & 0x80000000) != 0)
  {
    unsigned int v6 = -v2;
    uint64_t v7 = 12;
    do
    {
      v8[v7--] = (v6 % 0xA) | 0x30;
      BOOL v4 = v6 > 9;
      v6 /= 0xAu;
    }
    while (v4);
    v8[v7] = 45;
    if (v7 + 2 <= 14)
    {
      do
      {
        *a2++ = v8[v7];
        BOOL v4 = v7++ < 12;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      v8[v3-- + 12] = (v2 % 0xA) | 0x30;
      BOOL v4 = v2 > 9;
      v2 /= 0xAu;
    }
    while (v4);
    if (v3 + 14 <= 13)
    {
      do
        *a2++ = *((unsigned __int8 *)&v9 + v3);
      while (!__CFADD__(v3++, 1));
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9BE9E0;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

void WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess(WebKit::GPUConnectionToWebProcess *this)
{
  *(void *)this = &unk_1EE9BEB70;
  *((void *)this + 3) = &unk_1EE9BEBB8;
  unsigned int v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198AB3FE0);
  }
  IPC::Connection::invalidate(*((void *)this + 7));
  uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 21);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 2);
  WebKit::RemoteSampleBufferDisplayLayerManager::close((WebKit::RemoteSampleBufferDisplayLayerManager *)v3);
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*((atomic_uchar **)v3 + 2), v4);
  }
  --WebKit::GPUConnectionToWebProcess::gObjectCountForTesting;
  uint64_t v5 = *((void *)this + 45);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, (WTF::StringImpl *)v4);
  }
  unsigned int v6 = (_DWORD *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v6)
  {
    if (v6[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[4];
    }
  }
  uint64_t v7 = *((void *)this + 42);
  if (v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, v4);
  }
  uint64_t v8 = *((void *)this + 41);
  if (v8) {
    WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v8, v4);
  }
  std::unique_ptr<WebKit::RemoteMediaEngineConfigurationFactoryProxy>::reset[abi:sn180100]((unsigned int ***)this + 40, 0);
  uint64_t v9 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  std::unique_ptr<WebKit::RemoteLegacyCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteLegacyCDMFactoryProxy **)this + 38, 0);
  uint64_t v10 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  std::unique_ptr<WebKit::RemoteCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteCDMFactoryProxy **)this + 35, 0);
  uint64_t v13 = *((void *)this + 34);
  if (v13) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v13, v12);
  }
  uint64_t v14 = *((void *)this + 33);
  if (v14) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v14, v12);
  }
  uint64_t v15 = *((void *)this + 32);
  if (v15) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v15, v12);
  }
  IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::~ScopedActiveMessageReceiveQueue((uint64_t *)this + 26);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::~ScopedActiveMessageReceiveQueue((uint64_t *)this + 25);
  uint64_t v17 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v17) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v17, v16);
  }
  uint64_t v18 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 21);
  *((void *)this + 2nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v19) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 16), v16);
  }
  uint64_t v20 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v23) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 16), v16);
  }
  uint64_t v24 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v24) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v24 + 16));
  }
  uint64_t v25 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::GPUConnectionToWebProcess *)((char *)this + 96));
  BOOL v26 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v26 && atomic_fetch_add((atomic_uint *volatile)v26 + 30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v26 + 30);
    (*(void (**)(unsigned int *))(*(void *)v26 + 8))(v26);
  }
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::GPUConnectionToWebProcess *)((char *)this + 64));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 7);
  CFStringRef v28 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v28 && atomic_fetch_add((atomic_uint *volatile)v28 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v28 + 2);
    (*(void (**)(unsigned int *))(*(void *)v28 + 8))(v28);
  }
  *((void *)this + 3) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v27);
  WTF::WeakPtrFactory<WebCore::NowPlayingManagerClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v29);
}

void non-virtual thunk to'WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess(WebKit::GPUConnectionToWebProcess *this)
{
}

{
  WebKit::GPUConnectionToWebProcess::operator delete((WebKit::GPUConnectionToWebProcess *)((char *)this - 24));
}

double WebKit::GPUConnectionToWebProcess::operator delete(WebKit::GPUConnectionToWebProcess *a1)
{
  WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess(a1);
  if (atomic_load((unsigned int *)(v1 + 40)))
  {
    *(void *)(v1 + 400) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 368) = 0u;
    *(_OWORD *)(v1 + 384) = 0u;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 352) = 0u;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 320) = 0u;
    *(_OWORD *)(v1 + 272) = 0u;
    *(_OWORD *)(v1 + 288) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

void WebKit::GPUConnectionToWebProcess::didClose(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2)
{
  if (*((void *)this + 36))
  {
    uint64_t v14 = (atomic_uint *)*((void *)this + 10);
    atomic_fetch_add(v14 + 30, 1u);
    uint64_t v15 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::GPUProcess::audioSessionManager((WebKit::GPUProcess *)v14);
    WebKit::RemoteAudioSessionProxyManager::removeProxy(v15, *((WebKit::RemoteAudioSessionProxy **)this + 36));
    if (v14 && atomic_fetch_add(v14 + 30, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v14 + 30);
      (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
    }
    uint64_t v16 = *((void *)this + 36);
    *((void *)this + 36) = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  uint64_t v3 = (WebKit::UserMediaCaptureManagerProxy *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3)
  {
    WebKit::UserMediaCaptureManagerProxy::close(v3);
    (*(void (**)(WebKit::UserMediaCaptureManagerProxy *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 25);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 16));
  WebKit::RemoteVideoFrameObjectHeap::close(v4);
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v5);
  }
  WebKit::RemoteMediaPlayerManagerProxy::clear(*((WebKit::RemoteMediaPlayerManagerProxy **)this + 16));
  uint64_t v7 = *((void *)this + 32);
  if (v7)
  {
    *((void *)this + 32) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, v6);
  }
  uint64_t v8 = *((void *)this + 33);
  if (v8)
  {
    *((void *)this + 33) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v8, v6);
  }
  uint64_t v17 = 0;
  IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::operator=((uint64_t *)this + 26, &v17);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::~ScopedActiveMessageReceiveQueue(&v17);
  uint64_t v10 = (WebKit::RemoteCDMFactoryProxy *)*((void *)this + 35);
  if (v10) {
    WebKit::RemoteCDMFactoryProxy::clear(v10, v9);
  }
  uint64_t v11 = (atomic_uchar *volatile *)*((void *)this + 15);
  if (v11)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v11 + 2);
    WebKit::RemoteMediaResourceManager::stopListeningForIPC((WebKit::RemoteMediaResourceManager *)v11);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*((atomic_uchar **)v11 + 2), v12);
  }
  uint64_t v13 = (atomic_uint *)*((void *)this + 10);
  atomic_fetch_add(v13 + 30, 1u);
  WebKit::GPUProcess::removeGPUConnectionToWebProcess((WebKit::GPUProcess *)v13, this);
  if (v13)
  {
    if (atomic_fetch_add(v13 + 30, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v13 + 30);
      (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
    }
  }
}

uint64_t WebKit::GPUProcess::audioSessionManager(WebKit::GPUProcess *this)
{
  uint64_t result = *((void *)this + 35);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteAudioSessionProxyManager *)WTF::fastMalloc((WTF *)0x38);
    uint64_t result = WebKit::RemoteAudioSessionProxyManager::RemoteAudioSessionProxyManager(v3, this);
    uint64_t v4 = *((void *)this + 35);
    *((void *)this + 35) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return *((void *)this + 35);
    }
  }
  return result;
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    if (*a1) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>(a1);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    uint64_t v5 = *a1;
    *a1 = v4;
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
    }
  }
  return a1;
}

void WebKit::GPUProcess::removeGPUConnectionToWebProcess(WebKit::GPUProcess *this, WebKit::GPUConnectionToWebProcess *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)a2 + 11);
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)&v7[4] = this;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::removeGPUConnectionToWebProcess: processIdentifier=%llu", v7, 0x16u);
  }
  *(void *)uint64_t v7 = *((void *)a2 + 11);
  unsigned int v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 16, v7);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::remove((atomic_uchar *)this + 128, v6);
  WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(this);
}

void non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didClose(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2)
{
}

void WebKit::GPUConnectionToWebProcess::destroyVisibilityPropagationContextForPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 134218240;
    uint64_t v24 = a2;
    __int16 v25 = 2048;
    uint64_t v26 = a3;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "GPUConnectionToWebProcess::destroyVisibilityPropagationContextForPage: pageProxyID=%llu, webPageID=%llu", (uint8_t *)&v23, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 328);
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 - 8);
    unsigned int v9 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(a2, a3) & v8;
    uint64_t v10 = (id **)(v7 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != (id *)a2 || v12 != (id *)a3)
    {
      int v14 = 1;
      while ((unint64_t)v11 | (unint64_t)v12)
      {
        unsigned int v9 = (v9 + v14) & v8;
        uint64_t v10 = (id **)(v7 + 24 * v9);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        ++v14;
        if (*v10 == (id *)a2 && v12 == (id *)a3) {
          goto LABEL_17;
        }
      }
      uint64_t v10 = (id **)(v7 + 24 * *(unsigned int *)(v7 - 4));
    }
LABEL_17:
    if ((id **)(v7 + 24 * *(unsigned int *)(v7 - 4)) != v10)
    {
      uint64_t v16 = (uint64_t *)(a1 + 328);
      *uint64_t v10 = (id *)-1;
      std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v10 + 2, 0);
      ++*(_DWORD *)(*v16 - 16);
      uint64_t v17 = *v16;
      int v18 = *v16 ? *(_DWORD *)(v17 - 12) - 1 : -1;
      *(_DWORD *)(v17 - 12) = v18;
      uint64_t v19 = *v16;
      if (*v16)
      {
        unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
        unsigned int v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9) {
          WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(v16, v21 >> 1);
        }
      }
    }
  }
}

unsigned char *WebKit::GPUConnectionToWebProcess::configureLoggingChannel(int a1, WebCore *this, char a3, char a4)
{
  LogChannel = (unsigned char *)WebCore::getLogChannel(this, this);
  if (LogChannel)
  {
    unsigned char *LogChannel = a3;
    LogChannel[16] = a4;
  }
  uint64_t result = (unsigned char *)WebCore::getLogChannel(this, v8);
  if (result)
  {
    unsigned char *result = a3;
    result[16] = a4;
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::logger(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result = *((void *)this + 6);
  if (!result)
  {
    uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v3 + 8) = 1;
    *(void *)uint64_t v3 = &unk_1EE9BEFD8;
    *(unsigned char *)(v3 + 12) = 1;
    *(void *)(v3 + 16) = this;
    uint64_t v4 = (unsigned int *)*((void *)this + 6);
    *((void *)this + 6) = v3;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    uint64_t result = *((void *)this + 6);
    uint64_t v5 = *((void *)this + 17);
    BOOL v6 = (v5 & 0x8000000000000000) == 0 || v5 == -1 || *((unsigned char *)this + 380) != 0;
    if (*(WebKit::GPUConnectionToWebProcess **)(result + 16) == this) {
      *(unsigned char *)(result + 12) = v6;
    }
  }
  return result;
}

IPC::Encoder *WebKit::GPUConnectionToWebProcess::didReceiveInvalidMessage(WebKit::GPUConnectionToWebProcess *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    if (a3 >= 0xEF4) {
      unsigned int v7 = 3828;
    }
    else {
      unsigned int v7 = a3;
    }
    int v8 = (&IPC::Detail::messageDescriptions)[3 * v7];
    uint64_t v9 = *((void *)a1 + 11);
    int v10 = 136446466;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "Received an invalid message '%{public}s' from WebContent process %llu, requesting for it to be terminated.", (uint8_t *)&v10, 0x16u);
  }
  return WebKit::GPUConnectionToWebProcess::terminateWebProcess(a1);
}

IPC::Encoder *WebKit::GPUConnectionToWebProcess::terminateWebProcess(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = *(uint64_t **)(v2 + 40);
  if (!v3)
  {
    uint64_t v14 = (WebKit::GPUConnectionToWebProcess *)((char *)this + 88);
    return IPC::Connection::send<Messages::GPUProcessProxy::TerminateWebProcess>(0, (uint64_t **)&v14);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(atomic_uchar *volatile **)(v2 + 40));
  uint64_t v14 = (WebKit::GPUConnectionToWebProcess *)((char *)this + 88);
  uint64_t result = IPC::Connection::send<Messages::GPUProcessProxy::TerminateWebProcess>((uint64_t)v3, (uint64_t **)&v14);
  char v5 = 0;
  uint64_t v6 = *v3;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    uint64_t result = (IPC::Encoder *)MEMORY[0x19972E8D0](v6);
  }
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = v7 - 1;
  *(void *)(v6 + 8) = v7 - 1;
  if (v7 == 1)
  {
    uint64_t v13 = *(void *)(v6 + 16);
    uint64_t v10 = *(void *)(v6 + 24);
    *(void *)(v6 + 24) = 0;
    BOOL v9 = v13 == 0;
  }
  else
  {
    BOOL v9 = 0;
    uint64_t v10 = 0;
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 == 1)
  {
    if (v8) {
      return result;
    }
  }
  else
  {
    uint64_t result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v8) {
      return result;
    }
  }
  uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v12 = &unk_1EE9B37E8;
  *(void *)(v12 + 8) = v6;
  *(void *)(v12 + 16) = v10;
  *(unsigned char *)(v12 + 24) = v9;
  uint64_t v14 = (IPC::Encoder *)v12;
  WTF::ensureOnMainRunLoop();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 8))(result);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return WebKit::GPUConnectionToWebProcess::didReceiveInvalidMessage((WebKit::GPUConnectionToWebProcess *)(a1 - 24), a2, a3);
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessProxy::TerminateWebProcess>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 67;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  BOOL v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  BOOL v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::remoteMediaResourceManager(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (!v1)
  {
    uint64_t v1 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v1 = &unk_1EE9B71B0;
    *(void *)(v1 + 8) = 0;
    uint64_t v3 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v3 = 0;
    *(_OWORD *)(v3 + 8) = xmmword_1994F5F10;
    *(void *)(v3 + 24) = v1;
    *(void *)(v1 + 16) = v3;
    *(void *)uint64_t v1 = &unk_1EE9C18E8;
    *(unsigned char *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v7, (uint64_t **)this + 7);
    WebKit::RemoteMediaResourceManager::initializeConnection((WebKit::RemoteMediaResourceManager *)v1, (atomic_uchar *volatile *)v7);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v7);
    uint64_t v5 = *((void *)this + 15);
    *((void *)this + 15) = v1;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
      return *((void *)this + 15);
    }
  }
  return v1;
}

void *WebKit::GPUConnectionToWebProcess::mediaRecorderManager(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1 = (void *)*((void *)this + 22);
  if (!v1)
  {
    uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v1 = &unk_1EE9C2488;
    v1[1] = 0;
    uint64_t v3 = (atomic_uchar *)*((void *)this + 2);
    if (v3) {
      uint64_t v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v3);
    }
    v1[2] = v3;
    v1[3] = this;
    v1[4] = 0;
    uint64_t v4 = *((void *)this + 22);
    *((void *)this + 22) = v1;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (void *)*((void *)this + 22);
    }
  }
  return v1;
}

uint64_t WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result = *((void *)this + 35);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteCDMFactoryProxy *)WTF::fastMalloc((WTF *)0x48);
    WebKit::RemoteCDMFactoryProxy::RemoteCDMFactoryProxy(v3, this);
    std::unique_ptr<WebKit::RemoteCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteCDMFactoryProxy **)this + 35, v3);
    return *((void *)this + 35);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::audioSessionProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t result = *((void *)this + 36);
  if (result) {
    return result;
  }
  uint64_t v3 = (WebKit::RemoteAudioSessionProxy *)WTF::fastMalloc((WTF *)0x40);
  WebKit::RemoteAudioSessionProxy::RemoteAudioSessionProxy(v3, this);
  uint64_t v4 = *((void *)this + 36);
  *((void *)this + 36) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *(uint64_t **)(v5 + 40);
  if (v6)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(atomic_uchar *volatile **)(v5 + 40));
    if (v6[44])
    {
      xpc_connection_get_audit_token();
      char v7 = v27[0];
      v28[0] = *(_OWORD *)&v27[1];
      *(_OWORD *)((char *)v28 + 15) = *(_OWORD *)&v27[16];
      char v8 = 1;
    }
    else
    {
      char v7 = 0;
      char v8 = 0;
    }
    char v9 = 0;
    uint64_t v10 = *v6;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](v10);
    }
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = v11 - 1;
    *(void *)(v10 + 8) = v11 - 1;
    if (v11 == 1)
    {
      uint64_t v21 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      BOOL v13 = v21 == 0;
    }
    else
    {
      BOOL v13 = 0;
      uint64_t v14 = 0;
    }
    int v15 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
    if (v15 == 1)
    {
      if (!v12) {
        goto LABEL_13;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (!v12)
      {
LABEL_13:
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1EE9B37E8;
        *(void *)(v16 + 8) = v10;
        *(void *)(v16 + 16) = v14;
        *(unsigned char *)(v16 + 24) = v13;
        *(void *)uint64_t v27 = v16;
        WTF::ensureOnMainRunLoop();
        uint64_t v17 = *(void *)v27;
        *(void *)uint64_t v27 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
    }
  }
  else if (MEMORY[0x160])
  {
    xpc_connection_get_audit_token();
    char v7 = v27[0];
    v28[0] = *(_OWORD *)&v27[1];
    *(_OWORD *)((char *)v28 + 15) = *(_OWORD *)&v27[16];
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    char v7 = 0;
  }
  int v18 = (atomic_uint *)*((void *)this + 10);
  atomic_fetch_add(v18 + 30, 1u);
  uint64_t v19 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::GPUProcess::audioSessionManager((WebKit::GPUProcess *)v18);
  unsigned int v20 = (unsigned int *)*((void *)this + 36);
  char v22 = v7;
  *(_OWORD *)int v23 = v28[0];
  *(_OWORD *)&v23[15] = *(_OWORD *)((char *)v28 + 15);
  char v24 = v8;
  __int16 v25 = *(_WORD *)v27;
  char v26 = v27[2];
  WebKit::RemoteAudioSessionProxyManager::addProxy(v19, v20, (uint64_t)&v22);
  if (v18)
  {
    if (atomic_fetch_add(v18 + 30, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v18 + 30);
      (*(void (**)(atomic_uint *))(*(void *)v18 + 8))(v18);
    }
  }
  return *((void *)this + 36);
}

WebKit::RemoteImageDecoderAVFProxy *WebKit::GPUConnectionToWebProcess::imageDecoderAVFProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result = (WebKit::RemoteImageDecoderAVFProxy *)*((void *)this + 39);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteImageDecoderAVFProxy *)WTF::fastMalloc((WTF *)0x30);
    uint64_t result = WebKit::RemoteImageDecoderAVFProxy::RemoteImageDecoderAVFProxy(v3, this);
    uint64_t v4 = *((void *)this + 39);
    *((void *)this + 39) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (WebKit::RemoteImageDecoderAVFProxy *)*((void *)this + 39);
    }
  }
  return result;
}

void WebKit::GPUConnectionToWebProcess::releaseRenderingBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 256);
  uint64_t v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 256), &v8);
  uint64_t v5 = *(void *)(a1 + 256);
  if (v5)
  {
    uint64_t v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v6 == v4) {
      goto LABEL_7;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_7;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
LABEL_7:
  char v7 = *(atomic_uint **)(a1 + 80);
  atomic_fetch_add(v7 + 30, 1u);
  WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure((WebKit::GPUProcess *)v7);
  if (v7)
  {
    if (atomic_fetch_add(v7 + 30, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v7 + 30);
      (*(void (**)(atomic_uint *))(*(void *)v7 + 8))(v7);
    }
  }
}

void WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(WebKit::GPUProcess *this)
{
  uint64_t v2 = WTF::MemoryPressureHandler::singleton(this);
  int v3 = atomic_load((unsigned __int8 *)(v2 + 4));
  if (v3 == 2 || *(unsigned char *)(v2 + 7) != 0)
  {
    WebKit::GPUProcess::tryExitIfUnused(this);
  }
}

unsigned int *WebKit::GPUConnectionToWebProcess::createGraphicsContextGL(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, WTF::MachSendRight *a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a5;
  uint64_t v38 = a3;
  char v39 = a4;
  if (*(unsigned char *)(a1 + 353))
  {
    unsigned int v34 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGraphicsContextGL(GraphicsContextGLIdentifier, "
                           "WebCore::GraphicsContextGLAttributes, RenderingBackendIdentifier, IPC::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_1985F2000, v34, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 700: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)buf + 98) = 1;
    return (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
  }
  uint64_t result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 256), &v37);
  uint64_t v10 = *(unsigned int **)(a1 + 256);
  if (v10) {
    v10 += 4 * *(v10 - 1);
  }
  if (v10 == result) {
    return result;
  }
  uint64_t v11 = *((void *)result + 1);
  if (v11) {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
  }
  IPC::StreamServerConnection::tryCreate(a6, (uint64_t *)&v36);
  if (!v36)
  {
    uint64_t v35 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGraphicsContextGL(GraphicsContextGLIdentifier, "
                           "WebCore::GraphicsContextGLAttributes, RenderingBackendIdentifier, IPC::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_1985F2000, v35, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 712: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)buf + 98) = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
    goto LABEL_37;
  }
  uint64_t v12 = (uint64_t *)(a1 + 264);
  uint64_t v13 = *(void *)(a1 + 264);
  if (v13
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 264)),
        (uint64_t v13 = *v12) != 0))
  {
    int v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    int v14 = 0;
  }
  unint64_t v15 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
  uint64_t v19 = (uint64_t *)(v13 + 16 * v18);
  uint64_t v20 = *v19;
  if (*v19)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != a2)
    {
      if (v20 == -1) {
        uint64_t v21 = v19;
      }
      unsigned int v18 = (v18 + v22) & v14;
      uint64_t v19 = (uint64_t *)(v13 + 16 * v18);
      uint64_t v20 = *v19;
      ++v22;
      if (!*v19)
      {
        if (v21)
        {
          uint64_t *v21 = 0;
          v21[1] = 0;
          --*(_DWORD *)(*v12 - 16);
          uint64_t v19 = v21;
        }
        goto LABEL_19;
      }
    }
    goto LABEL_37;
  }
LABEL_19:
  *uint64_t v19 = a2;
  unsigned int v41 = v36;
  int v36 = 0;
  WebKit::RemoteGraphicsContextGL::create(a1, &v38, a2, v11, (uint64_t *)&v41, (uint64_t *)buf);
  int v23 = v41;
  uint64_t v40 = *(void *)buf;
  unsigned int v41 = 0;
  *(void *)long long buf = 0;
  if (v23 && atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23 + 2);
    (*(void (**)(unsigned int *))(*(void *)v23 + 8))(v23);
  }
  char v24 = v19 + 1;
  if (v19 + 1 != &v40)
  {
    if (*v24)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>(v19 + 1);
      uint64_t v25 = *v24;
      uint64_t v26 = v40;
      uint64_t v40 = 0;
      uint64_t *v24 = v26;
      if (v25 && atomic_fetch_add((atomic_uint *volatile)(v25 + 16), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v25 + 16));
        (*(void (**)(void))(*(void *)(v25 + 8) + 8))();
      }
    }
    else
    {
      uint64_t v27 = v40;
      uint64_t v40 = 0;
      uint64_t *v24 = v27;
    }
  }
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(&v40);
  uint64_t v28 = *v12;
  if (*v12) {
    int v29 = *(_DWORD *)(v28 - 12) + 1;
  }
  else {
    int v29 = 1;
  }
  *(_DWORD *)(v28 - 12) = v29;
  uint64_t v30 = *v12;
  if (*v12) {
    int v31 = *(_DWORD *)(v30 - 12);
  }
  else {
    int v31 = 0;
  }
  uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
  unint64_t v33 = *(unsigned int *)(v30 - 4);
  if (v33 <= 0x400)
  {
    if (3 * v33 > 4 * v32) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v33 <= 2 * v32) {
LABEL_36:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v12);
LABEL_37:
  uint64_t result = v36;
  int v36 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    if (!v11) {
      return result;
    }
  }
  else if (!v11)
  {
    return result;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v11 + 16));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v11 + 8) + 8))(v11 + 8);
  }
  return result;
}

void WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 353))
  {
    unsigned int v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v20 = 136446210;
      *(void *)&v20[4] = "void WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL(GraphicsContextGLIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 722: Invalid message dispatched %{public}s", v20, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v20, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)v20 + 98) = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v20);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 264);
    if (!v3) {
      goto LABEL_21;
    }
    unsigned int v4 = *(_DWORD *)(v3 - 8);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void *)(v3 + 16 * v8);
    if (v9 != a2)
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_9:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      uint64_t v11 = (uint64_t *)(a1 + 264);
      uint64_t v12 = (void *)(v3 + 16 * v8);
      void *v12 = -1;
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v12 + 1);
      ++*(_DWORD *)(*v11 - 16);
      uint64_t v13 = *v11;
      int v14 = *v11 ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      uint64_t v3 = *v11;
      if (!*v11) {
        goto LABEL_21;
      }
      unsigned int v15 = *(_DWORD *)(v3 - 4);
      if (6 * *(_DWORD *)(v3 - 12) < v15 && v15 >= 9)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 264), v15 >> 1);
        uint64_t v3 = *v11;
        if (!*v11) {
          goto LABEL_21;
        }
      }
    }
    if (!*(_DWORD *)(v3 - 12))
    {
LABEL_21:
      unint64_t v17 = *(atomic_uint **)(a1 + 80);
      atomic_fetch_add(v17 + 30, 1u);
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure((WebKit::GPUProcess *)v17);
      if (v17 && atomic_fetch_add(v17 + 30, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v17 + 30);
        uint64_t v19 = *(void (**)(atomic_uint *))(*(void *)v17 + 8);
        v19(v17);
      }
    }
  }
}

atomic_uchar *WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v9, a1);
  *(void *)&long long v10 = a2;
  *((void *)&v10 + nw_tcp_options_set_no_delay(options, 1) = a3;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v5 = &unk_1EE9BEE78;
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  *(void *)(v5 + 8) = v6;
  *(_OWORD *)(v5 + 16) = v10;
  uint64_t v11 = (atomic_uchar *)v5;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
  }
  return result;
}

unsigned int *WebKit::GPUConnectionToWebProcess::createGPU(uint64_t a1, uint64_t a2, uint64_t a3, WTF::MachSendRight *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a3;
  if (!*(unsigned char *)(a1 + 406))
  {
    unsigned int v34 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGPU(WebGPUIdentifier, RenderingBackendIdentifie"
                           "r, IPC::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_1985F2000, v34, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 760: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)buf + 98) = 1;
    return (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
  }
  uint64_t result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 256), &v37);
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  if (v8) {
    v8 += 4 * *(v8 - 1);
  }
  if (v8 == result) {
    return result;
  }
  uint64_t v9 = *((void *)result + 1);
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  }
  IPC::StreamServerConnection::tryCreate(a4, (uint64_t *)&v36);
  if (!v36)
  {
    uint64_t v35 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGPU(WebGPUIdentifier, RenderingBackendIdentifie"
                           "r, IPC::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_1985F2000, v35, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 772: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)buf + 98) = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
    goto LABEL_37;
  }
  long long v10 = (uint64_t *)(a1 + 272);
  uint64_t v11 = *(void *)(a1 + 272);
  if (v11
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 272), 0), (uint64_t v11 = *v10) != 0))
  {
    int v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unint64_t v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  unint64_t v17 = (uint64_t *)(v11 + 16 * v16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v19 = 0;
    int v20 = 1;
    while (v18 != a2)
    {
      if (v18 == -1) {
        uint64_t v19 = v17;
      }
      unsigned int v16 = (v16 + v20) & v12;
      unint64_t v17 = (uint64_t *)(v11 + 16 * v16);
      uint64_t v18 = *v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *uint64_t v19 = 0;
          v19[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          unint64_t v17 = v19;
        }
        goto LABEL_19;
      }
    }
    goto LABEL_37;
  }
LABEL_19:
  uint64_t *v17 = a2;
  *(void *)long long buf = v36;
  int v36 = 0;
  uint64_t v21 = (WebKit::RemoteGPU *)WTF::fastMalloc((WTF *)0x80);
  int v22 = (WebKit::RemoteGPU *)WebKit::RemoteGPU::RemoteGPU((uint64_t)v21, a2, a1, v9, (uint64_t *)buf);
  WebKit::RemoteGPU::initialize(v22);
  int v23 = *(unsigned int **)buf;
  uint64_t v38 = v21;
  *(void *)long long buf = 0;
  if (v23 && atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23 + 2);
    (*(void (**)(unsigned int *))(*(void *)v23 + 8))(v23);
  }
  char v24 = (unsigned int **)(v17 + 1);
  if (v17 + 1 != (uint64_t *)&v38)
  {
    if (*v24)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>((WebKit::RemoteGPU **)v17 + 1);
      uint64_t v25 = *v24;
      uint64_t v26 = v38;
      uint64_t v38 = 0;
      uint64_t *v24 = (unsigned int *)v26;
      if (v25 && atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25 + 2);
        (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
      }
    }
    else
    {
      uint64_t v27 = v38;
      uint64_t v38 = 0;
      uint64_t *v24 = (unsigned int *)v27;
    }
  }
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue(&v38);
  uint64_t v28 = *v10;
  if (*v10) {
    int v29 = *(_DWORD *)(v28 - 12) + 1;
  }
  else {
    int v29 = 1;
  }
  *(_DWORD *)(v28 - 12) = v29;
  uint64_t v30 = *v10;
  if (*v10) {
    int v31 = *(_DWORD *)(v30 - 12);
  }
  else {
    int v31 = 0;
  }
  uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
  unint64_t v33 = *(unsigned int *)(v30 - 4);
  if (v33 <= 0x400)
  {
    if (3 * v33 > 4 * v32) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v33 <= 2 * v32) {
LABEL_36:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v10, v17);
LABEL_37:
  uint64_t result = v36;
  int v36 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    if (!v9) {
      return result;
    }
  }
  else if (!v9)
  {
    return result;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v9 + 16));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v9 + 8);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::releaseGPU(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 272);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 272), &v10);
  uint64_t v5 = *(void *)(a1 + 272);
  if (v5)
  {
    uint64_t v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v6 == result) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_10;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
    uint64_t v5 = *v3;
  }
  if (v5)
  {
LABEL_9:
    if (*(_DWORD *)(v5 - 12)) {
      return result;
    }
  }
LABEL_10:
  uint64_t v7 = *(void *)(a1 + 80);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 120), 1u);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9BEEA0;
  v8[1] = v7;
  uint64_t v9 = v8;
  WTF::ensureOnMainRunLoop();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::clearNowPlayingInfo(WebKit::GPUConnectionToWebProcess *this)
{
  *((unsigned char *)this + 352) = 0;
  uint64_t v1 = (atomic_uint *)*((void *)this + 10);
  atomic_fetch_add(v1 + 30, 1u);
  WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v1);
  uint64_t result = WebCore::NowPlayingManager::removeClient();
  if (v1 && atomic_fetch_add(v1 + 30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 30);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return v3(v1);
  }
  return result;
}

uint64_t WebKit::GPUProcess::nowPlayingManager(WebKit::GPUProcess *this)
{
  uint64_t result = *((void *)this + 33);
  if (!result)
  {
    uint64_t v3 = (WebCore::NowPlayingManager *)WTF::fastMalloc((WTF *)0xB0);
    uint64_t result = WebCore::NowPlayingManager::NowPlayingManager(v3);
    uint64_t v4 = *((void *)this + 33);
    *((void *)this + 33) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return *((void *)this + 33);
    }
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::setNowPlayingInfo(uint64_t a1)
{
  *(unsigned char *)(a1 + 352) = 1;
  uint64_t v2 = *(atomic_uint **)(a1 + 80);
  atomic_fetch_add(v2 + 30, 1u);
  WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v2);
  WebCore::NowPlayingManager::addClient();
  WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v2);
  WebCore::NowPlayingManager::setNowPlayingInfo();
  uint64_t result = WebKit::GPUConnectionToWebProcess::updateSupportedRemoteCommands(a1);
  if (v2 && atomic_fetch_add(v2 + 30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v2 + 30);
    uint64_t v4 = *(uint64_t (**)(atomic_uint *))(*(void *)v2 + 8);
    return v4(v2);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::updateSupportedRemoteCommands(uint64_t this)
{
  if (*(unsigned char *)(this + 352))
  {
    if (*(void *)(this + 344))
    {
      uint64_t v1 = *(atomic_uint **)(this + 80);
      atomic_fetch_add(v1 + 30, 1u);
      uint64_t v2 = (WebCore::NowPlayingManager *)WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v1);
      WebCore::NowPlayingManager::setSupportsSeeking(v2);
      WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v1);
      this = WebCore::NowPlayingManager::setSupportedRemoteCommands();
      if (v1)
      {
        if (atomic_fetch_add(v1 + 30, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v1 + 30);
          uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
          return v3(v1);
        }
      }
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::GPUConnectionToWebProcess::didReceiveRemoteControlCommand(uint64_t a1, char a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 56));
  uint64_t v5 = v12;
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 58;
  *((void *)v6 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::encode<IPC::Encoder>(v6, a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v6, a3);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(v6, (char *)(a3 + 16));
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v13, 0, 0);
  uint64_t v8 = v13;
  unint64_t v13 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v10, v11);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
}

WTF::StringImpl *WebKit::GPUConnectionToWebProcess::ensureAudioSession(WebKit::GPUConnectionToWebProcess *a1, uint64_t *a2)
{
  uint64_t v3 = (WebKit::RemoteAudioSessionProxy *)WebKit::GPUConnectionToWebProcess::audioSessionProxy(a1);
  WebKit::RemoteAudioSessionProxy::configuration(v3, (uint64_t)v8);
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, v8);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8[0];
  v8[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::RemoteMediaSessionHelperProxy *WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result = (WebKit::RemoteMediaSessionHelperProxy *)*((void *)this + 37);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteMediaSessionHelperProxy *)WTF::fastMalloc((WTF *)0x40);
    uint64_t result = WebKit::RemoteMediaSessionHelperProxy::RemoteMediaSessionHelperProxy(v3, this);
    uint64_t v4 = *((void *)this + 37);
    *((void *)this + 37) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (WebKit::RemoteMediaSessionHelperProxy *)*((void *)this + 37);
    }
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result = *((void *)this + 38);
  if (!result)
  {
    uint64_t v3 = (WebKit::RemoteLegacyCDMFactoryProxy *)WTF::fastMalloc((WTF *)0x30);
    WebKit::RemoteLegacyCDMFactoryProxy::RemoteLegacyCDMFactoryProxy(v3, this);
    std::unique_ptr<WebKit::RemoteLegacyCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteLegacyCDMFactoryProxy **)this + 38, v3);
    return *((void *)this + 38);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::createAudioHardwareListener(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v22 = a2;
  uint64_t v4 = (uint64_t *)(result + 336);
  uint64_t v5 = *(void *)(result + 336);
  if (v5
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(result + 336), 0), (uint64_t v5 = *v4) != 0))
  {
    int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (void *)(v5 + 16 * v10);
  uint64_t v12 = *v11;
  if (*v11)
  {
    unint64_t v13 = 0;
    int v14 = 1;
    while (v12 != a2)
    {
      if (v12 == -1) {
        unint64_t v13 = v11;
      }
      unsigned int v10 = (v10 + v14) & v6;
      uint64_t v11 = (void *)(v5 + 16 * v10);
      uint64_t v12 = *v11;
      ++v14;
      if (!*v11)
      {
        if (v13)
        {
          void *v13 = 0;
          v13[1] = 0;
          --*(_DWORD *)(*v4 - 16);
          uint64_t v11 = v13;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    void *v11 = a2;
    unint64_t v15 = (WebKit::RemoteAudioHardwareListenerProxy *)WTF::fastMalloc((WTF *)0x28);
    WebKit::RemoteAudioHardwareListenerProxy::RemoteAudioHardwareListenerProxy(v15, v3, &v22);
    uint64_t result = (uint64_t)std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)v11 + 1, v15);
    uint64_t v16 = *(void *)(v3 + 336);
    if (v16) {
      int v17 = *(_DWORD *)(v16 - 12) + 1;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v16 - 12) = v17;
    uint64_t v18 = *v4;
    if (*v4) {
      int v19 = *(_DWORD *)(v18 - 12);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
    unint64_t v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20) {
        return result;
      }
    }
    else if (3 * v21 > 4 * v20)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4, v11);
  }
  return result;
}

WebKit::RemoteAudioHardwareListenerProxy *WebKit::GPUConnectionToWebProcess::releaseAudioHardwareListener(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 336);
  uint64_t result = (WebKit::RemoteAudioHardwareListenerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 336), &v7);
  uint64_t v5 = *(void *)(a1 + 336);
  if (v5)
  {
    int v6 = (WebKit::RemoteAudioHardwareListenerProxy *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    int v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, (uint64_t)result);
  }
  return result;
}

_DWORD *WebKit::GPUConnectionToWebProcess::createRemoteCommandListener(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x40);
  WebKit::RemoteRemoteCommandListenerProxy::RemoteRemoteCommandListenerProxy(v3, a1, &v6);
  uint64_t result = *(_DWORD **)(a1 + 344);
  *(void *)(a1 + 344) = v3;
  if (result)
  {
    if (result[4] == 1)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (_DWORD *)v5();
    }
    else
    {
      --result[4];
    }
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::releaseRemoteCommandListener(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 344);
  if (result && *(void *)(result + 40) == a2)
  {
    *(void *)(a1 + 344) = 0;
    if (*(_DWORD *)(result + 16) == 1) {
      return (*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --*(_DWORD *)(result + 16);
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::GPUConnectionToWebProcess::setMediaOverridesForTesting(uint64_t a1, unsigned char *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 376))
  {
    WebCore::VP9TestingOverrides::singleton((WebCore::VP9TestingOverrides *)a1);
    uint64_t v3 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::setHardwareDecoderDisabled();
    WebCore::VP9TestingOverrides::singleton(v3);
    uint64_t v4 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::setVP9DecoderDisabled();
    WebCore::VP9TestingOverrides::singleton(v4);
    uint64_t v5 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::VP9TestingOverrides::setVP9ScreenSizeAndScale();
    WebCore::SystemBatteryStatusTestingOverrides::singleton(v5);
    HasAC = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::setHasAC();
    uint64_t v7 = WebCore::SystemBatteryStatusTestingOverrides::singleton(HasAC);
    return (atomic_uchar *volatile **)MEMORY[0x1F4172260](v7, a2 + 2);
  }
  else if (a2[1] || a2[3] || a2[5] || a2[7] || a2[32])
  {
    uint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v14 = 136446210;
      *(void *)&v14[4] = "void WebKit::GPUConnectionToWebProcess::setMediaOverridesForTesting(MediaOverridesForTesting)";
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 894: Invalid message dispatched %{public}s", v14, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v14, (uint64_t **)(a1 + 56));
    *(unsigned char *)(*(void *)v14 + 98) = 1;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
  }
  else
  {
    unint64_t v9 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton((WebCore::VP9TestingOverrides *)a1);
    unsigned int v10 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::VP9TestingOverrides::resetOverridesToDefaultValues(v9);
    uint64_t v11 = WebCore::SystemBatteryStatusTestingOverrides::singleton(v10);
    return (atomic_uchar *volatile **)MEMORY[0x1F4172268](v11);
  }
}

BOOL WebKit::GPUConnectionToWebProcess::dispatchMessage(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 >= 0xEF4) {
    unsigned int v6 = 3828;
  }
  int v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
  if (v7 <= 81)
  {
    switch(v7)
    {
      case '6':
        unint64_t v9 = (void *)*((void *)this + 13);
        if (!v9)
        {
          unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x28);
          v9[1] = 0;
          v9[2] = 0;
          *unint64_t v9 = &unk_1EE9B9FA0;
          unsigned int v10 = (atomic_uchar *)*((void *)this + 2);
          if (v10) {
            unsigned int v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
          }
          v9[3] = v10;
          v9[4] = this;
          uint64_t v11 = *((void *)this + 13);
          *((void *)this + 13) = v9;
          if (v11)
          {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            unint64_t v9 = (void *)*((void *)this + 13);
          }
        }
        goto LABEL_20;
      case '8':
        unint64_t v9 = (void *)*((void *)this + 19);
        if (!v9)
        {
          unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x28);
          v9[1] = 0;
          v9[2] = 0;
          *unint64_t v9 = &unk_1EE9C25D8;
          unint64_t v13 = (atomic_uchar *)*((void *)this + 2);
          if (v13) {
            unint64_t v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v13);
          }
          v9[3] = v13;
          v9[4] = this;
          uint64_t v14 = *((void *)this + 19);
          *((void *)this + 19) = v9;
          if (v14)
          {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            unint64_t v9 = (void *)*((void *)this + 19);
          }
        }
LABEL_20:
        (*(void (**)(void *, IPC::Connection *, IPC::Decoder *))(*v9 + 16))(v9, a2, a3);
        return 1;
      case ':':
        uint64_t v15 = WebKit::GPUConnectionToWebProcess::audioSessionProxy(this);
        WebKit::RemoteAudioSessionProxy::didReceiveMessage(v15, a2, a3);
        return 1;
      case '@':
        uint64_t v16 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveMessage(v16, a2, a3);
        return 1;
      case 'B':
        int v17 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceMessage(v17, a2, a3);
        return 1;
      case 'D':
        uint64_t v18 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceSessionMessage(v18, a2, a3);
        return 1;
      case 'E':
        int v19 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveCDMMessage(v19, a2, a3);
        return 1;
      default:
LABEL_41:
        uint64_t v32 = (WebKit::GPUConnectionToWebProcess *)((char *)this + 64);
        return IPC::MessageReceiverMap::dispatchMessage(v32, a2, a3);
    }
  }
  switch(v7)
  {
    case 'R':
      return 1;
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Z':
    case ']':
    case 'e':
    case 'f':
    case 'g':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
      goto LABEL_41;
    case 'Y':
      unint64_t v8 = WebKit::GPUConnectionToWebProcess::imageDecoderAVFProxy(this);
      WebKit::RemoteImageDecoderAVFProxy::didReceiveMessage(v8, a2, a3);
      return 1;
    case '[':
      uint64_t v20 = (void *)WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(this);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveMessage(v20, (atomic_uchar *volatile *)a2, a3);
      return 1;
    case '\\':
      unint64_t v21 = (WebKit::RemoteLegacyCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(this);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMMessage(v21, a2, a3);
      return 1;
    case '^':
      uint64_t v22 = (WebKit::RemoteLegacyCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(this);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMSessionMessage(v22, a2, a3);
      return 1;
    case '_':
      int v23 = (unsigned int **)*((void *)this + 40);
      if (!v23)
      {
        char v24 = (unsigned int ***)((char *)this + 320);
        uint64_t v25 = WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v25 = &unk_1EE9C0E08;
        *(void *)(v25 + 8) = 0;
        std::unique_ptr<WebKit::RemoteMediaEngineConfigurationFactoryProxy>::reset[abi:sn180100](v24, (unsigned int **)v25);
        int v23 = *v24;
      }
      WebKit::RemoteMediaEngineConfigurationFactoryProxy::didReceiveMessage((WTF::StringImpl *)v23, (atomic_uchar *volatile *)a2, a3);
      return 1;
      WebKit::RemoteMediaPlayerManagerProxy::didReceiveMessage(*((WebKit::RemoteMediaPlayerManagerProxy **)this + 16), a2, a3);
      return 1;
    case 'a':
      WebKit::RemoteMediaPlayerManagerProxy::didReceivePlayerMessage(*((WebKit::RemoteMediaPlayerManagerProxy **)this + 16), a2, a3);
      return 1;
    case 'b':
      uint64_t v26 = (WebKit::RemoteMediaRecorderManager *)WebKit::GPUConnectionToWebProcess::mediaRecorderManager(this);
      WebKit::RemoteMediaRecorderManager::didReceiveRemoteMediaRecorderMessage(v26, a2, a3);
      return 1;
    case 'c':
      uint64_t v27 = (WebKit::RemoteMediaRecorderManager *)WebKit::GPUConnectionToWebProcess::mediaRecorderManager(this);
      WebKit::RemoteMediaRecorderManager::didReceiveMessage(v27, (atomic_uchar *volatile *)a2, a3);
      return 1;
    case 'd':
      uint64_t v28 = (atomic_uchar *volatile *)WebKit::GPUConnectionToWebProcess::remoteMediaResourceManager(this);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v28 + 2);
      WebKit::RemoteMediaResourceManager::didReceiveMessage((WebKit::RemoteMediaResourceManager *)v28, (atomic_uchar *volatile *)a2, a3);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*((atomic_uchar **)v28 + 2), v29);
      return 1;
    case 'h':
      uint64_t v30 = WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(this);
      WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage((uint64_t)v30, a2, a3);
      return 1;
    case 'p':
      int v31 = (WTF *)*((void *)this + 43);
      if (v31)
      {
        ++*((_DWORD *)v31 + 4);
        WebKit::RemoteRemoteCommandListenerProxy::didReceiveMessage(v31, a2, a3);
        if (*((_DWORD *)v31 + 4) == 1) {
          (*(void (**)(WTF *))(*(void *)v31 + 8))(v31);
        }
        else {
          --*((_DWORD *)v31 + 4);
        }
      }
      return 1;
    default:
      if (v7 == 124)
      {
        WebKit::GPUConnectionToWebProcess::sharedResourceCache(this, &v35);
        unsigned int v34 = v35;
        WebKit::RemoteSharedResourceCache::didReceiveMessage((unint64_t)v35, a2, a3);
        if (v34) {
          WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)v34 + 4);
        }
      }
      else
      {
        if (v7 != 150) {
          goto LABEL_41;
        }
        uint64_t v12 = (WebKit::UserMediaCaptureManagerProxy *)WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(this);
        WebKit::UserMediaCaptureManagerProxy::didReceiveMessage(v12, (atomic_uchar *volatile *)a2, a3);
      }
      break;
  }
  return 1;
}

uint64_t WebKit::GPUConnectionToWebProcess::dispatchSyncMessage(uint64_t *a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, uint64_t *a4)
{
  unsigned int v7 = a3[25];
  if (v7 >= 0xEF4) {
    unsigned int v7 = 3828;
  }
  int v8 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v7 + 2]);
  switch(v8)
  {
    case 'R':
LABEL_13:
      uint64_t result = 1;
      break;
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Z':
    case ']':
    case '_':
LABEL_14:
      unint64_t v13 = a1 + 8;
      uint64_t result = IPC::MessageReceiverMap::dispatchSyncMessage(v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
      break;
    case 'Y':
      unint64_t v9 = WebKit::GPUConnectionToWebProcess::imageDecoderAVFProxy((WebKit::GPUConnectionToWebProcess *)a1);
      uint64_t result = WebKit::RemoteImageDecoderAVFProxy::didReceiveSyncMessage((uint64_t)v9, a2, a3, a4);
      break;
    case '[':
      uint64_t v14 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
      uint64_t result = WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncMessage(v14, a2, (IPC::Decoder *)a3, (WTF::StringImpl **)a4);
      break;
    case '\\':
      uint64_t v15 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
      uint64_t result = WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMMessage(v15, (uint64_t)a2, (uint64_t)a3, (WTF::StringImpl **)a4);
      break;
    case '^':
      uint64_t v16 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
      uint64_t result = WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMSessionMessage(v16, (uint64_t)a2, (uint64_t)a3, (WTF::StringImpl **)a4);
      break;
      uint64_t v17 = a1[16];
      uint64_t result = WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncMessage(v17, a2, (IPC::Decoder *)a3, (atomic_uchar *volatile **)a4);
      break;
    case 'a':
      uint64_t v18 = a1[16];
      uint64_t result = WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncPlayerMessage(v18, (uint64_t)a2, (uint64_t)a3, (IPC::Encoder **)a4);
      break;
    default:
      switch(v8)
      {
        case ':':
          uint64_t v11 = WebKit::GPUConnectionToWebProcess::audioSessionProxy((WebKit::GPUConnectionToWebProcess *)a1);
          return WebKit::RemoteAudioSessionProxy::didReceiveSyncMessage(v11, a2, (uint64_t *)a3, (IPC::Encoder **)a4);
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
        case 'C':
          goto LABEL_14;
        case '@':
          uint64_t v19 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
          return WebKit::RemoteCDMFactoryProxy::didReceiveSyncMessage(v19, a2, a3, (IPC::Encoder **)a4);
        case 'B':
          uint64_t v20 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
          return WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceMessage(v20, (uint64_t)a2, (IPC::Decoder *)a3, (IPC::Encoder **)a4);
        case 'D':
          uint64_t v21 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
          return WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceSessionMessage(v21, (uint64_t)a2, (uint64_t)a3);
        case 'E':
          uint64_t v22 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
          return WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMMessage(v22, (uint64_t)a2, (uint64_t)a3, (IPC::Encoder **)a4);
        default:
          if (v8 != 150) {
            goto LABEL_14;
          }
          uint64_t v12 = WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy((WebKit::GPUConnectionToWebProcess *)a1);
          (*(void (**)(uint64_t, atomic_uchar *volatile *, unsigned __int16 *, uint64_t *))(*(void *)v12 + 32))(v12, a2, a3, a4);
          goto LABEL_13;
      }
  }
  return result;
}

uint64_t *WebKit::GPUConnectionToWebProcess::mediaCacheDirectory(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1 = *((void *)this + 10);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 120), 1u);
  uint64_t v6 = *((void *)this + 17);
  uint64_t v2 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 200), &v6);
  uint64_t v3 = *(void *)(v1 + 200);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v4 = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v1 + 120), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v1 + 120));
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  if (v4 == v2) {
    return (uint64_t *)MEMORY[0x1E4F30978];
  }
  else {
    return v2 + 1;
  }
}

uint64_t *WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1 = *((void *)this + 10);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 120), 1u);
  uint64_t v6 = *((void *)this + 17);
  uint64_t v2 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 200), &v6);
  uint64_t v3 = *(void *)(v1 + 200);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v4 = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v1 + 120), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v1 + 120));
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  if (v4 == v2) {
    return (uint64_t *)MEMORY[0x1E4F30978];
  }
  else {
    return v2 + 2;
  }
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessProxy::StartMonitoringCaptureDeviceRotation>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 64;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessProxy::StopMonitoringCaptureDeviceRotation>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 66;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::GPUConnectionToWebProcess::updateSampleBufferDisplayLayerBoundsAndPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 168);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
  WebKit::RemoteSampleBufferDisplayLayerManager::updateSampleBufferDisplayLayerBoundsAndPosition(v5, a2, a3);
  if (v5)
  {
    unsigned int v7 = *(atomic_uchar **)(v5 + 16);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v7, v6);
  }
}

void WebKit::GPUProcess::tryExitIfUnused(WebKit::GPUProcess *this)
{
  uint64_t v2 = (WTF::MonotonicTime *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 16);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 16);
  if (v6) {
    unsigned int v7 = (WTF::MonotonicTime *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 == v2)
  {
LABEL_41:
    int v29 = (WTF::MemoryPressureHandler *)WTF::MonotonicTime::now(v2);
    if (v30 - *((double *)this + 17) >= 5.0 || *(unsigned char *)(WTF::MemoryPressureHandler::singleton(v29) + 7))
    {
      if ((*((void *)this + 30) & 0xFFFFFFFFFFFFLL) != 0) {
        WebCore::TimerBase::stopSlowCase((WebKit::GPUProcess *)((char *)this + 208));
      }
      int v31 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        v44[0] = 0;
        _os_log_impl(&dword_1985F2000, v31, OS_LOG_TYPE_DEFAULT, "GPUProcess::tryExitIfUnused: GPUProcess is exiting because we are under memory pressure and the process is no longer useful.", (uint8_t *)v44, 2u);
      }
      uint64_t v32 = (atomic_uchar *volatile *)*((void *)this + 5);
      if (!v32)
      {
        IPC::Connection::send<Messages::GPUProcessProxy::ProcessIsReadyToExit>(0);
        return;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v32);
      IPC::Connection::send<Messages::GPUProcessProxy::ProcessIsReadyToExit>((uint64_t)v32);
      char v33 = 0;
      atomic_uchar *volatile v34 = *v32;
      atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
      if (v33) {
        MEMORY[0x19972E8D0](v34);
      }
      uint64_t v35 = *((void *)v34 + 1);
      uint64_t v36 = v35 - 1;
      *((void *)v34 + nw_tcp_options_set_no_delay(options, 1) = v35 - 1;
      if (v35 == 1)
      {
        uint64_t v43 = *((void *)v34 + 2);
        uint64_t v38 = *((void *)v34 + 3);
        *((void *)v34 + 3) = 0;
        BOOL v37 = v43 == 0;
      }
      else
      {
        BOOL v37 = 0;
        uint64_t v38 = 0;
      }
      int v39 = 1;
      atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
      if (v39 == 1)
      {
        if (v36) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v34);
        if (v36) {
          return;
        }
      }
      uint64_t v40 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v40 = &unk_1EE9B37E8;
      *(void *)(v40 + 8) = v34;
      *(void *)(v40 + 16) = v38;
      *(unsigned char *)(v40 + 24) = v37;
      uint64_t v46 = v40;
      WTF::ensureOnMainRunLoop();
      uint64_t v41 = v46;
      uint64_t v46 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
    }
    else
    {
      uint64_t v42 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "GPUProcess::tryExitIfUnused: GPUProcess is idle and under memory pressure but it is not exiting because it has just launched", buf, 2u);
      }
      if ((*((void *)this + 30) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((void *)this + 30) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        WebCore::TimerBase::start();
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v8 = *((void *)v3 + 1);
      if (atomic_load(&WebKit::ScopedRenderingResourcesRequest::s_requests)) {
        break;
      }
      if (*(unsigned char *)(v8 + 389)) {
        break;
      }
      unsigned int v10 = *(WebKit::RemoteAudioDestinationManager **)(v8 + 104);
      if (v10)
      {
        if (!WebKit::RemoteAudioDestinationManager::allowsExitUnderMemoryPressure(v10)) {
          break;
        }
      }
      uint64_t v11 = *(void *)(v8 + 144);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12)
        {
          if (*(_DWORD *)(v12 - 12)) {
            break;
          }
        }
      }
      uint64_t v13 = *(void *)(v8 + 152);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          if (*(_DWORD *)(v14 - 12)) {
            break;
          }
        }
      }
      uint64_t v15 = *(void *)(v8 + 168);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v15 + 16));
      BOOL v17 = WebKit::RemoteSampleBufferDisplayLayerManager::allowsExitUnderMemoryPressure((atomic_uchar *)v15);
      if (v15) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v15 + 16), v16);
      }
      if (!v17) {
        break;
      }
      uint64_t v18 = *(void *)(v8 + 176);
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 32);
        if (v19)
        {
          if (*(_DWORD *)(v19 - 12)) {
            break;
          }
        }
      }
      uint64_t v20 = *(void *)(v8 + 312);
      if (v20)
      {
        uint64_t v21 = *(void *)(v20 + 32);
        if (v21)
        {
          if (*(_DWORD *)(v21 - 12)) {
            break;
          }
        }
      }
      uint64_t v22 = *(void *)(v8 + 280);
      if (v22)
      {
        uint64_t v23 = *(void *)(v22 + 48);
        if (v23)
        {
          if (*(_DWORD *)(v23 - 12)) {
            break;
          }
        }
      }
      uint64_t v24 = *(void *)(v8 + 304);
      if (v24)
      {
        uint64_t v25 = *(void *)(v24 + 32);
        if (v25)
        {
          if (*(_DWORD *)(v25 - 12)) {
            break;
          }
        }
      }
      uint64_t v26 = *(void *)(v8 + 208);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v26 + 16));
      unsigned __int8 v27 = atomic_load((unsigned __int8 *)(v26 + 72));
      uint64_t v2 = (WTF::MonotonicTime *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v26 + 16), v28);
      if (v27) {
        break;
      }
      while (1)
      {
        uint64_t v3 = (WTF::MonotonicTime *)((char *)v3 + 16);
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_34;
        }
      }
      uint64_t v3 = v5;
LABEL_34:
      if (v3 == v7) {
        goto LABEL_41;
      }
    }
    if ((*((void *)this + 30) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WebKit::GPUProcess *)((char *)this + 208));
    }
  }
}

void WebKit::GPUProcess::~GPUProcess(WebKit::GPUProcess *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9BEC08;
  *((void *)this + 3) = &unk_1EE9BECD0;
  uint64_t v3 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 26) = &unk_1EE9BA5F0;
  uint64_t v6 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WebCore::TimerBase::~TimerBase((WebKit::GPUProcess *)((char *)this + 208));
  uint64_t v8 = *((void *)this + 25);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    if (v9)
    {
      unsigned int v10 = (WTF::StringImpl **)(v8 + 16);
      do
      {
        if (*(v10 - 2) != (WTF::StringImpl *)-1)
        {
          uint64_t v11 = *v10;
          *unsigned int v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v7);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          uint64_t v12 = *(v10 - 1);
          *(v10 - nw_tcp_options_set_no_delay(options, 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v7);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  uint64_t v13 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 56))(v13);
  }
  uint64_t v14 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 56))(v14);
  }
  uint64_t v15 = *((void *)this + 21);
  if (v15) {
    WTF::fastFree((WTF *)(v15 - 16), v7);
  }
  uint64_t v16 = *((void *)this + 16);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    if (v17)
    {
      uint64_t v18 = (uint64_t *)(v16 + 8);
      do
      {
        if (*(v18 - 1) != -1)
        {
          uint64_t v19 = *v18;
          *uint64_t v18 = 0;
          if (v19) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v19 + 16));
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v7);
  }

  WebKit::AuxiliaryProcess::~AuxiliaryProcess(this);
}

void non-virtual thunk to'WebKit::GPUProcess::~GPUProcess(WebKit::GPUProcess *this, WTF::StringImpl *a2)
{
}

{
  WebKit::GPUProcess::operator delete((WebKit::GPUProcess *)((char *)this - 24), a2);
}

double WebKit::GPUProcess::operator delete(WebKit::GPUProcess *a1, WTF::StringImpl *a2)
{
  WebKit::GPUProcess::~GPUProcess(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    *(void *)(v2 + 288) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WebKit::GPUProcess::sharedPreferencesForWebProcessDidChange(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 128), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    char v8 = 0;
    uint64_t v9 = *(void *)(v6 + 16);
    int v10 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    ++*(void *)(v9 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
    }
    long long v11 = *a3;
    long long v12 = a3[1];
    *(void *)(v7 + 400) = *((void *)a3 + 4);
    *(_OWORD *)(v7 + 368) = v11;
    *(_OWORD *)(v7 + 384) = v12;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
  }
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);

  return v14(v13);
}

BOOL WebKit::GPUProcess::shouldTerminate(WebKit::GPUProcess *this)
{
  uint64_t v1 = *((void *)this + 16);
  return !v1 || *(_DWORD *)(v1 - 12) == 0;
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessProxy::ProcessIsReadyToExit>(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 61;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v7 = v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  double result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::GPUProcess::lowMemoryHandler(WebKit::GPUProcess *a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67109376;
    v18[1] = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "GPUProcess::lowMemoryHandler: critical=%d, synchronous=%d", (uint8_t *)v18, 0xEu);
  }
  WebKit::GPUProcess::tryExitIfUnused(a1);
  uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)a1 + 16);
  char v8 = v7;
  int v10 = v9;
  long long v11 = (void *)*((void *)a1 + 16);
  if (v11) {
    long long v12 = &v11[2 * *((unsigned int *)v11 - 1)];
  }
  else {
    long long v12 = 0;
  }
  if (v12 != v7)
  {
    do
    {
      uint64_t v13 = v8[1];
      uint64_t v14 = *(void *)(v13 + 112);
      if (v14) {
        WebCore::IOSurfacePool::discardAllSurfaces(*(WebCore::IOSurfacePool **)(v14 + 56));
      }
      uint64_t v15 = *(void *)(v13 + 200);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v15 + 16));
      WebKit::RemoteVideoFrameObjectHeap::lowMemoryHandler((atomic_uchar *)v15);
      if (v15) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v15 + 16), v16);
      }
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*v8 + 1) > 1) {
          goto LABEL_15;
        }
      }
      char v8 = v10;
LABEL_15:
      ;
    }
    while (v8 != v12);
  }
  return WebCore::releaseGraphicsMemory();
}

uint64_t WebKit::GPUProcess::setMockCaptureDevicesEnabled(WebKit::GPUProcess *this, WebCore::MockRealtimeMediaSourceCenter *a2)
{
  return WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(a2);
}

uint64_t WebKit::GPUProcess::userPreferredLanguagesChanged()
{
  return WTF::overrideUserPreferredLanguages();
}

uint64_t WebKit::GPUProcess::prepareToSuspend(WebKit::GPUProcess *a1, int a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134218240;
    int v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::prepareToSuspend(), isSuspensionImminent: %d", (uint8_t *)&v9, 0x12u);
  }
  WebKit::GPUProcess::lowMemoryHandler(a1, 1, 1);
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

void WebKit::GPUProcess::processDidResume(WebKit::GPUProcess *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::processDidResume()", (uint8_t *)&v3, 0xCu);
  }
}

void WebKit::GPUProcess::updateSandboxAccess(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    int v9 = 134217984;
    uint64_t v10 = v5;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "GPUProcess::updateSandboxAccess: Adding %ld extensions", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(const char ****)a2;
    uint64_t v8 = 8 * v6;
    do
    {
      WebKit::SandboxExtension::consumePermanently(v7++, v4);
      v8 -= 8;
    }
    while (v8);
  }
}

void *WebKit::GPUProcess::setOrientationForMediaCapture(WebKit::GPUProcess *this, uint64_t a2)
{
  *((_DWORD *)this + 46) = a2;
  double result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 16);
  uint64_t v5 = (uint64_t)result;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 16);
  if (v8) {
    int v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    int v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      double result = (void *)WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(*(WebKit::GPUConnectionToWebProcess **)(v5 + 8));
      *((_DWORD *)result + 14) = a2;
      uint64_t v13 = *((unsigned int *)result + 13);
      if (v13)
      {
        uint64_t v10 = (uint64_t *)result[5];
        uint64_t v11 = 8 * v13;
        do
        {
          uint64_t v12 = *v10++;
          double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a2);
          v11 -= 8;
        }
        while (v11);
      }
      while (1)
      {
        v5 += 16;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = v7;
LABEL_13:
      ;
    }
    while ((void *)v5 != v9);
  }
  return result;
}

void *WebKit::GPUProcess::rotationAngleForCaptureDeviceChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 128));
  uint64_t v7 = result;
  int v9 = v8;
  uint64_t v10 = *(void *)(a1 + 128);
  if (v10) {
    uint64_t v11 = (void *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != result)
  {
    do
    {
      double result = (void *)WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy((WebKit::GPUConnectionToWebProcess *)v7[1]);
      uint64_t v12 = *((unsigned int *)result + 13);
      if (v12)
      {
        uint64_t v13 = (uint64_t *)result[5];
        uint64_t v14 = 8 * v12;
        do
        {
          uint64_t v15 = *v13++;
          double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 24))(v15, a2, a3);
          v14 -= 8;
        }
        while (v14);
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v7 = v9;
LABEL_11:
      ;
    }
    while (v7 != v11);
  }
  return result;
}

atomic_uchar *WebKit::GPUProcess::updateCaptureAccess(uint64_t *a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
  {
    v40[0] = 67109632;
    v40[1] = a2;
    __int16 v41 = 1024;
    int v42 = a3;
    __int16 v43 = 1024;
    int v44 = a4;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "GPUProcess::updateCaptureAccess: Entering (audio=%d, video=%d, display=%d)", (uint8_t *)v40, 0x14u);
  }
  WebKit::GPUProcess::ensureAVCaptureServerConnection((WebKit::GPUProcess *)a1);
  uint64_t v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[16], a5);
  if (!v13)
  {
    uint64_t v22 = a1[21];
    uint64_t v21 = a1 + 21;
    uint64_t v20 = v22;
    if (v22
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v21, 0), (uint64_t v20 = *v21) != 0))
    {
      int v23 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      int v23 = 0;
    }
    unint64_t v24 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
    unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    unsigned int v27 = v23 & ((v26 >> 31) ^ v26);
    uint64_t v28 = (_OWORD *)(v20 + 16 * v27);
    uint64_t v29 = *(void *)v28;
    if (*(void *)v28)
    {
      double v30 = 0;
      int v31 = 1;
      while (v29 != a5)
      {
        if (v29 == -1) {
          double v30 = v28;
        }
        unsigned int v27 = (v27 + v31) & v23;
        uint64_t v28 = (_OWORD *)(v20 + 16 * v27);
        uint64_t v29 = *(void *)v28;
        ++v31;
        if (!*(void *)v28)
        {
          if (v30)
          {
            *(void *)double v30 = 0;
            *((unsigned char *)v30 + 10) = 0;
            *((_WORD *)v30 + 4) = 0;
            --*(_DWORD *)(*v21 - 16);
            uint64_t v28 = v30;
          }
          goto LABEL_20;
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    *(void *)uint64_t v28 = a5;
    if (a3) {
      __int16 v32 = 256;
    }
    else {
      __int16 v32 = 0;
    }
    *((unsigned char *)v28 + 10) = a4 != 0;
    *((_WORD *)v28 + 4) = v32 | a2;
    uint64_t v33 = *v21;
    if (*v21) {
      int v34 = *(_DWORD *)(v33 - 12) + 1;
    }
    else {
      int v34 = 1;
    }
    *(_DWORD *)(v33 - 12) = v34;
    uint64_t v35 = *v21;
    if (*v21) {
      int v36 = *(_DWORD *)(v35 - 12);
    }
    else {
      int v36 = 0;
    }
    uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
    unint64_t v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37) {
        goto LABEL_32;
      }
    }
    else if (3 * v38 > 4 * v37)
    {
LABEL_32:
      *((unsigned char *)v28 + 8) |= a2;
      *((unsigned char *)v28 + 9) |= a3;
      *((unsigned char *)v28 + 10) |= a4;
      uint64_t v39 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
      return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    uint64_t v28 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v21, v28);
    goto LABEL_32;
  }
  uint64_t v14 = v13;
  char v15 = 0;
  uint64_t v16 = *(void *)(v13 + 16);
  int v17 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
  if (v15) {
    MEMORY[0x19972E8D0](v16);
  }
  ++*(void *)(v16 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  }
  *(unsigned char *)(v14 + 192) |= a2;
  *(unsigned char *)(v14 + 193) |= a3;
  *(unsigned char *)(v14 + 194) |= a4;
  uint64_t v18 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
}

atomic_uchar *WebKit::GPUProcess::updateCaptureOrigin(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3)
{
  double result = (atomic_uchar *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 128), a3);
  if (result)
  {
    uint64_t v5 = result;
    char v6 = 0;
    uint64_t v7 = *((void *)result + 2);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    ++*(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v14, a2);
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    uint64_t v11 = *((void *)v5 + 23);
    *((void *)v5 + 23) = v10;
    if (v11)
    {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v11, v9);
      uint64_t v13 = v14;
      uint64_t v14 = 0;
      if (v13) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v13, v12);
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v5 + 2));
  }
  return result;
}

uint64_t WebKit::GPUProcess::addMockMediaDevice()
{
  return WebCore::MockRealtimeMediaSourceCenter::addDevice();
}

uint64_t WebKit::GPUProcess::removeMockMediaDevice(WebKit::GPUProcess *this, const WTF::String *a2)
{
  return WebCore::MockRealtimeMediaSourceCenter::removeDevice(a2, a2);
}

uint64_t WebKit::GPUProcess::setMockMediaDeviceIsEphemeral(WebKit::GPUProcess *this, const WTF::String *a2, WTF::String *a3)
{
  return WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral(a2, a3);
}

uint64_t WebKit::GPUProcess::setShouldListenToVoiceActivity(WebKit::GPUProcess *this, char a2)
{
  int v3 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(this);
  uint64_t v4 = WebCore::RealtimeMediaSourceCenter::audioCaptureFactory(v3);
  uint64_t v5 = v4;
  if (a2)
  {
    char v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9BEF88;
    uint64_t v9 = (uint64_t)v6;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v9);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    int v8 = *(uint64_t (**)(void))(*(void *)v4 + 56);
    return v8();
  }
  return result;
}

WTF::StringImpl *WebKit::GPUProcess::removeSession(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  int v3 = (uint64_t *)(a1 + 200);
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 200), &v7);
  uint64_t v5 = *(void *)(a1 + 200);
  if (v5)
  {
    char v6 = (WTF::StringImpl *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    char v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::remove(v3, result);
  }
  return result;
}

uint64_t WebKit::GPUProcess::webProcessConnectionCountForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = WebKit::GPUConnectionToWebProcess::gObjectCountForTesting;
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

WTF::MachSendRight *WebKit::GPUProcess::requestBitmapImageForCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = a2;
  uint64_t v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 128), &v12);
  uint64_t v8 = *(void *)(a1 + 128);
  if (v8) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  if (v8 == v7)
  {
    v11[0] = 0;
    v11[64] = 0;
  }
  else
  {
    WebKit::RemoteMediaPlayerManagerProxy::bitmapImageForCurrentTime(*(void *)(*(void *)(v7 + 8) + 128), a3, v11);
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v11);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v11);
}

void WebKit::RemoteSharedResourceCache::~RemoteSharedResourceCache(WebKit::RemoteSharedResourceCache *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(v2);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteSharedResourceCache *)((char *)this + 48));
  *((void *)this + 3) = &unk_1EE9BEDD0;
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v4, v3);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSharedResourceCache::~RemoteSharedResourceCache(this);

  WTF::fastFree(v1, v2);
}

void *IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::~ThreadSafeObjectHeap(void *a1, void *a2)
{
  *a1 = &unk_1EE9BEDD0;
  uint64_t v3 = a1[2];
  if (v3) {
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WebKit::RemoteSharedResourceCache::addSerializedImageBuffer(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  v16[0] = a2;
  v16[1] = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v15 = v3;
  uint64_t result = IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(a1 + 24, v16, &v15);
  uint64_t v6 = v15;
  uint64_t v15 = 0;
  if (v6)
  {
    char v7 = 0;
    uint64_t v8 = *(void *)(v6 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t result = MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *(void *)(v8 + 8);
    int v10 = 1;
    uint64_t v11 = v9 - 1;
    *(void *)(v8 + 8) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v14 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      BOOL v13 = v14 != 0;
    }
    else
    {
      uint64_t v12 = 0;
      BOOL v13 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v11) {
        return result;
      }
    }
    else
    {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v11) {
        return result;
      }
    }
    if (v12) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    if (!v13) {
      return WTF::fastFree((WTF *)v8, v5);
    }
  }
  return result;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  char v6 = 0;
  char v7 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  uint64_t v8 = (uint64_t *)(a1 + 16);
  uint64_t v16 = a3;
  WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>)::{lambda(void)#1}>((uint64_t *)(a1 + 16), a2, &v16, (uint64_t)&v17);
  if (v18) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(v17 + 32) && !*(void *)(v17 + 24))
  {
    uint64_t v15 = *v8;
    if (!*v8 || (v15 += 56 * *(unsigned int *)(v15 - 4), v15 != v17))
    {
      if (v15 != v17) {
        WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove((uint64_t *)(a1 + 16), v17);
      }
    }
    goto LABEL_6;
  }
  if (!*(unsigned char *)(v17 + 48))
  {
    std::optional<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,void>((uint64_t *)(v17 + 40), a3);
LABEL_4:
    int v10 = (unsigned __int8 *)(a1 + 9);
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(a1 + 9));
    if (v11)
    {
      atomic_store(0, v10);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, v9);
    }
LABEL_6:
    uint64_t v12 = 1;
    goto LABEL_7;
  }
  uint64_t v12 = 0;
LABEL_7:
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return v12;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  char v7 = 0;
  uint64_t v8 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  uint64_t v9 = (uint64_t *)(a1 + 16);
  unint64_t v29 = a2[2];
  uint64_t v10 = a1 + 9;
  while (1)
  {
    uint64_t v11 = *v9;
    if (!*v9) {
      goto LABEL_25;
    }
    unint64_t v12 = *a2;
    unint64_t v13 = a2[1];
    int v14 = *(_DWORD *)(v11 - 8);
    LODWORD(v30) = -1640531527;
    WORD2(v30) = 0;
    BYTE6(v30) = 0;
    WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v30, v12, v13);
    uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
    unsigned int v16 = result & v14;
    uint64_t v17 = v11 + 56 * (result & v14);
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    if (v12 == *(void *)v17 && v13 == v19)
    {
LABEL_16:
      uint64_t v23 = *v9;
      if (!*v9) {
        goto LABEL_21;
      }
    }
    else
    {
      int v21 = 1;
      while (v18 | v19)
      {
        unsigned int v16 = (v16 + v21) & v14;
        uint64_t v17 = v11 + 56 * v16;
        uint64_t v18 = *(void *)v17;
        uint64_t v19 = *(void *)(v17 + 8);
        ++v21;
        if (v12 == *(void *)v17 && v13 == v19) {
          goto LABEL_16;
        }
      }
      uint64_t v23 = *v9;
      if (!*v9) {
        goto LABEL_25;
      }
      uint64_t v17 = v23 + 56 * *(unsigned int *)(v23 - 4);
    }
    v23 += 56 * *(unsigned int *)(v23 - 4);
LABEL_21:
    if (v23 != v17)
    {
      if (*(unsigned char *)(v17 + 32) || (unint64_t v24 = *(void *)(v17 + 16), v24 > v29))
      {
LABEL_26:
        uint64_t result = WTF::GenericHashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take<WebCore::ImageBuffer*>((uint64_t)a3, 0);
        goto LABEL_27;
      }
      if (v24 == v29) {
        break;
      }
    }
LABEL_25:
    double v30 = a4;
    int v31 = 2;
    if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>(v10, v8, (WTF::TimeWithDynamicClockType *)&v30) & 1) == 0) {
      goto LABEL_26;
    }
  }
  if (!*(unsigned char *)(v17 + 48))
  {
    __break(1u);
    return result;
  }
  uint64_t v26 = *(void *)(v17 + 40);
  *(void *)(v17 + 40) = 0;
  *a3 = v26;
  uint64_t v27 = *v9;
  if (!*v9 || (v27 += 56 * *(unsigned int *)(v27 - 4), v27 != v17))
  {
    if (v27 != v17) {
      uint64_t result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v9, v17);
    }
  }
LABEL_27:
  int v25 = 1;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
  if (v25 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  return result;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::remove(uint64_t a1, unint64_t *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t *)(a1 + 16);
  uint64_t v9 = v10;
  unint64_t v11 = *a2;
  if (v10
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v8, 0), (uint64_t v9 = *v8) != 0))
  {
    int v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v12 = 0;
  }
  LODWORD(v4nw_tcp_options_set_no_delay(options, 1) = -1640531527;
  WORD2(v4nw_tcp_options_set_no_delay(options, 1) = 0;
  BYTE6(v4nw_tcp_options_set_no_delay(options, 1) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v41, v11, v6);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41);
  unsigned int v15 = result & v12;
  uint64_t v16 = v9 + 56 * (result & v12);
  unint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  if (*(_OWORD *)v16 == 0)
  {
LABEL_15:
    *(void *)uint64_t v16 = v11;
    *(void *)(v16 + 8) = v6;
    *(void *)&long long v41 = 0;
    *((void *)&v41 + nw_tcp_options_set_no_delay(options, 1) = v7;
    int v21 = 1;
    char v42 = 1;
    LOBYTE(v43) = 0;
    char v44 = 0;
    *(unsigned char *)(v16 + 32) = 1;
    *(_OWORD *)(v16 + 16) = v41;
    std::__optional_storage_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>>(v16 + 40, (unsigned __int8 *)&v43);
    std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](&v43, v22);
    uint64_t v23 = *v8;
    if (*v8) {
      int v21 = *(_DWORD *)(v23 - 12) + 1;
    }
    *(_DWORD *)(v23 - 12) = v21;
    uint64_t v24 = *v8;
    if (*v8) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26) {
        goto LABEL_23;
      }
    }
    else if (3 * v27 > 4 * v26)
    {
LABEL_23:
      uint64_t v28 = 0;
      goto LABEL_24;
    }
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v8, (unint64_t *)v16);
    goto LABEL_23;
  }
  uint64_t v19 = 0;
  int v20 = 1;
  while (v11 != v17 || v6 != v18)
  {
    if (v17 == -1) {
      uint64_t v19 = v16;
    }
    unsigned int v15 = (v15 + v20) & v12;
    uint64_t v16 = v9 + 56 * v15;
    unint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    ++v20;
    if (*(_OWORD *)v16 == 0)
    {
      if (v19)
      {
        *(void *)(v19 + 48) = 0;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_OWORD *)(v19 + 32) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        --*(_DWORD *)(*v8 - 16);
        uint64_t v16 = v19;
      }
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(v16 + 32) || (unint64_t v30 = *(void *)(v16 + 16), v30 > v7))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_28;
  }
  if (v30 != v7)
  {
    uint64_t v28 = 0;
    *(void *)(v16 + 24) = v7;
    uint64_t v29 = 1;
    *(unsigned char *)(v16 + 32) = 1;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(v16 + 48))
  {
    __break(1u);
    return result;
  }
  uint64_t v28 = *(void *)(v16 + 40);
  *(void *)(v16 + 40) = 0;
  uint64_t v39 = *v8;
  if (!*v8 || (v39 += 56 * *(unsigned int *)(v39 - 4), v39 != v16))
  {
    if (v39 != v16) {
      WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v8, v16);
    }
  }
LABEL_24:
  uint64_t v29 = 1;
LABEL_28:
  int v31 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 == 1)
  {
    if (!v28) {
      return v29;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (!v28) {
      return v29;
    }
  }
  char v32 = 0;
  uint64_t v33 = *(void *)(v28 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
  if (v32) {
    MEMORY[0x19972E8D0](v33);
  }
  uint64_t v34 = *(void *)(v33 + 8);
  int v35 = 1;
  uint64_t v36 = v34 - 1;
  *(void *)(v33 + 8) = v34 - 1;
  if (v34 == 1)
  {
    uint64_t v40 = *(void *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 24);
    *(void *)(v33 + 24) = 0;
    BOOL v38 = v40 != 0;
  }
  else
  {
    uint64_t v37 = 0;
    BOOL v38 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 == 1)
  {
    if (!v36)
    {
LABEL_36:
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if (!v38) {
        WTF::fastFree((WTF *)v33, v14);
      }
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
    if (!v36) {
      goto LABEL_36;
    }
  }
  return v29;
}

uint64_t WebKit::RemoteBarcodeDetector::RemoteBarcodeDetector(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BED58;
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  int v12 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v12, 1u);
  *(void *)(a1 + 24) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4);
  unint64_t v13 = *(atomic_uint **)(a4 + 24);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = a5;
  *(void *)(a1 + 48) = a6;
  return a1;
}

void WebKit::RemoteBarcodeDetector::~RemoteBarcodeDetector(WebKit::RemoteBarcodeDetector *this, void *a2)
{
  *(void *)this = &unk_1EE9BED58;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteBarcodeDetector::~RemoteBarcodeDetector(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::RemoteBarcodeDetector::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  WebKit::RemoteRenderingBackend::imageBuffer(v5, a2, &v22);
  if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v5 + 16));
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v5 + 8);
  }
  uint64_t v6 = v22;
  if (!v22)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 16))(v11, v21);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    return (uint64_t *)WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v12);
  }
  unint64_t v7 = *(_DWORD **)(a1 + 16);
  ++v7[2];
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(v21, v6);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v7 + 16))(v7, v21, a3);
  uint64_t result = WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(v21, v8);
  if (v7[2] == 1) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  else {
    --v7[2];
  }
  char v13 = 0;
  uint64_t v22 = 0;
  uint64_t v14 = *(void *)(v6 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13) {
    uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v14);
  }
  uint64_t v15 = *(void *)(v14 + 8);
  int v16 = 1;
  uint64_t v17 = v15 - 1;
  *(void *)(v14 + 8) = v15 - 1;
  if (v15 == 1)
  {
    uint64_t v20 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 24);
    *(void *)(v14 + 24) = 0;
    BOOL v19 = v20 != 0;
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 == 1)
  {
    if (v17) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17) {
      return result;
    }
  }
  if (v18) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (!v19) {
    return (uint64_t *)WTF::fastFree((WTF *)v14, v10);
  }
  return result;
}

uint64_t WebKit::RemoteFaceDetector::RemoteFaceDetector(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BED80;
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  int v12 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v12, 1u);
  *(void *)(a1 + 24) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4);
  char v13 = *(atomic_uint **)(a4 + 24);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = a5;
  *(void *)(a1 + 48) = a6;
  return a1;
}

void WebKit::RemoteFaceDetector::~RemoteFaceDetector(WebKit::RemoteFaceDetector *this, void *a2)
{
  *(void *)this = &unk_1EE9BED80;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteFaceDetector::~RemoteFaceDetector(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::RemoteFaceDetector::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::RemoteRenderingBackend::imageBuffer(*(void *)(*(void *)(a1 + 32) + 8), a2, &v21);
  uint64_t v5 = v21;
  if (!v21)
  {
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, v20);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    return (uint64_t *)WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v18);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(v20, v21);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 16))(v6, v20, a3);
  uint64_t result = WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(v20, v7);
  char v10 = 0;
  uint64_t v21 = 0;
  uint64_t v11 = *(void *)(v5 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v11);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  int v13 = 1;
  uint64_t v14 = v12 - 1;
  *(void *)(v11 + 8) = v12 - 1;
  if (v12 == 1)
  {
    uint64_t v19 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    *(void *)(v11 + 24) = 0;
    BOOL v16 = v19 != 0;
  }
  else
  {
    uint64_t v15 = 0;
    BOOL v16 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 == 1)
  {
    if (v14) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14) {
      return result;
    }
  }
  if (v15) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (!v16) {
    return (uint64_t *)WTF::fastFree((WTF *)v11, v9);
  }
  return result;
}

uint64_t WebKit::RemoteTextDetector::RemoteTextDetector(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BEDA8;
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v12 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v12, 1u);
  *(void *)(a1 + 24) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4);
  int v13 = *(atomic_uint **)(a4 + 24);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = a5;
  *(void *)(a1 + 48) = a6;
  return a1;
}

void WebKit::RemoteTextDetector::~RemoteTextDetector(WebKit::RemoteTextDetector *this, void *a2)
{
  *(void *)this = &unk_1EE9BEDA8;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteTextDetector::~RemoteTextDetector(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::RemoteTextDetector::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  WebKit::RemoteRenderingBackend::imageBuffer(v5, a2, &v22);
  if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v5 + 16));
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v5 + 8);
  }
  uint64_t v6 = v22;
  if (!v22)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 16))(v11, v21);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    return (uint64_t *)WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v12);
  }
  unint64_t v7 = *(_DWORD **)(a1 + 16);
  ++v7[2];
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(v21, v6);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v7 + 16))(v7, v21, a3);
  uint64_t result = WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(v21, v8);
  if (v7[2] == 1) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  else {
    --v7[2];
  }
  char v13 = 0;
  uint64_t v22 = 0;
  uint64_t v14 = *(void *)(v6 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13) {
    uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v14);
  }
  uint64_t v15 = *(void *)(v14 + 8);
  int v16 = 1;
  uint64_t v17 = v15 - 1;
  *(void *)(v14 + 8) = v15 - 1;
  if (v15 == 1)
  {
    uint64_t v20 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 24);
    *(void *)(v14 + 24) = 0;
    BOOL v19 = v20 != 0;
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 == 1)
  {
    if (v17) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17) {
      return result;
    }
  }
  if (v18) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (!v19) {
    return (uint64_t *)WTF::fastFree((WTF *)v14, v10);
  }
  return result;
}

void WebKit::ShapeDetection::ObjectHeap::~ObjectHeap(WebKit::ShapeDetection::ObjectHeap *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
  }
  WTF::WeakPtrFactory<WebKit::ShapeDetection::ObjectHeap,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v28 = v8 + 16 * v22;
        goto LABEL_32;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      int v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = a3;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_25:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      int v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_25;
  }
  uint64_t v28 = v23 + 16 * v26;
  char v27 = 1;
LABEL_32:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

unsigned int *WebKit::ShapeDetection::ObjectHeap::removeObject(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 2, &v13);
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
LABEL_8:
  unint64_t v7 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 3, &v13);
  uint64_t v8 = a1[3];
  if (v8)
  {
    char v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v9 == v7) {
      goto LABEL_15;
    }
  }
  else
  {
    if (!v7) {
      goto LABEL_15;
    }
    char v9 = 0;
  }
  if (v9 != v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 3, v7);
  }
LABEL_15:
  uint64_t result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 4, &v13);
  uint64_t v11 = a1[4];
  if (v11)
  {
    unint64_t v12 = (unsigned int *)(v11 + 16 * *(unsigned int *)(v11 - 4));
    if (v12 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unint64_t v12 = 0;
  }
  if (v12 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 4, result);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::RemoteAudioHardwareListenerProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteAudioHardwareListenerProxy *)-1) {
        std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteAudioHardwareListenerProxy *std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100](WebKit::RemoteAudioHardwareListenerProxy **a1, WebKit::RemoteAudioHardwareListenerProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteAudioHardwareListenerProxy::~RemoteAudioHardwareListenerProxy(result, a2);
    return (WebKit::RemoteAudioHardwareListenerProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (id **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (id *)-1) {
        std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v4, 0);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int **std::unique_ptr<WebKit::RemoteMediaEngineConfigurationFactoryProxy>::reset[abi:sn180100](unsigned int ***a1, unsigned int **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteMediaEngineConfigurationFactoryProxy::~RemoteMediaEngineConfigurationFactoryProxy(result, a2);
    return (unsigned int **)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::RemoteLegacyCDMFactoryProxy *std::unique_ptr<WebKit::RemoteLegacyCDMFactoryProxy>::reset[abi:sn180100](WebKit::RemoteLegacyCDMFactoryProxy **a1, WebKit::RemoteLegacyCDMFactoryProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLegacyCDMFactoryProxy::~RemoteLegacyCDMFactoryProxy(result);
    return (WebKit::RemoteLegacyCDMFactoryProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::RemoteCDMFactoryProxy *std::unique_ptr<WebKit::RemoteCDMFactoryProxy>::reset[abi:sn180100](WebKit::RemoteCDMFactoryProxy **a1, WebKit::RemoteCDMFactoryProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(result);
    return (WebKit::RemoteCDMFactoryProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::RemoteGPU **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteGPU *)-1) {
        uint64_t v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue(v4);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteGPU **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteGPU **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteGPU *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteGPU *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>(WebKit::RemoteGPU **a1)
{
  WebKit::RemoteGPU::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteGPU *)v3();
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1) {
        uint64_t v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v4);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(uint64_t *a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 16));
      (*(void (**)(void))(*(void *)(v2 + 8) + 8))();
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>(uint64_t *a1)
{
  uint64_t v4 = *a1;
  uint64_t v1 = v4;
  *a1 = 0;
  WebKit::RemoteGraphicsContextGL::stopListeningForIPC(v1, &v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)(result + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(result + 16));
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(result + 8) + 8);
    return v3();
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::RemoteRenderingBackend **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteRenderingBackend *)-1) {
        uint64_t v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue(v4);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteRenderingBackend *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>(WebKit::RemoteRenderingBackend **a1)
{
  WebKit::RemoteRenderingBackend::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 4);
    uint64_t v3 = *(uint64_t (**)(void))(*((void *)result + 1) + 8);
    return (WebKit::RemoteRenderingBackend *)v3();
  }
  return result;
}

unsigned int **WTF::WeakPtrFactory<WebCore::NowPlayingManagerClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  if (*a1)
  {
    *((void *)*a1 + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v4 = *a1;
    *a1 = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void std::default_delete<WebKit::GPUProxyForCapture>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
    *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
    if (v3) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, this);
    }
    WTF::fastFree(this, this);
  }
}

void WebKit::GPUProxyForCapture::~GPUProxyForCapture(WebKit::GPUProxyForCapture *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
}

{
  atomic_uchar *v3;
  uint64_t vars8;

  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::~ThreadSafeObjectHeap(void *a1, void *a2)
{
  *a1 = &unk_1EE9BEDD0;
  uint64_t v2 = a1[2];
  if (v2) {
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v2, a2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(v4 - 5) != -1) {
        uint64_t v4 = std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
      }
      v4 += 7;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      char v4 = 0;
      uint64_t v5 = *(void *)(v3 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x19972E8D0](v5);
      }
      uint64_t v6 = *(void *)(v5 + 8);
      int v7 = 1;
      uint64_t v8 = v6 - 1;
      *(void *)(v5 + 8) = v6 - 1;
      if (v6 == 1)
      {
        uint64_t v12 = *(void *)(v5 + 16);
        uint64_t v9 = *(void *)(v5 + 24);
        *(void *)(v5 + 24) = 0;
        BOOL v10 = v12 != 0;
      }
      else
      {
        uint64_t v9 = 0;
        BOOL v10 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1)
      {
        if (v8) {
          return a1;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        if (v8) {
          return a1;
        }
      }
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      if (!v10) {
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    char v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
      {
        uint64_t v5 = *v4;
        *char v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5 + 2);
            (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int **WTF::WeakPtrFactory<WebKit::ShapeDetection::ObjectHeap,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **result, void *a2)
{
  if (*result)
  {
    *((void *)*result + nw_tcp_options_set_no_delay(options, 1) = 0;
    uint64_t v2 = *result;
    WebKit::RemoteRenderingBackend *result = 0;
    if (v2)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v2);
        uint64_t v3 = result;
        WTF::fastFree((WTF *)v2, a2);
        return v3;
      }
    }
  }
  else
  {
    WebKit::RemoteRenderingBackend *result = 0;
  }
  return result;
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::~ScopedActiveMessageReceiveQueue(uint64_t *a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>(a1);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

atomic_uchar *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  uint64_t result = (atomic_uchar *)WebKit::RemoteVideoFrameObjectHeap::close(v1);
  if (v1)
  {
    char v4 = *(atomic_uchar **)(v1 + 16);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v4, v3);
  }
  return result;
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::~ScopedActiveMessageReceiveQueue(uint64_t *a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>(a1);
    uint64_t v4 = *a1;
    *a1 = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

atomic_uchar *IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>(uint64_t *a1)
{
  uint64_t v5 = *a1;
  uint64_t v1 = v5;
  *a1 = 0;
  uint64_t result = (atomic_uchar *)WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(v1, &v5);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v3);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(IPC::Encoder *a1, char *a2)
{
  char v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = v2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::GPUProxyForCapture::connection(WebKit::GPUProxyForCapture *this)
{
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 1), *((void *)this + 2), &v4);
  uint64_t v1 = v4;
  uint64_t v2 = *(void *)(v4 + 56);
  uint64_t v4 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v1 + 16));
  return v2;
}

uint64_t WebKit::GPUProxyForCapture::willStartCapture(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 1:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16), &v8);
      uint64_t v3 = v8;
      int v4 = v8[192];
      goto LABEL_4;
    case 3:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16), &v8);
      uint64_t v6 = v8;
      uint64_t v2 = v8[193];
      uint64_t v8 = 0;
      int v7 = (WebCore::MediaSessionManageriOS *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
      if (v2)
      {
        WebCore::MediaSessionManageriOS::providePresentingApplicationPID(v7);
        uint64_t v2 = 1;
      }
      break;
    case 4:
    case 5:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16), &v8);
      uint64_t v3 = v8;
      int v4 = v8[194];
LABEL_4:
      uint64_t v2 = v4 != 0;
      uint64_t v8 = 0;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v3 + 2));
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t WebKit::GPUProxyForCapture::logger(WebKit::GPUProxyForCapture *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 2), &v6);
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v3 = WebKit::GPUConnectionToWebProcess::logger((WebKit::GPUConnectionToWebProcess *)v2);
  int v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v4 + 2));
  }
  return v3;
}

BOOL WebKit::GPUProxyForCapture::setCaptureAttributionString(WebKit::GPUProxyForCapture *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 2), &v6);
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  BOOL v3 = WebKit::GPUConnectionToWebProcess::setCaptureAttributionString((WebKit::GPUConnectionToWebProcess *)v2);
  int v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v4 + 2));
  }
  return v3;
}

uint64_t WebKit::GPUProxyForCapture::resourceOwner(WebKit::GPUProxyForCapture *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 1);
  if (!v2) {
    return 96;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 2), &v6);
  uint64_t v5 = v6;
  uint64_t v3 = v6 + 96;
  uint64_t v6 = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 16));
  }
  return v3;
}

void WebKit::GPUProxyForCapture::setTCCIdentity(WebKit::GPUProxyForCapture *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 2), &v4);
    uint64_t v2 = v4;
  }
  else
  {
    int v4 = 0;
  }
  WebKit::GPUConnectionToWebProcess::setTCCIdentity((WebKit::GPUConnectionToWebProcess *)v2);
  uint64_t v3 = v4;
  int v4 = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v3 + 2));
  }
}

BOOL WebKit::GPUProxyForCapture::setCurrentMediaEnvironment(uint64_t a1, uint64_t a2)
{
  int v4 = *(atomic_uchar **)(a1 + 8);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *(void *)(a1 + 16), &v12);
    uint64_t v5 = v12;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = a2;
  uint64_t v6 = (WebCore::RealtimeMediaSourceCenter *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((_DWORD **)(v5 + 360), &v14, &v13);
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    uint64_t v6 = (WebCore::RealtimeMediaSourceCenter *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
  }
  if (v13) {
    BOOL v8 = *((_DWORD *)v13 + 1) != 0;
  }
  else {
    BOOL v8 = 0;
  }
  WebCore::RealtimeMediaSourceCenter::singleton(v6);
  WebCore::RealtimeMediaSourceCenter::setCurrentMediaEnvironment();
  BOOL v10 = v13;
  uint64_t v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return v8;
}

atomic_uchar *WebKit::GPUProxyForCapture::startProducingData(atomic_uchar *result, int a2)
{
  if (a2 == 3)
  {
    if (*((void *)result + 1))
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)result + 1), *((void *)result + 2), &v13);
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v13 = 0;
    }
    BOOL v10 = WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(v9);
    unint64_t result = WebKit::RemoteMediaSessionHelperProxy::overridePresentingApplicationPIDIfNeeded(v10);
  }
  else
  {
    if (a2 != 1) {
      return result;
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)result + 1), *((void *)result + 2), &v13);
    uint64_t v2 = v13;
    uint64_t v3 = *((void *)v13 + 10);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 120), 1u);
    unint64_t result = (atomic_uchar *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v3 + 128));
    int v4 = result;
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v3 + 128);
    if (v7) {
      BOOL v8 = (atomic_uchar *)(v7 + 16 * *(unsigned int *)(v7 - 4));
    }
    else {
      BOOL v8 = 0;
    }
    if (v8 == result) {
      goto LABEL_18;
    }
    do
    {
      uint64_t v11 = (WebKit::GPUConnectionToWebProcess *)*((void *)v4 + 1);
      *((unsigned char *)v11 + 160) = v11 == v2;
      unint64_t result = (atomic_uchar *)*((void *)v11 + 19);
      if (result) {
        unint64_t result = WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::notifyLastToCaptureAudioChanged((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *)result);
      }
      while (1)
      {
        v4 += 16;
        if (v4 == v6) {
          break;
        }
        if ((unint64_t)(*(void *)v4 + 1) > 1) {
          goto LABEL_16;
        }
      }
      int v4 = v6;
LABEL_16:
      ;
    }
    while (v4 != v8);
    if (v3)
    {
LABEL_18:
      if (atomic_fetch_add((atomic_uint *volatile)(v3 + 120), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v3 + 120));
        unint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
  }
  uint64_t v12 = v13;
  uint64_t v13 = 0;
  if (v12) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v12 + 2));
  }
  return result;
}

uint64_t WebKit::GPUProxyForCapture::remoteVideoFrameObjectHeap(WebKit::GPUProxyForCapture *this)
{
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 1), *((void *)this + 2), &v4);
  uint64_t v1 = v4;
  uint64_t v2 = *(void *)(v4 + 200);
  uint64_t v4 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v1 + 16));
  return v2;
}

IPC::Encoder *WebKit::GPUProxyForCapture::startMonitoringCaptureDeviceRotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16), &v17);
  uint64_t v5 = *(atomic_uchar *volatile **)(*(void *)(v17 + 80) + 40);
  uint64_t v20 = a2;
  if (!v5)
  {
    uint64_t v18 = (IPC::Encoder *)&v20;
    uint64_t v19 = a3;
    unint64_t result = IPC::Connection::send<Messages::GPUProcessProxy::StartMonitoringCaptureDeviceRotation>(0, (uint64_t **)&v18);
    goto LABEL_10;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
  uint64_t v18 = (IPC::Encoder *)&v20;
  uint64_t v19 = a3;
  unint64_t result = IPC::Connection::send<Messages::GPUProcessProxy::StartMonitoringCaptureDeviceRotation>((uint64_t)v5, (uint64_t **)&v18);
  char v7 = 0;
  atomic_uchar *volatile v8 = *v5;
  atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    unint64_t result = (IPC::Encoder *)MEMORY[0x19972E8D0](v8);
  }
  uint64_t v9 = *((void *)v8 + 1);
  uint64_t v10 = v9 - 1;
  *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = v9 - 1;
  if (v9 == 1)
  {
    uint64_t v16 = *((void *)v8 + 2);
    uint64_t v12 = *((void *)v8 + 3);
    *((void *)v8 + 3) = 0;
    BOOL v11 = v16 == 0;
  }
  else
  {
    BOOL v11 = 0;
    uint64_t v12 = 0;
  }
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 == 1)
  {
    if (v10) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v10) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v14 = &unk_1EE9B37E8;
  *(void *)(v14 + 8) = v8;
  *(void *)(v14 + 16) = v12;
  *(unsigned char *)(v14 + 24) = v11;
  uint64_t v18 = (IPC::Encoder *)v14;
  WTF::ensureOnMainRunLoop();
  unint64_t result = v18;
  uint64_t v18 = 0;
  if (result) {
    unint64_t result = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 8))(result);
  }
LABEL_10:
  uint64_t v15 = v17;
  uint64_t v17 = 0;
  if (v15) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
  }
  return result;
}

IPC::Encoder *WebKit::GPUProxyForCapture::stopMonitoringCaptureDeviceRotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16), &v17);
  uint64_t v5 = *(atomic_uchar *volatile **)(*(void *)(v17 + 80) + 40);
  uint64_t v20 = a2;
  if (!v5)
  {
    uint64_t v18 = (IPC::Encoder *)&v20;
    uint64_t v19 = a3;
    unint64_t result = IPC::Connection::send<Messages::GPUProcessProxy::StopMonitoringCaptureDeviceRotation>(0, (uint64_t **)&v18);
    goto LABEL_10;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
  uint64_t v18 = (IPC::Encoder *)&v20;
  uint64_t v19 = a3;
  unint64_t result = IPC::Connection::send<Messages::GPUProcessProxy::StopMonitoringCaptureDeviceRotation>((uint64_t)v5, (uint64_t **)&v18);
  char v7 = 0;
  atomic_uchar *volatile v8 = *v5;
  atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    unint64_t result = (IPC::Encoder *)MEMORY[0x19972E8D0](v8);
  }
  uint64_t v9 = *((void *)v8 + 1);
  uint64_t v10 = v9 - 1;
  *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = v9 - 1;
  if (v9 == 1)
  {
    uint64_t v16 = *((void *)v8 + 2);
    uint64_t v12 = *((void *)v8 + 3);
    *((void *)v8 + 3) = 0;
    BOOL v11 = v16 == 0;
  }
  else
  {
    BOOL v11 = 0;
    uint64_t v12 = 0;
  }
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 == 1)
  {
    if (v10) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v10) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v14 = &unk_1EE9B37E8;
  *(void *)(v14 + 8) = v8;
  *(void *)(v14 + 16) = v12;
  *(unsigned char *)(v14 + 24) = v11;
  uint64_t v18 = (IPC::Encoder *)v14;
  WTF::ensureOnMainRunLoop();
  unint64_t result = v18;
  uint64_t v18 = 0;
  if (result) {
    unint64_t result = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 8))(result);
  }
LABEL_10:
  uint64_t v15 = v17;
  uint64_t v17 = 0;
  if (v15) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  uint64_t v11 = a1 + 16 * v9;
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(v11 + 8));
  *(void *)uint64_t v11 = *a2;
  *(void *)(v11 + 8) = a2[1];
  a2[1] = 0;
  return v11;
}

WebKit::RemoteRenderingBackend **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  unint64_t result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::RemoteRenderingBackend **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    do
    {
      int v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          int v24 = (uint64_t *)(v15 + 16 * v22);
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v24 + 1);
          uint64_t *v24 = *v13;
          uint64_t v25 = (uint64_t *)(v4 + 16 * v11);
          uint64_t v26 = v25[1];
          ++v25;
          v24[1] = v26;
          uint64_t *v25 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v25);
        }
        else
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue((uint64_t *)(v4 + 16 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v4)
  {
    return;
  }

  WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::MediaPlayer &)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BEE78;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::MediaPlayer &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BEE78;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::MediaPlayer &)> &&)::$_0,void>::call(uint64_t a1)
{
  unint64_t result = (atomic_uchar *)WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer(*(void *)(*(void *)(a1 + 8) + 128), (void *)(a1 + 16), &v5);
  uint64_t v3 = v5;
  if (v5)
  {
    (*(void (**)(void, atomic_uchar **))(***(void ***)(a1 + 24) + 16))(**(void **)(a1 + 24), v5);
    uint64_t v4 = *v3;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(v4);
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + nw_tcp_options_set_no_delay(options, 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9BEFB0;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + 24) = v5;
  uint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    BOOL v5 = (WTF *)MEMORY[0x199730480]();
    uint64_t result = WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      int v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)(v27 + 8));
          *(void *)uint64_t v27 = *v16;
          uint64_t v28 = v6 + 16 * v13;
          uint64_t v29 = *(void *)(v28 + 8);
          v28 += 8;
          *(void *)(v27 + 8) = v29;
          *(void *)uint64_t v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)v28);
          if (v16 == a3) {
            uint64_t v14 = v27;
          }
        }
        else
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)(v6 + 16 * v13 + 8));
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

WebKit::RemoteGPU **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::RemoteGPU **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::releaseGPU(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BEEA0;
  a1[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 30);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::releaseGPU(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BEEA0;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 30);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::releaseGPU(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
}

unint64_t IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = v15 + 16 * v22;
          std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)(v24 + 8), 0);
          *(void *)uint64_t v24 = *v13;
          uint64_t v25 = v6 + 16 * v11;
          uint64_t v26 = *(void *)(v25 + 8);
          v25 += 8;
          *(void *)uint64_t v25 = 0;
          *(void *)(v24 + 8) = v26;
          std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)v25, 0);
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebKit::RemoteAudioHardwareListenerProxy *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::RemoteAudioHardwareListenerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::GPUProcess::*&)(void),WebKit::GPUProcess*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  char v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::remove(uint64_t *result, void *a2)
{
  if (*result)
  {
    uint64_t v2 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((void *)v2 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = 0;
  }
  if ((void *)v2 != a2)
  {
    *a2 = -1;
    ++*(_DWORD *)(*result - 16);
    uint64_t v3 = *result;
    int v4 = *result ? *(_DWORD *)(v3 - 12) - 1 : -1;
    *(_DWORD *)(v3 - 12) = v4;
    uint64_t v5 = *result;
    if (*result)
    {
      unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
      unsigned int v7 = *(_DWORD *)(v5 - 4);
      if (v6 < v7 && v7 >= 9) {
        return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v7 >> 1, 0);
      }
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = v9 + 24;
    do
    {
      *(void *)(v12 - 8) = 0;
      *(unsigned char *)(v12 + 2) = 0;
      *(_WORD *)uint64_t v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = (void *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          int v17 = 0;
        }
        uint64_t v18 = (*v15 + ~(*v15 << 32)) ^ ((*v15 + ~(*v15 << 32)) >> 22);
        unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
        int v22 = 1;
        do
        {
          unsigned int v23 = v21;
          uint64_t v24 = *(void *)(v16 + 16 * v21);
          unsigned int v21 = (v21 + v22++) & v17;
        }
        while (v24);
        uint64_t v25 = (_OWORD *)(v16 + 16 * v23);
        _OWORD *v25 = *(_OWORD *)v15;
        if (v15 == a3) {
          uint64_t v14 = v25;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 16 * v6;
    }
    else
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 16 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
      return 0;
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  uint64_t v11 = (void *)(a1 + 16 * v9);
  uint64_t v12 = v11[1];
  v11[1] = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 16));
  }
  void *v11 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

atomic_uchar *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::remove(atomic_uchar *result, void *a2)
{
  if (*(void *)result)
  {
    unsigned int v2 = (void *)(*(void *)result + 16 * *(unsigned int *)(*(void *)result - 4));
    if (v2 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = 0;
  }
  if (v2 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(result, a2);
  }
  return result;
}

atomic_uchar *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(atomic_uchar *result, void *a2)
{
  unsigned int v2 = (uint64_t *)result;
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BEEF0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BEEF0;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::call(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    uint64_t v4 = *(atomic_uint **)(v3 + 8);
    if (v4)
    {
      atomic_fetch_add(v4 + 30, 1u);
      uint64_t result = WebKit::GPUProcess::lowMemoryHandler((WebKit::GPUProcess *)v4, a2, a3);
      if (atomic_fetch_add(v4 + 30, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v4 + 30);
        int v5 = *(uint64_t (**)(atomic_uint *))(*(void *)v4 + 8);
        return v5(v4);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BEF18;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BEF18;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WTF::CompletionHandler<void ()(void)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      atomic_fetch_add((atomic_uint *volatile)(v4 + 120), 1u);
      int v5 = *(os_unfair_lock_s **)(v4 + 40);
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v6 = &unk_1EE9BEF40;
      uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v8 = 65;
      *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = 0;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      v15[1] = v7;
      uint64_t v16 = v8;
      v15[0] = (uint64_t)v6;
      IPC::Connection::sendMessageWithAsyncReply(v5, &v16, v15, 0, 0);
      uint64_t v10 = v15[0];
      v15[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v9);
        WTF::fastFree(v13, v14);
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v4 + 120), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v4 + 120));
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v4, a2);
}

uint64_t WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::MockMediaDevice>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 96 * v3));
  }
  unsigned int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MockMediaDevice>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    int v5 = result;
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 22);
      if (v6 != -1) {
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS6_21MockSpeakerPropertiesENS6_20MockCameraPropertiesENS6_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v6])(&v8, (char *)v5 + 24);
      }
      *((_DWORD *)v5 + 22) = -1;
      uint64_t v7 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 96);
    }
    while (v5 != a2);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::GPUProcess::setShouldListenToVoiceActivity(BOOL)::$_0,void>::call(WebKit::GPUProcess *a1)
{
  if ((_MergedGlobals_59 & 1) == 0)
  {
    WebKit::GPUProcess::GPUProcess(a1);
    _MergedGlobals_59 = 1;
  }
  uint64_t v1 = (uint64_t *)qword_1EB359070;
  if (qword_1EB359070)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)qword_1EB359070);
    uint64_t result = IPC::Connection::send<Messages::GPUProcessProxy::VoiceActivityDetected>((uint64_t)v1);
    char v3 = 0;
    uint64_t v4 = *v1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      uint64_t result = (IPC::Encoder *)MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = v5 - 1;
    *(void *)(v4 + 8) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v11 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v4 + 24);
      *(void *)(v4 + 24) = 0;
      BOOL v7 = v11 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return result;
      }
    }
    else
    {
      uint64_t result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return result;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v12 = (IPC::Encoder *)v10;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v12;
    if (v12) {
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    return IPC::Connection::send<Messages::GPUProcessProxy::VoiceActivityDetected>(0);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessProxy::VoiceActivityDetected>(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 68;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  BOOL v7 = v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  BOOL v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*(void *)a2 + ~(*(void *)a2 << 32)) ^ ((*(void *)a2 + ~(*(void *)a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = (void *)(a1 + 24 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (*v10);
  uint64_t v11 = a1 + 24 * v9;
  uint64_t v14 = *(WTF::StringImpl **)(v11 + 16);
  uint64_t v13 = (void *)(v11 + 16);
  uint64_t v12 = v14;
  uint64_t v15 = (WTF::StringImpl **)(v13 - 1);
  void *v13 = 0;
  if (v14)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v16 = *v15;
  void *v15 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  int v17 = (WTF::StringImpl *)*((void *)a2 + 1);
  *uint64_t v10 = *(void *)a2;
  *((void *)a2 + nw_tcp_options_set_no_delay(options, 1) = 0;
  void *v15 = v17;
  uint64_t v18 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  void *v13 = v18;
  return v10;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t result = (uint64_t *)(v2 + 24 * v7);
  uint64_t v9 = *result;
  if (*result != *a2)
  {
    int v10 = 1;
    while (v9)
    {
      unsigned int v7 = (v7 + v10) & v3;
      uint64_t result = (uint64_t *)(v2 + 24 * v7);
      uint64_t v9 = *result;
      ++v10;
      if (*result == *a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

WTF::StringImpl *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>>::customDeleteBucket(void *a1, WTF::StringImpl *a2)
{
  *a1 = -1;
  int v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(result, a2);
    uint64_t v4 = *a1;
    if (!result)
    {
      if (v4) {
        return v4 + 16 * *(unsigned int *)(v4 - 4);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    uint64_t v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v4;
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      int v7 = 1;
      while (v6)
      {
        uint64_t v5 = (v5 + v7) & v4;
        uint64_t v6 = *(void *)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2) {
          return v3 + 16 * v5;
        }
      }
      return 0;
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t v1 = (WTF *)MEMORY[0x199731480]();
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>)::{lambda(void)#1}>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  LODWORD(v30) = -1640531527;
  WORD2(v30) = 0;
  BYTE6(v30) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v30, *a2, a2[1]);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  unsigned int v11 = result & v9;
  uint64_t v12 = v8 + 56 * (result & v9);
  unint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (*a2 == v13 && a2[1] == v14)
      {
        uint64_t v26 = *a1;
        if (*a1) {
          unsigned int v27 = *(_DWORD *)(v26 - 4);
        }
        else {
          unsigned int v27 = 0;
        }
        char v29 = 0;
        uint64_t v28 = v26 + 56 * v27;
        goto LABEL_29;
      }
      if (v13 == -1) {
        uint64_t v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      uint64_t v12 = v8 + 56 * v11;
      unint64_t v13 = *(void *)v12;
      uint64_t v14 = *(void *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *(void *)(v15 + 48) = 0;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v12 = v15;
    }
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  int v17 = *a3;
  *(void *)&long long v30 = 0;
  BYTE8(v30) = 0;
  char v31 = 0;
  uint64_t v18 = *v17;
  uint64_t *v17 = 0;
  uint64_t v32 = v18;
  int v19 = 1;
  char v33 = 1;
  *(unsigned char *)(v12 + 32) = v31;
  *(_OWORD *)(v12 + 16) = v30;
  std::__optional_storage_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>>(v12 + 40, (unsigned __int8 *)&v32);
  uint64_t result = (uint64_t)std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](&v32, v20);
  uint64_t v21 = *a1;
  if (*a1) {
    int v19 = *(_DWORD *)(v21 - 12) + 1;
  }
  *(_DWORD *)(v21 - 12) = v19;
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_20:
      uint64_t result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, (unint64_t *)v12);
      uint64_t v12 = result;
      uint64_t v22 = *a1;
      if (*a1) {
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      }
      else {
        LODWORD(v25) = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_20;
  }
  uint64_t v28 = v22 + 56 * v25;
  char v29 = 1;
LABEL_29:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

uint64_t *std::optional<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,void>(uint64_t *a1, uint64_t *a2)
{
  int v3 = *((unsigned __int8 *)a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  if (!v3)
  {
    *a1 = v4;
    *((unsigned char *)a1 + 8) = 1;
    return a1;
  }
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    char v6 = 0;
    uint64_t v7 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    int v9 = 1;
    uint64_t v10 = v8 - 1;
    *(void *)(v7 + 8) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v14 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      BOOL v12 = v14 != 0;
    }
    else
    {
      uint64_t v11 = 0;
      BOOL v12 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v10) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v10) {
        return a1;
      }
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    if (!v12) {
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 56 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = v6;
    do
    {
      uint64_t v15 = (unint64_t *)(v5 + 56 * v12);
      unint64_t v9 = *v15;
      if (*v15 != -1)
      {
        unint64_t v16 = v15[1];
        if (v9 | v16)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v34 = -1640531527;
          __int16 v35 = 0;
          char v36 = 0;
          WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v34, v9, v16);
          int v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          int v21 = 0;
          do
          {
            unsigned int v22 = v19 & v18;
            int v23 = (_OWORD *)(v17 + 56 * (v19 & v18));
            int v19 = ++v21 + (v19 & v18);
          }
          while (*v23 != 0);
          uint64_t v24 = v17 + 56 * v22;
          unint64_t v25 = std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v24 + 40), v20);
          _OWORD *v23 = *(_OWORD *)v15;
          uint64_t v27 = v5 + 56 * v12;
          long long v28 = *(_OWORD *)(v27 + 16);
          char v29 = *(unsigned char *)(v27 + 32);
          *(unsigned char *)(v24 + 48) = 0;
          *(unsigned char *)(v24 + 32) = v29;
          *(_OWORD *)(v24 + 16) = v28;
          *(unsigned char *)(v24 + 40) = 0;
          if (*(unsigned char *)(v27 + 48))
          {
            uint64_t v30 = v5 + 56 * v12;
            uint64_t v31 = *(void *)(v30 + 40);
            *(void *)(v30 + 40) = 0;
            uint64_t *v25 = v31;
            *(unsigned char *)(v24 + 48) = 1;
          }
          std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v5 + 56 * v12 + 40), v26);
          if (v15 == a3) {
            unint64_t v13 = v23;
          }
        }
        else
        {
          std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v5 + 56 * v12 + 40), (void *)v9);
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), (void *)v9);
  return v13;
}

_DWORD *WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(_DWORD *result, unint64_t a2, unint64_t a3)
{
  unsigned int v3 = (a2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)a2) << 16) ^ (*result + (unsigned __int16)a2);
  unsigned int v4 = (a2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(a2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(a2) + (v3 >> 11));
  unsigned int v5 = (a3 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)a3 + (v4 >> 11)) << 16) ^ (v4
                                                                                               + (unsigned __int16)a3
                                                                                               + (v4 >> 11));
  int v6 = v5 + WORD2(a3) + (v5 >> 11);
  int v7 = (a3 >> 37) & 0x7FFF800 ^ (v6 << 16);
  _OWORD *result = (v7 ^ v6) + ((v7 ^ v6) >> 11);
  return result;
}

uint64_t std::__optional_storage_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 8) != a2[8])
  {
    if (!*(unsigned char *)(result + 8))
    {
      uint64_t v20 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t result = v20;
      *(unsigned char *)(result + 8) = 1;
      return result;
    }
    uint64_t v12 = *(void *)result;
    *(void *)uint64_t result = 0;
    if (v12)
    {
      char v13 = 0;
      uint64_t v14 = *(void *)(v12 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
      if (v13) {
        uint64_t result = MEMORY[0x19972E8D0](v14);
      }
      uint64_t v15 = *(void *)(v14 + 8);
      int v16 = 1;
      uint64_t v17 = v15 - 1;
      *(void *)(v14 + 8) = v15 - 1;
      if (v15 == 1)
      {
        uint64_t v22 = *(void *)(v14 + 16);
        uint64_t v18 = *(void *)(v14 + 24);
        *(void *)(v14 + 24) = 0;
        BOOL v19 = v22 != 0;
      }
      else
      {
        uint64_t v18 = 0;
        BOOL v19 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
      if (v16 == 1)
      {
        if (!v17)
        {
LABEL_24:
          if (v18) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          if (!v19) {
            uint64_t result = WTF::fastFree((WTF *)v14, a2);
          }
        }
      }
      else
      {
        uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v14);
        if (!v17) {
          goto LABEL_24;
        }
      }
    }
    *(unsigned char *)(v2 + 8) = 0;
    return result;
  }
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    uint64_t v4 = *(void *)result;
    *(void *)uint64_t result = v3;
    if (v4)
    {
      char v5 = 0;
      uint64_t v6 = *(void *)(v4 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
      if (v5) {
        uint64_t result = MEMORY[0x19972E8D0](v6);
      }
      uint64_t v7 = *(void *)(v6 + 8);
      int v8 = 1;
      uint64_t v9 = v7 - 1;
      *(void *)(v6 + 8) = v7 - 1;
      if (v7 == 1)
      {
        uint64_t v21 = *(void *)(v6 + 16);
        uint64_t v10 = *(void *)(v6 + 24);
        *(void *)(v6 + 24) = 0;
        BOOL v11 = v21 != 0;
      }
      else
      {
        uint64_t v10 = 0;
        BOOL v11 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 == 1)
      {
        if (v9) {
          return result;
        }
      }
      else
      {
        uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
        if (v9) {
          return result;
        }
      }
      if (v10) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      if (!v11)
      {
        return WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)a2 = xmmword_1994F6020;
  uint64_t result = std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(a2 + 40), (void *)(a2 + 40));
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (uint64_t *)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::GenericHashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take<WebCore::ImageBuffer*>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (a2)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      uint64_t result = MEMORY[0x19972E8D0](v5);
    }
    ++*(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  *uint64_t v3 = a2;
  return result;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedBarcode>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 48 * v3));
  }
  char v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedBarcode>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      char v4 = (WTF *)*((void *)v3 + 4);
      if (v4)
      {
        *((void *)v3 + 4) = 0;
        *((_DWORD *)v3 + 10) = 0;
        WTF::fastFree(v4, a2);
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v3 + 2);
      *((void *)v3 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      unsigned int v3 = (WTF::StringImpl *)((char *)v3 + 48);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  char v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 40 * v3;
    uint64_t v6 = (uint64_t)v4 + 16;
    do
    {
      if (*(unsigned char *)(v6 + 16)) {
        uint64_t v6 = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      }
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    char v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedText>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 40 * v3));
  }
  char v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedText>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      char v4 = (WTF *)*((void *)v3 + 3);
      if (v4)
      {
        *((void *)v3 + 3) = 0;
        *((_DWORD *)v3 + 8) = 0;
        WTF::fastFree(v4, a2);
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v3 + 2);
      *((void *)v3 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      unsigned int v3 = (WTF::StringImpl *)((char *)v3 + 40);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    int v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    uint64_t v14 = a3;
    do
    {
      uint64_t v15 = (uint64_t *)(v5 + 16 * v11);
      uint64_t v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            uint64_t v28 = *(void *)(v20 + 16 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (v28);
          char v29 = (uint64_t *)(v20 + 16 * v27);
          uint64_t v30 = (unsigned int *)v29[1];
          v29[1] = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30 + 2);
            char v36 = v14;
            (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
            uint64_t v14 = v36;
          }
          uint64_t *v29 = *v15;
          uint64_t v31 = v5 + 16 * v11;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          v29[1] = v32;
          char v33 = *(unsigned int **)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33 + 2);
            int v34 = v14;
            (*(void (**)(unsigned int *))(*(void *)v33 + 8))(v33);
            uint64_t v14 = v34;
          }
          if (v15 == v14) {
            uint64_t v12 = v29;
          }
        }
        else
        {
          uint64_t v17 = v5 + 16 * v11;
          uint64_t v18 = *(unsigned int **)(v17 + 8);
          *(void *)(v17 + 8) = 0;
          if (v18)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v18 + 2);
              BOOL v19 = v14;
              (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
              uint64_t v14 = v19;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v10);
  return v12;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebKit::PDFKitLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit13PDFKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = 0;
  if (qword_1EB359178 != -1) {
    dispatch_once(&qword_1EB359178, block);
  }
  return _MergedGlobals_60;
}

uint64_t ___ZN6WebKit13PDFKitLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/PDFKit.framework/PDFKit", 2);
  _MergedGlobals_60 = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initPDFAnnotationButtonWidget(WebKit *this)
{
  if (qword_1EB3591A0 != -1) {
    dispatch_once(&qword_1EB3591A0, &__block_literal_global_87);
  }
  return qword_1EB3591A8;
}

uint64_t WebKit::initPDFAnnotationChoiceWidget(WebKit *this)
{
  if (qword_1EB3591B0 != -1) {
    dispatch_once(&qword_1EB3591B0, &__block_literal_global_90);
  }
  return qword_1EB3591B8;
}

uint64_t WebKit::initPDFAnnotationLink(WebKit *this)
{
  if (qword_1EB3591C0 != -1) {
    dispatch_once(&qword_1EB3591C0, &__block_literal_global_93);
  }
  return qword_1EB3591C8;
}

uint64_t WebKit::initPDFAnnotationPopup(WebKit *this)
{
  if (qword_1EB3591D0 != -1) {
    dispatch_once(&qword_1EB3591D0, &__block_literal_global_96);
  }
  return qword_1EB3591D8;
}

uint64_t WebKit::initPDFAnnotationText(WebKit *this)
{
  if (qword_1EB3591E0 != -1) {
    dispatch_once(&qword_1EB3591E0, &__block_literal_global_99);
  }
  return qword_1EB3591E8;
}

uint64_t WebKit::initPDFAnnotationTextWidget(WebKit *this)
{
  if (qword_1EB3591F0 != -1) {
    dispatch_once(&qword_1EB3591F0, &__block_literal_global_102);
  }
  return qword_1EB3591F8;
}

uint64_t WebKit::initPDFDocument(WebKit *this)
{
  if (qword_1EB359200 != -1) {
    dispatch_once(&qword_1EB359200, &__block_literal_global_105_0);
  }
  return qword_1EB359208;
}

uint64_t WebKit::initPDFSelection(WebKit *this)
{
  if (qword_1EB359210 != -1) {
    dispatch_once(&qword_1EB359210, &__block_literal_global_111);
  }
  return qword_1EB359218;
}

double WebKit::get_PDFKit_kPDFDestinationUnspecifiedValue(WebKit *this)
{
  if (qword_1EB359188 != -1) {
    dispatch_once(&qword_1EB359188, &__block_literal_global_14);
  }
  return *(double *)&qword_1EB359180;
}

uint64_t ___ZN6WebKit42get_PDFKit_kPDFDestinationUnspecifiedValueEv_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "kPDFDestinationUnspecifiedValue");
  if (result)
  {
    qword_1EB359180 = *(void *)result;
  }
  else
  {
    uint64_t result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::RevealItem::item(WebKit::RevealItem *this)
{
  uint64_t result = *((void *)this + 3);
  if (!result)
  {
    id v3 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6258])());
    if (*(void *)this) {
      uint64_t v4 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    uint64_t result = objc_msgSend(v3, "initWithText:selectedRange:", v4, *((void *)this + 1), *((void *)this + 2));
    int v5 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = result;
    if (v5)
    {
      CFRelease(v5);
      return *((void *)this + 3);
    }
  }
  return result;
}

void *WebKit::SandboxExtensionHandle::SandboxExtensionHandle(void *this)
{
  *this = 0;
  return this;
}

const char ***WebKit::SandboxExtensionHandle::operator=(const char ***a1, const char ***a2)
{
  id v3 = *a2;
  *a2 = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a1, v3);
  return a1;
}

void WebKit::SandboxExtension::createHandle(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  WebKit::resolvePathForSandboxExtension((WTF::StringImpl **)&v8);
  uint64_t v4 = (WTF::StringImpl *)v8;
  if (v8)
  {
    int v5 = v8[1];
    unint64_t v6 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = 0x100000000;
  }
  WebKit::SandboxExtension::createHandleWithoutResolvingPath(v5, (WebKit::SandboxExtensionImpl *)v6, a1, a2);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v7);
    }
    else
    {
      *(_DWORD *)v4 -= 2;
    }
  }
}

void sub_198ABE628(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SandboxExtension::createReadOnlyHandlesForFiles@<X0>(uint64_t result@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if (!v4) {
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, *(unsigned int *)(a3 + 12));
  }
  if (!(v4 >> 29))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a3 + 8) = v4;
    *(void *)a3 = v6;
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = 8 * v7;
      do
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)&v21);
        if (v22)
        {
          uint64_t v10 = v21;
          int v21 = 0;
          BOOL v19 = v10;
          char v20 = 1;
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
          if (v20)
          {
            uint64_t v11 = v19;
            BOOL v19 = 0;
            int v21 = v11;
            uint64_t v12 = *(unsigned int *)(a3 + 12);
            if (v12 == *(_DWORD *)(a3 + 8))
            {
              uint64_t v16 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v12 + 1, (unint64_t)&v21);
              uint64_t v12 = *(unsigned int *)(a3 + 12);
              uint64_t v17 = *(void *)a3;
              uint64_t v18 = *v16;
              uint64_t *v16 = 0;
              *(void *)(v17 + 8 * v12) = v18;
            }
            else
            {
              uint64_t v13 = *(void *)a3;
              int v21 = 0;
              *(void *)(v13 + 8 * v12) = v11;
            }
            *(_DWORD *)(a3 + 12) = v12 + 1;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
            if (v20) {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
            }
          }
        }
        else
        {
          WTF::String::utf8();
          WTFLogAlways();
          uint64_t v15 = v23;
          unint64_t v23 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1) {
              WTF::fastFree(v15, v14);
            }
            else {
              --*(_DWORD *)v15;
            }
          }
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, *(unsigned int *)(a3 + 12));
  }
  __break(0xC471u);
  return result;
}

void sub_198ABE814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const char **a12, __int16 a13, char a14, char a15, int a16, const char **a17, uint64_t a18, WTF *a19)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a17);
  if ((_BYTE)a13) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a12);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19, v21);
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandleForGenericExtension(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v10 = 0;
  v8[0] = 0;
  v8[32] = 0;
  WebKit::SandboxExtensionImpl::create(a1, 4, (uint64_t)v8, 0, (uint64_t *)&v9);
  id v3 = v9;
  uint64_t v4 = v10;
  uint64_t v10 = v9;
  if (v4)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v4);
    WTF::fastFree(v6, v7);
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    WTFLogAlways();
    char v5 = 0;
    *a2 = 0;
    goto LABEL_6;
  }
  if (!v9) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v10 = 0;
  *(void *)a2 = v3;
  char v5 = 1;
LABEL_6:
  a2[8] = v5;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v10);
}

void sub_198ABE920(_Unwind_Exception *a1)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v1 - 40));
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandleForMachBootstrapExtension(const char ***a1@<X8>)
{
  WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.mach-bootstrap", &v4);
  if (v5)
  {
    id v3 = v4;
    uint64_t v4 = 0;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v4);
  }
  else
  {
    id v3 = 0;
  }
  *a1 = v3;
}

void WebKit::SandboxExtension::createHandleForMachLookup(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, unsigned char *a4@<X8>)
{
  uint64_t v14 = 0;
  long long v5 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v5;
  int v12 = *(_DWORD *)(a2 + 32);
  WebKit::SandboxExtensionImpl::create(a1, 2, (uint64_t)v11, a3, (uint64_t *)&v13);
  uint64_t v7 = v13;
  uint64_t v6 = v14;
  uint64_t v14 = v13;
  if (v6)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v6);
    WTF::fastFree(v9, v10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    WTFLogAlways();
    char v8 = 0;
    *a4 = 0;
    goto LABEL_6;
  }
  if (!v13) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v14 = 0;
  *(void *)a4 = v7;
  char v8 = 1;
LABEL_6:
  a4[8] = v8;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
}

void sub_198ABEA44(_Unwind_Exception *a1)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v1 - 40));
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandlesForMachLookup(uint64_t *a1@<X0>, unint64_t a2@<X1>, long long *a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v9 = 0;
  LOBYTE(v28) = *((unsigned char *)a3 + 32);
  long long v26 = *a3;
  long long v27 = a3[1];
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  if (a2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v16 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a6 + 8) = a2;
    *(void *)a6 = v16;
    uint64_t v17 = &a1[2 * a2];
    do
    {
      uint64_t v18 = *a1;
      v33[0] = v26;
      v33[1] = v27;
      int v34 = v28;
      WebKit::SandboxExtension::createHandleForMachLookup(v18, (uint64_t)v33, a5, &v31);
      if (v32)
      {
        uint64_t v19 = v31;
        uint64_t v31 = 0;
        char v29 = v19;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v31);
        char v30 = 1;
        char v20 = v29;
        char v29 = 0;
        *(void *)&v33[0] = v20;
        uint64_t v21 = *(unsigned int *)(a6 + 12);
        if (v21 == *(_DWORD *)(a6 + 8))
        {
          unint64_t v23 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, v21 + 1, (unint64_t)v33);
          uint64_t v21 = *(unsigned int *)(a6 + 12);
          uint64_t v24 = *(void *)a6;
          uint64_t v25 = *v23;
          uint64_t *v23 = 0;
          *(void *)(v24 + 8 * v2nw_tcp_options_set_no_delay(options, 1) = v25;
        }
        else
        {
          uint64_t v22 = *(void *)a6;
          *(void *)&v33[0] = 0;
          *(void *)(v22 + 8 * v2nw_tcp_options_set_no_delay(options, 1) = v20;
        }
        *(_DWORD *)(a6 + 12) = v21 + 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v33);
        if (v30) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
        }
      }
      a1 += 2;
    }
    while (a1 != v17);
    unint64_t v9 = *(unsigned int *)(a6 + 12);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a6, v9);
  if (a4 == 1)
  {
    WebKit::SandboxExtension::createHandleForMachBootstrapExtension((const char ***)v33);
    uint64_t v10 = *(unsigned int *)(a6 + 12);
    if (v10 == *(_DWORD *)(a6 + 8))
    {
      uint64_t v13 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, v10 + 1, (unint64_t)v33);
      uint64_t v10 = *(unsigned int *)(a6 + 12);
      uint64_t v11 = *(void *)a6;
      uint64_t v12 = *v13;
      uint64_t *v13 = 0;
    }
    else
    {
      uint64_t v11 = *(void *)a6;
      uint64_t v12 = *(void *)&v33[0];
      *(void *)&v33[0] = 0;
    }
    *(void *)(v11 + 8 * v10) = v12;
    *(_DWORD *)(a6 + 12) = v10 + 1;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v33);
  }
}

void sub_198ABEC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, const char **);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)va1);
  if ((_BYTE)v12) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)va);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v9);
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandleForReadByAuditToken(WebKit::SandboxExtensionImpl *a1@<X0>, WebKit::SandboxExtensionImpl *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v22[1] = a1;
  v22[2] = a2;
  v22[0] = 0;
  WTF::StringView::utf8();
  if (v21) {
    uint64_t v6 = (char *)v21 + 16;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v7 = a3[1];
  v19[0] = *a3;
  v19[1] = v7;
  char v20 = 1;
  WebKit::SandboxExtensionImpl::create((uint64_t)v6, 5, (uint64_t)v19, 0, (uint64_t *)buf);
  unint64_t v9 = (const char **)v22[0];
  v22[0] = *(WebKit::SandboxExtensionImpl **)buf;
  if (v9)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v9);
    WTF::fastFree(v14, v15);
  }
  uint64_t v10 = v21;
  uint64_t v21 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1) {
      WTF::fastFree(v10, v8);
    }
    else {
      --*(_DWORD *)v10;
    }
  }
  uint64_t v11 = v22[0];
  if (v22[0])
  {
    v22[0] = 0;
    *(void *)a4 = v11;
    char v12 = 1;
  }
  else
  {
    uint64_t v13 = qword_1EB358488;
    if (os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_ERROR))
    {
      WTF::StringView::utf8();
      if (v21) {
        uint64_t v16 = (char *)v21 + 16;
      }
      else {
        uint64_t v16 = 0;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&buf[4] = v16;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Could not create a sandbox extension for '%s'", buf, 0xCu);
      uint64_t v18 = v21;
      uint64_t v21 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1) {
          WTF::fastFree(v18, v17);
        }
        else {
          --*(_DWORD *)v18;
        }
      }
    }
    char v12 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 8) = v12;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v22);
}

void sub_198ABEE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, const char **a16)
{
}

BOOL WebKit::SandboxExtension::revoke(WebKit::SandboxExtension *this)
{
  uint64_t v1 = *((void *)this + 2) - 1;
  *((void *)this + 2) = v1;
  if (v1) {
    return 1;
  }
  *(void *)(*((void *)this + 1) + 8) = 0;
  return sandbox_extension_release() == 0;
}

BOOL WebKit::SandboxExtension::consume(WebKit::SandboxExtension *this)
{
  uint64_t v1 = *((void *)this + 2);
  *((void *)this + 2) = v1 + 1;
  return v1 || WebKit::SandboxExtensionImpl::consume(*((WebKit::SandboxExtensionImpl **)this + 1));
}

uint64_t ___ZN6WebKitL29initPDFAnnotationButtonWidgetEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFAnnotationButtonWidget");
  qword_1EB3591A8 = result;
  if (result)
  {
    WebKit::getPDFAnnotationButtonWidgetClass[0] = WebKit::PDFAnnotationButtonWidgetFunction;
  }
  else
  {
    uint64_t result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationButtonWidgetFunction(WebKit *this)
{
  return qword_1EB3591A8;
}

uint64_t ___ZN6WebKitL29initPDFAnnotationChoiceWidgetEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFAnnotationChoiceWidget");
  qword_1EB3591B8 = result;
  if (result)
  {
    WebKit::getPDFAnnotationChoiceWidgetClass[0] = WebKit::PDFAnnotationChoiceWidgetFunction;
  }
  else
  {
    uint64_t result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationChoiceWidgetFunction(WebKit *this)
{
  return qword_1EB3591B8;
}

uint64_t ___ZN6WebKitL21initPDFAnnotationLinkEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFAnnotationLink");
  qword_1EB3591C8 = result;
  if (result)
  {
    WebKit::getPDFAnnotationLinkClass[0] = WebKit::PDFAnnotationLinkFunction;
  }
  else
  {
    uint64_t result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationLinkFunction(WebKit *this)
{
  return qword_1EB3591C8;
}

uint64_t ___ZN6WebKitL22initPDFAnnotationPopupEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFAnnotationPopup");
  qword_1EB3591D8 = result;
  if (result)
  {
    WebKit::getPDFAnnotationPopupClass[0] = WebKit::PDFAnnotationPopupFunction;
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationPopupFunction(WebKit *this)
{
  return qword_1EB3591D8;
}

uint64_t ___ZN6WebKitL21initPDFAnnotationTextEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFAnnotationText");
  qword_1EB3591E8 = result;
  if (result)
  {
    WebKit::getPDFAnnotationTextClass[0] = WebKit::PDFAnnotationTextFunction;
  }
  else
  {
    uint64_t result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationTextFunction(WebKit *this)
{
  return qword_1EB3591E8;
}

uint64_t ___ZN6WebKitL27initPDFAnnotationTextWidgetEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFAnnotationTextWidget");
  qword_1EB3591F8 = result;
  if (result)
  {
    WebKit::getPDFAnnotationTextWidgetClass[0] = WebKit::PDFAnnotationTextWidgetFunction;
  }
  else
  {
    uint64_t result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationTextWidgetFunction(WebKit *this)
{
  return qword_1EB3591F8;
}

uint64_t ___ZN6WebKitL15initPDFDocumentEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFDocument");
  qword_1EB359208 = result;
  if (result)
  {
    WebKit::getPDFDocumentClass Class = WebKit::PDFDocumentFunction;
  }
  else
  {
    uint64_t result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFDocumentFunction(WebKit *this)
{
  return qword_1EB359208;
}

uint64_t ___ZN6WebKitL16initPDFSelectionEv_block_invoke(WebKit *a1)
{
  WebKit::PDFKitLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("PDFSelection");
  qword_1EB359218 = result;
  if (result)
  {
    WebKit::getPDFSelectionClass Class = WebKit::PDFSelectionFunction;
  }
  else
  {
    uint64_t result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFSelectionFunction(WebKit *this)
{
  return qword_1EB359218;
}

uint64_t WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *this)
{
  if (*(unsigned int *)(result + 8) >= (unint64_t)this) {
    return 1;
  }
  int v2 = (int)this;
  if (!((unint64_t)this >> 32))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    size_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc(this);
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > (unint64_t)a2) {
      a2 = (WTF *)v10;
    }
    WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > (unint64_t)a2) {
      a2 = (WTF *)v8;
    }
    WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF *WTF::VectorDestructor<true,WTF::CString>::destruct(WTF *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF **)result;
    do
    {
      uint64_t result = *v3;
      *unint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          uint64_t result = (WTF *)WTF::fastFree(result, a2);
        }
        else {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WebCore::ImageBufferAllocator *WebKit::ImageBufferShareableAllocator::ImageBufferShareableAllocator(WebCore::ImageBufferAllocator *a1, const WTF::MachSendRight *a2)
{
  uint64_t v4 = (void *)WebCore::ImageBufferAllocator::ImageBufferAllocator(a1);
  *uint64_t v4 = &unk_1EE9BF118;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v4 + 1), a2);
  return a1;
}

uint64_t WebKit::ImageBufferShareableAllocator::createImageBuffer@<X0>(uint64_t *a1@<X1>, CFTypeRef *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(a1, a2, 1, 0, (uint64_t)&v9, &v13, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v10 + 4));
  uint64_t result = v13;
  if (v13)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 128))(v13);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 40))(&v12, v5);
      uint64_t result = v12;
      if (v12)
      {
        WebCore::ShareableBitmap::createHandle();
        if (v11)
        {
          WebCore::SharedMemoryHandle::setOwnershipOfMemory();
          uint64_t v7 = v13;
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v7 = 0;
        }
        *a3 = v7;
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v9);
        uint64_t result = v12;
        uint64_t v12 = 0;
        if (result) {
          uint64_t result = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v6);
        }
      }
      else
      {
        *a3 = 0;
      }
      uint64_t v8 = v13;
      uint64_t v13 = 0;
      if (v8) {
        return (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v8 + 8), v6);
      }
    }
    else
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(uint64_t *a1@<X0>, CFTypeRef *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t v27 = *a1;
  float v28 = a7;
  CFTypeRef v29 = *a2;
  if (v29) {
    CFRetain(v29);
  }
  LOBYTE(v30) = a3;
  HIBYTE(v30) = a4;
  WebCore::ImageBuffer::backendParameters();
  WebKit::ImageBufferShareableBitmapBackend::create((uint64_t)v25, a5, v11, (uint64_t *)&v24);
  if (v24)
  {
    WebCore::ImageBuffer::populateBackendInfo<WebKit::ImageBufferShareableBitmapBackend>(v25, (uint64_t)v23);
    uint64_t v19 = v27;
    float v20 = v28;
    CFTypeRef cf = v29;
    if (v29) {
      CFRetain(v29);
    }
    __int16 v22 = v30;
    uint64_t v12 = v24;
    uint64_t v24 = 0;
    uint64_t v18 = v12;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t)&v19, a6);
    if (v18) {
      (*(void (**)(WebKit::ImageBufferShareableBitmapBackend *))(*(void *)v18 + 8))(v18);
    }
    CFTypeRef v13 = cf;
    CFTypeRef cf = 0;
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = v24;
    uint64_t v24 = 0;
    if (v14)
    {
      WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(v14);
      WebKit::ImageBufferShareableBitmapBackend::operator delete(v17);
    }
  }
  else
  {
    *a6 = 0;
  }
  uint64_t v15 = v26;
  long long v26 = 0;
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v16 = v29;
  CFTypeRef v29 = 0;
  if (v16) {
    CFRelease(v16);
  }
}

_DWORD *WebKit::ImageBufferShareableAllocator::createPixelBuffer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = WebKit::ShareablePixelBuffer::tryCreate(a1, a2, (uint64_t *)&v8);
  if (!v8)
  {
    *a3 = 0;
    return result;
  }
  WebCore::SharedMemory::createHandle();
  if (v7)
  {
    uint64_t result = (_DWORD *)WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    uint64_t v5 = (uint64_t)v8;
    uint64_t v8 = 0;
    *a3 = v5;
    if (!v7) {
      return result;
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v6);
  }
  else
  {
    *a3 = 0;
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackend::imageBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 120), &v10);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = (unsigned int *)(result + 8);
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
    uint64_t v7 = *(void *)(result + 24);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 8));
    uint64_t v9 = 0;
    *a3 = v7;
    uint64_t result = (uint64_t)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v9, v8);
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

atomic_uchar *WebKit::RemoteDisplayListRecorder::sourceImage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  WebKit::RemoteResourceCache::cachedNativeImage((uint64_t *)(*(void *)(a1 + 40) + 64), a2, &v14);
  uint64_t v6 = v14;
  if (v14)
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v11, v14);
    int v12 = 0;
    WebCore::SourceImage::SourceImage();
    std::optional<WebCore::SourceImage>::optional[abi:sn180100]<WebCore::SourceImage,0>((uint64_t)a3, (uint64_t)v13);
    WebCore::SourceImage::~SourceImage((WebCore::SourceImage *)v13);
    if (v12 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9BF2A0[v12])(&v15, &v11);
    }
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(*(atomic_uchar **)(v6 + 8), v10);
  }
  else
  {
    uint64_t result = (atomic_uchar *)WebKit::RemoteRenderingBackend::imageBuffer(*(void *)(a1 + 40), a2, &v14);
    uint64_t v8 = v14;
    if (v14)
    {
      WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v11, v14);
      int v12 = 1;
      WebCore::SourceImage::SourceImage();
      std::optional<WebCore::SourceImage>::optional[abi:sn180100]<WebCore::SourceImage,0>((uint64_t)a3, (uint64_t)v13);
      WebCore::SourceImage::~SourceImage((WebCore::SourceImage *)v13);
      if (v12 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9BF2A0[v12])(&v15, &v11);
      }
      return (atomic_uchar *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v8 + 8), v9);
    }
    else
    {
      *a3 = 0;
      a3[40] = 0;
    }
  }
  return result;
}

uint64_t *WebKit::RemoteResourceCache::cachedNativeImage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  if (!*result) {
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(v4 - 8);
  unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = (uint64_t *)(v4 + 24 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    int v16 = 1;
    while (v11)
    {
      unsigned int v9 = (v9 + v16) & v5;
      uint64_t v10 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v11 = *v10;
      ++v16;
      if (*v10 == a2) {
        goto LABEL_3;
      }
    }
    uint64_t v10 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  }
LABEL_3:
  if (v10 == (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4)) || *((_DWORD *)v10 + 4) != 2) {
    goto LABEL_11;
  }
  int v12 = (void *)v10[1];
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*v12 + 16))(v10[1]);
  if (!result)
  {
LABEL_11:
    int v12 = 0;
    goto LABEL_12;
  }
  char v13 = 0;
  uint64_t v14 = v12[1];
  int v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13) {
    uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v14);
  }
  ++*(void *)(v14 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
  }
LABEL_12:
  *a3 = v12;
  return result;
}

void WebCore::SourceImage::~SourceImage(WebCore::SourceImage *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v3 = *((unsigned int *)this + 6);
    if (v3 != -1) {
      ((void (*)(char *, char *))off_1EE9BF2A0[v3])(&v4, (char *)this + 16);
    }
    *((_DWORD *)this + 6) = -1;
  }
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 != -1) {
    ((void (*)(char *, WebCore::SourceImage *))off_1EE9BF2A0[v2])(&v5, this);
  }
  *((_DWORD *)this + 2) = -1;
}

uint64_t WebKit::RemoteDisplayListRecorder::setLineDash(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));

  return MEMORY[0x1F4173FD8](a2, v3);
}

uint64_t WebKit::RemoteDisplayListRecorder::clearDropShadow(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::ClearDropShadow::apply((WebCore::DisplayList::ClearDropShadow *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::clipToImageBuffer(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t result = WebKit::RemoteRenderingBackend::imageBuffer(*(void *)(a1 + 40), a2, &v20);
  unint64_t v7 = v20;
  if (v20)
  {
    uint64_t v18 = a2;
    long long v19 = *a3;
    unint64_t v8 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    uint64_t result = WebCore::DisplayList::ClipToImageBuffer::apply((WebCore::DisplayList::ClipToImageBuffer *)&v18, v8, v7);
    char v10 = 0;
    float v20 = 0;
    uint64_t v11 = *((void *)v7 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10) {
      uint64_t result = MEMORY[0x19972E8D0](v11);
    }
    uint64_t v12 = *(void *)(v11 + 8);
    int v13 = 1;
    uint64_t v14 = v12 - 1;
    *(void *)(v11 + 8) = v12 - 1;
    if (v12 == 1)
    {
      uint64_t v17 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      *(void *)(v11 + 24) = 0;
      BOOL v16 = v17 != 0;
    }
    else
    {
      uint64_t v15 = 0;
      BOOL v16 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (v14) {
        return result;
      }
    }
    else
    {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14) {
        return result;
      }
    }
    if (v15) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    if (!v16) {
      return WTF::fastFree((WTF *)v11, v9);
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::clipOutToPath(WebKit::RemoteDisplayListRecorder *this, const WebCore::Path *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  WebCore::Path::Path((WebCore::Path *)v6, a2);
  char v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t result = WebCore::DisplayList::ClipOutToPath::apply((WebCore::DisplayList::ClipOutToPath *)v6, v3);
  if (v8 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v8])(&v5, &v7);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::clipPath(uint64_t a1, const WebCore::Path *a2, char a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  WebCore::Path::Path((WebCore::Path *)v8, a2);
  char v11 = a3;
  char v5 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  uint64_t result = WebCore::DisplayList::ClipPath::apply((WebCore::DisplayList::ClipPath *)v8, v5);
  if (v10 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v10])(&v7, &v9);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::resetClip(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::ResetClip::apply((WebCore::DisplayList::ResetClip *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawFilteredImageBufferInternal(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t result = WebKit::RemoteRenderingBackend::imageBuffer(*(void *)(a1 + 40), a2, v26);
    uint64_t v8 = v26[0];
    if (!v26[0]) {
      return result;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)a5 + 96))(&v30, a5, 12);
  if (v31)
  {
    long long v19 = v30;
    uint64_t v20 = 8 * v31;
    while (1)
    {
      uint64_t v25 = v20;
      uint64_t v21 = *v19;
      if (*(unsigned char *)(*v19 + 48) != 12) {
        break;
      }
      uint64_t v22 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(v21 + 64));
      WebKit::RemoteDisplayListRecorder::sourceImage(a1, v22, v26);
      if (!v29)
      {
        std::optional<WebCore::SourceImage>::~optional((uint64_t)v26);
        uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v24);
        goto LABEL_5;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>>(v21 + 64, (uint64_t)v26);
      std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>>(v21 + 80, (uint64_t)&v27);
      std::optional<WebCore::SourceImage>::~optional((uint64_t)v26);
      ++v19;
      uint64_t v20 = v25 - 8;
      if (v25 == 8) {
        goto LABEL_4;
      }
    }
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
LABEL_4:
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v9);
    WebCore::DisplayList::DrawFilteredImageBuffer::DrawFilteredImageBuffer();
    (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    WebCore::DisplayList::DrawFilteredImageBuffer::apply();
    uint64_t result = (uint64_t)WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v28, v10);
LABEL_5:
    if (v8)
    {
      char v12 = 0;
      uint64_t v13 = *(void *)(v8 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t result = MEMORY[0x19972E8D0](v13);
      }
      uint64_t v14 = *(void *)(v13 + 8);
      int v15 = 1;
      uint64_t v16 = v14 - 1;
      *(void *)(v13 + 8) = v14 - 1;
      if (v14 == 1)
      {
        uint64_t v23 = *(void *)(v13 + 16);
        uint64_t v17 = *(void *)(v13 + 24);
        *(void *)(v13 + 24) = 0;
        BOOL v18 = v23 != 0;
      }
      else
      {
        uint64_t v17 = 0;
        BOOL v18 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
      if (v15 != 1) {
        uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
      }
      if (!v16)
      {
        if (v17) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        if (!v18) {
          return WTF::fastFree((WTF *)v13, v11);
        }
      }
    }
  }
  return result;
}

uint64_t std::optional<WebCore::SourceImage>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 24);
      if (v4 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9BF2A0[v4])(&v5, a1 + 16);
      }
      *(_DWORD *)(a1 + 24) = -1;
    }
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BF2A0[v2])(&v6, a1);
    }
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

void WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(*a5 + 8));
  uint64_t v39 = v10;
  int v12 = *(unsigned __int8 *)(v10 + 48);
  if (v12 == 1)
  {
    uint64_t v39 = 0;
    v38[0] = 0;
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v38, v11);
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v39, v13);
    if (*(unsigned char *)(v10 + 40))
    {
      if (!*(unsigned char *)(*a5 + 40))
      {
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v14 = WebCore::DisplayList::ResourceHeap::get<WebCore::RenderingResource>(*(void *)(*(void *)(a1 + 40) + 64), *(void *)(*a5 + 32));
      if (v14)
      {
        uint64_t v16 = v14;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 40))(v14))
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v16 + 8));
          if (*(unsigned char *)(v16 + 48) == 1)
          {
            WebCore::SVGFilter::mergeEffects();
            uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
            void *v17 = &unk_1EE9BF380;
            v17[1] = a1;
            v38[0] = (uint64_t)v17;
            WebCore::SVGFilter::ensureResults();
            uint64_t v18 = v38[0];
            v38[0] = 0;
            if (v18) {
              (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            }
            WebKit::RemoteDisplayListRecorder::drawFilteredImageBufferInternal(a1, a2, a3, a4, v16);
          }
          char v19 = 0;
          uint64_t v20 = *(void *)(v16 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v36 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v36 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
          }
          if (!v23)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            if (!v25) {
              WTF::fastFree((WTF *)v20, v15);
            }
          }
        }
      }
LABEL_17:
      char v26 = 0;
      a4 = *(void *)(v10 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a4, (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (!v26)
      {
LABEL_18:
        uint64_t v27 = *(void *)(a4 + 8);
        int v28 = 1;
        uint64_t v29 = v27 - 1;
        *(void *)(a4 + 8) = v27 - 1;
        if (v27 == 1)
        {
          uint64_t v35 = *(void *)(a4 + 16);
          uint64_t v30 = *(void *)(a4 + 24);
          *(void *)(a4 + 24) = 0;
          BOOL v31 = v35 != 0;
        }
        else
        {
          uint64_t v30 = 0;
          BOOL v31 = 1;
        }
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a4, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
        if (v28 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)a4);
        }
        if (!v29)
        {
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (!v31) {
            WTF::fastFree((WTF *)a4, v15);
          }
        }
        return;
      }
LABEL_38:
      MEMORY[0x19972E8D0](a4);
      goto LABEL_18;
    }
  }
  else
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v39, v11);
    uint64_t v10 = 0;
  }
  char v32 = (const WTF::MachSendRight *)(*(void *)(a1 + 48) + 48);
  char v33 = (WebCore::ImageBufferAllocator *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v37 = WebKit::ImageBufferShareableAllocator::ImageBufferShareableAllocator(v33, v32);
  WebCore::FilterResults::FilterResults();
  if (v37) {
    (*(void (**)(WebCore::ImageBufferAllocator *))(*(void *)v37 + 8))(v37);
  }
  WebKit::RemoteDisplayListRecorder::drawFilteredImageBufferInternal(a1, a2, a3, a4, *a5);
  WebCore::FilterResults::~FilterResults((WebCore::FilterResults *)v38, v34);
  if (v12 == 1) {
    goto LABEL_17;
  }
}

void WebCore::FilterResults::~FilterResults(WebCore::FilterResults *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = v4 + 16 * i;
        uint64_t v8 = *(WTF **)v7;
        if (*(void *)v7 != -1)
        {
          uint64_t v9 = *(void *)(v7 + 8);
          if (v9)
          {
            uint64_t v10 = *(unsigned int *)(v9 - 4);
            if (v10)
            {
              char v11 = *(uint64_t **)(v7 + 8);
              do
              {
                if (*v11 != -1) {
                  char v11 = WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v11, a2);
                }
                ++v11;
                --v10;
              }
              while (v10);
            }
            WTF::fastFree((WTF *)(v9 - 16), a2);
            uint64_t v8 = *(WTF **)v7;
          }
          *(void *)uint64_t v7 = 0;
          if (v8) {
            WTF::RefCounted<WebCore::FilterImage>::deref(v8, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v12 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    if (v13)
    {
      uint64_t v14 = *(uint64_t **)this;
      do
      {
        if (*v14 != -1)
        {
          int v15 = (WTF *)v14[1];
          v14[1] = 0;
          if (v15) {
            WTF::RefCounted<WebCore::FilterImage>::deref(v15, a2);
          }
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v14, a2);
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
}

const WebCore::Font *WebKit::RemoteDisplayListRecorder::drawGlyphs(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (const WebCore::Font *)WebCore::DisplayList::ResourceHeap::get<WebCore::Font>(*(void *)(*(void *)(a1 + 40) + 64), *a2);
  if (result)
  {
    uint64_t v5 = result;
    ++*(_DWORD *)result;
    char v6 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    WebCore::DisplayList::DrawGlyphs::apply((WebCore::DisplayList::DrawGlyphs *)a2, v6, v5);
    return (const WebCore::Font *)WTF::RefCounted<WebCore::Font>::deref(v5);
  }
  return result;
}

_DWORD *WebKit::RemoteDisplayListRecorder::drawDecomposedGlyphs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t result = (_DWORD *)WebCore::DisplayList::ResourceHeap::get<WebCore::Font>(*(void *)(v5 + 64), a2);
  if (result)
  {
    uint64_t v7 = result;
    ++*result;
    uint64_t v8 = WebCore::DisplayList::ResourceHeap::get<WebCore::RenderingResource>(*(void *)(v5 + 64), a3);
    if (v8)
    {
      uint64_t v9 = v8;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8))
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v9 + 8));
        (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
        WebCore::DisplayList::DrawDecomposedGlyphs::apply();
        char v11 = 0;
        uint64_t v12 = *(void *)(v9 + 8);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
        if (v11) {
          MEMORY[0x19972E8D0](v12);
        }
        uint64_t v13 = *(void *)(v12 + 8);
        int v14 = 1;
        uint64_t v15 = v13 - 1;
        *(void *)(v12 + 8) = v13 - 1;
        if (v13 == 1)
        {
          uint64_t v18 = *(void *)(v12 + 16);
          uint64_t v16 = *(void *)(v12 + 24);
          *(void *)(v12 + 24) = 0;
          BOOL v17 = v18 != 0;
        }
        else
        {
          uint64_t v16 = 0;
          BOOL v17 = 1;
        }
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
        if (v14 == 1)
        {
          if (!v15)
          {
LABEL_10:
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
            if (!v17) {
              WTF::fastFree((WTF *)v12, v10);
            }
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
          if (!v15) {
            goto LABEL_10;
          }
        }
      }
    }
    return WTF::RefCounted<WebCore::Font>::deref(v7);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawDisplayListItems(uint64_t a1)
{
  uint64_t v2 = (WebCore::ControlFactory *)WebCore::DisplayList::DrawDisplayListItems::DrawDisplayListItems();
  if (!*(void *)(a1 + 56))
  {
    WebCore::ControlFactory::create((uint64_t *)&v9, v2);
    uint64_t v5 = (uint64_t)v9;
    uint64_t v9 = 0;
    char v6 = *(_DWORD **)(a1 + 56);
    *(void *)(a1 + 56) = v5;
    if (v6)
    {
      int v7 = v6[2] - 1;
      if (v6[2] != 1) {
        goto LABEL_5;
      }
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      char v6 = v9;
      uint64_t v9 = 0;
      if (!v6) {
        goto LABEL_2;
      }
      int v7 = v6[2] - 1;
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
LABEL_5:
      }
        void v6[2] = v7;
    }
  }
LABEL_2:
  (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  WebCore::DisplayList::DrawDisplayListItems::apply();
  return WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawImageBuffer(uint64_t a1, uint64_t a2, long long *a3, long long *a4, int a5)
{
  uint64_t result = WebKit::RemoteRenderingBackend::imageBuffer(*(void *)(a1 + 40), a2, &v28);
  char v11 = v28;
  if (v28)
  {
    uint64_t v23 = a2;
    long long v12 = *a4;
    long long v24 = *a3;
    long long v25 = v12;
    __int16 v26 = a5;
    char v27 = BYTE2(a5);
    uint64_t v13 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    uint64_t result = WebCore::DisplayList::DrawImageBuffer::apply((WebCore::DisplayList::DrawImageBuffer *)&v23, v13, v11);
    char v15 = 0;
    int v28 = 0;
    uint64_t v16 = *((void *)v11 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
    if (v15) {
      uint64_t result = MEMORY[0x19972E8D0](v16);
    }
    uint64_t v17 = *(void *)(v16 + 8);
    int v18 = 1;
    uint64_t v19 = v17 - 1;
    *(void *)(v16 + 8) = v17 - 1;
    if (v17 == 1)
    {
      uint64_t v22 = *(void *)(v16 + 16);
      uint64_t v20 = *(void *)(v16 + 24);
      *(void *)(v16 + 24) = 0;
      BOOL v21 = v22 != 0;
    }
    else
    {
      uint64_t v20 = 0;
      BOOL v21 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
    if (v18 != 1) {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
    }
    if (!v19)
    {
      if (v20) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      if (!v21) {
        return WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawNativeImage(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t)WebKit::RemoteResourceCache::cachedNativeImage((uint64_t *)(*(void *)(a1 + 40) + 64), a2, &v14);
  uint64_t v4 = v14;
  if (v14)
  {
    (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    uint64_t result = WebCore::DisplayList::DrawNativeImage::apply();
    char v6 = 0;
    uint64_t v14 = 0;
    uint64_t v7 = *(void *)(v4 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      uint64_t result = MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    int v9 = 1;
    uint64_t v10 = v8 - 1;
    *(void *)(v7 + 8) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v13 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      BOOL v12 = v13 != 0;
    }
    else
    {
      uint64_t v11 = 0;
      BOOL v12 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
    if (!v10)
    {
      if (v11) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      if (!v12) {
        return WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  return result;
}

uint64_t *WebKit::RemoteDisplayListRecorder::drawSystemImage(uint64_t a1, WebCore::ARKitBadgeSystemImage **a2, long long *a3)
{
  uint64_t v5 = *a2;
  if (*a2) {
    BOOL v6 = *((unsigned char *)*a2 + 12) == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(*(void *)(a1 + 40) + 64);
    uint64_t v9 = WebCore::ARKitBadgeSystemImage::imageIdentifier(*a2);
    uint64_t result = WebKit::RemoteResourceCache::cachedNativeImage(v8, v9, &v15);
    if (!v15) {
      return result;
    }
    uint64_t v17 = v15;
    WebCore::BitmapImage::create();
    BOOL v12 = v18;
    ++v18[2];
    uint64_t v13 = (_DWORD *)*((void *)v5 + 2);
    *((void *)v5 + 2) = v12;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
        BOOL v12 = v18;
        int v18 = 0;
        if (!v12)
        {
LABEL_15:
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v17, v11);
          uint64_t v5 = *a2;
          goto LABEL_16;
        }
LABEL_12:
        if (v12[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
        }
        else {
          --v12[2];
        }
        goto LABEL_15;
      }
      --v13[2];
    }
    int v18 = 0;
    goto LABEL_12;
  }
LABEL_16:
  ++*((_DWORD *)v5 + 2);
  uint64_t v15 = (uint64_t)v5;
  long long v16 = *a3;
  uint64_t v14 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  WebCore::DisplayList::DrawSystemImage::apply((WebCore::DisplayList::DrawSystemImage *)&v15, v14);
  uint64_t result = (uint64_t *)v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawPattern(uint64_t a1, uint64_t a2)
{
  WebKit::RemoteDisplayListRecorder::sourceImage(a1, a2, v6);
  if (!v7) {
    return std::optional<WebCore::SourceImage>::~optional((uint64_t)v6);
  }
  uint64_t result = WebCore::DisplayList::DrawPattern::DrawPattern();
  if (v7)
  {
    uint64_t v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    WebCore::DisplayList::DrawPattern::apply((WebCore::DisplayList::DrawPattern *)&v5, v4, (WebCore::SourceImage *)v6);
    return std::optional<WebCore::SourceImage>::~optional((uint64_t)v6);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::beginTransparencyLayerWithCompositeMode(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  return WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode::apply((WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawLine(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::DrawLine::apply((WebCore::DisplayList::DrawLine *)&v5, v3);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawLinesForText(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));

  return MEMORY[0x1F4174080](a2, v3);
}

unsigned int *WebKit::RemoteDisplayListRecorder::drawDotsForDocumentMarker(uint64_t a1, long long *a2, Color *a3)
{
  long long v7 = *a2;
  char m_colorAndFlags = a3->m_colorAndFlags;
  WebCore::Color::Color((WebCore::Color *)&v9, a3 + 1);
  __int16 v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  uint64_t result = (unsigned int *)WebCore::DisplayList::DrawDotsForDocumentMarker::apply((WebCore::DisplayList::DrawDotsForDocumentMarker *)&v7, v4);
  if ((v9 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawEllipse(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  long long v4 = *(_OWORD *)a2;
  uint64_t v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::DrawEllipse::apply((WebCore::DisplayList::DrawEllipse *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawPath(WebKit::RemoteDisplayListRecorder *this, const WebCore::Path *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  WebCore::Path::Path((WebCore::Path *)v6, a2);
  uint64_t v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t result = WebCore::DisplayList::DrawPath::apply((WebCore::DisplayList::DrawPath *)v6, v3);
  if (v8 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v8])(&v5, &v7);
  }
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::drawFocusRingPath(WebKit::RemoteDisplayListRecorder *this, const WebCore::Path *a2, float a3, const Color *a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  WebCore::Path::Path((WebCore::Path *)v11, a2);
  float v14 = a3;
  WebCore::Color::Color((WebCore::Color *)v15, a4);
  uint64_t v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t result = (unsigned int *)WebCore::DisplayList::DrawFocusRingPath::apply((WebCore::DisplayList::DrawFocusRingPath *)v11, v7);
  if ((v15[0] & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v15[0] & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v15[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  if (v13 != -1) {
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v13])(&v10, &v12);
  }
  return result;
}

WTF *WebKit::RemoteDisplayListRecorder::drawFocusRingRects(uint64_t a1, uint64_t a2, const Color *a3, float a4, float a5)
{
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v13, a2);
  float v15 = a4;
  float v16 = a5;
  WebCore::Color::Color((WebCore::Color *)&v17, a3);
  uint64_t v9 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  WebCore::DisplayList::DrawFocusRingRects::apply((WebCore::DisplayList::DrawFocusRingRects *)&v13, v9);
  if ((v17 & 0x8000000000000) != 0)
  {
    uint64_t v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  uint64_t result = v13;
  if (v13)
  {
    int v13 = 0;
    int v14 = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::fillRectWithGradient(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));

  return MEMORY[0x1F41740F0](a2, v3);
}

uint64_t WebKit::RemoteDisplayListRecorder::fillRectWithGradientAndSpaceTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));

  return MEMORY[0x1F4174120](a2, v3);
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillRoundedRect(uint64_t a1, _OWORD *a2, Color *a3, char a4)
{
  long long v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  v10[2] = a2[2];
  WebCore::Color::Color((WebCore::Color *)&v11, a3);
  char v12 = a4;
  uint64_t v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  uint64_t result = (unsigned int *)WebCore::DisplayList::FillRoundedRect::apply((WebCore::DisplayList::FillRoundedRect *)v10, v7);
  if ((v11 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillRectWithRoundedHole(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect *a3, Color *a4)
{
  long long v5 = *(_OWORD *)a3;
  long long v6 = *((_OWORD *)a3 + 1);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v5;
  long long v7 = *((_OWORD *)a3 + 2);
  _OWORD v11[2] = v6;
  void v11[3] = v7;
  WebCore::Color::Color((WebCore::Color *)&v12, a4);
  int v8 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t result = (unsigned int *)WebCore::DisplayList::FillRectWithRoundedHole::apply((WebCore::DisplayList::FillRectWithRoundedHole *)v11, v8);
  if ((v12 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::fillArc(WebKit::RemoteDisplayListRecorder *this, const PathArc *a2)
{
  PathArc v4 = *a2;
  uint64_t v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::FillArc::apply((WebCore::DisplayList::FillArc *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::fillQuadCurve(WebKit::RemoteDisplayListRecorder *this, const PathDataQuadCurve *a2)
{
  PathDataQuadCurve v4 = *a2;
  uint64_t v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::FillQuadCurve::apply((WebCore::DisplayList::FillQuadCurve *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::fillBezierCurve(WebKit::RemoteDisplayListRecorder *this, const PathDataBezierCurve *a2)
{
  long long v2 = *(_OWORD *)&a2->controlPoint2.m_x;
  v5[0] = *(_OWORD *)&a2->start.m_x;
  v5[1] = v2;
  uint64_t v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::FillBezierCurve::apply((WebCore::DisplayList::FillBezierCurve *)v5, v3);
}

uint64_t WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t v3 = (WebKit::SharedVideoFrameReader **)((char *)this + 64);
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 5) + 48) + 200);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 16));
    long long v5 = (const WTF::MachSendRight *)(*(void *)(*((void *)this + 5) + 48) + 96);
    uint64_t v6 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v6 = v4;
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v6 + 8), v5);
    *(unsigned char *)(v6 + 12) = 1;
    *(unsigned char *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 24) = 0;
    *(void *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_DWORD *)(v6 + 64) = 0;
    std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100](v3, (WebKit::SharedVideoFrameReader *)v6);
    return *((void *)this + 8);
  }
  return result;
}

void WebKit::RemoteDisplayListRecorder::drawVideoFrame(WebKit::RemoteDisplayListRecorder *a1, uint64_t a2)
{
  uint64_t v4 = WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(a1);
  WebKit::SharedVideoFrameReader::read(v4, a2, &v8);
  long long v5 = v8;
  if (v8)
  {
    uint64_t v6 = *(void *)(*(uint64_t (**)(void *))(**((void **)a1 + 3) + 16))(*((void **)a1 + 3));
    (*(void (**)(void))(v6 + 432))();
    int v8 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      long long v7 = *(void (**)(unsigned int *))(*(void *)v5 + 8);
      v7(v5);
    }
  }
}

IPC::Semaphore *WebKit::RemoteDisplayListRecorder::setSharedVideoFrameSemaphore(WebKit::RemoteDisplayListRecorder *a1, IPC::Semaphore *a2)
{
  uint64_t v3 = (IPC::Semaphore *)(WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(a1) + 16);

  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>(v3, a2);
}

BOOL WebKit::RemoteDisplayListRecorder::setSharedVideoFrameMemory(WebKit::RemoteDisplayListRecorder *a1)
{
  uint64_t v1 = WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(a1);

  return WebKit::SharedVideoFrameReader::setSharedMemory(v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::strokeLineWithColorAndThickness(uint64_t a1, long long *a2, WebCore::DisplayList::SetInlineStroke *a3)
{
  uint64_t v6 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  WebCore::DisplayList::SetInlineStroke::apply(a3, v6);
  long long v9 = *a2;
  long long v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  return WebCore::DisplayList::StrokeLine::apply((WebCore::DisplayList::StrokeLine *)&v9, v7);
}

_DWORD *WebKit::RemoteDisplayListRecorder::drawControlPart(uint64_t a1)
{
  long long v2 = (WebCore::ControlFactory *)WebCore::DisplayList::DrawControlPart::DrawControlPart();
  uint64_t v3 = *(WebCore::ControlFactory **)(a1 + 56);
  if (!v3)
  {
    WebCore::ControlFactory::create((uint64_t *)&v15, v2);
    uint64_t v7 = (uint64_t)v15;
    float v15 = 0;
    int v8 = *(_DWORD **)(a1 + 56);
    *(void *)(a1 + 56) = v7;
    if (v8)
    {
      int v9 = v8[2] - 1;
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
        int v8 = v15;
        float v15 = 0;
        if (!v8) {
          goto LABEL_12;
        }
        int v9 = v8[2] - 1;
        if (v8[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          goto LABEL_12;
        }
      }
      _OWORD v8[2] = v9;
    }
LABEL_12:
    uint64_t v3 = *(WebCore::ControlFactory **)(a1 + 56);
  }
  uint64_t v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  WebCore::DisplayList::DrawControlPart::apply((WebCore::DisplayList::DrawControlPart *)&v12, v4, v3);
  if ((v14 & 0x8000000000000) != 0)
  {
    char v10 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v5);
    }
  }
  if ((v13 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v5);
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::applyStrokePattern(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::ApplyStrokePattern::apply((WebCore::DisplayList::ApplyStrokePattern *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::applyFillPattern(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::ApplyFillPattern::apply((WebCore::DisplayList::ApplyFillPattern *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::applyDeviceScaleFactor(WebKit::RemoteDisplayListRecorder *this, float a2)
{
  float v4 = a2;
  long long v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  return WebCore::DisplayList::ApplyDeviceScaleFactor::apply((WebCore::DisplayList::ApplyDeviceScaleFactor *)&v4, v2);
}

void *WebKit::remoteGraphicsContextGLStreamWorkQueue(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&_MergedGlobals_61, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    char v3 = &v4;
    std::__call_once(&_MergedGlobals_61, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::$_0 &&>>);
  }
  return &unk_1EB359228;
}

uint64_t WebKit::RemoteGraphicsContextGL::RemoteGraphicsContextGL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = WebCore::GraphicsContextGL::Client::Client((WebCore::GraphicsContextGL::Client *)a1);
  *(_DWORD *)(v10 + 16) = 1;
  *(void *)uint64_t v10 = &unk_1EE9BF170;
  *(void *)(v10 + 8) = &unk_1EE9BF1B8;
  uint64_t v11 = *(atomic_uchar **)(a2 + 16);
  if (v11) {
    uint64_t v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  }
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = a2;
  WebKit::remoteGraphicsContextGLStreamWorkQueue((WebKit *)v11);
  atomic_fetch_add(dword_1EB359230, 1u);
  *(void *)(a1 + 40) = &unk_1EB359228;
  uint64_t v12 = *a5;
  *a5 = 0;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a3;
  atomic_fetch_add((atomic_uint *volatile)(a4 + 16), 1u);
  *(void *)(a1 + 72) = a4;
  WebKit::GPUConnectionToWebProcess::sharedResourceCache((WebKit::GPUConnectionToWebProcess *)a2, (WebKit::RemoteSharedResourceCache **)(a1 + 80));
  uint64_t v13 = *(void *)(a2 + 200);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 16));
  *(void *)(a1 + 88) = v13;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 16));
  *(void *)(a1 + 96) = v13;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 104), (const WTF::MachSendRight *)(a2 + 96));
  *(unsigned char *)(a1 + 108) = 1;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 176) = 257;
  atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 1u);
  atomic_fetch_add(&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests, 1u);
  *(void *)(a1 + 184) = *(void *)(a2 + 88);
  long long v14 = *(_OWORD *)(a2 + 384);
  uint64_t v15 = *(void *)(a2 + 400);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 208) = v14;
  *(void *)(a1 + 224) = v15;
  *(void *)(a1 + 232) = 0;
  return a1;
}

void WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL(WebKit::RemoteGraphicsContextGL *this, void *a2)
{
  char v2 = this;
  *(void *)this = &unk_1EE9BF170;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = &unk_1EE9BF1B8;
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    this = (WebKit::RemoteGraphicsContextGL *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*((unsigned char *)v2 + 176))
  {
    atomic_fetch_add(&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
    if (!atomic_load((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests)) {
      WebKit::ScopedWebGLRenderingResourcesRequest::scheduleFreeWebGLRenderingResources(this);
    }
  }
  if (*((unsigned char *)v2 + 177)) {
    atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
  }
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteGraphicsContextGL *)((char *)v2 + 96));
  uint64_t v6 = *((void *)v2 + 11);
  *((void *)v2 + 1nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v5);
  }
  uint64_t v7 = *((void *)v2 + 10);
  *((void *)v2 + 10) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v7 + 16));
  }
  uint64_t v8 = *((void *)v2 + 9);
  *((void *)v2 + 9) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v8 + 16));
    (*(void (**)(void))(*(void *)(v8 + 8) + 8))();
  }
  int v9 = (_DWORD *)*((void *)v2 + 7);
  *((void *)v2 + 7) = 0;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 16))(v9);
    }
    else {
      --v9[2];
    }
  }
  uint64_t v10 = (unsigned int *)*((void *)v2 + 6);
  *((void *)v2 + 6) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)v2 + 5);
  *((void *)v2 + 5) = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v11 + 8), v5);
  }
  uint64_t v12 = (atomic_uchar *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, v5);
  }

  MEMORY[0x1F416EE08](v2);
}

uint64_t WebKit::RemoteGraphicsContextGL::initialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v8 = *a2;
  char v9 = *((unsigned char *)a2 + 8);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v5 = v8;
  *(void *)uint64_t v4 = &unk_1EE9BF3A8;
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = v9;
  *(void *)(v4 + 24) = a1;
  uint64_t v7 = v4;
  IPC::StreamConnectionWorkQueue::dispatch(v3, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::stopListeningForIPC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9BF3D0;
  v4[1] = v3;
  uint64_t v6 = v4;
  IPC::StreamConnectionWorkQueue::dispatch(v2, (uint64_t *)&v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::forceContextLost(WebKit::RemoteGraphicsContextGL *this)
{
  char v2 = 0;
  return IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(*(void *)(*((void *)this + 6) + 40), (uint64_t)&v2, *((void *)this + 8), 0, 0);
}

IPC::Encoder *WebKit::RemoteGraphicsContextGL::addDebugMessage(WebKit::RemoteGraphicsContextGL *this, int a2, int a3, int a4, const WTF::String *a5)
{
  int v17 = a3;
  int v18 = a2;
  int v16 = a4;
  uint64_t v6 = *(void *)(*((void *)this + 6) + 40);
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 903;
  *((void *)v8 + nw_tcp_options_set_no_delay(options, 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v19 = v8;
  char v9 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v8, &v18);
  uint64_t v10 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v9, &v17);
  uint64_t v11 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v10, &v16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a5);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v19, 0, 0);
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::reshape(WebKit::RemoteGraphicsContextGL *this, int a2, int a3)
{
  if (a2 && a3)
  {
    uint64_t v3 = *((void *)this + 7);
    return MEMORY[0x1F4170C70](v3);
  }
  else
  {
    char v5 = 0;
    return IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(*(void *)(*((void *)this + 6) + 40), (uint64_t)&v5, *((void *)this + 8), 0, 0);
  }
}

uint64_t WebKit::RemoteGraphicsContextGL::getErrors(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 Errors = WebCore::GraphicsContextGLANGLE::getErrors(*(WebCore::GraphicsContextGLANGLE **)(a1 + 56));
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, Errors);
  char v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::RemoteGraphicsContextGL::ensureExtensionEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 1968))();
}

uint64_t WebKit::RemoteGraphicsContextGL::drawSurfaceBufferToImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = a3;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9BF3F8;
  v8[1] = a1;
  _OWORD v8[2] = &v13;
  uint64_t v12 = v8;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v7 + 2312))(v7, a2, &v12);
  char v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
}

uint64_t WebKit::RemoteGraphicsContextGL::surfaceBufferToVideoFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  LOBYTE(v14[0]) = 0;
  char v16 = 0;
  WebCore::GraphicsContextGLCocoa::surfaceBufferToVideoFrame();
  if (v13)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    uint64_t v10 = (unsigned int *)v13;
    uint64_t v13 = 0;
    WebKit::RemoteVideoFrameObjectHeap::add(v5, (uint64_t *)&v10, (uint64_t)v11);
    v14[0] = v11[0];
    v14[1] = v11[1];
    uint64_t v14[2] = v11[2];
    uint64_t v15 = v12;
    char v16 = 1;
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = (unsigned int *)v13;
    uint64_t v13 = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
    }
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 16))(v8, v14);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

uint64_t WebKit::RemoteGraphicsContextGL::webXREnabled(WebKit::RemoteGraphicsContextGL *this)
{
  char v2 = (atomic_uchar *)*((void *)this + 3);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 4), &v5);
    uint64_t v4 = v5;
    uint64_t v5 = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
    }
  }
  return 0;
}

uint64_t WebKit::RemoteGraphicsContextGL::simulateEventForTesting(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = *(atomic_uchar **)(a1 + 24);
    if (v3) {
      uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v3);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v7 = &unk_1EE9BF448;
    v7[1] = v4;
    _DWORD v7[2] = v5;
    v7[3] = v6;
    uint64_t v10 = v7;
    WTF::callOnMainRunLoop();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  else
  {
    char v9 = *(uint64_t (**)(void))(**(void **)(a1 + 56) + 2264);
    return v9();
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getBufferSubDataInline(int a1, int a2, int a3, WTF *this, uint64_t *a5)
{
  if ((unint64_t)this - 65537 > 0xFFFFFFFFFFFEFFFFLL)
  {
    WTF::tryFastMalloc(this);
    WTF::fastFree(0, v10);
    WTF::fastFree(0, v11);
    if (v17)
    {
      int BufferSubDataWithStatus = WebCore::GraphicsContextGLANGLE::getBufferSubDataWithStatus();
      if (BufferSubDataWithStatus) {
        uint64_t v13 = this;
      }
      else {
        uint64_t v13 = 0;
      }
      if (BufferSubDataWithStatus) {
        long long v14 = v17;
      }
      else {
        long long v14 = 0;
      }
    }
    else
    {
      WebCore::GraphicsContextGLANGLE::addError();
      uint64_t v13 = 0;
      long long v14 = 0;
    }
    uint64_t v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF *, WTF *))(*(void *)v15 + 16))(v15, v14, v13);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    return WTF::fastFree(v17, v16);
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::addError();
    uint64_t v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 16))(v6, 0, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

unsigned int *WebKit::RemoteGraphicsContextGL::getBufferSubDataSharedMemory(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a4 < 0x6400001)
  {
    WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    WebCore::SharedMemory::map();
    if (v13 && *(void *)(v13 + 8) >= a4)
    {
      uint64_t BufferSubDataWithStatus = WebCore::GraphicsContextGLANGLE::getBufferSubDataWithStatus();
    }
    else
    {
      WebCore::GraphicsContextGLANGLE::addError();
      uint64_t BufferSubDataWithStatus = 0;
    }
    uint64_t v12 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, BufferSubDataWithStatus);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    uint64_t result = (unsigned int *)v13;
    if (v13) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v13);
    }
  }
  else
  {
    uint64_t v7 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return (unsigned int *)v8(v7);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::readPixelsInline(int a1, int a2, unint64_t a3, WebCore::GraphicsContextGL *this, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  int v8 = a3;
  unint64_t v9 = HIDWORD(a3);
  unsigned int v10 = WebCore::GraphicsContextGL::computeBytesPerGroup(this);
  if (v8 >= 0) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = -v8;
  }
  if ((v9 & 0x80000000) == 0) {
    unsigned int v12 = v9;
  }
  else {
    unsigned int v12 = -(int)v9;
  }
  unint64_t v13 = v11 * (unint64_t)v12;
  if ((v13 & 0xFFFFFFFF00000000) == 0)
  {
    unint64_t v14 = v13 * (unint64_t)v10;
    if ((v14 & 0xFFFFFFFF00000000) == 0)
    {
      if (v10)
      {
        if ((v14 - 1) >> 16)
        {
          if (v14)
          {
LABEL_17:
            WebCore::GraphicsContextGLANGLE::addError();
            uint64_t PixelsWithStatus = 0;
            unsigned int v24 = 0;
            char v16 = 0;
            goto LABEL_20;
          }
          char v16 = 0;
          uint64_t v15 = 0;
        }
        else
        {
          uint64_t v15 = v14;
          WTF::tryFastMalloc((WTF *)v14);
          char v16 = v29;
          WTF::fastFree(0, v17);
          WTF::fastFree(0, v18);
          if (!v29) {
            goto LABEL_17;
          }
        }
        uint64_t PixelsWithStatus = WebCore::GraphicsContextGLANGLE::readPixelsWithStatus();
        unsigned int v24 = v22;
        if ((_BYTE)v22)
        {
LABEL_21:
          uint64_t v26 = v24;
          uint64_t v27 = *a7;
          *a7 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF *, uint64_t))(*(void *)v27 + 16))(v27, PixelsWithStatus, v26, v16, v15);
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          return WTF::fastFree(v16, v28);
        }
LABEL_20:
        WTF::fastFree(v16, v22);
        WTF::fastFree(0, v25);
        uint64_t v15 = 0;
        char v16 = 0;
        goto LABEL_21;
      }
    }
  }
  uint64_t v19 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, void, void, void, void))(*(void *)v19 + 16))(v19, 0, 0, 0, 0);
  uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 8);

  return v20(v19);
}

uint64_t WebKit::RemoteGraphicsContextGL::readPixelsSharedMemory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  WebCore::SharedMemoryHandle::setOwnershipOfMemory();
  WebCore::SharedMemory::map();
  if (v14)
  {
    uint64_t PixelsWithStatus = WebCore::GraphicsContextGLANGLE::readPixelsWithStatus();
    uint64_t v11 = v10;
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::addError();
    uint64_t v11 = 0;
    uint64_t PixelsWithStatus = 0;
  }
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v14);
  }
  uint64_t v12 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, PixelsWithStatus, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
}

uint64_t WebKit::RemoteGraphicsContextGL::multiDrawArraysANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v10, *(int **)(a3 + 8), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v7, *(int **)(a3 + 16), *(void *)a3);
  if (v9 == v12)
  {
    WebCore::GraphicsContextGLANGLE::multiDrawArraysANGLE();
    uint64_t v5 = v7;
    if (v7)
    {
      uint64_t v7 = 0;
      int v8 = 0;
      WTF::fastFree(v5, v4);
    }
    uint64_t result = (uint64_t)v10;
    if (v10)
    {
      unsigned __int8 v10 = 0;
      int v11 = 0;
      return WTF::fastFree((WTF *)result, v4);
    }
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, *(int **)(a3 + 8), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v12, *(int **)(a3 + 16), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 24), *(void *)a3);
  if (v14 == v17 && v11 == v17)
  {
    WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedANGLE();
    uint64_t v6 = v9;
    if (v9)
    {
      int v9 = 0;
      int v10 = 0;
      WTF::fastFree(v6, v5);
    }
    uint64_t v7 = v12;
    if (v12)
    {
      int v12 = 0;
      int v13 = 0;
      WTF::fastFree(v7, v5);
    }
    uint64_t result = v15;
    if (v15)
    {
      uint64_t v15 = 0;
      int v16 = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

WTF *WebKit::RemoteGraphicsContextGL::multiDrawElementsANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v5, *(int **)(a3 + 8), *(void *)a3);
  WebCore::GraphicsContextGLANGLE::multiDrawElementsANGLE();
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 8), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v7, *(int **)(a3 + 24), *(void *)a3);
  WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedANGLE();
  uint64_t v5 = v7;
  if (v7)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t result = v9;
  if (v9)
  {
    int v9 = 0;
    int v10 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedBaseInstanceANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v18, *(int **)(a3 + 8), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, *(int **)(a3 + 16), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v12, *(int **)(a3 + 24), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 32), *(void *)a3);
  if (v17 == v20 && v14 == v20 && v11 == v20)
  {
    WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedBaseInstanceANGLE();
    uint64_t v5 = v9;
    if (v9)
    {
      int v9 = 0;
      int v10 = 0;
      WTF::fastFree(v5, v4);
    }
    int v6 = v12;
    if (v12)
    {
      int v12 = 0;
      int v13 = 0;
      WTF::fastFree(v6, v4);
    }
    uint64_t v7 = v15;
    if (v15)
    {
      uint64_t v15 = 0;
      int v16 = 0;
      WTF::fastFree(v7, v4);
    }
    uint64_t result = v18;
    if (v18)
    {
      uint64_t v18 = 0;
      int v19 = 0;
      return WTF::fastFree((WTF *)result, v4);
    }
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

WTF *WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, *(int **)(a3 + 8), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v13, *(int **)(a3 + 24), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v11, *(int **)(a3 + 32), *(void *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 40), *(void *)a3);
  WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE();
  uint64_t v5 = v9;
  if (v9)
  {
    int v9 = 0;
    int v10 = 0;
    WTF::fastFree(v5, v4);
  }
  int v6 = v11;
  if (v11)
  {
    int v11 = 0;
    int v12 = 0;
    WTF::fastFree(v6, v4);
  }
  uint64_t v7 = v13;
  if (v13)
  {
    int v13 = 0;
    int v14 = 0;
    WTF::fastFree(v7, v4);
  }
  uint64_t result = v15;
  if (v15)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

unsigned int *WebKit::RemoteImageBuffer::create(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x28);
  uint64_t v8 = v6;
  uint64_t v9 = *a2;
  *a2 = 0;
  uint64_t v15 = v9;
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)uint64_t v6 = &unk_1EE9BF1E0;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 16), 1u);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = v10;
  *(unsigned char *)(v6 + 32) = 1;
  atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 1u);
  uint64_t v11 = *(void *)(v6 + 24);
  LODWORD(v10) = *(unsigned __int8 *)(v11 + 41);
  int v12 = *(unsigned __int8 *)(v11 + 48);
  if (v10 == 1)
  {
    uint64_t v13 = *(void *)(*(void *)(v6 + 16) + 56);
    if (v12) {
      atomic_fetch_add((atomic_ullong *volatile)(v13 + 64), 1uLL);
    }
    atomic_fetch_add((atomic_ullong *volatile)&WebKit::globalImageBufferForCanvasCount, 1uLL);
    atomic_fetch_add((atomic_ullong *volatile)(v13 + 72), 1uLL);
  }
  if (v12) {
    atomic_fetch_add((atomic_ullong *volatile)&WebKit::globalAcceleratedImageBufferCount, 1uLL);
  }
  *a1 = v6;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v15, v7);
  return IPC::StreamServerConnection::startReceivingMessages(*(void *)(*(void *)(v8 + 16) + 40), v8, 0x54u, *(void *)(*(void *)(v8 + 24) + 120));
}

void WebKit::RemoteImageBuffer::~RemoteImageBuffer(WebKit::RemoteImageBuffer *this)
{
  *(void *)this = &unk_1EE9BF1E0;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v8 = *((void *)this + 3);
    int v9 = *(unsigned __int8 *)(v8 + 41);
    int v10 = *(unsigned __int8 *)(v8 + 48);
    if (v9 == 1)
    {
      uint64_t v11 = *(void *)(v2 + 56);
      if (v10) {
        atomic_fetch_add((atomic_ullong *volatile)(v11 + 64), 0xFFFFFFFFFFFFFFFFLL);
      }
      atomic_fetch_add((atomic_ullong *volatile)&WebKit::globalImageBufferForCanvasCount, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add((atomic_ullong *volatile)(v11 + 72), 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v10) {
      atomic_fetch_add((atomic_ullong *volatile)&WebKit::globalAcceleratedImageBufferCount, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  uint64_t v3 = (void *)((char *)this + 24);
  if (WebCore::ImageBuffer::volatilityState(*((WebCore::ImageBuffer **)this + 3)) != 1)
  {
    if (*(void *)(*v3 + 112))
    {
      uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*v3 + 16))(*v3);
      if (*(_DWORD *)(v5 + 364))
      {
        uint64_t v7 = (_DWORD *)v5;
        do
          (*(void (**)(_DWORD *, uint64_t))(*(void *)v7 + 104))(v7, 1);
        while (v7[91]);
      }
    }
  }
  if (*((unsigned char *)this + 32)) {
    atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
  }
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)this + 3, v4);
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v6 + 16));
      (*(void (**)(void))(*(void *)(v6 + 8) + 8))();
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteImageBuffer::~RemoteImageBuffer(this);

  WTF::fastFree(v1, v2);
}

void WebKit::RemoteImageBuffer::getPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 104);
  if (v7)
  {
    atomic_fetch_add((atomic_uint *volatile)v7, 1u);
    if ((WebCore::PixelBuffer::supportedPixelFormat() & 1) == 0)
    {
      int v19 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = "void WebKit::RemoteImageBuffer::getPixelBuffer(WebCore::PixelBufferFormat, WebCo"
                                        "re::IntPoint, WebCore::IntSize, CompletionHandler<void ()> &&)";
        _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteImageBuffer.cpp 91: Invalid message dispatched %{public}s: Pixel format not supported", (uint8_t *)&buf, 0xCu);
      }
      *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 48) + 56) + 98) = 1;
      goto LABEL_10;
    }
    *(void *)&long long buf = a3;
    *((void *)&buf + nw_tcp_options_set_no_delay(options, 1) = a4;
    uint64_t v12 = *(void *)(a1 + 24);
    WebCore::ImageBufferAllocator::ImageBufferAllocator((WebCore::ImageBufferAllocator *)v22);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, long long *, uint8_t *))(*(void *)v12 + 88))(&v21, v12, a2, &buf, v22);
    uint64_t v13 = (_DWORD *)v21;
    size_t v14 = *(void *)(v7 + 8);
    if (!v21)
    {
      bzero(*(void **)(v7 + 16), v14);
      goto LABEL_6;
    }
    size_t v15 = *(void *)(v21 + 48);
    if (v15 <= v14)
    {
      memcpy(*(void **)(v7 + 16), *(const void **)(v21 + 40), v15);
LABEL_6:
      int v16 = (_DWORD *)v21;
      uint64_t v21 = 0;
      if (v16)
      {
        if (v16[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
        }
        else {
          --v16[2];
        }
      }
      uint64_t v17 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      goto LABEL_10;
    }
    int v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v22 = 136446210;
      uint64_t v23 = "void WebKit::RemoteImageBuffer::getPixelBuffer(WebCore::PixelBufferFormat, WebCore::IntPoint, WebCore::IntSi"
            "ze, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteImageBuffer.cpp 94: Invalid message dispatched %{public}s: Shmem for return of getPixelBuffer is too small", v22, 0xCu);
      uint64_t v13 = (_DWORD *)v21;
      *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 48) + 56) + 98) = 1;
      uint64_t v21 = 0;
      if (!v13)
      {
LABEL_10:
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v7);
        return;
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 48) + 56) + 98) = 1;
      uint64_t v21 = 0;
    }
    if (v13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
    }
    else {
      --v13[2];
    }
    goto LABEL_10;
  }
  uint64_t v18 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "void WebKit::RemoteImageBuffer::getPixelBuffer(WebCore::PixelBufferFormat, WebCore::"
                                    "IntPoint, WebCore::IntSize, CompletionHandler<void ()> &&)";
    _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteImageBuffer.cpp 90: Invalid message dispatched %{public}s: No shared memory for getPixelBufferForImageBuffer", (uint8_t *)&buf, 0xCu);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  *(unsigned char *)(*(void *)(*(void *)(v6 + 48) + 56) + 98) = 1;
}

unsigned int *WebKit::RemoteImageBuffer::getPixelBufferWithNewMemory(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned int **)(v11 + 104);
  *(void *)(v11 + 104) = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
  }
  WebCore::SharedMemory::map();
  uint64_t v13 = v22;
  if (v22)
  {
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v22 = 0;
    size_t v15 = *(unsigned int **)(v14 + 104);
    *(void *)(v14 + 104) = v13;
    if (v15) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v15);
    }
    __int16 v20 = *a3;
    int v16 = (const void *)*((void *)a3 + 1);
    *((void *)a3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    CFTypeRef cf = v16;
    WebKit::RemoteImageBuffer::getPixelBuffer(a1, (uint64_t)&v20, a4, a5, a6);
    CFTypeRef v17 = cf;
    CFTypeRef cf = 0;
    if (v17) {
      CFRelease(v17);
    }
  }
  else
  {
    int v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v24 = "void WebKit::RemoteImageBuffer::getPixelBufferWithNewMemory(WebCore::SharedMemory::Handle &&, WebCore::Pixel"
            "BufferFormat, WebCore::IntPoint, WebCore::IntSize, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteImageBuffer.cpp 106: Invalid message dispatched %{public}s: Shared memory could not be mapped.", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 48) + 56) + 98) = 1;
  }
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::RemoteImageBuffer::putPixelBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a5;
  v7[0] = a3;
  v7[1] = a4;
  return (*(uint64_t (**)(void, void, void *, uint64_t *, uint64_t))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24), *a2, v7, &v8, a6);
}

WTF::MachSendRight *WebKit::RemoteImageBuffer::getShareableBitmap(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = WebCore::ImageBuffer::backendSize(*(WebCore::ImageBuffer **)(a1 + 24));
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v8 = (const WebCore::FloatSize *)(v7 + 16);
  uint64_t v10 = v9;
  if ((a2 & 1) == 0)
  {
    WebCore::IntSize::IntSize((WebCore::IntSize *)&v26, v8);
    uint64_t v6 = v26;
  }
  uint64_t v33 = v6;
  if ((int)v6 < 1 || SHIDWORD(v6) <= 0) {
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(const void **)(v12 + 32);
  if (v13) {
    CFRetain(*(CFTypeRef *)(v12 + 32));
  }
  uint64_t v30 = v13;
  char v31 = 1;
  MEMORY[0x199738D60](&v26, &v33, &v30, 0);
  WebCore::ShareableBitmap::create();
  if (v28)
  {
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    if (v14) {
      CFRelease(v14);
    }
  }
  if (v31)
  {
    size_t v15 = v30;
    uint64_t v30 = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  if (!v32)
  {
LABEL_8:
    LOBYTE(v21[0]) = 0;
    char v22 = 0;
LABEL_29:
    uint64_t v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v20 + 16))(v20, v21);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v21);
  }
  WebCore::ShareableBitmap::createHandle();
  uint64_t result = (WTF::MachSendRight *)WebCore::ProcessIdentity::operator BOOL();
  if (!result)
  {
LABEL_21:
    WebCore::ShareableBitmap::createGraphicsContext(&v25, v32);
    if (v25)
    {
      v21[0] = 0;
      v21[1] = vcvt_f32_s32((int32x2_t)v33);
      uint64_t v23 = 0;
      uint64_t v24 = v10;
      (*(void (**)(void))(*(void *)v25 + 384))();
      char v22 = 0;
      if (v29)
      {
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v21, (uint64_t)&v26);
        char v22 = 1;
      }
    }
    else
    {
      LOBYTE(v21[0]) = 0;
      char v22 = 0;
    }
    uint64_t v17 = v25;
    uint64_t v25 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v26);
    int v19 = v32;
    char v32 = 0;
    if (v19) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v19, v18);
    }
    goto LABEL_29;
  }
  if (v29)
  {
    WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

WTF::MachSendRight *WebKit::RemoteImageBuffer::filteredNativeImage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(WebCore::NativeImage **__return_ptr))(**(void **)(a1 + 24) + 64))(&v31);
  if (!v31)
  {
    LOBYTE(v15) = 0;
    char v18 = 0;
LABEL_26:
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, &v15);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v15);
  }
  uint64_t v30 = WebCore::NativeImage::size(v31);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(const void **)(v5 + 32);
  if (v6) {
    CFRetain(*(CFTypeRef *)(v5 + 32));
  }
  uint64_t v27 = v6;
  char v28 = 1;
  MEMORY[0x199738D60](v23, &v30, &v27, 0);
  WebCore::ShareableBitmap::create();
  if (v25)
  {
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  if (v28)
  {
    uint64_t v9 = v27;
    uint64_t v27 = 0;
    if (v9) {
      CFRelease(v9);
    }
  }
  if (!v29)
  {
    LOBYTE(v15) = 0;
    char v18 = 0;
LABEL_24:
    uint64_t v13 = v31;
    char v31 = 0;
    if (v13) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(*((atomic_uchar **)v13 + 1), v7);
    }
    goto LABEL_26;
  }
  WebCore::ShareableBitmap::createHandle();
  uint64_t result = (WTF::MachSendRight *)WebCore::ProcessIdentity::operator BOOL();
  if (!result)
  {
LABEL_14:
    WebCore::ShareableBitmap::createGraphicsContext(&v22, v29);
    if (v22)
    {
      uint64_t v15 = 0;
      float v16 = (float)(int)v30;
      float v17 = (float)SHIDWORD(v30);
      uint64_t v19 = 0;
      float v20 = (float)(int)v30;
      float v21 = (float)SHIDWORD(v30);
      WebCore::GraphicsContext::drawNativeImage();
      char v18 = 0;
      if (v26)
      {
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v15, (uint64_t)v23);
        char v18 = 1;
      }
    }
    else
    {
      LOBYTE(v15) = 0;
      char v18 = 0;
    }
    uint64_t v11 = v22;
    uint64_t v22 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v23);
    uint64_t v12 = v29;
    char v29 = 0;
    if (v12) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v12, v7);
    }
    goto LABEL_24;
  }
  if (v26)
  {
    WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteImageBuffer::convertToLuminanceMask(WebKit::RemoteImageBuffer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 72))();
}

uint64_t WebKit::RemoteImageBuffer::transformToColorSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

uint64_t WebKit::RemoteImageBuffer::flushContextSync(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t *WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    int v7 = 1;
    uint64_t v8 = v6 - 1;
    *(void *)(v5 + 8) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v12 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      BOOL v10 = v12 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
    if (!v8)
    {
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      if (!v10) {
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  return a1;
}

void WebKit::RemoteRenderingBackend::~RemoteRenderingBackend(WebKit::RemoteRenderingBackend *this, void *a2)
{
  *(void *)this = &unk_1EE9BF230;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = &unk_1EE9BF288;
  uint64_t v3 = (WebKit::ShapeDetection::ObjectHeap *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::ShapeDetection::ObjectHeap>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 16);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 15);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = *((void *)this + 14);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  int v7 = (unsigned int *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteRenderingBackend *)((char *)this + 88));
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v9, v8);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v10 + 16));
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v11 + 16));
  }
  uint64_t v12 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v13 + 8), v8);
  }
  WTF::WeakPtrFactory<WebKit::ShapeDetection::ObjectHeap,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v8);

  WTF::isIntegralOrPointerType(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRenderingBackend::~RemoteRenderingBackend(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteRenderingBackend::~RemoteRenderingBackend(WebKit::RemoteRenderingBackend *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRenderingBackend::~RemoteRenderingBackend((WebKit::RemoteRenderingBackend *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteRenderingBackend::stopListeningForIPC(WebKit::RemoteRenderingBackend *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1EE9BF498;
  v3[1] = this;
  uint64_t v5 = v3;
  IPC::StreamConnectionWorkQueue::stopAndWaitForCompletion(v2, (uint64_t *)&v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

atomic_uchar *volatile **WebKit::RemoteRenderingBackend::workQueueUninitialize(WebKit::RemoteRenderingBackend *this, void *a2)
{
  uint64_t v3 = *((void *)this + 14);
  if (v3)
  {
    *((void *)this + 14) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    *((void *)this + 15) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 16);
  if (v5)
  {
    *((void *)this + 16) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6)
  {
    *((void *)this + 8) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)this + 5), 0x75u, *((void *)this + 12));
  int v7 = (IPC::StreamServerConnection *)*((void *)this + 5);

  return IPC::StreamServerConnection::invalidate(v7);
}

uint64_t WebKit::RemoteRenderingBackend::messageSenderDestinationID(WebKit::RemoteRenderingBackend *this)
{
  return *((void *)this + 12);
}

void WebCore::ImageBuffer::create<WebCore::NullImageBufferBackend,WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(uint64_t *a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v21 = a2;
  int v22 = 1065353216;
  CFTypeRef v23 = cf;
  if (cf) {
    CFRetain(cf);
  }
  __int16 v24 = 1;
  WebCore::ImageBuffer::backendParameters();
  WebCore::NullImageBufferBackend::create();
  if (v19)
  {
    char v17 = 0;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    uint64_t v18 = 0;
    uint64_t v13 = v21;
    int v14 = v22;
    CFTypeRef v4 = v23;
    CFTypeRef v15 = v23;
    if (v23) {
      CFRetain(v23);
    }
    __int16 v16 = v24;
    uint64_t v5 = v19;
    uint64_t v19 = 0;
    uint64_t v12 = v5;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(a1, (uint64_t)&v13);
    (*(void (**)(WebCore::NullImageBufferBackend *))(*(void *)v12 + 8))(v12);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v6 = v19;
    uint64_t v19 = 0;
    if (v6)
    {
      WebCore::NullImageBufferBackend::~NullImageBufferBackend(v6);
      MEMORY[0x199740C10](v7, 0x10E3C409DD61336, v8, v9);
    }
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v10 = v20;
  float v20 = 0;
  if (v10) {
    CFRelease(v10);
  }
  CFTypeRef v11 = v23;
  CFTypeRef v23 = 0;
  if (v11) {
    CFRelease(v11);
  }
}

IPC::Encoder *WebKit::RemoteRenderingBackend::didFailCreateImageBuffer(uint64_t *a1, uint64_t a2)
{
  uint64_t v29 = a2;
  CFTypeRef v4 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  WebCore::ImageBuffer::create<WebCore::NullImageBufferBackend,WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(&v28, 0, *v4);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v24 + 4));
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198AC4B44);
  }
  WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v30, v28, a2, (uint64_t)a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)&v23, a1 + 14, &v29, &v30);
  uint64_t v5 = v30;
  uint64_t v30 = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v27 = v28;
  uint64_t v28 = 0;
  WebKit::RemoteImageBuffer::create((uint64_t *)&v30, &v27, (uint64_t)a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((uint64_t)&v23, a1 + 15, &v29, &v30);
  uint64_t v7 = v30;
  uint64_t v30 = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v27, v6);
  LOBYTE(v23) = 0;
  char v26 = 0;
  uint64_t v8 = v29;
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1117;
  *((void *)v9 + nw_tcp_options_set_no_delay(options, 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v30 = (unsigned int *)v9;
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(v9, (unint64_t)&v23);
  (*(void (**)(uint64_t *, unsigned int **, void))(*a1 + 32))(a1, &v30, 0);
  uint64_t result = (IPC::Encoder *)v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  if (v26 && v25 != -1) {
    uint64_t result = (IPC::Encoder *)off_1EE9BF2D0[v25]((int)&v30, (WTF::MachSendRight *)&v23);
  }
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    char v13 = 0;
    uint64_t v14 = *(void *)(v12 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
    if (v13) {
      uint64_t result = (IPC::Encoder *)MEMORY[0x19972E8D0](v14);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    int v16 = 1;
    uint64_t v17 = v15 - 1;
    *(void *)(v14 + 8) = v15 - 1;
    if (v15 == 1)
    {
      uint64_t v22 = *(void *)(v14 + 16);
      uint64_t v18 = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = 0;
      BOOL v19 = v22 != 0;
    }
    else
    {
      uint64_t v18 = 0;
      BOOL v19 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 == 1)
    {
      if (v17) {
        return result;
      }
    }
    else
    {
      uint64_t result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17) {
        return result;
      }
    }
    if (v18) {
      uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    if (!v19) {
      return (IPC::Encoder *)WTF::fastFree((WTF *)v14, v10);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (void *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v28 = v8 + 16 * v32;
        goto LABEL_21;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      int v16 = (void *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      int v16 = v18;
    }
  }
  void *v16 = v11;
  float v20 = (unsigned int **)(v16 + 1);
  uint64_t v21 = *a4;
  *a4 = 0;
  uint64_t v33 = v21;
  if (v16 + 1 != &v33)
  {
    if (*v20)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((unsigned int **)v16 + 1);
      uint64_t v30 = *v20;
      char v31 = v33;
      uint64_t v33 = 0;
      *float v20 = v31;
      if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
      }
    }
    else
    {
      uint64_t v33 = 0;
      *float v20 = v21;
    }
  }
  uint64_t result = (uint64_t)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v33);
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_20;
    }
LABEL_26:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
    int v16 = (void *)result;
    uint64_t v24 = *a2;
    if (*a2) {
      unint64_t v27 = *(unsigned int *)(v24 - 4);
    }
    else {
      unint64_t v27 = 0;
    }
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26) {
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v28 = v24 + 16 * v27;
  char v29 = 1;
LABEL_21:
  *(void *)uint64_t v7 = v16;
  *(void *)(v7 + 8) = v28;
  *(unsigned char *)(v7 + 16) = v29;
  return result;
}

IPC::Encoder *WebKit::RemoteRenderingBackend::didCreateImageBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 120);
  uint64_t v24 = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v4);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) & 1) == 0)
  {
    uint64_t v7 = (unsigned int *)96;
    __break(0xC471u);
    goto LABEL_17;
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 24))(v21, v6, 1);
  WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v25, *a2, v5, (uint64_t)a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)v17, a1 + 14, &v24, &v25);
  uint64_t v7 = v25;
  int v25 = 0;
  if (v7) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t v20 = v8;
    WebKit::RemoteImageBuffer::create((uint64_t *)&v25, &v20, (uint64_t)a1);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((uint64_t)v17, a1 + 15, &v24, &v25);
    int v10 = v25;
    int v25 = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
    }
    uint64_t v7 = (unsigned int *)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v20, v9);
    if (v23) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    if (atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
    }
  }
  LOBYTE(v17[0]) = 0;
  int v18 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v17, (uint64_t)v21);
  char v19 = 1;
  uint64_t v11 = v24;
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 1117;
  *((void *)v12 + nw_tcp_options_set_no_delay(options, 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = (unsigned int *)v12;
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(v12, (unint64_t)v17);
  (*(void (**)(uint64_t *, unsigned int **, void))(*a1 + 32))(a1, &v25, 0);
  uint64_t result = (IPC::Encoder *)v25;
  int v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  if (v19 && v18 != -1) {
    uint64_t result = (IPC::Encoder *)off_1EE9BF2D0[v18]((int)&v25, (WTF::MachSendRight *)v17);
  }
  if (v23)
  {
    if (v22 != -1) {
      return (IPC::Encoder *)off_1EE9BF2D0[v22]((int)v17, (WTF::MachSendRight *)v21);
    }
  }
  return result;
}

unsigned int **WebKit::RemoteRenderingBackend::moveToSerializedBuffer(void *a1, unint64_t a2)
{
  uint64_t v4 = a1 + 14;
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[14], a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(&v14, v4, v5);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v14);
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[15], a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::take(&v16, a1 + 15, v6);
  uint64_t v7 = v16;
  if (!v16) {
    return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)&v16);
  }
  atomic_fetch_add(v16 + 2, 1u);
  if (v16) {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((unsigned int **)&v16);
  }
  uint64_t v8 = *((void *)v7 + 3);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v8 + 8));
  uint64_t v15 = 0;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v15, v9);
  if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v7 + 8))(v7);
  }
  uint64_t result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)&v16);
  if (v8)
  {
    uint64_t v11 = a1[7];
    uint64_t v13 = v8;
    WebKit::RemoteSharedResourceCache::addSerializedImageBuffer(v11, a2, &v13);
    return (unsigned int **)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v13, v12);
  }
  return result;
}

void WebKit::RemoteRenderingBackend::moveToImageBuffer(WTF::ApproximateTime *a1, unint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 7) + 24;
  v19[0] = 0;
  v19[1] = 0;
  unint64_t v18 = a2;
  WTF::ApproximateTime::now(a1);
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take(v3, &v18, &v17, v4 + 15.0);
  if (v17)
  {
    unint64_t v18 = *(void *)(*((void *)a1 + 7) + 56);
    v19[0] = 0;
    WebCore::ProcessIdentity::operator=();
    WebCore::ImageBuffer::transferToNewContext();
    uint64_t v16 = v17;
    uint64_t v17 = 0;
    WebKit::RemoteRenderingBackend::didCreateImageBuffer((uint64_t *)a1, &v16);
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v16, v5);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v19 + 4));
    uint64_t v7 = v17;
    uint64_t v17 = 0;
    if (v7)
    {
      char v8 = 0;
      uint64_t v9 = *(void *)(v7 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (v8) {
        MEMORY[0x19972E8D0](v9);
      }
      uint64_t v10 = *(void *)(v9 + 8);
      int v11 = 1;
      uint64_t v12 = v10 - 1;
      *(void *)(v9 + 8) = v10 - 1;
      if (v10 == 1)
      {
        uint64_t v15 = *(void *)(v9 + 16);
        uint64_t v13 = *(void *)(v9 + 24);
        *(void *)(v9 + 24) = 0;
        BOOL v14 = v15 != 0;
      }
      else
      {
        uint64_t v13 = 0;
        BOOL v14 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
      if (v11 == 1)
      {
        if (v12) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        if (v12) {
          return;
        }
      }
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      if (!v14) {
        WTF::fastFree((WTF *)v9, v6);
      }
    }
  }
}

uint64_t *WebKit::RemoteRenderingBackend::createImageBuffer(uint64_t *a1, uint64_t *a2, int a3, int a4, const void **a5, char a6, uint64_t a7, float a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  WebKit::RemoteRenderingBackend::allocateImageBuffer(&v17, (uint64_t)a1, a2, a3, a4, a5, a6, &v15, a8, a7);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v16 + 4));
  if (v17)
  {
    uint64_t v14 = v17;
    WebKit::RemoteRenderingBackend::didCreateImageBuffer(a1, &v14);
    return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v14, v10);
  }
  else
  {
    uint64_t v12 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = a1[12];
      *(_DWORD *)long long buf = 134218240;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = a7;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackend::createImageBuffer - failed to allocate image buffer %llu", buf, 0x16u);
    }
    return (uint64_t *)WebKit::RemoteRenderingBackend::didFailCreateImageBuffer(a1, a7);
  }
}

void WebKit::RemoteRenderingBackend::releaseImageBuffer(void *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  double v4 = a1 + 14;
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[14], a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(&v9, v4, v5);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v9);
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[15], a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::take(buf, a1 + 15, v6);
  uint64_t v7 = *(void *)buf;
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)buf);
  if (!v7)
  {
    char v8 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteRenderingBackend::releaseImageBuffer(RenderingResourceIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 318: Invalid message dispatched %{public}s: Resource is being released before being cached.", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(a1[6] + 56) + 98) = 1;
  }
}

unsigned int *WebKit::RemoteRenderingBackend::destroyGetPixelBufferSharedMemory(WebKit::RemoteRenderingBackend *this)
{
  uint64_t result = (unsigned int *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

void WebKit::RemoteRenderingBackend::cacheNativeImage(uint64_t a1)
{
  WebCore::ShareableBitmap::create();
  if (v11)
  {
    WebCore::ShareableBitmap::createPlatformImage();
    WebCore::NativeImage::create();
    CFTypeRef v3 = cf[0];
    cf[0] = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = v10;
    if (v10)
    {
      uint64_t v10 = 0;
      if (!*(unsigned char *)(v4 + 40))
      {
        __break(1u);
        return;
      }
      uint64_t v5 = *(void *)(v4 + 32);
      uint64_t v9 = 0;
      uint64_t v12 = v4;
      uint64_t v15 = v5;
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>((uint64_t)cf, (uint64_t *)(a1 + 64), &v15, &v12);
      if (v14) {
        ++*(_DWORD *)(a1 + 76);
      }
      if (v12) {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(*(atomic_uchar **)(v12 + 8), v6);
      }
      WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v9, v6);
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      if (v7) {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(*(atomic_uchar **)(v7 + 8), v2);
      }
    }
    char v8 = v11;
    uint64_t v11 = 0;
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v8, v2);
    }
  }
}

void WebKit::RemoteRenderingBackend::cacheFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    uint64_t v6 = 0;
LABEL_3:
    WebCore::FontPlatformData::create();
    WebCore::Font::create();
    uint64_t v7 = WebCore::Font::renderingResourceIdentifier(v28);
    uint64_t v9 = (uint64_t *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 64);
    if (v8
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 64), 0), (uint64_t v8 = *v9) != 0))
    {
      int v10 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      int v10 = 0;
    }
    unint64_t v11 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
    uint64_t v15 = (uint64_t *)(v8 + 24 * v14);
    uint64_t v16 = *v15;
    if (*v15)
    {
      uint64_t v17 = 0;
      int v18 = 1;
      while (v16 != v7)
      {
        if (v16 == -1) {
          uint64_t v17 = v15;
        }
        unsigned int v14 = (v14 + v18) & v10;
        uint64_t v15 = (uint64_t *)(v8 + 24 * v14);
        uint64_t v16 = *v15;
        ++v18;
        if (!*v15)
        {
          if (v17)
          {
            uint64_t *v17 = 0;
            *((_DWORD *)v17 + 4) = 0;
            --*(_DWORD *)(*v9 - 16);
            uint64_t v15 = v17;
          }
          goto LABEL_13;
        }
      }
      goto LABEL_22;
    }
LABEL_13:
    uint64_t *v15 = v7;
    uint64_t v19 = v28;
    uint64_t v28 = 0;
    char v29 = v19;
    int v30 = 3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v15 + 1), (uint64_t)&v29);
    if (v30 != -1) {
      ((void (*)(char *, WebCore::Font **))off_1EE9BF2F8[v30])(&v31, &v29);
    }
    uint64_t v20 = *v9;
    if (*v9) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v22 = *v9;
    if (*v9) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_21;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_21:
      ++*(_DWORD *)(a1 + 80);
LABEL_22:
      if (v28) {
        WTF::RefCounted<WebCore::Font>::deref(v28);
      }
      WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)buf);
      if (v6) {
        WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(v6);
      }
      return;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 64), v15);
    goto LABEL_21;
  }
  uint64_t v26 = (WebCore::FontCustomPlatformData *)WebCore::DisplayList::ResourceHeap::get<WebCore::FontCustomPlatformData>(*(void *)(a1 + 64), a4);
  if (v26)
  {
    uint64_t v6 = v26;
    ++*(_DWORD *)v26;
    goto LABEL_3;
  }
  unint64_t v27 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v33 = "void WebKit::RemoteRenderingBackend::cacheFont(const Font::Attributes &, FontPlatformDataAttributes, std::opti"
          "onal<RenderingResourceIdentifier>)";
    _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 362: Invalid message dispatched %{public}s: CacheFont without caching custom data", buf, 0xCu);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
}

void WebKit::RemoteRenderingBackend::cacheFontCustomPlatformData(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v2 + 394) && *(unsigned char *)(v2 + 353)) {
    PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData((PAL *)a1);
  }
  WebCore::FontCustomPlatformData::tryMakeFromSerializationData();
  if (!v21)
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteRenderingBackend::cacheFontCustomPlatformData(WebCore::FontCustomPlatformS"
                           "erializedData &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 378: Invalid message dispatched %{public}s: cacheFontCustomPlatformData couldn't deserialize FontCustomPlatformData", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
    goto LABEL_26;
  }
  CFTypeRef v3 = (uint64_t *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *((void *)v20 + 4);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 64), 0), (uint64_t v4 = *v3) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unsigned int v7 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5) & v6;
  uint64_t v8 = (uint64_t *)(v4 + 24 * v7);
  uint64_t v9 = *v8;
  if (!*v8)
  {
LABEL_16:
    *uint64_t v8 = v5;
    unint64_t v12 = v20;
    uint64_t v20 = 0;
    *(void *)long long buf = v12;
    *(_DWORD *)&uint8_t buf[8] = 4;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v8 + 1), (uint64_t)buf);
    if (*(_DWORD *)&buf[8] != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9BF2F8[*(unsigned int *)&buf[8]])(&v22, buf);
    }
    uint64_t v13 = *v3;
    if (*v3) {
      int v14 = *(_DWORD *)(v13 - 12) + 1;
    }
    else {
      int v14 = 1;
    }
    *(_DWORD *)(v13 - 12) = v14;
    uint64_t v15 = *v3;
    if (*v3) {
      int v16 = *(_DWORD *)(v15 - 12);
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
    unint64_t v18 = *(unsigned int *)(v15 - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17) {
        goto LABEL_25;
      }
    }
    else if (3 * v18 > 4 * v17)
    {
LABEL_25:
      ++*(_DWORD *)(a1 + 84);
      goto LABEL_26;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 64), v8);
    goto LABEL_25;
  }
  int v10 = 0;
  int v11 = 1;
  while (v9 != v5)
  {
    if (v9 == -1) {
      int v10 = v8;
    }
    unsigned int v7 = (v7 + v11) & v6;
    uint64_t v8 = (uint64_t *)(v4 + 24 * v7);
    uint64_t v9 = *v8;
    ++v11;
    if (!*v8)
    {
      if (v10)
      {
        *int v10 = 0;
        *((_DWORD *)v10 + 4) = 0;
        --*(_DWORD *)(*v3 - 16);
        uint64_t v8 = v10;
      }
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v21)
  {
    if (v20) {
      WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(v20);
    }
  }
}

atomic_uchar *WebKit::RemoteRenderingBackend::cacheDecomposedGlyphs(atomic_uchar *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(unsigned char *)(*a2 + 40))
  {
    CFTypeRef v3 = result;
    uint64_t v4 = *(void *)(v2 + 32);
    *a2 = 0;
    uint64_t v7 = v2;
    uint64_t v9 = v4;
    uint64_t result = (atomic_uchar *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>((uint64_t)v8, (uint64_t *)result + 8, &v9, &v7);
    if (v8[16]) {
      ++*((_DWORD *)v3 + 19);
    }
    if (v7)
    {
      int v6 = *(atomic_uchar **)(v7 + 8);
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(v6, v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

atomic_uchar *WebKit::RemoteRenderingBackend::cacheGradient(atomic_uchar *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(unsigned char *)(*a2 + 40))
  {
    CFTypeRef v3 = result;
    uint64_t v4 = *(void *)(v2 + 32);
    *a2 = 0;
    uint64_t v6 = v2;
    uint64_t v8 = v4;
    uint64_t result = (atomic_uchar *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>((uint64_t)v7, (uint64_t *)result + 8, &v8, &v6);
    if (v7[16]) {
      ++*((_DWORD *)v3 + 19);
    }
    if (v6) {
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(*(atomic_uchar **)(v6 + 8), v5);
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteRenderingBackend::cacheFilter(atomic_uchar *result, uint64_t *a2)
{
  if (*(unsigned char *)(*a2 + 40)) {
    return WebCore::DisplayList::ResourceHeap::add(result + 64, a2);
  }
  return result;
}

uint64_t *WebKit::RemoteRenderingBackend::releaseAllDrawingResources(uint64_t *this)
{
  uint64_t v1 = this;
  if (*((_DWORD *)this + 19) || *((_DWORD *)this + 20) || *((_DWORD *)this + 21))
  {
    uint64_t v2 = this[8];
    if (v2)
    {
      int v3 = *(_DWORD *)(v2 - 4);
      if (v3)
      {
        unint64_t v18 = this + 8;
        int v4 = 0;
        unsigned int v5 = v3 - 1;
        do
        {
          uint64_t v6 = v5;
          uint64_t v7 = (void *)(v2 + 24 * v5);
          if ((unint64_t)(*v7 + 1) >= 2)
          {
            uint64_t v8 = v2 + 24 * v5;
            unsigned int v11 = *(_DWORD *)(v8 + 16);
            int v10 = (_DWORD *)(v8 + 16);
            uint64_t v9 = v11;
            if (v11 - 2 <= 2)
            {
              *uint64_t v7 = -1;
              ((void (*)(char *, uint64_t))off_1EE9BF2F8[v9])(&v19, v2 + 24 * v5 + 8);
              *int v10 = -1;
              ++v4;
            }
          }
          --v5;
        }
        while (v6);
        this = v18;
        uint64_t v12 = *v18;
        if (v4)
        {
          *(_DWORD *)(v12 - 16) += v4;
          uint64_t v13 = *v18;
          if (*v18) {
            int v14 = *(_DWORD *)(v13 - 12);
          }
          else {
            int v14 = 0;
          }
          *(_DWORD *)(v13 - 12) = v14 - v4;
          uint64_t v12 = *v18;
        }
        if (v12)
        {
          unsigned int v15 = *(_DWORD *)(v12 - 4);
          unsigned int v16 = 6 * *(_DWORD *)(v12 - 12);
          if (v15 >= 9 && v16 < v15) {
            this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::shrinkToBestSize(v18);
          }
        }
      }
    }
    v1[10] = 0;
    *((_DWORD *)v1 + 19) = 0;
  }
  return this;
}

uint64_t *WebKit::RemoteRenderingBackend::releaseAllImageResources(uint64_t *this)
{
  uint64_t v1 = this + 8;
  uint64_t v2 = this[8];
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      int v4 = this;
      int v5 = 0;
      unsigned int v6 = v3 - 1;
      do
      {
        uint64_t v7 = v6;
        uint64_t v8 = (void *)(v2 + 24 * v6);
        if ((unint64_t)(*v8 + 1) >= 2)
        {
          uint64_t v9 = v2 + 24 * v6;
          int v11 = *(_DWORD *)(v9 + 16);
          int v10 = (_DWORD *)(v9 + 16);
          if (v11 == 2)
          {
            uint64_t v12 = v2 + 24 * v6;
            uint64_t v14 = *(void *)(v12 + 8);
            uint64_t v13 = v12 + 8;
            this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
            if (this)
            {
              --*((_DWORD *)v4 + 19);
              *uint64_t v8 = -1;
              uint64_t v15 = *v10;
              if (v15 != -1) {
                this = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9BF2F8[v15])(&v22, v13);
              }
              *int v10 = -1;
              ++v5;
            }
          }
        }
        --v6;
      }
      while (v7);
      uint64_t v16 = *v1;
      if (v5)
      {
        *(_DWORD *)(v16 - 16) += v5;
        uint64_t v17 = *v1;
        if (*v1) {
          int v18 = *(_DWORD *)(v17 - 12);
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)(v17 - 12) = v18 - v5;
        uint64_t v16 = *v1;
      }
      if (v16)
      {
        unsigned int v19 = *(_DWORD *)(v16 - 4);
        unsigned int v20 = 6 * *(_DWORD *)(v16 - 12);
        if (v19 >= 9 && v20 < v19) {
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::shrinkToBestSize(v1);
        }
      }
    }
  }
  return this;
}

void WebKit::RemoteRenderingBackend::releaseRenderingResource(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 72)
    || ((uint64_t v10 = *v4,
         int v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v4, a2), !v10)? (v12 = 0): (v12 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4))), v12 == v11|| *((_DWORD *)v11 + 4) != 1|| (v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(v4, (uint64_t)v11), --*(_DWORD *)(a1 + 72), (v13 & 1) == 0)))
  {
    int v5 = *(_DWORD *)(a1 + 76);
    if (v5)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v4, a2);
      uint64_t v8 = v6 ? v6 + 24 * *(unsigned int *)(v6 - 4) : 0;
      if ((uint64_t *)v8 != v7 && *((_DWORD *)v7 + 4) == 2)
      {
        if (v6)
        {
          uint64_t v9 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
          if (v9 != v7)
          {
LABEL_9:
            if (v9 != v7)
            {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v4, (uint64_t)v7);
              int v5 = *(_DWORD *)(a1 + 76);
            }
            *(_DWORD *)(a1 + 76) = v5 - 1;
            return;
          }
        }
        else if (v7)
        {
          uint64_t v9 = 0;
          goto LABEL_9;
        }
        *(_DWORD *)(a1 + 76) = v5 - 1;
      }
    }
    if (!*(_DWORD *)(a1 + 80)
      || ((uint64_t v14 = *v4,
           v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v4, a2), !v14)? (v16 = 0): (v16 = (uint64_t *)(v14 + 24 * *(unsigned int *)(v14 - 4))), v16 == v15|| *((_DWORD *)v15 + 4) != 3|| (char v17 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(v4, (uint64_t)v15), --*(_DWORD *)(a1 + 80), (v17 & 1) == 0)))
    {
      if ((WebCore::DisplayList::ResourceHeap::remove<WebCore::FontCustomPlatformData>(v4, a2, (_DWORD *)(a1 + 84)) & 1) == 0)
      {
        int v18 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v19 = 136446210;
          unsigned int v20 = "void WebKit::RemoteRenderingBackend::releaseRenderingResource(RenderingResourceIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 431: Invalid message dispatched %{public}s: Resource is being released before being cached.", (uint8_t *)&v19, 0xCu);
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
      }
    }
  }
}

WTF *WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplaySync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v6 = (WTF *)*(unsigned int *)(a2 + 12);
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v23, v6);
  if (HIDWORD(v24) < v6 && v24 < v6)
  {
    unint64_t v7 = v24 + ((unint64_t)v24 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= (unint64_t)v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = (WTF *)v8;
    }
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v23, v9);
  }
  HIDWORD(v24) = v6;
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 128), *(void *)(*(void *)a2 + v10));
      if (!v12) {
        break;
      }
      char v13 = (unsigned int *)v12;
      atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
      if (v11 >= *(unsigned int *)(a2 + 12))
      {
LABEL_41:
        __break(0xC471u);
        JUMPOUT(0x198AC6638);
      }
      if (v11 >= HIDWORD(v24))
      {
        __break(0xC471u);
        JUMPOUT(0x198AC6640);
      }
      WebKit::RemoteImageBufferSet::ensureBufferForDisplay(v12, (unsigned char *)(*(void *)a2 + v10), (unsigned char *)v23 + v11);
      if (atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
      }
      ++v11;
      v10 += 40;
      if (v11 >= *(unsigned int *)(a2 + 12)) {
        goto LABEL_18;
      }
    }
    unsigned int v20 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_32;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v26 = "void WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplaySync(Vector<ImageBufferSetPrepareBufferFo"
          "rDisplayInputData>, CompletionHandler<void (Vector<SwapBuffersDisplayRequirement> &&)> &&)";
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 467:"
          " Invalid message dispatched %{public}s: BufferSet is being updated before being created";
    goto LABEL_37;
  }
LABEL_18:
  uint64_t v14 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v14 + 16))(v14, &v23);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (!*(_DWORD *)(a2 + 12)) {
    goto LABEL_33;
  }
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  while (1)
  {
    int v18 = (atomic_uint *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 128), *(void *)(*(void *)a2 + v16));
    if (!v18) {
      break;
    }
    int v19 = (unsigned int *)v18;
    atomic_fetch_add(v18 + 2, 1u);
    if (v17 >= HIDWORD(v24))
    {
      __break(0xC471u);
      JUMPOUT(0x198AC6648);
    }
    if (*((unsigned char *)v23 + v17) != 2)
    {
      if (v17 >= *(unsigned int *)(a2 + 12)) {
        goto LABEL_41;
      }
      WebKit::RemoteImageBufferSet::prepareBufferForDisplay((WebKit::RemoteImageBufferSet *)v18, (const WebCore::Region *)(*(void *)a2 + v16 + 8), *(unsigned __int8 *)(*(void *)a2 + v16 + 34));
    }
    if (atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
    }
    ++v17;
    v16 += 40;
    if (v17 >= *(unsigned int *)(a2 + 12)) {
      goto LABEL_33;
    }
  }
  unsigned int v20 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v26 = "void WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplaySync(Vector<ImageBufferSetPrepareBufferFo"
          "rDisplayInputData>, CompletionHandler<void (Vector<SwapBuffersDisplayRequirement> &&)> &&)";
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 479:"
          " Invalid message dispatched %{public}s: BufferSet is being updated before being created";
LABEL_37:
    _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, v21, buf, 0xCu);
  }
LABEL_32:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 56) + 98) = 1;
LABEL_33:
  uint64_t result = v23;
  if (v23)
  {
    int v23 = 0;
    LODWORD(v24) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::createRemoteBarcodeDetector(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  v12[0] = MEMORY[0x199732400](v6, a3);
  uint64_t v7 = a1[17];
  uint64_t v8 = *(void *)(a1[6] + 88);
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteBarcodeDetector::RemoteBarcodeDetector((uint64_t)v9, v12, v7, (uint64_t)a1, a2, v8);
  if (v12[0])
  {
    if (*(_DWORD *)(v12[0] + 8) == 1) {
      (*(void (**)(void))(*(void *)v12[0] + 8))();
    }
    else {
      --*(_DWORD *)(v12[0] + 8);
    }
  }
  uint64_t v10 = a1[17];
  uint64_t v13 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>((uint64_t *)(v10 + 16), &v13, (uint64_t)v9, (uint64_t)v12);
  uint64_t result = IPC::StreamServerConnection::startReceivingMessages(a1[5], (uint64_t)v9, 0x3Cu, a2);
  if (atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9 + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v9 + 8))(v9);
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::releaseRemoteBarcodeDetector(uint64_t a1, uint64_t a2)
{
  IPC::StreamServerConnection::stopReceivingMessages(*(void *)(a1 + 40), 0x3Cu, a2);
  int v4 = *(uint64_t **)(a1 + 136);

  return WebKit::ShapeDetection::ObjectHeap::removeObject(v4, a2);
}

uint64_t WebKit::RemoteRenderingBackend::getRemoteBarcodeDetectorSupportedFormats(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F416DE20](a2);
}

unsigned int *WebKit::RemoteRenderingBackend::createRemoteFaceDetector(uint64_t *a1, uint64_t a2)
{
  WTF::fastMalloc((WTF *)0x10);
  v9[0] = WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl();
  uint64_t v4 = a1[17];
  uint64_t v5 = *(void *)(a1[6] + 88);
  uint64_t v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteFaceDetector::RemoteFaceDetector((uint64_t)v6, v9, v4, (uint64_t)a1, a2, v5);
  if (v9[0])
  {
    if (*(_DWORD *)(v9[0] + 8) == 1) {
      (*(void (**)(void))(*(void *)v9[0] + 8))();
    }
    else {
      --*(_DWORD *)(v9[0] + 8);
    }
  }
  uint64_t v7 = a1[17];
  uint64_t v10 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>((uint64_t *)(v7 + 24), &v10, (uint64_t)v6, (uint64_t)v9);
  uint64_t result = IPC::StreamServerConnection::startReceivingMessages(a1[5], (uint64_t)v6, 0x4Fu, a2);
  if (atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::releaseRemoteFaceDetector(uint64_t a1, uint64_t a2)
{
  IPC::StreamServerConnection::stopReceivingMessages(*(void *)(a1 + 40), 0x4Fu, a2);
  uint64_t v4 = *(uint64_t **)(a1 + 136);

  return WebKit::ShapeDetection::ObjectHeap::removeObject(v4, a2);
}

unsigned int *WebKit::RemoteRenderingBackend::createRemoteTextDetector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (WebCore::ShapeDetection::TextDetectorImpl *)WTF::fastMalloc((WTF *)0x10);
  v10[0] = WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(v4);
  uint64_t v5 = a1[17];
  uint64_t v6 = *(void *)(a1[6] + 88);
  uint64_t v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteTextDetector::RemoteTextDetector((uint64_t)v7, v10, v5, (uint64_t)a1, a2, v6);
  if (v10[0])
  {
    if (*(_DWORD *)(v10[0] + 8) == 1) {
      (*(void (**)(void))(*(void *)v10[0] + 8))();
    }
    else {
      --*(_DWORD *)(v10[0] + 8);
    }
  }
  uint64_t v8 = a1[17];
  uint64_t v11 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>((uint64_t *)(v8 + 32), &v11, (uint64_t)v7, (uint64_t)v10);
  uint64_t result = IPC::StreamServerConnection::startReceivingMessages(a1[5], (uint64_t)v7, 0x7Eu, a2);
  if (atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::releaseRemoteTextDetector(uint64_t a1, uint64_t a2)
{
  IPC::StreamServerConnection::stopReceivingMessages(*(void *)(a1 + 40), 0x7Eu, a2);
  uint64_t v4 = *(uint64_t **)(a1 + 136);

  return WebKit::ShapeDetection::ObjectHeap::removeObject(v4, a2);
}

uint64_t WebKit::RemoteRenderingBackend::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  unint64_t v3 = atomic_load((unint64_t *)(v2 + 64));
  unint64_t v4 = atomic_load(&WebKit::globalAcceleratedImageBufferCount);
  unint64_t v5 = atomic_load(&WebKit::globalImageBufferForCanvasCount);
  unint64_t v6 = atomic_load((unint64_t *)(v2 + 72));
  uint64_t v7 = *a2;
  *a2 = 0;
  v9[0] = v3;
  v9[1] = 5000;
  v9[2] = v4;
  uint64_t v9[3] = 10000;
  v9[4] = v5;
  v9[5] = 200000;
  v9[6] = v6;
  v9[7] = 50000;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

atomic_uchar *WebCore::DisplayList::ResourceHeap::add(atomic_uchar *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(unsigned char *)(*a2 + 40))
  {
    uint64_t v3 = *(void *)(v2 + 32);
    *a2 = 0;
    uint64_t v6 = v2;
    uint64_t result = (atomic_uchar *)WebCore::DisplayList::ResourceHeap::add<WebCore::RenderingResource>((uint64_t *)result, v3, &v6, (_DWORD *)result + 3);
    if (v6)
    {
      unint64_t v5 = *(atomic_uchar **)(v6 + 8);
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(v5, v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *WebKit::RemoteResourceCache::cachedGradient@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  if (!*result) {
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(v4 - 8);
  unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = (uint64_t *)(v4 + 24 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    int v16 = 1;
    while (v11)
    {
      unsigned int v9 = (v9 + v16) & v5;
      uint64_t v10 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v11 = *v10;
      ++v16;
      if (*v10 == a2) {
        goto LABEL_3;
      }
    }
    uint64_t v10 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  }
LABEL_3:
  if (v10 == (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4)) || *((_DWORD *)v10 + 4) != 2) {
    goto LABEL_11;
  }
  uint64_t v12 = (void *)v10[1];
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*v12 + 24))(v10[1]);
  if (!result)
  {
LABEL_11:
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  char v13 = 0;
  uint64_t v14 = v12[1];
  int v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13) {
    uint64_t result = (uint64_t *)MEMORY[0x19972E8D0](v14);
  }
  ++*(void *)(v14 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    uint64_t result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
  }
LABEL_12:
  *a3 = v12;
  return result;
}

void WebKit::ImageBufferShareableAllocator::~ImageBufferShareableAllocator(WebKit::ImageBufferShareableAllocator *this)
{
}

{
  void *v2;
  uint64_t vars8;

  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferShareableAllocator *)((char *)this + 8));

  WTF::fastFree(this, v2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9BF2A0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9BF2B8[v4])(&v5, result, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSG_SK_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5)
  {
    if (v5 != -1) {
      uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9BF2A0[v5])(&v10, v4);
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = *a2;
    *a2 = v6;
    uint64_t v9 = v7;
    return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v9, a2);
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSG_SK_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5 == 1)
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = *a2;
    *a2 = v6;
    uint64_t v9 = v7;
    return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v9, a2);
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9BF2A0[v5])(&v10, v4);
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSG_SK_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == 2)
  {
    *a2 = *a3;
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9BF2A0[v5])(&v6, v4);
    }
    *(_DWORD *)(v4 + 8) = -1;
    *(void *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 2;
  }
  return result;
}

uint64_t std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(unsigned char *)(result + 16))
    {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>>(result, a2);
    }
  }
  else if (*(unsigned char *)(result + 16))
  {
    uint64_t v3 = *(unsigned int *)(result + 8);
    if (v3 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9BF2A0[v3])(&v4, result);
    }
    *(_DWORD *)(v2 + 8) = -1;
    *(unsigned char *)(v2 + 16) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t result = 0;
    *(_DWORD *)(result + 8) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(unsigned char *)(v2 + 16) = 1;
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (!v6)
  {
    if (v7) {
      this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (!v8)
    {
      return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

WTF *WTF::RefCounted<WebCore::FilterImage>::deref(WTF *this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  char v3 = (const void *)*((void *)this + 11);
  *((void *)v2 + 1nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (_DWORD *)*((void *)v2 + 10);
  *((void *)v2 + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  int v5 = (_DWORD *)*((void *)v2 + 9);
  *((void *)v2 + 9) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = *((void *)v2 + 8);
  *((void *)v2 + 8) = 0;
  if (v6)
  {
    char v7 = 0;
    uint64_t v8 = *(void *)(v6 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *(void *)(v8 + 8);
    int v10 = 1;
    uint64_t v11 = v9 - 1;
    *(void *)(v8 + 8) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v15 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      BOOL v13 = v15 != 0;
    }
    else
    {
      uint64_t v12 = 0;
      BOOL v13 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (!v11)
      {
LABEL_20:
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        if (!v13) {
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (!v11) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v14 = (const void *)*((void *)v2 + 7);
  *((void *)v2 + 7) = 0;
  if (v14) {
    CFRelease(v14);
  }

  return (WTF *)WTF::fastFree(v2, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1) {
        uint64_t v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(v4);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1) {
        uint64_t v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(v4);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1) {
        uint64_t v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(v4);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))off_1EE9BF2F8[v5])(&v7, v4);
        }
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(a2, a2);
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(*(atomic_uchar **)(v2 + 8), a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::Font>::deref(result);
  }
  return result;
}

WebCore::FontCustomPlatformData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WebCore::FontCustomPlatformData **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(result);
  }
  return result;
}

WebCore::FontCustomPlatformData *WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(WebCore::FontCustomPlatformData *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::FontCustomPlatformData::~FontCustomPlatformData(result);
    return (WebCore::FontCustomPlatformData *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::add<WebCore::RenderingResource>(uint64_t *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t v7 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>((uint64_t)v6, a1, &v7, a3);
  if (v6[16]) {
    ++*a4;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>(uint64_t result, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (char v29 = a4,
        uint64_t v27 = a3,
        result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), a3 = v27, a4 = v29, (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = *a3 + ~(*a3 << 32);
  unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  unsigned int v13 = v8 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27)));
  uint64_t v14 = (uint64_t *)(v6 + 24 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    int v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          unsigned int v28 = 0;
        }
        else {
          unsigned int v28 = *(_DWORD *)(v6 - 4);
        }
        char v26 = 0;
        uint64_t v25 = v6 + 24 * v28;
        goto LABEL_20;
      }
      if (v15 == -1) {
        int v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 24 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      *((_DWORD *)v16 + 4) = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = *a3;
      uint64_t v14 = v16;
    }
  }
  *uint64_t v14 = v9;
  uint64_t v18 = *a4;
  *a4 = 0;
  uint64_t v30 = v18;
  int v31 = 2;
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v14 + 1), (uint64_t)&v30);
  if (v31 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t *))off_1EE9BF2F8[v31])(&v32, &v30);
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_19;
    }
LABEL_22:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v14);
    uint64_t v14 = (uint64_t *)result;
    uint64_t v21 = *a2;
    if (*a2) {
      LODWORD(v24) = *(_DWORD *)(v21 - 4);
    }
    else {
      LODWORD(v24) = 0;
    }
    goto LABEL_19;
  }
  if (3 * v24 <= 4 * v23) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v25 = v21 + 24 * v24;
  char v26 = 1;
LABEL_20:
  *(void *)uint64_t v5 = v14;
  *(void *)(v5 + 8) = v25;
  *(unsigned char *)(v5 + 16) = v26;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    unint64_t v10 = (_DWORD *)(v7 + 32);
    do
    {
      *((void *)v10 - 2) = 0;
      *unint64_t v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = v5;
    uint64_t v41 = v5;
    do
    {
      uint64_t v14 = (uint64_t *)(v4 + 24 * v11);
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            unint64_t v24 = (uint64_t *)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          unsigned int v25 = v23;
          uint64_t v26 = v16 + 24 * v23;
          unsigned int v29 = *(_DWORD *)(v26 + 16);
          unsigned int v28 = (_DWORD *)(v26 + 16);
          uint64_t v27 = v29;
          if (v29 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9BF2F8[v27])(&v45, v16 + 24 * v23 + 8);
          }
          _DWORD *v28 = -1;
          uint64_t *v24 = *v14;
          uint64_t v30 = v16 + 24 * v25;
          *(unsigned char *)(v30 + 8) = 0;
          uint64_t v31 = v30 + 8;
          uint64_t v32 = v4 + 24 * v11;
          *(_DWORD *)(v31 + 8) = -1;
          uint64_t v33 = *(unsigned int *)(v32 + 16);
          if (v33 != -1)
          {
            uint64_t v34 = v32 + 8;
            ((void (*)(char *, uint64_t, uint64_t))off_1EE9BF320[v33])(&v47, v31, v32 + 8);
            *(_DWORD *)(v31 + 8) = v33;
            uint64_t v35 = *(unsigned int *)(v4 + 24 * v11 + 16);
            if (v35 != -1) {
              ((void (*)(char *, uint64_t))off_1EE9BF2F8[v35])(&v46, v34);
            }
          }
          *(_DWORD *)(v4 + 24 * v11 + 16) = -1;
          if (v14 == a3) {
            unint64_t v12 = v24;
          }
          uint64_t v13 = v41;
        }
      }
      else
      {
        uint64_t v36 = v4 + 24 * v11;
        unsigned int v39 = *(_DWORD *)(v36 + 16);
        BOOL v38 = (_DWORD *)(v36 + 16);
        uint64_t v37 = v39;
        if (v39 != -1) {
          ((void (*)(char *, uint64_t))off_1EE9BF2F8[v37])(&v44, v4 + 24 * v11 + 8);
        }
        _DWORD *v38 = -1;
      }
      ++v11;
    }
    while (v11 != v13);
    goto LABEL_26;
  }
  unint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_26:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1)
  {
    if (v3 != -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v3 != -1)
    {
LABEL_3:
      uint64_t v5 = result;
      return ((uint64_t (*)(uint64_t *))off_1EE9BF348[v3])(&v5);
    }
    uint64_t v4 = result;
    uint64_t result = ((uint64_t (*)(char *))off_1EE9BF2F8[v2])(&v6);
    *(_DWORD *)(v4 + 8) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISU_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS18_EEEDcS10_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2)
  {
    if (v2 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9BF2F8[v2])(&v3, v1);
    }
    *(_DWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISU_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS18_EEEDcS10_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5 == 1)
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = *a2;
    *a2 = v6;
    uint64_t v9 = v7;
    return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v9, a2);
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9BF2F8[v5])(&v10, v4);
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
  }
  return result;
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISU_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS18_EEEDcS10_DpT0_(atomic_uchar **a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>(*a1, a2, a3);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISU_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS18_EEEDcS10_DpT0_(_DWORD **a1, _DWORD **a2, void *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__assign_alt[abi:sn180100]<3ul,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>(*a1, a2, a3);
}

WebCore::FontCustomPlatformData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISU_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS18_EEEDcS10_DpT0_(WebCore::FontCustomPlatformData *result, WebCore::FontCustomPlatformData **a2, WebCore::FontCustomPlatformData **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == 4)
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v6;
    if (result)
    {
      return WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(result);
    }
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = (WebCore::FontCustomPlatformData *)((uint64_t (*)(char *, uint64_t))off_1EE9BF2F8[v5])(&v8, v4);
    }
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v7;
    *(_DWORD *)(v4 + 8) = 4;
  }
  return result;
}

atomic_uchar *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>(atomic_uchar *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *((unsigned int *)result + 2);
  if (v5 == -1) {
    goto LABEL_4;
  }
  if (v5 != 2)
  {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, atomic_uchar *))off_1EE9BF2F8[v5])(&v10, result);
LABEL_4:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *((_DWORD *)v4 + 2) = 2;
    return result;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    uint64_t v9 = *(atomic_uchar **)(v8 + 8);
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(v9, a2);
  }
  return result;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>::__assign_alt[abi:sn180100]<3ul,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>(_DWORD *result, _DWORD **a2, void *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[2];
  if (v5 == -1) {
    goto LABEL_4;
  }
  if (v5 != 3)
  {
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, _DWORD *))off_1EE9BF2F8[v5])(&v8, result);
LABEL_4:
    uint64_t v6 = (_DWORD *)*a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    void v4[2] = 3;
    return result;
  }
  uint64_t v7 = (_DWORD *)*a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v7;
  if (result)
  {
    return WTF::RefCounted<WebCore::Font>::deref(result);
  }
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::get<WebCore::RenderingResource>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = (uint64_t *)(result + 24 * v6);
    uint64_t v8 = *v7;
    if (*v7 != a2)
    {
      int v9 = 1;
      while (v8)
      {
        unsigned int v6 = (v6 + v9) & v2;
        uint64_t v7 = (uint64_t *)(result + 24 * v6);
        uint64_t v8 = *v7;
        ++v9;
        if (*v7 == a2) {
          goto LABEL_3;
        }
      }
      uint64_t v7 = (uint64_t *)(result + 24 * *(unsigned int *)(result - 4));
    }
LABEL_3:
    if (v7 == (uint64_t *)(result + 24 * *(unsigned int *)(result - 4)) || *((_DWORD *)v7 + 4) != 2) {
      return 0;
    }
    else {
      return v7[1];
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = (uint64_t *)(a1 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v10 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v10) & v2;
      uint64_t v7 = (uint64_t *)(a1 + 24 * v6);
      uint64_t v8 = *v7;
      ++v10;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WebCore::DisplayList::ResourceHeap::get<WebCore::Font>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = (uint64_t *)(result + 24 * v6);
    uint64_t v8 = *v7;
    if (*v7 != a2)
    {
      int v9 = 1;
      while (v8)
      {
        unsigned int v6 = (v6 + v9) & v2;
        uint64_t v7 = (uint64_t *)(result + 24 * v6);
        uint64_t v8 = *v7;
        ++v9;
        if (*v7 == a2) {
          goto LABEL_3;
        }
      }
      uint64_t v7 = (uint64_t *)(result + 24 * *(unsigned int *)(result - 4));
    }
LABEL_3:
    if (v7 == (uint64_t *)(result + 24 * *(unsigned int *)(result - 4)) || *((_DWORD *)v7 + 4) != 3) {
      return 0;
    }
    else {
      return v7[1];
    }
  }
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::get<WebCore::FontCustomPlatformData>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::find(a1, a2);
  if (a1) {
    unint64_t v4 = (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  else {
    unint64_t v4 = 0;
  }
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 4) {
    return 0;
  }
  else {
    return v3[1];
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_8;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_6;
  }
LABEL_8:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8, 0);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
  if (v2 == a2) {
    return 0;
  }
LABEL_3:
  if (v2 != a2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  double v7 = (uint64_t *)(a1 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v10 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v10) & v2;
      double v7 = (uint64_t *)(a1 + 24 * v6);
      uint64_t v8 = *v7;
      ++v10;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result;
  *(void *)a2 = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v4 != -1) {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9BF2F8[v4])(&v11, a2 + 8);
  }
  int v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v6 = *v3;
  if (*v3) {
    int v5 = *(_DWORD *)(v6 - 12) - 1;
  }
  *(_DWORD *)(v6 - 12) = v5;
  uint64_t v7 = *v3;
  if (*v3)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9) {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v9 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::remove<WebCore::FontCustomPlatformData>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if (!*a3) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a1, a2);
  uint64_t v7 = v5 ? v5 + 24 * *(unsigned int *)(v5 - 4) : 0;
  if ((uint64_t *)v7 == v6 || *((_DWORD *)v6 + 4) != 4) {
    return 0;
  }
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(a1, (uint64_t)v6);
  --*a3;
  return result;
}

uint64_t *WebCore::ImageBuffer::populateBackendInfo<WebKit::ImageBufferShareableBitmapBackend>@<X0>(IntSize *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  WebCore::ImageBufferBackend::calculateBaseTransform();
  uint64_t result = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(a1, v4, v5);
  *(void *)(a2 + 56) = result;
  return result;
}

void WebCore::ImageBuffer::create<WebCore::ImageBuffer>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  uint64_t v5 = *(const void **)(a1 + 16);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebCore::ImageBuffer::ImageBuffer();
  *a2 = v4;
  if (cf) {
    CFRelease(cf);
  }
}

atomic_uchar *volatile *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref(atomic_uchar *volatile *result, void *a2)
{
  char v2 = 0;
  atomic_uchar *volatile v3 = *result;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x19972E8D0](v3);
  }
  uint64_t v4 = *((void *)v3 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v3 + 2);
    uint64_t v7 = *((void *)v3 + 3);
    *((void *)v3 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    uint64_t result = (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (!v6)
  {
    if (v7) {
      uint64_t result = (atomic_uchar *volatile *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (!v8)
    {
      return (atomic_uchar *volatile *)WTF::fastFree((WTF *)v3, a2);
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    IPC::StreamConnectionWorkQueue::~StreamConnectionWorkQueue((IPC::StreamConnectionWorkQueue *)(result - 2), a2);
    return (unsigned int *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer(std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatRect const&,WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>)::$_0,std::unique_ptr<WebCore::FilterResults>>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer(std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatRect const&,WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>)::$_0::operator()(a2, *(void *)(*(void *)(a1 + 8) + 48));
}

uint64_t WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer(std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatRect const&,WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  atomic_uchar *volatile v3 = (const WTF::MachSendRight *)(a2 + 48);
  uint64_t v4 = (WebCore::ImageBufferAllocator *)WTF::fastMalloc((WTF *)0x10);
  BOOL v8 = WebKit::ImageBufferShareableAllocator::ImageBufferShareableAllocator(v4, v3);
  uint64_t result = std::make_unique[abi:sn180100]<WebCore::FilterResults,std::unique_ptr<WebKit::ImageBufferShareableAllocator>>(a1, (uint64_t *)&v8);
  uint64_t v6 = v8;
  if (v8)
  {
    WTF::MachSendRight::~MachSendRight((WebCore::ImageBufferAllocator *)((char *)v8 + 8));
    return WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::FilterResults,std::unique_ptr<WebKit::ImageBufferShareableAllocator>>(uint64_t *a1, uint64_t *a2)
{
  WTF::fastMalloc((WTF *)0x18);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v6 = v4;
  *a1 = WebCore::FilterResults::FilterResults();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::$_0 &&>>()
{
  return IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue((uint64_t)&unk_1EB359228, (uint64_t)"RemoteGraphicsContextGL work queue", 35);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::initialize(WebCore::GraphicsContextGLAttributes &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BF3A8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v2 + 16));
    (*(void (**)(void))(*(void *)(v2 + 8) + 8))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::initialize(WebCore::GraphicsContextGLAttributes &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BF3A8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v3 + 16));
    (*(void (**)(void))(*(void *)(v3 + 8) + 8))();
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::initialize(WebCore::GraphicsContextGLAttributes &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 40))(v1, a1 + 8);
  IPC::StreamServerConnection::open(*(IPC::StreamServerConnection **)(v1 + 48), *(atomic_uint **)(v1 + 40));
  uint64_t v2 = *(void *)(v1 + 56);
  if (!v2)
  {
    unint64_t v20 = 0;
    int v10 = (task_t *)MEMORY[0x1E4F14960];
    semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)&v20 + 1, 0, 0);
    unint64_t v19 = 0;
    semaphore_create(*v10, (semaphore_t *)&v19 + 1, 0, 0);
    LOBYTE(v14[0]) = 0;
    char v15 = 0;
    uint64_t v16 = (_DWORD **)&v20;
    int v17 = &v19;
    unint64_t v18 = v14;
    IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasCreated>(*(void *)(*(void *)(v1 + 48) + 40), (uint64_t)&v16, *(void *)(v1 + 64));
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v11);
    IPC::Semaphore::destroy((IPC::Semaphore *)&v19);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v19);
    IPC::Semaphore::destroy((IPC::Semaphore *)&v20);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v20);
    return;
  }
  *(void *)(v2 + 24) = v1;
  WebCore::GraphicsContextGLANGLE::getString(*(WebCore::GraphicsContextGLANGLE **)(v1 + 56));
  WebCore::GraphicsContextGLANGLE::getString(*(WebCore::GraphicsContextGLANGLE **)(v1 + 56));
  uint64_t v3 = WebCore::GraphicsContextGLCocoa::externalImageTextureBindingPoint(*(WebCore::GraphicsContextGLCocoa **)(v1 + 56));
  uint64_t v4 = v20;
  if (v20) {
    *(_DWORD *)v20 += 2;
  }
  int v5 = v19;
  if (v19) {
    *(_DWORD *)v19 += 2;
  }
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 40) + 32;
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  v14[0] = v4;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  v14[1] = v5;
  uint64_t v14[2] = v3;
  char v15 = 1;
  uint64_t v16 = (_DWORD **)v7;
  int v17 = (WTF::StringImpl **)(v6 + 160);
  unint64_t v18 = v14;
  IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasCreated>(*(void *)(v6 + 40), (uint64_t)&v16, *(void *)(v1 + 64));
  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v8);
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(v1 + 48), v1 + 8, 0x52u, *(void *)(v1 + 64));
  if (!v5)
  {
LABEL_13:
    if (!v4) {
      goto LABEL_20;
    }
LABEL_17:
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v9);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v5, v9);
  if (v4) {
    goto LABEL_17;
  }
LABEL_20:
  unint64_t v12 = v19;
  unint64_t v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v20;
  unint64_t v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::stopListeningForIPC(WTF::Ref<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BF3D0;
  a1[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v2 + 16));
    (*(void (**)(void))(*(void *)(v2 + 8) + 8))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::stopListeningForIPC(WTF::Ref<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BF3D0;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v3 + 16));
    (*(void (**)(void))(*(void *)(v3 + 8) + 8))();
  }

  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::stopListeningForIPC(WTF::Ref<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    *(void *)(v2 + 24) = 0;
    uint64_t v3 = *(_DWORD **)(v1 + 56);
    *(void *)(v1 + 56) = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
      }
      else {
        --v3[2];
      }
    }
    IPC::StreamServerConnection::stopReceivingMessages(*(void *)(v1 + 48), 0x52u, *(void *)(v1 + 64));
  }
  IPC::StreamServerConnection::invalidate(*(IPC::StreamServerConnection **)(v1 + 48));
  uint64_t result = *(WTF::RunLoop **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    uint64_t result = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(v1 + 176))
  {
    atomic_fetch_add(&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
    if (!atomic_load((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests)) {
      uint64_t result = WebKit::ScopedWebGLRenderingResourcesRequest::scheduleFreeWebGLRenderingResources(result);
    }
  }
  *(unsigned char *)(v1 + 176) = 0;
  if (*(unsigned char *)(v1 + 177)) {
    atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
  }
  *(unsigned char *)(v1 + 177) = 0;
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasCreated>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 901;
  *((void *)v6 + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v19 = v6;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v6, *(IPC::Semaphore **)a2);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v6, *(IPC::Semaphore **)(a2 + 8));
  uint64_t v7 = *(void *)(a2 + 16);
  LODWORD(a2) = *(unsigned __int8 *)(v7 + 24);
  BOOL v8 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (a2)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC8DE0);
    }
    *BOOL v8 = 1;
    if (!*(unsigned char *)(v7 + 24))
    {
      uint64_t v14 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(v14, v15, v16, v17, v18);
    }
    IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::encode(v6, v7);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198AC8E00);
    }
    *BOOL v8 = 0;
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v19, 0, 0);
  uint64_t result = v19;
  unint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 902;
  *((void *)v9 + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v16 = v9;
  uint64_t v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  unint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::drawSurfaceBufferToImageBuffer(WebCore::GraphicsContextGLSurfaceBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v11 = **(void **)(a1 + 16);
  __int16 v10 = 0;
  char v9 = 0;
  uint64_t v4 = *(void *)(v3 + 72);
  int v5 = (void *)WTF::fastMalloc((WTF *)0x38);
  *int v5 = &unk_1EE9BF420;
  v5[1] = v3;
  _OWORD v5[2] = &v11;
  unint64_t v5[3] = a2;
  v5[4] = (char *)&v10 + 1;
  void v5[5] = &v9;
  long long v5[6] = &v10;
  uint64_t v12 = (uint64_t)v5;
  IPC::StreamConnectionWorkQueue::dispatch(*(void *)(v4 + 32), &v12);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  char v7 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&v10 + 1, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    uint64_t result = MEMORY[0x19972E8D0]((char *)&v10 + 1);
  }
  for (;
        !v9;
        uint64_t result = WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v10, (atomic_uchar *)&v10 + 1, (WTF::TimeWithDynamicClockType *)&v12))
  {
    uint64_t v12 = 0x7FF0000000000000;
    int v13 = 0;
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&v10 + 1, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v10 + 1));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::paintNativeImageToImageBuffer(WebCore::NativeImage &,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  WebKit::RemoteRenderingBackend::imageBuffer(*(void *)(*(void *)(a1 + 8) + 72), **(void **)(a1 + 16), &v16);
  uint64_t v2 = v16;
  if (v16)
  {
    WebCore::ImageBuffer::backendSize(v16);
    (*(void (**)(WebCore::ImageBuffer *))(*(void *)v2 + 16))(v2);
    WebCore::GraphicsContextGL::paintToCanvas();
    (*(void (**)(WebCore::ImageBuffer *))(*(void *)v2 + 24))(v2);
    char v4 = 0;
    uint64_t v16 = 0;
    uint64_t v5 = *((void *)v2 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    int v7 = 1;
    uint64_t v8 = v6 - 1;
    *(void *)(v5 + 8) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v15 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      BOOL v10 = v15 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      if (v8) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v8) {
        goto LABEL_12;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (!v10) {
      WTF::fastFree((WTF *)v5, v3);
    }
  }
LABEL_12:
  char v11 = 0;
  uint64_t v12 = *(atomic_uchar **)(a1 + 32);
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0](v12);
  }
  **(unsigned char **)(a1 + 40) = 1;
  uint64_t result = WTF::Condition::notifyOne(*(WTF::Condition **)(a1 + 48));
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::simulateEventForTesting(WebCore::GraphicsContextGLSimulatedEventForTesting)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9BF448;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::simulateEventForTesting(WebCore::GraphicsContextGLSimulatedEventForTesting)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BF448;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::simulateEventForTesting(WebCore::GraphicsContextGLSimulatedEventForTesting)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (atomic_uchar *)a1[1];
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, a1[2], &v4);
    if (v4)
    {
      WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL(v4, a1[3]);
      uint64_t v3 = v4;
      uint64_t v4 = 0;
      if (v3) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
      }
    }
  }
}

uint64_t WTF::VectorBuffer<WebCore::IntRect,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2 < 2)
  {
    *(void *)uint64_t result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    return 1;
  }
  int v3 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect&>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(WTF **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    uint64_t v6 = (_OWORD *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (!(a2 >> 28))
  {
    uint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (!v5) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v7 = 16 * v5;
    unint64_t v8 = v4;
    do
    {
      long long v9 = *(_OWORD *)v8;
      unint64_t v8 = (WTF *)((char *)v8 + 16);
      *v6++ = v9;
      v7 -= 16;
    }
    while (v7);
LABEL_9:
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(WTF **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 6)
  {
    uint64_t v6 = (_OWORD *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 5;
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (!(a2 >> 28))
  {
    uint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (!v5) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v7 = 16 * v5;
    unint64_t v8 = v4;
    do
    {
      long long v9 = *(_OWORD *)v8;
      unint64_t v8 = (WTF *)((char *)v8 + 16);
      *v6++ = v9;
      v7 -= 16;
    }
    while (v7);
LABEL_9:
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WebKit::ShapeDetection::ObjectHeap *WTF::RefCounted<WebKit::ShapeDetection::ObjectHeap>::deref(WebKit::ShapeDetection::ObjectHeap *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::ShapeDetection::ObjectHeap::~ObjectHeap(result);
    return (WebKit::ShapeDetection::ObjectHeap *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackend::stopListeningForIPC(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebKit::RemoteRenderingBackend::workQueueUninitialize(*(WebKit::RemoteRenderingBackend **)(a1 + 8), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (unsigned int **)(v6 + 16 * v13);
      char v17 = *v16;
      if (*v16)
      {
        if (v17 != (unsigned int *)-1)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = ((unint64_t)v17 + ~((void)v17 << 32)) ^ (((unint64_t)v17 + ~((void)v17 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v27 + 8));
          *(void *)uint64_t v27 = *v16;
          uint64_t v28 = v6 + 16 * v13;
          uint64_t v29 = *(void *)(v28 + 8);
          v28 += 8;
          *(void *)(v27 + 8) = v29;
          *(void *)uint64_t v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v28);
          if (v16 == (unsigned int **)a3) {
            uint64_t v14 = v27;
          }
        }
      }
      else
      {
        IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(v16 + 1);
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unsigned int **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::take(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  if (*a2) {
    v5 += 16 * *(unsigned int *)(v5 - 4);
  }
  if ((void *)v5 == a3)
  {
    *a1 = 0;
    uint64_t v14 = 0;
    return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v14);
  }
  uint64_t result = (unsigned int **)(a3 + 1);
  *a1 = a3[1];
  a3[1] = 0;
  if (*a2)
  {
    uint64_t v7 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    if ((void *)v7 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if ((void *)v7 != a3)
  {
    *a3 = -1;
    uint64_t result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(result);
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v8 = *a2;
    int v9 = *a2 ? *(_DWORD *)(v8 - 12) - 1 : -1;
    *(_DWORD *)(v8 - 12) = v9;
    uint64_t v10 = *a2;
    if (*a2)
    {
      unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
      unsigned int v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
      {
        return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a2, v12 >> 1, 0);
      }
    }
  }
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(a1);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
LABEL_9:
    unsigned int v11 = 0;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v11);
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    int v10 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v10) & v3;
      uint64_t v8 = *(void *)(v2 + 16 * v7);
      ++v10;
      if (v8 == *a2) {
        return *(void *)(v2 + 16 * v7 + 8);
      }
    }
    goto LABEL_9;
  }
  return *(void *)(v2 + 16 * v7 + 8);
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(unsigned int **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 2);
  *((void *)*a1 + 2) = 0;
  if (v3)
  {
    uint64_t v4 = *((void *)v2 + 3);
    int v5 = *(unsigned __int8 *)(v4 + 41);
    int v6 = *(unsigned __int8 *)(v4 + 48);
    if (v5 == 1)
    {
      uint64_t v7 = *(void *)(v3 + 56);
      if (v6) {
        atomic_fetch_add((atomic_ullong *volatile)(v7 + 64), 0xFFFFFFFFFFFFFFFFLL);
      }
      atomic_fetch_add((atomic_ullong *volatile)&WebKit::globalImageBufferForCanvasCount, 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add((atomic_ullong *volatile)(v7 + 72), 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v6) {
      atomic_fetch_add((atomic_ullong *volatile)&WebKit::globalAcceleratedImageBufferCount, 0xFFFFFFFFFFFFFFFFLL);
    }
    IPC::StreamServerConnection::stopReceivingMessages(*(void *)(v3 + 40), 0x54u, *(void *)(*((void *)v2 + 3) + 120));
    if (atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v3 + 16));
      (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v3 + 8);
    }
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    int v9 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v9();
  }
  return result;
}

void sub_198AC9ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if ((v10 & 1) == 0) {
    CFRelease(MEMORY[8]);
  }
  _Unwind_Resume(exception_object);
}

void sub_198AC9FA0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198ACA35C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::RunLoop *WebKit::ScopedWebGLRenderingResourcesRequest::scheduleFreeWebGLRenderingResources(WTF::RunLoop *this)
{
  if ((WebKit::didScheduleFreeWebGLRenderingResources & 1) == 0)
  {
    WTF::RunLoop::main(this);
    uint64_t v1 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v1 = &unk_1EE9BF650;
    *((void *)v1 + nw_tcp_options_set_no_delay(options, 1) = WebKit::ScopedWebGLRenderingResourcesRequest::freeWebGLRenderingResources;
    uint64_t v2 = v1;
    WTF::RunLoop::dispatchAfter();
    if (v3) {
      WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref((unsigned int *)(v3 + 24));
    }
    this = v2;
    if (v2) {
      this = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v2 + 8))(v2);
    }
    WebKit::didScheduleFreeWebGLRenderingResources = 1;
  }
  return this;
}

WebKit *WebKit::ScopedWebGLRenderingResourcesRequest::freeWebGLRenderingResources(WebKit *this)
{
  WebKit::didScheduleFreeWebGLRenderingResources = 0;
  if (!atomic_load((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests))
  {
    uint64_t v2 = WebKit::remoteGraphicsContextGLStreamWorkQueue(this);
    uint64_t v3 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v3 = &unk_1EE9BF678;
    uint64_t v4 = v3;
    IPC::StreamConnectionWorkQueue::dispatch((uint64_t)v2, (uint64_t *)&v4);
    this = v4;
    uint64_t v4 = 0;
    if (this) {
      return (WebKit *)(*(uint64_t (**)(WebKit *))(*(void *)this + 8))(this);
    }
  }
  return this;
}

unsigned int *WebKit::ShareablePixelBuffer::tryCreate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (unsigned int *)WebCore::PixelBuffer::computeBufferSize();
  if (v10
    || (uint64_t result = (unsigned int *)WebCore::SharedMemory::allocate((WebCore::SharedMemory *)v11), !v9))
  {
    *a3 = 0;
  }
  else
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x40);
    uint64_t v8 = v9;
    int v9 = 0;
    *a3 = WebKit::ShareablePixelBuffer::ShareablePixelBuffer(v7, a1, a2, (uint64_t *)&v8);
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
    }
    uint64_t result = v9;
    int v9 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

uint64_t WebKit::ShareablePixelBuffer::ShareablePixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = WebCore::PixelBuffer::PixelBuffer();
  *(void *)uint64_t result = &unk_1EE9BF4C0;
  uint64_t v6 = *a4;
  *a4 = 0;
  *(void *)(result + 56) = v6;
  int v7 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 36);
  if (v7 < 0) {
    int v7 = -v7;
  }
  if (v8 < 0) {
    int v8 = -v8;
  }
  unint64_t v9 = v7 * (unint64_t)v8;
  if ((v9 & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198ACB65CLL);
  }
  if (v9 >> 30 || *(void *)(result + 48) < (unint64_t)(4 * v9))
  {
    __break(0xC471u);
    JUMPOUT(0x198ACB654);
  }
  return result;
}

unsigned int *WebKit::ShareablePixelBuffer::createScratchPixelBuffer@<X0>(WebKit::ShareablePixelBuffer *this@<X0>, const WebCore::IntSize *a2@<X1>, uint64_t *a3@<X8>)
{
  return WebKit::ShareablePixelBuffer::tryCreate((uint64_t)this + 16, (uint64_t)a2, a3);
}

unsigned int *WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t *a11)
{
  int v27 = a3;
  WebKit::SharedVideoFrameReader::read(a1 + 96, a2, &v26);
  if (v26)
  {
    WebCore::VideoFrame::asVideoFrameCV((uint64_t *)&v25, v26);
    if (v25 && (uint64_t v16 = WebCore::GraphicsContextGLCocoa::asCV(*(WebCore::GraphicsContextGLCocoa **)(a1 + 56))) != 0)
    {
      uint64_t v17 = v16;
      uint64_t v18 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(a1 + 232), &v27);
      int v27 = v18;
      uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v17 + 16))(v17, v25, v18, a5, a6, a7, a8, a10);
      uint64_t v20 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v19);
    }
    else
    {
      uint64_t v20 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v20 + 16))(v20, 0);
    }
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    unint64_t v21 = v25;
    unsigned int v25 = 0;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
    }
    uint64_t result = (unsigned int *)v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    uint64_t v23 = *a11;
    *a11 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v23 + 16))(v23, 0);
    int v24 = *(uint64_t (**)(uint64_t))(*(void *)v23 + 8);
    return (unsigned int *)v24(v23);
  }
  return result;
}

IPC::Semaphore *WebKit::RemoteGraphicsContextGL::setSharedVideoFrameSemaphore(uint64_t a1, IPC::Semaphore *a2)
{
  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(a1 + 112), a2);
}

BOOL WebKit::RemoteGraphicsContextGL::setSharedVideoFrameMemory(uint64_t a1)
{
  return WebKit::SharedVideoFrameReader::setSharedMemory(a1 + 96);
}

uint64_t WebKit::RemoteGraphicsContextGL::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = WTF::fastMalloc((WTF *)0xF0);
  uint64_t v13 = (void *)WebKit::RemoteGraphicsContextGL::RemoteGraphicsContextGL(v12, a1, a3, a4, a5);
  void *v13 = &unk_1EE9BF5B8;
  v13[1] = &unk_1EE9BF600;
  uint64_t result = WebKit::RemoteGraphicsContextGL::initialize((uint64_t)v13, a2);
  *a6 = v12;
  return result;
}

uint64_t WebKit::RemoteAdapter::RemoteAdapter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF4F0;
  ++*(_DWORD *)(a4 + 8);
  *(void *)(a1 + 16) = a4;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 24) = v13;
  uint64_t v14 = *a6;
  *a6 = 0;
  *(void *)(a1 + 32) = v14;
  uint64_t v15 = *(atomic_uchar **)(a2 + 16);
  if (v15) {
    uint64_t v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
  }
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v16 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v16, 1u);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = a7;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x35u, a7);
  return a1;
}

void WebKit::RemoteAdapter::~RemoteAdapter(WebKit::RemoteAdapter *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  int v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  int v7 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAdapter::~RemoteAdapter(this, a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteAdapter::requestDevice(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)&v37);
  if (v41)
  {
    uint64_t v9 = a1[2];
    uint64_t v10 = *a5;
    *a5 = 0;
    uint64_t v11 = *(void *)(a1[3] + 8);
    ++*(_DWORD *)(v11 + 8);
    *(void *)&v30[0] = v10;
    *((void *)&v30[0] + nw_tcp_options_set_no_delay(options, 1) = v11;
    uint64_t v12 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
    *(void *)&v30[1] = v12;
    *((void *)&v30[1] + nw_tcp_options_set_no_delay(options, 1) = a3;
    *(void *)&uint64_t v30[2] = a4;
    uint64_t v13 = (atomic_uchar *)a1[5];
    if (v13) {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v13, a1[6], (void *)&v30[2] + 1);
    }
    else {
      *((void *)&v30[2] + nw_tcp_options_set_no_delay(options, 1) = 0;
    }
    uint64_t v14 = *(void *)(a1[7] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
    *(void *)&v30[3] = v14;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v15 = &unk_1EE9BF6A0;
    *(void *)(v15 + 8) = *(void *)&v30[0];
    uint64_t v16 = *((void *)&v30[0] + 1);
    v30[0] = 0u;
    *(void *)(v15 + 16) = v16;
    uint64_t v17 = *(void *)&v30[1];
    *(void *)&v30[1] = 0;
    *(void *)(v15 + 24) = v17;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)((char *)&v30[1] + 8);
    *(void *)(v15 + 48) = *((void *)&v30[2] + 1);
    uint64_t v18 = *(void *)&v30[3];
    *(_OWORD *)((char *)&v30[2] + 8) = 0u;
    *(void *)(v15 + 56) = v18;
    v36[0] = v15;
    (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)v9 + 24))(v9, &v37, v36);
    uint64_t v20 = v36[0];
    v36[0] = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    unint64_t v21 = *(unsigned int **)&v30[3];
    *(void *)&v30[3] = 0;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *((void *)&v30[2] + 1);
    *((void *)&v30[2] + nw_tcp_options_set_no_delay(options, 1) = 0;
    if (v22) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v22 + 16));
    }
    uint64_t v23 = *(unsigned int **)&v30[1];
    *(void *)&v30[1] = 0;
    if (v23 && atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = *((void *)&v30[0] + 1);
    *((void *)&v30[0] + nw_tcp_options_set_no_delay(options, 1) = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v24 + 8), v19);
    }
    uint64_t result = *(WTF::StringImpl **)&v30[0];
    *(void *)&v30[0] = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    v36[0] = 0;
    v36[1] = 0;
    int v31 = 0;
    memset(v30, 0, sizeof(v30));
    uint64_t v35 = 0;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    uint64_t v26 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void *, _OWORD *))(*(void *)v26 + 16))(v26, v36, v30);
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v27);
  }
  if (v41)
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v19);
    uint64_t v29 = v38;
    if (v38)
    {
      BOOL v38 = 0;
      int v39 = 0;
      WTF::fastFree(v29, v28);
    }
    uint64_t result = v37;
    uint64_t v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteBindGroup::RemoteBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF518;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x3Du, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteBindGroup::~RemoteBindGroup(WebKit::RemoteBindGroup *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteBindGroup::updateExternalTextures(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v4 = (_DWORD *)(v3 + 8);
  ++*(_DWORD *)(v3 + 8);
  WebKit::WebGPU::ObjectHeap::convertExternalTextureFromBacking(v3, a2, (atomic_uchar **)&v14);
  uint64_t result = (atomic_uchar *)WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v4, v5);
  int v7 = v14;
  if (v14)
  {
    uint64_t v8 = v15;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v14, v15, &v13);
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    if (v10)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 8), v9);
      uint64_t v11 = *(_DWORD **)(a1 + 16);
      ++v11[2];
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v7, v8, &v13);
      (*(void (**)(_DWORD *, uint64_t))(*(void *)v11 + 16))(v11, v13);
      uint64_t v12 = v13;
      uint64_t v13 = 0;
      if (v12) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 8), v9);
      }
      if (v11[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      }
      else {
        --v11[2];
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v7, v9);
  }
  return result;
}

void *WebKit::RemoteBindGroup::stopListeningForIPC(WebKit::RemoteBindGroup *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x3Du, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteBindGroup::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 24))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF540;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x3Eu, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteBindGroupLayout::~RemoteBindGroupLayout(WebKit::RemoteBindGroupLayout *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteBindGroupLayout::~RemoteBindGroupLayout(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteBindGroupLayout::stopListeningForIPC(WebKit::RemoteBindGroupLayout *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x3Eu, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteBindGroupLayout::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 16))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteBuffer::RemoteBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF568;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v13 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 24) = v13;
  uint64_t v14 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v14;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v15 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v15, 1u);
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = a7;
  *(unsigned char *)(a1 + 56) = a6;
  if (a6) {
    char v16 = 2;
  }
  else {
    char v16 = 0;
  }
  *(unsigned char *)(a1 + 57) = v16;
  uint64_t v17 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v17 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v17, a1, 0x3Fu, *(void *)(a1 + 48));
  if (v17 && atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v17 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v17 + 8))(v17);
  }
  return a1;
}

void WebKit::RemoteBuffer::~RemoteBuffer(WebKit::RemoteBuffer *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteBuffer::~RemoteBuffer(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteBuffer::stopListeningForIPC(WebKit::RemoteBuffer *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x3Fu, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteBuffer::mapAsync(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *(unsigned char *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 57) = a2;
  uint64_t v11 = *(_DWORD **)(a1 + 16);
  ++v11[2];
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v12 = *a6;
  *a6 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v13 = &unk_1EE9BF6C8;
  v13[1] = a1;
  v13[2] = v12;
  uint64_t v15 = v13;
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t, uint64_t, void **))(*(void *)v11 + 16))(v11, a2, a3, a4, a5, &v15);
  uint64_t result = (uint64_t)v15;
  uint64_t v15 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v11[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
  }
  --v11[2];
  return result;
}

uint64_t WebKit::RemoteBuffer::getMappedRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(_DWORD **)(a1 + 16);
  ++v10[2];
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9BF6F0;
  v11[1] = a1;
  _OWORD v11[2] = a5;
  uint64_t v13 = v11;
  (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t, void **))(*(void *)v10 + 24))(v10, a2, a3, a4, &v13);
  uint64_t result = (uint64_t)v13;
  uint64_t v13 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v10[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  --v10[2];
  return result;
}

uint64_t WebKit::RemoteBuffer::unmap(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 56))
  {
    uint64_t v2 = *(_DWORD **)(this + 16);
    ++v2[2];
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 32))(v2);
    if (v2[2] == 1) {
      this = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  *(_WORD *)(v1 + 56) = 0;
  return this;
}

uint64_t WebKit::RemoteBuffer::copy(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a2 + 16))
  {
    WebCore::SharedMemory::map();
    if (v15)
    {
      size_t v7 = *(void *)(v15 + 8);
      uint64_t v8 = *(const void **)(v15 + 16);
    }
    else
    {
      size_t v7 = 0;
      uint64_t v8 = 0;
    }
  }
  else
  {
    size_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v15 = 0;
  }
  if (!*(unsigned char *)(a1 + 56) || (*(unsigned char *)(a1 + 57) & 2) == 0) {
    goto LABEL_17;
  }
  uint64_t v9 = *(_DWORD **)(a1 + 16);
  ++v9[2];
  uint64_t v11 = (*(uint64_t (**)(_DWORD *))(*(void *)v9 + 48))(v9);
  size_t v12 = v10;
  if (v9[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    if (!v12) {
      goto LABEL_17;
    }
  }
  else
  {
    --v9[2];
    if (!v10) {
      goto LABEL_17;
    }
  }
  if (!__CFADD__(a3, v7) && a3 + v7 <= v12)
  {
    if (v12 < a3)
    {
      __break(1u);
    }
    else if (v12 - a3 >= v7)
    {
      memcpy((void *)(v11 + a3), v8, v7);
      uint64_t v13 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 1);
      goto LABEL_18;
    }
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
LABEL_17:
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
LABEL_18:
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  uint64_t result = v15;
  if (v15) {
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v15);
  }
  return result;
}

uint64_t WebKit::RemoteBuffer::destroy(WebKit::RemoteBuffer *this)
{
  WebKit::RemoteBuffer::unmap((uint64_t)this);
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  ++v2[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 40))(v2);
  if (v2[2] == 1)
  {
    uint64_t v4 = *(uint64_t (**)(_DWORD *))(*(void *)v2 + 8);
    return v4(v2);
  }
  else
  {
    --v2[2];
  }
  return result;
}

uint64_t WebKit::RemoteBuffer::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 64))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteCommandBuffer::RemoteCommandBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF590;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x47u, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteCommandBuffer::~RemoteCommandBuffer(WebKit::RemoteCommandBuffer *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCommandBuffer::~RemoteCommandBuffer(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteCommandBuffer::stopListeningForIPC(WebKit::RemoteCommandBuffer *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x47u, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteCommandBuffer::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 16))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

void WebKit::ShareablePixelBuffer::~ShareablePixelBuffer(WebKit::ShareablePixelBuffer *this)
{
  *(void *)this = &unk_1EE9BF4C0;
  uint64_t v2 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }

  WebCore::PixelBuffer::~PixelBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BF4C0;
  uint64_t v2 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  WebCore::PixelBuffer::~PixelBuffer(this);

  WTF::fastFree(v3, v4);
}

uint64_t WebCore::PixelBuffer::isByteArrayPixelBuffer(WebCore::PixelBuffer *this)
{
  return 0;
}

void WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::~RemoteGraphicsContextGLCocoa(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLCocoa *this, void *a2)
{
  WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::platformWorkQueueInitialize(uint64_t a1)
{
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v5, (const WTF::MachSendRight *)(*(void *)(a1 + 80) + 48));
  WebCore::GraphicsContextGLCocoa::create();
  uint64_t v2 = v6;
  uint64_t v6 = 0;
  uint64_t v3 = *(_DWORD **)(a1 + 56);
  *(void *)(a1 + 56) = v2;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
      uint64_t v4 = v6;
      uint64_t v6 = 0;
      if (v4)
      {
        if (v4[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
        }
        else {
          --v4[2];
        }
      }
    }
    else
    {
      --v3[2];
      uint64_t v6 = 0;
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::MachSendRight::MachSendRight();
  int v6 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  int v12 = v6;
  size_t v7 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
  *(void *)size_t v7 = &unk_1EE9BF628;
  WTF::MachSendRight::MachSendRight();
  int v8 = v12;
  int v12 = 0;
  v7[3] = v8;
  WebCore::GraphicsContextGLCocoa::prepareForDisplayWithFinishedSignal();
  uint64_t v13 = 0;
  if (v7) {
    (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  IPC::Semaphore::destroy((IPC::Semaphore *)((char *)&v11 + 4));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v11 + 4));
  HIDWORD(v1nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t v9 = (WebCore::IOSurface *)WebCore::GraphicsContextGLCocoa::displayBufferSurface(*(WebCore::GraphicsContextGLCocoa **)(a1 + 56));
  if (v9)
  {
    WebCore::IOSurface::createSendRight(&v11, v9);
    WTF::MachSendRight::operator=();
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v11);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v10 + 16))(v10, (char *)&v11 + 4);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v11 + 4));
}

void non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::~RemoteGraphicsContextGLCocoa(uint64_t a1, void *a2)
{
}

uint64_t non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::~RemoteGraphicsContextGLCocoa(uint64_t a1, void *a2)
{
  WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL((WebKit::RemoteGraphicsContextGL *)(a1 - 8), a2);

  return WTF::fastFree(v2, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(IPC::Semaphore &&,WTF::CompletionHandler<void ()(WTF::MachSendRight &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BF628;
  uint64_t v2 = (WTF::MachSendRight *)(a1 + 1);
  IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 1));
  WTF::MachSendRight::~MachSendRight(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(IPC::Semaphore &&,WTF::CompletionHandler<void ()(WTF::MachSendRight &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BF628;
  uint64_t v2 = (WTF::MachSendRight *)(a1 + 8);
  IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 8));
  WTF::MachSendRight::~MachSendRight(v2);

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(IPC::Semaphore &&,WTF::CompletionHandler<void ()(WTF::MachSendRight &&)> &&)::$_0,void>::call()
{
}

_DWORD *WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(_DWORD *result, void *a2)
{
  if (*result == 1)
  {
    WebKit::WebGPU::ObjectHeap::~ObjectHeap((WebKit::WebGPU::ObjectHeap *)(result - 2), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void (*)(void),void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void WTF::RunLoop::DispatchTimer::~DispatchTimer(WTF::RunLoop::DispatchTimer *this)
{
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  WTF::RunLoop::TimerBase::~TimerBase(this);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ScopedWebGLRenderingResourcesRequest::freeWebGLRenderingResources(void)::$_0,void>::call()
{
  return MEMORY[0x1F4170B40](2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAdapter::requestDevice(WebKit::WebGPU::DeviceDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebKit::WebGPU::SupportedFeatures &&,WebKit::WebGPU::SupportedLimits &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BF6A0;
  uint64_t v3 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
  }
  int v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), a2);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAdapter::requestDevice(WebKit::WebGPU::DeviceDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebKit::WebGPU::SupportedFeatures &&,WebKit::WebGPU::SupportedLimits &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BF6A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
  }
  int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), a2);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteAdapter::requestDevice(WebKit::WebGPU::DeviceDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebKit::WebGPU::SupportedFeatures &&,WebKit::WebGPU::SupportedLimits &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::call(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2 && a1[6])
  {
    *a2 = 0;
    uint64_t v4 = (void *)a1[6];
    uint64_t v5 = a1[7];
    uint64_t v6 = a1[2];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = WTF::fastMalloc((WTF *)0xA8);
    WebKit::RemoteDevice::RemoteDevice(v9, v4, v5, (_DWORD *)v3, v6, a1 + 3, v7, v8);
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[4], v9);
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[5];
    int v12 = *(atomic_uint **)(v9 + 48);
    atomic_fetch_add(v12 + 2, 1u);
    WebKit::WebGPU::ObjectHeap::addObject(v10, v11, (uint64_t)v12);
    if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v12 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *(WTF **)(v3 + 32);
    ++*(_DWORD *)v13;
    uint64_t v14 = *(void *)(v3 + 40);
    ++*(_DWORD *)v14;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v29, (uint64_t)v13 + 8);
    long long v15 = *(_OWORD *)(v14 + 20);
    long long v23 = *(_OWORD *)(v14 + 4);
    long long v24 = v15;
    long long v25 = *(_OWORD *)(v14 + 36);
    *(void *)&v26[0] = *(void *)(v14 + 52);
    *(_OWORD *)((char *)v26 + 8) = *(_OWORD *)(v14 + 64);
    *((void *)&v26[1] + nw_tcp_options_set_no_delay(options, 1) = *(void *)(v14 + 80);
    int v27 = *(_DWORD *)(v14 + 88);
    *(void *)uint64_t v28 = *(void *)(v14 + 96);
    long long v16 = *(_OWORD *)(v14 + 120);
    *(_OWORD *)&v28[8] = *(_OWORD *)(v14 + 104);
    *(_OWORD *)&unsigned char v28[24] = v16;
    *(_OWORD *)&v28[40] = *(_OWORD *)(v14 + 136);
    uint64_t v17 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, void *, long long *))(*(void *)v17 + 16))(v17, v29, &v23);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v18);
    if (*(_DWORD *)v14 == 1) {
      WTF::fastFree((WTF *)v14, v19);
    }
    else {
      --*(_DWORD *)v14;
    }
    uint64_t result = WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v13, v19);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v9 + 8));
      uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (*(_DWORD *)(v3 + 8) == 1) {
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    else {
      --*(_DWORD *)(v3 + 8);
    }
  }
  else
  {
    v29[0] = 0;
    v29[1] = 0;
    int v27 = 0;
    memset(v26, 0, sizeof(v26));
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    memset(v28, 0, sizeof(v28));
    uint64_t v20 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, void *, long long *))(*(void *)v20 + 16))(v20, v29, &v23);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    return (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
  }
  return result;
}

WTF *WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(WTF *result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 8, a2);
    return (WTF *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>@<X0>(atomic_uchar *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = this;
  char v6 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  if (*((void *)v4 + 3)) {
    ++*((void *)v4 + 1);
  }
  else {
    a2 = 0;
  }
  *a3 = a2;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return this;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BF6C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BF6C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::getMappedRange(unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::span<unsigned char,18446744073709551615ul>>::call(WTF *result, const void *a2, unint64_t this)
{
  *(unsigned char *)(*((void *)result + 1) + 56) = 1;
  uint64_t v4 = (uint64_t *)*((void *)result + 2);
  BOOL v8 = 0;
  int v9 = 0;
  int v10 = this;
  if (this)
  {
    if (HIDWORD(this))
    {
      __break(0xC471u);
      return result;
    }
    int v9 = this;
    BOOL v8 = (WTF *)WTF::fastMalloc((WTF *)this);
    memcpy(v8, a2, this);
  }
  char v11 = 1;
  uint64_t v6 = *v4;
  *uint64_t v4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v6 + 16))(v6, &v8);
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v11)
  {
    uint64_t result = v8;
    if (v8)
    {
      BOOL v8 = 0;
      int v9 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

void WebKit::cancelledError(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (WebKit *)*MEMORY[0x1E4F289A0];
  WebCore::ResourceRequestBase::url(this);
  int v5 = (void *)WTF::URL::operator NSURL *();
  WebKit::createNSError(v4, (NSString *)0xFFFFFC19, v5, &v7);
  uint64_t v6 = v7;
  MEMORY[0x199731570](a2, v7);
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_198ACE528(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::createNSError@<X0>(WebKit *this@<X0>, NSString *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v5 = (int)a2;
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a3, @"NSErrorFailingURLKey", objc_msgSend(a3, "absoluteString"), @"NSErrorFailingURLStringKey", 0);
  uint64_t result = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:this code:v5 userInfo:v8];
  *a4 = result;
  return result;
}

void WebKit::fileDoesNotExistError(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (WebKit *)*MEMORY[0x1E4F289A0];
  WebCore::ResourceResponseBase::url(this);
  int v5 = (void *)WTF::URL::operator NSURL *();
  WebKit::createNSError(v4, (NSString *)0xFFFFFBB4, v5, &v7);
  uint64_t v6 = v7;
  MEMORY[0x199731570](a2, v7);
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_198ACE668(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::decodeError(uint64_t a1@<X8>)
{
  uint64_t v4 = (WebKit *)*MEMORY[0x1E4F289A0];
  int v5 = (void *)WTF::URL::operator NSURL *();
  WebKit::createNSError(v4, (NSString *)0xFFFFFC08, v5, &v7);
  uint64_t v6 = v7;
  MEMORY[0x199731570](a1, v7);
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_198ACE708(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::fallbackIconForFile(WebKit *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)[MEMORY[0x1E4F42980] interactionControllerWithURL:this];
  if (objc_msgSend((id)objc_msgSend(v4, "icons"), "count"))
  {
    int v5 = (WebKit *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "icons"), "objectAtIndexedSubscript:", 0), "CGImage");
    WebKit::thumbnailSizedImageForImage(v5, a2);
  }
  else
  {
    *a2 = 0;
  }
}

void WebKit::thumbnailSizedImageForImage(WebKit *this@<X0>, void *a2@<X8>)
{
  if (!this) {
    goto LABEL_18;
  }
  double Width = (double)CGImageGetWidth(this);
  size_t Height = CGImageGetHeight(this);
  double v7 = (double)Height;
  if (Width == (double)Height)
  {
    CFRetain(this);
    uint64_t v8 = this;
    goto LABEL_14;
  }
  double v9 = v7 >= Width ? Width : (double)Height;
  BOOL v10 = Width < v7;
  double v11 = round((Width - v9) * 0.5);
  double v12 = round((v7 - v9) * 0.5);
  double v13 = Width < v7 ? 0.0 : v11;
  double v14 = v10 ? v12 : 0.0;
  double v15 = v9;
  uint64_t v8 = CGImageCreateWithImageInRect(this, *(CGRect *)(&v9 - 2));
  if (!v8)
  {
LABEL_18:
    *a2 = 0;
    return;
  }
LABEL_14:
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(this);
  uint64_t v17 = ColorSpace;
  if (ColorSpace) {
    CFRetain(ColorSpace);
  }
  if (CGColorSpaceSupportsOutput(v17))
  {
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    if (v17) {
      CFRelease(v17);
    }
  }
  uint64_t v19 = CGBitmapContextCreate(0, 0x64uLL, 0x64uLL, 8uLL, 0x190uLL, v18, 1u);
  CGContextSetInterpolationQuality(v19, kCGInterpolationHigh);
  v24.size.width = 100.0;
  v24.origin.x = 0.0;
  v24.origin.y = 0.0;
  v24.size.height = 100.0;
  CGContextDrawImage(v19, v24, v8);
  CGImageRef Image = CGBitmapContextCreateImage(v19);
  id v21 = objc_alloc(MEMORY[0x1E4F42A80]);
  if (Image) {
    CGImageRef v22 = Image;
  }
  else {
    CGImageRef v22 = v8;
  }
  *a2 = [v21 initWithCGImage:v22];
  if (!Image)
  {
    if (!v19) {
      goto LABEL_26;
    }
LABEL_31:
    CFRelease(v19);
    if (!v18) {
      goto LABEL_27;
    }
LABEL_32:
    CFRelease(v18);
    goto LABEL_27;
  }
  CFRelease(Image);
  if (v19) {
    goto LABEL_31;
  }
LABEL_26:
  if (v18) {
    goto LABEL_32;
  }
LABEL_27:

  CFRelease(v8);
}

void sub_198ACE974(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::iconForImageFile(WebKit *this@<X0>, void *a2@<X8>)
{
  _OWORD v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F2FF68];
  v10[0] = *MEMORY[0x1E4F2FE38];
  v10[1] = v5;
  v11[0] = MEMORY[0x1E4F1CC38];
  v11[1] = &unk_1EEA53318;
  v10[2] = *MEMORY[0x1E4F2FE48];
  uint64_t v10[3] = @"kCGImageSourceEnableRestrictedDecoding";
  _OWORD v11[2] = MEMORY[0x1E4F1CC38];
  _OWORD v11[3] = MEMORY[0x1E4F1CC38];
  CFDictionaryRef v6 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];
  double v7 = CGImageSourceCreateWithURL(this, 0);
  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v7, 0, v6);
  double v9 = ThumbnailAtIndex;
  if (ThumbnailAtIndex)
  {
    WebKit::thumbnailSizedImageForImage(ThumbnailAtIndex, a2);
    CFRelease(v9);
  }
  else
  {
    WebKit::fallbackIconForFile(this, a2);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_198ACEAF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::iconForVideoFile(WebKit *this@<X0>, NSURL *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (const void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(WebKit *, NSURL *))*MEMORY[0x1E4FB6290])(this, a2)), "initWithURL:options:", this, 0);
  CFDictionaryRef v6 = (void *)[objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6368])()) initWithAsset:v5];
  uint64_t v10 = 0;
  PAL::get_CoreMedia_kCMTimeZero(v9, (PAL *)[v6 setAppliesPreferredTrackTransform:1]);
  double v7 = (WebKit *)[v6 copyCGImageAtTime:v9 actualTime:0 error:&v10];
  uint64_t v8 = v7;
  if (v7)
  {
    WebKit::thumbnailSizedImageForImage(v7, a3);
    CFRelease(v8);
  }
  else
  {
    WebKit::fallbackIconForFile(this, a3);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198ACEC18(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::iconForFiles(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 12)
    && ((uint64_t v3 = (void *)MEMORY[0x1E4F1CB10], !**(void **)a1)
      ? (uint64_t v4 = &stru_1EEA10550)
      : (uint64_t v4 = (__CFString *)WTF::StringImpl::operator NSString *()),
        (uint64_t v5 = (WebKit *)[v3 fileURLWithPath:v4 isDirectory:0]) != 0
     && (v6 = v5, double v7 = (__CFString *)[(WebKit *)v5 pathExtension], [(__CFString *)v7 length])))
  {
    CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E4F224F8], v7, 0);
    if (UTTypeConformsTo(PreferredIdentifierForTag, (CFStringRef)*MEMORY[0x1E4F225F8]))
    {
      WebKit::iconForImageFile(v6, a2);
    }
    else if (UTTypeConformsTo(PreferredIdentifierForTag, (CFStringRef)*MEMORY[0x1E4F22660]))
    {
      WebKit::iconForVideoFile(v6, v9, a2);
    }
    else
    {
      WebKit::fallbackIconForFile(v6, a2);
    }
    if (PreferredIdentifierForTag)
    {
      CFRelease(PreferredIdentifierForTag);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_198ACED78(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::startListeningForMachServiceConnections(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  {
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    uint64_t v9 = a4;
    uint64_t v10 = a5;
    uint64_t v8 = a6;
    double v7 = a1;
    xpc_connection_t mach_service = xpc_connection_create_mach_service(a1, MEMORY[0x1E4F14428], 1uLL);
    WebKit::startListeningForMachServiceConnections(char const*,WTF::ASCIILiteral,void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*))::listener = (uint64_t)mach_service;
    if (mach_service) {
      CFRetain(mach_service);
    }
    a6 = v8;
    a4 = v9;
    a5 = v10;
    a3 = v11;
    a1 = v7;
    a2 = v12;
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke;
  handler[3] = &__block_descriptor_80_e33_v16__0__NSObject_OS_xpc_object__8l;
  handler[4] = a2;
  handler[5] = a3;
  handler[6] = a1;
  handler[7] = a5;
  handler[8] = a6;
  handler[9] = a4;
  xpc_connection_set_event_handler((xpc_connection_t)WebKit::startListeningForMachServiceConnections(char const*,WTF::ASCIILiteral,void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*))::listener, handler);
  xpc_connection_activate((xpc_connection_t)WebKit::startListeningForMachServiceConnections(char const*,WTF::ASCIILiteral,void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*))::listener);
}

void ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke(uint64_t a1, _xpc_connection_s *a2)
{
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F14578])
  {
    if (*(void *)(a1 + 40) && (WTF::hasEntitlement() & 1) == 0)
    {
      NSLog(&cfstr_ConnectionAtte.isa);
      xpc_connection_cancel(a2);
    }
    else
    {
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke_2;
      handler[3] = &unk_1E5811E38;
      handler[4] = a2;
      long long v5 = *(_OWORD *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 64);
      xpc_connection_set_event_handler(a2, handler);
      xpc_connection_set_target_queue(a2, MEMORY[0x1E4F14428]);
      xpc_connection_activate(a2);
      NSLog(&cfstr_AddingPeerConn.isa, a2);
      (*(void (**)(_xpc_connection_s *))(a1 + 72))(a2);
    }
  }
}

uint64_t ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (a2 == MEMORY[0x1E4F14528])
  {
    uint64_t v5 = xpc_connection_copy_invalidation_reason();
    NSLog(&cfstr_FailedToStartL.isa, *(void *)(a1 + 40), v5);
    NSLog(&cfstr_RemovingPeerCo.isa, *(void *)(a1 + 32));
    uint64_t result = (*(uint64_t (**)(void))(a1 + 48))(*(void *)(a1 + 32));
    if (v5)
    {
      JUMPOUT(0x199740BF0);
    }
  }
  else if (a2 == MEMORY[0x1E4F14520])
  {
    NSLog(&cfstr_RemovingPeerCo.isa, *(void *)(a1 + 32));
    uint64_t v6 = *(uint64_t (**)(uint64_t))(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    return v6(v7);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 56);
    return v3(a2);
  }
  return result;
}

void sub_198ACF0C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x199740BF0](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::vectorToXPCData(uint64_t a1@<X0>, void *a2@<X1>, xpc_object_t *a3@<X8>)
{
  size_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(const void **)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  WTF::fastFree(0, a2);
  destructor[0] = MEMORY[0x1E4F143A8];
  destructor[1] = 3221225472;
  destructor[2] = ___ZN6WebKit15vectorToXPCDataEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke;
  destructor[3] = &__block_descriptor_40_e5_v8__0l;
  destructor[4] = v5;
  uint64_t v6 = dispatch_data_create(v5, v4, MEMORY[0x1E4F14428], destructor);
  *a3 = xpc_data_create_with_dispatch_data(v6);
  if (v6) {
    CFRelease(v6);
  }
}

void sub_198ACF1A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit15vectorToXPCDataEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke(uint64_t a1, void *a2)
{
  return WTF::fastFree(*(WTF **)(a1 + 32), a2);
}

IPC::Encoder *WebKit::encoderToXPCData@<X0>(IPC::Encoder *result@<X0>, xpc_object_t *a2@<X8>)
{
  v11[0] = 0;
  v11[1] = v11;
  _OWORD v11[2] = 0x3812000000;
  _OWORD v11[3] = __Block_byref_object_copy__4;
  _OWORD v11[4] = __Block_byref_object_dispose__4;
  void v11[5] = 0;
  uint64_t v3 = *(IPC::Encoder **)result;
  *(void *)uint64_t result = 0;
  uint64_t v12 = v3;
  size_t v4 = *((void *)v3 + 68);
  if (*((void *)v3 + 67) < v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (const void *)*((void *)v3 + 66);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___ZN6WebKit16encoderToXPCDataEON3WTF9UniqueRefIN3IPC7EncoderEEE_block_invoke;
    uint64_t v10[3] = &unk_1E5811E80;
    void v10[4] = v11;
    uint64_t v6 = dispatch_data_create(v5, v4, MEMORY[0x1E4F14428], v10);
    *a2 = xpc_data_create_with_dispatch_data(v6);
    if (v6) {
      CFRelease(v6);
    }
    _Block_object_dispose(v11, 8);
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

void sub_198ACF2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, IPC::Encoder *a20)
{
  if (v20) {
    CFRelease(v20);
  }
  _Block_object_dispose(&a14, 8);
  long long v23 = a20;
  a20 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v24, v25);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

IPC::Encoder **__Block_byref_object_dispose__4(uint64_t a1, void *a2)
{
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 48), a2);
}

IPC::Encoder *___ZN6WebKit16encoderToXPCDataEON3WTF9UniqueRefIN3IPC7EncoderEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t result = *(IPC::Encoder **)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, a2);
    return (IPC::Encoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::PCM::DaemonConnectionSet::setConnectedNetworkProcessHasDebugModeEnabled(WebKit::PCM::DaemonConnectionSet *this, const WebKit::Daemon::Connection *a2, int a3)
{
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t result = WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>((uint64_t *)this, &v9);
  uint64_t v6 = *(void *)this;
  if (*(void *)this) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if (v6 != result && *(unsigned __int8 *)(result + 8) != a3)
  {
    uint64_t v7 = *((void *)this + 1);
    *(unsigned char *)(result + 8) = a3;
    if (a3) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 - 1;
    }
    *((void *)this + nw_tcp_options_set_no_delay(options, 1) = v8;
  }
  return result;
}

void WebKit::PCM::DaemonConnectionSet::broadcastConsoleMessage(void **a1, unsigned int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "debug message level", a2);
  WTF::String::utf8();
  if (v12) {
    uint64_t v5 = (char *)v12 + 16;
  }
  else {
    uint64_t v5 = 0;
  }
  xpc_dictionary_set_string(v4, "debug message", v5);
  if (v12)
  {
    if (*(_DWORD *)v12 == 1) {
      WTF::fastFree(v12, v6);
    }
    else {
      --*(_DWORD *)v12;
    }
  }
  uint64_t v7 = (xpc_connection_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  if (*a1) {
    uint64_t v11 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v11 = 0;
  }
  if ((xpc_connection_t *)v11 != v7)
  {
    do
    {
      xpc_connection_send_message(*v8, v4);
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)*v8 + 1 > 1) {
          goto LABEL_17;
        }
      }
      uint64_t v8 = v10;
LABEL_17:
      ;
    }
    while (v8 != (xpc_connection_t *)v11);
  }
  if (v4) {
}
  }

void sub_198ACF510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (v10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PCMDaemonMain(WebKit *this, uint64_t a2, const char **a3)
{
  if ((int)this >= 5
    && (unsigned int v4 = this, !strcmp(*(const char **)(a2 + 8), "--machServiceName"))
    && !strcmp(*(const char **)(a2 + 24), "--storageLocation"))
  {
    uint64_t v6 = *(const char **)(a2 + 16);
    uint64_t v7 = *(WTF::FileSystemImpl **)(a2 + 32);
    BOOL v8 = v4 >= 6 && strcmp(*(const char **)(a2 + 40), "--startActivity") == 0;
    uint64_t v9 = (void *)MEMORY[0x199741920]();
    _CFPrefsSetDirectModeEnabled();
    _CFPrefsSetReadOnly();
    WebKit::startListeningForMachServiceConnections(v6, (uint64_t)"com.apple.private.webkit.adattributiond", 40, (uint64_t)WebKit::connectionAdded, (uint64_t)WebKit::connectionRemoved, (uint64_t)WebKit::connectionEventHandler);
    if (v8)
    {
      NSLog(&cfstr_RegisteringXpc.isa);
      xpc_activity_register("com.apple.webkit.adattributiond.activity", (xpc_object_t)*MEMORY[0x1E4F14158], &__block_literal_global_15);
    }
    WTF::initializeMainThread(v10);
    WTF::FileSystemImpl::stringFromFileSystemRepresentation((uint64_t *)&v15, v7, v11);
    WebKit::PCM::initializePCMStorageInDirectory((WebKit::PCM *)&v15, v12);
    double v14 = v15;
    double v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFRunLoopRun();
    return 0;
  }
  else
  {
    NSLog(&cfstr_UsageSMachserv.isa, *(void *)a2);
    return 0xFFFFFFFFLL;
  }
}

void WebKit::connectionAdded(CFTypeRef cf)
{
  {
    WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
    qword_1E93CFAC8 = 0;
    if (!cf) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (cf) {
LABEL_3:
  }
    CFRetain(cf);
LABEL_4:
  uint64_t v2 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set
    || (WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::expand(),
        (uint64_t v2 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set) != 0))
  {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else
  {
    int v3 = 0;
  }
  unint64_t v4 = ((unint64_t)cf + ~((void)cf << 32)) ^ (((unint64_t)cf + ~((void)cf << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = v2 + 16 * v7;
  CFTypeRef v9 = *(CFTypeRef *)v8;
  if (*(void *)v8)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != cf)
    {
      if (v9 == (CFTypeRef)-1) {
        uint64_t v10 = v8;
      }
      unsigned int v7 = (v7 + v11) & v3;
      uint64_t v8 = v2 + 16 * v7;
      CFTypeRef v9 = *(CFTypeRef *)v8;
      ++v11;
      if (!*(void *)v8)
      {
        if (v10)
        {
          *(void *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 8) = 0;
          --*(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 16);
          uint64_t v8 = v10;
        }
        goto LABEL_15;
      }
    }
    if (cf)
    {
      CFRelease(cf);
    }
  }
  else
  {
LABEL_15:
    *(void *)uint64_t v8 = cf;
    *(unsigned char *)(v8 + 8) = 0;
    if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set) {
      int v12 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) + 1;
    }
    else {
      int v12 = 1;
    }
    *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) = v12;
    if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set) {
      int v13 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = (*(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 16) + v13);
    unint64_t v15 = *(unsigned int *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4);
    if (v15 > 0x400)
    {
      if (v15 > 2 * v14) {
        return;
      }
    }
    else if (3 * v15 > 4 * v14)
    {
      return;
    }
    WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::expand();
  }
}

void sub_198ACF894(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::connectionRemoved(uint64_t a1)
{
  {
    WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
    qword_1E93CFAC8 = 0;
  }
  uint64_t v8 = a1;
  uint64_t v1 = WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(&WebKit::PCM::DaemonConnectionSet::singleton(void)::set, &v8);
  uint64_t v2 = (void *)v1;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
  {
    if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set
       + 16 * *(unsigned int *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4) == v1)
      return;
  }
  else if (!v1)
  {
    return;
  }
  int v3 = *(unsigned __int8 *)(v1 + 8);
  unint64_t v4 = *(const void **)v1;
  *uint64_t v2 = 0;
  if (v4) {
    CFRelease(v4);
  }
  *uint64_t v2 = -1;
  ++*(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 16);
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set) {
    int v5 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) = v5;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
  {
    unsigned int v6 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4);
    if (6 * *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) < v6 && v6 >= 9) {
      WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(v6 >> 1);
    }
  }
  if (v3) {
    --qword_1E93CFAC8;
  }
}

void WebKit::connectionEventHandler(void *a1)
{
  uint64_t v1 = a1;
  if (object_getClass(a1) == (Class)MEMORY[0x1E4F14590])
  {
    if (xpc_dictionary_get_uint64(v1, "version") == 1)
    {
      unsigned __int8 uint64 = xpc_dictionary_get_uint64(v1, "message type");
      size_t length = 0;
      data = (unsigned __int8 **)xpc_dictionary_get_data(v1, "encoded message", &length);
      size_t v4 = length;
      remote_nw_connection_t connection = xpc_dictionary_get_remote_connection(v1);
      xpc_connection_t v6 = remote_connection;
      if (remote_connection) {
        unsigned int v7 = remote_connection;
      }
      v13[0] = &unk_1EE9BBC10;
      v13[1] = 0;
      v13[2] = v6;
      if (v1) {
        id v8 = v1;
      }
      uint64_t v9 = 0;
      if (uint64 <= 0x10u && ((1 << uint64) & 0x1104D) != 0)
      {
        uint64_t v9 = WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v9 = &unk_1EE9BF718;
        *(void *)(v9 + 8) = v1;
        uint64_t v1 = 0;
      }
      int v12 = (unsigned __int8 *)v9;
      WebKit::PCM::decodeMessageAndSendToManager((WebKit::Daemon::Connection *)v13, uint64, data, v4, &v12);
      int v11 = v12;
      int v12 = 0;
      if (v11) {
        (*(void (**)(unsigned __int8 *))(*(void *)v11 + 8))(v11);
      }
      if (v1) {

      }
      WebKit::Daemon::Connection::~Connection((WebKit::Daemon::Connection *)v13, v10);
    }
    else
    {
      NSLog(&cfstr_ReceivedReques.isa);
    }
  }
}

void sub_198ACFB4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {

  }
  WebKit::Daemon::Connection::~Connection((WebKit::Daemon::Connection *)va, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::replySender(WebKit::PCM::MessageType,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BF718;
  uint64_t v2 = (void *)a1[1];
  if (v2) {

  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::replySender(WebKit::PCM::MessageType,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BF718;
  int v3 = (void *)*((void *)this + 1);
  if (v3) {

  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::replySender(WebKit::PCM::MessageType,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  xpc_object_t message = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 8));
  WebKit::PCM::addVersionAndEncodedMessageToDictionary(a2, message);
  remote_nw_connection_t connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 8));
  xpc_connection_send_message(remote_connection, message);
  if (message)
  {
  }
}

void sub_198ACFC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKitL32registerScheduledActivityHandlerEv_block_invoke(int a1, xpc_activity_t activity)
{
  if (xpc_activity_get_state(activity))
  {
    int v3 = MEMORY[0x1E4F14428];
    dispatch_async(v3, &__block_literal_global_52);
  }
  else
  {
    NSLog(&cfstr_ActivityChecki.isa);
    xpc_object_t xdict = xpc_activity_copy_criteria(activity);
    xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E4F141C8], 0x15180uLL);
    xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E4F141A8], 0xE10uLL);
    xpc_dictionary_set_string(xdict, (const char *)*MEMORY[0x1E4F142C8], (const char *)*MEMORY[0x1E4F142D0]);
    xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E4F14138], 1);
    xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E4F142F0], 0x15180uLL);
    xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E4F14338], 1);
    xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E4F142F8], 1);
    xpc_activity_set_criteria(activity, xdict);
    if (xdict)
    {
    }
  }
}

void sub_198ACFE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKitL32registerScheduledActivityHandlerEv_block_invoke_2()
{
  NSLog(&cfstr_XpcActivityHap.isa);
  uint64_t v0 = (WebKit::PrivateClickMeasurementManager *)WebKit::PCM::managerPointer(void)::manager;

  return WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(v0);
}

_DWORD *WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::expand()
{
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set
    && (int v0 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4)) != 0)
  {
    return WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(unsigned int a1)
{
  uint64_t v2 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
  {
    int v3 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4);
    int v4 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  if (a1)
  {
    uint64_t v7 = a1;
    id v8 = result + 6;
    do
    {
      *((void *)v8 - nw_tcp_options_set_no_delay(options, 1) = 0;
      *id v8 = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  WebKit::PCM::DaemonConnectionSet::singleton(void)::set = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v10 = (const void **)(v2 + 16 * i);
      int v11 = *v10;
      if (*v10 != (const void *)-1)
      {
        if (v11)
        {
          if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set) {
            int v12 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          uint64_t v20 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set + 16 * v18;
          *(void *)uint64_t v20 = 0;
          id v21 = *v10;
          *uint64_t v10 = 0;
          *(void *)uint64_t v20 = v21;
          *(unsigned char *)(v20 + 8) = *(unsigned char *)(v2 + 16 * i + 8);
          CGImageRef v22 = *v10;
          *uint64_t v10 = 0;
          if (v22) {
            CFRelease(v22);
          }
        }
        else
        {
          *uint64_t v10 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return v2 + 16 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 16 * v7;
    }
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

void WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(WebKit::RemoteCommandEncoder *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unint64_t v4 = (atomic_uchar *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  unint64_t v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteCommandEncoder::connection(WebKit::RemoteCommandEncoder *this, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a2 + 48);
  if (result
    && (uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a2 + 56), &v11), v11))
  {
    char v4 = 0;
    unint64_t v5 = *(atomic_uchar *volatile **)(v11 + 56);
    uint64_t result = *v5;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4)
    {
      uint64_t v8 = result;
      int v9 = v5;
      MEMORY[0x19972E8D0]();
      int v6 = 1;
      uint64_t result = v8;
      unint64_t v5 = v9;
    }
    ++*((void *)result + 1);
    atomic_compare_exchange_strong_explicit(result, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      uint64_t v10 = v5;
      uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)result);
      unint64_t v5 = v10;
    }
    uint64_t v7 = v11;
    *(void *)this = v5;
    uint64_t v11 = 0;
    if (v7) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
    }
  }
  else
  {
    *(void *)this = 0;
  }
  return result;
}

_DWORD *WebKit::RemoteCommandEncoder::beginRenderPass(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1[3] + 8);
  int v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)&v46);
  if (v53)
  {
    uint64_t v7 = (_DWORD *)a1[2];
    ++v7[2];
    (*(void (**)(uint64_t *__return_ptr, _DWORD *, WTF::StringImpl **))(*(void *)v7 + 16))(&v45, v7, &v46);
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
    uint64_t v8 = v45;
    if (v45)
    {
      uint64_t v9 = a1[4];
      atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
      *(void *)long long buf = v9;
      uint64_t v10 = *(atomic_uint **)(a1[8] + 8);
      atomic_fetch_add(v10 + 2, 1u);
      uint64_t v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
      WebKit::RemoteRenderPassEncoder::RemoteRenderPassEncoder((uint64_t)v11, v8, v5, (uint64_t *)buf, (uint64_t)v10, a3);
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v10 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v10 + 8))(v10);
      }
      int v12 = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v11);
      if (atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_13;
    }
    int v31 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteCommandEncoder::beginRenderPass(const WebGPU::RenderPassDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteCommandEncoder.cpp 87: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteCommandEncoder::connection((WebKit::RemoteCommandEncoder *)&v44, (uint64_t)a1);
    long long v32 = (atomic_uchar *volatile *)v44;
    if (!v44) {
      goto LABEL_13;
    }
    char v33 = 0;
    *(unsigned char *)(v44 + 98) = 1;
    uint64_t v44 = 0;
    atomic_uchar *volatile v34 = *v32;
    atomic_compare_exchange_strong_explicit(*v32, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
    if (v33) {
      MEMORY[0x19972E8D0](v34);
    }
    uint64_t v35 = *((void *)v34 + 1);
    uint64_t v36 = v35 - 1;
    *((void *)v34 + nw_tcp_options_set_no_delay(options, 1) = v35 - 1;
    if (v35 == 1)
    {
      uint64_t v43 = *((void *)v34 + 2);
      uint64_t v38 = *((void *)v34 + 3);
      *((void *)v34 + 3) = 0;
      BOOL v37 = v43 == 0;
    }
    else
    {
      BOOL v37 = 0;
      uint64_t v38 = 0;
    }
    int v39 = 1;
    atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 == 1)
    {
      if (!v36) {
        goto LABEL_54;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v34);
      if (!v36)
      {
LABEL_54:
        uint64_t v40 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v40 = &unk_1EE9B37E8;
        *(void *)(v40 + 8) = v34;
        *(void *)(v40 + 16) = v38;
        *(unsigned char *)(v40 + 24) = v37;
        *(void *)long long buf = v40;
        WTF::ensureOnMainRunLoop();
        uint64_t v41 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v41) {
          (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
        }
      }
    }
LABEL_13:
    unint64_t v14 = (_DWORD *)v45;
    uint64_t v45 = 0;
    if (v14)
    {
      if (v14[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    goto LABEL_17;
  }
  uint64_t v20 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteCommandEncoder::beginRenderPass(const WebGPU::RenderPassDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteCommandEncoder.cpp 84: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteCommandEncoder::connection((WebKit::RemoteCommandEncoder *)&v45, (uint64_t)a1);
  id v21 = (atomic_uchar *volatile *)v45;
  if (v45)
  {
    char v22 = 0;
    *(unsigned char *)(v45 + 98) = 1;
    uint64_t v45 = 0;
    atomic_uchar *volatile v23 = *v21;
    atomic_compare_exchange_strong_explicit(*v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
    if (v22) {
      MEMORY[0x19972E8D0](v23);
    }
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v25 = v24 - 1;
    *((void *)v23 + nw_tcp_options_set_no_delay(options, 1) = v24 - 1;
    if (v24 == 1)
    {
      uint64_t v42 = *((void *)v23 + 2);
      uint64_t v27 = *((void *)v23 + 3);
      *((void *)v23 + 3) = 0;
      BOOL v26 = v42 == 0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = 0;
    }
    int v28 = 1;
    atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 == 1)
    {
      if (v25) {
        goto LABEL_17;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v25) {
        goto LABEL_17;
      }
    }
    uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v29 = &unk_1EE9B37E8;
    *(void *)(v29 + 8) = v23;
    *(void *)(v29 + 16) = v27;
    *(unsigned char *)(v29 + 24) = v26;
    *(void *)long long buf = v29;
    WTF::ensureOnMainRunLoop();
    uint64_t v30 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
LABEL_17:
  if (v53)
  {
    if (v52)
    {
      unint64_t v15 = (unsigned int *)v51;
      uint64_t v51 = 0;
      if (v15)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v13);
        }
      }
    }
    unsigned int v16 = (unsigned int *)v50;
    CFTypeRef v50 = 0;
    if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v13);
    }
    if (v49)
    {
      int v17 = (unsigned int *)v48;
      uint64_t v48 = 0;
      if (v17)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v13);
        }
      }
    }
    WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v13);
    unsigned int v18 = v46;
    char v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v13);
}

_DWORD *WebKit::RemoteCommandEncoder::beginComputePass(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int **)(a1[3] + 8);
  int v6 = v5 + 2;
  ++v5[2];
  LOBYTE(v54) = 0;
  char v58 = 0;
  if (!*(unsigned char *)(a2 + 32)) {
    goto LABEL_24;
  }
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)&buf);
  if (!v63)
  {
    int v39 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v59 = 136446210;
      *(void *)&v59[4] = "void WebKit::RemoteCommandEncoder::beginComputePass(const std::optional<WebGPU::ComputePassDe"
                           "scriptor> &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v39, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteCommandEncoder.cpp 98: Invalid message dispatched %{public}s", v59, 0xCu);
    }
    WebKit::RemoteCommandEncoder::connection((WebKit::RemoteCommandEncoder *)&v53, (uint64_t)a1);
    uint64_t v41 = (atomic_uchar *volatile *)v53;
    if (!v53) {
      goto LABEL_62;
    }
    char v42 = 0;
    *(unsigned char *)(v53 + 98) = 1;
    uint64_t v53 = 0;
    atomic_uchar *volatile v43 = *v41;
    atomic_compare_exchange_strong_explicit(*v41, (unsigned __int8 *)&v42, 1u, memory_order_acquire, memory_order_acquire);
    if (v42) {
      MEMORY[0x19972E8D0](v43);
    }
    uint64_t v44 = *((void *)v43 + 1);
    uint64_t v45 = v44 - 1;
    *((void *)v43 + nw_tcp_options_set_no_delay(options, 1) = v44 - 1;
    if (v44 == 1)
    {
      uint64_t v52 = *((void *)v43 + 2);
      uint64_t v47 = *((void *)v43 + 3);
      *((void *)v43 + 3) = 0;
      BOOL v46 = v52 == 0;
    }
    else
    {
      BOOL v46 = 0;
      uint64_t v47 = 0;
    }
    int v48 = 1;
    atomic_compare_exchange_strong_explicit(v43, (unsigned __int8 *)&v48, 0, memory_order_release, memory_order_relaxed);
    if (v48 == 1)
    {
      if (!v45) {
        goto LABEL_60;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v43);
      if (!v45)
      {
LABEL_60:
        uint64_t v49 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v49 = &unk_1EE9B37E8;
        *(void *)(v49 + 8) = v43;
        *(void *)(v49 + 16) = v47;
        *(unsigned char *)(v49 + 24) = v46;
        *(void *)uint64_t v59 = v49;
        WTF::ensureOnMainRunLoop();
        uint64_t v50 = *(void *)v59;
        *(void *)uint64_t v59 = 0;
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
        }
      }
    }
LABEL_62:
    std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf, v40);
    goto LABEL_39;
  }
  if (v58 == v63)
  {
    uint64_t v8 = (WTF::StringImpl *)buf;
    *(void *)&long long buf = 0;
    uint64_t v9 = v54;
    uint64_t v54 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    if (v57 == v62)
    {
      if (v57)
      {
        int v12 = (WTF *)*((void *)&buf + 1);
        *((void *)&buf + nw_tcp_options_set_no_delay(options, 1) = 0;
        unint64_t v13 = (unsigned int *)v55;
        uint64_t v55 = v12;
        if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, v7);
        }
        uint64_t v56 = v61;
      }
    }
    else if (v57)
    {
      unint64_t v14 = (unsigned int *)v55;
      uint64_t v55 = 0;
      if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v7);
      }
      char v57 = 0;
    }
    else
    {
      unint64_t v15 = (WTF *)*((void *)&buf + 1);
      *((void *)&buf + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v55 = v15;
      uint64_t v56 = v61;
      char v57 = 1;
    }
  }
  else
  {
    uint64_t v10 = (WTF::StringImpl *)buf;
    *(void *)&long long buf = 0;
    uint64_t v54 = v10;
    LOBYTE(v55) = 0;
    char v57 = 0;
    if (v62)
    {
      uint64_t v11 = (WTF *)*((void *)&buf + 1);
      *((void *)&buf + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v55 = v11;
      uint64_t v56 = v61;
      char v57 = 1;
    }
    char v58 = 1;
  }
  std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf, v7);
LABEL_24:
  unsigned int v16 = (_DWORD *)a1[2];
  ++v16[2];
  (*(void (**)(uint8_t *__return_ptr, _DWORD *, WTF::StringImpl **))(*(void *)v16 + 24))(v59, v16, &v54);
  if (v16[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
  }
  else {
    --v16[2];
  }
  uint64_t v17 = *(void *)v59;
  if (*(void *)v59)
  {
    uint64_t v18 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    uint64_t v19 = *(void *)(a1[8] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    uint64_t v20 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v20 + 8) = 1;
    *(void *)uint64_t v20 = &unk_1EE9BF7F8;
    ++*(_DWORD *)(v17 + 8);
    *(void *)(v20 + 16) = v17;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v5 + 4, (uint64_t)v5);
    id v21 = (atomic_uint *)*((void *)v5 + 2);
    atomic_fetch_add(v21, 1u);
    *(void *)(v20 + 24) = v21;
    *(void *)(v20 + 32) = v18;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v19 + 16), v19);
    char v22 = *(atomic_uint **)(v19 + 16);
    atomic_fetch_add(v22, 1u);
    *(void *)(v20 + 40) = v22;
    *(void *)(v20 + 48) = a3;
    atomic_uchar *volatile v23 = *(atomic_uint **)(v20 + 32);
    atomic_fetch_add(v23 + 2, 1u);
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v23, v20, 0x4Au, *(void *)(v20 + 48));
    if (v23 && atomic_fetch_add(v23 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v23 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v19 + 8));
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    WebKit::WebGPU::ObjectHeap::addObject((uint64_t)v5, a3, v20);
    if (atomic_fetch_add((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v20 + 8));
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    goto LABEL_35;
  }
  int v28 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "void WebKit::RemoteCommandEncoder::beginComputePass(const std::optional<WebGPU::Comp"
                                    "utePassDescriptor> &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteCommandEncoder.cpp 103: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
  }
  WebKit::RemoteCommandEncoder::connection((WebKit::RemoteCommandEncoder *)&v53, (uint64_t)a1);
  uint64_t v29 = (atomic_uchar *volatile *)v53;
  if (!v53) {
    goto LABEL_35;
  }
  char v30 = 0;
  *(unsigned char *)(v53 + 98) = 1;
  uint64_t v53 = 0;
  atomic_uchar *volatile v31 = *v29;
  atomic_compare_exchange_strong_explicit(*v29, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
  if (v30) {
    MEMORY[0x19972E8D0](v31);
  }
  uint64_t v32 = *((void *)v31 + 1);
  uint64_t v33 = v32 - 1;
  *((void *)v31 + nw_tcp_options_set_no_delay(options, 1) = v32 - 1;
  if (v32 == 1)
  {
    uint64_t v51 = *((void *)v31 + 2);
    uint64_t v35 = *((void *)v31 + 3);
    *((void *)v31 + 3) = 0;
    BOOL v34 = v51 == 0;
  }
  else
  {
    BOOL v34 = 0;
    uint64_t v35 = 0;
  }
  int v36 = 1;
  atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 == 1)
  {
    if (!v33) {
      goto LABEL_49;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (!v33)
    {
LABEL_49:
      uint64_t v37 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v37 = &unk_1EE9B37E8;
      *(void *)(v37 + 8) = v31;
      *(void *)(v37 + 16) = v35;
      *(unsigned char *)(v37 + 24) = v34;
      *(void *)&long long buf = v37;
      WTF::ensureOnMainRunLoop();
      uint64_t v38 = buf;
      *(void *)&long long buf = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
    }
  }
LABEL_35:
  uint64_t v25 = *(_DWORD **)v59;
  *(void *)uint64_t v59 = 0;
  if (v25)
  {
    if (v25[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
    }
    else {
      --v25[2];
    }
  }
LABEL_39:
  std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v24);
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v26);
}

_DWORD *WebKit::RemoteCommandEncoder::copyBufferToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  ++*(_DWORD *)(v6 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v6, a2, (atomic_uint **)&v13);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v6, a4, (atomic_uint **)&v12);
  if (!v13)
  {
    uint64_t v8 = (unsigned int *)v12;
LABEL_8:
    int v12 = 0;
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v7 = (void *)*((void *)v13 + 1);
  uint64_t v8 = (unsigned int *)v12;
  if (!v7) {
    goto LABEL_8;
  }
  if (!v12) {
    goto LABEL_14;
  }
  if (*((void *)v12 + 1))
  {
    uint64_t v9 = *(_DWORD **)(a1 + 16);
    ++v9[2];
    (*(void (**)(_DWORD *))(*(void *)v9 + 32))(v9);
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
  }
  int v12 = 0;
LABEL_12:
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
LABEL_14:
  uint64_t v10 = (unsigned int *)v13;
  unint64_t v13 = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v7);
  }

  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), v7);
}

unsigned int *WebKit::RemoteCommandEncoder::copyBufferToTexture(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a2, (uint64_t)v16);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a3, (uint64_t)v15);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a4, (uint64_t)v12);
  int v8 = v14;
  if (v18 && v15[56] && v14)
  {
    uint64_t v9 = *(_DWORD **)(a1 + 16);
    ++v9[2];
    (*(void (**)(_DWORD *, unsigned char *, unsigned char *, unsigned char *))(*(void *)v9 + 40))(v9, v16, v15, v12);
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
    int v8 = v14;
  }
  if (v8 && v13 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9BF8E8[v13])(&v19, v12);
  }
  uint64_t result = (unsigned int *)std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
  if (v18)
  {
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v11);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::copyTextureToBuffer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a2, (uint64_t)v18);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a3, (uint64_t)v15);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a4, (uint64_t)v12);
  int v8 = v14;
  if (v18[56] && v17 && v14)
  {
    uint64_t v9 = *(_DWORD **)(a1 + 16);
    ++v9[2];
    (*(void (**)(_DWORD *, unsigned char *, unsigned char *, unsigned char *))(*(void *)v9 + 48))(v9, v18, v15, v12);
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
    int v8 = v14;
  }
  if (v8 && v13 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9BF8E8[v13])(&v19, v12);
  }
  if (v17)
  {
    uint64_t v10 = (unsigned int *)v16;
    unsigned int v16 = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v7);
      }
    }
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v7);
}

uint64_t WebKit::RemoteCommandEncoder::copyTextureToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a2, (uint64_t)v16);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a3, (uint64_t)v15);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a4, (uint64_t)v12);
  int v8 = v14;
  if (v16[56] && v15[56] && v14)
  {
    uint64_t v9 = *(_DWORD **)(a1 + 16);
    ++v9[2];
    (*(void (**)(_DWORD *, unsigned char *, unsigned char *, unsigned char *))(*(void *)v9 + 56))(v9, v16, v15, v12);
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
    int v8 = v14;
  }
  if (v8 && v13 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9BF8E8[v13])(&v17, v12);
  }
  std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
  return std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v10);
}

_DWORD *WebKit::RemoteCommandEncoder::clearBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v10 = (_DWORD *)(v9 + 8);
  ++*(_DWORD *)(v9 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v9, a2, (atomic_uint **)&v16);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v10, v11);
  int v13 = (unsigned int *)v16;
  if (v16)
  {
    unsigned __int8 v14 = (void *)*((void *)v16 + 1);
    if (v14)
    {
      unint64_t v15 = *(_DWORD **)(a1 + 16);
      ++v15[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void *, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 64))(v15, v14, a3, a4, a5);
      if (v15[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      }
      else {
        --v15[2];
      }
    }
    unsigned int v16 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      return (_DWORD *)WTF::fastFree((WTF *)v13, v14);
    }
  }
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::pushDebugGroup(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 72))(v1);
  if (v1[2] == 1)
  {
    unsigned int v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::popDebugGroup(WebKit::RemoteCommandEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 80))(v1);
  if (v1[2] == 1)
  {
    unsigned int v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::insertDebugMarker(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 88))(v1);
  if (v1[2] == 1)
  {
    unsigned int v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteCommandEncoder::writeTimestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertQuerySetFromBacking(v5, a2, (atomic_uint **)&v12);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  uint64_t v9 = (unsigned int *)v12;
  if (v12)
  {
    uint64_t v10 = (void *)*((void *)v12 + 1);
    if (v10)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 16);
      ++v11[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)v11 + 96))(v11, v10, a3);
      if (v11[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      }
      else {
        --v11[2];
      }
    }
    int v12 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      return (_DWORD *)WTF::fastFree((WTF *)v9, v10);
    }
  }
  return result;
}

_DWORD *WebKit::RemoteCommandEncoder::resolveQuerySet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  ++*(_DWORD *)(v7 + 8);
  WebKit::WebGPU::ObjectHeap::convertQuerySetFromBacking(v7, a2, (atomic_uint **)&v14);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v7, a5, (atomic_uint **)&v13);
  if (!v14)
  {
    uint64_t v9 = (unsigned int *)v13;
LABEL_8:
    int v13 = 0;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  int v8 = (void *)*((void *)v14 + 1);
  uint64_t v9 = (unsigned int *)v13;
  if (!v8) {
    goto LABEL_8;
  }
  if (!v13) {
    goto LABEL_14;
  }
  if (*((void *)v13 + 1))
  {
    uint64_t v10 = *(_DWORD **)(a1 + 16);
    ++v10[2];
    (*(void (**)(_DWORD *))(*(void *)v10 + 104))(v10);
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[2];
    }
  }
  int v13 = 0;
LABEL_12:
  if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
LABEL_14:
  uint64_t v11 = (unsigned int *)v14;
  unsigned __int8 v14 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v8);
  }

  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v7 + 8), v8);
}

_DWORD *WebKit::RemoteCommandEncoder::finish(void *a1, WTF::StringImpl **a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1[3] + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  uint64_t v7 = *a2;
  if (*a2) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v32 = v7;
  char v33 = 1;
  int v8 = (_DWORD *)a1[2];
  ++v8[2];
  (*(void (**)(_DWORD **__return_ptr, _DWORD *, WTF::StringImpl **))(*(void *)v8 + 112))(&v31, v8, &v32);
  if (v8[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  else {
    --v8[2];
  }
  uint64_t v9 = (uint64_t)v31;
  if (v31)
  {
    uint64_t v10 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    *(void *)long long buf = v10;
    uint64_t v11 = *(atomic_uint **)(a1[8] + 8);
    atomic_fetch_add(v11 + 2, 1u);
    int v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteCommandBuffer::RemoteCommandBuffer((uint64_t)v12, v9, v5, (uint64_t *)buf, (uint64_t)v11, a3);
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v11 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
    }
    int v13 = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v12);
    if (atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    char v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteCommandEncoder::finish(const WebGPU::CommandBufferDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteCommandEncoder.cpp 240: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteCommandEncoder::connection((WebKit::RemoteCommandEncoder *)&v30, (uint64_t)a1);
    char v19 = (atomic_uchar *volatile *)v30;
    if (v30)
    {
      char v20 = 0;
      *(unsigned char *)(v30 + 98) = 1;
      uint64_t v30 = 0;
      atomic_uchar *volatile v21 = *v19;
      atomic_compare_exchange_strong_explicit(*v19, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
      if (v20) {
        MEMORY[0x19972E8D0](v21);
      }
      uint64_t v22 = *((void *)v21 + 1);
      uint64_t v23 = v22 - 1;
      *((void *)v21 + nw_tcp_options_set_no_delay(options, 1) = v22 - 1;
      if (v22 == 1)
      {
        uint64_t v29 = *((void *)v21 + 2);
        uint64_t v25 = *((void *)v21 + 3);
        *((void *)v21 + 3) = 0;
        BOOL v24 = v29 == 0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = 0;
      }
      int v26 = 1;
      atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
      if (v26 == 1)
      {
        if (v23) {
          goto LABEL_14;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
        if (v23) {
          goto LABEL_14;
        }
      }
      uint64_t v27 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v27 = &unk_1EE9B37E8;
      *(void *)(v27 + 8) = v21;
      *(void *)(v27 + 16) = v25;
      *(unsigned char *)(v27 + 24) = v24;
      *(void *)long long buf = v27;
      WTF::ensureOnMainRunLoop();
      uint64_t v28 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
  }
LABEL_14:
  unint64_t v15 = v31;
  atomic_uchar *volatile v31 = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  if (v33)
  {
    unsigned int v16 = v32;
    uint64_t v32 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v14);
}

uint64_t WebKit::RemoteCommandEncoder::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 120))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    char v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

void WebKit::RemoteCompositorIntegration::~RemoteCompositorIntegration(WebKit::RemoteCompositorIntegration *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCompositorIntegration::~RemoteCompositorIntegration(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(_DWORD **)(a1 + 16);
  ++v6[2];
  uint64_t v7 = *(atomic_uint **)(a1 + 40);
  atomic_fetch_add(v7, 1u);
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v9 = &unk_1EE9BF990;
  v9[1] = v7;
  v9[2] = a2;
  uint64_t v9[3] = v8;
  uint64_t v11 = v9;
  (*(void (**)(_DWORD *, uint64_t, void **))(*(void *)v6 + 32))(v6, a3, &v11);
  uint64_t result = (uint64_t)v11;
  uint64_t v11 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v6[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  --v6[2];
  return result;
}

void *WebKit::RemoteCompositorIntegration::stopListeningForIPC(WebKit::RemoteCompositorIntegration *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x49u, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    unsigned int v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteCompositorIntegration::recreateRenderBuffers(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(a1[3] + 8);
  unsigned int v16 = (_DWORD *)(v15 + 8);
  ++*(_DWORD *)(v15 + 8);
  WebKit::WebGPU::ObjectHeap::convertDeviceFromBacking(v15, a7, &v44);
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v16, v17);
  char v18 = (unsigned int *)v44;
  if (!v44 || !*((void *)v44 + 1))
  {
    BOOL v24 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteCompositorIntegration::recreateRenderBuffers(int, int, WebCore::Destinatio"
                           "nColorSpace &&, WebCore::AlphaPremultiplication, WebCore::WebGPU::TextureFormat, WebKit::WebG"
                           "PUIdentifier, CompletionHandler<void (Vector<MachSendRight> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteCompositorIntegration.cpp 89: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v25 = *(void *)(a1[5] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v25 + 8), 1u);
    int v26 = *(atomic_uchar **)(v25 + 24);
    if (v26) {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v26, *(void *)(v25 + 32), buf);
    }
    else {
      *(void *)long long buf = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v25 + 8));
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    char v27 = 0;
    uint64_t v28 = *(void *)(*(void *)buf + 56);
    atomic_uchar *volatile v29 = *(atomic_uchar *volatile *)v28;
    int v30 = 1;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v28, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
    if (v27) {
      MEMORY[0x19972E8D0](v29);
    }
    ++*((void *)v29 + 1);
    atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
    if (v30 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
    }
    uint64_t v31 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v31) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v31 + 16));
    }
    char v32 = 0;
    *(unsigned char *)(v28 + 98) = 1;
    atomic_uchar *volatile v33 = *(atomic_uchar *volatile *)v28;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v28, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](v33);
    }
    uint64_t v34 = *((void *)v33 + 1);
    uint64_t v35 = v34 - 1;
    *((void *)v33 + nw_tcp_options_set_no_delay(options, 1) = v34 - 1;
    if (v34 == 1)
    {
      uint64_t v43 = *((void *)v33 + 2);
      uint64_t v37 = *((void *)v33 + 3);
      *((void *)v33 + 3) = 0;
      BOOL v36 = v43 == 0;
    }
    else
    {
      BOOL v36 = 0;
      uint64_t v37 = 0;
    }
    int v38 = 1;
    atomic_compare_exchange_strong_explicit(v33, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
    if (v38 == 1)
    {
      if (v35) {
        goto LABEL_30;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
      if (v35) {
        goto LABEL_30;
      }
    }
    uint64_t v39 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v39 = &unk_1EE9B37E8;
    *(void *)(v39 + 8) = v33;
    *(void *)(v39 + 16) = v37;
    *(unsigned char *)(v39 + 24) = v36;
    *(void *)long long buf = v39;
    WTF::ensureOnMainRunLoop();
    uint64_t v40 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
LABEL_30:
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v41 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v41 + 16))(v41, buf);
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    uint64_t result = WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v42);
    char v18 = (unsigned int *)v44;
    uint64_t v44 = 0;
    if (!v18) {
      return result;
    }
    goto LABEL_7;
  }
  char v19 = (_DWORD *)a1[2];
  ++v19[2];
  (*(void (**)(uint8_t *__return_ptr, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(buf, v19, a2, a3, a4, a5, a6);
  uint64_t v20 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v20 + 16))(v20, buf);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  uint64_t result = WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v21);
  if (v19[2] == 1) {
    uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v19 + 8))(v19);
  }
  else {
    --v19[2];
  }
  uint64_t v44 = 0;
LABEL_7:
  if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    return WTF::fastFree((WTF *)v18, v23);
  }
  return result;
}

uint64_t WebKit::RemoteCompositorIntegration::prepareForDisplay(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  ++v2[2];
  uint64_t v3 = *a2;
  *a2 = 0;
  char v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v4 = &unk_1EE9BF9B8;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(_DWORD *, void **))(*(void *)v2 + 24))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v2[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  --v2[2];
  return result;
}

void WebKit::RemoteComputePassEncoder::~RemoteComputePassEncoder(WebKit::RemoteComputePassEncoder *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteComputePassEncoder::~RemoteComputePassEncoder(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteComputePassEncoder::stopListeningForIPC(WebKit::RemoteComputePassEncoder *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x4Au, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

_DWORD *WebKit::RemoteComputePassEncoder::setPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8);
  char v4 = (_DWORD *)(v3 + 8);
  ++*(_DWORD *)(v3 + 8);
  WebKit::WebGPU::ObjectHeap::convertComputePipelineFromBacking(v3, a2, (atomic_uint **)&v10);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v4, v5);
  uint64_t v7 = (unsigned int *)v10;
  if (v10)
  {
    uint64_t v8 = (void *)*((void *)v10 + 1);
    if (v8)
    {
      uint64_t v9 = *(_DWORD **)(a1 + 16);
      ++v9[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 16))(v9);
      if (v9[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    uint64_t v10 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      return (_DWORD *)WTF::fastFree((WTF *)v7, v8);
    }
  }
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::dispatch(WebKit::RemoteComputePassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 24))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteComputePassEncoder::dispatchIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v5, a2, (atomic_uint **)&v12);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  uint64_t v9 = (unsigned int *)v12;
  if (v12)
  {
    uint64_t v10 = (void *)*((void *)v12 + 1);
    if (v10)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 16);
      ++v11[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)v11 + 32))(v11, v10, a3);
      if (v11[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      }
      else {
        --v11[2];
      }
    }
    int v12 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      return (_DWORD *)WTF::fastFree((WTF *)v9, v10);
    }
  }
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::end(WebKit::RemoteComputePassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 40))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteComputePassEncoder::setBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v8 = (_DWORD *)(v7 + 8);
  ++*(_DWORD *)(v7 + 8);
  WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking(v7, a3, (atomic_uint **)&v15);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v8, v9);
  int v12 = (unsigned int *)v15;
  if (v15)
  {
    uint64_t v13 = *((void *)v15 + 1);
    if (v13)
    {
      unsigned __int8 v14 = *(_DWORD **)(a1 + 16);
      ++v14[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, a2, v13, a4);
      if (v14[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    uint64_t v15 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      return (_DWORD *)WTF::fastFree((WTF *)v12, v11);
    }
  }
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::pushDebugGroup(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 64))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::popDebugGroup(WebKit::RemoteComputePassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 72))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::insertDebugMarker(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 80))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 88))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    char v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteComputePipeline::RemoteComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF820;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  unsigned __int8 v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x4Bu, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteComputePipeline::~RemoteComputePipeline(WebKit::RemoteComputePipeline *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteComputePipeline::~RemoteComputePipeline(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteComputePipeline::stopListeningForIPC(WebKit::RemoteComputePipeline *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x4Bu, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

_DWORD *WebKit::RemoteComputePipeline::getBindGroupLayout(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1[3] + 8);
  ++*(_DWORD *)(v5 + 8);
  uint64_t v6 = (_DWORD *)a1[2];
  ++v6[2];
  (*(void (**)(_DWORD **__return_ptr, _DWORD *))(*(void *)v6 + 16))(&v16, v6);
  if (v6[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  else {
    --v6[2];
  }
  uint64_t v7 = (uint64_t)v16;
  uint64_t v8 = a1[4];
  atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  uint64_t v15 = (unsigned int *)v8;
  uint64_t v9 = *(atomic_uint **)(a1[5] + 8);
  atomic_fetch_add(v9 + 2, 1u);
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout((uint64_t)v10, v7, v5, (uint64_t *)&v15, (uint64_t)v9, a3);
  if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
  }
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
  }
  WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v10);
  if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  uint64_t v13 = v16;
  unsigned int v16 = 0;
  if (v13)
  {
    if (v13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
    }
    else {
      --v13[2];
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v5 + 8), v12);
}

uint64_t WebKit::RemoteComputePipeline::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 24))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    char v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteDevice::RemoteDevice(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF848;
  ++a4[2];
  *(void *)(a1 + 16) = a4;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  unsigned int v16 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v16, 1u);
  *(void *)(a1 + 24) = v16;
  uint64_t v17 = *a6;
  atomic_fetch_add((atomic_uint *volatile)(*a6 + 8), 1u);
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = a7;
  (*(void (**)(_DWORD **__return_ptr, _DWORD *))(*(void *)a4 + 16))(&v25, a4);
  uint64_t v18 = (uint64_t)v25;
  uint64_t v19 = WTF::fastMalloc((WTF *)0x38);
  *(void *)(a1 + 48) = WebKit::RemoteQueue::RemoteQueue(v19, v18, a5, a6, a3, a8);
  uint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20)
  {
    if (v20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
    }
    else {
      --v20[2];
    }
  }
  uint64_t v21 = a2[25];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v21 + 16));
  *(void *)(a1 + 56) = v21;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v21 + 16));
  *(void *)(a1 + 64) = v21;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 72), (const WTF::MachSendRight *)(a2 + 12));
  *(unsigned char *)(a1 + 76) = 1;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  uint64_t v22 = (atomic_uchar *)a2[2];
  if (v22) {
    uint64_t v22 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v22);
  }
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v23 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v23, 1u);
  *(void *)(a1 + 160) = v23;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x4Cu, *(void *)(a1 + 40));
  return a1;
}

void WebKit::RemoteDevice::~RemoteDevice(WebKit::RemoteDevice *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (atomic_uchar *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteDevice *)((char *)this + 64));
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8 + 2);
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v5);
  }
  uint64_t v10 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10)
  {
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteDevice::~RemoteDevice(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteDevice::connection(WebKit::RemoteDevice *this, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a2 + 144);
  if (result
    && (uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a2 + 152), &v11), v11))
  {
    char v4 = 0;
    uint64_t v5 = *(atomic_uchar *volatile **)(v11 + 56);
    uint64_t result = *v5;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4)
    {
      uint64_t v8 = result;
      uint64_t v9 = v5;
      MEMORY[0x19972E8D0]();
      int v6 = 1;
      uint64_t result = v8;
      uint64_t v5 = v9;
    }
    ++*((void *)result + 1);
    atomic_compare_exchange_strong_explicit(result, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      uint64_t v10 = v5;
      uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)result);
      uint64_t v5 = v10;
    }
    uint64_t v7 = v11;
    *(void *)this = v5;
    uint64_t v11 = 0;
    if (v7) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
    }
  }
  else
  {
    *(void *)this = 0;
  }
  return result;
}

_DWORD *WebKit::RemoteDevice::createXRBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  ++*(_DWORD *)(v4 + 8);
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 16) + 32))(&v14);
  uint64_t v5 = (uint64_t)v14;
  int v6 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
  atomic_fetch_add(v6 + 2, 1u);
  uint64_t v7 = *(void *)(a1 + 32);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  uint64_t v13 = (unsigned int *)v7;
  uint64_t v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteXRBinding::RemoteXRBinding((uint64_t)v8, v5, v4, (uint64_t)v6, (uint64_t *)&v13, a2);
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
  }
  if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  WebKit::WebGPU::ObjectHeap::addObject(v4, a2, (uint64_t)v8);
  if (atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8 + 2);
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v11 = v14;
  unsigned __int8 v14 = 0;
  if (v11)
  {
    if (v11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), v10);
}

_DWORD *WebKit::RemoteDevice::createBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v7 = (_DWORD *)(v6 + 8);
  ++*(_DWORD *)(v6 + 8);
  uint64_t v8 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  __int16 v10 = *(_WORD *)(a2 + 16);
  char v11 = *(unsigned char *)(a2 + 18);
  BOOL v36 = v8;
  uint64_t v37 = v9;
  __int16 v38 = v10;
  char v39 = v11;
  char v40 = 1;
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 16) + 40))(&v35);
  uint64_t v12 = (uint64_t)v35;
  if (v35)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
    *(void *)long long buf = v13;
    unsigned __int8 v14 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
    atomic_fetch_add(v14 + 2, 1u);
    int v15 = *(unsigned __int8 *)(a2 + 18);
    unsigned int v16 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
    WebKit::RemoteBuffer::RemoteBuffer((uint64_t)v16, v12, v6, (uint64_t *)buf, (uint64_t)v14, v15, a3);
    if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v14 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
    }
    uint64_t v17 = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (v17 && atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v6, a3, (uint64_t)v16);
    if (atomic_fetch_add((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(void *)v16 + 8))(v16);
    }
  }
  else
  {
    uint64_t v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createBuffer(const WebGPU::BufferDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 157: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v34, a1);
    uint64_t v23 = (atomic_uchar *volatile *)v34;
    if (v34)
    {
      char v24 = 0;
      *(unsigned char *)(v34 + 98) = 1;
      uint64_t v34 = 0;
      atomic_uchar *volatile v25 = *v23;
      atomic_compare_exchange_strong_explicit(*v23, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
      if (v24) {
        MEMORY[0x19972E8D0](v25);
      }
      uint64_t v26 = *((void *)v25 + 1);
      uint64_t v27 = v26 - 1;
      *((void *)v25 + nw_tcp_options_set_no_delay(options, 1) = v26 - 1;
      if (v26 == 1)
      {
        uint64_t v33 = *((void *)v25 + 2);
        uint64_t v29 = *((void *)v25 + 3);
        *((void *)v25 + 3) = 0;
        BOOL v28 = v33 == 0;
      }
      else
      {
        BOOL v28 = 0;
        uint64_t v29 = 0;
      }
      int v30 = 1;
      atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
      if (v30 == 1)
      {
        if (v27) {
          goto LABEL_11;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v25);
        if (v27) {
          goto LABEL_11;
        }
      }
      uint64_t v31 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v31 = &unk_1EE9B37E8;
      *(void *)(v31 + 8) = v25;
      *(void *)(v31 + 16) = v29;
      *(unsigned char *)(v31 + 24) = v28;
      *(void *)long long buf = v31;
      WTF::ensureOnMainRunLoop();
      uint64_t v32 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
    }
  }
LABEL_11:
  uint64_t v19 = v35;
  uint64_t v35 = 0;
  if (v19)
  {
    if (v19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
  }
  if (v40)
  {
    uint64_t v20 = v36;
    BOOL v36 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v18);
}

_DWORD *WebKit::RemoteDevice::createTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, (uint64_t)&v46);
  if (v51)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 48))(&v45);
    if (v45)
    {
      uint64_t v7 = *(atomic_uchar **)(a1 + 144);
      if (v7)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *(void *)(a1 + 152), buf);
        uint64_t v8 = *(void *)buf;
      }
      else
      {
        uint64_t v8 = 0;
        *(void *)long long buf = 0;
      }
      uint64_t v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      __int16 v10 = (_DWORD *)v45;
      uint64_t v11 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
      uint64_t v44 = v11;
      uint64_t v45 = 0;
      uint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
      WebKit::RemoteTexture::RemoteTexture((uint64_t)v12, v8, (uint64_t)v9, (uint64_t)v10, v5, &v44, a3);
      uint64_t v13 = (unsigned int *)v44;
      uint64_t v44 = 0;
      if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
      }
      if (v10[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
      else {
        --v10[2];
      }
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v14 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v14) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v12);
      if (atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
      }
      goto LABEL_17;
    }
    uint64_t v31 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createTexture(const WebGPU::TextureDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 169: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v44, a1);
    uint64_t v32 = (atomic_uchar *volatile *)v44;
    if (!v44) {
      goto LABEL_17;
    }
    char v33 = 0;
    *(unsigned char *)(v44 + 98) = 1;
    uint64_t v44 = 0;
    atomic_uchar *volatile v34 = *v32;
    atomic_compare_exchange_strong_explicit(*v32, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
    if (v33) {
      MEMORY[0x19972E8D0](v34);
    }
    uint64_t v35 = *((void *)v34 + 1);
    uint64_t v36 = v35 - 1;
    *((void *)v34 + nw_tcp_options_set_no_delay(options, 1) = v35 - 1;
    if (v35 == 1)
    {
      uint64_t v43 = *((void *)v34 + 2);
      uint64_t v38 = *((void *)v34 + 3);
      *((void *)v34 + 3) = 0;
      BOOL v37 = v43 == 0;
    }
    else
    {
      BOOL v37 = 0;
      uint64_t v38 = 0;
    }
    int v39 = 1;
    atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 == 1)
    {
      if (!v36) {
        goto LABEL_52;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v34);
      if (!v36)
      {
LABEL_52:
        uint64_t v40 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v40 = &unk_1EE9B37E8;
        *(void *)(v40 + 8) = v34;
        *(void *)(v40 + 16) = v38;
        *(unsigned char *)(v40 + 24) = v37;
        *(void *)long long buf = v40;
        WTF::ensureOnMainRunLoop();
        uint64_t v41 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v41) {
          (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
        }
      }
    }
LABEL_17:
    unsigned int v16 = (_DWORD *)v45;
    uint64_t v45 = 0;
    if (v16)
    {
      if (v16[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
      }
      else {
        --v16[2];
      }
    }
    goto LABEL_21;
  }
  uint64_t v20 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createTexture(const WebGPU::TextureDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 166: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v45, a1);
  uint64_t v21 = (atomic_uchar *volatile *)v45;
  if (v45)
  {
    char v22 = 0;
    *(unsigned char *)(v45 + 98) = 1;
    uint64_t v45 = 0;
    atomic_uchar *volatile v23 = *v21;
    atomic_compare_exchange_strong_explicit(*v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
    if (v22) {
      MEMORY[0x19972E8D0](v23);
    }
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v25 = v24 - 1;
    *((void *)v23 + nw_tcp_options_set_no_delay(options, 1) = v24 - 1;
    if (v24 == 1)
    {
      uint64_t v42 = *((void *)v23 + 2);
      uint64_t v27 = *((void *)v23 + 3);
      *((void *)v23 + 3) = 0;
      BOOL v26 = v42 == 0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = 0;
    }
    int v28 = 1;
    atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 == 1)
    {
      if (v25) {
        goto LABEL_21;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v25) {
        goto LABEL_21;
      }
    }
    uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v29 = &unk_1EE9B37E8;
    *(void *)(v29 + 8) = v23;
    *(void *)(v29 + 16) = v27;
    *(unsigned char *)(v29 + 24) = v26;
    *(void *)long long buf = v29;
    WTF::ensureOnMainRunLoop();
    uint64_t v30 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
LABEL_21:
  if (v51)
  {
    uint64_t v17 = v49;
    if (v49)
    {
      uint64_t v49 = 0;
      int v50 = 0;
      WTF::fastFree(v17, v15);
    }
    if (v48 != -1) {
      ((void (*)(uint8_t *, uint64_t *))off_1EE9BF8E8[v48])(buf, &v47);
    }
    int v48 = -1;
    uint64_t v18 = v46;
    uint64_t v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v15);
}

_DWORD *WebKit::RemoteDevice::createSampler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  uint64_t v7 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v7 += 2;
  }
  __int16 v8 = *(_WORD *)(a2 + 12);
  int v9 = *(_DWORD *)(a2 + 24);
  char v33 = v7;
  int v34 = *(_DWORD *)(a2 + 8);
  __int16 v35 = v8;
  uint64_t v36 = *(void *)(a2 + 16);
  int v37 = v9;
  char v38 = 1;
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 16) + 56))(&v32);
  uint64_t v10 = (uint64_t)v32;
  if (v32)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    *(void *)long long buf = v11;
    uint64_t v12 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
    atomic_fetch_add(v12 + 2, 1u);
    uint64_t v13 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteSampler::RemoteSampler((uint64_t)v13, v10, v5, (uint64_t *)buf, (uint64_t)v12, a3);
    if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v12 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v14 = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (v14 && atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v13);
    if (atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createSampler(const WebGPU::SamplerDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 181: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v31, a1);
    uint64_t v20 = (atomic_uchar *volatile *)v31;
    if (v31)
    {
      char v21 = 0;
      *(unsigned char *)(v31 + 98) = 1;
      uint64_t v31 = 0;
      atomic_uchar *volatile v22 = *v20;
      atomic_compare_exchange_strong_explicit(*v20, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
      if (v21) {
        MEMORY[0x19972E8D0](v22);
      }
      uint64_t v23 = *((void *)v22 + 1);
      uint64_t v24 = v23 - 1;
      *((void *)v22 + nw_tcp_options_set_no_delay(options, 1) = v23 - 1;
      if (v23 == 1)
      {
        uint64_t v30 = *((void *)v22 + 2);
        uint64_t v26 = *((void *)v22 + 3);
        *((void *)v22 + 3) = 0;
        BOOL v25 = v30 == 0;
      }
      else
      {
        BOOL v25 = 0;
        uint64_t v26 = 0;
      }
      int v27 = 1;
      atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
      if (v27 == 1)
      {
        if (v24) {
          goto LABEL_11;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v22);
        if (v24) {
          goto LABEL_11;
        }
      }
      uint64_t v28 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v28 = &unk_1EE9B37E8;
      *(void *)(v28 + 8) = v22;
      *(void *)(v28 + 16) = v26;
      *(unsigned char *)(v28 + 24) = v25;
      *(void *)long long buf = v28;
      WTF::ensureOnMainRunLoop();
      uint64_t v29 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
    }
  }
LABEL_11:
  unsigned int v16 = v32;
  uint64_t v32 = 0;
  if (v16)
  {
    if (v16[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
    }
    else {
      --v16[2];
    }
  }
  if (v38)
  {
    uint64_t v17 = v33;
    char v33 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v15);
}

IPC::Semaphore *WebKit::RemoteDevice::setSharedVideoFrameSemaphore(uint64_t a1, IPC::Semaphore *a2)
{
  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(a1 + 80), a2);
}

BOOL WebKit::RemoteDevice::setSharedVideoFrameMemory(uint64_t a1)
{
  return WebKit::SharedVideoFrameReader::setSharedMemory(a1 + 64);
}

void WebKit::RemoteDevice::importExternalTextureFromVideoFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  LOBYTE(v58) = 0;
  char v62 = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    long long v58 = *(_OWORD *)(a2 + 32);
    int v59 = *(_DWORD *)(a2 + 48);
    v60[0] = 0;
    int v61 = -1;
    uint64_t v6 = *(unsigned int *)(a2 + 72);
    if (v6 != -1)
    {
      ((void (*)(WTF::StringImpl **, unsigned char *, uint64_t))off_1EE9BF928[v6])(v64, v60, a2 + 56);
      int v61 = v6;
    }
    char v62 = 1;
    CFTypeRef cf = 0;
    WebKit::SharedVideoFrameReader::read(a1 + 64, (uint64_t)&v58, v64);
    uint64_t v7 = (unsigned int *)v64[0];
    if (v64[0])
    {
      __int16 v8 = (const void *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v64[0] + 56))(v64[0]);
      int v9 = v8;
      if (v8) {
        CFRetain(v8);
      }
      CFTypeRef cf = v9;
      v64[0] = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
      }
    }
  }
  else
  {
    CFTypeRef cf = 0;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v10 = *(atomic_uchar **)(a1 + 144);
      if (v10)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v10, *(void *)(a1 + 152), v64);
        BOOL v25 = v64[0];
        if (v64[0])
        {
          if (!*(unsigned char *)(a2 + 16)) {
            __break(1u);
          }
          uint64_t v26 = *(void *)(a2 + 8);
          int v27 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v27 = &unk_1EE9BF9E0;
          v27[1] = &cf;
          *(void *)long long buf = v27;
          WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread((uint64_t)v25, v26, (uint64_t)buf);
          uint64_t v28 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
          uint64_t v29 = v64[0];
          v64[0] = 0;
          if (v29) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v29 + 2));
          }
        }
      }
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v12 = (_DWORD *)(v11 + 8);
  ++*(_DWORD *)(v11 + 8);
  CFTypeRef v13 = cf;
  CFTypeRef v56 = cf;
  if (cf)
  {
    CFRetain(cf);
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, &v56, (uint64_t)v64);
    CFRelease(v13);
  }
  else
  {
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, &v56, (uint64_t)v64);
  }
  CFTypeRef v56 = 0;
  if (v67)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 64))(&v55);
    uint64_t v14 = v55;
    if (v55)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
      uint64_t v16 = *(void *)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u);
      uint64_t v17 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v17 + 8) = 1;
      *(void *)uint64_t v17 = &unk_1EE9BF870;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v14 + 8));
      *(void *)(v17 + 16) = v14;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v11 + 16), v11);
      uint64_t v18 = *(atomic_uint **)(v11 + 16);
      atomic_fetch_add(v18, 1u);
      *(void *)(v17 + 24) = v18;
      *(void *)(v17 + 32) = v15;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v16 + 16), v16);
      uint64_t v19 = *(atomic_uint **)(v16 + 16);
      atomic_fetch_add(v19, 1u);
      *(void *)(v17 + 40) = v19;
      *(void *)(v17 + 48) = a3;
      uint64_t v20 = *(atomic_uint **)(v17 + 32);
      atomic_fetch_add(v20 + 2, 1u);
      IPC::StreamServerConnection::startReceivingMessages((uint64_t)v20, v17, 0x4Eu, *(void *)(v17 + 48));
      if (v20 && atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v20 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v16 + 8));
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v11, a3, v17);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v17 + 8));
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      goto LABEL_23;
    }
    uint64_t v41 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::importExternalTextureFromVideoFrame(const WebGPU::ExternalTextureD"
                           "escriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 220: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v54, a1);
    uint64_t v42 = (atomic_uchar *volatile *)v54;
    if (!v54) {
      goto LABEL_23;
    }
    char v43 = 0;
    *(unsigned char *)(v54 + 98) = 1;
    uint64_t v54 = 0;
    atomic_uchar *volatile v44 = *v42;
    atomic_compare_exchange_strong_explicit(*v42, (unsigned __int8 *)&v43, 1u, memory_order_acquire, memory_order_acquire);
    if (v43) {
      MEMORY[0x19972E8D0](v44);
    }
    uint64_t v45 = *((void *)v44 + 1);
    uint64_t v46 = v45 - 1;
    *((void *)v44 + nw_tcp_options_set_no_delay(options, 1) = v45 - 1;
    if (v45 == 1)
    {
      uint64_t v53 = *((void *)v44 + 2);
      uint64_t v48 = *((void *)v44 + 3);
      *((void *)v44 + 3) = 0;
      BOOL v47 = v53 == 0;
    }
    else
    {
      BOOL v47 = 0;
      uint64_t v48 = 0;
    }
    int v49 = 1;
    atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
    if (v49 == 1)
    {
      if (!v46) {
        goto LABEL_64;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v44);
      if (!v46)
      {
LABEL_64:
        uint64_t v50 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v50 = &unk_1EE9B37E8;
        *(void *)(v50 + 8) = v44;
        *(void *)(v50 + 16) = v48;
        *(unsigned char *)(v50 + 24) = v47;
        *(void *)long long buf = v50;
        WTF::ensureOnMainRunLoop();
        uint64_t v51 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v51) {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
      }
    }
LABEL_23:
    uint64_t v22 = v55;
    uint64_t v55 = 0;
    if (v22) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v22 + 8), v21);
    }
    goto LABEL_25;
  }
  uint64_t v30 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::importExternalTextureFromVideoFrame(const WebGPU::ExternalTextureDes"
                         "criptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 217: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v55, a1);
  uint64_t v31 = (atomic_uchar *volatile *)v55;
  if (v55)
  {
    char v32 = 0;
    *(unsigned char *)(v55 + 98) = 1;
    uint64_t v55 = 0;
    atomic_uchar *volatile v33 = *v31;
    atomic_compare_exchange_strong_explicit(*v31, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](v33);
    }
    uint64_t v34 = *((void *)v33 + 1);
    uint64_t v35 = v34 - 1;
    *((void *)v33 + nw_tcp_options_set_no_delay(options, 1) = v34 - 1;
    if (v34 == 1)
    {
      uint64_t v52 = *((void *)v33 + 2);
      uint64_t v37 = *((void *)v33 + 3);
      *((void *)v33 + 3) = 0;
      BOOL v36 = v52 == 0;
    }
    else
    {
      BOOL v36 = 0;
      uint64_t v37 = 0;
    }
    int v38 = 1;
    atomic_compare_exchange_strong_explicit(v33, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
    if (v38 == 1)
    {
      if (v35) {
        goto LABEL_25;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
      if (v35) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v39 = &unk_1EE9B37E8;
    *(void *)(v39 + 8) = v33;
    *(void *)(v39 + 16) = v37;
    *(unsigned char *)(v39 + 24) = v36;
    *(void *)long long buf = v39;
    WTF::ensureOnMainRunLoop();
    uint64_t v40 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
  }
LABEL_25:
  if (v67)
  {
    if (v66 != -1) {
      ((void (*)(uint8_t *, uint64_t *))off_1EE9BF948[v66])(buf, &v65);
    }
    int v66 = -1;
    uint64_t v23 = v64[0];
    v64[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v12, v21);
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    CFRelease(v24);
  }
  if (v62)
  {
    if (v61 != -1) {
      ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9BF908[v61])(v64, v60);
    }
  }
}

atomic_uchar *WebKit::RemoteDevice::updateExternalTexture(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1[3] + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertExternalTextureFromBacking(v5, a2, (atomic_uchar **)&v23);
  uint64_t result = (atomic_uchar *)WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  int v9 = v23;
  if (v23)
  {
    uint64_t v10 = v24;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v23, v24, &v22);
    uint64_t v12 = v22;
    uint64_t v22 = 0;
    if (v12)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 8), v11);
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v9, v10, &v22);
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      uint64_t v13 = v22;
      uint64_t v22 = 0;
      if (v13) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v11);
      }
      uint64_t v14 = (atomic_uchar *)a1[18];
      if (v14)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v14, a1[19], &v22);
        uint64_t v15 = v22;
        if (v22)
        {
          uint64_t v16 = *a3;
          uint64_t v17 = WTF::ThreadSafeWeakPtrControlBlock::weakRef((atomic_uchar *)v9);
          uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v18 = &unk_1EE9BFA08;
          v18[1] = v17;
          _DWORD v18[2] = v10;
          char v21 = v18;
          WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(v15, v16, (uint64_t)&v21);
          uint64_t v19 = v21;
          char v21 = 0;
          if (v19) {
            (*(void (**)(void *))(*v19 + 8))(v19);
          }
          uint64_t v20 = v22;
          uint64_t v22 = 0;
          if (v20) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v20 + 16));
          }
        }
      }
    }
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v9, v11);
  }
  return result;
}

_DWORD *WebKit::RemoteDevice::createBindGroupLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, (uint64_t)&v43);
  if (v46)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 80))(&v42);
    uint64_t v7 = v42;
    if (v42)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      *(void *)long long buf = v8;
      int v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
      WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout((uint64_t)v10, v7, v5, (uint64_t *)buf, (uint64_t)v9, a3);
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v11 = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v10);
      if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_10;
    }
    uint64_t v28 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createBindGroupLayout(const WebGPU::BindGroupLayoutDescriptor &, W"
                           "ebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 252: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v41, a1);
    uint64_t v29 = (atomic_uchar *volatile *)v41;
    if (!v41) {
      goto LABEL_10;
    }
    char v30 = 0;
    *(unsigned char *)(v41 + 98) = 1;
    uint64_t v41 = 0;
    atomic_uchar *volatile v31 = *v29;
    atomic_compare_exchange_strong_explicit(*v29, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
    if (v30) {
      MEMORY[0x19972E8D0](v31);
    }
    uint64_t v32 = *((void *)v31 + 1);
    uint64_t v33 = v32 - 1;
    *((void *)v31 + nw_tcp_options_set_no_delay(options, 1) = v32 - 1;
    if (v32 == 1)
    {
      uint64_t v40 = *((void *)v31 + 2);
      uint64_t v35 = *((void *)v31 + 3);
      *((void *)v31 + 3) = 0;
      BOOL v34 = v40 == 0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = 0;
    }
    int v36 = 1;
    atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
    if (v36 == 1)
    {
      if (!v33) {
        goto LABEL_42;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
      if (!v33)
      {
LABEL_42:
        uint64_t v37 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v37 = &unk_1EE9B37E8;
        *(void *)(v37 + 8) = v31;
        *(void *)(v37 + 16) = v35;
        *(unsigned char *)(v37 + 24) = v34;
        *(void *)long long buf = v37;
        WTF::ensureOnMainRunLoop();
        uint64_t v38 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
    }
LABEL_10:
    uint64_t v13 = (_DWORD *)v42;
    uint64_t v42 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    goto LABEL_14;
  }
  uint64_t v17 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createBindGroupLayout(const WebGPU::BindGroupLayoutDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 249: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v42, a1);
  uint64_t v18 = (atomic_uchar *volatile *)v42;
  if (v42)
  {
    char v19 = 0;
    *(unsigned char *)(v42 + 98) = 1;
    uint64_t v42 = 0;
    atomic_uchar *volatile v20 = *v18;
    atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](v20);
    }
    uint64_t v21 = *((void *)v20 + 1);
    uint64_t v22 = v21 - 1;
    *((void *)v20 + nw_tcp_options_set_no_delay(options, 1) = v21 - 1;
    if (v21 == 1)
    {
      uint64_t v39 = *((void *)v20 + 2);
      uint64_t v24 = *((void *)v20 + 3);
      *((void *)v20 + 3) = 0;
      BOOL v23 = v39 == 0;
    }
    else
    {
      BOOL v23 = 0;
      uint64_t v24 = 0;
    }
    int v25 = 1;
    atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
    if (v25 == 1)
    {
      if (v22) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (v22) {
        goto LABEL_14;
      }
    }
    uint64_t v26 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v26 = &unk_1EE9B37E8;
    *(void *)(v26 + 8) = v20;
    *(void *)(v26 + 16) = v24;
    *(unsigned char *)(v26 + 24) = v23;
    *(void *)long long buf = v26;
    WTF::ensureOnMainRunLoop();
    uint64_t v27 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
LABEL_14:
  if (v46)
  {
    uint64_t v14 = v44;
    if (v44)
    {
      atomic_uchar *volatile v44 = 0;
      int v45 = 0;
      WTF::fastFree(v14, v12);
    }
    uint64_t v15 = v43;
    char v43 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v12);
}

_DWORD *WebKit::RemoteDevice::createPipelineLayout(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(_DWORD **)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = v5 + 2;
  ++v5[2];
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)&v45);
  if (v49)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 88))(&v44);
    uint64_t v7 = v44;
    if (v44)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      uint64_t v9 = *(void *)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
      uint64_t v10 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v10 + 8) = 1;
      *(void *)uint64_t v10 = &unk_1EE9BF8C0;
      ++*(_DWORD *)(v7 + 8);
      *(void *)(v10 + 16) = v7;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v5 + 4, (uint64_t)v5);
      uint64_t v11 = (atomic_uint *)*((void *)v5 + 2);
      atomic_fetch_add(v11, 1u);
      *(void *)(v10 + 24) = v11;
      *(void *)(v10 + 32) = v8;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 16), v9);
      uint64_t v12 = *(atomic_uint **)(v9 + 16);
      atomic_fetch_add(v12, 1u);
      *(void *)(v10 + 40) = v12;
      *(void *)(v10 + 48) = a3;
      uint64_t v13 = *(atomic_uint **)(v10 + 32);
      atomic_fetch_add(v13 + 2, 1u);
      IPC::StreamServerConnection::startReceivingMessages((uint64_t)v13, v10, 0x6Bu, *(void *)(v10 + 48));
      if (v13 && atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v13 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v9 + 8));
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      WebKit::WebGPU::ObjectHeap::addObject((uint64_t)v5, a3, v10);
      if (atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v10 + 8));
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_10;
    }
    char v30 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createPipelineLayout(const WebGPU::PipelineLayoutDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 264: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v43, a1);
    atomic_uchar *volatile v31 = (atomic_uchar *volatile *)v43;
    if (!v43) {
      goto LABEL_10;
    }
    char v32 = 0;
    *(unsigned char *)(v43 + 98) = 1;
    uint64_t v43 = 0;
    atomic_uchar *volatile v33 = *v31;
    atomic_compare_exchange_strong_explicit(*v31, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](v33);
    }
    uint64_t v34 = *((void *)v33 + 1);
    uint64_t v35 = v34 - 1;
    *((void *)v33 + nw_tcp_options_set_no_delay(options, 1) = v34 - 1;
    if (v34 == 1)
    {
      uint64_t v42 = *((void *)v33 + 2);
      uint64_t v37 = *((void *)v33 + 3);
      *((void *)v33 + 3) = 0;
      BOOL v36 = v42 == 0;
    }
    else
    {
      BOOL v36 = 0;
      uint64_t v37 = 0;
    }
    int v38 = 1;
    atomic_compare_exchange_strong_explicit(v33, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
    if (v38 == 1)
    {
      if (!v35) {
        goto LABEL_43;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
      if (!v35)
      {
LABEL_43:
        uint64_t v39 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v39 = &unk_1EE9B37E8;
        *(void *)(v39 + 8) = v33;
        *(void *)(v39 + 16) = v37;
        *(unsigned char *)(v39 + 24) = v36;
        *(void *)long long buf = v39;
        WTF::ensureOnMainRunLoop();
        uint64_t v40 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v40) {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
      }
    }
LABEL_10:
    uint64_t v15 = (_DWORD *)v44;
    uint64_t v44 = 0;
    if (v15)
    {
      if (v15[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      }
      else {
        --v15[2];
      }
    }
    goto LABEL_14;
  }
  char v19 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createPipelineLayout(const WebGPU::PipelineLayoutDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 261: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v44, a1);
  atomic_uchar *volatile v20 = (atomic_uchar *volatile *)v44;
  if (v44)
  {
    char v21 = 0;
    *(unsigned char *)(v44 + 98) = 1;
    uint64_t v44 = 0;
    atomic_uchar *volatile v22 = *v20;
    atomic_compare_exchange_strong_explicit(*v20, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
    if (v21) {
      MEMORY[0x19972E8D0](v22);
    }
    uint64_t v23 = *((void *)v22 + 1);
    uint64_t v24 = v23 - 1;
    *((void *)v22 + nw_tcp_options_set_no_delay(options, 1) = v23 - 1;
    if (v23 == 1)
    {
      uint64_t v41 = *((void *)v22 + 2);
      uint64_t v26 = *((void *)v22 + 3);
      *((void *)v22 + 3) = 0;
      BOOL v25 = v41 == 0;
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v26 = 0;
    }
    int v27 = 1;
    atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 == 1)
    {
      if (v24) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      if (v24) {
        goto LABEL_14;
      }
    }
    uint64_t v28 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v28 = &unk_1EE9B37E8;
    *(void *)(v28 + 8) = v22;
    *(void *)(v28 + 16) = v26;
    *(unsigned char *)(v28 + 24) = v25;
    *(void *)long long buf = v28;
    WTF::ensureOnMainRunLoop();
    uint64_t v29 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
LABEL_14:
  if (v49)
  {
    if (v48)
    {
      uint64_t v16 = v46;
      if (v46)
      {
        char v46 = 0;
        int v47 = 0;
        WTF::fastFree(v16, v14);
      }
    }
    uint64_t v17 = v45;
    int v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v14);
}

_DWORD *WebKit::RemoteDevice::createBindGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)&v43);
  if (v46)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 96))(&v42);
    uint64_t v7 = v42;
    if (v42)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      *(void *)long long buf = v8;
      uint64_t v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
      WebKit::RemoteBindGroup::RemoteBindGroup((uint64_t)v10, v7, v5, (uint64_t *)buf, (uint64_t)v9, a3);
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v11 = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v10);
      if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_10;
    }
    uint64_t v28 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createBindGroup(const WebGPU::BindGroupDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 276: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v41, a1);
    uint64_t v29 = (atomic_uchar *volatile *)v41;
    if (!v41) {
      goto LABEL_10;
    }
    char v30 = 0;
    *(unsigned char *)(v41 + 98) = 1;
    uint64_t v41 = 0;
    atomic_uchar *volatile v31 = *v29;
    atomic_compare_exchange_strong_explicit(*v29, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
    if (v30) {
      MEMORY[0x19972E8D0](v31);
    }
    uint64_t v32 = *((void *)v31 + 1);
    uint64_t v33 = v32 - 1;
    *((void *)v31 + nw_tcp_options_set_no_delay(options, 1) = v32 - 1;
    if (v32 == 1)
    {
      uint64_t v40 = *((void *)v31 + 2);
      uint64_t v35 = *((void *)v31 + 3);
      *((void *)v31 + 3) = 0;
      BOOL v34 = v40 == 0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = 0;
    }
    int v36 = 1;
    atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
    if (v36 == 1)
    {
      if (!v33) {
        goto LABEL_43;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
      if (!v33)
      {
LABEL_43:
        uint64_t v37 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v37 = &unk_1EE9B37E8;
        *(void *)(v37 + 8) = v31;
        *(void *)(v37 + 16) = v35;
        *(unsigned char *)(v37 + 24) = v34;
        *(void *)long long buf = v37;
        WTF::ensureOnMainRunLoop();
        uint64_t v38 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
    }
LABEL_10:
    uint64_t v13 = (_DWORD *)v42;
    uint64_t v42 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    goto LABEL_14;
  }
  uint64_t v17 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createBindGroup(const WebGPU::BindGroupDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 273: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v42, a1);
  uint64_t v18 = (atomic_uchar *volatile *)v42;
  if (v42)
  {
    char v19 = 0;
    *(unsigned char *)(v42 + 98) = 1;
    uint64_t v42 = 0;
    atomic_uchar *volatile v20 = *v18;
    atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](v20);
    }
    uint64_t v21 = *((void *)v20 + 1);
    uint64_t v22 = v21 - 1;
    *((void *)v20 + nw_tcp_options_set_no_delay(options, 1) = v21 - 1;
    if (v21 == 1)
    {
      uint64_t v39 = *((void *)v20 + 2);
      uint64_t v24 = *((void *)v20 + 3);
      *((void *)v20 + 3) = 0;
      BOOL v23 = v39 == 0;
    }
    else
    {
      BOOL v23 = 0;
      uint64_t v24 = 0;
    }
    int v25 = 1;
    atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
    if (v25 == 1)
    {
      if (v22) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (v22) {
        goto LABEL_14;
      }
    }
    uint64_t v26 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v26 = &unk_1EE9B37E8;
    *(void *)(v26 + 8) = v20;
    *(void *)(v26 + 16) = v24;
    *(unsigned char *)(v26 + 24) = v23;
    *(void *)long long buf = v26;
    WTF::ensureOnMainRunLoop();
    uint64_t v27 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
LABEL_14:
  if (v46)
  {
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v12);
    uint64_t v14 = (unsigned int *)v44;
    uint64_t v44 = 0;
    if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v12);
    }
    uint64_t v15 = v43;
    uint64_t v43 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v12);
}

_DWORD *WebKit::RemoteDevice::createShaderModule(uint64_t a1, WTF::StringImpl **a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)&v43);
  if (v46)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 104))(&v42);
    uint64_t v7 = v42;
    if (v42)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      *(void *)long long buf = v8;
      uint64_t v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
      WebKit::RemoteShaderModule::RemoteShaderModule((uint64_t)v10, v7, v5, (uint64_t *)buf, (uint64_t)v9, a3);
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v11 = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v10);
      if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_10;
    }
    uint64_t v28 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createShaderModule(const WebGPU::ShaderModuleDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 288: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v41, a1);
    uint64_t v29 = (atomic_uchar *volatile *)v41;
    if (!v41) {
      goto LABEL_10;
    }
    char v30 = 0;
    *(unsigned char *)(v41 + 98) = 1;
    uint64_t v41 = 0;
    atomic_uchar *volatile v31 = *v29;
    atomic_compare_exchange_strong_explicit(*v29, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
    if (v30) {
      MEMORY[0x19972E8D0](v31);
    }
    uint64_t v32 = *((void *)v31 + 1);
    uint64_t v33 = v32 - 1;
    *((void *)v31 + nw_tcp_options_set_no_delay(options, 1) = v32 - 1;
    if (v32 == 1)
    {
      uint64_t v40 = *((void *)v31 + 2);
      uint64_t v35 = *((void *)v31 + 3);
      *((void *)v31 + 3) = 0;
      BOOL v34 = v40 == 0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = 0;
    }
    int v36 = 1;
    atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
    if (v36 == 1)
    {
      if (!v33) {
        goto LABEL_44;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
      if (!v33)
      {
LABEL_44:
        uint64_t v37 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v37 = &unk_1EE9B37E8;
        *(void *)(v37 + 8) = v31;
        *(void *)(v37 + 16) = v35;
        *(unsigned char *)(v37 + 24) = v34;
        *(void *)long long buf = v37;
        WTF::ensureOnMainRunLoop();
        uint64_t v38 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
    }
LABEL_10:
    uint64_t v13 = (_DWORD *)v42;
    uint64_t v42 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    goto LABEL_14;
  }
  uint64_t v17 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createShaderModule(const WebGPU::ShaderModuleDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 285: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v42, a1);
  uint64_t v18 = (atomic_uchar *volatile *)v42;
  if (v42)
  {
    char v19 = 0;
    *(unsigned char *)(v42 + 98) = 1;
    uint64_t v42 = 0;
    atomic_uchar *volatile v20 = *v18;
    atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](v20);
    }
    uint64_t v21 = *((void *)v20 + 1);
    uint64_t v22 = v21 - 1;
    *((void *)v20 + nw_tcp_options_set_no_delay(options, 1) = v21 - 1;
    if (v21 == 1)
    {
      uint64_t v39 = *((void *)v20 + 2);
      uint64_t v24 = *((void *)v20 + 3);
      *((void *)v20 + 3) = 0;
      BOOL v23 = v39 == 0;
    }
    else
    {
      BOOL v23 = 0;
      uint64_t v24 = 0;
    }
    int v25 = 1;
    atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
    if (v25 == 1)
    {
      if (v22) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (v22) {
        goto LABEL_14;
      }
    }
    uint64_t v26 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v26 = &unk_1EE9B37E8;
    *(void *)(v26 + 8) = v20;
    *(void *)(v26 + 16) = v24;
    *(unsigned char *)(v26 + 24) = v23;
    *(void *)long long buf = v26;
    WTF::ensureOnMainRunLoop();
    uint64_t v27 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
LABEL_14:
  if (v46)
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v12);
    uint64_t v14 = v44;
    uint64_t v44 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v43;
    uint64_t v43 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v12);
}

_DWORD *WebKit::RemoteDevice::createComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)v42);
  if (v42[56])
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 112))(&v41);
    uint64_t v7 = v41;
    if (v41)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      *(void *)long long buf = v8;
      uint64_t v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
      WebKit::RemoteComputePipeline::RemoteComputePipeline((uint64_t)v10, v7, v5, (uint64_t *)buf, (uint64_t)v9, a3);
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v11 = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v10);
      if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_10;
    }
    uint64_t v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createComputePipeline(const WebGPU::ComputePipelineDescriptor &, W"
                           "ebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 301: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v40, a1);
    uint64_t v28 = (atomic_uchar *volatile *)v40;
    if (!v40) {
      goto LABEL_10;
    }
    char v29 = 0;
    *(unsigned char *)(v40 + 98) = 1;
    uint64_t v40 = 0;
    atomic_uchar *volatile v30 = *v28;
    atomic_compare_exchange_strong_explicit(*v28, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
    if (v29) {
      MEMORY[0x19972E8D0](v30);
    }
    uint64_t v31 = *((void *)v30 + 1);
    uint64_t v32 = v31 - 1;
    *((void *)v30 + nw_tcp_options_set_no_delay(options, 1) = v31 - 1;
    if (v31 == 1)
    {
      uint64_t v39 = *((void *)v30 + 2);
      uint64_t v34 = *((void *)v30 + 3);
      *((void *)v30 + 3) = 0;
      BOOL v33 = v39 == 0;
    }
    else
    {
      BOOL v33 = 0;
      uint64_t v34 = 0;
    }
    int v35 = 1;
    atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
    if (v35 == 1)
    {
      if (!v32) {
        goto LABEL_35;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
      if (!v32)
      {
LABEL_35:
        uint64_t v36 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v36 = &unk_1EE9B37E8;
        *(void *)(v36 + 8) = v30;
        *(void *)(v36 + 16) = v34;
        *(unsigned char *)(v36 + 24) = v33;
        *(void *)long long buf = v36;
        WTF::ensureOnMainRunLoop();
        uint64_t v37 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        }
      }
    }
LABEL_10:
    uint64_t v13 = (_DWORD *)v41;
    uint64_t v41 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    goto LABEL_14;
  }
  uint64_t v16 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createComputePipeline(const WebGPU::ComputePipelineDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 298: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v41, a1);
  uint64_t v17 = (atomic_uchar *volatile *)v41;
  if (v41)
  {
    char v18 = 0;
    *(unsigned char *)(v41 + 98) = 1;
    uint64_t v41 = 0;
    atomic_uchar *volatile v19 = *v17;
    atomic_compare_exchange_strong_explicit(*v17, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
    if (v18) {
      MEMORY[0x19972E8D0](v19);
    }
    uint64_t v20 = *((void *)v19 + 1);
    uint64_t v21 = v20 - 1;
    *((void *)v19 + nw_tcp_options_set_no_delay(options, 1) = v20 - 1;
    if (v20 == 1)
    {
      uint64_t v38 = *((void *)v19 + 2);
      uint64_t v23 = *((void *)v19 + 3);
      *((void *)v19 + 3) = 0;
      BOOL v22 = v38 == 0;
    }
    else
    {
      BOOL v22 = 0;
      uint64_t v23 = 0;
    }
    int v24 = 1;
    atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
    if (v24 == 1)
    {
      if (v21) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v21) {
        goto LABEL_14;
      }
    }
    uint64_t v25 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v25 = &unk_1EE9B37E8;
    *(void *)(v25 + 8) = v19;
    *(void *)(v25 + 16) = v23;
    *(unsigned char *)(v25 + 24) = v22;
    *(void *)long long buf = v25;
    WTF::ensureOnMainRunLoop();
    uint64_t v26 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
LABEL_14:
  std::__optional_destruct_base<WebCore::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v12);
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v14);
}

_DWORD *WebKit::RemoteDevice::createRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2, (uint64_t)v41);
  if (v42)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 120))(&v40);
    uint64_t v7 = v40;
    if (v40)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
      *(void *)long long buf = v8;
      uint64_t v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
      WebKit::RemoteRenderPipeline::RemoteRenderPipeline((uint64_t)v10, v7, v5, (uint64_t *)buf, (uint64_t)v9, a3);
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v11 = *(unsigned int **)buf;
      *(void *)long long buf = 0;
      if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v10);
      if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_10;
    }
    uint64_t v26 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createRenderPipeline(const WebGPU::RenderPipelineDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 313: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v39, a1);
    uint64_t v27 = (atomic_uchar *volatile *)v39;
    if (!v39) {
      goto LABEL_10;
    }
    char v28 = 0;
    *(unsigned char *)(v39 + 98) = 1;
    uint64_t v39 = 0;
    atomic_uchar *volatile v29 = *v27;
    atomic_compare_exchange_strong_explicit(*v27, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
    if (v28) {
      MEMORY[0x19972E8D0](v29);
    }
    uint64_t v30 = *((void *)v29 + 1);
    uint64_t v31 = v30 - 1;
    *((void *)v29 + nw_tcp_options_set_no_delay(options, 1) = v30 - 1;
    if (v30 == 1)
    {
      uint64_t v38 = *((void *)v29 + 2);
      uint64_t v33 = *((void *)v29 + 3);
      *((void *)v29 + 3) = 0;
      BOOL v32 = v38 == 0;
    }
    else
    {
      BOOL v32 = 0;
      uint64_t v33 = 0;
    }
    int v34 = 1;
    atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
    if (v34 == 1)
    {
      if (!v31) {
        goto LABEL_37;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
      if (!v31)
      {
LABEL_37:
        uint64_t v35 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v35 = &unk_1EE9B37E8;
        *(void *)(v35 + 8) = v29;
        *(void *)(v35 + 16) = v33;
        *(unsigned char *)(v35 + 24) = v32;
        *(void *)long long buf = v35;
        WTF::ensureOnMainRunLoop();
        uint64_t v36 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
    }
LABEL_10:
    uint64_t v13 = (_DWORD *)v40;
    uint64_t v40 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    goto LABEL_14;
  }
  uint64_t v15 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createRenderPipeline(const WebGPU::RenderPipelineDescriptor &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 310: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v40, a1);
  uint64_t v16 = (atomic_uchar *volatile *)v40;
  if (v40)
  {
    char v17 = 0;
    *(unsigned char *)(v40 + 98) = 1;
    uint64_t v40 = 0;
    atomic_uchar *volatile v18 = *v16;
    atomic_compare_exchange_strong_explicit(*v16, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
    if (v17) {
      MEMORY[0x19972E8D0](v18);
    }
    uint64_t v19 = *((void *)v18 + 1);
    uint64_t v20 = v19 - 1;
    *((void *)v18 + nw_tcp_options_set_no_delay(options, 1) = v19 - 1;
    if (v19 == 1)
    {
      uint64_t v37 = *((void *)v18 + 2);
      uint64_t v22 = *((void *)v18 + 3);
      *((void *)v18 + 3) = 0;
      BOOL v21 = v37 == 0;
    }
    else
    {
      BOOL v21 = 0;
      uint64_t v22 = 0;
    }
    int v23 = 1;
    atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 == 1)
    {
      if (v20) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      if (v20) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v24 = &unk_1EE9B37E8;
    *(void *)(v24 + 8) = v18;
    *(void *)(v24 + 16) = v22;
    *(unsigned char *)(v24 + 24) = v21;
    *(void *)long long buf = v24;
    WTF::ensureOnMainRunLoop();
    uint64_t v25 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
LABEL_14:
  if (v42) {
    WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor((WebCore::WebGPU::RenderPipelineDescriptor *)v41, v12);
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v12);
}

uint64_t WebKit::RemoteDevice::createComputePipelineAsync(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(a1[3] + 8), a2, (uint64_t)v20);
  if (v20[56])
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = *(void *)(a1[3] + 8);
    ++*(_DWORD *)(v9 + 8);
    uint64_t v10 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    uint64_t v11 = *(void *)(a1[20] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    uint64_t v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v12 = &unk_1EE9BFA30;
    *((void *)v12 + nw_tcp_options_set_no_delay(options, 1) = v8;
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = v10;
    *((void *)v12 + 4) = v11;
    *((void *)v12 + 5) = a3;
    uint64_t v19 = v12;
    (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **))(*(void *)v7 + 128))(v7, v20, &v19);
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    uint64_t v15 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v19 = v15;
    uint64_t v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v16 + 16))(v16, 0, &v19);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    char v17 = v19;
    uint64_t v19 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v13);
}

void WebKit::RemoteDevice::createRenderPipelineAsync(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(a1[3] + 8), a2, (uint64_t)v19);
  if (v20)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = *(void *)(a1[3] + 8);
    ++*(_DWORD *)(v9 + 8);
    uint64_t v10 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    uint64_t v11 = *(void *)(a1[20] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    uint64_t v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v12 = &unk_1EE9BFA58;
    *((void *)v12 + nw_tcp_options_set_no_delay(options, 1) = v8;
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = v10;
    *((void *)v12 + 4) = v11;
    *((void *)v12 + 5) = a3;
    atomic_uchar *volatile v18 = v12;
    (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **))(*(void *)v7 + 136))(v7, v19, &v18);
    uint64_t v14 = v18;
    atomic_uchar *volatile v18 = 0;
    if (v14) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    uint64_t v15 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    atomic_uchar *volatile v18 = v15;
    uint64_t v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v16 + 16))(v16, 0, &v18);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    char v17 = v18;
    atomic_uchar *volatile v18 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  if (v20) {
    WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor((WebCore::WebGPU::RenderPipelineDescriptor *)v19, v13);
  }
}

_DWORD *WebKit::RemoteDevice::createCommandEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  LOBYTE(v36) = 0;
  char v37 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v7 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v36 = v7;
    char v37 = 1;
  }
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 16) + 144))(&v35);
  if (v35)
  {
    uint64_t v8 = *(atomic_uchar **)(a1 + 144);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, *(void *)(a1 + 152), buf);
      uint64_t v9 = *(void *)buf;
    }
    else
    {
      uint64_t v9 = 0;
      *(void *)long long buf = 0;
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 160) + 8);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    uint64_t v11 = v35;
    uint64_t v12 = *(void *)(a1 + 32);
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
    uint64_t v13 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v13 + 8) = 1;
    *(void *)uint64_t v13 = &unk_1EE9BF7A8;
    ++v11[2];
    *(void *)(v13 + 16) = v11;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
    uint64_t v14 = *(atomic_uint **)(v5 + 16);
    atomic_fetch_add(v14, 1u);
    *(void *)(v13 + 24) = v14;
    *(void *)(v13 + 32) = v12;
    *(void *)(v13 + 40) = a3;
    uint64_t v15 = *(atomic_uchar **)(v9 + 16);
    if (v15) {
      uint64_t v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
    }
    *(void *)(v13 + 48) = v15;
    *(void *)(v13 + 56) = v9;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 16), v10);
    uint64_t v16 = *(atomic_uint **)(v10 + 16);
    atomic_fetch_add(v16, 1u);
    *(void *)(v13 + 64) = v16;
    IPC::StreamServerConnection::startReceivingMessages(*(void *)(v13 + 32), v13, 0x48u, *(void *)(v13 + 40));
    if (atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v10 + 8));
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v17 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v17) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v17 + 16));
    }
    WebKit::WebGPU::ObjectHeap::addObject(v5, a3, v13);
    if (atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v13 + 8));
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    uint64_t v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createCommandEncoder(const std::optional<WebGPU::CommandEncoderDes"
                           "criptor> &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 366: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v34, a1);
    int v23 = (atomic_uchar *volatile *)v34;
    if (v34)
    {
      char v24 = 0;
      *(unsigned char *)(v34 + 98) = 1;
      uint64_t v34 = 0;
      atomic_uchar *volatile v25 = *v23;
      atomic_compare_exchange_strong_explicit(*v23, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
      if (v24) {
        MEMORY[0x19972E8D0](v25);
      }
      uint64_t v26 = *((void *)v25 + 1);
      uint64_t v27 = v26 - 1;
      *((void *)v25 + nw_tcp_options_set_no_delay(options, 1) = v26 - 1;
      if (v26 == 1)
      {
        uint64_t v33 = *((void *)v25 + 2);
        uint64_t v29 = *((void *)v25 + 3);
        *((void *)v25 + 3) = 0;
        BOOL v28 = v33 == 0;
      }
      else
      {
        BOOL v28 = 0;
        uint64_t v29 = 0;
      }
      int v30 = 1;
      atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
      if (v30 == 1)
      {
        if (v27) {
          goto LABEL_16;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v25);
        if (v27) {
          goto LABEL_16;
        }
      }
      uint64_t v31 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v31 = &unk_1EE9B37E8;
      *(void *)(v31 + 8) = v25;
      *(void *)(v31 + 16) = v29;
      *(unsigned char *)(v31 + 24) = v28;
      *(void *)long long buf = v31;
      WTF::ensureOnMainRunLoop();
      uint64_t v32 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
    }
  }
LABEL_16:
  uint64_t v19 = v35;
  uint64_t v35 = 0;
  if (v19)
  {
    if (v19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
  }
  if (v37)
  {
    char v20 = v36;
    uint64_t v36 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v18);
}

_DWORD *WebKit::RemoteDevice::createRenderBundleEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)&v46);
  if (v49)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 152))(&v45);
    if (v45)
    {
      uint64_t v7 = *(atomic_uchar **)(a1 + 144);
      if (v7)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *(void *)(a1 + 152), buf);
        uint64_t v8 = *(void *)buf;
      }
      else
      {
        uint64_t v8 = 0;
        *(void *)long long buf = 0;
      }
      uint64_t v9 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
      atomic_fetch_add(v9 + 2, 1u);
      uint64_t v10 = v45;
      uint64_t v11 = *(void *)(a1 + 32);
      atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
      uint64_t v44 = v11;
      uint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
      WebKit::RemoteRenderBundleEncoder::RemoteRenderBundleEncoder((uint64_t)v12, v8, (uint64_t)v9, v10, v5, &v44, a3);
      uint64_t v13 = (unsigned int *)v44;
      uint64_t v44 = 0;
      if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
      }
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v9 + 2);
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      uint64_t v14 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v14) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
      }
      WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v12);
      if (atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
      }
      goto LABEL_14;
    }
    uint64_t v31 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createRenderBundleEncoder(const WebGPU::RenderBundleEncoderDescrip"
                           "tor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 378: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v44, a1);
    uint64_t v32 = (atomic_uchar *volatile *)v44;
    if (!v44) {
      goto LABEL_14;
    }
    char v33 = 0;
    *(unsigned char *)(v44 + 98) = 1;
    uint64_t v44 = 0;
    atomic_uchar *volatile v34 = *v32;
    atomic_compare_exchange_strong_explicit(*v32, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
    if (v33) {
      MEMORY[0x19972E8D0](v34);
    }
    uint64_t v35 = *((void *)v34 + 1);
    uint64_t v36 = v35 - 1;
    *((void *)v34 + nw_tcp_options_set_no_delay(options, 1) = v35 - 1;
    if (v35 == 1)
    {
      uint64_t v43 = *((void *)v34 + 2);
      uint64_t v38 = *((void *)v34 + 3);
      *((void *)v34 + 3) = 0;
      BOOL v37 = v43 == 0;
    }
    else
    {
      BOOL v37 = 0;
      uint64_t v38 = 0;
    }
    int v39 = 1;
    atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 == 1)
    {
      if (!v36) {
        goto LABEL_47;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v34);
      if (!v36)
      {
LABEL_47:
        uint64_t v40 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v40 = &unk_1EE9B37E8;
        *(void *)(v40 + 8) = v34;
        *(void *)(v40 + 16) = v38;
        *(unsigned char *)(v40 + 24) = v37;
        *(void *)long long buf = v40;
        WTF::ensureOnMainRunLoop();
        uint64_t v41 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v41) {
          (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
        }
      }
    }
LABEL_14:
    uint64_t v16 = (_DWORD *)v45;
    uint64_t v45 = 0;
    if (v16)
    {
      if (v16[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
      }
      else {
        --v16[2];
      }
    }
    goto LABEL_18;
  }
  char v20 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createRenderBundleEncoder(const WebGPU::RenderBundleEncoderDescripto"
                         "r &, WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 375: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v45, a1);
  BOOL v21 = (atomic_uchar *volatile *)v45;
  if (v45)
  {
    char v22 = 0;
    *(unsigned char *)(v45 + 98) = 1;
    uint64_t v45 = 0;
    atomic_uchar *volatile v23 = *v21;
    atomic_compare_exchange_strong_explicit(*v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
    if (v22) {
      MEMORY[0x19972E8D0](v23);
    }
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v25 = v24 - 1;
    *((void *)v23 + nw_tcp_options_set_no_delay(options, 1) = v24 - 1;
    if (v24 == 1)
    {
      uint64_t v42 = *((void *)v23 + 2);
      uint64_t v27 = *((void *)v23 + 3);
      *((void *)v23 + 3) = 0;
      BOOL v26 = v42 == 0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = 0;
    }
    int v28 = 1;
    atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 == 1)
    {
      if (v25) {
        goto LABEL_18;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v25) {
        goto LABEL_18;
      }
    }
    uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v29 = &unk_1EE9B37E8;
    *(void *)(v29 + 8) = v23;
    *(void *)(v29 + 16) = v27;
    *(unsigned char *)(v29 + 24) = v26;
    *(void *)long long buf = v29;
    WTF::ensureOnMainRunLoop();
    uint64_t v30 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
LABEL_18:
  if (v49)
  {
    uint64_t v17 = v47;
    if (v47)
    {
      int v47 = 0;
      int v48 = 0;
      WTF::fastFree(v17, v15);
    }
    atomic_uchar *volatile v18 = v46;
    char v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v15);
}

_DWORD *WebKit::RemoteDevice::createQuerySet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  uint64_t v7 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v7 += 2;
  }
  unint64_t v8 = *(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32);
  uint64_t v32 = v7;
  unint64_t v33 = v8;
  char v34 = 1;
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 16) + 160))(&v31);
  uint64_t v9 = (uint64_t)v31;
  if (v31)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    *(void *)long long buf = v10;
    uint64_t v11 = *(atomic_uint **)(*(void *)(a1 + 160) + 8);
    atomic_fetch_add(v11 + 2, 1u);
    uint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteQuerySet::RemoteQuerySet((uint64_t)v12, v9, v5, (uint64_t *)buf, (uint64_t)v11, a3);
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v11 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
    }
    uint64_t v13 = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v5, a3, (uint64_t)v12);
    if (atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    atomic_uchar *volatile v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteDevice::createQuerySet(const WebGPU::QuerySetDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteDevice.cpp 390: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteDevice::connection((WebKit::RemoteDevice *)&v30, a1);
    uint64_t v19 = (atomic_uchar *volatile *)v30;
    if (v30)
    {
      char v20 = 0;
      *(unsigned char *)(v30 + 98) = 1;
      uint64_t v30 = 0;
      atomic_uchar *volatile v21 = *v19;
      atomic_compare_exchange_strong_explicit(*v19, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
      if (v20) {
        MEMORY[0x19972E8D0](v21);
      }
      uint64_t v22 = *((void *)v21 + 1);
      uint64_t v23 = v22 - 1;
      *((void *)v21 + nw_tcp_options_set_no_delay(options, 1) = v22 - 1;
      if (v22 == 1)
      {
        uint64_t v29 = *((void *)v21 + 2);
        uint64_t v25 = *((void *)v21 + 3);
        *((void *)v21 + 3) = 0;
        BOOL v24 = v29 == 0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = 0;
      }
      int v26 = 1;
      atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
      if (v26 == 1)
      {
        if (v23) {
          goto LABEL_11;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
        if (v23) {
          goto LABEL_11;
        }
      }
      uint64_t v27 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v27 = &unk_1EE9B37E8;
      *(void *)(v27 + 8) = v21;
      *(void *)(v27 + 16) = v25;
      *(unsigned char *)(v27 + 24) = v24;
      *(void *)long long buf = v27;
      WTF::ensureOnMainRunLoop();
      uint64_t v28 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
  }
LABEL_11:
  uint64_t v15 = v31;
  uint64_t v31 = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  if (v34)
  {
    uint64_t v16 = v32;
    uint64_t v32 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v14);
}

uint64_t WebKit::RemoteDevice::popErrorScope(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9BFA80;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 176))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteDevice::resolveUncapturedErrorEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9BFAC0;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 184))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteDevice::resolveDeviceLostPromise(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9BFAE8;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 192))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteDevice::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(*v2 + 200);

  return v3(v2, v2 + 3);
}

void WebKit::RemoteExternalTexture::~RemoteExternalTexture(WebKit::RemoteExternalTexture *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteExternalTexture::~RemoteExternalTexture(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteExternalTexture::destroy(WebKit::RemoteExternalTexture *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 1);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 2))(v1);
  uint64_t v3 = (atomic_uchar *)*((void *)v1 + 1);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(v3, v2);
}

atomic_uchar *WebKit::RemoteExternalTexture::undestroy(WebKit::RemoteExternalTexture *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 1);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 3))(v1);
  uint64_t v3 = (atomic_uchar *)*((void *)v1 + 1);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(v3, v2);
}

void *WebKit::RemoteExternalTexture::stopListeningForIPC(WebKit::RemoteExternalTexture *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x4Eu, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

atomic_uchar *WebKit::RemoteExternalTexture::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 8));
  WTF::String::operator=((uint64_t *)(v3 + 16), a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3 + 16);
  uint64_t v5 = *(atomic_uchar **)(v3 + 8);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(v5, v4);
}

uint64_t WebKit::RemoteGPU::RemoteGPU(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9BF898;
  uint64_t v10 = *(atomic_uchar **)(a3 + 16);
  if (v10) {
    uint64_t v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  }
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = a3;
  long long v11 = *(_OWORD *)(a3 + 368);
  long long v12 = *(_OWORD *)(a3 + 384);
  *(void *)(a1 + 72) = *(void *)(a3 + 400);
  *(_OWORD *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 40) = v11;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x70);
  *(void *)(a1 + 80) = IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue(v13, (uint64_t)"WebGPU work queue", 18);
  uint64_t v14 = *a5;
  *a5 = 0;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = 0;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v15 + 8) = 1;
  *(void *)uint64_t v15 = &unk_1EE9C0440;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = a2;
  atomic_fetch_add((atomic_uint *volatile)(a4 + 16), 1u);
  *(void *)(a1 + 120) = a4;
  return a1;
}

void WebKit::RemoteGPU::~RemoteGPU(WebKit::RemoteGPU *this, void *a2)
{
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v3 + 16));
    (*(void (**)(void))(*(void *)(v3 + 8) + 8))();
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), a2);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 11);
  *((void *)this + 1nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v7 + 8), a2);
  }
  unint64_t v8 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
  }
  uint64_t v9 = *((void *)this + 2);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    uint64_t v10 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteGPU::~RemoteGPU(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteGPU::connection(WebKit::RemoteGPU *this, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a2 + 24);
  if (result
    && (uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a2 + 32), &v11), v11))
  {
    char v4 = 0;
    uint64_t v5 = *(atomic_uchar *volatile **)(v11 + 56);
    uint64_t result = *v5;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4)
    {
      unint64_t v8 = result;
      uint64_t v9 = v5;
      MEMORY[0x19972E8D0]();
      int v6 = 1;
      uint64_t result = v8;
      uint64_t v5 = v9;
    }
    ++*((void *)result + 1);
    atomic_compare_exchange_strong_explicit(result, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      uint64_t v10 = v5;
      uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)result);
      uint64_t v5 = v10;
    }
    uint64_t v7 = v11;
    *(void *)this = v5;
    uint64_t v11 = 0;
    if (v7) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
    }
  }
  else
  {
    *(void *)this = 0;
  }
  return result;
}

unsigned int *WebKit::RemoteGPU::initialize(WebKit::RemoteGPU *this)
{
  uint64_t v2 = *((void *)this + 10);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
  uint64_t v3 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v3 = &unk_1EE9BFB10;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = this;
  int v6 = v3;
  IPC::StreamConnectionWorkQueue::dispatch(v2, (uint64_t *)&v6);
  uint64_t result = v6;
  int v6 = 0;
  if (result)
  {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    if (!v2) {
      return result;
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v2 + 8), v4);
}

unsigned int *WebKit::RemoteGPU::stopListeningForIPC(WebKit::RemoteGPU *this)
{
  uint64_t v2 = *((void *)this + 10);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t v3 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v3 = &unk_1EE9BFB38;
  *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = this;
  uint64_t v7 = v3;
  IPC::StreamConnectionWorkQueue::dispatch(v2, (uint64_t *)&v7);
  uint64_t v4 = (uint64_t)v7;
  uint64_t v7 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v7 = 0;
  IPC::StreamConnectionWorkQueue::stopAndWaitForCompletion(v2, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v7 + 8))(v7);
    if (!v2) {
      return result;
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v2 + 8), v5);
}

uint64_t WebKit::RemoteGPU::requestAdapter(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 96);
  if (v8) {
    (*(void (**)(void))(*(void *)v8 + 24))(*(void *)(a1 + 96));
  }
  uint64_t v9 = *(void *)(a1 + 104);
  int v11 = *(_DWORD *)(v9 + 8);
  uint64_t v10 = (_DWORD *)(v9 + 8);
  *(_DWORD *)(v9 + 8) = v11 + 1;
  int v12 = *a2;
  __int16 v29 = 1;
  int v28 = v12;
  uint64_t v13 = *a4;
  *a4 = 0;
  *(_DWORD *)(v9 + 8) = v11 + 2;
  uint64_t v23 = v13;
  uint64_t v24 = v9;
  uint64_t v14 = *(void *)(a1 + 88);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
  uint64_t v25 = v14;
  uint64_t v15 = *(atomic_uchar **)(a1 + 24);
  if (v15) {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v15, *(void *)(a1 + 32), &v26);
  }
  else {
    *(void *)&long long v26 = 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  *((void *)&v26 + nw_tcp_options_set_no_delay(options, 1) = a1;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x38);
  void *v16 = &unk_1EE9BFB88;
  v16[1] = v23;
  unint64_t v16[2] = v24;
  v16[3] = v25;
  void v16[4] = a3;
  v16[5] = v26;
  uint64_t v17 = *((void *)&v26 + 1);
  long long v26 = 0u;
  v16[6] = v17;
  uint64_t v27 = v16;
  (*(void (**)(uint64_t, int *, void **))(*(void *)v8 + 16))(v8, &v28, &v27);
  uint64_t v19 = v27;
  uint64_t v27 = 0;
  if (v19) {
    (*(void (**)(void *))(*v19 + 8))(v19);
  }
  char v20 = (unsigned int *)*((void *)&v26 + 1);
  *((void *)&v26 + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20 + 2);
    (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v26;
  *(void *)&long long v26 = 0;
  if (v21) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v21 + 16));
  }
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v10, v18);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
}

_DWORD *WebKit::RemoteGPU::createPresentationContext(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[12];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = a1[13];
  uint64_t v7 = (_DWORD *)(v6 + 8);
  ++*(_DWORD *)(v6 + 8);
  v46[0] = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v6);
  v46[1] = v8;
  if ((_BYTE)v8)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void *))(*(void *)v5 + 40))(&v45, v5, v46);
    uint64_t v9 = v45;
    if (v45)
    {
      uint64_t v10 = (atomic_uchar *)a1[3];
      if (v10)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v10, a1[4], buf);
        uint64_t v11 = *(void *)buf;
        uint64_t v9 = v45;
      }
      else
      {
        uint64_t v11 = 0;
        *(void *)long long buf = 0;
      }
      uint64_t v12 = a1[11];
      atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
      uint64_t v44 = v12;
      uint64_t v13 = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
      WebKit::RemotePresentationContext::RemotePresentationContext((uint64_t)v13, v11, (uint64_t)a1, v9, v6, &v44, a3);
      uint64_t v14 = (unsigned int *)v44;
      uint64_t v44 = 0;
      if (v14 && atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
      }
      uint64_t v15 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v15) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
      }
      WebKit::WebGPU::ObjectHeap::addObject(v6, a3, (uint64_t)v13);
      if (atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
      }
      goto LABEL_14;
    }
    uint64_t v31 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteGPU::createPresentationContext(const WebGPU::PresentationContextDescriptor"
                           " &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteGPU.cpp 211: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteGPU::connection((WebKit::RemoteGPU *)&v44, (uint64_t)a1);
    uint64_t v32 = (atomic_uchar *volatile *)v44;
    if (!v44) {
      goto LABEL_14;
    }
    char v33 = 0;
    *(unsigned char *)(v44 + 98) = 1;
    uint64_t v44 = 0;
    atomic_uchar *volatile v34 = *v32;
    atomic_compare_exchange_strong_explicit(*v32, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
    if (v33) {
      MEMORY[0x19972E8D0](v34);
    }
    uint64_t v35 = *((void *)v34 + 1);
    uint64_t v36 = v35 - 1;
    *((void *)v34 + nw_tcp_options_set_no_delay(options, 1) = v35 - 1;
    if (v35 == 1)
    {
      uint64_t v43 = *((void *)v34 + 2);
      uint64_t v38 = *((void *)v34 + 3);
      *((void *)v34 + 3) = 0;
      BOOL v37 = v43 == 0;
    }
    else
    {
      BOOL v37 = 0;
      uint64_t v38 = 0;
    }
    int v39 = 1;
    atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 == 1)
    {
      if (!v36) {
        goto LABEL_44;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v34);
      if (!v36)
      {
LABEL_44:
        uint64_t v40 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v40 = &unk_1EE9B37E8;
        *(void *)(v40 + 8) = v34;
        *(void *)(v40 + 16) = v38;
        *(unsigned char *)(v40 + 24) = v37;
        *(void *)long long buf = v40;
        WTF::ensureOnMainRunLoop();
        uint64_t v41 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v41) {
          (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
        }
      }
    }
LABEL_14:
    uint64_t v17 = (_DWORD *)v45;
    uint64_t v45 = 0;
    if (v17)
    {
      if (v17[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
      }
      else {
        --v17[2];
      }
    }
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v16);
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  uint64_t v19 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteGPU::createPresentationContext(const WebGPU::PresentationContextDescriptor &"
                         ", WebGPUIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteGPU.cpp 208: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  WebKit::RemoteGPU::connection((WebKit::RemoteGPU *)&v45, (uint64_t)a1);
  uint64_t v21 = (atomic_uchar *volatile *)v45;
  if (v45)
  {
    char v22 = 0;
    *(unsigned char *)(v45 + 98) = 1;
    uint64_t v45 = 0;
    atomic_uchar *volatile v23 = *v21;
    atomic_compare_exchange_strong_explicit(*v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
    if (v22) {
      MEMORY[0x19972E8D0](v23);
    }
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v25 = v24 - 1;
    *((void *)v23 + nw_tcp_options_set_no_delay(options, 1) = v24 - 1;
    if (v24 == 1)
    {
      uint64_t v42 = *((void *)v23 + 2);
      uint64_t v27 = *((void *)v23 + 3);
      *((void *)v23 + 3) = 0;
      BOOL v26 = v42 == 0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = 0;
    }
    int v28 = 1;
    atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 == 1)
    {
      if (v25) {
        goto LABEL_33;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v25) {
        goto LABEL_33;
      }
    }
    uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v29 = &unk_1EE9B37E8;
    *(void *)(v29 + 8) = v23;
    *(void *)(v29 + 16) = v27;
    *(unsigned char *)(v29 + 24) = v26;
    *(void *)long long buf = v29;
    WTF::ensureOnMainRunLoop();
    uint64_t v30 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
LABEL_33:
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v20);
  if (v5) {
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  return result;
}

uint64_t WebKit::RemoteGPU::createCompositorIntegration(uint64_t a1, uint64_t a2)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4) {
    (*(void (**)(void))(*(void *)v4 + 24))(*(void *)(a1 + 96));
  }
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(void *)v4 + 48))(&v28, v4);
  uint64_t v5 = v28;
  if (v28)
  {
    uint64_t v6 = *(void *)(a1 + 104);
    ++*(_DWORD *)(v6 + 8);
    uint64_t v7 = *(void *)(a1 + 88);
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    uint64_t v8 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v8 + 8) = 1;
    *(void *)uint64_t v8 = &unk_1EE9BF7D0;
    ++v5[2];
    *(void *)(v8 + 16) = v5;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 16), v6);
    uint64_t v9 = *(atomic_uint **)(v6 + 16);
    atomic_fetch_add(v9, 1u);
    *(void *)(v8 + 24) = v9;
    *(void *)(v8 + 32) = v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
    uint64_t v10 = *(atomic_uint **)(a1 + 16);
    atomic_fetch_add(v10, 1u);
    *(void *)(v8 + 40) = v10;
    *(void *)(v8 + 48) = a2;
    uint64_t v11 = *(atomic_uint **)(v8 + 32);
    atomic_fetch_add(v11 + 2, 1u);
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v11, v8, 0x49u, *(void *)(v8 + 48));
    if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v11 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v6, a2, v8);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v8 + 8));
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), v12);
  }
  else
  {
    uint64_t v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "void WebKit::RemoteGPU::createCompositorIntegration(WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteGPU.cpp 228: Invalid message dispatched %{public}s", (uint8_t *)buf, 0xCu);
    }
    WebKit::RemoteGPU::connection((WebKit::RemoteGPU *)&v27, a1);
    uint64_t v16 = (atomic_uchar *volatile *)v27;
    if (v27)
    {
      char v17 = 0;
      *(unsigned char *)(v27 + 98) = 1;
      uint64_t v27 = 0;
      atomic_uchar *volatile v18 = *v16;
      atomic_compare_exchange_strong_explicit(*v16, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
      if (v17) {
        MEMORY[0x19972E8D0](v18);
      }
      uint64_t v19 = *((void *)v18 + 1);
      uint64_t v20 = v19 - 1;
      *((void *)v18 + nw_tcp_options_set_no_delay(options, 1) = v19 - 1;
      if (v19 == 1)
      {
        uint64_t v26 = *((void *)v18 + 2);
        uint64_t v22 = *((void *)v18 + 3);
        *((void *)v18 + 3) = 0;
        BOOL v21 = v26 == 0;
      }
      else
      {
        BOOL v21 = 0;
        uint64_t v22 = 0;
      }
      int v23 = 1;
      atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
      if (v23 == 1)
      {
        if (v20) {
          goto LABEL_10;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
        if (v20) {
          goto LABEL_10;
        }
      }
      uint64_t v24 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v24 = &unk_1EE9B37E8;
      *(void *)(v24 + 8) = v18;
      *(void *)(v24 + 16) = v22;
      *(unsigned char *)(v24 + 24) = v21;
      buf[0] = v24;
      WTF::ensureOnMainRunLoop();
      uint64_t v25 = buf[0];
      buf[0] = 0;
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
  }
LABEL_10:
  uint64_t v13 = v28;
  int v28 = 0;
  if (v13)
  {
    if (v13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
    }
    else {
      --v13[2];
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
}

uint64_t WebKit::RemoteGPU::isValid(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    (*(void (**)(void))(*(void *)v4 + 24))(*(void *)(a1 + 96));
    uint64_t v6 = *(_DWORD **)(a1 + 104);
    int v7 = v6[2];
    v6 += 2;
    _DWORD *v6 = v7 + 1;
    unsigned int v8 = ((uint64_t (*)(void))WebKit::WebGPU::ObjectHeap::objectExistsAndValid)();
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v9);
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v10 + 16))(v10, (v8 >> 8) & 1, v8 & 1);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 32);
    uint64_t v12 = v4;
  }
  else
  {
    uint64_t v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v13 + 16))(v13, 0, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);
    uint64_t v12 = v13;
  }
  return v11(v12);
}

void WebKit::RemotePipelineLayout::~RemotePipelineLayout(WebKit::RemotePipelineLayout *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemotePipelineLayout::~RemotePipelineLayout(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemotePipelineLayout::stopListeningForIPC(WebKit::RemotePipelineLayout *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x6Bu, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemotePipelineLayout::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 16))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = 88 * v3;
    do
    {
      uint64_t v4 = std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100](v4, a2)+ 88;
      v5 -= 88;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 56);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9BF8D8[v3])(&v7, a1 + 24);
      }
      *(_DWORD *)(a1 + 56) = -1;
    }
    uint64_t v4 = *(unsigned int **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    uint64_t v5 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ComputePassTimestampWrites,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::WebGPU::ComputePassTimestampWrites,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, a2);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 32);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9BF8F8[v3])(&v6, a1 + 16);
      }
      *(_DWORD *)(a1 + 32) = -1;
    }
    uint64_t v4 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEERKS13_EEEDcSV_DpT0_(int a1, WTF::MachSendRight *this, WTF::MachSendRight *a3)
{
  return WTF::MachSendRight::MachSendRight(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISJ_EENS9_21DefaultRefDerefTraitsISJ_EEEENS9_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSH_SO_SS_EEEEEEDcSW_DpT0_(uint64_t a1, unsigned int **a2)
{
  __n128 result = *a2;
  *a2 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISJ_EENS9_21DefaultRefDerefTraitsISJ_EEEENS9_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSH_SO_SS_EEEEEEDcSW_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 48 * v3;
    char v6 = (_DWORD *)((char *)v4 + 40);
    do
    {
      uint64_t v7 = *v6;
      if (v7 != -1) {
        ((void (*)(char *, _DWORD *))off_1EE9BF960[v7])(&v9, v6 - 8);
      }
      _DWORD *v6 = -1;
      v6 += 12;
      v5 -= 48;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSC_SE_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  __n128 result = *a2;
  *a2 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (unsigned int *)*((void *)v3 + 1);
      *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
      if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
      __n128 result = *(WTF::StringImpl **)v3;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v3 = (WTF::StringImpl *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24);
    uint64_t v4 = *(unsigned int **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
    uint64_t v5 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
    char v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor(WebCore::WebGPU::RenderPipelineDescriptor *this, void *a2)
{
  std::__optional_destruct_base<WebCore::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 144, a2);
  WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, v3);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24);
  char v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  unsigned int v8 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = *(WTF **)(a1 + 40);
    if (v3)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v3, a2);
    }
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8);
    uint64_t v5 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 176))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BF990;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BF990;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage *>::call(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1[1] + 8);
    if (v3)
    {
      uint64_t v18 = a1[2];
      __int16 v16 = 0;
      char v17 = 0;
      uint64_t v5 = *(void *)(v3 + 96);
      if (v5) {
        (*(void (**)(void))(*(void *)v5 + 24))(*(void *)(v3 + 96));
      }
      uint64_t v15 = v5;
      uint64_t v6 = *(void *)(v3 + 120);
      atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
      uint64_t v14 = v6;
      uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x30);
      *uint64_t v7 = &unk_1EE9BFBB0;
      v7[1] = &v14;
      void v7[2] = &v18;
      v7[3] = &v15;
      v7[4] = a2;
      v7[5] = &v16;
      uint64_t v19 = (uint64_t)v7;
      IPC::StreamConnectionWorkQueue::dispatch(*(void *)(v6 + 32), &v19);
      uint64_t v8 = v19;
      uint64_t v19 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      uint64_t v19 = 0x7FF0000000000000;
      int v20 = 0;
      WTF::BinarySemaphore::waitUntil();
      uint64_t v9 = v14;
      uint64_t v14 = 0;
      if (v9 && atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v9 + 16));
        (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v9 + 8);
      }
      uint64_t v10 = v15;
      uint64_t v15 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
      }
    }
  }
  uint64_t v11 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v12(v11);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::prepareForDisplay(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BF9B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::prepareForDisplay(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BF9B8;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::prepareForDisplay(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, 1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::importExternalTextureFromVideoFrame(WebKit::WebGPU::ExternalTextureDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WebCore::MediaPlayer &>::call(uint64_t a1, WebCore::MediaPlayer *this)
{
  WebCore::MediaPlayer::videoFrameForCurrentTime((uint64_t *)&v8, this);
  if (v8)
  {
    uint64_t v3 = (const void *)(*(uint64_t (**)(unsigned int *))(*(void *)v8 + 56))(v8);
    uint64_t v4 = v3;
    uint64_t v5 = *(const void ***)(a1 + 8);
    if (v3) {
      CFRetain(v3);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(const void ***)(a1 + 8);
  }
  uint64_t v6 = *v5;
  *uint64_t v5 = v4;
  if (v6) {
    CFRelease(v6);
  }
  __n128 result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::updateExternalTexture(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&)::$_0,void,WebCore::MediaPlayer &>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9BFA08;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::updateExternalTexture(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&)::$_0,void,WebCore::MediaPlayer &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BFA08;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::updateExternalTexture(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&)::$_0,void,WebCore::MediaPlayer &>::call(uint64_t a1, WebCore::MediaPlayer *a2)
{
  __n128 result = *(atomic_uchar **)(a1 + 8);
  if (!result) {
    return result;
  }
  __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 16), &v11);
  if (!v11) {
    return result;
  }
  WebCore::MediaPlayer::videoFrameForCurrentTime((uint64_t *)&v10, a2);
  if (!v10)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = (const void *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 56))(v10);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_7:
    char v7 = 1;
    goto LABEL_8;
  }
  CFRetain(v5);
  char v7 = 0;
LABEL_8:
  (*(void (**)(uint64_t, const void *))(*(void *)v11 + 32))(v11, v6);
  if ((v7 & 1) == 0) {
    CFRelease(v6);
  }
  __n128 result = v10;
  uint64_t v10 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    __n128 result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 8), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createComputePipelineAsync(WebKit::WebGPU::ComputePipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BFA30;
  uint64_t v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v5 + 8), a2);
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createComputePipelineAsync(WebKit::WebGPU::ComputePipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BFA30;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v5 + 8), a2);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createComputePipelineAsync(WebKit::WebGPU::ComputePipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::call(void *a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t v6 = a1[2];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteComputePipeline::RemoteComputePipeline((uint64_t)v9, (uint64_t)v5, v6, a1 + 3, v7, v8);
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[5], (uint64_t)v9);
    if (atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
    }
  }
  BOOL v10 = v5 != 0;
  uint64_t v11 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)v11 + 16))(v11, v10, a3);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v12(v11);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createRenderPipelineAsync(WebKit::WebGPU::RenderPipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BFA58;
  uint64_t v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v5 + 8), a2);
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createRenderPipelineAsync(WebKit::WebGPU::RenderPipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BFA58;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v5 + 8), a2);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createRenderPipelineAsync(WebKit::WebGPU::RenderPipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::call(void *a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t v6 = a1[2];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteRenderPipeline::RemoteRenderPipeline((uint64_t)v9, (uint64_t)v5, v6, a1 + 3, v7, v8);
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[5], (uint64_t)v9);
    if (atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
    }
  }
  BOOL v10 = v5 != 0;
  uint64_t v11 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)v11 + 16))(v11, v10, a3);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v12(v11);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BFA80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BFA80;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 16))
  {
    int v3 = *(_DWORD *)(a3 + 8);
    if (v3 == -1) {
      uint64_t v4 = -1;
    }
    else {
      uint64_t v4 = *(unsigned int *)(a3 + 8);
    }
    if (v4 == 2)
    {
      if (v3 == 2)
      {
        uint64_t v5 = *(WTF **)a3;
        *(_DWORD *)uint64_t v5 = **(_DWORD **)a3 + 1;
        uint64_t v11 = (_DWORD *)*((void *)v5 + 1);
        if (v11) {
          *v11 += 2;
        }
        char v17 = v11;
        unsigned int v18 = 2;
        char v19 = 1;
        uint64_t v12 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v12 + 16))(v12, a2, &v17);
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        if (v19 && v18 != -1) {
          off_1EE9BFA98[v18](&v20, &v17);
        }
        return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v5, v8);
      }
      goto LABEL_32;
    }
    if (v4 == 1)
    {
      if (v3 == 1)
      {
        uint64_t v5 = *(WTF **)a3;
        *(_DWORD *)uint64_t v5 = **(_DWORD **)a3 + 1;
        uint64_t v6 = (_DWORD *)*((void *)v5 + 1);
        if (v6) {
          *v6 += 2;
        }
        char v17 = v6;
        unsigned int v18 = 1;
        char v19 = 1;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v7 + 16))(v7, a2, &v17);
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        if (v19)
        {
          if (v18 != -1) {
            off_1EE9BFA98[v18](&v20, &v17);
          }
        }
        return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v5, v8);
      }
      goto LABEL_32;
    }
    if (v3)
    {
LABEL_32:
      uint64_t v16 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl **)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(v16);
    }
    uint64_t v13 = *(WTF **)a3;
    ++**(_DWORD **)a3;
    unsigned int v18 = 0;
    char v19 = 1;
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v14 + 16))(v14, a2, &v17);
    __n128 result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v19 && v18 != -1) {
      __n128 result = (WTF::StringImpl **)off_1EE9BFA98[v18](&v20, &v17);
    }
    if (*(_DWORD *)v13 == 1) {
      return (WTF::StringImpl **)WTF::fastFree(v13, v15);
    }
    else {
      --*(_DWORD *)v13;
    }
  }
  else
  {
    LOBYTE(v17) = 0;
    char v19 = 0;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v10 + 16))(v10, a2, &v17);
    __n128 result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v19 && v18 != -1) {
      return (WTF::StringImpl **)off_1EE9BFA98[v18](&v20, &v17);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  __n128 result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  __n128 result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    int v3 = this[1];
    *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BFAC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BFAC0;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 16))
  {
    int v3 = *(_DWORD *)(a3 + 8);
    if (v3 == -1) {
      uint64_t v4 = -1;
    }
    else {
      uint64_t v4 = *(unsigned int *)(a3 + 8);
    }
    if (v4 == 2)
    {
      if (v3 == 2)
      {
        uint64_t v5 = *(WTF **)a3;
        *(_DWORD *)uint64_t v5 = **(_DWORD **)a3 + 1;
        uint64_t v11 = (_DWORD *)*((void *)v5 + 1);
        if (v11) {
          *v11 += 2;
        }
        char v17 = v11;
        int v18 = 2;
        char v19 = 1;
        uint64_t v12 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v12 + 16))(v12, a2, &v17);
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        if (v19 && v18 != -1) {
          off_1EE9BFA98[v18](&v20, &v17);
        }
        return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v5, v8);
      }
      goto LABEL_32;
    }
    if (v4 == 1)
    {
      if (v3 == 1)
      {
        uint64_t v5 = *(WTF **)a3;
        *(_DWORD *)uint64_t v5 = **(_DWORD **)a3 + 1;
        uint64_t v6 = (_DWORD *)*((void *)v5 + 1);
        if (v6) {
          *v6 += 2;
        }
        char v17 = v6;
        int v18 = 1;
        char v19 = 1;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v7 + 16))(v7, a2, &v17);
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        if (v19)
        {
          if (v18 != -1) {
            off_1EE9BFA98[v18](&v20, &v17);
          }
        }
        return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v5, v8);
      }
      goto LABEL_32;
    }
    if (v3)
    {
LABEL_32:
      uint64_t v16 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl **)WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(v16);
    }
    uint64_t v13 = *(WTF **)a3;
    ++**(_DWORD **)a3;
    int v18 = 0;
    char v19 = 1;
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v14 + 16))(v14, a2, &v17);
    __n128 result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v19 && v18 != -1) {
      __n128 result = (WTF::StringImpl **)off_1EE9BFA98[v18](&v20, &v17);
    }
    if (*(_DWORD *)v13 == 1) {
      return (WTF::StringImpl **)WTF::fastFree(v13, v15);
    }
    else {
      --*(_DWORD *)v13;
    }
  }
  else
  {
    LOBYTE(v17) = 0;
    char v19 = 0;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v10 + 16))(v10, a2, &v17);
    __n128 result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v19 && v18 != -1) {
      return (WTF::StringImpl **)off_1EE9BFA98[v18](&v20, &v17);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BFAE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BFAE8;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::initialize(void)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BFB10;
  a1[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::initialize(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BFB10;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::initialize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(atomic_uint **)(v1 + 80);
  atomic_fetch_add(v2 + 2, 1u);
  IPC::StreamServerConnection::open(*(IPC::StreamServerConnection **)(v1 + 88), v2);
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(v1 + 88), v1, 0x50u, *(void *)(v1 + 112));
  uint64_t v3 = *(atomic_uchar **)(v1 + 24);
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, *(void *)(v1 + 32), &v20);
  }
  else {
    uint64_t v20 = 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
  uint64_t v4 = (IPC::Semaphore *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9BFB60;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = v1;
  uint64_t v16 = v4;
  WebCore::WebGPU::create();
  uint64_t v5 = v16;
  uint64_t v16 = 0;
  if (v5) {
    (*(void (**)(IPC::Semaphore *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v19;
  if (v19)
  {
    uint64_t v19 = 0;
    uint64_t v7 = *(void *)(v1 + 96);
    *(void *)(v1 + 96) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    uint64_t v8 = *(void *)(v1 + 88);
    LOBYTE(v16) = 1;
    char v17 = (uint64_t *)(v2 + 8);
    int v18 = (uint64_t *)(v8 + 160);
    IPC::Connection::send<Messages::RemoteGPUProxy::WasCreated>(*(void *)(v8 + 40), &v16, *(void *)(v1 + 112));
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v10 = (task_t *)MEMORY[0x1E4F14960];
    semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)&v15 + 1, 0, 0);
    uint64_t v14 = 0;
    semaphore_create(*v10, (semaphore_t *)&v14 + 1, 0, 0);
    LOBYTE(v16) = 0;
    char v17 = &v15;
    int v18 = &v14;
    IPC::Connection::send<Messages::RemoteGPUProxy::WasCreated>(*(void *)(*(void *)(v1 + 88) + 40), &v16, *(void *)(v1 + 112));
    IPC::Semaphore::destroy((IPC::Semaphore *)&v14);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
    IPC::Semaphore::destroy((IPC::Semaphore *)&v15);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v15);
  }
  uint64_t v11 = v19;
  uint64_t v19 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
  }
  uint64_t v12 = v20;
  uint64_t v20 = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 16));
  }
  return WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)v2 + 2, v9);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::stopListeningForIPC(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  IPC::StreamServerConnection::stopReceivingMessages(v1[11], 0x50u, v1[14]);
  IPC::StreamServerConnection::invalidate((IPC::StreamServerConnection *)v1[11]);
  uint64_t v3 = (unsigned int *)v1[11];
  v1[11] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = v1[13];
  uint64_t v5 = (_DWORD *)(v4 + 8);
  ++*(_DWORD *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 24);
  if (v6)
  {
    *(void *)(v4 + 24) = 0;
    _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E15deallocateTableEPS49_(v6, v2);
  }
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v5, v2);
  uint64_t result = v1[12];
  v1[12] = 0;
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v8();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::workQueueInitialize(void)::$_0,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BFB60;
  a1[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::workQueueInitialize(void)::$_0,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BFB60;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::workQueueInitialize(void)::$_0,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 80);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t result = (unsigned int *)IPC::StreamConnectionWorkQueue::dispatch(v2, a2);
  if (v2)
  {
    return WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v2 + 8), v4);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteGPUProxy::WasCreated>(uint64_t a1, IPC::Semaphore **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 898;
  *((void *)v6 + nw_tcp_options_set_no_delay(options, 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  char v7 = *(unsigned char *)a2;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = v7;
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v6, a2[1]);
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v6, a2[2]);
    IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::requestAdapter(WebKit::WebGPU::RequestAdapterOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteGPURequestAdapterResponse> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BFB88;
  uint64_t v3 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
  }
  uint64_t v5 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), a2);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::requestAdapter(WebKit::WebGPU::RequestAdapterOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteGPURequestAdapterResponse> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BFB88;
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), a2);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::requestAdapter(WebKit::WebGPU::RequestAdapterOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteGPURequestAdapterResponse> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::call(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v6 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v7 = a1[2];
    uint64_t v8 = a1[4];
    uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
    WebKit::RemoteAdapter::RemoteAdapter((uint64_t)v9, v6, v5, v3, v7, a1 + 3, v8);
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[4], (uint64_t)v9);
    uint64_t v10 = *a2;
    uint64_t v11 = *(WTF::StringImpl **)(*a2 + 24);
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
    uint64_t v12 = *(WTF **)(v10 + 32);
    ++*(_DWORD *)v12;
    uint64_t v13 = *(void *)(v10 + 40);
    ++*(_DWORD *)v13;
    v22[0] = v11;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v22[1], (uint64_t)v12 + 8);
    long long v24 = *(_OWORD *)(v13 + 4);
    long long v25 = *(_OWORD *)(v13 + 20);
    long long v26 = *(_OWORD *)(v13 + 36);
    *(void *)uint64_t v27 = *(void *)(v13 + 52);
    *(_OWORD *)&v27[8] = *(_OWORD *)(v13 + 64);
    *(void *)&v27[24] = *(void *)(v13 + 80);
    LODWORD(v28) = *(_DWORD *)(v13 + 88);
    *((void *)&v28 + nw_tcp_options_set_no_delay(options, 1) = *(void *)(v13 + 96);
    long long v29 = *(_OWORD *)(v13 + 104);
    long long v30 = *(_OWORD *)(v13 + 120);
    long long v31 = *(_OWORD *)(v13 + 136);
    char v32 = *(unsigned char *)(*a2 + 48);
    long long v14 = *(_OWORD *)v22;
    v22[1] = 0;
    long long v33 = v14;
    *(void *)&long long v14 = v23;
    uint64_t v23 = 0;
    uint64_t v34 = v14;
    long long v41 = v29;
    long long v42 = v30;
    long long v43 = v31;
    char v44 = v32;
    long long v40 = v28;
    long long v36 = v25;
    long long v35 = v24;
    long long v39 = *(_OWORD *)&v27[16];
    long long v38 = *(_OWORD *)v27;
    long long v37 = v26;
    char v45 = 1;
    uint64_t v15 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v15 + 16))(v15, &v33);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v16);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22[1], v17);
    if (*(_DWORD *)v13 == 1) {
      WTF::fastFree((WTF *)v13, v18);
    }
    else {
      --*(_DWORD *)v13;
    }
    uint64_t result = WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v12, v18);
    if (atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9 + 2);
      return (WTF *)(*(uint64_t (**)(unsigned int *))(*(void *)v9 + 8))(v9);
    }
  }
  else
  {
    LOBYTE(v33) = 0;
    char v45 = 0;
    uint64_t v19 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v19 + 16))(v19, &v33);
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    return (WTF *)std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v20);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::paintNativeImageToImageBuffer(WebCore::NativeImage &,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  WebKit::RemoteRenderingBackend::imageBuffer(**(void **)(a1 + 8), **(void **)(a1 + 16), &v17);
  uint64_t v2 = v17;
  if (v17)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = **(void **)(a1 + 24);
    uint64_t v16 = WebCore::ImageBuffer::backendSize(v17);
    uint64_t v5 = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(void *)v2 + 16))(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 56))(v4, v3, &v16, v5);
    (*(void (**)(WebCore::ImageBuffer *))(*(void *)v2 + 24))(v2);
    char v7 = 0;
    char v17 = 0;
    uint64_t v8 = *((void *)v2 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *(void *)(v8 + 8);
    int v10 = 1;
    uint64_t v11 = v9 - 1;
    *(void *)(v8 + 8) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v15 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      BOOL v13 = v15 != 0;
    }
    else
    {
      uint64_t v12 = 0;
      BOOL v13 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v11) {
        return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v11) {
        return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
      }
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    if (!v13) {
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
}

uint64_t WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors(uint64_t a1, uint64_t a2)
{
  size_t length = 0;
  data = xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 16), "client-sdk-aligned-behaviors", &length);
  uint64_t v4 = data;
  if (length) {
    BOOL v5 = data == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t result = !v5;
  if (!v5)
  {
    if (length == 12)
    {
      uint64_t v7 = *(void *)v4;
      *(_DWORD *)(a2 + 8) = v4[2];
      *(void *)a2 = v7;
    }
    else
    {
      uint64_t result = 93;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::Config::configureForTesting(JSC::Config *this)
{
  uint64_t v1 = (WTF::Config *)WTF::setPermissionsOfConfigPage(this);
  uint64_t v2 = WTF::Config::disableFreezingForTesting(v1);

  return MEMORY[0x1F40EA868](v2);
}

uint64_t WebKit::XPCServiceExit(WebKit *this)
{
  return MEMORY[0x1F40CF2F0](this);
}

void ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_22()
{
  uint64_t v0 = WTF::exitProcess((WTF *)1);
  ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_51(v0);
}

void ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_51()
{
  uint64_t v0 = (WebKit *)WTF::exitProcess((WTF *)1);
  WebKit::XPCServiceMain(v0, v1, v2);
}

void WebKit::XPCServiceMain(WebKit *this, int a2, const char **a3)
{
}

void sub_198ADD170(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerBackingStore::ensureBackingStore(WebKit::RemoteLayerBackingStore *this, const Parameters *a2)
{
  uint64_t v4 = (char *)this + 24;
  if ((*((unsigned char *)this + 24) == 0) == (*(unsigned char *)a2 != 0)
    || (*((float *)this + 7) == *((float *)a2 + 1) ? (BOOL v5 = *((float *)this + 8) == *((float *)a2 + 2)) : (BOOL v5 = 0),
        !v5
     || (uint64_t result = WebCore::operator==(), !result)
     || *((float *)this + 12) != *((float *)a2 + 6)
     || *((unsigned __int8 *)this + 52) != *((unsigned __int8 *)a2 + 28)
     || *((unsigned __int8 *)this + 53) != *((unsigned __int8 *)a2 + 29)))
  {
    uint64_t v7 = *(void *)a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v4 = v7;
    uint64_t v8 = *((void *)a2 + 2);
    if (v8) {
      CFRetain(*((CFTypeRef *)a2 + 2));
    }
    uint64_t v9 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = v8;
    if (v9) {
      CFRelease(v9);
    }
    int v10 = *((_DWORD *)a2 + 6);
    *((_WORD *)this + 26) = *((_WORD *)a2 + 14);
    *((_DWORD *)this + 12) = v10;
    uint64_t v11 = *(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)this + 96);
    return v11(this);
  }
  return result;
}

uint64_t std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(a1, a2);
  }
  else
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor((unsigned int *)a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

uint64_t WebKit::RemoteLayerBackingStore::layerWillBeDisplayedWithRenderingSuppression(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 832);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(WebKit::RemoteLayerBackingStoreCollection **)(v2 + 88);
      if (v4) {
        WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayedWithRenderingSuppression(v4, this);
      }
    }
  }
  return 0;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayedWithRenderingSuppression(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 56, (unsigned int *)a2, (uint64_t)v9);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>((uint64_t)this + 40, (uint64_t)a2, v9);
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = (uint64_t *)(v4 + 8 * v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v8, (uint64_t *)this + 5, v6, (uint64_t *)(v4 + 8 * v5));
  return 0;
}

void WebKit::RemoteLayerBackingStore::setNeedsDisplay(WebKit::RemoteLayerBackingStore *a1, IntPoint a2, IntSize a3)
{
  v6.m_location = a2;
  v6.m_std::string::size_type size = a3;
  v7.m_location = (IntPoint)WebKit::RemoteLayerBackingStore::layerBounds(a1);
  v7.m_std::string::size_type size = v3;
  WebCore::IntRect::intersect((WebCore::IntRect *)&v7, &v6);
  IntRect v4 = v7;
  WebCore::Region::Region((WebCore::Region *)v5, &v4);
  WebCore::Region::unite();
  WebCore::Region::~Region((WebCore::Region *)v5);
}

void sub_198ADD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::Region::~Region((WebCore::Region *)va);
  _Unwind_Resume(a1);
}

BOOL WebKit::RemoteLayerBackingStore::supportsPartialRepaint(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = WebCore::ImageBuffer::calculateBackendSize();
  unint64_t v2 = HIDWORD(v1);
  if ((int)v1 >= 0) {
    unsigned int v3 = v1;
  }
  else {
    unsigned int v3 = -(int)v1;
  }
  if (v1 < 0) {
    LODWORD(v2) = -HIDWORD(v1);
  }
  unint64_t v4 = v3 * (unint64_t)v2;
  return (v4 & 0xFFFFFFFF00000000) != 0 || v4 > 0x1000;
}

WTF **WebKit::RemoteLayerBackingStore::setDelegatedContents(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v17, (unsigned int *)a2);
  std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>(a1 + 104, (uint64_t)v17);
  if (v18 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v18]((int)&v19, (WTF::MachSendRight *)v17);
  }
  uint64_t v4 = *(void *)(a2 + 72);
  if (v4)
  {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9BFDF8;
    *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
    v17[0] = v5;
    unint64_t v7 = *(unsigned int *)(a1 + 212);
    if (v7 == *(_DWORD *)(a1 + 208))
    {
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= v7 + 1) {
        unint64_t v10 = v7 + 1;
      }
      else {
        unint64_t v10 = v9;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 200, v10);
      unint64_t v7 = *(unsigned int *)(a1 + 212);
      uint64_t v11 = *(void *)(a1 + 200);
      uint64_t v12 = v17[0];
      v17[0] = 0;
      *(void *)(v11 + 8 * v7) = v12;
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 200);
      v17[0] = 0;
      *(void *)(v13 + 8 * v7) = v5;
    }
    *(_DWORD *)(a1 + 212) = v7 + 1;
  }
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v14 = *(void *)(a2 + 80);
    if (!*(unsigned char *)(a1 + 192)) {
      *(unsigned char *)(a1 + 192) = 1;
    }
    *(void *)(a1 + 184) = v14;
  }
  else if (*(unsigned char *)(a1 + 192))
  {
    *(unsigned char *)(a1 + 192) = 0;
  }
  WebCore::Region::Region((WebCore::Region *)v17);
  WebCore::Region::operator=();
  WebCore::Region::~Region((WebCore::Region *)v17);
  return WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF **)(a1 + 216), v15);
}

void sub_198ADD5E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9)
{
}

WTF **std::unique_ptr<WebKit::anonymous namespace'::DelegatedContentsFenceFlusher>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  unsigned int v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    uint64_t v4 = (unsigned int *)*((void *)v3 + 1);
    *((void *)v3 + nw_tcp_options_set_no_delay(options, 1) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void WebKit::RemoteLayerBackingStore::dirtyRepaintCounterIfNecessary(WebKit::RemoteLayerBackingStore *this)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 2) + 48) + 72))(*(void *)(*((void *)this + 2) + 48)))
  {
    IntRect v2 = (IntRect)xmmword_1994F6170;
    WebCore::Region::Region((WebCore::Region *)v1, &v2);
    WebCore::Region::unite();
    WebCore::Region::~Region((WebCore::Region *)v1);
  }
}

void sub_198ADD78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WebCore::Region::~Region((WebCore::Region *)va);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::purgeFrontBufferForTesting(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 832);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      unsigned int v3 = this;
      this = *(WebKit::RemoteLayerBackingStore **)(v2 + 88);
      if (this) {
        return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStoreCollection::purgeFrontBufferForTesting(this, v3);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::purgeFrontBufferForTesting(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 16))(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 40);
    if (v5)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      v13[0] = 0;
      v13[1] = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      uint64_t v11 = (void *)v5;
      char v12 = 1;
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)v13, (unint64_t)&v11);
      uint64_t v7 = (uint64_t)v11;
      uint64_t v11 = 0;
      if (v7) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v6);
      }
      unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v8 = &unk_1EE9BFE88;
      uint64_t v11 = v8;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((void *)this + 2) + 24), (uint64_t)v13, (uint64_t *)&v11, 1);
      if (v11) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v10);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 24))(a2);
    if (result)
    {
      if (!*((unsigned char *)a2 + 24))
      {
        return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 40, 1);
      }
    }
    else
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_198ADD9C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(a3 + 16), a2);
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v4, v6);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::purgeBackBufferForTesting(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 832);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      unsigned int v3 = this;
      this = *(WebKit::RemoteLayerBackingStore **)(v2 + 88);
      if (this) {
        return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStoreCollection::purgeBackBufferForTesting(this, v3);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::purgeBackBufferForTesting(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 16))(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 40);
    if (v5)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      v13[0] = 0;
      v13[1] = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      uint64_t v11 = (void *)v5;
      char v12 = 6;
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)v13, (unint64_t)&v11);
      uint64_t v7 = (uint64_t)v11;
      uint64_t v11 = 0;
      if (v7) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v6);
      }
      unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v8 = &unk_1EE9BFEB0;
      uint64_t v11 = v8;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((void *)this + 2) + 24), (uint64_t)v13, (uint64_t *)&v11, 1);
      if (v11) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v10);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 24))(a2);
    if (result)
    {
      if (!*((unsigned char *)a2 + 24))
      {
        uint64_t result = WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 42, 1);
        if (!*((unsigned char *)a2 + 24))
        {
          return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 44, 1);
        }
      }
    }
    else
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_198ADDC4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(a3 + 16), a2);
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v4, v6);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::markFrontBufferVolatileForTesting(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 832);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      unsigned int v3 = this;
      this = *(WebKit::RemoteLayerBackingStore **)(v2 + 88);
      if (this) {
        return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStoreCollection::markFrontBufferVolatileForTesting(this, v3);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markFrontBufferVolatileForTesting(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 16))(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 40);
    if (v5)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      v13[0] = 0;
      v13[1] = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
      uint64_t v11 = (void *)v5;
      char v12 = 1;
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)v13, (unint64_t)&v11);
      uint64_t v7 = (uint64_t)v11;
      uint64_t v11 = 0;
      if (v7) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v6);
      }
      unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v8 = &unk_1EE9BFED8;
      uint64_t v11 = v8;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((void *)this + 2) + 24), (uint64_t)v13, (uint64_t *)&v11, 0);
      if (v11) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v10);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 24))(a2);
    if (result)
    {
      if (!*((unsigned char *)a2 + 24))
      {
        return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 40, 0);
      }
    }
    else
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_198ADDEBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(a3 + 16), a2);
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v4, v6);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerBackingStoreCollection::~RemoteLayerBackingStoreCollection(WebKit::RemoteLayerBackingStoreCollection *this)
{
  *(void *)this = &unk_1EE9BFD58;
  uint64_t v2 = (WebKit::RemoteLayerBackingStoreCollection *)((char *)this + 88);
  *((void *)this + 1nw_tcp_options_set_no_delay(options, 1) = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(v2);
  uint64_t v5 = (unsigned int **)*((void *)this + 9);
  if (v5) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v5, v4);
  }
  IntRect v6 = (unsigned int **)*((void *)this + 7);
  if (v6) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, v4);
  }
  uint64_t v7 = (unsigned int **)*((void *)this + 5);
  if (v7) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, v4);
  }
  unint64_t v8 = (unsigned int **)*((void *)this + 3);
  if (v8) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, v4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteLayerBackingStoreCollection::~RemoteLayerBackingStoreCollection(this);

  WTF::fastFree(v1, v2);
}

void WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData::~LayerPrepareBuffersData(WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData *this)
{
  WebCore::Region::~Region((WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData *)((char *)this + 8));
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), v2);
  }
}

double WebKit::RemoteLayerBackingStoreCollection::scheduleVolatilityTimer(WebKit::RemoteLayerBackingStoreCollection *this)
{
  if ((*((void *)this + 15) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*((void *)this + 15) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

uint64_t **WebKit::RemoteLayerBackingStoreCollection::backingStoreBecameUnreachable(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 24);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>((uint64_t)this + 24, (uint64_t)a2, (uint64_t **)v12);
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = (uint64_t *)(v5 + 8 * v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  double result = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(v11, v4, v7, (uint64_t *)(v5 + 8 * v6));
  if (*((uint64_t **)&v12[0] + 1) != v11[1])
  {
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 40, (unsigned int *)a2, (uint64_t)v11);
    v9[0] = v12[0];
    v9[1] = v12[1];
    uint64_t v10 = v13;
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove((uint64_t)v4, (uint64_t)v9);
    return (uint64_t **)(*(uint64_t (**)(WebKit::RemoteLayerBackingStoreCollection *, WebKit::RemoteLayerBackingStore *))(*(void *)this + 64))(this, a2);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove((uint64_t *)a1, *(unsigned int ***)(a2 + 8));
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  unsigned int v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  if (v6 > v5)
  {
    _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit23RemoteLayerBackingStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, v3);
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t v7 = *(void *)a1;
    if (*(void *)a1)
    {
      LODWORD(v7) = *(_DWORD *)(v7 - 12);
      if (v7 > 0x7FFFFFFE) {
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(a1 + 12) = 2 * v7;
  }
  return v4;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile(WebKit::RemoteLayerWithInProcessRenderingBackingStore *a1, uint64_t a2, char a3, double a4)
{
  unsigned int v6 = a1;
  if ((a3 & 2) != 0 && (double v7 = a4 - *(double *)(a2 + 312), v7 < 1.0))
  {
    if (v7 >= 0.2 && *(unsigned char *)(a2 + 24) == 0) {
      WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 352), 0);
    }
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v9 = 1;
    }
    else
    {
      a1 = (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 352), 0);
      uint64_t v9 = (uint64_t)a1;
      if (!*(unsigned char *)(a2 + 24))
      {
        a1 = (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 336), 0);
        uint64_t v9 = a1 & v9;
      }
    }
    uint64_t v10 = *(void *)(a2 + 8);
    ++*((_DWORD *)v6 + 16);
    if (!v10
      || !*(void *)(v10 + 8)
      || ((uint64_t v13 = v10,
           a1 = (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v6 + 7, &v13), (a3 & 1) == 0)? (char v11 = (char)a1): (char v11 = 0), (v11 & 1) == 0))
    {
      if (!*(unsigned char *)(a2 + 24)) {
        return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 320), 0) & v9;
      }
    }
  }
  return v9;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  if ((*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 16))(a2))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile((uint64_t)this, (uint64_t)a2, 0, (uint64_t)&v9, 0.0);
    if (HIDWORD(v10))
    {
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      unsigned int v5 = (atomic_uint *)*((void *)this + 1);
      if (v5) {
        atomic_fetch_add(v5, 1u);
      }
      unsigned int v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v6 = &unk_1EE9BFF00;
      v6[1] = v5;
      unint64_t v8 = v6;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((void *)this + 2) + 24), (uint64_t)&v9, (uint64_t *)&v8, 0);
      if (v8) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
    return WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
  }
  else if ((*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(void *)a2 + 24))(a2))
  {
    return WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile(this, (uint64_t)a2, 0, 0.0);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

void sub_198ADE49C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(uint64_t *a1, uint64_t *a2)
{
  __int16 v4 = WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile(a1, 1, 1);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v5 = WebKit::RemoteLayerBackingStoreCollection::collectAllRemoteRenderingBufferIdentifiersToMarkVolatile(a1, 1u, 1u, (uint64_t)&v13);
  if (HIDWORD(v14))
  {
    int v6 = v5;
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = WTF::fastMalloc((WTF *)0x18);
    if (v6) {
      __int16 v9 = 256;
    }
    else {
      __int16 v9 = 0;
    }
    *(void *)uint64_t v8 = &unk_1EE9BFF28;
    *(_WORD *)(v8 + 8) = v9 | v4;
    *(void *)(v8 + 16) = v7;
    uint64_t v12 = v8;
    WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(a1[2] + 24), (uint64_t)&v13, &v12, 0);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
  }
  return WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v10);
}

void sub_198ADE624(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void *WebKit::RemoteLayerBackingStoreCollection::gpuProcessConnectionWasDestroyed(WebKit::RemoteLayerBackingStoreCollection *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 24);
  uint64_t v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v18, v2, v3, v4);
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = (uint64_t *)(v5 + 8 * v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v16, v2, v7, (uint64_t *)(v5 + 8 * v6));
  while (v19 != v17)
  {
    uint64_t v8 = *(WebKit::RemoteLayerBackingStore **)(*(void *)v19 + 8);
    if ((*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(void *)v8 + 16))(v8)) {
      WebKit::RemoteLayerBackingStore::setNeedsDisplay(v8);
    }
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  __int16 v9 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 5);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v18, (uint64_t *)this + 5, v9, v10);
  uint64_t v11 = *((void *)this + 5);
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    uint64_t v13 = (uint64_t *)(v11 + 8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v16, (uint64_t *)this + 5, v13, (uint64_t *)(v11 + 8 * v12));
  while (v19 != v17)
  {
    uint64_t v15 = *(WebKit::RemoteLayerBackingStore **)(*(void *)v19 + 8);
    if ((*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(void *)v15 + 16))(v15)) {
      WebKit::RemoteLayerBackingStore::setNeedsDisplay(v15);
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  return result;
}

uint64_t WebKit::RemoteLayerBackingStore::isRemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerBackingStore::bufferSetIdentifier(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

WebKit::RemoteLayerBackingStore *std::make_unique[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore,WebKit::PlatformCALayerRemote &>@<X0>(WebKit::PlatformCALayerRemote *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x170);
  uint64_t result = WebKit::RemoteLayerBackingStore::RemoteLayerBackingStore((WebKit::RemoteLayerBackingStore *)v4, a1);
  *(void *)uint64_t v4 = &unk_1EE9C0298;
  *(void *)(v4 + 320) = 0;
  *(unsigned char *)(v4 + 328) = 0;
  *(void *)(v4 + 336) = 0;
  *(unsigned char *)(v4 + 344) = 0;
  *(void *)(v4 + 352) = 0;
  *(unsigned char *)(v4 + 360) = 0;
  *a2 = v4;
  return result;
}

void sub_198ADE878(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor(unsigned int *a1, unsigned int *a2)
{
  *(unsigned char *)a1 = 0;
  a1[16] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_198ADE8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = v13[16];
  if (v15 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15]((int)&a13, (WTF::MachSendRight *)v13);
  }
  v13[16] = -1;
  _Unwind_Resume(exception_object);
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1> const&>(unsigned int *result, unsigned int *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[16];
  if (v4 != -1) {
    uint64_t result = (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v4]((int)&v7, (WTF::MachSendRight *)result);
  }
  v3[16] = -1;
  uint64_t v5 = a2[16];
  if (v5 != -1)
  {
    uint64_t result = (unsigned int *)off_1EE9BFDD8[v5]((int)&v6, (WebCore::ShareableBitmapHandle *)v3, (WebCore::ShareableBitmapHandle *)a2);
    v3[16] = v5;
  }
  return result;
}

WebCore::ShareableBitmapHandle *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(int a1, WebCore::ShareableBitmapHandle *this, WebCore::ShareableBitmapHandle *a3)
{
  return WebCore::ShareableBitmapHandle::ShareableBitmapHandle(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(int a1, WTF::MachSendRight *this, WTF::MachSendRight *a3)
{
  return WTF::MachSendRight::MachSendRight(this, a3);
}

WebCore::ShareableBitmapHandle *WebCore::ShareableBitmapHandle::ShareableBitmapHandle(WebCore::ShareableBitmapHandle *this, const WebCore::ShareableBitmapHandle *a2)
{
  uint64_t v4 = WTF::MachSendRight::MachSendRight(this, a2);
  *(void *)(v4 + 8) = *((void *)a2 + 1);
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  std::__optional_copy_base<WebCore::DestinationColorSpace,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(v4 + 24), (uint64_t)a2 + 24);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)this + 44) = 0;
  if (*((unsigned char *)a2 + 44)) {
    *((unsigned char *)this + 44) = 1;
  }
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)this + 52) = 0;
  if (*((unsigned char *)a2 + 52)) {
    *((unsigned char *)this + 52) = 1;
  }
  *((void *)this + 7) = *((void *)a2 + 7);
  return this;
}

void sub_198ADEA34(_Unwind_Exception *a1)
{
  WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<WebCore::DestinationColorSpace,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }
  return a1;
}

void sub_198ADEA94(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = *(const void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::anonymous namespace'::DelegatedContentsFenceFlusher::~DelegatedContentsFenceFlusher(WebKit::_anonymous_namespace_::DelegatedContentsFenceFlusher *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
}

void WebKit::anonymous namespace'::DelegatedContentsFenceFlusher::~DelegatedContentsFenceFlusher(WebKit::_anonymous_namespace_::DelegatedContentsFenceFlusher *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::anonymous namespace'::DelegatedContentsFenceFlusher::flushAndCollectHandles(uint64_t a1)
{
  return (*(uint64_t (**)(double))(**(void **)(a1 + 8) + 16))(5.0);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      char v7 = *(uint64_t **)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v7++;
        atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::parseInteger<unsigned long long,char16_t>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  if (!a1 || !a2) {
    return v5 | v4;
  }
  uint64_t v6 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    unsigned int v7 = *(v6 - 1);
    if (v7 - 9 >= 5 && v7 != 32) {
      break;
    }
    ++v6;
    if (!--a2) {
      goto LABEL_54;
    }
  }
  if (v7 == 43)
  {
    if (!--a2) {
      goto LABEL_54;
    }
    unsigned int v7 = *v6;
  }
  else
  {
    --v6;
  }
  if (v7 - 48 <= 9)
  {
    if (v7 - 48 < a3)
    {
      if ((int)a3 >= 36) {
        int v8 = 36;
      }
      else {
        int v8 = a3;
      }
      unsigned int v9 = v8 + 87;
      goto LABEL_23;
    }
LABEL_54:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    return v5 | v4;
  }
  if ((v7 | 0x20) < 0x61) {
    goto LABEL_54;
  }
  int v10 = (int)a3 >= 36 ? 36 : a3;
  unsigned int v9 = v10 + 87;
  if (v10 + 87 <= (v7 | 0x20)) {
    goto LABEL_54;
  }
LABEL_23:
  unint64_t v4 = 0;
  char v11 = 0;
  uint64_t v12 = a2 - 1;
  uint64_t v13 = v6 + 1;
  uint64_t v14 = &v6[a2];
  while (1)
  {
    unsigned int v15 = v7 - 48;
    uint64_t v16 = v7 - 48;
    uint64_t v17 = (v7 | 0x20) - 87;
    if (v15 < 0xA) {
      uint64_t v17 = v16;
    }
    uint64_t v18 = (v4 * (unsigned __int128)a3) >> 64;
    if (is_mul_ok(v4, a3)) {
      v4 *= a3;
    }
    BOOL v19 = __CFADD__(v4, v17);
    unint64_t v20 = v4 + v17;
    int v21 = v19;
    if (!v19) {
      unint64_t v4 = v20;
    }
    if (v18 ? 1 : v21) {
      char v11 = 1;
    }
    if (!v12) {
      break;
    }
    ++v6;
    unsigned int v7 = *v13;
    if (v7 - 48 > 9)
    {
      if ((v7 | 0x20) < 0x61 || v9 <= (v7 | 0x20))
      {
        uint64_t v14 = v13;
        break;
      }
    }
    else if (v7 - 48 >= a3)
    {
      uint64_t v14 = v6;
      break;
    }
    --v12;
    ++v13;
  }
  if (v11) {
    goto LABEL_54;
  }
  if (!a4 && v12)
  {
    uint64_t v23 = 0;
    do
    {
      int v24 = v14[v23];
      if ((v24 - 9) >= 5 && v24 != 32) {
        goto LABEL_54;
      }
    }
    while (v12 != ++v23);
  }
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF00;
  unint64_t v4 = v4;
  return v5 | v4;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_E3__1vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BFE38;
  uint64_t v2 = (void *)a1[3];
  if (v2) {

  }
  uint64_t v3 = (void *)a1[2];
  if (v3) {

  }
  return a1;
}

uint64_t *WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>>(uint64_t a1, unint64_t a2)
{
  uint64_t result = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *result;
  uint64_t *result = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

const void **WTF::RetainPtr<objc_object *>::operator=(const void **a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *a1;
  *a1 = cf;
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::moveOverlapping(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a1 <= a3)
  {
    if (a2 != a1)
    {
      uint64_t v5 = (void *)(a3 + 24 * ((uint64_t)(a2 - a1) / 24) - 8);
      do
      {
        *((_OWORD *)v5 - nw_tcp_options_set_no_delay(options, 1) = *(_OWORD *)(v3 - 24);
        uint64_t v6 = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        *uint64_t v5 = v6;
        unsigned int v7 = *(const void **)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v7) {
          CFRelease(v7);
        }
        v3 -= 24;
        v5 -= 3;
      }
      while (v3 != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::move(a1, a2, a3);
  }
}

uint64_t *_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit23RemoteLayerBackingStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    if (v3)
    {
      int v4 = 0;
      uint64_t v5 = v3 - 1;
      do
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)(v2 + 8 * v5);
        if ((unint64_t)(v7 + 1) >= 2 && !*(void *)(v7 + 8))
        {
          *(void *)(v2 + 8 * v5) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v7);
            uint64_t v18 = result;
            int v15 = v4;
            uint64_t v14 = v2;
            uint64_t v16 = v5;
            uint64_t v17 = v5;
            WTF::fastFree((WTF *)v7, a2);
            uint64_t v6 = v17;
            uint64_t result = v18;
            uint64_t v5 = v16;
            uint64_t v2 = v14;
            int v4 = v15;
          }
          *(void *)(v2 + 8 * v6) = -1;
          ++v4;
        }
        --v5;
      }
      while (v6);
      uint64_t v8 = *result;
      if (v4)
      {
        *(_DWORD *)(v8 - 16) += v4;
        uint64_t v12 = *result;
        if (*result) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v4;
        uint64_t v8 = *result;
      }
      if (v8)
      {
        unsigned int v9 = *(_DWORD *)(v8 - 4);
        unsigned int v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
        {
          return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(result);
        }
      }
    }
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(uint64_t **result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result = a2;
  result[1] = a3;
  result[2] = a4;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = (uint64_t *)(v4 + 8 * v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v4 + 8 * v5);
LABEL_4:
  while (a3 != v6 && !*(void *)(*a3 + 8))
  {
    while (1)
    {
      result[1] = ++a3;
      if (a3 == a4) {
        break;
      }
      if ((unint64_t)(*a3 + 1) > 1) {
        goto LABEL_4;
      }
    }
    a3 = a4;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (void *)(*(void *)a1 + 40 * v4);
  uint64_t v7 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  void *v6 = v7;
  uint64_t result = WebCore::Region::Region();
  uint64_t v9 = v5 + 40 * v4;
  __int16 v10 = *(_WORD *)(v3 + 32);
  *(unsigned char *)(v9 + 34) = *(unsigned char *)(v3 + 34);
  *(_WORD *)(v9 + 32) = v10;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_198ADF1FC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = *(WTF **)a1;
      unsigned int v4 = *(_DWORD *)(a1 + 12);
      int v5 = 40 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(void *)a1 = v6;
      if (v4)
      {
        uint64_t v8 = v6;
        unint64_t v9 = (char *)v3 + 40 * v4;
        unint64_t v10 = (char *)v3 + 8;
        do
        {
          uint64_t v12 = v10 - 8;
          uint64_t v11 = *((void *)v10 - 1);
          *((void *)v10 - nw_tcp_options_set_no_delay(options, 1) = 0;
          *(void *)uint64_t v8 = v11;
          WebCore::Region::Region();
          __int16 v13 = *((_WORD *)v10 + 12);
          *(unsigned char *)(v8 + 34) = v10[26];
          *(_WORD *)(v8 + 32) = v13;
          WebCore::Region::~Region((WebCore::Region *)v10);
          uint64_t v14 = *((void *)v10 - 1);
          *((void *)v10 - nw_tcp_options_set_no_delay(options, 1) = 0;
          if (v14) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 16), v7);
          }
          v8 += 40;
          v10 += 40;
        }
        while (v12 + 40 != v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

void sub_198ADF3F4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerWithRemoteRenderingBackingStore&>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  unint64_t v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10) {
    unint64_t v7 = v6 + 1;
  }
  else {
    unint64_t v7 = 16;
  }
  if (v7 <= v5 + 1) {
    unint64_t v8 = v5 + 1;
  }
  else {
    unint64_t v8 = v7;
  }
  unint64_t v9 = *(WTF **)a1;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198ADF550);
    }
    uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(void *)a1 = v11;
    if (v5)
    {
      uint64_t v12 = 8 * v5;
      __int16 v13 = (unsigned int **)v9;
      do
      {
        uint64_t v14 = *v13;
        unsigned __int16 *v13 = 0;
        *(void *)uint64_t v11 = v14;
        int v15 = *v13;
        unsigned __int16 *v13 = 0;
        if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v10);
        }
        uint64_t v11 = (WTF *)((char *)v11 + 8);
        ++v13;
        v12 -= 8;
      }
      while (v12);
      uint64_t v11 = *(WTF **)a1;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, v10);
      unint64_t v9 = *(WTF **)a1;
    }
    else
    {
      unint64_t v9 = v11;
    }
  }
  uint64_t v16 = *(unsigned int *)(a1 + 12);
  uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v18 = *(atomic_uint **)(a2 + 8);
  if (v18) {
    atomic_fetch_add(v18, 1u);
  }
  *((void *)v9 + v16) = v18;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (unsigned int **)result;
    do
    {
      uint64_t result = *v3;
      *unint64_t v3 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerBackingStore&>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[2] + ((unint64_t)a1[2] >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = a1[3];
  uint64_t v9 = *(void *)a1;
  uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v11 = *(atomic_uint **)(a2 + 8);
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  *(void *)(v9 + 8 * v8) = v11;
  ++a1[3];
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198ADF6F4);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(unsigned int **)result;
    unint64_t v5 = (unsigned int *)(*(void *)result + 8 * result[3]);
    unint64_t v6 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * a2));
    void v3[2] = v2;
    *(void *)unint64_t v3 = v6;
    uint64_t result = WTF::VectorMover<false,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(unsigned int **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        void v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

unsigned int *WTF::VectorMover<false,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::move(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    do
    {
      unint64_t v6 = *(unsigned int **)v5;
      *(void *)unint64_t v5 = 0;
      *a3 = v6;
      uint64_t result = *(unsigned int **)v5;
      *(void *)unint64_t v5 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++a3;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(uint64_t *a1, unsigned int **a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((unsigned int **)v2 == a2) {
    return 0;
  }
LABEL_3:
  if ((unsigned int **)v2 != a2) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(a1, a2);
  }
  return 1;
}

unint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(result + 8);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStore &)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BFF00;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStore &)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BFF00;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStore &)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      unint64_t v3 = *(WebKit::RemoteLayerBackingStoreCollection **)(v2 + 8);
      if (v3) {
        return WebKit::RemoteLayerBackingStoreCollection::scheduleVolatilityTimer(v3);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BFF28;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BFF28;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(void)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BFF50;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&,BOOL)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BFF78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WebKit::RemotePresentationContext::RemotePresentationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BFFA0;
  ++*(_DWORD *)(a4 + 8);
  *(void *)(a1 + 16) = a4;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  __int16 v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 24) = v13;
  uint64_t v14 = *a6;
  *a6 = 0;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = a7;
  int v15 = *(atomic_uchar **)(a2 + 16);
  if (v15) {
    int v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
  }
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v16 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v16, 1u);
  *(void *)(a1 + 64) = v16;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x6Cu, *(void *)(a1 + 40));
  return a1;
}

void WebKit::RemotePresentationContext::~RemotePresentationContext(WebKit::RemotePresentationContext *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  unint64_t v7 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemotePresentationContext::~RemotePresentationContext(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::RemotePresentationContext::configure(uint64_t a1, uint64_t a2)
{
  double result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(void *)(*(void *)(a1 + 24) + 8), a2, (uint64_t)v6);
  if (v9)
  {
    double result = (unsigned int *)(*(uint64_t (**)(void, WTF **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v6);
    if (v9)
    {
      uint64_t v5 = v7;
      if (v7)
      {
        unint64_t v7 = 0;
        int v8 = 0;
        WTF::fastFree(v5, v4);
      }
      double result = (unsigned int *)v6[0];
      v6[0] = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v4);
        }
      }
    }
  }
  return result;
}

_DWORD *WebKit::RemotePresentationContext::getCurrentTexture(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 16) + 40))(&v16);
  uint64_t v4 = *(atomic_uchar **)(a1 + 48);
  if (!v4)
  {
    double result = v16;
    if (!v16) {
      return result;
    }
    goto LABEL_3;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *(void *)(a1 + 56), &v15);
  uint64_t v6 = v15;
  double result = v16;
  if (v16)
  {
    if (!v15)
    {
LABEL_3:
      uint64_t v16 = 0;
LABEL_4:
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      --result[2];
      return result;
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
    ++*(_DWORD *)(v7 + 8);
    int v8 = *(atomic_uint **)(*(void *)(a1 + 64) + 8);
    atomic_fetch_add(v8 + 2, 1u);
    uint64_t v9 = (uint64_t)v16;
    uint64_t v10 = *(void *)(a1 + 32);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    uint64_t v14 = (unsigned int *)v10;
    unint64_t v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x48);
    WebKit::RemoteTexture::RemoteTexture((uint64_t)v11, v6, (uint64_t)v8, v9, v7, (uint64_t *)&v14, a2);
    uint64_t v12 = v14;
    uint64_t v14 = 0;
    if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
    }
    if (atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v8 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v7, a2, (uint64_t)v11);
    if (atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
    }
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v7 + 8), v13);
    uint64_t v6 = v15;
  }
  uint64_t v15 = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v6 + 16));
  }
  double result = v16;
  uint64_t v16 = 0;
  if (result) {
    goto LABEL_4;
  }
  return result;
}

uint64_t WebKit::RemoteQuerySet::RemoteQuerySet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BFFC8;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  unint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  __int16 v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x6Du, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteQuerySet::~RemoteQuerySet(WebKit::RemoteQuerySet *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteQuerySet::~RemoteQuerySet(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteQuerySet::stopListeningForIPC(WebKit::RemoteQuerySet *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  double result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x6Du, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteQuerySet::destroy(WebKit::RemoteQuerySet *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteQuerySet::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 24))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteQueue::RemoteQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BFFF0;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  unint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  __int16 v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x6Eu, a6);
  return a1;
}

void WebKit::RemoteQueue::~RemoteQueue(WebKit::RemoteQueue *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteQueue::~RemoteQueue(this, a2);

  WTF::fastFree(v2, v3);
}

WTF *WebKit::RemoteQueue::submit(uint64_t a1, uint64_t a2)
{
  int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (!v3) {
    goto LABEL_23;
  }
  if (v3 >> 29)
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x198AE0958);
  }
  LODWORD(v25) = *(_DWORD *)(a2 + 12);
  int v24 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
      uint64_t v10 = (_DWORD *)(v9 + 8);
      ++*(_DWORD *)(v9 + 8);
      WebKit::WebGPU::ObjectHeap::convertCommandBufferFromBacking(v9, v8, (atomic_uint **)&v23);
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v10, v11);
      __int16 v13 = (unsigned int *)v23;
      if (!v23) {
        goto LABEL_28;
      }
      uint64_t v14 = *((void *)v23 + 1);
      if (!v14) {
        break;
      }
      uint64_t v15 = HIDWORD(v25);
      if (HIDWORD(v25) == v25)
      {
        unint64_t v16 = HIDWORD(v25) + ((unint64_t)HIDWORD(v25) >> 2);
        if (v16 >= 0x10) {
          unint64_t v17 = v16 + 1;
        }
        else {
          unint64_t v17 = 16;
        }
        if (v17 <= (unint64_t)HIDWORD(v25) + 1) {
          unint64_t v18 = HIDWORD(v25) + 1;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18 >> 29)
        {
          __break(0xC471u);
          goto LABEL_33;
        }
        BOOL v19 = v24;
        unint64_t v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18));
        LODWORD(v25) = v18;
        int v24 = v20;
        memcpy(v20, v19, 8 * v15);
        if (v19)
        {
          if (v20 == v19)
          {
            unint64_t v20 = 0;
            int v24 = 0;
            LODWORD(v25) = 0;
          }
          WTF::fastFree(v19, v12);
        }
      }
      else
      {
        unint64_t v20 = v24;
      }
      *((void *)v20 + v15) = v14;
      HIDWORD(v25) = v15 + 1;
      uint64_t v23 = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_23;
      }
    }
    uint64_t v23 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  else
  {
LABEL_23:
    int v21 = *(_DWORD **)(a1 + 16);
    ++v21[2];
    (*(void (**)(_DWORD *, WTF **))(*(void *)v21 + 16))(v21, &v24);
    if (v21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
    }
    else {
      --v21[2];
    }
  }
LABEL_28:
  uint64_t result = v24;
  if (v24)
  {
    int v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

uint64_t WebKit::RemoteQueue::onSubmittedWorkDone(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  ++v2[2];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C0130;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(_DWORD *, void **))(*(void *)v2 + 24))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v2[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  --v2[2];
  return result;
}

unsigned int *WebKit::RemoteQueue::writeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(unsigned char *)(a4 + 16)) {
    WebCore::SharedMemory::map();
  }
  else {
    unint64_t v17 = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v9 = (_DWORD *)(v8 + 8);
  ++*(_DWORD *)(v8 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v8, a2, &v16);
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v9, v10);
  unint64_t v11 = (unsigned int *)v16;
  if (v16 && *((void *)v16 + 1))
  {
    uint64_t v12 = *(_DWORD **)(a1 + 16);
    ++v12[2];
    (*(void (**)(_DWORD *))(*(void *)v12 + 48))(v12);
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    }
    else {
      --v12[2];
    }
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 1);
  }
  else
  {
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  unint64_t v16 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v14);
  }
  uint64_t result = v17;
  unint64_t v17 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

unsigned int *WebKit::RemoteQueue::writeTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  if (*(unsigned char *)(a3 + 16)) {
    WebCore::SharedMemory::map();
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 8);
  ++*(_DWORD *)(v11 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v11, a2, (uint64_t)v29);
  uint64_t v12 = *a4;
  int v25 = *((_DWORD *)a4 + 2);
  char v26 = *((unsigned char *)a4 + 12);
  unint64_t v13 = ((unint64_t)*((unsigned int *)a4 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)a4 + 20) << 56);
  uint64_t v24 = v12;
  unint64_t v27 = v13;
  char v28 = 1;
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a5, (uint64_t)v21);
  if (v29[56] && v23)
  {
    uint64_t v14 = *(_DWORD **)(a1 + 16);
    ++v14[2];
    if (v30)
    {
      uint64_t v16 = *(void *)(v30 + 8);
      uint64_t v15 = *(void *)(v30 + 16);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    (*(void (**)(_DWORD *, unsigned char *, uint64_t, uint64_t, uint64_t *, unsigned char *))(*(void *)v14 + 56))(v14, v29, v15, v16, &v24, v21);
    if (v14[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
    }
    else {
      --v14[2];
    }
    uint64_t v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 1);
  }
  else
  {
    uint64_t v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  if (v23 && v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9C00D0[v22])(&v31, v21);
  }
  std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v18);
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v11 + 8), v19);
  uint64_t result = (unsigned int *)v30;
  uint64_t v30 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

_DWORD *WebKit::RemoteQueue::copyExternalImageToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  ++*(_DWORD *)(v7 + 8);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, v22);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v7, a3, v17);
  uint64_t result = (_DWORD *)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a4, (uint64_t)v14);
  int v10 = v16;
  if (v21) {
    BOOL v11 = v16 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = *(_DWORD **)(a1 + 16);
    ++v12[2];
    if (!v25)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(_DWORD *, unsigned char *, WTF **, unsigned char *))(*(void *)v12 + 64))(v12, v22, v17, v14);
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    }
    else {
      --v12[2];
    }
    int v10 = v16;
  }
  if (v10 && v15 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9C00D0[v15])(&v26, v14);
  }
  if (v21)
  {
    if (v20)
    {
      if (v19 != -1) {
        ((void (*)(unsigned char *, uint64_t *))off_1EE9C00E0[v19])(v14, &v18);
      }
      int v19 = -1;
    }
    unint64_t v13 = (unsigned int *)v17[0];
    v17[0] = 0;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  if (v25 && v24 && v23 != -1) {
    ((void (*)(WTF **, unsigned char *))off_1EE9C00F0[v23])(v17, v22);
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v7 + 8), v9);
}

uint64_t WebKit::RemoteQueue::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 72))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

void WebKit::RemoteRenderBundle::~RemoteRenderBundle(WebKit::RemoteRenderBundle *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRenderBundle::~RemoteRenderBundle(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteRenderBundle::stopListeningForIPC(WebKit::RemoteRenderBundle *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x71u, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundle::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 16))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::RemoteRenderBundleEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C0040;
  ++*(_DWORD *)(a4 + 8);
  *(void *)(a1 + 16) = a4;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  unint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 24) = v13;
  uint64_t v14 = *a6;
  *a6 = 0;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = a7;
  int v15 = *(atomic_uchar **)(a2 + 16);
  if (v15) {
    int v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
  }
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  unsigned __int8 v16 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v16, 1u);
  *(void *)(a1 + 64) = v16;
  uint64_t v17 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v17 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v17, a1, 0x72u, *(void *)(a1 + 40));
  if (v17 && atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v17 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v17 + 8))(v17);
  }
  return a1;
}

void WebKit::RemoteRenderBundleEncoder::~RemoteRenderBundleEncoder(WebKit::RemoteRenderBundleEncoder *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRenderBundleEncoder::~RemoteRenderBundleEncoder(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteRenderBundleEncoder::stopListeningForIPC(WebKit::RemoteRenderBundleEncoder *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x72u, *((void *)this + 5));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::setPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v4 = (_DWORD *)(v3 + 8);
  ++*(_DWORD *)(v3 + 8);
  WebKit::WebGPU::ObjectHeap::convertRenderPipelineFromBacking(v3, a2, (atomic_uint **)&v10);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v4, v5);
  uint64_t v7 = (unsigned int *)v10;
  if (v10)
  {
    uint64_t v8 = (void *)*((void *)v10 + 1);
    if (v8)
    {
      uint64_t v9 = *(_DWORD **)(a1 + 16);
      ++v9[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 16))(v9);
      if (v9[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    int v10 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      return (_DWORD *)WTF::fastFree((WTF *)v7, v8);
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::setIndexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v14 = (_DWORD *)(v13 + 8);
  ++*(_DWORD *)(v13 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v13, a2, (atomic_uint **)&v21);
  unsigned __int8 v16 = (unsigned int *)v21;
  if (!v21) {
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  }
  uint64_t v17 = (_DWORD *)*((void *)v21 + 1);
  if (v17) {
    ++v17[2];
  }
  char v21 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  if (v17)
  {
    int v19 = *(_DWORD **)(a1 + 16);
    ++v19[2];
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v17, a3, a4, a5, a6, a7);
    if (v19[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
    if (v17[2] == 1)
    {
      char v20 = *(uint64_t (**)(_DWORD *))(*(void *)v17 + 8);
      return (_DWORD *)v20(v17);
    }
    else
    {
      --v17[2];
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::setVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v14 = (_DWORD *)(v13 + 8);
  ++*(_DWORD *)(v13 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v13, a3, (atomic_uint **)&v21);
  unsigned __int8 v16 = (unsigned int *)v21;
  if (!v21) {
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  }
  uint64_t v17 = (_DWORD *)*((void *)v21 + 1);
  if (v17) {
    ++v17[2];
  }
  char v21 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  if (v17)
  {
    int v19 = *(_DWORD **)(a1 + 16);
    ++v19[2];
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a2, v17, a4, a5, a6, a7);
    if (v19[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
    if (v17[2] == 1)
    {
      char v20 = *(uint64_t (**)(_DWORD *))(*(void *)v17 + 8);
      return (_DWORD *)v20(v17);
    }
    else
    {
      --v17[2];
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::unsetVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(_DWORD **)(a1 + 16);
  ++v6[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, 0, a3, a4, a5, a6);
  if (v6[2] == 1)
  {
    uint64_t v8 = *(uint64_t (**)(_DWORD *))(*(void *)v6 + 8);
    return v8(v6);
  }
  else
  {
    --v6[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::draw(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 40))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::drawIndexed(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 48))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::drawIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v5, a2, (atomic_uint **)&v13);
  uint64_t v8 = (unsigned int *)v13;
  if (!v13) {
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  }
  uint64_t v9 = (_DWORD *)*((void *)v13 + 1);
  if (v9) {
    ++v9[2];
  }
  uint64_t v13 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  if (v9)
  {
    BOOL v11 = *(_DWORD **)(a1 + 16);
    ++v11[2];
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)v11 + 56))(v11, v9, a3);
    if (v11[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
    if (v9[2] == 1)
    {
      uint64_t v12 = *(uint64_t (**)(_DWORD *))(*(void *)v9 + 8);
      return (_DWORD *)v12(v9);
    }
    else
    {
      --v9[2];
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::drawIndexedIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v5, a2, (atomic_uint **)&v13);
  uint64_t v8 = (unsigned int *)v13;
  if (!v13) {
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  }
  uint64_t v9 = (_DWORD *)*((void *)v13 + 1);
  if (v9) {
    ++v9[2];
  }
  uint64_t v13 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  if (v9)
  {
    BOOL v11 = *(_DWORD **)(a1 + 16);
    ++v11[2];
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _DWORD *, uint64_t))(*(void *)v11 + 64))(v11, v9, a3);
    if (v11[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
    if (v9[2] == 1)
    {
      uint64_t v12 = *(uint64_t (**)(_DWORD *))(*(void *)v9 + 8);
      return (_DWORD *)v12(v9);
    }
    else
    {
      --v9[2];
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::setBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v8 = (_DWORD *)(v7 + 8);
  ++*(_DWORD *)(v7 + 8);
  WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking(v7, a3, (atomic_uint **)&v15);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v8, v9);
  uint64_t v12 = (unsigned int *)v15;
  if (v15)
  {
    uint64_t v13 = *((void *)v15 + 1);
    if (v13)
    {
      uint64_t v14 = *(_DWORD **)(a1 + 16);
      ++v14[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 72))(v14, a2, v13, a4);
      if (v14[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    int v15 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      return (_DWORD *)WTF::fastFree((WTF *)v12, v11);
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::pushDebugGroup(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 88))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::popDebugGroup(WebKit::RemoteRenderBundleEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 96))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::insertDebugMarker(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 104))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteRenderBundleEncoder::finish(void *a1, WTF::StringImpl **a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1[3] + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  uint64_t v7 = *a2;
  if (*a2) {
    *(_DWORD *)v7 += 2;
  }
  long long v38 = v7;
  char v39 = 1;
  uint64_t v8 = (_DWORD *)a1[2];
  ++v8[2];
  (*(void (**)(_DWORD **__return_ptr, _DWORD *, WTF::StringImpl **))(*(void *)v8 + 112))(&v37, v8, &v38);
  if (v8[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  else {
    --v8[2];
  }
  uint64_t v9 = v37;
  if (v37)
  {
    uint64_t v10 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    uint64_t v11 = *(void *)(a1[8] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    uint64_t v12 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v12 + 8) = 1;
    *(void *)uint64_t v12 = &unk_1EE9C0018;
    ++v9[2];
    *(void *)(v12 + 16) = v9;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
    uint64_t v13 = *(atomic_uint **)(v5 + 16);
    atomic_fetch_add(v13, 1u);
    *(void *)(v12 + 24) = v13;
    *(void *)(v12 + 32) = v10;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v11 + 16), v11);
    uint64_t v14 = *(atomic_uint **)(v11 + 16);
    atomic_fetch_add(v14, 1u);
    *(void *)(v12 + 40) = v14;
    *(void *)(v12 + 48) = a3;
    int v15 = *(atomic_uint **)(v12 + 32);
    atomic_fetch_add(v15 + 2, 1u);
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v15, v12, 0x71u, *(void *)(v12 + 48));
    if (v15 && atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v15 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v11 + 8));
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    WebKit::WebGPU::ObjectHeap::addObject(v5, a3, v12);
    if (atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v12 + 8));
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    char v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::RemoteRenderBundleEncoder::finish(const WebGPU::RenderBundleDescriptor &, WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteRenderBundleEncoder.cpp 182: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    char v21 = (atomic_uchar *)a1[6];
    if (v21)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v21, a1[7], buf);
      if (*(void *)buf)
      {
        char v22 = 0;
        uint64_t v23 = *(void *)(*(void *)buf + 56);
        atomic_uchar *volatile v24 = *(atomic_uchar *volatile *)v23;
        int v25 = 1;
        atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v23, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
        if (v22) {
          MEMORY[0x19972E8D0](v24);
        }
        ++*((void *)v24 + 1);
        atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
        if (v25 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v24);
        }
        uint64_t v26 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v26) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v26 + 16));
        }
        char v27 = 0;
        *(unsigned char *)(v23 + 98) = 1;
        atomic_uchar *volatile v28 = *(atomic_uchar *volatile *)v23;
        atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v23, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
        if (v27) {
          MEMORY[0x19972E8D0](v28);
        }
        uint64_t v29 = *((void *)v28 + 1);
        uint64_t v30 = v29 - 1;
        *((void *)v28 + nw_tcp_options_set_no_delay(options, 1) = v29 - 1;
        if (v29 == 1)
        {
          uint64_t v36 = *((void *)v28 + 2);
          uint64_t v32 = *((void *)v28 + 3);
          *((void *)v28 + 3) = 0;
          BOOL v31 = v36 == 0;
        }
        else
        {
          BOOL v31 = 0;
          uint64_t v32 = 0;
        }
        int v33 = 1;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
        if (v33 == 1)
        {
          if (v30) {
            goto LABEL_14;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v28);
          if (v30) {
            goto LABEL_14;
          }
        }
        uint64_t v34 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v34 = &unk_1EE9B37E8;
        *(void *)(v34 + 8) = v28;
        *(void *)(v34 + 16) = v32;
        *(unsigned char *)(v34 + 24) = v31;
        *(void *)long long buf = v34;
        WTF::ensureOnMainRunLoop();
        uint64_t v35 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = v37;
  long long v37 = 0;
  if (v17)
  {
    if (v17[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
    }
    else {
      --v17[2];
    }
  }
  if (v39)
  {
    uint64_t v18 = v38;
    long long v38 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v16);
}

uint64_t WebKit::RemoteRenderBundleEncoder::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 120))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::RemoteRenderPassEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C0068;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  uint64_t v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x73u, a6);
  return a1;
}

void WebKit::RemoteRenderPassEncoder::~RemoteRenderPassEncoder(WebKit::RemoteRenderPassEncoder *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRenderPassEncoder::~RemoteRenderPassEncoder(this, a2);

  WTF::fastFree(v2, v3);
}

_DWORD *WebKit::RemoteRenderPassEncoder::setPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v4 = (_DWORD *)(v3 + 8);
  ++*(_DWORD *)(v3 + 8);
  WebKit::WebGPU::ObjectHeap::convertRenderPipelineFromBacking(v3, a2, (atomic_uint **)&v10);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v4, v5);
  uint64_t v7 = (unsigned int *)v10;
  if (v10)
  {
    uint64_t v8 = (void *)*((void *)v10 + 1);
    if (v8)
    {
      uint64_t v9 = *(_DWORD **)(a1 + 16);
      ++v9[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 16))(v9);
      if (v9[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    uint64_t v10 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      return (_DWORD *)WTF::fastFree((WTF *)v7, v8);
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPassEncoder::setIndexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v14 = (_DWORD *)(v13 + 8);
  ++*(_DWORD *)(v13 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v13, a2, (atomic_uint **)&v20);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  uint64_t v17 = (unsigned int *)v20;
  if (v20)
  {
    uint64_t v18 = (void *)*((void *)v20 + 1);
    if (v18)
    {
      int v19 = *(_DWORD **)(a1 + 16);
      ++v19[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v18, a3, a4, a5, a6, a7);
      if (v19[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[2];
      }
    }
    char v20 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      return (_DWORD *)WTF::fastFree((WTF *)v17, v18);
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPassEncoder::setVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v14 = (_DWORD *)(v13 + 8);
  ++*(_DWORD *)(v13 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v13, a3, (atomic_uint **)&v21);
  unsigned __int8 v16 = (unsigned int *)v21;
  if (!v21) {
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  }
  uint64_t v17 = (_DWORD *)*((void *)v21 + 1);
  if (v17) {
    ++v17[2];
  }
  char v21 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v14, v15);
  if (v17)
  {
    int v19 = *(_DWORD **)(a1 + 16);
    ++v19[2];
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a2, v17, a4, a5, a6, a7);
    if (v19[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
    if (v17[2] == 1)
    {
      char v20 = *(uint64_t (**)(_DWORD *))(*(void *)v17 + 8);
      return (_DWORD *)v20(v17);
    }
    else
    {
      --v17[2];
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::unsetVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(_DWORD **)(a1 + 16);
  ++v6[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, 0, a3, a4, a5, a6);
  if (v6[2] == 1)
  {
    uint64_t v8 = *(uint64_t (**)(_DWORD *))(*(void *)v6 + 8);
    return v8(v6);
  }
  else
  {
    --v6[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::draw(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 40))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::drawIndexed(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 48))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPassEncoder::drawIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v5, a2, (atomic_uint **)&v12);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  uint64_t v9 = (unsigned int *)v12;
  if (v12)
  {
    uint64_t v10 = (void *)*((void *)v12 + 1);
    if (v10)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 16);
      ++v11[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)v11 + 56))(v11, v10, a3);
      if (v11[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      }
      else {
        --v11[2];
      }
    }
    uint64_t v12 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      return (_DWORD *)WTF::fastFree((WTF *)v9, v10);
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPassEncoder::drawIndexedIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(v5, a2, (atomic_uint **)&v12);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
  uint64_t v9 = (unsigned int *)v12;
  if (v12)
  {
    uint64_t v10 = (void *)*((void *)v12 + 1);
    if (v10)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 16);
      ++v11[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)v11 + 64))(v11, v10, a3);
      if (v11[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      }
      else {
        --v11[2];
      }
    }
    uint64_t v12 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      return (_DWORD *)WTF::fastFree((WTF *)v9, v10);
    }
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPassEncoder::setBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v8 = (_DWORD *)(v7 + 8);
  ++*(_DWORD *)(v7 + 8);
  WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking(v7, a3, (atomic_uint **)&v15);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v8, v9);
  uint64_t v12 = (unsigned int *)v15;
  if (v15)
  {
    uint64_t v13 = *((void *)v15 + 1);
    if (v13)
    {
      uint64_t v14 = *(_DWORD **)(a1 + 16);
      ++v14[2];
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 72))(v14, a2, v13, a4);
      if (v14[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    int v15 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      return (_DWORD *)WTF::fastFree((WTF *)v12, v11);
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::pushDebugGroup(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 88))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::popDebugGroup(WebKit::RemoteRenderPassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 96))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::insertDebugMarker(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 104))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::setViewport(WebKit::RemoteRenderPassEncoder *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = (_DWORD *)*((void *)this + 2);
  ++v7[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *, float, float, float, float, float, float))(*(void *)v7 + 112))(v7, a2, a3, a4, a5, a6, a7);
  if (v7[2] == 1)
  {
    uint64_t v9 = *(uint64_t (**)(_DWORD *))(*(void *)v7 + 8);
    return v9(v7);
  }
  else
  {
    --v7[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::setScissorRect(WebKit::RemoteRenderPassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 120))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPassEncoder::setBlendConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8) + 8);
  ++*v3;
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, (uint64_t)v10);
  uint64_t result = WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v3, v4);
  if (v12)
  {
    uint64_t v6 = *(_DWORD **)(a1 + 16);
    ++v6[2];
    v8[0] = 0;
    int v9 = -1;
    int v7 = v11;
    if (v11 != -1)
    {
      ((void (*)(char *, unsigned char *, unsigned char *))off_1EE9C0110[v11])(&v13, v8, v10);
      int v9 = v7;
    }
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, unsigned char *))(*(void *)v6 + 128))(v6, v8);
    if (v9 != -1) {
      uint64_t result = (_DWORD *)((uint64_t (*)(char *, unsigned char *))off_1EE9C0100[v9])(&v13, v8);
    }
    int v9 = -1;
    if (v6[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
    if (v12)
    {
      if (v11 != -1) {
        return (_DWORD *)((uint64_t (*)(char *, unsigned char *))off_1EE9C0100[v11])(&v13, v10);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::setStencilReference(WebKit::RemoteRenderPassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 136))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::beginOcclusionQuery(WebKit::RemoteRenderPassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 144))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::endOcclusionQuery(WebKit::RemoteRenderPassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 152))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

WTF *WebKit::RemoteRenderPassEncoder::executeBundles(uint64_t a1, uint64_t a2)
{
  atomic_uchar *volatile v24 = 0;
  uint64_t v25 = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (!v3) {
    goto LABEL_23;
  }
  if (v3 >> 29)
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x198AE3D7CLL);
  }
  LODWORD(v25) = *(_DWORD *)(a2 + 12);
  atomic_uchar *volatile v24 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
      uint64_t v10 = (_DWORD *)(v9 + 8);
      ++*(_DWORD *)(v9 + 8);
      WebKit::WebGPU::ObjectHeap::convertRenderBundleFromBacking(v9, v8, (atomic_uint **)&v23);
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v10, v11);
      char v13 = (unsigned int *)v23;
      if (!v23) {
        goto LABEL_28;
      }
      uint64_t v14 = *((void *)v23 + 1);
      if (!v14) {
        break;
      }
      uint64_t v15 = HIDWORD(v25);
      if (HIDWORD(v25) == v25)
      {
        unint64_t v16 = HIDWORD(v25) + ((unint64_t)HIDWORD(v25) >> 2);
        if (v16 >= 0x10) {
          unint64_t v17 = v16 + 1;
        }
        else {
          unint64_t v17 = 16;
        }
        if (v17 <= (unint64_t)HIDWORD(v25) + 1) {
          unint64_t v18 = HIDWORD(v25) + 1;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18 >> 29)
        {
          __break(0xC471u);
          goto LABEL_33;
        }
        int v19 = v24;
        char v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18));
        LODWORD(v25) = v18;
        atomic_uchar *volatile v24 = v20;
        memcpy(v20, v19, 8 * v15);
        if (v19)
        {
          if (v20 == v19)
          {
            char v20 = 0;
            atomic_uchar *volatile v24 = 0;
            LODWORD(v25) = 0;
          }
          WTF::fastFree(v19, v12);
        }
      }
      else
      {
        char v20 = v24;
      }
      *((void *)v20 + v15) = v14;
      HIDWORD(v25) = v15 + 1;
      uint64_t v23 = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_23;
      }
    }
    uint64_t v23 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  else
  {
LABEL_23:
    char v21 = *(_DWORD **)(a1 + 16);
    ++v21[2];
    (*(void (**)(_DWORD *, WTF **))(*(void *)v21 + 160))(v21, &v24);
    if (v21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
    }
    else {
      --v21[2];
    }
  }
LABEL_28:
  uint64_t result = v24;
  if (v24)
  {
    atomic_uchar *volatile v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::end(WebKit::RemoteRenderPassEncoder *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 168))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 176))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteRenderPipeline::RemoteRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C0090;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  int v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  char v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x74u, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteRenderPipeline::~RemoteRenderPipeline(WebKit::RemoteRenderPipeline *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRenderPipeline::~RemoteRenderPipeline(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteRenderPipeline::stopListeningForIPC(WebKit::RemoteRenderPipeline *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x74u, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

_DWORD *WebKit::RemoteRenderPipeline::getBindGroupLayout(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (_DWORD *)a1[2];
  ++v5[2];
  (*(void (**)(_DWORD **__return_ptr, _DWORD *))(*(void *)v5 + 16))(&v15, v5);
  if (v5[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  }
  else {
    --v5[2];
  }
  uint64_t v6 = *(void *)(a1[3] + 8);
  ++*(_DWORD *)(v6 + 8);
  uint64_t v7 = (uint64_t)v15;
  uint64_t v8 = a1[4];
  atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  uint64_t v14 = (unsigned int *)v8;
  uint64_t v9 = *(atomic_uint **)(a1[5] + 8);
  atomic_fetch_add(v9 + 2, 1u);
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout((uint64_t)v10, v7, v6, (uint64_t *)&v14, (uint64_t)v9, a3);
  if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
  }
  int v11 = v14;
  uint64_t v14 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
  }
  WebKit::WebGPU::ObjectHeap::addObject(v6, a3, (uint64_t)v10);
  if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v6 + 8), v12);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderPipeline::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 24))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteSampler::RemoteSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C00B8;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  int v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  char v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x79u, *(void *)(a1 + 48));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteSampler::~RemoteSampler(WebKit::RemoteSampler *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteSampler::~RemoteSampler(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteSampler::stopListeningForIPC(WebKit::RemoteSampler *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x79u, *((void *)this + 6));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

uint64_t WebKit::RemoteSampler::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 16))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    memcpy(v5, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteQueue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0130;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteQueue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0130;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteQueue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t *WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard(uint64_t *this, void *a2)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    char v3 = 0;
    uint64_t v4 = *(void *)(v2 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      this = (uint64_t *)MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = 1;
    uint64_t v7 = v5 - 1;
    *(void *)(v4 + 8) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v10 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v4 + 24);
      *(void *)(v4 + 24) = 0;
      BOOL v9 = v10 != 0;
    }
    else
    {
      uint64_t v8 = 0;
      BOOL v9 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 == 1)
    {
      if (v7) {
        return this;
      }
    }
    else
    {
      this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v7) {
        return this;
      }
    }
    if (v8) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (!v9)
    {
      return (uint64_t *)WTF::fastFree((WTF *)v4, a2);
    }
  }
  return this;
}

BOOL WebKit::RemoteLayerWithInProcessRenderingBackingStore::hasFrontBuffer(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  return *((unsigned char *)this + 176) || *((void *)this + 40) != 0;
}

WebCore::ImageBuffer *WebKit::RemoteLayerWithInProcessRenderingBackingStore::frontBufferMayBeVolatile(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  __n128 result = (WebCore::ImageBuffer *)*((void *)this + 40);
  if (result) {
    return (WebCore::ImageBuffer *)(WebCore::ImageBuffer::volatilityState(result) == 1);
  }
  return result;
}

uint64_t *WebKit::RemoteLayerWithInProcessRenderingBackingStore::clearBackingStore(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, void *a2)
{
  WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 40, a2);
  WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 42, v3);
  __n128 result = WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 44, v4);
  if (*((unsigned char *)this + 176))
  {
    uint64_t v6 = *((unsigned int *)this + 42);
    if (v6 != -1) {
      __n128 result = (uint64_t *)off_1EE9C0238[v6]((int)&v7, (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 104));
    }
    *((_DWORD *)this + 42) = -1;
    *((unsigned char *)this + 176) = 0;
  }
  return result;
}

void *WebKit::RemoteLayerWithInProcessRenderingBackingStore::frontBufferHandle@<X0>(void *this@<X0>, unsigned char *a2@<X8>)
{
  char v3 = (void *)this[40];
  if (!v3)
  {
    *a2 = 0;
    a2[72] = 0;
    return this;
  }
  char v4 = 0;
  uint64_t v5 = v3[1];
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  ++*(void *)(v5 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  this = (void *)(*(uint64_t (**)(void *))(*v3 + 128))(v3);
  uint64_t v8 = this;
  if (this && (this = (void *)(*(uint64_t (**)(void *))(*this + 16))(this), this))
  {
    this = (void *)(*(uint64_t (**)(void *, void))(*v8 + 32))(v8, 0);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
  char v9 = 0;
  uint64_t v10 = v3[1];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    this = (void *)MEMORY[0x19972E8D0](v10);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  int v12 = 1;
  uint64_t v13 = v11 - 1;
  *(void *)(v10 + 8) = v11 - 1;
  if (v11 == 1)
  {
    uint64_t v16 = *(void *)(v10 + 16);
    uint64_t v14 = *(void *)(v10 + 24);
    *(void *)(v10 + 24) = 0;
    BOOL v15 = v16 != 0;
  }
  else
  {
    uint64_t v14 = 0;
    BOOL v15 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 == 1)
  {
    if (v13) {
      return this;
    }
  }
  else
  {
    this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13) {
      return this;
    }
  }
  if (v14) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (!v15)
  {
    return (void *)WTF::fastFree((WTF *)v10, v7);
  }
  return this;
}

void sub_198AE4E30(_Unwind_Exception *exception_object, void *a2)
{
  char v4 = 0;
  uint64_t v5 = *(void *)(v2 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = 1;
  uint64_t v8 = v6 - 1;
  *(void *)(v5 + 8) = v6 - 1;
  if (v6 == 1)
  {
    uint64_t v11 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    *(void *)(v5 + 24) = 0;
    BOOL v10 = v11 != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v8) {
      goto LABEL_11;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8) {
      goto LABEL_11;
    }
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (!v10) {
    WTF::fastFree((WTF *)v5, a2);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::createContextAndPaintContents(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t result = *((void *)this + 40);
  if (!result) {
    return result;
  }
  char v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)v3 + 96))(v3, 1);
  uint64_t v4 = *((void *)this + 42);
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)(v4 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    ++*(void *)(v6 + 8);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
    }
  }
  v25.m_location = (FloatPoint)WebKit::RemoteLayerBackingStore::layerBounds(this);
  v25.m_std::string::size_type size = v8;
  WebCore::Region::Region((WebCore::Region *)v26, (const IntRect *)&v25);
  char v9 = WebCore::Region::contains((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 56), (const WebCore::Region *)v26);
  WebCore::Region::~Region((WebCore::Region *)v26);
  if (v9)
  {
    if (!v4) {
      goto LABEL_27;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_27;
    }
    if (*((unsigned char *)this + 96))
    {
      WebCore::Region::Region((WebCore::Region *)v26, (const IntRect *)this + 5);
      WebCore::Region::subtract();
      FloatRect v25 = v26[0];
      if (SLODWORD(v26[0].m_size.m_width) >= 1 && SLODWORD(v26[0].m_size.m_height) >= 1)
      {
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v24, (const WebCore::IntRect *)&v25);
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v23, (const WebCore::IntRect *)&v25);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)v3 + 384))(v3, v4, v24, v23, 4385);
      }
      WebCore::Region::~Region((WebCore::Region *)v26);
    }
    else
    {
      v26[0].m_location = 0;
      WebCore::GraphicsContext::drawImageBuffer();
    }
  }
  char v11 = 0;
  uint64_t v12 = *(void *)(v4 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0](v12);
  }
  uint64_t v13 = *(void *)(v12 + 8);
  int v14 = 1;
  uint64_t v15 = v13 - 1;
  *(void *)(v12 + 8) = v13 - 1;
  if (v13 == 1)
  {
    uint64_t v22 = *(void *)(v12 + 16);
    uint64_t v16 = *(void *)(v12 + 24);
    *(void *)(v12 + 24) = 0;
    BOOL v17 = v22 != 0;
  }
  else
  {
    uint64_t v16 = 0;
    BOOL v17 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 == 1)
  {
    if (!v15)
    {
LABEL_23:
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      if (!v17) {
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (!v15) {
      goto LABEL_23;
    }
  }
LABEL_27:
  uint64_t v18 = *((unsigned int *)this + 57);
  if (v18 == 1)
  {
    (*(void (**)(WebCore::GraphicsContext *, void))(*(void *)v3 + 448))(v3, *((void *)this + 27));
  }
  else
  {
    int v27 = 0;
    if (v18)
    {
      int v19 = (FloatRect *)*((void *)this + 27);
      uint64_t v20 = 16 * v18;
      do
      {
        FloatRect v25 = *v19;
        WebCore::Path::addRect((WebCore::Path *)v26, &v25);
        ++v19;
        v20 -= 16;
      }
      while (v20);
    }
    (*(void (**)(WebCore::GraphicsContext *, FloatRect *, uint64_t))(*(void *)v3 + 488))(v3, v26, 1);
    if (v27 != -1) {
      ((void (*)(FloatRect *, FloatSize *))off_1EE9C0248[v27])(&v25, &v26[0].m_size);
    }
  }
  if (!*((unsigned char *)this + 53)
    && ((*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 48) + 232))(*(void *)(*((void *)this + 2) + 48)) & 1) == 0
    && !*((unsigned char *)this + 328))
  {
    v25.m_location = (FloatPoint)WebKit::RemoteLayerBackingStore::layerBounds(this);
    v25.m_std::string::size_type size = v21;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v26, (const WebCore::IntRect *)&v25);
    (*(void (**)(WebCore::GraphicsContext *, FloatRect *))(*(void *)v3 + 280))(v3, v26);
  }
  WebKit::RemoteLayerBackingStore::drawInContext(this, v3);
  *((unsigned char *)this + 328) = 0;
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)v3 + 104))(v3, 1);
}

void sub_198AE533C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

void *WebKit::RemoteLayerWithInProcessRenderingBackingStore::createFlusher@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    (*(void (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 320) + 112))(&v7);
    uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
    uint64_t v6 = v7;
    void *result = &unk_1EE9C0270;
    result[1] = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

void sub_198AE5558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, WebCore::ImageBuffer **a2, int a3)
{
  if (!*a2) {
    return 1;
  }
  if (WebCore::ImageBuffer::volatilityState(*a2) == 1 && a3 == 0) {
    return 1;
  }
  uint64_t v6 = *a2;
  if (a3)
  {
    WebCore::ImageBuffer::setVolatileAndPurgeForTesting(v6);
    return 1;
  }
  (*(void (**)(WebCore::ImageBuffer *))(*(void *)v6 + 104))(v6);
  FloatSize v8 = *a2;

  return WebCore::ImageBuffer::setVolatile(v8);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferNonVolatile(WebCore::ImageBuffer **this, WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer *a2)
{
  char v3 = *this;
  if (!v3 || !WebCore::ImageBuffer::volatilityState(v3)) {
    return 0;
  }
  uint64_t v4 = *this;

  return WebCore::ImageBuffer::setNonVolatile(v4);
}

void WebKit::RemoteLayerWithInProcessRenderingBackingStore::prepareToDisplay(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 832);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (*(void *)(v2 + 88) && (WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay(this) & 1) == 0)
      {
        if (*((unsigned char *)this + 176))
        {
          uint64_t v49 = *((unsigned int *)this + 42);
          if (v49 != -1) {
            off_1EE9C0238[v49]((int)v61, (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 104));
          }
          *((_DWORD *)this + 42) = -1;
          *((unsigned char *)this + 176) = 0;
        }
        char v5 = (uint64_t *)((char *)this + 320);
        if (*((void *)this + 40)
          && (*((unsigned char *)this + 24)
           || WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferNonVolatile((WebCore::ImageBuffer **)this + 40, v4) != 1))
        {
          if (*((int *)this + 16) < 1
            || *((int *)this + 17) < 1
            || *((float *)this + 7) <= 0.0
            || *((float *)this + 8) <= 0.0)
          {
            return;
          }
          int v6 = 0;
        }
        else
        {
          int v6 = 1;
        }
        BOOL v7 = WebKit::RemoteLayerBackingStore::supportsPartialRepaint(this);
        if (!*((unsigned char *)this + 24))
        {
          char v11 = (WebCore::ImageBuffer *)*((void *)this + 42);
          if (!v11 || WebCore::ImageBuffer::isInUse(v11))
          {
            std::swap[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer>((uint64_t)this + 336, (unsigned char *)this + 352);
            uint64_t v12 = (WebCore::ImageBuffer *)*((void *)this + 42);
            if (v12)
            {
              if (WebCore::ImageBuffer::isInUse(v12)) {
                WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 42, v13);
              }
            }
          }
        }
        if (*((unsigned char *)this + 176))
        {
          uint64_t v50 = *((unsigned int *)this + 42);
          if (v50 != -1) {
            off_1EE9C0238[v50]((int)v61, (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 104));
          }
          *((_DWORD *)this + 42) = -1;
          *((unsigned char *)this + 176) = 0;
        }
        std::swap[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer>((uint64_t)this + 320, (unsigned char *)this + 336);
        int v9 = WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferNonVolatile((WebCore::ImageBuffer **)this + 40, v8);
        if (*((unsigned char *)this + 176)) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = *v5 != 0;
        }
        if (v9 == 1) {
          BOOL v10 = 0;
        }
        if ((v6 | (!v10 || !v7)) == 1) {
          WebKit::RemoteLayerBackingStore::setNeedsDisplay(this);
        }
        WebKit::RemoteLayerBackingStore::dirtyRepaintCounterIfNecessary(this);
        if (!*((void *)this + 40))
        {
          int v14 = *(WebCore::IOSurfacePool **)(*((void *)this + 2) + 48);
          char v15 = 3;
          if (v14)
          {
            int v14 = (WebCore::IOSurfacePool *)(*(uint64_t (**)(WebCore::IOSurfacePool *))(*(void *)v14 + 224))(v14);
            if (v14) {
              char v15 = 4;
            }
            else {
              char v15 = 3;
            }
          }
          uint64_t v55 = 0;
          uint64_t v54 = WebCore::IOSurfacePool::sharedPool(v14);
          int v16 = *((unsigned __int8 *)this + 24);
          uint64_t v53 = *(void *)((char *)this + 28);
          float v17 = *((float *)this + 12);
          CFTypeRef v18 = (CFTypeRef)*((void *)this + 5);
          CFTypeRef v52 = v18;
          int v19 = v16;
          if (v18)
          {
            CFRetain(v18);
            int v19 = *((unsigned __int8 *)this + 24);
          }
          if (v19 || !*((unsigned char *)this + 52))
          {
            char v20 = *((unsigned char *)this + 53) ^ 1;
            if (!v16)
            {
LABEL_44:
              uint64_t v66 = v53;
              float v67 = v17;
              CFTypeRef v68 = v18;
              if (v18) {
                CFRetain(v18);
              }
              LOBYTE(v69) = v20;
              HIBYTE(v69) = v15;
              WebCore::ImageBuffer::backendParameters();
              WebKit::ImageBufferShareableMappedIOSurfaceBackend::create((uint64_t)v64, &v63);
              if (v63)
              {
                v61[0] = 1;
                WebCore::ImageBufferBackend::calculateBaseTransform();
                uint64_t v62 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
                uint64_t v57 = v66;
                float v58 = v67;
                CFTypeRef cf = v68;
                if (v68) {
                  CFRetain(v68);
                }
                __int16 v60 = v69;
                FloatSize v21 = v63;
                char v63 = 0;
                CFTypeRef v56 = v21;
                WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t)&v57, &v51);
                uint64_t v22 = v56;
                CFTypeRef v56 = 0;
                if (v22) {
                  (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(void *)v22 + 8))(v22);
                }
                CFTypeRef v23 = cf;
                CFTypeRef cf = 0;
                if (v23) {
                  CFRelease(v23);
                }
                atomic_uchar *volatile v24 = v63;
                char v63 = 0;
                if (v24)
                {
                  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(v24);
                  bmalloc::api::isoDeallocate(v25, v26);
                }
              }
              else
              {
                uint64_t v51 = 0;
              }
              int v27 = v65;
              uint64_t v65 = 0;
              if (v27) {
                CFRelease(v27);
              }
              CFTypeRef v28 = v68;
              CFTypeRef v68 = 0;
              if (v28) {
                CFRelease(v28);
              }
LABEL_60:
              CFTypeRef v52 = 0;
              if (v18) {
                CFRelease(v18);
              }
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v55 + 4));
              uint64_t v30 = v51;
              uint64_t v51 = 0;
              uint64_t v31 = *v5;
              *char v5 = v30;
              if (!v31) {
                goto LABEL_84;
              }
              char v32 = 0;
              uint64_t v33 = *(void *)(v31 + 8);
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
              if (v32) {
                MEMORY[0x19972E8D0](v33);
              }
              uint64_t v34 = *(void *)(v33 + 8);
              int v35 = 1;
              uint64_t v36 = v34 - 1;
              *(void *)(v33 + 8) = v34 - 1;
              if (v34 == 1)
              {
                uint64_t v47 = *(void *)(v33 + 16);
                uint64_t v37 = *(void *)(v33 + 24);
                *(void *)(v33 + 24) = 0;
                BOOL v38 = v47 != 0;
              }
              else
              {
                uint64_t v37 = 0;
                BOOL v38 = 1;
              }
              atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
              if (v35 == 1)
              {
                if (v36) {
                  goto LABEL_73;
                }
              }
              else
              {
                WTF::Lock::unlockSlow((WTF::Lock *)v33);
                if (v36) {
                  goto LABEL_73;
                }
              }
              if (v37) {
                (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
              }
              if (!v38) {
                WTF::fastFree((WTF *)v33, v29);
              }
LABEL_73:
              uint64_t v39 = v51;
              uint64_t v51 = 0;
              if (v39)
              {
                char v40 = 0;
                uint64_t v41 = *(void *)(v39 + 8);
                atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v41, (unsigned __int8 *)&v40, 1u, memory_order_acquire, memory_order_acquire);
                if (v40) {
                  MEMORY[0x19972E8D0](v41);
                }
                uint64_t v42 = *(void *)(v41 + 8);
                int v43 = 1;
                uint64_t v44 = v42 - 1;
                *(void *)(v41 + 8) = v42 - 1;
                if (v42 == 1)
                {
                  uint64_t v48 = *(void *)(v41 + 16);
                  uint64_t v45 = *(void *)(v41 + 24);
                  *(void *)(v41 + 24) = 0;
                  BOOL v46 = v48 != 0;
                }
                else
                {
                  uint64_t v45 = 0;
                  BOOL v46 = 1;
                }
                atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v41, (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
                if (v43 == 1)
                {
                  if (!v44)
                  {
LABEL_80:
                    if (v45) {
                      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
                    }
                    if (!v46) {
                      WTF::fastFree((WTF *)v41, v29);
                    }
                  }
                }
                else
                {
                  WTF::Lock::unlockSlow((WTF::Lock *)v41);
                  if (!v44) {
                    goto LABEL_80;
                  }
                }
              }
LABEL_84:
              *((unsigned char *)this + 328) = 1;
              return;
            }
          }
          else
          {
            if (*((unsigned char *)this + 53)) {
              char v20 = 2;
            }
            else {
              char v20 = 3;
            }
            if (!v16) {
              goto LABEL_44;
            }
          }
          WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(&v53, &v52, v20, v15, (uint64_t)&v54, &v51, v17);
          CFTypeRef v18 = v52;
          goto LABEL_60;
        }
      }
    }
  }
}

void sub_198AE5C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WebCore::ImageBufferIOSurfaceBackend *a28)
{
  uint64_t v31 = a15;
  a15 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  CFTypeRef v32 = cf;
  CFTypeRef cf = 0;
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = a28;
  a28 = 0;
  if (v33)
  {
    WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(v33);
    bmalloc::api::isoDeallocate(v36, v37);
  }
  uint64_t v34 = *(const void **)(v29 - 128);
  *(void *)(v29 - 128) = 0;
  if (v34) {
    CFRelease(v34);
  }
  int v35 = *(const void **)(v29 - 96);
  *(void *)(v29 - 96) = 0;
  if (v35) {
    CFRelease(v35);
  }
  if (v28) {
    CFRelease(v28);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&a14 + 4));
  _Unwind_Resume(a1);
}

uint64_t std::swap[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer>(uint64_t result, unsigned char *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)result;
  *(void *)uint64_t result = 0;
  char v5 = *(unsigned char *)(result + 8);
  uint64_t v6 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v7 = *(void *)result;
  *(void *)uint64_t result = v6;
  if (v7)
  {
    char v8 = 0;
    uint64_t v9 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      uint64_t result = MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *(void *)(v9 + 8);
    int v11 = 1;
    uint64_t v12 = v10 - 1;
    *(void *)(v9 + 8) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v23 = *(void *)(v9 + 16);
      uint64_t v13 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = 0;
      BOOL v14 = v23 != 0;
    }
    else
    {
      uint64_t v13 = 0;
      BOOL v14 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 == 1)
    {
      if (v12) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v12) {
        goto LABEL_12;
      }
    }
    if (v13) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (!v14) {
      uint64_t result = WTF::fastFree((WTF *)v9, a2);
    }
  }
LABEL_12:
  *(unsigned char *)(v3 + 8) = a2[8];
  uint64_t v15 = *(void *)a2;
  *(void *)a2 = v4;
  if (v15)
  {
    char v16 = 0;
    uint64_t v17 = *(void *)(v15 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16) {
      uint64_t result = MEMORY[0x19972E8D0](v17);
    }
    uint64_t v18 = *(void *)(v17 + 8);
    int v19 = 1;
    uint64_t v20 = v18 - 1;
    *(void *)(v17 + 8) = v18 - 1;
    if (v18 == 1)
    {
      uint64_t v24 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      *(void *)(v17 + 24) = 0;
      BOOL v22 = v24 != 0;
    }
    else
    {
      uint64_t v21 = 0;
      BOOL v22 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
    if (v19 == 1)
    {
      if (v20) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
      if (v20) {
        goto LABEL_23;
      }
    }
    if (v21) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    if (!v22) {
      uint64_t result = WTF::fastFree((WTF *)v17, a2);
    }
  }
LABEL_23:
  a2[8] = v5;
  return result;
}

unsigned char *WebKit::RemoteLayerWithInProcessRenderingBackingStore::encodeBufferAndBackendInfos(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, IPC::Encoder *a2)
{
  uint64_t v4 = (WebCore::ImageBuffer *)*((void *)this + 40);
  if (v4)
  {
    uint64_t v12 = *((void *)v4 + 15);
    uint64_t v13 = WebCore::ImageBuffer::backendGeneration(v4);
    char v14 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    char v14 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, (uint64_t)&v12);
  char v5 = (WebCore::ImageBuffer *)*((void *)this + 42);
  if (v5)
  {
    uint64_t v6 = *((void *)v5 + 15);
    unsigned int v7 = WebCore::ImageBuffer::backendGeneration(v5);
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    char v14 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    char v14 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, (uint64_t)&v12);
  char v8 = (WebCore::ImageBuffer *)*((void *)this + 44);
  if (v8)
  {
    uint64_t v9 = *((void *)v8 + 15);
    unsigned int v10 = WebCore::ImageBuffer::backendGeneration(v8);
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    char v14 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    char v14 = 0;
  }
  return IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, (uint64_t)&v12);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::dump(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, WTF::TextStream *a2)
{
  return WTF::TextStream::dumpProperty<BOOL>(a2);
}

uint64_t WTF::TextStream::dumpProperty<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(WTF::TextStream *a1, uint64_t a2, void *a3)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*a3) {
    WebCore::operator<<();
  }
  else {
    WTF::TextStream::operator<<();
  }

  return WTF::TextStream::endGroup(a1);
}

uint64_t WTF::TextStream::dumpProperty<BOOL>(WTF::TextStream *a1)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();

  return WTF::TextStream::endGroup(a1);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::clearBackingStore(uint64_t this)
{
  if (*(unsigned char *)(this + 176))
  {
    uint64_t v2 = this;
    uint64_t v1 = *(unsigned int *)(this + 168);
    if (v1 != -1) {
      off_1EE9C0238[v1]((int)&v3, (WTF::MachSendRight *)(this + 104));
    }
    this = v2;
    *(_DWORD *)(v2 + 168) = -1;
    *(unsigned char *)(v2 + 176) = 0;
  }
  *(unsigned char *)(this + 456) = 1;
  return this;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::dump(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, WTF::TextStream *a2)
{
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*((void *)this + 40)) {
    WTF::operator<<();
  }
  else {
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  uint64_t v4 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebKit::operator<<(v4, (unsigned char *)this + 328);
  WTF::TextStream::endGroup(a2);
  return WTF::TextStream::dumpProperty<BOOL>(a2);
}

void WebKit::AuxiliaryProcess::initializeSandbox()
{
}

uint64_t WebKit::InteractionInformationAtPosition::mergeCompatibleOptionalInformation(uint64_t this, const WebKit::InteractionInformationAtPosition *a2)
{
  if (*(_DWORD *)a2 == *(_DWORD *)this && *((_DWORD *)a2 + 1) == *(_DWORD *)(this + 4))
  {
    uint64_t v4 = this;
    if (*((unsigned char *)a2 + 8) && !*(unsigned char *)(this + 8))
    {
      char v5 = (atomic_uint *)*((void *)a2 + 24);
      if (v5) {
        atomic_fetch_add(v5, 1u);
      }
      this = *(void *)(this + 192);
      *(void *)(v4 + 192) = v5;
      if (this) {
        this = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(this, a2);
      }
    }
    if (*((unsigned char *)a2 + 9) && !*(unsigned char *)(v4 + 9))
    {
      return WebCore::TextIndicatorData::operator=(v4 + 280, (long long *)((char *)a2 + 280));
    }
  }
  return this;
}

uint64_t WebCore::TextIndicatorData::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 48, (uint64_t)(a2 + 3));
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  uint64_t v6 = *((void *)a2 + 9);
  if (v6) {
    ++*(_DWORD *)(v6 + 8);
  }
  unsigned int v7 = *(_DWORD **)(a1 + 72);
  *(void *)(a1 + 72) = v6;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  uint64_t v8 = *((void *)a2 + 10);
  if (v8) {
    ++*(_DWORD *)(v8 + 8);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
  }
  uint64_t v10 = *((void *)a2 + 11);
  if (v10) {
    ++*(_DWORD *)(v10 + 8);
  }
  int v11 = *(_DWORD **)(a1 + 88);
  *(void *)(a1 + 88) = v10;
  if (v11)
  {
    if (v11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
  }
  WebCore::Color::operator=();
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  return a1;
}

{
  long long v4;
  long long v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 48, (_DWORD *)a2 + 12);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  uint64_t v6 = *((void *)a2 + 9);
  *((void *)a2 + 9) = 0;
  unsigned int v7 = *(_DWORD **)(a1 + 72);
  *(void *)(a1 + 72) = v6;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  uint64_t v8 = *((void *)a2 + 10);
  *((void *)a2 + 10) = 0;
  uint64_t v9 = *(_DWORD **)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
  }
  uint64_t v10 = *((void *)a2 + 11);
  *((void *)a2 + 1nw_tcp_options_set_no_delay(options, 1) = 0;
  int v11 = *(_DWORD **)(a1 + 88);
  *(void *)(a1 + 88) = v10;
  if (v11)
  {
    if (v11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
  }
  WebCore::Color::operator=();
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  return a1;
}

uint64_t WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent(uint64_t a1, WebKit::WebIOSEventFactory *this, WebEvent *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WebKit::WebIOSEventFactory::createWebKeyboardEvent(this, a3, (uint64_t)v12);
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v13[12];
  uint64_t v6 = v14;
  if (v14) {
    *v14 += 2;
  }
  *(void *)(a1 + 32) = v6;
  unsigned int v7 = v15;
  if (v15) {
    *v15 += 2;
  }
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = v16;
  if (v16) {
    *v16 += 2;
  }
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = v17;
  if (v17) {
    *v17 += 2;
  }
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = v18;
  if (v18) {
    *v18 += 2;
  }
  *(void *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v19;
  WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v12, v5);
  *(void *)(a1 + 88) = this;
  if (this) {
    CFRetain(this);
  }
  return a1;
}

void sub_198AE6578(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebKit::WebKeyboardEvent::~WebKeyboardEvent(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NativeWebMouseEvent::NativeWebMouseEvent(uint64_t a1, char a2, char a3, __int16 a4, void *a5, void *a6, int a7, char a8, float a9, float a10, float a11, double a12, double a13, char a14, _DWORD **a15)
{
  int v31 = 0;
  char v32 = a2;
  char v33 = a8;
  double v34 = a12;
  WTF::UUID::UUID((WTF::UUID *)&v35);
  v29[1] = 0;
  uint64_t v30 = 0;
  v28[1] = 0;
  v29[0] = 0;
  v28[0] = 0;
  WebKit::WebMouseEvent::WebMouseEvent(a1, (uint64_t)&v31, a3, a4, a5, a6, a7, 0, a9, a10, a11, a13, 1, a15, a14, &v30, v29, v28);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v25);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v26);
  *(void *)(a1 + 144) = 0;
  return a1;
}

void WebKit::RemoteLayerWithInProcessRenderingBackingStore::~RemoteLayerWithInProcessRenderingBackingStore(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, void *a2)
{
  WebKit::RemoteLayerWithInProcessRenderingBackingStore::~RemoteLayerWithInProcessRenderingBackingStore(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C0298;
  char v3 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v3)
  {
    long long v4 = 0;
    long long v5 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    unsigned int v7 = 1;
    uint64_t v8 = v6 - 1;
    *(void *)(v5 + 8) = v6 - 1;
    if (v6 == 1)
    {
      int v27 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      uint64_t v10 = v27 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      if (v8) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v8) {
        goto LABEL_12;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (!v10) {
      WTF::fastFree((WTF *)v5, a2);
    }
  }
LABEL_12:
  int v11 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (!v11) {
    goto LABEL_23;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(v11 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x19972E8D0](v13);
  }
  char v14 = *(void *)(v13 + 8);
  uint64_t v15 = 1;
  char v16 = v14 - 1;
  *(void *)(v13 + 8) = v14 - 1;
  if (v14 == 1)
  {
    CFTypeRef v28 = *(void *)(v13 + 16);
    uint64_t v17 = *(void *)(v13 + 24);
    *(void *)(v13 + 24) = 0;
    uint64_t v18 = v28 != 0;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
    if (v16) {
      goto LABEL_23;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16) {
      goto LABEL_23;
    }
  }
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (!v18) {
    WTF::fastFree((WTF *)v13, a2);
  }
LABEL_23:
  long long v19 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (!v19) {
    goto LABEL_34;
  }
  uint64_t v20 = 0;
  uint64_t v21 = *(void *)(v19 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    MEMORY[0x19972E8D0](v21);
  }
  BOOL v22 = *(void *)(v21 + 8);
  uint64_t v23 = 1;
  uint64_t v24 = v22 - 1;
  *(void *)(v21 + 8) = v22 - 1;
  if (v22 == 1)
  {
    uint64_t v29 = *(void *)(v21 + 16);
    FloatRect v25 = *(void *)(v21 + 24);
    *(void *)(v21 + 24) = 0;
    uint64_t v26 = v29 != 0;
  }
  else
  {
    FloatRect v25 = 0;
    uint64_t v26 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 == 1)
  {
    if (v24) {
      goto LABEL_34;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v24) {
      goto LABEL_34;
    }
  }
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (!v26) {
    WTF::fastFree((WTF *)v21, a2);
  }
LABEL_34:

  WebKit::RemoteLayerBackingStore::~RemoteLayerBackingStore(this, a2);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::isRemoteLayerWithInProcessRenderingBackingStore(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  return 1;
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::processModel(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == 1)
  {
    uint64_t v6 = *a3;
    *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
    *(void *)a2 = v6;
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v5])(&v8, v4);
    }
    *(_DWORD *)(v4 + 16) = -1;
    uint64_t v7 = *a3;
    *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
    *(void *)uint64_t v4 = v7;
    *(_DWORD *)(v4 + 16) = 1;
  }
  return result;
}

WebCore::Model *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS16_EEEDcSY_DpT0_(WebCore::Model *result, WebCore::Model **a2, WebCore::Model **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == 2)
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v6;
    if (result)
    {
      return WTF::RefCounted<WebCore::Model>::deref(result);
    }
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = (WebCore::Model *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v5])(&v8, v4);
    }
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSD_33SupportsObjectIdentifierNullStateE0EEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSB_SC_SL_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == 3)
  {
    *a2 = *a3;
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNSB_33SupportsObjectIdentifierNullStateE0EEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v5])(&v6, v4);
    }
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 16) = 3;
  }
  return result;
}

void WebKit::ImageBufferBackingStoreFlusher::~ImageBufferBackingStoreFlusher(WebKit::ImageBufferBackingStoreFlusher *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void WebKit::ImageBufferBackingStoreFlusher::~ImageBufferBackingStoreFlusher(WebKit::ImageBufferBackingStoreFlusher *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::ImageBufferBackingStoreFlusher::flushAndCollectHandles(uint64_t a1)
{
  return 1;
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      unsigned int v4 = *(_DWORD *)(a1 + 12);
    }
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v4 != v6)
    {
      uint64_t v7 = (_OWORD *)(*(void *)a1 + 16 * v4);
      char v8 = (long long *)(*(void *)a2 + 16 * v4);
      uint64_t v9 = 16 * v6 - 16 * v4;
      do
      {
        long long v10 = *v8++;
        *v7++ = v10;
        v9 -= 16;
      }
      while (v9);
      unsigned int v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 16))();
}

WTF::TextStream *WebKit::operator<<(WTF::TextStream *a1, unsigned char *a2)
{
  if (a2[8]) {
    WTF::operator<<();
  }
  else {
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[24]) {
    WTF::operator<<();
  }
  else {
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[40]) {
    WTF::operator<<();
  }
  else {
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::endGroup(a1);
  return a1;
}

uint64_t WebKit::RemoteShaderModule::RemoteShaderModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C0350;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  int v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = a6;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x7Bu, a6);
  return a1;
}

void WebKit::RemoteShaderModule::~RemoteShaderModule(WebKit::RemoteShaderModule *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteShaderModule::~RemoteShaderModule(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::WebGPU::ObjectHeap::removeObject(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 24);
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v7);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6removeEPS49_(v3, (uint64_t)result);
  }
  return result;
}

uint64_t WebKit::RemoteShaderModule::compilationInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v4 = &unk_1EE9C0618;
  v4[1] = v3;
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 16))(v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteShaderModule::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(*v2 + 24);

  return v3(v2, v2 + 3);
}

uint64_t WebKit::RemoteTexture::RemoteTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C0378;
  ++*(_DWORD *)(a4 + 8);
  *(void *)(a1 + 16) = a4;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  uint64_t v13 = *(atomic_uint **)(a5 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 24) = v13;
  uint64_t v14 = *a6;
  *a6 = 0;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = a7;
  uint64_t v15 = *(atomic_uchar **)(a2 + 16);
  if (v15) {
    uint64_t v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v15);
  }
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  char v16 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v16, 1u);
  *(void *)(a1 + 64) = v16;
  IPC::StreamServerConnection::startReceivingMessages(*(void *)(a1 + 32), a1, 0x7Fu, *(void *)(a1 + 40));
  return a1;
}

void WebKit::RemoteTexture::~RemoteTexture(WebKit::RemoteTexture *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned int v4 = (atomic_uchar *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteTexture::~RemoteTexture(this, a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteTexture::createView(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  LOBYTE(v39) = 0;
  char v48 = 0;
  uint64_t v5 = *(void *)(a1[3] + 8);
  uint64_t v6 = (_DWORD *)(v5 + 8);
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v7 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v7 += 2;
    }
    int v8 = *(_DWORD *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 12);
    int v10 = *(_DWORD *)(a2 + 16);
    int v11 = *(_DWORD *)(a2 + 20);
    char v44 = *(unsigned char *)(a2 + 24);
    char v47 = *(unsigned char *)(a2 + 36);
    int v12 = *(_DWORD *)(a2 + 28);
    int v13 = *(_DWORD *)(a2 + 32);
    uint64_t v39 = v7;
    int v40 = v8;
    char v41 = v9;
    int v42 = v10;
    int v43 = v11;
    int v45 = v12;
    int v46 = v13;
    char v48 = 1;
  }
  uint64_t v14 = (_DWORD *)a1[2];
  ++v14[2];
  (*(void (**)(_DWORD **__return_ptr, _DWORD *, WTF::StringImpl **))(*(void *)v14 + 16))(&v38, v14, &v39);
  if (v14[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  else {
    --v14[2];
  }
  uint64_t v15 = v38;
  if (v38)
  {
    BOOL v38 = 0;
    uint64_t v16 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u);
    uint64_t v17 = *(void *)(a1[8] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
    uint64_t v18 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v18 + 8) = 1;
    *(void *)uint64_t v18 = &unk_1EE9C03A0;
    ++v15[2];
    *(void *)(v18 + 16) = v15;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
    long long v19 = *(atomic_uint **)(v5 + 16);
    atomic_fetch_add(v19, 1u);
    *(void *)(v18 + 24) = v19;
    *(void *)(v18 + 32) = v16;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v17 + 16), v17);
    uint64_t v20 = *(atomic_uint **)(v17 + 16);
    atomic_fetch_add(v20, 1u);
    *(void *)(v18 + 40) = v20;
    *(void *)(v18 + 48) = a3;
    uint64_t v21 = *(atomic_uint **)(v18 + 32);
    atomic_fetch_add(v21 + 2, 1u);
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v21, v18, 0x80u, *(void *)(v18 + 48));
    if (v21 && atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v21 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v17 + 8));
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
    uint64_t v52 = a3;
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    uint64_t v49 = 0;
    uint64_t v50 = v18;
    int v51 = 23;
    _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(v5 + 24), &v52, (uint64_t)&v50, (uint64_t)buf);
    if (v51 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v51])(&v53, &v50);
    }
    int v51 = -1;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::~ScopedActiveMessageReceiveQueue(&v49);
    if (atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v18 + 8));
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  else
  {
    uint64_t v26 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&void buf[4] = "void WebKit::RemoteTexture::createView(const std::optional<WebGPU::TextureViewDescriptor> &, "
                           "WebGPUIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/WebGPU/RemoteTexture.cpp 86: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteCommandEncoder::connection((WebKit::RemoteCommandEncoder *)&v50, (uint64_t)a1);
    int v27 = (atomic_uchar *volatile *)v50;
    if (v50)
    {
      char v28 = 0;
      *(unsigned char *)(v50 + 98) = 1;
      uint64_t v50 = 0;
      atomic_uchar *volatile v29 = *v27;
      atomic_compare_exchange_strong_explicit(*v27, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
      if (v28) {
        MEMORY[0x19972E8D0](v29);
      }
      uint64_t v30 = *((void *)v29 + 1);
      uint64_t v31 = v30 - 1;
      *((void *)v29 + nw_tcp_options_set_no_delay(options, 1) = v30 - 1;
      if (v30 == 1)
      {
        uint64_t v37 = *((void *)v29 + 2);
        uint64_t v33 = *((void *)v29 + 3);
        *((void *)v29 + 3) = 0;
        BOOL v32 = v37 == 0;
      }
      else
      {
        BOOL v32 = 0;
        uint64_t v33 = 0;
      }
      int v34 = 1;
      atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
      if (v34 == 1)
      {
        if (v31) {
          goto LABEL_21;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        if (v31) {
          goto LABEL_21;
        }
      }
      uint64_t v35 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v35 = &unk_1EE9B37E8;
      *(void *)(v35 + 8) = v29;
      *(void *)(v35 + 16) = v33;
      *(unsigned char *)(v35 + 24) = v32;
      *(void *)long long buf = v35;
      WTF::ensureOnMainRunLoop();
      uint64_t v36 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
    }
  }
LABEL_21:
  uint64_t v23 = v38;
  BOOL v38 = 0;
  if (v23)
  {
    if (v23[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
    }
    else {
      --v23[2];
    }
  }
  uint64_t result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v22);
  if (v48)
  {
    uint64_t result = v39;
    uint64_t v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteTexture::destroy(WebKit::RemoteTexture *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 2);
  ++v1[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 24))(v1);
  if (v1[2] == 1)
  {
    uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
    return v3(v1);
  }
  else
  {
    --v1[2];
  }
  return result;
}

uint64_t WebKit::RemoteTexture::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 32))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

void WebKit::RemoteTextureView::~RemoteTextureView(WebKit::RemoteTextureView *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteTextureView::~RemoteTextureView(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteTextureView::setLabel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  ++*((_DWORD *)v2 + 2);
  WTF::String::operator=(v2 + 3, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, _DWORD *))(*v2 + 16))(v2, (_DWORD *)v2 + 6);
  if (*((_DWORD *)v2 + 2) == 1)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t *))(*v2 + 8);
    return v4(v2);
  }
  else
  {
    --*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t WebKit::RemoteXRBinding::RemoteXRBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C03C8;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  int v11 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v11, 1u);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = *a5;
  *a5 = 0;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = a6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  int v13 = *(atomic_uint **)(a4 + 16);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 48) = v13;
  uint64_t v14 = *(atomic_uint **)(a1 + 32);
  atomic_fetch_add(v14 + 2, 1u);
  IPC::StreamServerConnection::startReceivingMessages((uint64_t)v14, a1, 0x86u, *(void *)(a1 + 40));
  if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v14 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

void WebKit::RemoteXRBinding::~RemoteXRBinding(WebKit::RemoteXRBinding *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteXRBinding::~RemoteXRBinding(this, a2);

  WTF::fastFree(v2, v3);
}

_DWORD *WebKit::RemoteXRBinding::createProjectionLayer(void *a1, char a2, __int16 a3, char a4, uint64_t a5, double a6)
{
  char v20 = a2;
  __int16 v21 = a3;
  char v22 = a4;
  double v23 = a6;
  int v8 = (_DWORD *)a1[2];
  ++v8[2];
  uint64_t result = (*(void *(**)(_DWORD **__return_ptr, _DWORD *, char *))(*(void *)v8 + 16))(&v19, v8, &v20);
  if (v8[2] == 1) {
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  else {
    --v8[2];
  }
  int v10 = v19;
  if (v19)
  {
    uint64_t v11 = *(void *)(a1[3] + 8);
    ++*(_DWORD *)(v11 + 8);
    uint64_t v12 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
    uint64_t v13 = *(void *)(a1[6] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
    uint64_t v14 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v14 + 8) = 1;
    *(void *)uint64_t v14 = &unk_1EE9C03F0;
    ++v10[2];
    *(void *)(v14 + 16) = v10;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v11 + 16), v11);
    uint64_t v15 = *(atomic_uint **)(v11 + 16);
    atomic_fetch_add(v15, 1u);
    *(void *)(v14 + 24) = v15;
    *(void *)(v14 + 32) = v12;
    *(void *)(v14 + 40) = a5;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 16), v13);
    uint64_t v16 = *(atomic_uint **)(v13 + 16);
    atomic_fetch_add(v16, 1u);
    *(void *)(v14 + 48) = v16;
    uint64_t v17 = *(atomic_uint **)(v14 + 32);
    atomic_fetch_add(v17 + 2, 1u);
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v17, v14, 0x87u, *(void *)(v14 + 40));
    if (v17 && atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v17 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v17 + 8))(v17);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v13 + 8));
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v28 = a5;
    atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
    uint64_t v24 = 0;
    uint64_t v25 = v14;
    int v26 = 26;
    _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(v11 + 24), &v28, (uint64_t)&v25, (uint64_t)v27);
    if (v26 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v26])(&v29, &v25);
    }
    int v26 = -1;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRProjectionLayer,WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>::~ScopedActiveMessageReceiveQueue(&v24);
    if (atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v14 + 8));
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v11 + 8), v18);
    uint64_t result = v19;
    long long v19 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  return result;
}

_DWORD *WebKit::RemoteXRBinding::getViewSubImage(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1[3] + 8);
  ++*(_DWORD *)(v7 + 8);
  WebKit::WebGPU::ObjectHeap::convertXRProjectionLayerFromBacking(v7, a2, (uint64_t *)&v21);
  char v9 = (unsigned int *)v21;
  if (!v21) {
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v7 + 8), v8);
  }
  int v8 = (void *)*((void *)v21 + 1);
  if (!v8)
  {
    __int16 v21 = 0;
LABEL_22:
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
    return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v7 + 8), v8);
  }
  int v10 = (_DWORD *)a1[2];
  ++v10[2];
  (*(void (**)(_DWORD **__return_ptr, _DWORD *, void *, uint64_t))(*(void *)v10 + 32))(&v20, v10, v8, a3);
  if (v10[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[2];
  }
  uint64_t v11 = v20;
  if (v20)
  {
    uint64_t v12 = a1[4];
    atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
    uint64_t v13 = *(void *)(a1[6] + 8);
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
    uint64_t v14 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v14 + 8) = 1;
    *(void *)uint64_t v14 = &unk_1EE9C0418;
    ++v11[2];
    *(void *)(v14 + 16) = v11;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    uint64_t v15 = *(atomic_uint **)(v7 + 16);
    atomic_fetch_add(v15, 1u);
    *(void *)(v14 + 24) = v15;
    *(void *)(v14 + 32) = v12;
    *(void *)(v14 + 40) = a4;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 16), v13);
    uint64_t v16 = *(atomic_uint **)(v13 + 16);
    atomic_fetch_add(v16, 1u);
    *(void *)(v14 + 48) = v16;
    uint64_t v17 = *(atomic_uint **)(v14 + 32);
    atomic_fetch_add(v17 + 2, 1u);
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v17, v14, 0x88u, *(void *)(v14 + 40));
    if (v17 && atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v17 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v17 + 8))(v17);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v13 + 8));
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v26 = a4;
    atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u);
    char v22 = 0;
    uint64_t v23 = v14;
    int v24 = 25;
    _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(v7 + 24), &v26, (uint64_t)&v23, (uint64_t)v25);
    if (v24 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v24])(&v27, &v23);
    }
    int v24 = -1;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRSubImage,WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>::~ScopedActiveMessageReceiveQueue(&v22);
    if (atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v14 + 8));
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v18 = v20;
    char v20 = 0;
    if (v18)
    {
      if (v18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
      }
      else {
        --v18[2];
      }
    }
  }
  char v9 = (unsigned int *)v21;
  __int16 v21 = 0;
  if (v9) {
    goto LABEL_22;
  }
  return WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v7 + 8), v8);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertXRProjectionLayerFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 26 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    int v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

void *WebKit::RemoteXRBinding::stopListeningForIPC(WebKit::RemoteXRBinding *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  atomic_fetch_add(v1 + 2, 1u);
  uint64_t result = IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v1, 0x86u, *((void *)this + 5));
  if (v1 && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v1 + 2);
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 8);
    return (void *)v3(v1);
  }
  return result;
}

void WebKit::RemoteXRProjectionLayer::~RemoteXRProjectionLayer(WebKit::RemoteXRProjectionLayer *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteXRProjectionLayer::~RemoteXRProjectionLayer(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::RemoteXRProjectionLayer::startFrame(WebKit::RemoteXRProjectionLayer *this)
{
}

void WebKit::RemoteXRProjectionLayer::endFrame(WebKit::RemoteXRProjectionLayer *this)
{
}

void WebKit::RemoteXRSubImage::~RemoteXRSubImage(WebKit::RemoteXRSubImage *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteXRSubImage::~RemoteXRSubImage(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::WebGPU::ObjectHeap::~ObjectHeap(WebKit::WebGPU::ObjectHeap *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E15deallocateTableEPS49_(v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebGPU::ObjectHeap::~ObjectHeap(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned int **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 1;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 6;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 10;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 13;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 15;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 18;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 21;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned char v7[24];
  uint64_t v8;
  char v9;

  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 22;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

uint64_t *_ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6expandEPS49_(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  unsigned int v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = (uint64_t *)(v8 + 24 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          unsigned int v21 = 0;
        }
        else {
          unsigned int v21 = *(_DWORD *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 24 * v21;
        goto LABEL_36;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 24 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      *((_DWORD *)v18 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  v30[0] = 0;
  int v31 = -1;
  uint64_t result = (uint64_t *)_ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrIS7_NS8_12RawPtrTraitsIS7_EENS8_21DefaultRefDerefTraitsIS7_EEEEEENS5_INS6_15RemoteBindGroupENS9_ISG_NSA_ISG_EENSC_ISG_EEEEEENS5_INS6_21RemoteBindGroupLayoutENS9_ISL_NSA_ISL_EENSC_ISL_EEEEEENS5_INS6_12RemoteBufferENS9_ISQ_NSA_ISQ_EENSC_ISQ_EEEEEENS5_INS6_19RemoteCommandBufferENS9_ISV_NSA_ISV_EENSC_ISV_EEEEEENS5_INS6_20RemoteCommandEncoderENS9_IS10_NSA_IS10_EENSC_IS10_EEEEEENS5_INS6_27RemoteCompositorIntegrationENS9_IS15_NSA_IS15_EENSC_IS15_EEEEEENS5_INS6_24RemoteComputePassEncoderENS9_IS1A_NSA_IS1A_EENSC_IS1A_EEEEEENS5_INS6_21RemoteComputePipelineENS9_IS1F_NSA_IS1F_EENSC_IS1F_EEEEEENS5_INS6_12RemoteDeviceENS9_IS1K_NSA_IS1K_EENSC_IS1K_EEEEEENS5_INS6_21RemoteExternalTextureENS9_IS1P_NSA_IS1P_EENSC_IS1P_EEEEEENS5_INS6_20RemotePipelineLayoutENS9_IS1U_NSA_IS1U_EENSC_IS1U_EEEEEENS5_INS6_25RemotePresentationContextENS9_IS1Z_NSA_IS1Z_EENSC_IS1Z_EEEEEENS5_INS6_14RemoteQuerySetENS9_IS24_NSA_IS24_EENSC_IS24_EEEEEENS5_INS6_11RemoteQueueENS9_IS29_NSA_IS29_EENSC_IS29_EEEEEENS5_INS6_25RemoteRenderBundleEncoderENS9_IS2E_NSA_IS2E_EENSC_IS2E_EEEEEENS5_INS6_18RemoteRenderBundleENS9_IS2J_NSA_IS2J_EENSC_IS2J_EEEEEENS5_INS6_23RemoteRenderPassEncoderENS9_IS2O_NSA_IS2O_EENSC_IS2O_EEEEEENS5_INS6_20RemoteRenderPipelineENS9_IS2T_NSA_IS2T_EENSC_IS2T_EEEEEENS5_INS6_13RemoteSamplerENS9_IS2Y_NSA_IS2Y_EENSC_IS2Y_EEEEEENS5_INS6_18RemoteShaderModuleENS9_IS33_NSA_IS33_EENSC_IS33_EEEEEENS5_INS6_13RemoteTextureENS9_IS38_NSA_IS38_EENSC_IS38_EEEEEENS5_INS6_17RemoteTextureViewENS9_IS3D_NSA_IS3D_EENSC_IS3D_EEEEEENS5_INS6_15RemoteXRBindingENS9_IS3I_NSA_IS3I_EENSC_IS3I_EEEEEENS5_INS6_16RemoteXRSubImageENS9_IS3N_NSA_IS3N_EENSC_IS3N_EEEEEENS5_INS6_23RemoteXRProjectionLayerENS9_IS3S_NSA_IS3S_EENSC_IS3S_EEEEEENS5_INS6_12RemoteXRViewENS9_IS3X_NSA_IS3X_EENSC_IS3X_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS42_LNS0_6_TraitE1EEEEEvRS43_OT_((uint64_t)v30, a3);
  uint64_t v20 = *((unsigned int *)v16 + 4);
  if (v20 == -1)
  {
    if (v31 == -1) {
      goto LABEL_21;
    }
  }
  else if (v31 == -1)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v20])(&v32, v16 + 1);
    *((_DWORD *)v16 + 4) = -1;
    goto LABEL_19;
  }
  BOOL v32 = v16 + 1;
  uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t *, char *))off_1EE9C0710[v31])(&v32, v16 + 1, v30);
LABEL_19:
  if (v31 != -1) {
    uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v31])(&v32, v30);
  }
LABEL_21:
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_29:
      uint64_t result = _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6expandEPS49_(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      }
      else {
        LODWORD(v27) = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_29;
  }
  uint64_t v29 = v24 + 24 * v27;
  char v28 = 1;
LABEL_36:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

WebKit::RemoteBindGroup **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 2;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteBindGroupLayout **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 3;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteBuffer **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 4;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteCommandBuffer **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 5;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteCompositorIntegration **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 7;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteComputePassEncoder **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 8;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteComputePipeline **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 9;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteExternalTexture **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 11;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemotePipelineLayout **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 12;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteQuerySet **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 14;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteRenderBundleEncoder **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 16;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteRenderBundle **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 17;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteRenderPipeline **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 19;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteSampler **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 20;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

WebKit::RemoteXRBinding **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  unsigned int v4 = 0;
  uint64_t v5 = a3;
  int v6 = 24;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSC_INS2_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSC_INS2_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSC_INS2_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSC_INS2_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS4A_IS47_EENS_15HashTableTraitsEE3addIS47_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS7_NS_12KeyValuePairIS7_S47_EENS_24KeyValuePairKeyExtractorIS4K_EES49_NS4E_18KeyValuePairTraitsES4B_EES7_S4K_S4M_S49_S4N_S4B_EEEERKS7_OT_((uint64_t *)(a1 + 24), &v8, (uint64_t)&v5, (uint64_t)v7);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v6])(&v9, &v5);
  }
  int v6 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRBinding,WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>::~ScopedActiveMessageReceiveQueue(&v4);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertAdapterFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 1 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    int v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 2 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertBindGroupLayoutFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 3 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertBufferFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 4 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertCommandBufferFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 5 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertCommandEncoderFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 6 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertCompositorIntegrationFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 7 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertComputePassEncoderFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 8 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertComputePipelineFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 9 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertDeviceFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 10 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

atomic_uchar *WebKit::WebGPU::ObjectHeap::convertExternalTextureFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uchar **a3@<X8>)
{
  uint64_t v8 = a2;
  uint64_t result = (atomic_uchar *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v8);
  int v6 = *(atomic_uchar **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 == result || *((_DWORD *)result + 4) != 11)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(*((void *)result + 1) + 16);
    if (v7)
    {
      uint64_t result = *(atomic_uchar **)(v7 + 8);
      if (result) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
      }
    }
    else
    {
      uint64_t result = 0;
    }
    *a3 = result;
    a3[1] = (atomic_uchar *)v7;
  }
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertPipelineLayoutFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 12 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertPresentationContextFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 13 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertQuerySetFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 14 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertQueueFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 15 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertRenderBundleEncoderFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 16 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertRenderBundleFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 17 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertRenderPassEncoderFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 18 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertRenderPipelineFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 19 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertSamplerFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 20 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertShaderModuleFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 21 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertTextureFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 22 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

char *WebKit::WebGPU::ObjectHeap::convertTextureViewFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t result = (char *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  int v6 = *(char **)(a1 + 24);
  if (v6) {
    v6 += 24 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result && *((_DWORD *)result + 4) == 23 && (v7 = *((void *)result + 1), (uint64_t v8 = *(void *)(v7 + 16)) != 0))
  {
    uint64_t result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), *(void *)(v7 + 16));
    char v9 = *(atomic_uint **)(v8 + 16);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertXRBindingFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 24 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertXRSubImageFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 25 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::createXRViewFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v5 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v11);
  int v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5 && *((_DWORD *)v5 + 4) == 27 && (uint64_t v7 = *(void *)(v5[1] + 16)) != 0)
  {
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
      goto LABEL_11;
    }
    uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t result = 1;
    *(void *)(result + 8) = v7;
    uint64_t v10 = *(unsigned int **)(v7 + 16);
    *(void *)(v7 + 16) = result;
    if (!v10) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    uint64_t result = *(void *)(v7 + 16);
    if (result) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E15deallocateTableEPS49_(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v7, v4);
        }
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteBindGroup **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteBindGroup **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteBindGroupLayout **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteBindGroupLayout **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteBuffer **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteBuffer **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteCommandBuffer **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteCommandBuffer **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteCompositorIntegration **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteCompositorIntegration **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteComputePassEncoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteComputePassEncoder **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteComputePipeline **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteComputePipeline **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteExternalTexture **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteExternalTexture **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemotePipelineLayout **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemotePipelineLayout **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteQuerySet **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteQuerySet **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteRenderBundleEncoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteRenderBundleEncoder **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteRenderBundle **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteRenderBundle **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteRenderPipeline **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteRenderPipeline **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteSampler **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteSampler **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::~ScopedActiveMessageReceiveQueue(a2);
}

WebKit::RemoteXRBinding **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, WebKit::RemoteXRBinding **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRBinding,WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRSubImage,WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm26EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRProjectionLayer,WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>::~ScopedActiveMessageReceiveQueue(a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm27EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS48_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEEEEDcS4A_DpT0_(uint64_t a1, unsigned int **a2)
{
  if (*a2)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRView,WTF::RefPtr<WebKit::RemoteXRView,WTF::RawPtrTraits<WebKit::RemoteXRView>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRView,WTF::RawPtrTraits<WebKit::RemoteXRView>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRView>>>(a2);
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
  else
  {
    *a2 = 0;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteShaderModule::compilationInfo(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0618;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteShaderModule::compilationInfo(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0618;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteShaderModule::compilationInfo(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v4 = *(unsigned int *)(v3 + 20);
  if (!v4)
  {
LABEL_9:
    uint64_t v14 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, &v16);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    return WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v15);
  }
  if (v4 < 0x5555556)
  {
    int v5 = 48 * v4;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * v4));
    LODWORD(v17) = (v5 & 0xFFFFFFF0) / 0x30;
    uint64_t v16 = v6;
    if (*(_DWORD *)(v3 + 20))
    {
      unint64_t v7 = 0;
      uint64_t v8 = (_OWORD *)(v6 + 16);
      do
      {
        uint64_t v9 = *(void *)(*(void *)(v3 + 8) + 8 * v7);
        uint64_t v10 = *(_DWORD **)(v9 + 8);
        if (v10) {
          *v10 += 2;
        }
        char v11 = *(unsigned char *)(v9 + 16);
        *((void *)v8 - 2) = v10;
        long long v12 = *(_OWORD *)(v9 + 24);
        long long v13 = *(_OWORD *)(v9 + 40);
        *((unsigned char *)v8 - 8) = v11;
        *uint64_t v8 = v12;
        v8[1] = v13;
        v8 += 3;
        ++v7;
      }
      while (v7 < *(unsigned int *)(v3 + 20));
      HIDWORD(v17) = v7;
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x35u, *((void *)*a1 + 8));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6expandEPS49_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6rehashEjPS49_(a1, v5, a2);
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6rehashEjPS49_(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (_DWORD *)(v7 + 32);
    do
    {
      *((void *)v10 - 2) = 0;
      *uint64_t v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    long long v12 = 0;
    uint64_t v13 = v5;
    do
    {
      uint64_t v14 = (uint64_t *)(v4 + 24 * v11);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            char v28 = (uint64_t *)(v20 + 24 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          unsigned int v29 = v27;
          uint64_t v30 = v20 + 24 * v27;
          unsigned int v33 = *(_DWORD *)(v30 + 16);
          BOOL v32 = (_DWORD *)(v30 + 16);
          uint64_t v31 = v33;
          if (v33 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v31])(&v44, v20 + 24 * v27 + 8);
          }
          *BOOL v32 = -1;
          uint64_t *v28 = *v14;
          uint64_t v34 = v20 + 24 * v29;
          uint64_t v35 = v4 + 24 * v11;
          uint64_t v36 = v35 + 8;
          *(unsigned char *)(v34 + 8) = 0;
          *BOOL v32 = -1;
          _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrIS7_NS8_12RawPtrTraitsIS7_EENS8_21DefaultRefDerefTraitsIS7_EEEEEENS5_INS6_15RemoteBindGroupENS9_ISG_NSA_ISG_EENSC_ISG_EEEEEENS5_INS6_21RemoteBindGroupLayoutENS9_ISL_NSA_ISL_EENSC_ISL_EEEEEENS5_INS6_12RemoteBufferENS9_ISQ_NSA_ISQ_EENSC_ISQ_EEEEEENS5_INS6_19RemoteCommandBufferENS9_ISV_NSA_ISV_EENSC_ISV_EEEEEENS5_INS6_20RemoteCommandEncoderENS9_IS10_NSA_IS10_EENSC_IS10_EEEEEENS5_INS6_27RemoteCompositorIntegrationENS9_IS15_NSA_IS15_EENSC_IS15_EEEEEENS5_INS6_24RemoteComputePassEncoderENS9_IS1A_NSA_IS1A_EENSC_IS1A_EEEEEENS5_INS6_21RemoteComputePipelineENS9_IS1F_NSA_IS1F_EENSC_IS1F_EEEEEENS5_INS6_12RemoteDeviceENS9_IS1K_NSA_IS1K_EENSC_IS1K_EEEEEENS5_INS6_21RemoteExternalTextureENS9_IS1P_NSA_IS1P_EENSC_IS1P_EEEEEENS5_INS6_20RemotePipelineLayoutENS9_IS1U_NSA_IS1U_EENSC_IS1U_EEEEEENS5_INS6_25RemotePresentationContextENS9_IS1Z_NSA_IS1Z_EENSC_IS1Z_EEEEEENS5_INS6_14RemoteQuerySetENS9_IS24_NSA_IS24_EENSC_IS24_EEEEEENS5_INS6_11RemoteQueueENS9_IS29_NSA_IS29_EENSC_IS29_EEEEEENS5_INS6_25RemoteRenderBundleEncoderENS9_IS2E_NSA_IS2E_EENSC_IS2E_EEEEEENS5_INS6_18RemoteRenderBundleENS9_IS2J_NSA_IS2J_EENSC_IS2J_EEEEEENS5_INS6_23RemoteRenderPassEncoderENS9_IS2O_NSA_IS2O_EENSC_IS2O_EEEEEENS5_INS6_20RemoteRenderPipelineENS9_IS2T_NSA_IS2T_EENSC_IS2T_EEEEEENS5_INS6_13RemoteSamplerENS9_IS2Y_NSA_IS2Y_EENSC_IS2Y_EEEEEENS5_INS6_18RemoteShaderModuleENS9_IS33_NSA_IS33_EENSC_IS33_EEEEEENS5_INS6_13RemoteTextureENS9_IS38_NSA_IS38_EENSC_IS38_EEEEEENS5_INS6_17RemoteTextureViewENS9_IS3D_NSA_IS3D_EENSC_IS3D_EEEEEENS5_INS6_15RemoteXRBindingENS9_IS3I_NSA_IS3I_EENSC_IS3I_EEEEEENS5_INS6_16RemoteXRSubImageENS9_IS3N_NSA_IS3N_EENSC_IS3N_EEEEEENS5_INS6_23RemoteXRProjectionLayerENS9_IS3S_NSA_IS3S_EENSC_IS3S_EEEEEENS5_INS6_12RemoteXRViewENS9_IS3X_NSA_IS3X_EENSC_IS3X_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS42_LNS0_6_TraitE1EEEEEvRS43_OT_(v34 + 8, v35 + 8);
          unsigned int v39 = *(_DWORD *)(v35 + 16);
          BOOL v38 = (_DWORD *)(v35 + 16);
          uint64_t v37 = v39;
          if (v39 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v37])(&v45, v36);
          }
          _DWORD *v38 = -1;
          if (v14 == a3) {
            long long v12 = v28;
          }
        }
        else
        {
          uint64_t v16 = v4 + 24 * v11;
          unsigned int v19 = *(_DWORD *)(v16 + 16);
          uint64_t v18 = (_DWORD *)(v16 + 16);
          uint64_t v17 = v19;
          if (v19 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v17])(&v43, v4 + 24 * v11 + 8);
          }
          *uint64_t v18 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    long long v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrIS7_NS8_12RawPtrTraitsIS7_EENS8_21DefaultRefDerefTraitsIS7_EEEEEENS5_INS6_15RemoteBindGroupENS9_ISG_NSA_ISG_EENSC_ISG_EEEEEENS5_INS6_21RemoteBindGroupLayoutENS9_ISL_NSA_ISL_EENSC_ISL_EEEEEENS5_INS6_12RemoteBufferENS9_ISQ_NSA_ISQ_EENSC_ISQ_EEEEEENS5_INS6_19RemoteCommandBufferENS9_ISV_NSA_ISV_EENSC_ISV_EEEEEENS5_INS6_20RemoteCommandEncoderENS9_IS10_NSA_IS10_EENSC_IS10_EEEEEENS5_INS6_27RemoteCompositorIntegrationENS9_IS15_NSA_IS15_EENSC_IS15_EEEEEENS5_INS6_24RemoteComputePassEncoderENS9_IS1A_NSA_IS1A_EENSC_IS1A_EEEEEENS5_INS6_21RemoteComputePipelineENS9_IS1F_NSA_IS1F_EENSC_IS1F_EEEEEENS5_INS6_12RemoteDeviceENS9_IS1K_NSA_IS1K_EENSC_IS1K_EEEEEENS5_INS6_21RemoteExternalTextureENS9_IS1P_NSA_IS1P_EENSC_IS1P_EEEEEENS5_INS6_20RemotePipelineLayoutENS9_IS1U_NSA_IS1U_EENSC_IS1U_EEEEEENS5_INS6_25RemotePresentationContextENS9_IS1Z_NSA_IS1Z_EENSC_IS1Z_EEEEEENS5_INS6_14RemoteQuerySetENS9_IS24_NSA_IS24_EENSC_IS24_EEEEEENS5_INS6_11RemoteQueueENS9_IS29_NSA_IS29_EENSC_IS29_EEEEEENS5_INS6_25RemoteRenderBundleEncoderENS9_IS2E_NSA_IS2E_EENSC_IS2E_EEEEEENS5_INS6_18RemoteRenderBundleENS9_IS2J_NSA_IS2J_EENSC_IS2J_EEEEEENS5_INS6_23RemoteRenderPassEncoderENS9_IS2O_NSA_IS2O_EENSC_IS2O_EEEEEENS5_INS6_20RemoteRenderPipelineENS9_IS2T_NSA_IS2T_EENSC_IS2T_EEEEEENS5_INS6_13RemoteSamplerENS9_IS2Y_NSA_IS2Y_EENSC_IS2Y_EEEEEENS5_INS6_18RemoteShaderModuleENS9_IS33_NSA_IS33_EENSC_IS33_EEEEEENS5_INS6_13RemoteTextureENS9_IS38_NSA_IS38_EENSC_IS38_EEEEEENS5_INS6_17RemoteTextureViewENS9_IS3D_NSA_IS3D_EENSC_IS3D_EEEEEENS5_INS6_15RemoteXRBindingENS9_IS3I_NSA_IS3I_EENSC_IS3I_EEEEEENS5_INS6_16RemoteXRSubImageENS9_IS3N_NSA_IS3N_EENSC_IS3N_EEEEEENS5_INS6_23RemoteXRProjectionLayerENS9_IS3S_NSA_IS3S_EENSC_IS3S_EEEEEENS5_INS6_12RemoteXRViewENS9_IS3X_NSA_IS3X_EENSC_IS3X_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS42_LNS0_6_TraitE1EEEEEvRS43_OT_(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C0630[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24ELm24EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25ELm25EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm26ELm26EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm27ELm27EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS47_LNS0_6_TraitE1EEEEEvRS48_OT_EUlRS4E_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4M_EEEDcS4E_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 1)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteBindGroup **a2, WebKit::RemoteBindGroup **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 2)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteBindGroupLayout **a2, WebKit::RemoteBindGroupLayout **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 3)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteBuffer **a2, WebKit::RemoteBuffer **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 4)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteCommandBuffer **a2, WebKit::RemoteCommandBuffer **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 5)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 6)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteCompositorIntegration **a2, WebKit::RemoteCompositorIntegration **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 7)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 7;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteComputePassEncoder **a2, WebKit::RemoteComputePassEncoder **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 8)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 8;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteComputePipeline **a2, WebKit::RemoteComputePipeline **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 9)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 9;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 10)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 10;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteExternalTexture **a2, WebKit::RemoteExternalTexture **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 11)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 11;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemotePipelineLayout **a2, WebKit::RemotePipelineLayout **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 12)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 12;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 13)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 13;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteQuerySet **a2, WebKit::RemoteQuerySet **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 14)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 14;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 15)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 15;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteRenderBundleEncoder **a2, WebKit::RemoteRenderBundleEncoder **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 16)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 16;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteRenderBundle **a2, WebKit::RemoteRenderBundle **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 17)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 17;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 18)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 18;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteRenderPipeline **a2, WebKit::RemoteRenderPipeline **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 19)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 19;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteSampler **a2, WebKit::RemoteSampler **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 20)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 20;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 21)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 21;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 22)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 22;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 23)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 23;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24ELm24EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, WebKit::RemoteXRBinding **a2, WebKit::RemoteXRBinding **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 24)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 24;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRBinding,WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = (unsigned int *)*a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25ELm25EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 25)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 25;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRSubImage,WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm26ELm26EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 26)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 26;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRProjectionLayer,WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm27ELm27EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEENSA_INSB_15RemoteXRBindingENSE_IS3N_NSF_IS3N_EENSH_IS3N_EEEEEENSA_INSB_16RemoteXRSubImageENSE_IS3S_NSF_IS3S_EENSH_IS3S_EEEEEENSA_INSB_23RemoteXRProjectionLayerENSE_IS3X_NSF_IS3X_EENSH_IS3X_EEEEEENSA_INSB_12RemoteXRViewENSE_IS42_NSF_IS42_EENSH_IS42_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS47_LNS0_6_TraitE1EEEEEvOT_EUlRS4D_OT0_E_JRNS0_6__baseILS4B_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_S3R_S3W_S41_S46_EEEOS4L_EEEDcS4D_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_12;
  }
  if (v5 != 27)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_12:
    *(void *)uint64_t v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 27;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2) {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRView,WTF::RefPtr<WebKit::RemoteXRView,WTF::RawPtrTraits<WebKit::RemoteXRView>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRView,WTF::RawPtrTraits<WebKit::RemoteXRView>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRView>>>(a2);
    }
    char v7 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v7;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v8();
    }
  }
  return result;
}

WebKit::RemoteBindGroup *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>(WebKit::RemoteBindGroup **a1)
{
  WebKit::RemoteBindGroup::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteBindGroup *)v3();
  }
  return result;
}

WebKit::RemoteBindGroupLayout *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>(WebKit::RemoteBindGroupLayout **a1)
{
  WebKit::RemoteBindGroupLayout::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteBindGroupLayout *)v3();
  }
  return result;
}

WebKit::RemoteBuffer *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>(WebKit::RemoteBuffer **a1)
{
  WebKit::RemoteBuffer::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteBuffer *)v3();
  }
  return result;
}

WebKit::RemoteCommandBuffer *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>(WebKit::RemoteCommandBuffer **a1)
{
  WebKit::RemoteCommandBuffer::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteCommandBuffer *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x48u, *((void *)*a1 + 5));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

WebKit::RemoteCompositorIntegration *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>(WebKit::RemoteCompositorIntegration **a1)
{
  WebKit::RemoteCompositorIntegration::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteCompositorIntegration *)v3();
  }
  return result;
}

WebKit::RemoteComputePassEncoder *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>(WebKit::RemoteComputePassEncoder **a1)
{
  WebKit::RemoteComputePassEncoder::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteComputePassEncoder *)v3();
  }
  return result;
}

WebKit::RemoteComputePipeline *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>(WebKit::RemoteComputePipeline **a1)
{
  WebKit::RemoteComputePipeline::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteComputePipeline *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x4Cu, *((void *)*a1 + 5));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

WebKit::RemoteExternalTexture *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>(WebKit::RemoteExternalTexture **a1)
{
  WebKit::RemoteExternalTexture::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteExternalTexture *)v3();
  }
  return result;
}

WebKit::RemotePipelineLayout *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>(WebKit::RemotePipelineLayout **a1)
{
  WebKit::RemotePipelineLayout::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemotePipelineLayout *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x6Cu, *((void *)*a1 + 5));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

WebKit::RemoteQuerySet *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>(WebKit::RemoteQuerySet **a1)
{
  WebKit::RemoteQuerySet::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteQuerySet *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x6Eu, *((void *)*a1 + 6));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

WebKit::RemoteRenderBundleEncoder *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>(WebKit::RemoteRenderBundleEncoder **a1)
{
  WebKit::RemoteRenderBundleEncoder::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteRenderBundleEncoder *)v3();
  }
  return result;
}

WebKit::RemoteRenderBundle *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>(WebKit::RemoteRenderBundle **a1)
{
  WebKit::RemoteRenderBundle::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteRenderBundle *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x73u, *((void *)*a1 + 6));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

WebKit::RemoteRenderPipeline *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>(WebKit::RemoteRenderPipeline **a1)
{
  WebKit::RemoteRenderPipeline::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteRenderPipeline *)v3();
  }
  return result;
}

WebKit::RemoteSampler *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>(WebKit::RemoteSampler **a1)
{
  WebKit::RemoteSampler::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteSampler *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x7Bu, *((void *)*a1 + 6));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>(unsigned int **a1)
{
  IPC::StreamServerConnection::stopReceivingMessages(*((void *)*a1 + 4), 0x7Fu, *((void *)*a1 + 5));
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>(unsigned int **a1)
{
  uint64_t v2 = *a1;
  char v3 = (atomic_uint *)*((void *)*a1 + 4);
  atomic_fetch_add(v3 + 2, 1u);
  IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v3, 0x80u, *((void *)v2 + 6));
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

WebKit::RemoteXRBinding *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRBinding,WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>(WebKit::RemoteXRBinding **a1)
{
  WebKit::RemoteXRBinding::stopListeningForIPC(*a1);
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result + 2);
    char v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (WebKit::RemoteXRBinding *)v3();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRSubImage,WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>(unsigned int **a1)
{
  uint64_t v2 = *a1;
  char v3 = (atomic_uint *)*((void *)*a1 + 4);
  atomic_fetch_add(v3 + 2, 1u);
  IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v3, 0x88u, *((void *)v2 + 5));
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRProjectionLayer,WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>(unsigned int **a1)
{
  uint64_t v2 = *a1;
  char v3 = (atomic_uint *)*((void *)*a1 + 4);
  atomic_fetch_add(v3 + 2, 1u);
  IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v3, 0x87u, *((void *)v2 + 5));
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRView,WTF::RefPtr<WebKit::RemoteXRView,WTF::RawPtrTraits<WebKit::RemoteXRView>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRView,WTF::RawPtrTraits<WebKit::RemoteXRView>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRView>>>(unsigned int **a1)
{
  uint64_t v2 = *a1;
  char v3 = (atomic_uint *)*((void *)*a1 + 4);
  atomic_fetch_add(v3 + 2, 1u);
  IPC::StreamServerConnection::stopReceivingMessages((uint64_t)v3, 0x89u, *((void *)v2 + 5));
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3 + 2);
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

WebKit::RemoteBindGroup **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteBindGroup **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteBindGroup *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteBindGroupLayout **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteBindGroupLayout **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteBindGroupLayout *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteBuffer **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteBuffer **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteBuffer *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteCommandBuffer **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteCommandBuffer **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteCommandBuffer *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteCompositorIntegration **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteCompositorIntegration **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteCompositorIntegration *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteComputePassEncoder **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteComputePassEncoder **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteComputePassEncoder *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteComputePipeline **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteComputePipeline **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteComputePipeline *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteExternalTexture **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteExternalTexture **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteExternalTexture *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemotePipelineLayout **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemotePipelineLayout **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemotePipelineLayout *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteQuerySet **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteQuerySet **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteQuerySet *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteRenderBundleEncoder **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteRenderBundleEncoder **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteRenderBundleEncoder *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteRenderBundle **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteRenderBundle **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteRenderBundle *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteRenderPipeline **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteRenderPipeline **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteRenderPipeline *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteSampler **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteSampler **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteSampler *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteXRBinding **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRBinding,WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteXRBinding **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRBinding,WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRBinding,WTF::RawPtrTraits<WebKit::RemoteXRBinding>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRBinding>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(WebKit::RemoteXRBinding *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRSubImage,WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRSubImage,WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRSubImage,WTF::RawPtrTraits<WebKit::RemoteXRSubImage>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRSubImage>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRProjectionLayer,WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteXRProjectionLayer,WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteXRProjectionLayer,WTF::RawPtrTraits<WebKit::RemoteXRProjectionLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteXRProjectionLayer>>>(a1);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6removeEPS49_(uint64_t *result, uint64_t a2)
{
  char v3 = result;
  *(void *)a2 = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v4 != -1) {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEENS8_INS9_15RemoteXRBindingENSC_IS3L_NSD_IS3L_EENSF_IS3L_EEEEEENS8_INS9_16RemoteXRSubImageENSC_IS3Q_NSD_IS3Q_EENSF_IS3Q_EEEEEENS8_INS9_23RemoteXRProjectionLayerENSC_IS3V_NSD_IS3V_EENSF_IS3V_EEEEEENS8_INS9_12RemoteXRViewENSC_IS40_NSD_IS40_EENSF_IS40_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS47_EEEDcOS48_DpOT0____fmatrix[v4])(&v11, a2 + 8);
  }
  int v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v6 = *v3;
  if (*v3) {
    int v5 = *(_DWORD *)(v6 - 12) - 1;
  }
  *(_DWORD *)(v6 - 12) = v5;
  uint64_t v7 = *v3;
  if (*v3)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9) {
      return _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS_12KeyValuePairIS7_NSt3__17variantIJNS9_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISE_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEENSD_INS2_15RemoteBindGroupENSF_ISM_NSG_ISM_EENSI_ISM_EEEEEENSD_INS2_21RemoteBindGroupLayoutENSF_ISR_NSG_ISR_EENSI_ISR_EEEEEENSD_INS2_12RemoteBufferENSF_ISW_NSG_ISW_EENSI_ISW_EEEEEENSD_INS2_19RemoteCommandBufferENSF_IS11_NSG_IS11_EENSI_IS11_EEEEEENSD_INS2_20RemoteCommandEncoderENSF_IS16_NSG_IS16_EENSI_IS16_EEEEEENSD_INS2_27RemoteCompositorIntegrationENSF_IS1B_NSG_IS1B_EENSI_IS1B_EEEEEENSD_INS2_24RemoteComputePassEncoderENSF_IS1G_NSG_IS1G_EENSI_IS1G_EEEEEENSD_INS2_21RemoteComputePipelineENSF_IS1L_NSG_IS1L_EENSI_IS1L_EEEEEENSD_INS2_12RemoteDeviceENSF_IS1Q_NSG_IS1Q_EENSI_IS1Q_EEEEEENSD_INS2_21RemoteExternalTextureENSF_IS1V_NSG_IS1V_EENSI_IS1V_EEEEEENSD_INS2_20RemotePipelineLayoutENSF_IS20_NSG_IS20_EENSI_IS20_EEEEEENSD_INS2_25RemotePresentationContextENSF_IS25_NSG_IS25_EENSI_IS25_EEEEEENSD_INS2_14RemoteQuerySetENSF_IS2A_NSG_IS2A_EENSI_IS2A_EEEEEENSD_INS2_11RemoteQueueENSF_IS2F_NSG_IS2F_EENSI_IS2F_EEEEEENSD_INS2_25RemoteRenderBundleEncoderENSF_IS2K_NSG_IS2K_EENSI_IS2K_EEEEEENSD_INS2_18RemoteRenderBundleENSF_IS2P_NSG_IS2P_EENSI_IS2P_EEEEEENSD_INS2_23RemoteRenderPassEncoderENSF_IS2U_NSG_IS2U_EENSI_IS2U_EEEEEENSD_INS2_20RemoteRenderPipelineENSF_IS2Z_NSG_IS2Z_EENSI_IS2Z_EEEEEENSD_INS2_13RemoteSamplerENSF_IS34_NSG_IS34_EENSI_IS34_EEEEEENSD_INS2_18RemoteShaderModuleENSF_IS39_NSG_IS39_EENSI_IS39_EEEEEENSD_INS2_13RemoteTextureENSF_IS3E_NSG_IS3E_EENSI_IS3E_EEEEEENSD_INS2_17RemoteTextureViewENSF_IS3J_NSG_IS3J_EENSI_IS3J_EEEEEENSD_INS2_15RemoteXRBindingENSF_IS3O_NSG_IS3O_EENSI_IS3O_EEEEEENSD_INS2_16RemoteXRSubImageENSF_IS3T_NSG_IS3T_EENSI_IS3T_EEEEEENSD_INS2_23RemoteXRProjectionLayerENSF_IS3Y_NSG_IS3Y_EENSI_IS3Y_EEEEEENSD_INS2_12RemoteXRViewENSF_IS43_NSG_IS43_EENSI_IS43_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS49_EENS_11DefaultHashIS7_EENS_7HashMapIS7_S48_S4D_NS_10HashTraitsIS7_EENS4F_IS48_EENS_15HashTableTraitsEE18KeyValuePairTraitsES4G_E6rehashEjPS49_(v3, v9 >> 1, 0);
    }
  }
  return result;
}

WebKit::NativeWebTouchEvent *WebKit::NativeWebTouchEvent::NativeWebTouchEvent(WebKit::NativeWebTouchEvent *this, const WKTouchEvent *a2, uint64_t a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  unsigned int type = a2->type;
  if (type >= 4) {
    char v6 = 11;
  }
  else {
    char v6 = type + 11;
  }
  double timestamp = a2->timestamp;
  int v71 = 0;
  char v72 = v6;
  char v73 = (a3 >> 12) & 0x10 | (a3 >> 17) & 0xF;
  double v74 = timestamp;
  WTF::UUID::UUID((WTF::UUID *)&v75);
  __int16 v69 = 0;
  uint64_t v70 = 0;
  m_std::string::size_type size = a2->touchPoints.m_size;
  if (m_size)
  {
    if (m_size >= 0x38E38E4)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
    unsigned int v9 = 72 * m_size;
    uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)(72 * m_size));
    LODWORD(v70) = v9 / 0x48;
    __int16 v69 = v10;
    if (a2->touchPoints.m_size)
    {
      unint64_t v11 = 0;
      long long v12 = (char *)v10 + 32;
      uint64_t v13 = 80;
      do
      {
        uint64_t v14 = (char *)a2->touchPoints.m_buffer + v13;
        int v15 = *((_DWORD *)v14 - 12);
        v85[0] = *((CGPoint *)v14 - 4);
        WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v76, v85);
        uint64_t v16 = *(void *)&v76[0];
        unint64_t v17 = *((void *)v14 - 5);
        if (v17 >= 5) {
          char v18 = 3;
        }
        else {
          char v18 = 0x400030201uLL >> (8 * v17);
        }
        uint64_t v19 = *((void *)v14 - 4);
        uint64_t v20 = *((void *)v14 - 1);
        BOOL v21 = *v14 == 1;
        *((_DWORD *)v12 - 8) = v15;
        *(v12 - 20) = v18;
        long long v22 = *(_OWORD *)(v14 - 24);
        *(void *)(v12 - 28) = v16;
        *((void *)v12 - 2) = v19;
        *((void *)v12 - nw_tcp_options_set_no_delay(options, 1) = v19;
        *(void *)long long v12 = 0;
        *(_OWORD *)(v12 + 8) = v22;
        *((void *)v12 + 3) = v20;
        v12[32] = v21;
        ++v11;
        v12 += 72;
        v13 += 88;
      }
      while (v11 < a2->touchPoints.m_size);
      HIDWORD(v70) = v11;
    }
  }
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v23 = a2->coalescedEvents.m_size;
  if (v23)
  {
    if (v23 >= 0x2492493)
    {
      __break(0xC471u);
      JUMPOUT(0x198AEFA6CLL);
    }
    LODWORD(v68) = (613566757 * (unint64_t)((7 * v23) & 0xFFFFFFF)) >> 32;
    uint64_t v67 = WTF::fastMalloc((WTF *)(112 * v23));
    if (a2->coalescedEvents.m_size)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        WebKit::NativeWebTouchEvent::NativeWebTouchEvent((WebKit::NativeWebTouchEvent *)v85, &a2->coalescedEvents.m_buffer[v24], a3);
        LODWORD(v76[0]) = 0;
        *(CGPoint *)((char *)v76 + 4) = *(CGPoint *)((char *)v85 + 4);
        v76[1] = v85[1];
        int v26 = v86;
        int v86 = 0;
        uint64_t v77 = v26;
        uint64_t v27 = v87;
        uint64_t v87 = 0;
        uint64_t v78 = v27;
        uint64_t v28 = v88;
        uint64_t v88 = 0;
        uint64_t v79 = v28;
        uint64_t v29 = v89;
        uint64_t v89 = 0;
        uint64_t v80 = v29;
        uint64_t v30 = v90;
        uint64_t v90 = 0;
        uint64_t v81 = v30;
        uint64_t v31 = v91;
        uint64_t v91 = 0;
        uint64_t v82 = v31;
        int v84 = v93;
        long long v83 = v92;
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v32);
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v33);
        uint64_t v35 = v86;
        if (v86)
        {
          int v86 = 0;
          LODWORD(v87) = 0;
          WTF::fastFree(v35, v34);
        }
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v67, (uint64_t)v76);
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v36);
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v37);
        unsigned int v39 = v77;
        if (v77)
        {
          uint64_t v77 = 0;
          LODWORD(v78) = 0;
          WTF::fastFree(v39, v38);
        }
        ++v25;
        ++v24;
      }
      while (v25 < a2->coalescedEvents.m_size);
    }
  }
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v40 = a2->predictedEvents.m_size;
  if (v40)
  {
    if (v40 < 0x2492493)
    {
      LODWORD(v66) = (613566757 * (unint64_t)((7 * v40) & 0xFFFFFFF)) >> 32;
      uint64_t v65 = WTF::fastMalloc((WTF *)(112 * v40));
      if (a2->predictedEvents.m_size)
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          WebKit::NativeWebTouchEvent::NativeWebTouchEvent((WebKit::NativeWebTouchEvent *)v85, &a2->predictedEvents.m_buffer[v41], a3);
          LODWORD(v76[0]) = 0;
          *(CGPoint *)((char *)v76 + 4) = *(CGPoint *)((char *)v85 + 4);
          v76[1] = v85[1];
          char v43 = v86;
          int v86 = 0;
          uint64_t v77 = v43;
          uint64_t v44 = v87;
          uint64_t v87 = 0;
          uint64_t v78 = v44;
          uint64_t v45 = v88;
          uint64_t v88 = 0;
          uint64_t v79 = v45;
          uint64_t v46 = v89;
          uint64_t v89 = 0;
          uint64_t v80 = v46;
          uint64_t v47 = v90;
          uint64_t v90 = 0;
          uint64_t v81 = v47;
          uint64_t v48 = v91;
          uint64_t v91 = 0;
          uint64_t v82 = v48;
          int v84 = v93;
          long long v83 = v92;
          WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v49);
          WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v50);
          uint64_t v52 = v86;
          if (v86)
          {
            int v86 = 0;
            LODWORD(v87) = 0;
            WTF::fastFree(v52, v51);
          }
          WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v65, (uint64_t)v76);
          WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v53);
          WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v54);
          CFTypeRef v56 = v77;
          if (v77)
          {
            uint64_t v77 = 0;
            LODWORD(v78) = 0;
            WTF::fastFree(v56, v55);
          }
          ++v42;
          ++v41;
        }
        while (v42 < a2->predictedEvents.m_size);
      }
      goto LABEL_31;
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x198AEFA64);
  }
LABEL_31:
  v85[0] = a2->locationInDocumentCoordinates;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v76, v85);
  float scale = a2->scale;
  float rotation = a2->rotation;
  WebKit::WebTouchEvent::WebTouchEvent((uint64_t)this, (uint64_t)&v71, (uint64_t *)&v69, &v67, &v65, *(uint64_t *)&v76[0], a2->isPotentialTap, a2->inJavaScriptGesture, scale, rotation, 1);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v59);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v60);
  uint64_t v62 = v69;
  if (v69)
  {
    __int16 v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree(v62, v61);
  }
  return this;
}

void sub_198AEFA78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, WTF *a19, int a20)
{
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, v21);
  uint64_t v23 = a19;
  if (a19)
  {
    a19 = 0;
    a20 = 0;
    WTF::fastFree(v23, v22);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebIOSEventFactory::createWebKeyboardEvent@<X0>(WebKit::WebIOSEventFactory *this@<X0>, WebEvent *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = (char)a2;
  if ([(WebKit::WebIOSEventFactory *)this type] == 5) {
    char v6 = 8;
  }
  else {
    char v6 = 7;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  if (([(WebKit::WebIOSEventFactory *)this keyboardFlags] & 0x20) == 0)
  {
    MEMORY[0x19972EAD0](v44, [(WebKit::WebIOSEventFactory *)this characters]);
    unsigned int v8 = v44[0];
    v44[0] = 0;
    unsigned int v9 = v50;
    uint64_t v50 = v8;
    if (!v9) {
      goto LABEL_10;
    }
    int v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2) {
      goto LABEL_9;
    }
    WTF::StringImpl::destroy(v9, v7);
    unsigned int v9 = v44[0];
    v44[0] = 0;
    if (!v9) {
      goto LABEL_10;
    }
    int v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v11);
    }
    else {
LABEL_9:
    }
      *(_DWORD *)unsigned int v9 = v10;
LABEL_10:
    MEMORY[0x19972EAD0](v44, [(WebKit::WebIOSEventFactory *)this charactersIgnoringModifiers]);
    uint64_t v13 = v44[0];
    v44[0] = 0;
    uint64_t v14 = v49;
    uint64_t v49 = v13;
    if (v14)
    {
      int v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_14:
        *(_DWORD *)uint64_t v14 = v15;
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v14, v12);
      uint64_t v14 = v44[0];
      v44[0] = 0;
      if (v14)
      {
        int v15 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v16);
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
LABEL_15:
    char v18 = [(WebKit::WebIOSEventFactory *)this isKeyRepeating];
    goto LABEL_17;
  }
  WTF::String::operator=((uint64_t *)&v50, MEMORY[0x1E4F30980]);
  WTF::String::operator=((uint64_t *)&v49, MEMORY[0x1E4F30980]);
  char v18 = 0;
LABEL_17:
  WebCore::keyForKeyEvent((uint64_t *)&v48, this, v17);
  WebCore::codeForKeyEvent((uint64_t *)&v47, this, v19);
  WebCore::keyIdentifierForKeyEvent((uint64_t *)&v46, this, v20);
  int v22 = WebCore::windowsKeyCodeForKeyEvent(this, v21);
  int v23 = [(WebKit::WebIOSEventFactory *)this keyCode];
  unsigned int v24 = [(WebKit::WebIOSEventFactory *)this modifierFlags];
  unsigned int v25 = v24;
  char v26 = (v24 & 0x220000) != 0;
  if ((v24 & 0x900000) != 0) {
    v26 |= 2u;
  }
  if ((v24 & 0x480000) != 0) {
    v26 |= 4u;
  }
  if ((v24 & 0x1010000) != 0) {
    char v27 = v26 | 8;
  }
  else {
    char v27 = v26;
  }
  [(WebKit::WebIOSEventFactory *)this timestamp];
  uint64_t v29 = v28;
  if (v22 == 13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v31 = v50;
    uint64_t v50 = v44[0];
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v30);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)&v49, &v50);
  }
  if (MEMORY[0x19972E990](v50, "\x7F", 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v33 = v50;
    uint64_t v50 = v44[0];
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v32);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  if (MEMORY[0x19972E990](v49, "\x7F", 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v35 = v49;
    uint64_t v49 = v44[0];
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v34);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  if (v22 == 9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v37 = v50;
    uint64_t v50 = v44[0];
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)&v49, &v50);
  }
  LODWORD(v44[0]) = 0;
  BYTE4(v44[0]) = v6;
  BYTE5(v44[0]) = v27 | (v25 >> 14) & 0x10;
  v44[1] = v29;
  WTF::UUID::UUID((WTF::UUID *)&v45);
  WebKit::WebKeyboardEvent::WebKeyboardEvent(a3, (uint64_t)v44, (_DWORD **)&v50, (_DWORD **)&v49, (_DWORD **)&v48, (_DWORD **)&v47, (_DWORD **)&v46, v22, v23, 0, v3, v18, 0, 0);
  unsigned int v39 = v46;
  uint64_t v46 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v38);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t v40 = v47;
  uint64_t v47 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v38);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = v48;
  uint64_t v48 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v38);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  unint64_t v42 = v49;
  uint64_t v49 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v38);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t result = v50;
  uint64_t v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198AEFF30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

float WebKit::WebIOSEventFactory::translationInView(void *a1, uint64_t a2)
{
  [a1 translationInView:a2];
  return v2;
}

double WebKit::WebIOSEventFactory::createWebWheelEvent@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  [a1 locationInView:a2];
  v32.CGFloat x = v8;
  v32.CGFloat y = v9;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v31, &v32);
  float v10 = roundf(v31[0]);
  uint64_t v11 = 0x80000000;
  if (v10 > -2147500000.0) {
    uint64_t v11 = (int)v10;
  }
  if (v10 < 2147500000.0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0x7FFFFFFFLL;
  }
  float v13 = roundf(v31[1]);
  unint64_t v14 = 0x8000000000000000;
  if (v13 > -2147500000.0) {
    unint64_t v14 = (unint64_t)(int)v13 << 32;
  }
  if (v13 < 2147500000.0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0x7FFFFFFF00000000;
  }
  [a1 translationInView:a2];
  double v17 = v16;
  double v19 = v18;
  [a1 timestamp];
  v32.CGFloat x = v20;
  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v32);
  uint64_t v22 = v21;
  WTF::UUID::UUID((WTF::UUID *)&v32);
  CGFloat x = v32.x;
  CGFloat y = v32.y;
  unint64_t v25 = [a1 phase];
  if (v25 > 3) {
    int v26 = 0;
  }
  else {
    int v26 = dword_1994F6190[v25];
  }
  float v27 = v19;
  *(_DWORD *)a4 = 0;
  float v28 = v17;
  *(_WORD *)(a4 + 4) = 6;
  uint64_t v29 = v15 | v12;
  *(void *)(a4 + 8) = v22;
  if ((a3 & 0xFF00000000) != 0) {
    int v26 = a3;
  }
  *(CGFloat *)(a4 + 16) = x;
  *(CGFloat *)(a4 + 24) = y;
  *(void *)(a4 + 32) = v29;
  *(void *)(a4 + 40) = v29;
  *(float *)(a4 + 48) = v28;
  *(float *)(a4 + 52) = v27;
  *(float *)(a4 + 56) = v28 * 0.025;
  *(float *)(a4 + 60) = v27 * 0.025;
  *(_DWORD *)(a4 + 64) = 1;
  *(_DWORD *)(a4 + 68) = v26;
  *(_DWORD *)(a4 + 72) = 0;
  *(_WORD *)(a4 + 76) = 0;
  *(unsigned char *)(a4 + 78) = 1;
  *(void *)(a4 + 80) = v22;
  *(void *)(a4 + 88) = 0;
  *(void *)&double result = 0x100000000;
  *(void *)(a4 + 96) = 0x100000000;
  *(float *)(a4 + 104) = v28;
  *(float *)(a4 + 108) = v27;
  return result;
}

__n128 WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1 + 112 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)uint64_t v2 = 0;
  long long v3 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 4) = v3;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(v2 + 32) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(v2 + 40) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(v2 + 44) = v4;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(v2 + 48) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(v2 + 56) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(v2 + 60) = v5;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v2 + 64) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(v2 + 72) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(v2 + 76) = v6;
  __n128 result = *(__n128 *)(a2 + 80);
  *(_DWORD *)(v2 + 96) = *(_DWORD *)(a2 + 96);
  *(__n128 *)(v2 + 80) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WebKit::RemoteAudioHardwareListenerProxy *WebKit::RemoteAudioHardwareListenerProxy::RemoteAudioHardwareListenerProxy(WebKit::RemoteAudioHardwareListenerProxy *a1, uint64_t a2, void *a3)
{
  *(void *)a1 = &unk_1EE9C0800;
  uint64_t v6 = *(atomic_uchar **)(a2 + 16);
  if (v6) {
    uint64_t v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  }
  *((void *)a1 + nw_tcp_options_set_no_delay(options, 1) = v6;
  *((void *)a1 + 2) = a2;
  *((void *)a1 + 3) = *a3;
  WebCore::AudioHardwareListener::create();
  WebKit::RemoteAudioHardwareListenerProxy::audioOutputDeviceChanged(a1);
  return a1;
}

atomic_uchar *WebKit::RemoteAudioHardwareListenerProxy::audioOutputDeviceChanged(WebKit::RemoteAudioHardwareListenerProxy *this)
{
  __n128 result = (atomic_uchar *)*((void *)this + 1);
  if (result)
  {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 2), &v7);
    if (v7)
    {
      uint64_t v3 = *(void *)(v7 + 56);
      uint64_t v4 = *((void *)this + 3);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)(*((void *)this + 4) + 24);
      __n128 result = (atomic_uchar *)IPC::Connection::send<Messages::RemoteAudioHardwareListener::AudioOutputDeviceChanged>(v3, v6, v4, 0, 0);
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 16));
      }
    }
  }
  return result;
}

void WebKit::RemoteAudioHardwareListenerProxy::~RemoteAudioHardwareListenerProxy(WebKit::RemoteAudioHardwareListenerProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioHardwareListenerProxy::~RemoteAudioHardwareListenerProxy(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteAudioHardwareListenerProxy::audioHardwareDidBecomeActive(WebKit::RemoteAudioHardwareListenerProxy *this)
{
  __n128 result = (atomic_uchar *)*((void *)this + 1);
  if (result)
  {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 2), &v10);
    if (v10)
    {
      uint64_t v3 = *(void *)(v10 + 56);
      uint64_t v4 = *((void *)this + 3);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 705;
      *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v11 = v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
      __n128 result = (atomic_uchar *)v11;
      uint64_t v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        __n128 result = (atomic_uchar *)WTF::fastFree(v8, v9);
      }
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteAudioHardwareListenerProxy::audioHardwareDidBecomeInactive(WebKit::RemoteAudioHardwareListenerProxy *this)
{
  __n128 result = (atomic_uchar *)*((void *)this + 1);
  if (result)
  {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 2), &v10);
    if (v10)
    {
      uint64_t v3 = *(void *)(v10 + 56);
      uint64_t v4 = *((void *)this + 3);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 706;
      *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v11 = v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
      __n128 result = (atomic_uchar *)v11;
      uint64_t v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        __n128 result = (atomic_uchar *)WTF::fastFree(v8, v9);
      }
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
      }
    }
  }
  return result;
}

WebKit::RemoteAudioSessionProxy *WebKit::RemoteAudioSessionProxy::RemoteAudioSessionProxy(WebKit::RemoteAudioSessionProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *(void *)this = &unk_1EE9C0838;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  uint64_t v4 = (atomic_uchar *)*((void *)a2 + 2);
  if (v4) {
    uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  *((void *)this + 2) = v4;
  *((void *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
  return this;
}

void WebKit::RemoteAudioSessionProxy::~RemoteAudioSessionProxy(WebKit::RemoteAudioSessionProxy *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C0838;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioSessionProxy::~RemoteAudioSessionProxy(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteAudioSessionProxy::configuration@<X0>(WebKit::RemoteAudioSessionProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager(this);
  uint64_t v5 = WebCore::AudioSession::sharedSession(v4);
  (*(void (**)(uint64_t))(*(void *)v5 + 64))(v5);
  *(float *)(a2 + 8) = (*(float (**)(uint64_t))(*(void *)v5 + 72))(v5);
  *(void *)(a2 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
  *(void *)(a2 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5);
  *(void *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  *(void *)(a2 + 40) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5);
  *(unsigned char *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 49) = *((unsigned char *)this + 56);
  uint64_t v7 = (_DWORD *)*((void *)this + 5);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(a2 + 56) = v7;
  *(unsigned char *)(a2 + 64) = *((unsigned char *)this + 35);
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxy::audioSessionManager(WebKit::RemoteAudioSessionProxy *this)
{
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 2), *((void *)this + 3), &v4);
  uint64_t v1 = WebKit::GPUProcess::audioSessionManager(*(WebKit::GPUProcess **)(v4 + 80));
  uint64_t v2 = v4;
  uint64_t v4 = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 16));
  }
  return v1;
}

WebKit::RemoteAudioSessionProxy *WebKit::RemoteAudioSessionProxy::setCategory(WebKit::RemoteAudioSessionProxy *result, int a2, int a3, int a4)
{
  if (*((unsigned __int8 *)result + 32) != a2
    || *((unsigned __int8 *)result + 33) != a3
    || *((unsigned __int8 *)result + 34) != a4
    || *((unsigned char *)result + 58))
  {
    *((unsigned char *)result + 32) = a2;
    *((unsigned char *)result + 33) = a3;
    *((unsigned char *)result + 34) = a4;
    *((unsigned char *)result + 58) = 0;
    uint64_t v4 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager(result);
    return (WebKit::RemoteAudioSessionProxy *)WebKit::RemoteAudioSessionProxyManager::updateCategory(v4);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::updateCategory(WebKit::RemoteAudioSessionProxyManager *this)
{
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v68 = 0;
  uint64_t v2 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v66, (void **)this + 5);
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  int v61 = v2;
  uint64_t v62 = v5;
  uint64_t v63 = v5;
  uint64_t v64 = v5;
  uint64_t v65 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v61);
  uint64_t v6 = v67;
  uint64_t v7 = v62;
  if (v67 == v62)
  {
    uint64_t v51 = 0;
    goto LABEL_68;
  }
  do
  {
    CGFloat v8 = *(unsigned __int8 **)(*(void *)v6 + 8);
    int v9 = v8[32];
    uint64_t v10 = v70;
    if (v70
      || (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v70, 0), (uint64_t v10 = v70) != 0))
    {
      int v11 = *(_DWORD *)(v10 - 8);
    }
    else
    {
      int v11 = 0;
    }
    unsigned int v12 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
    unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    unsigned int v14 = v11 & (v13 ^ HIWORD(v13));
    uint64_t v15 = (void *)(v10 + 8 * v14);
    int v16 = *(unsigned __int8 *)v15;
    if (v16 == 255)
    {
LABEL_16:
      *(unsigned char *)uint64_t v15 = v9;
      *((_DWORD *)v15 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v19 = v70;
      if (v70) {
        int v20 = *(_DWORD *)(v70 - 12) + 1;
      }
      else {
        int v20 = 1;
      }
      *(_DWORD *)(v70 - 12) = v20;
      uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
      unint64_t v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21) {
          goto LABEL_22;
        }
LABEL_21:
        uint64_t v15 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v70, v15);
        goto LABEL_22;
      }
      if (3 * v22 <= 4 * v21) {
        goto LABEL_21;
      }
    }
    else
    {
      double v17 = 0;
      int v18 = 1;
      while (v16 != v9)
      {
        if (v16 == 254) {
          double v17 = v15;
        }
        unsigned int v14 = (v14 + v18) & v11;
        uint64_t v15 = (void *)(v10 + 8 * v14);
        int v16 = *(unsigned __int8 *)v15;
        ++v18;
        if (v16 == 255)
        {
          if (v17)
          {
            *(unsigned char *)double v17 = -1;
            *((_DWORD *)v17 + nw_tcp_options_set_no_delay(options, 1) = 0;
            --*(_DWORD *)(v70 - 16);
            uint64_t v15 = v17;
          }
          goto LABEL_16;
        }
      }
    }
LABEL_22:
    ++*((_DWORD *)v15 + 1);
    int v23 = v8[33];
    uint64_t v24 = v69;
    if (v69
      || (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v69, 0), (uint64_t v24 = v69) != 0))
    {
      int v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      int v25 = 0;
    }
    unsigned int v26 = 9 * ((~(v23 << 15) + v23) ^ ((~(v23 << 15) + v23) >> 10));
    unsigned int v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
    unsigned int v28 = v25 & (v27 ^ HIWORD(v27));
    uint64_t v29 = (void *)(v24 + 8 * v28);
    int v30 = *(unsigned __int8 *)v29;
    if (v30 == 255)
    {
LABEL_33:
      *(unsigned char *)uint64_t v29 = v23;
      *((_DWORD *)v29 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v33 = v69;
      if (v69) {
        int v34 = *(_DWORD *)(v69 - 12) + 1;
      }
      else {
        int v34 = 1;
      }
      *(_DWORD *)(v69 - 12) = v34;
      uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
      unint64_t v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
      {
        if (v36 > 2 * v35) {
          goto LABEL_39;
        }
LABEL_38:
        uint64_t v29 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v69, v29);
        goto LABEL_39;
      }
      if (3 * v36 <= 4 * v35) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v31 = 0;
      int v32 = 1;
      while (v30 != v23)
      {
        if (v30 == 254) {
          uint64_t v31 = v29;
        }
        unsigned int v28 = (v28 + v32) & v25;
        uint64_t v29 = (void *)(v24 + 8 * v28);
        int v30 = *(unsigned __int8 *)v29;
        ++v32;
        if (v30 == 255)
        {
          if (v31)
          {
            *(unsigned char *)uint64_t v31 = -1;
            *((_DWORD *)v31 + nw_tcp_options_set_no_delay(options, 1) = 0;
            --*(_DWORD *)(v69 - 16);
            uint64_t v29 = v31;
          }
          goto LABEL_33;
        }
      }
    }
LABEL_39:
    ++*((_DWORD *)v29 + 1);
    int v37 = v8[34];
    uint64_t v38 = v68;
    if (v68
      || (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v68, 0), (uint64_t v38 = v68) != 0))
    {
      int v39 = *(_DWORD *)(v38 - 8);
    }
    else
    {
      int v39 = 0;
    }
    unsigned int v40 = 9 * ((~(v37 << 15) + v37) ^ ((~(v37 << 15) + v37) >> 10));
    unsigned int v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
    unsigned int v42 = v39 & (v41 ^ HIWORD(v41));
    char v43 = (void *)(v38 + 8 * v42);
    int v44 = *(unsigned __int8 *)v43;
    if (v44 == 255)
    {
LABEL_50:
      *(unsigned char *)char v43 = v37;
      *((_DWORD *)v43 + nw_tcp_options_set_no_delay(options, 1) = 0;
      uint64_t v47 = v68;
      if (v68) {
        int v48 = *(_DWORD *)(v68 - 12) + 1;
      }
      else {
        int v48 = 1;
      }
      *(_DWORD *)(v68 - 12) = v48;
      uint64_t v49 = (*(_DWORD *)(v47 - 16) + v48);
      unint64_t v50 = *(unsigned int *)(v47 - 4);
      if (v50 <= 0x400)
      {
        if (3 * v50 > 4 * v49) {
          goto LABEL_56;
        }
LABEL_55:
        char v43 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v68, v43);
        goto LABEL_56;
      }
      if (v50 <= 2 * v49) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v45 = 0;
      int v46 = 1;
      while (v44 != v37)
      {
        if (v44 == 254) {
          uint64_t v45 = v43;
        }
        unsigned int v42 = (v42 + v46) & v39;
        char v43 = (void *)(v38 + 8 * v42);
        int v44 = *(unsigned __int8 *)v43;
        ++v46;
        if (v44 == 255)
        {
          if (v45)
          {
            *(unsigned char *)uint64_t v45 = -1;
            *((_DWORD *)v45 + nw_tcp_options_set_no_delay(options, 1) = 0;
            --*(_DWORD *)(v68 - 16);
            char v43 = v45;
          }
          goto LABEL_50;
        }
      }
    }
LABEL_56:
    ++*((_DWORD *)v43 + 1);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v66);
    uint64_t v6 = v67;
  }
  while (v67 != v7);
  uint64_t v51 = v70;
LABEL_68:
  uint64_t v52 = 5;
  if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 5u) & 1) == 0)
  {
    uint64_t v52 = 4;
    if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 4u) & 1) == 0)
    {
      uint64_t v52 = 3;
      if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 3u) & 1) == 0)
      {
        uint64_t v52 = 2;
        if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 2u) & 1) == 0)
        {
          uint64_t v52 = 1;
          if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 1u) & 1) == 0)
          {
            if (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 6u))uint64_t v52 = 6; {
            else
            }
              uint64_t v52 = 0;
          }
        }
      }
    }
  }
  uint64_t v53 = v69;
  uint64_t v54 = 2;
  if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v69, 2u) & 1) == 0)uint64_t v54 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v53, 1u); {
  uint64_t v55 = v68;
  }
  uint64_t v56 = 3;
  uint64_t v57 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v68, 3u);
  if ((v57 & 1) == 0)
  {
    uint64_t v57 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v55, 1u);
    uint64_t v56 = v57;
  }
  uint64_t v58 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v57);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, v52, v54, v56);
  if (v55) {
    uint64_t result = WTF::fastFree((WTF *)(v55 - 16), v60);
  }
  if (v53) {
    uint64_t result = WTF::fastFree((WTF *)(v53 - 16), v60);
  }
  if (v51) {
    return WTF::fastFree((WTF *)(v51 - 16), v60);
  }
  return result;
}

WebCore::AudioSession *WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(WebKit::RemoteAudioSessionProxyManager *this)
{
  uint64_t v2 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::singleton(this);
  isAudioCaptureUnitRunning = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::isAudioCaptureUnitRunning(v2);
  if (isAudioCaptureUnitRunning)
  {
    WebCore::CoreAudioCaptureSourceFactory::singleton(isAudioCaptureUnitRunning);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v4 = (atomic_uint *)*((void *)this + 1);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    uint64_t v5 = (WebCore::AudioSession *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9C0AD0;
    *((void *)v5 + nw_tcp_options_set_no_delay(options, 1) = v4;
    uint64_t v21 = v5;
    WebCore::CoreAudioCaptureSourceFactory::whenAudioCaptureUnitIsNotRunning();
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      return (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSession *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v21, (void **)this + 5);
    uint64_t v7 = *((void *)this + 5);
    if (v7)
    {
      uint64_t v8 = *(unsigned int *)(v7 - 4);
      uint64_t v9 = v7 + 8 * v8;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    int v16 = (char *)this + 40;
    uint64_t v17 = v9;
    uint64_t v18 = v9;
    uint64_t v19 = v9;
    uint64_t v20 = v7 + 8 * v8;
    uint64_t result = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
    uint64_t v10 = v22;
    uint64_t v11 = v17;
    if (v22 != v17)
    {
      unint64_t v12 = -1;
      do
      {
        unint64_t v13 = *(void *)(*(void *)(*(void *)v10 + 8) + 48);
        if (v13 < v12 && v13 != 0) {
          unint64_t v12 = v13;
        }
        uint64_t result = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
        uint64_t v10 = v22;
      }
      while (v22 != v11);
      if (v12 != -1)
      {
        uint64_t v15 = WebCore::AudioSession::sharedSession(result);
        return (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v15 + 112))(v15, v12);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxy::tryToSetActive(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6 = (WTF *)(WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)a1) + 40);
  if (a2)
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v57, (void **)v6);
    uint64_t v7 = *(void **)v6;
    if (*(void *)v6)
    {
      uint64_t v8 = *((unsigned int *)v7 - 1);
      uint64_t v9 = &v7[v8];
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v52 = v6;
    uint64_t v53 = v9;
    uint64_t v54 = v9;
    uint64_t v55 = v9;
    uint64_t v56 = &v7[v8];
    unint64_t v13 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v52);
    unsigned int v14 = v58;
    uint64_t v15 = v53;
    while (v14 != v15)
    {
      uint64_t v16 = *(void *)(*v14 + 8);
      if (*(unsigned char *)(v16 + 56) && !*(unsigned char *)(v16 + 57))
      {
        if (*(unsigned char *)(a1 + 32) != 1)
        {
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v57, (void **)v6);
          unsigned int v27 = *(void **)v6;
          if (*(void *)v6)
          {
            uint64_t v28 = *((unsigned int *)v27 - 1);
            uint64_t v29 = &v27[v28];
          }
          else
          {
            uint64_t v29 = 0;
            uint64_t v28 = 0;
          }
          uint64_t v52 = v6;
          uint64_t v53 = v29;
          uint64_t v54 = v29;
          uint64_t v55 = v29;
          uint64_t v56 = &v27[v28];
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v52);
          int v30 = v58;
          for (i = v53; v58 != i; int v30 = v58)
          {
            uint64_t v32 = *(void *)(*v30 + 8);
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(v32 + 16), *(void *)(v32 + 24), &v60);
            uint64_t v33 = v60;
            uint64_t v34 = *(void *)(v60 + 88);
            uint64_t v60 = 0;
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v33 + 16));
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a1 + 16), *(void *)(a1 + 24), &v60);
            uint64_t v35 = v60;
            uint64_t v36 = *(void *)(v60 + 88);
            uint64_t v60 = 0;
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v35 + 16));
            if (v34 != v36 && *(unsigned char *)(v32 + 56) && *(unsigned char *)(v32 + 32) != 1)
            {
              *(unsigned char *)(v32 + 57) = 1;
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(v32 + 16), *(void *)(v32 + 24), &v60);
              uint64_t v37 = v60;
              uint64_t v38 = *(void *)(v60 + 56);
              uint64_t v60 = 0;
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v37 + 16));
              IPC::Connection::send<Messages::RemoteAudioSession::BeginInterruptionRemote>(v38);
            }
            WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v57);
          }
        }
        goto LABEL_35;
      }
      unint64_t v13 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v57);
      unsigned int v14 = v58;
    }
    uint64_t v17 = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(v13);
    if (WebCore::AudioSession::tryToSetActive(v17)) {
      goto LABEL_35;
    }
    uint64_t v18 = 0;
    BOOL v19 = 0;
  }
  else
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v57, (void **)v6);
    uint64_t v10 = *(void **)v6;
    if (*(void *)v6)
    {
      uint64_t v11 = *((unsigned int *)v10 - 1);
      unint64_t v12 = &v10[v11];
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    uint64_t v52 = v6;
    uint64_t v53 = v12;
    uint64_t v54 = v12;
    uint64_t v55 = v12;
    uint64_t v56 = &v10[v11];
    uint64_t v20 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v52);
    uint64_t v21 = v58;
    uint64_t v22 = v53;
    while (v21 != v22)
    {
      uint64_t v23 = *(void *)(*v21 + 8);
      if (v23 != a1 && *(unsigned char *)(v23 + 56) != 0) {
        goto LABEL_35;
      }
      uint64_t v20 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v57);
      uint64_t v21 = v58;
    }
    int v25 = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(v20);
    int v26 = WebCore::AudioSession::tryToSetActive(v25);
    uint64_t v18 = 0;
    BOOL v19 = 0;
    if (!v26) {
      goto LABEL_38;
    }
LABEL_35:
    BOOL v19 = *(unsigned __int8 *)(a1 + 56) != a2;
    *(unsigned char *)(a1 + 56) = a2;
    if (a2) {
      *(unsigned char *)(a1 + 57) = 0;
    }
    uint64_t v18 = 1;
  }
LABEL_38:
  uint64_t v39 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v18);
  (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  if (v19) {
    WebKit::RemoteAudioSessionProxy::configurationChanged((WebKit::RemoteAudioSessionProxy *)a1);
  }
  uint64_t v40 = WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)a1);
  if ((WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled((WebCore::PlatformMediaSessionManager *)v40) & 1) == 0)
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    if (*(void *)(*(void *)(*(void *)(*(void *)(v40 + 32) + 8) + 40) + 352))
    {
      xpc_connection_get_audit_token();
      char v59 = 1;
      unsigned int v41 = (_OWORD *)WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, 1uLL, (unint64_t)&v57);
      int v42 = HIDWORD(v53);
      char v43 = (_OWORD *)((char *)v52 + 32 * HIDWORD(v53));
      long long v44 = v41[1];
      _OWORD *v43 = *v41;
      v43[1] = v44;
      HIDWORD(v53) = v42 + 1;
    }
    uint64_t v45 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v45 = &unk_1EE9C0AF8;
    v45[1] = &v52;
    uint64_t v57 = v45;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((unsigned int *)(v40 + 40), &v57);
    int v46 = (WebCore::AudioSession *)(*(uint64_t (**)(void *))(*v45 + 8))(v45);
    uint64_t v47 = WebCore::AudioSession::sharedSession(v46);
    (*(void (**)(uint64_t, WTF **))(*(void *)v47 + 248))(v47, &v52);
    uint64_t v49 = v52;
    if (v52)
    {
      uint64_t v52 = 0;
      LODWORD(v53) = 0;
      WTF::fastFree(v49, v48);
    }
  }
  unint64_t v50 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)a1);

  return WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(v50);
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxy::configurationChanged(WebKit::RemoteAudioSessionProxy *this)
{
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 2), *((void *)this + 3), v11);
  uint64_t v2 = v11[0];
  uint64_t v3 = *((void *)v11[0] + 7);
  v11[0] = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v2 + 2));
  WebKit::RemoteAudioSessionProxy::configuration(this, (uint64_t)v11);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 723;
  *((void *)v4 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v13 = v4;
  IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::encode(v4, (uint64_t)v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  uint64_t v6 = v13;
  unint64_t v13 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v9, v10);
  }
  uint64_t v7 = v12;
  unint64_t v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(WebKit::RemoteAudioSessionProxyManager *this)
{
  int v25 = 0;
  uint64_t v2 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v23, (void **)this + 5);
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v18 = v2;
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  uint64_t v22 = v3 + 8 * v4;
  uint64_t v6 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
  uint64_t v7 = v24;
  uint64_t v8 = v19;
  if (v24 != v19)
  {
    char v9 = 0;
    unsigned __int8 v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)v7 + 8);
      if (*(unsigned char *)(v11 + 56))
      {
        unsigned int v12 = *(unsigned __int8 *)(v11 + 35);
        if (v9 && v12 <= v10)
        {
          char v9 = 1;
        }
        else
        {
          WTF::String::operator=((uint64_t *)&v25, (WTF::StringImpl **)(v11 + 40));
          char v9 = 1;
          unsigned __int8 v10 = v12;
        }
      }
      uint64_t v6 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
      uint64_t v7 = v24;
    }
    while (v24 != v8);
  }
  uint64_t v13 = WebCore::AudioSession::sharedSession(v6);
  unsigned int v14 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(void *)v13 + 256))(v13, &v25);
  uint64_t v15 = WebCore::AudioSession::sharedSession(v14);
  (*(void (**)(void))(*(void *)v15 + 272))();
  uint64_t result = v25;
  int v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteAudioSession::BeginInterruptionRemote>(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 722;
  *((void *)v2 + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v7 = v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::beginInterruptionRemote(WebKit::RemoteAudioSessionProxyManager *this)
{
  uint64_t v2 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(uint64_t, WebKit::RemoteAudioSessionProxyManager *))(*(void *)v2 + 216))(v2, this);
  (*(void (**)(uint64_t))(*(void *)v2 + 168))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t, WebKit::RemoteAudioSessionProxyManager *))(*(void *)v2 + 208);

  return v3(v2, this);
}

uint64_t WebKit::RemoteAudioSessionProxyManager::endInterruptionRemote(WebCore::AudioSession *a1, uint64_t a2)
{
  uint64_t v4 = WebCore::AudioSession::sharedSession(a1);
  (*(void (**)(uint64_t, WebCore::AudioSession *))(*(void *)v4 + 216))(v4, a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 176))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, WebCore::AudioSession *))(*(void *)v4 + 208);

  return v5(v4, a1);
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxy::setSceneIdentifier(WebKit::RemoteAudioSessionProxy *this, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)this + 5, a2);
  uint64_t v3 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager(this);

  return WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(v3);
}

BOOL WebKit::RemoteAudioSessionProxy::allowTestOnlyIPC(WebKit::RemoteAudioSessionProxy *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((void *)this + 3), &v6);
  uint64_t v5 = v6;
  if (!v6) {
    return 0;
  }
  BOOL v3 = *(unsigned char *)(v6 + 376) != 0;
  uint64_t v6 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 16));
  return v3;
}

atomic_uchar *WebKit::RemoteAudioSessionProxy::triggerBeginInterruptionForTesting(WebKit::RemoteAudioSessionProxy *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 2), *((void *)this + 3), v10);
  uint64_t v2 = *(void *)v10;
  int v3 = *(unsigned __int8 *)(*(void *)v10 + 376);
  *(void *)unsigned __int8 v10 = 0;
  uint64_t v4 = (WebCore::AudioSession *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 16));
  if (v3)
  {
    uint64_t v5 = WebCore::AudioSession::sharedSession(v4);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 184))(v5);
  }
  else
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned __int8 v10 = 136446210;
      *(void *)&void v10[4] = "void WebKit::RemoteAudioSessionProxy::triggerBeginInterruptionForTesting()";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioSessionProxy.cpp 188: Invalid message dispatched %{public}s", v10, 0xCu);
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 2), *((void *)this + 3), v10);
    uint64_t v8 = *(void *)v10;
    uint64_t v9 = *(void *)(*(void *)v10 + 56);
    *(void *)unsigned __int8 v10 = 0;
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
    *(unsigned char *)(v9 + 98) = 1;
  }
  return result;
}

atomic_uchar *WebKit::RemoteAudioSessionProxy::triggerEndInterruptionForTesting(WebKit::RemoteAudioSessionProxy *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 2), *((void *)this + 3), v10);
  uint64_t v2 = *(void *)v10;
  int v3 = *(unsigned __int8 *)(*(void *)v10 + 376);
  *(void *)unsigned __int8 v10 = 0;
  uint64_t v4 = (WebCore::AudioSession *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 16));
  if (v3)
  {
    uint64_t v5 = WebCore::AudioSession::sharedSession(v4);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  }
  else
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned __int8 v10 = 136446210;
      *(void *)&void v10[4] = "void WebKit::RemoteAudioSessionProxy::triggerEndInterruptionForTesting()";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioSessionProxy.cpp 194: Invalid message dispatched %{public}s", v10, 0xCu);
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((atomic_uchar **)this + 2), *((void *)this + 3), v10);
    uint64_t v8 = *(void *)v10;
    uint64_t v9 = *(void *)(*(void *)v10 + 56);
    *(void *)unsigned __int8 v10 = 0;
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
    *(unsigned char *)(v9 + 98) = 1;
  }
  return result;
}

WebKit::RemoteAudioSessionProxyManager *WebKit::RemoteAudioSessionProxyManager::RemoteAudioSessionProxyManager(WebKit::RemoteAudioSessionProxyManager *this, WebKit::GPUProcess *a2)
{
  uint64_t v4 = (char *)this + 16;
  *(void *)this = &unk_1EE9C0870;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)this + 2) = &unk_1EE9C08C0;
  *((void *)this + 3) = 0;
  uint64_t v5 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v6 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v6, 1u);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = v6;
  uint64_t v7 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v5);
  uint64_t v8 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, WebKit::RemoteAudioSessionProxyManager *))(*(void *)v7 + 208))(v7, this);
  uint64_t v9 = WebCore::AudioSession::sharedSession(v8);
  (*(void (**)(uint64_t, char *))(*(void *)v9 + 120))(v9, v4);
  return this;
}

void WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager(WebKit::RemoteAudioSessionProxyManager *this)
{
  *(void *)this = &unk_1EE9C0870;
  uint64_t v2 = (char *)this + 16;
  *((void *)this + 2) = &unk_1EE9C08C0;
  uint64_t v3 = WebCore::AudioSession::sharedSession(this);
  uint64_t v4 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, WebKit::RemoteAudioSessionProxyManager *))(*(void *)v3 + 216))(v3, this);
  uint64_t v5 = WebCore::AudioSession::sharedSession(v4);
  (*(void (**)(uint64_t, char *))(*(void *)v5 + 128))(v5, v2);
  uint64_t v7 = (unsigned int **)*((void *)this + 5);
  if (v7) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, v6);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    unsigned __int8 v10 = (unsigned int *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v6);
    }
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager(WebKit::RemoteAudioSessionProxyManager *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

WebCore::AudioSession *WebKit::RemoteAudioSessionProxyManager::addProxy(WebKit::RemoteAudioSessionProxyManager *a1, unsigned int *a2, uint64_t a3)
{
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>((uint64_t)a1 + 40, a2, (uint64_t)v8);
  uint64_t result = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxyManager::updateCategory(a1);
  if (*(unsigned char *)(a3 + 32))
  {
    uint64_t result = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(result);
    if (*(unsigned char *)(a3 + 32))
    {
      long long v6 = *(_OWORD *)(a3 + 16);
      v7[0] = *(_OWORD *)a3;
      v7[1] = v6;
      return (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSession *, _OWORD *))(*(void *)result + 240))(result, v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v1nw_tcp_options_set_no_delay(options, 1) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v1nw_tcp_options_set_no_delay(options, 1) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  uint64_t v20 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  uint64_t v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::removeProxy(WebKit::RemoteAudioSessionProxyManager *this, WebKit::RemoteAudioSessionProxy *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 40);
  unsigned int v5 = *((_DWORD *)this + 13);
  unsigned int v6 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 12) = v6;
  if (v6 > v5)
  {
    uint64_t v7 = *v4;
    if (*v4)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v4;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v4;
        if (*v4) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 12) = v14 - v9;
        uint64_t v7 = *v4;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          uint64_t v7 = *((void *)this + 5);
          *((_DWORD *)this + 12) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)this + 12) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)this + 13) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *((_DWORD *)this + 12) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v19 = *((void *)a2 + 1);
  if (v19 && *(void *)(v19 + 8))
  {
    uint64_t v23 = *((void *)a2 + 1);
    uint64_t v20 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v23);
    if (*v4)
    {
      uint64_t v21 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v21 == v20) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v20) {
        goto LABEL_37;
      }
      uint64_t v21 = 0;
    }
    if ((unsigned int **)v21 != v20) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v20);
    }
  }
LABEL_37:

  return WebKit::RemoteAudioSessionProxyManager::updateCategory(this);
}

void *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(void *a1, void **a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  unsigned int v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *((unsigned int *)v6 - 1);
    int v8 = &v6[v7];
  }
  else
  {
    int v8 = 0;
    uint64_t v7 = 0;
  }
  a1[3] = v8;
  a1[4] = &v6[v7];

  return WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(unsigned int *result, void *a2)
{
  uint64_t v3 = (uint64_t *)result;
  if (*(void *)result && (uint64_t v4 = *(unsigned int *)(*(void *)result - 12), v4))
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v3);
  uint64_t v7 = result;
  int v8 = v6;
  if (*v3) {
    uint64_t v9 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if ((unsigned int *)v9 != result)
  {
    unsigned int v10 = 0;
    int v11 = 1;
    do
    {
      unsigned int v12 = v11;
      uint64_t v13 = *(void *)(*(void *)v7 + 8);
      if (v13)
      {
        uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 8), *(void *)(*(void *)v7 + 8));
        int v14 = *(atomic_uint **)(v13 + 8);
        if (v14) {
          atomic_fetch_add(v14, 1u);
        }
      }
      else
      {
        int v14 = 0;
      }
      *((void *)v5 + v10) = v14;
      while (1)
      {
        v7 += 2;
        if (v7 == v8) {
          break;
        }
        if ((unint64_t)(*(void *)v7 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v7 = v8;
LABEL_20:
      ++v10;
      int v11 = v12 + 1;
    }
    while (v7 != (unsigned int *)v9);
    if (v10)
    {
      uint64_t v15 = 8 * v12;
      unsigned int v16 = v5;
      do
      {
        if (*(void *)v16)
        {
          if (*(void *)(*(void *)v16 + 8))
          {
            uint64_t v20 = *(void *)v16;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20))
            {
              if (*(void *)v16) {
                uint64_t v17 = *(void *)(*(void *)v16 + 8);
              }
              else {
                uint64_t v17 = 0;
              }
              (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v17);
            }
          }
        }
        unsigned int v16 = (WTF *)((char *)v16 + 8);
        v15 -= 8;
      }
      while (v15);
      uint64_t v18 = 8 * v12;
      uint64_t v19 = (unsigned int **)v5;
      do
      {
        uint64_t result = *v19;
        *uint64_t v19 = 0;
        if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
        }
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
  }
  if (v5) {
    return (unsigned int *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::beginAudioSessionInterruption(WebKit::RemoteAudioSessionProxyManager *this)
{
  uint64_t v1 = (unsigned int *)((char *)this + 40);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v2 = &unk_1EE9C0B20;
  uint64_t v5 = v2;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v5);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WebKit::RemoteAudioSessionProxyManager::endAudioSessionInterruption(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned int *)(a1 + 40);
  uint64_t v4 = (unsigned char *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9C0B48;
  v4[8] = a2;
  uint64_t v7 = v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v3, &v7);
  uint64_t v5 = *(uint64_t (**)(unsigned char *))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::RemoteAudioSessionProxyManager::configurationDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  uint64_t v2 = (unsigned int *)((char *)this + 40);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v3 = &unk_1EE9C0B70;
  uint64_t v6 = v3;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v6);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::hardwareMutedStateDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  return WebKit::RemoteAudioSessionProxyManager::configurationDidChange((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::bufferSizeDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  return WebKit::RemoteAudioSessionProxyManager::configurationDidChange((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::sampleRateDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  return WebKit::RemoteAudioSessionProxyManager::configurationDidChange((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(uint64_t a1, uint64_t a2, atomic_uint *a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EE9C08F8;
  *(void *)(a1 + 8) = 0;
  int v8 = *(atomic_uchar **)(a2 + 16);
  if (v8) {
    int v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = a2;
  atomic_fetch_add(a3 + 2, 1u);
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = (*(uint64_t (**)(atomic_uint *))(*(void *)a3 + 48))(a3);
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9C0B98;
  uint64_t v22 = v9;
  *(void *)(a1 + 72) = WebCore::TrackPrivateBase::addClient();
  unsigned int v10 = v22;
  uint64_t v22 = 0;
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a2 + 56);
  WebKit::RemoteAudioTrackProxy::configuration((WebKit::RemoteAudioTrackProxy *)&v22, a1);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 148;
  *((void *)v13 + nw_tcp_options_set_no_delay(options, 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v26 = v13;
  IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::encode(v13, (uint64_t)&v22);
  IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v26, 0, 0);
  uint64_t v15 = v26;
  int v26 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v20, v21);
  }
  unsigned int v16 = v25;
  int v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v24;
  uint64_t v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v23;
  uint64_t v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::RemoteAudioTrackProxy::configuration(WebKit::RemoteAudioTrackProxy *this, uint64_t a2)
{
  *(void *)this = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48))(*(void *)(a2 + 40));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(a2 + 40) + 56))(&v14);
  uint64_t v4 = v14;
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = v4;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(a2 + 40) + 64))(&v13);
  uint64_t v5 = v13;
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  *((void *)this + 2) = v5;
  *((void *)this + 3) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 96))(*(void *)(a2 + 40));
  *((void *)this + 4) = v6;
  *((_DWORD *)this + 10) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 72))(*(void *)(a2 + 40));
  uint64_t v7 = *(unsigned char **)(a2 + 40);
  *((unsigned char *)this + 44) = v7[48];
  *((unsigned char *)this + 45) = (*(uint64_t (**)(unsigned char *))(*(void *)v7 + 128))(v7);
  uint64_t v9 = *(void *)(a2 + 40);
  unsigned int v10 = *(_DWORD **)(v9 + 56);
  if (v10) {
    *v10 += 2;
  }
  *((void *)this + 6) = v10;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v9 + 64);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  int v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy(WebKit::RemoteAudioTrackProxy *this)
{
  WebCore::TrackPrivateBase::removeClient(*((WebCore::TrackPrivateBase **)this + 5));
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteAudioTrackProxy::configurationChanged(WebKit::RemoteAudioTrackProxy *this)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *((void *)this + 4), &v21);
    if (v21)
    {
      uint64_t v3 = *(void *)(v21 + 56);
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 48))(*((void *)this + 5));
      uint64_t v5 = *((void *)this + 6);
      *((void *)this + 6) = v4;
      WebKit::RemoteAudioTrackProxy::configuration((WebKit::RemoteAudioTrackProxy *)v17, (uint64_t)this);
      uint64_t v6 = *((void *)this + 7);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 171;
      *((void *)v7 + nw_tcp_options_set_no_delay(options, 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v22 = v7;
      int v8 = (void *)IPC::Encoder::grow(v7, 8uLL, 8);
      if (v9 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        *int v8 = v5;
        IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::encode(v7, (uint64_t)v17);
        IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
        uint64_t v11 = v22;
        uint64_t v22 = 0;
        if (v11)
        {
          IPC::Encoder::~Encoder(v11, v10);
          WTF::fastFree(v15, v16);
        }
        uint64_t v12 = v20;
        uint64_t v20 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t v13 = v19;
        uint64_t v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        uint64_t result = (uint64_t)v18;
        uint64_t v18 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        uint64_t v14 = v21;
        uint64_t v21 = 0;
        if (v14) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
        }
      }
    }
  }
  return result;
}

WebKit::RemoteAudioTrackProxy *WebKit::RemoteAudioTrackProxy::enabledChanged(WebKit::RemoteAudioTrackProxy *this, int a2)
{
  if (*((unsigned __int8 *)this + 64) != a2)
  {
    *((unsigned char *)this + 64) = a2;
    return (WebKit::RemoteAudioTrackProxy *)WebKit::RemoteAudioTrackProxy::configurationChanged(this);
  }
  return this;
}

WebKit::RemoteCDMFactoryProxy *WebKit::RemoteCDMFactoryProxy::RemoteCDMFactoryProxy(WebKit::RemoteCDMFactoryProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *(void *)this = &unk_1EE9C0950;
  *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  *((void *)this + 2) = &unk_1EE9C0990;
  uint64_t v4 = (atomic_uchar *)*((void *)a2 + 2);
  if (v4) {
    uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  *((void *)this + 3) = v4;
  *((void *)this + 4) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return this;
}

void WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(WebKit::RemoteCDMFactoryProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    *((void *)this + 5) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    if (v7)
    {
      int v8 = (uint64_t *)(v6 + 8);
      do
      {
        if (*(v8 - 1) != -1)
        {
          uint64_t v9 = *v8;
          *int v8 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v10, a2);
  }
  uint64_t v11 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCDMFactoryProxy::clear(WebKit::RemoteCDMFactoryProxy *this, void *a2)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    *((void *)this + 5) = 0;
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(result, a2);
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(WebKit::RemoteCDMFactoryProxy *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy((WebKit::RemoteCDMFactoryProxy *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCDMFactoryProxy::createCDM(uint64_t a1, WebKit *this, uint64_t *a3)
{
  uint64_t v5 = WebKit::factoryForKeySystem(this, this);
  if (!v5)
  {
    uint64_t v46 = 0;
    *((void *)&v45 + nw_tcp_options_set_no_delay(options, 1) = 0;
    LOWORD(v45) = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v24 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v24 + 16))(v24, &v46, &v43);
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v26);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 16))(&v46);
  if (v46)
  {
    WebKit::RemoteCDMProxy::create(&v46, &v42);
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    uint64_t v41 = IdentifierInternal;
    uint64_t v7 = *(void *)(v42 + 32);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v43, v7);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v44, v7 + 16);
    long long v45 = *(_OWORD *)(v7 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = (uint64_t *)(a1 + 40);
    uint64_t v8 = v10;
    if (v10
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9),
          (uint64_t v8 = *v9) != 0))
    {
      int v11 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      int v11 = 0;
    }
    unint64_t v12 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
    unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    if (*v16)
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != IdentifierInternal)
      {
        if (v17 == -1) {
          uint64_t v18 = v16;
        }
        unsigned int v15 = (v15 + v19) & v11;
        unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
        uint64_t v17 = *v16;
        ++v19;
        if (!*v16)
        {
          if (v18)
          {
            *uint64_t v18 = 0;
            v18[1] = 0;
            --*(_DWORD *)(*v9 - 16);
            unsigned int v16 = v18;
          }
          goto LABEL_14;
        }
      }
      uint64_t v31 = v42;
      uint64_t v42 = 0;
      uint64_t v32 = v16[1];
      v16[1] = v31;
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      }
      goto LABEL_29;
    }
LABEL_14:
    uint64_t *v16 = IdentifierInternal;
    uint64_t v20 = v42;
    uint64_t v42 = 0;
    uint64_t v21 = v16[1];
    v16[1] = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *v9;
    if (*v9) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v33 = *v9;
    if (*v9) {
      int v34 = *(_DWORD *)(v33 - 12);
    }
    else {
      int v34 = 0;
    }
    uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
    unint64_t v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
      {
LABEL_29:
        uint64_t v37 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v37 + 16))(v37, &v41, &v43);
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v38);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v39);
        uint64_t v40 = v42;
        uint64_t v42 = 0;
        if (v40) {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
        goto LABEL_31;
      }
    }
    else if (3 * v36 > 4 * v35)
    {
      goto LABEL_29;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9);
    goto LABEL_29;
  }
  uint64_t v42 = 0;
  *((void *)&v45 + nw_tcp_options_set_no_delay(options, 1) = 0;
  LOWORD(v45) = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v28 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v28 + 16))(v28, &v42, &v43);
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v29);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v30);
LABEL_31:
  uint64_t result = v46;
  uint64_t v46 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::factoryForKeySystem(WebKit *this, const WTF::String *a2)
{
  uint64_t v3 = WebCore::CDMFactory::registeredFactories(this);
  if (!*(_DWORD *)(v3 + 12)) {
    return 0;
  }
  uint64_t v4 = v3;
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, WebKit *))(**(void **)(*(void *)v4 + 8 * v5) + 24))(*(void *)(*(void *)v4 + 8 * v5), this);
    if (result) {
      break;
    }
    if (++v5 >= *(unsigned int *)(v4 + 12)) {
      return 0;
    }
  }
  if (v5 < *(unsigned int *)(v4 + 12)) {
    return *(void *)(*(void *)v4 + 8 * v5);
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteCDMFactoryProxy::supportsKeySystem(int a1, WebKit *this, uint64_t *a3)
{
  BOOL v4 = WebKit::factoryForKeySystem(this, this) != 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void WebKit::RemoteCDMFactoryProxy::didReceiveCDMMessage(WebKit::RemoteCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a3 + 8);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = "void WebKit::RemoteCDMFactoryProxy::didReceiveCDMMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteCDMFactoryProxy.cpp 99: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v6 = (WTF::StringImpl *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 5), v4);
    if (v6)
    {
      WebKit::RemoteCDMProxy::didReceiveMessage(v6, (atomic_uchar *volatile *)a2, a3);
    }
  }
}

void WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceMessage(WebKit::RemoteCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(*((void *)a3 + 8) - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v7 = 136446210;
      *(void *)&v7[4] = "void WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteCDMFactoryProxy.cpp 106: Invalid message dispatched %{public}s", v7, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    *(void *)uint64_t v7 = *((void *)a3 + 8);
    uint64_t v5 = (WTF::StringImpl *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 6, v7);
    if (v5) {
      WebKit::RemoteCDMInstanceProxy::didReceiveMessage(v5, (atomic_uchar *volatile *)a2, a3);
    }
  }
}

void WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceSessionMessage(WebKit::RemoteCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a3 + 8);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = "void WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceSessionMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteCDMFactoryProxy.cpp 113: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v6 = (WTF::StringImpl *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 7), v4);
    if (v6)
    {
      WebKit::RemoteCDMInstanceSessionProxy::didReceiveMessage(v6, (atomic_uchar *volatile *)a2, (atomic_uchar *volatile **)a3);
    }
  }
}

BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMMessage(uint64_t a1, uint64_t a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 64);
  if ((unint64_t)(v5 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      unint64_t v12 = "BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMMessage(IPC::Connection &, IPC::Decoder &, UniqueRef<IPC::Encoder> &)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteCDMFactoryProxy.cpp 120: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    return 0;
  }
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 40), v5);
  if (!v8) {
    return 0;
  }

  return WebKit::RemoteCDMProxy::didReceiveSyncMessage(v8, (atomic_uchar *volatile *)a2, a3, a4);
}

uint64_t WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceMessage(uint64_t a1, uint64_t a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(*((void *)a3 + 8) - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v8 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v9 = 136446210;
      *(void *)&v9[4] = "BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceMessage(IPC::Connection &, IPC::D"
                          "ecoder &, UniqueRef<IPC::Encoder> &)";
      _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteCDMFactoryProxy.cpp 128: Invalid message dispatched %{public}s", v9, 0xCu);
    }
    uint64_t result = 0;
    *(unsigned char *)(a2 + 98) = 1;
  }
  else
  {
    *(void *)uint64_t v9 = *((void *)a3 + 8);
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 48), v9);
    if (result) {
      return WebKit::RemoteCDMInstanceProxy::didReceiveSyncMessage(result, (atomic_uchar *volatile *)a2, a3, a4);
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a3 + 64);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      uint64_t v8 = "BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceSessionMessage(IPC::Connection &, IPC::Decoder &"
           ", UniqueRef<IPC::Encoder> &)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteCDMFactoryProxy.cpp 136: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  else
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 56), v4);
  }
  return 0;
}

void WebKit::RemoteCDMFactoryProxy::removeInstance(void *a1, void *a2)
{
  uint64_t v3 = a1 + 6;
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 6, a2);
  uint64_t v5 = a1[6];
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
LABEL_8:
  int v7 = (atomic_uchar *)a1[3];
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, a1[4], &v9);
    uint64_t v8 = v9;
    if (v9)
    {
      if (*v3 && *(_DWORD *)(*v3 - 12))
      {
        uint64_t v9 = 0;
LABEL_15:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
        return;
      }
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v9 + 80));
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        goto LABEL_15;
      }
    }
  }
}

WebKit::RemoteCDMInstanceSessionProxy *WebKit::RemoteCDMFactoryProxy::removeSession(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 56);
  uint64_t result = (WebKit::RemoteCDMInstanceSessionProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 56), a2);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = (WebKit::RemoteCDMInstanceSessionProxy *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, (uint64_t)result);
  }
  return result;
}

uint64_t WebKit::RemoteCDMFactoryProxy::logger(WebKit::RemoteCDMFactoryProxy *this)
{
  uint64_t result = *((void *)this + 8);
  if (!result)
  {
    uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v3 + 8) = 1;
    *(void *)uint64_t v3 = &unk_1EE9BEFD8;
    *(unsigned char *)(v3 + 12) = 1;
    *(void *)(v3 + 16) = this;
    uint64_t v4 = (unsigned int *)*((void *)this + 8);
    *((void *)this + 8) = v3;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = (atomic_uchar *)*((void *)this + 3);
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((void *)this + 4), &v9);
      uint64_t v6 = v9;
      uint64_t result = *((void *)this + 8);
      if (v9)
      {
        uint64_t v8 = *(void *)(v9 + 136);
        BOOL v7 = (v8 & 0x8000000000000000) == 0 || v8 == -1 || *(unsigned char *)(v9 + 380) != 0;
      }
      else
      {
        BOOL v7 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
      BOOL v7 = 0;
      uint64_t result = *((void *)this + 8);
    }
    if (*(WebKit::RemoteCDMFactoryProxy **)(result + 16) == this) {
      *(unsigned char *)(result + 12) = v7;
    }
    uint64_t v9 = 0;
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v6 + 16));
      return *((void *)this + 8);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteCDMFactoryProxy::logger(WebKit::RemoteCDMFactoryProxy *this)
{
  return WebKit::RemoteCDMFactoryProxy::logger((WebKit::RemoteCDMFactoryProxy *)((char *)this - 16));
}

void WebKit::RemoteCDMInstanceProxy::create(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(*(uint64_t (**)(void))(**(void **)a2 + 72))();
  if (v2) {
    *v2 += 2;
  }
  operator new();
}

void *WebKit::RemoteCDMInstanceProxy::RemoteCDMInstanceProxy(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  *a1 = &unk_1EE9C09B8;
  a1[1] = 0;
  a1[2] = &unk_1EE9C0A00;
  a1[3] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v10 = *(atomic_uint **)(a2 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  a1[4] = v10;
  uint64_t v11 = *a3;
  *a3 = 0;
  a1[5] = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  a1[6] = v12;
  a1[7] = a5;
  a1[8] = 0;
  uint64_t v13 = *(void *)(a2 + 40);
  atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
  uint64_t v14 = *(void *)(a2 + 48);
  a1[9] = v13;
  a1[10] = v14;
  uint64_t v15 = a1[5];
  uint64_t v16 = a1[1];
  if (v16) {
    goto LABEL_8;
  }
  uint64_t v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)(v16 + 8) = a1;
  uint64_t v18 = (unsigned int *)a1[1];
  a1[1] = v16;
  if (!v18) {
    goto LABEL_8;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  uint64_t v16 = a1[1];
  if (v16) {
LABEL_8:
  }
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
  uint64_t v22 = (WTF *)v16;
  (*(void (**)(uint64_t, WTF **))(*(void *)v15 + 16))(v15, &v22);
  uint64_t v20 = (unsigned int *)v22;
  uint64_t v22 = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  return a1;
}

void WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy(WebKit::RemoteCDMInstanceProxy *this)
{
  *(void *)this = &unk_1EE9C09B8;
  *((void *)this + 2) = &unk_1EE9C0A00;
  (*(void (**)(void))(**((void **)this + 5) + 24))(*((void *)this + 5));
  uint64_t v3 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, v2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    std::default_delete<WebKit::RemoteCDMInstanceConfiguration>::operator()[abi:sn180100]((uint64_t)this + 48, v5);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  BOOL v7 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v5);
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    uint64_t v10 = (unsigned int *)*((void *)this + 1);
    *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  else
  {
    *((void *)this + nw_tcp_options_set_no_delay(options, 1) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy(this);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy(WebKit::RemoteCDMInstanceProxy *this)
{
}

{
  uint64_t vars8;

  WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy((WebKit::RemoteCDMInstanceProxy *)((char *)this - 16));

  JUMPOUT(0x199740C10);
}

atomic_uchar *WebKit::RemoteCDMInstanceProxy::unrequestedInitializationDataReceived(atomic_uchar *result, uint64_t *a2, atomic_uint **a3)
{
  uint64_t v3 = *((void *)result + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 16);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          BOOL v7 = result;
          uint64_t result = *(atomic_uchar **)(v6 + 24);
          if (result)
          {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(v6 + 32), &v17);
            if (v17)
            {
              uint64_t v10 = *(void *)(v17 + 56);
              uint64_t v11 = *((void *)v7 + 7);
              uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v12 = 754;
              *((void *)v12 + nw_tcp_options_set_no_delay(options, 1) = v11;
              *((void *)v12 + 66) = (char *)v12 + 16;
              *((void *)v12 + 67) = 512;
              *((void *)v12 + 68) = 0;
              *((void *)v12 + 70) = 0;
              *((void *)v12 + 69) = 0;
              IPC::Encoder::encodeHeader(v12);
              uint64_t v18 = v12;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
              IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(v12, *a3);
              IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v18, 0, 0);
              uint64_t result = (atomic_uchar *)v18;
              uint64_t v18 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
                uint64_t result = (atomic_uchar *)WTF::fastFree(v15, v16);
              }
              uint64_t v14 = v17;
              uint64_t v17 = 0;
              if (v14) {
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstanceProxy::initializeWithConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))();
}

uint64_t WebKit::RemoteCDMInstanceProxy::setServerCertificate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 56))();
}

uint64_t WebKit::RemoteCDMInstanceProxy::setStorageDirectory(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = this;
          this = *(void *)(v5 + 24);
          if (this
            && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)this, *(void *)(v5 + 32), &v12), (this = (uint64_t)v12) != 0))
          {
            this = (uint64_t)WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory(v12);
            uint64_t v8 = (WTF::StringImpl **)this;
            uint64_t v11 = v12;
            uint64_t v12 = 0;
            if (v11) {
              this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v11 + 2));
            }
          }
          else
          {
            uint64_t v8 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
          }
          uint64_t v9 = *v8;
          if (v9)
          {
            int v10 = *((_DWORD *)v9 + 1);
            *(_DWORD *)v9 += 2;
            if (v10)
            {
              this = *(void *)a2;
              if (*(void *)a2)
              {
                this = WTF::StringImpl::startsWith();
                if (this) {
                  this = (*(uint64_t (**)(void, const WTF::String *))(**(void **)(v7 + 40) + 64))(*(void *)(v7 + 40), a2);
                }
              }
            }
            if (*(_DWORD *)v9 == 2)
            {
              return WTF::StringImpl::destroy(v9, a2);
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
        }
      }
    }
  }
  return this;
}